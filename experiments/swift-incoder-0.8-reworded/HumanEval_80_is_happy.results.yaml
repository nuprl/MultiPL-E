language: swift
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n\t\n\tlet len = s.characters.count\n\tif len < 3 {\n\t\treturn false\n\t\
    }\n\tvar lastIndex = len - 2\n\twhile lastIndex >= 0 { //\n\t\tif s[lastIndex]\
    \ == s[lastIndex + 1] && s[lastIndex] == s[lastIndex + 2] {\n\t\t\tlastIndex -=\
    \ 2\n\t\t}\n\t\telse {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpakk6v2ps.swift:20:14: error: 'characters' is unavailable: Please\
    \ use String directly\n        let len = s.characters.count\n                \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpakk6v2ps.swift:26:6:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s[lastIndex] == s[lastIndex\
    \ + 1] && s[lastIndex] == s[lastIndex + 2] {\n                   ^~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpakk6v2ps.swift:26:22:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s[lastIndex] == s[lastIndex\
    \ + 1] && s[lastIndex] == s[lastIndex + 2] {\n                               \
    \    ^~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpakk6v2ps.swift:26:42: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s[lastIndex] == s[lastIndex + 1] && s[lastIndex] == s[lastIndex + 2]\
    \ {\n                                                       ^~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpakk6v2ps.swift:26:58:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s[lastIndex] == s[lastIndex\
    \ + 1] && s[lastIndex] == s[lastIndex + 2] {\n                               \
    \                                        ^~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count > 3 && !s.isEmpty && s.utf8.count == 3 && distinctLetters(s)\
    \ != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdlnbim9l.swift:19:62: error: cannot find 'distinctLetters' in scope\n\
    \    return s.count > 3 && !s.isEmpty && s.utf8.count == 3 && distinctLetters(s)\
    \ != nil\n                                                             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n\n    var hashSet\
    \ = [Character]()\n    for char in s.characters {\n        hashSet.append(char)\n\
    \    }\n\n    if s.characters.count == 3 {\n        for index in 0..<3 {\n   \
    \         if hashSet.contains(hashSet[index+1])+hashSet.contains(hashSet[index+2])+hashSet.contains(hashSet[index+3])\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpnqj_c6h8.swift:24:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnqj_c6h8.swift:28:10:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s.characters.count\
    \ == 3 {\n         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpnqj_c6h8.swift:30:50: error: binary operator '+' cannot be applied\
    \ to two 'Bool' operands\n            if hashSet.contains(hashSet[index+1])+hashSet.contains(hashSet[index+2])+hashSet.contains(hashSet[index+3])\
    \ {\n                                                 ^\nSwift.FloatingPoint:1:17:\
    \ note: candidate requires that 'Bool' conform to 'FloatingPoint' (requirement\
    \ specified as 'Self' : 'FloatingPoint')\npublic protocol FloatingPoint : Hashable,\
    \ SignedNumeric, Strideable where Self == Self.Magnitude {\n                ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == s[i] {\n\
    \            count += 1\n        } else {\n            count = 0\n        }\n\
    \        if count == 3 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgo7dbu71.swift:21:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ s[i] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpgo7dbu71.swift:21:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] == s[i] {\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let countDict = Dictionary<Int, Int>()\n    for (idx, _) in s.enumerated()\
    \ {\n        countDict[s.count - 1 - idx] = (countDict[s.count - 1 - idx] ?? 0)\
    \ + 1\n    }\n    return s.count >= 3 && countDict.count == 3 && countDict[3]\
    \ == countDict.keys.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn4mchm3m.swift:21:18: error: cannot assign through subscript: 'countDict'\
    \ is a 'let' constant\n        countDict[s.count - 1 - idx] = (countDict[s.count\
    \ - 1 - idx] ?? 0) + 1\n        ~~~~~~~~~^\n/tmp/tmpn4mchm3m.swift:19:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let countDict = Dictionary<Int,\
    \ Int>()\n    ^~~\n    var\n/tmp/tmpn4mchm3m.swift:23:83: error: value of type\
    \ 'Dictionary<Int, Int>.Keys' has no member 'maxElement'\n    return s.count >=\
    \ 3 && countDict.count == 3 && countDict[3] == countDict.keys.maxElement()\n \
    \                                                                  ~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count > 0 else {\n        return true\n    }\n    let start =\
    \ s.prefix(3) // get the first 3 char\n    let end = s[s.count - 3] // get the\
    \ last 3 char\n    guard !start.isEmpty && !end.isEmpty else {\n        return\
    \ true\n    }\n    return start.isEquating(end)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpvr61cfgi.swift:23:15: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    let end = s[s.count\
    \ - 3] // get the last 3 char\n              ^~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvr61cfgi.swift:24:34:\
    \ error: value of type 'Character' has no member 'isEmpty'\n    guard !start.isEmpty\
    \ && !end.isEmpty else {\n                             ~~~ ^~~~~~~\n/tmp/tmpvr61cfgi.swift:27:18:\
    \ error: value of type 'String.SubSequence' (aka 'Substring') has no member 'isEquating'\n\
    \    return start.isEquating(end)\n           ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 && is_happy_helper(s.characters.filter({is_happy_helper($0)}),\
    \ 3) == true else {\n        return false\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn11q62v0.swift:19:27: error: cannot find 'is_happy_helper' in scope\n\
    \    guard s.count >= 3 && is_happy_helper(s.characters.filter({is_happy_helper($0)}),\
    \ 3) == true else {\n                          ^~~~~~~~~~~~~~~\n/tmp/tmpn11q62v0.swift:19:64:\
    \ error: cannot find 'is_happy_helper' in scope\n    guard s.count >= 3 && is_happy_helper(s.characters.filter({is_happy_helper($0)}),\
    \ 3) == true else {\n                                                        \
    \       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count >= 3 &&\n       s.characters.enumerated().forEach\
    \ { index, character in\n            if index == 3 {\n                if character\
    \ == s.characters[index - 2] {\n                    return false\n           \
    \     }\n            }\n            return true\n        }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpso5ciefp.swift:20:34: error: cannot convert value of type '()'\
    \ to expected argument type 'Bool'\n       s.characters.enumerated().forEach {\
    \ index, character in\n                                 ^\n/tmp/tmpso5ciefp.swift:23:28:\
    \ error: unexpected non-void return value in void function\n                 \
    \   return false\n                           ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    for i in 0..<s.count {\n        if s[i] == s[i+1] && s[i+1] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps724x047.swift:20:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ s[i+1] && s[i+1] == s[i+2] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmps724x047.swift:20:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == s[i+1] && s[i+1] == s[i+2] {\n                   ^~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps724x047.swift:20:30:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i+1] && s[i+1] == s[i+2] {\n\
    \                             ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmps724x047.swift:20:40: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == s[i+1] && s[i+1] == s[i+2] {\n                           \
    \            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty{\n        return true\n    }\n    let len = s.characters.count\n\
    \    let mut counters = (0..<len).map({ 0 })\n    for i in 0..<len {\n       \
    \ counters[i] += 1\n    }\n    if len < 3{\n        return true\n    }\n    for\
    \ i in (0..<len).filter({ counters[i] == 3 }){\n        if s.characters[i] !=\
    \ s.characters[i+1]{\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5r5dhtml.swift:23:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut counters\
    \ = (0..<len).map({ 0 })\n            ^\n/tmp/tmp5r5dhtml.swift:23:13: note: join\
    \ the identifiers together\n    let mut counters = (0..<len).map({ 0 })\n    \
    \    ~~~~^~~~~~~~\n        mutcounters\n/tmp/tmp5r5dhtml.swift:23:13: note: join\
    \ the identifiers together with camel-case\n    let mut counters = (0..<len).map({\
    \ 0 })\n        ~~~~^~~~~~~~\n        mutCounters\n/tmp/tmp5r5dhtml.swift:22:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    let len\
    \ = s.characters.count\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5r5dhtml.swift:23:38: error: contextual type for closure\
    \ argument list expects 1 argument, which cannot be implicitly ignored\n    let\
    \ mut counters = (0..<len).map({ 0 })\n                                     ^\n\
    \                                       _ in\n/tmp/tmp5r5dhtml.swift:25:9: error:\
    \ cannot find 'counters' in scope\n        counters[i] += 1\n        ^~~~~~~~\n\
    /tmp/tmp5r5dhtml.swift:30:33: error: cannot find 'counters' in scope\n    for\
    \ i in (0..<len).filter({ counters[i] == 3 }){\n                             \
    \   ^~~~~~~~\n/tmp/tmp5r5dhtml.swift:30:42: error: cannot find 'i' in scope\n\
    \    for i in (0..<len).filter({ counters[i] == 3 }){\n                      \
    \                   ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    for i in 0..<s.count {\n        if s.contains(s.prefix(i).prefix(i))\
    \ && s.suffix(i).prefix(s.prefix(i).count) == s.prefix(i).prefix(i) {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp3h60i0o9/tmp3h60i0o9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24c3e9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24c3b96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24c3b96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24c3b957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3h60i0o9                        0x00005614488028fb <unavailable> + 6395

    5    libc.so.6                          0x00002b24c408b460 __libc_start_main +
    245

    6    tmp3h60i0o9                        0x0000561448802449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  return s.characters.count == 3 && s.characters.enumerated().filter({ $0.value\
    \ % 3 == 0 }).map({ String($0.value) }).count == s.characters.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpae0qk0ub.swift:19:109: error: value of tuple type 'EnumeratedSequence<String>.Iterator.Element'\
    \ (aka '(offset: Int, element: Character)') has no member 'value'\n  return s.characters.count\
    \ == 3 && s.characters.enumerated().filter({ $0.value % 3 == 0 }).map({ String($0.value)\
    \ }).count == s.characters.count\n                                           \
    \                                                              ~~ ^~~~~\n/tmp/tmpae0qk0ub.swift:19:75:\
    \ error: value of tuple type 'EnumeratedSequence<String>.Iterator.Element' (aka\
    \ '(offset: Int, element: Character)') has no member 'value'\n  return s.characters.count\
    \ == 3 && s.characters.enumerated().filter({ $0.value % 3 == 0 }).map({ String($0.value)\
    \ }).count == s.characters.count\n                                           \
    \                            ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var prev: Int = 0\n   \
    \ var curr: Int = 0\n    for c in s.characters.reversed() {\n        if prev ==\
    \ curr {\n            prev += 1\n        } else if prev != curr {\n          \
    \  return false\n        }\n        prev = curr\n        curr += c\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_zsqv57x.swift:22:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters.reversed() {\n              \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp_zsqv57x.swift:29:17:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n        curr += c\n                ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let n = s.count\n    guard n >= 3 else {\n        return false\n    }\n\
    \    \n    \n    var buffer = [String]()\n    var prev = \"\"\n    for ch in s.characters\
    \ {\n        if prev != ch {\n            buffer.append(prev)\n        }\n   \
    \     prev = ch\n    }\n    \n    return buffer.count == n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcu1khe1o.swift:27:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    for ch in s.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcu1khe1o.swift:28:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if prev != ch {\n                   ^\n/tmp/tmpcu1khe1o.swift:31:16:\
    \ error: cannot assign value of type 'Character' to type 'String'\n        prev\
    \ = ch\n               ^~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var last = \"\"\n    var count = 0\n    for _char in s {\n        last\
    \ = char\n        count += 1\n    }\n    if count < 3 { return false }\n    if\
    \ char != last { return false }\n    for _char in s {\n        if char != char\
    \ { return false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpxoba71bj.swift:22:16: error: cannot find 'char' in scope\n    \
    \    last = char\n               ^~~~\n/tmp/tmpxoba71bj.swift:26:8: error: cannot\
    \ find 'char' in scope\n    if char != last { return false }\n       ^~~~\n/tmp/tmpxoba71bj.swift:28:12:\
    \ error: cannot find 'char' in scope\n        if char != char { return false }\n\
    \           ^~~~\n/tmp/tmpxoba71bj.swift:28:20: error: cannot find 'char' in scope\n\
    \        if char != char { return false }\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return is_happy_helper(s)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe0g7slxw.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty { return false }\n    if s.count < 3 { return false }\n\
    \    let set = Set<Character>()\n    for char in s { set.insert(char) }\n    for\
    \ index in 0 ..< 3 {\n        let last = s[index - 1]\n        let next = s[index\
    \ + 1]\n        if let next = s.range(of: next) {\n            if let prev = s.range(of:\
    \ last) {\n                return !set.contains(prev!.upperBound) || !set.contains(next!.upperBound)\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdl1dg_yq.swift:22:25: error: cannot use mutating member on immutable\
    \ value: 'set' is a 'let' constant\n    for char in s { set.insert(char) }\n \
    \                   ~~~ ^\n/tmp/tmpdl1dg_yq.swift:21:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let set = Set<Character>()\n    ^~~\n    var\n\
    /tmp/tmpdl1dg_yq.swift:24:20: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n        let last = s[index\
    \ - 1]\n                   ^~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpdl1dg_yq.swift:25:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let next = s[index + 1]\n                   ^~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdl1dg_yq.swift:26:25:\
    \ error: value of type 'String' has no member 'range'\n        if let next = s.range(of:\
    \ next) {\n                      ~ ^~~~~\n/tmp/tmpdl1dg_yq.swift:27:29: error:\
    \ value of type 'String' has no member 'range'\n            if let prev = s.range(of:\
    \ last) {\n                          ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count > 3 else {\n        return true\n    }\n    guard s.count\
    \ % 3 == 0 else {\n        return false\n    }\n    var count = 0\n    let characters\
    \ = s.characters.map { $0 }\n    \n    for index in 0..<s.count {\n        if\
    \ characters[index] == characters[index+1] &&\n            characters[index] ==\
    \ characters[index+2] {\n            count++\n        }\n    }\n    return count\
    \ == s.count/3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpddt1_7b7.swift:26:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = s.characters.map { $0 }\n        \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpddt1_7b7.swift:31:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count == 0 {\n\
    \        return true\n    }\n    if s.count == 1 || s.contains(\"\") {\n     \
    \   return true\n    }\n    if s.count < 3 {\n        return false\n    }\n  \
    \  let alphabet = Set([\"\"] + s.split(separator: \"\").reduce(into: []) { $0\
    \ + $1.characters.map({String($0)}).reduce(into: []) { $0 + $1 }  })\n    return\
    \ alphabet.count == 3 && alphabet.count == s.count && alphabet.count == s.count\
    \ * 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmf_0ohv0.swift:31:20: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let alphabet = Set([\"\"] + s.split(separator: \"\").reduce(into:\
    \ []) { $0 + $1.characters.map({String($0)}).reduce(into: []) { $0 + $1 }  })\n\
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014399
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    guard let firstLetter = s.first else { return false }\n    \n \
    \   let countOfLetters = count(s)\n    \n    if countOfLetters <= 3 { return false\
    \ }\n    \n    var current = firstLetter\n    var currentCount = 0\n    \n   \
    \ while currentCount < countOfLetters {\n        \n        if currentCount > 0\
    \ && (s[currentCount - 1] == s[currentCount - 2] || s[currentCount - 2] == s[currentCount\
    \ - 1]) {\n            \n            current = current\n            currentCount\
    \ += 2\n            \n        } else {\n            \n            if currentCount\
    \ != 0 && (s[currentCount - 1] == s[currentCount - 2]) {\n                current\
    \ = current\n                currentCount += 1\n            }\n        }\n   \
    \ }\n    \n    return current == firstLetter\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpt5pzqq7i.swift:22:26: error: cannot find 'count' in scope\n   \
    \ let countOfLetters = count(s)\n                         ^~~~~\n/tmp/tmpt5pzqq7i.swift:31:33:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if currentCount > 0 && (s[currentCount\
    \ - 1] == s[currentCount - 2] || s[currentCount - 2] == s[currentCount - 1]) {\n\
    \                                ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpt5pzqq7i.swift:31:56: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if currentCount > 0 && (s[currentCount - 1] == s[currentCount\
    \ - 2] || s[currentCount - 2] == s[currentCount - 1]) {\n                    \
    \                                   ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpt5pzqq7i.swift:31:79: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if currentCount > 0 && (s[currentCount - 1] == s[currentCount\
    \ - 2] || s[currentCount - 2] == s[currentCount - 1]) {\n                    \
    \                                                          ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpt5pzqq7i.swift:31:102:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if currentCount > 0 && (s[currentCount\
    \ - 1] == s[currentCount - 2] || s[currentCount - 2] == s[currentCount - 1]) {\n\
    \                                                                            \
    \                         ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    publi"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    for i in\
    \ stride(from: 3, to: s.count, by: 3) {\n        if Set(s[i ..< i + 3]).isDisjoint(with:\
    \ Set(s[i + 1 ..< i + 3])) {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_wknojb5.swift:23:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if Set(s[i ..< i + 3]).isDisjoint(with: Set(s[i + 1 ..< i + 3])) {\n\
    \               ^~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript<R>(bounds: R) -> String\
    \ where R : RangeExpression, R.Bound == Int { get }\n           ^\n/tmp/tmp_wknojb5.swift:23:53:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n        if Set(s[i ..< i + 3]).isDisjoint(with:\
    \ Set(s[i + 1 ..< i + 3])) {\n                                               \
    \     ^~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let l = s.characters.count\n    if l < 3 {\n        return false\n  \
    \  }\n    var count = 0\n    var prev = 0\n    var curr = 1\n    while curr <=\
    \ l {\n        if s[curr] != s[prev] {\n            count++\n        }\n     \
    \   prev = curr\n        curr++\n    }\n    return count >= 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpatmvi6aj.swift:19:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let l = s.characters.count\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpatmvi6aj.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[curr] != s[prev] {\n           ^~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpatmvi6aj.swift:27:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[curr] != s[prev] {\n             \
    \         ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpatmvi6aj.swift:28:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            count++\n                 ^~\n/tmp/tmpatmvi6aj.swift:31:13:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        curr++\n\
    \            ^~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return true\n    }\n    if s.count < 3 {\n  \
    \      return true\n    }\n    let chars = s.characters()\n    let hash = Array(chars.reduce(\"\
    \") { $0 + $1 + $2 })\n    if chars.reduce(\"\", combine: { (_, $1) }) != hash\
    \ {\n        return false\n    }\n    if s.characters.count % 3 != 0 {\n     \
    \   return false\n    }\n    for i in 0..<(s.characters.count-3) {\n        if\
    \ hash[s.startIndex.advanced(by: i)] != hash[s.startIndex.advanced(by: i+1)] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxjh_jzuh.swift:25:19: error: cannot call value of non-function\
    \ type 'String'\n    let chars = s.characters()\n                  ^         ~~\n\
    \                            \n/tmp/tmpxjh_jzuh.swift:27:37: error: '_' can only\
    \ appear in a pattern or on the left side of an assignment\n    if chars.reduce(\"\
    \", combine: { (_, $1) }) != hash {\n                                    ^\n/tmp/tmpxjh_jzuh.swift:30:10:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s.characters.count\
    \ % 3 != 0 {\n         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxjh_jzuh.swift:33:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<(s.characters.count-3) {\n           \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpxjh_jzuh.swift:34:30:\
    \ error: value of type 'String.Index' has no member 'advanced'\n        if hash[s.startIndex.advanced(by:\
    \ i)] != hash[s.startIndex.advanced(by: i+1)] {\n                ~~~~~~~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpxjh_jzuh.swift:34:68: error: value of type 'String.Index'\
    \ has no member 'advanced'\n        if hash[s.startIndex.advanced(by: i)] != hash[s.startIndex.advanced(by:\
    \ i+1)] {\n                                                      ~~~~~~~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let strLength = s.length\n    \n    if strLength < 3 { return false }\n\
    \    \n    let chars = s[0..<strLength]\n    \n    let distinctChars = chars.distinct().count\n\
    \    \n    return strLength == 3 && distinctChars == 3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7pa8cc41.swift:19:23: error: value of type 'String' has no member\
    \ 'length'\n    let strLength = s.length\n                    ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  guard let length = s.length else { return false }\n  guard length <= 3\
    \ else { return false }\n  var counter: Int = 0\n  var currentLetter: Character?\n\
    \  var currentLetterCount: Int = 0\n  for letter in s {\n    if letter == currentLetter\
    \ {\n      currentLetterCount += 1\n    } else {\n      if currentLetter != nil\
    \ {\n        if currentLetterCount >= 3 {\n          return true\n        }\n\
    \      }\n      currentLetter = letter\n      currentLetterCount = 1\n    }\n\
    \  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyq8q3ymq.swift:19:24: error: value of type 'String' has no member\
    \ 'length'\n  guard let length = s.length else { return false }\n            \
    \         ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for index in stride(from:\
    \ s.startIndex, to: s.endIndex, by: 3) {\n        let currentLetter = s[index]\n\
    \        var foundOnce = false\n        var index2 = 0\n        while !foundOnce\
    \ && index2 < s.endIndex {\n            let nextLetter = s[index2]\n         \
    \   if nextLetter == currentLetter {\n                foundOnce = true\n     \
    \       } else {\n                index2 += 1\n            }\n        }\n    \
    \    if foundOnce {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "<unknown>:0: error: referencing instance method 'next()' on 'StrideToIterator'\
    \ requires that 'String.Index' conform to 'Strideable'\nSwift.StrideToIterator:1:11:\
    \ note: where 'Element' = 'String.Index'\nextension StrideToIterator : IteratorProtocol\
    \ {\n          ^\n/tmp/tmpb5e_7lac.swift:27:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   let nextLetter = s[index2]\n                             ^~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 &&\n        s[0..<s.count-3].isEquating(s.slice[s.count-4,\
    \ s.count])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvz_vd7rw.swift:20:26: error: value of type 'String' has no member\
    \ 'isEquating'\n        s[0..<s.count-3].isEquating(s.slice[s.count-4, s.count])\n\
    \        ~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpvz_vd7rw.swift:20:39: error: value\
    \ of type 'String' has no member 'slice'\n        s[0..<s.count-3].isEquating(s.slice[s.count-4,\
    \ s.count])\n                                    ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = true\n    for letter in s {\n        if letter == letter\
    \ {\n            if let char = s[s.index(s.startIndex, offsetBy: 1)] {\n     \
    \           result = !result || char != letter\n            }\n        } else\
    \ {\n            result = false\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbwipvj6h.swift:22:16: error: initializer for conditional binding\
    \ must have Optional type, not 'Character'\n            if let char = s[s.index(s.startIndex,\
    \ offsetBy: 1)] {\n               ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count >= 3 && allUnique(s.characters.dropFirst(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqccoug.swift:19:39: error: cannot find 'allUnique' in scope\n\
    \    return s.characters.count >= 3 && allUnique(s.characters.dropFirst(3))\n\
    \                                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = false\n    s.characters.forEach { (c) in\n        let n\
    \ = s.count\n        var cs = \"\"\n        for _ in 0..<n {\n            cs +=\
    \ String(c)\n        }\n        if let _ = uniqueLetters(cs: cs) {\n         \
    \   result = true\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps5uz06jz.swift:26:20: error: cannot find 'uniqueLetters' in scope\n\
    \        if let _ = uniqueLetters(cs: cs) {\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.characters.count < 3 { return false }\n\n    let setA = s.characters.filter{\
    \ $0 == 'a' }.count > 0 ? true : false\n    let setB = s.characters.filter{ $0\
    \ == 'b' }.count > 0 ? true : false\n    let setC = s.characters.filter{ $0 ==\
    \ 'c' }.count > 0 ? true : false\n    let setD = s.characters.filter{ $0 == 'd'\
    \ }.count > 0 ? true : false\n    let setE = s.characters.filter{ $0 == 'e' }.count\
    \ > 0 ? true : false\n    let setF = s.characters.filter{ $0 == 'f' }.count >\
    \ 0 ? true : false\n    let setG = s.characters.filter{ $0 == 'g' }.count > 0\
    \ ? true : false\n    let setH = s.characters.filter{ $0 == 'h' }.count > 0 ?\
    \ true : false\n    let setI = s.characters.filter{ $0 == 'i' }.count > 0 ? true\
    \ : false\n    let setJ = s.characters.filter{ $0 == 'j' }.count > 0 ? true :\
    \ false\n    let setK = s.characters.filter{ $0 == 'k' }.count > 0 ? true : false\n\
    \    let setL = s.characters.filter{ $0 == 'l' }.count > 0 ? true : false\n  \
    \  let setM = s.characters.filter{ $0 == 'm' }.count > 0 ? true : false\n    let\
    \ setN = s.characters.filter{ $0 == 'n' }.count > 0 ? true : false\n    let setO\
    \ = s.characters.filter{ $0 == 'o' }.count > 0 ? true : false\n    let setP =\
    \ s.characters.filter{ $0 == 'p' }.count > 0 ? true : false\n    let setQ = s.characters.filter{\
    \ $0 == 'q' }.count > 0 ? true : false\n    let setR = s.characters.filter{ $0\
    \ == 'r' }.count > 0 ? true : false\n    let setS = s.characters.filter{ $0 ==\
    \ 's' }.count > 0 ? true : false\n    let setT = s.characters.filter{ $0 == 't'\
    \ }.count > 0 ? true : false\n    let setU = s.characters.filter{ $0 == 'u' }.count\
    \ > 0 ? true : false\n    let setV = s.characters.filter{ $0 == 'v' }.count >\
    \ 0 ? true : false\n    let setW = s.characters.filter{ $0 == 'w' }.count > 0\
    \ ? true : false\n    let setX = s.characters.filter{ $0 == 'x' }.count > 0 ?\
    \ true : false\n    let setY = s.characters.filter{ $0 == 'y' }.count > 0 ? true\
    \ : false\n    let setZ = s.characters.filter{ $0 == 'z' }.count > 0 ? true :\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp93s6dewm.swift:21:43: error: single-quoted string literal found,\
    \ use '\"'\n    let setA = s.characters.filter{ $0 == 'a' }.count > 0 ? true :\
    \ false\n                                          ^~~\n                     \
    \                     \"a\"\n/tmp/tmp93s6dewm.swift:22:43: error: single-quoted\
    \ string literal found, use '\"'\n    let setB = s.characters.filter{ $0 == 'b'\
    \ }.count > 0 ? true : false\n                                          ^~~\n\
    \                                          \"b\"\n/tmp/tmp93s6dewm.swift:23:43:\
    \ error: single-quoted string literal found, use '\"'\n    let setC = s.characters.filter{\
    \ $0 == 'c' }.count > 0 ? true : false\n                                     \
    \     ^~~\n                                          \"c\"\n/tmp/tmp93s6dewm.swift:24:43:\
    \ error: single-quoted string literal found, use '\"'\n    let setD = s.characters.filter{\
    \ $0 == 'd' }.count > 0 ? true : false\n                                     \
    \     ^~~\n                                          \"d\"\n/tmp/tmp93s6dewm.swift:25:43:\
    \ error: single-quoted string literal found, use '\"'\n    let setE = s.characters.filter{\
    \ $0 == 'e' }.count > 0 ? true : false\n                                     \
    \     ^~~\n                                          \"e\"\n/tmp/tmp93s6dewm.swift:26:43:\
    \ error: single-quoted string literal found, use '\"'\n    let setF = s.characters.filter{\
    \ $0 == 'f' }.count > 0 ? true : false\n                                     \
    \     ^~~\n                                          \"f\"\n/tmp/tmp93s6dewm.swift:27:43:\
    \ error: single-quoted string literal found, use '\"'\n    let setG = s.characters.filter{\
    \ $0 == 'g' }.count > 0 ? true : false\n                                     \
    \     ^~~\n                                          \"g\"\n/tmp/tmp93s6dewm.swift:28:43:\
    \ error: single-quoted string literal found, use '\"'\n    let setH = s.characters.filter{\
    \ $0 == 'h' }.count > 0 ? true : false\n                                     \
    \     ^~~\n                                          \"h\"\n/tmp/tmp93s6dewm.swift:29:43:\
    \ error: single-quoted string literal found, use '\"'"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    if s.count == 3 {\n        return true\n    }\n\
    \    var start = 0\n    var end = s.count - 2\n    while start < end {\n     \
    \   if s[start] == s[start+1] && s[start] == s[start+2] {\n            start =\
    \ start + 1\n        } else {\n            end = end - 1\n        }\n    }\n \
    \   if s[start] == s[start+1] && s[start] == s[start+2] {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnlm39ofx.swift:31:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[start]\
    \ == s[start+1] && s[start] == s[start+2] {\n           ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnlm39ofx.swift:31:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[start] == s[start+1] && s[start] ==\
    \ s[start+2] {\n                       ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpnlm39ofx.swift:31:38: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[start] == s[start+1] && s[start] == s[start+2] {\n             \
    \                        ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpnlm39ofx.swift:31:50: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[start] == s[start+1] && s[start] == s[start+2] {\n             \
    \                                    ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpnlm39ofx.swift:37:8: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    if s[start] == s[start+1] && s[start] == s[start+2] {\n       ^~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnlm39ofx.swift:37:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    if s[start] == s[st"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.isEmpty == false else {\n        return true\n    }\n    return\
    \ s.count >= 3 && is_happy_2(s.suffix(from: s.startIndex))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeit3ef08.swift:22:28: error: cannot find 'is_happy_2' in scope\n\
    \    return s.count >= 3 && is_happy_2(s.suffix(from: s.startIndex))\n       \
    \                    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && allDifferent(s.suffix(3))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpirhpx20i.swift:19:28: error: cannot find 'allDifferent' in scope\n\
    \    return s.count >= 3 && allDifferent(s.suffix(3))\n                      \
    \     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.characters.count >= 3 else {\n        return false\n    }\n\n\
    \    var prev = \"\"\n    var curr = \"a\"\n    var ans = true\n\n    for (index,\
    \ character) in s.characters.enumerated() {\n        if character == prev {\n\
    \            if character != curr {\n                ans = false\n           \
    \     break\n            } else {\n                continue\n            }\n \
    \       }\n\n        prev = character\n        curr = character\n    }\n\n   \
    \ return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwjaseus0.swift:19:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard s.characters.count >= 3 else {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwjaseus0.swift:27:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    for (index,\
    \ character) in s.characters.enumerated() {\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwjaseus0.swift:28:22:\
    \ error: binary operator '==' cannot be applied to operands of type 'String.Element'\
    \ (aka 'Character') and 'String'\n        if character == prev {\n           ~~~~~~~~~\
    \ ^  ~~~~\n/tmp/tmpwjaseus0.swift:28:22: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Character, Character), (String, String)\n\
    \        if character == prev {\n                     ^\n/tmp/tmpwjaseus0.swift:29:29:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n            if character != curr {\n                    \
    \        ^\n/tmp/tmpwjaseus0.swift:37:16: error: cannot assign value of type 'String.Element'\
    \ (aka 'Character') to type 'String'\n        prev = character\n             \
    \  ^~~~~~~~~\n/tmp/tmpwjaseus0.swift:38:16: error: cannot assign value of type\
    \ 'String.Element' (aka 'Character') to type 'String'\n        curr = character\n\
    \               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if (s.length >= 3) == true {\n        var result = true\n        for\
    \ c in s.characters {\n            if (result == false) && (c != s.characters[s.startIndex.advancedBy(1)])\
    \ {\n                result = false\n            }\n        }\n        return\
    \ result\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj5rrebad.swift:19:11: error: value of type 'String' has no member\
    \ 'length'\n    if (s.length >= 3) == true {\n        ~ ^~~~~~\n/tmp/tmpj5rrebad.swift:21:20:\
    \ error: 'characters' is unavailable: Please use String directly\n        for\
    \ c in s.characters {\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpj5rrebad.swift:22:69: error: value of type\
    \ 'String.Index' has no member 'advancedBy'\n            if (result == false)\
    \ && (c != s.characters[s.startIndex.advancedBy(1)]) {\n                     \
    \                                  ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    for start\
    \ in 0...(s.count-3) {\n        if s.substring(to: start).characters.isEmpty {\n\
    \            return false\n        }\n        for end in start...(s.count) {\n\
    \            if s.substring(to: end).characters.isEmpty {\n                return\
    \ false\n            }\n            let a = s.substring(to: start)\n         \
    \   let b = s.substring(from: end)\n            if a.characters.isEmpty == b.characters.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp60wdo4r_.swift:23:14: error: value of type 'String' has no member\
    \ 'substring'\n        if s.substring(to: start).characters.isEmpty {\n      \
    \     ~ ^~~~~~~~~\n/tmp/tmp60wdo4r_.swift:27:18: error: value of type 'String'\
    \ has no member 'substring'\n            if s.substring(to: end).characters.isEmpty\
    \ {\n               ~ ^~~~~~~~~\n/tmp/tmp60wdo4r_.swift:30:23: error: value of\
    \ type 'String' has no member 'substring'\n            let a = s.substring(to:\
    \ start)\n                    ~ ^~~~~~~~~\n/tmp/tmp60wdo4r_.swift:31:23: error:\
    \ value of type 'String' has no member 'substring'\n            let b = s.substring(from:\
    \ end)\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    return s.count >= 3 &&\n        s.characters.map { String($0) }.map{\n\
    \            if !Dictionary(uniqueKeysWithValues: Array(s.characters).enumerated().map\
    \ { $0.element, String($0.element) }).isDisjoint(with: Dictionary(uniqueKeysWithValues:\
    \ Array(s.characters).enumerated().map { String($0.element), String($0.element\
    \ + 1) }).map{$0.element}).map {\n                return true\n            }\n\
    \            return false\n        }.allSatisfy{\n            $0\n        }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxiaurv00.swift:22:99: error: consecutive statements on a line must\
    \ be separated by ';'\n            if !Dictionary(uniqueKeysWithValues: Array(s.characters).enumerated().map\
    \ { $0.element, String($0.element) }).isDisjoint(with: Dictionary(uniqueKeysWithValues:\
    \ Array(s.characters).enumerated().map { String($0.element), String($0.element\
    \ + 1) }).map{$0.element}).map {\n                                           \
    \                                                       ^\n                  \
    \                                                                            \
    \    ;\n/tmp/tmpxiaurv00.swift:22:99: error: expected expression\n           \
    \ if !Dictionary(uniqueKeysWithValues: Array(s.characters).enumerated().map {\
    \ $0.element, String($0.element) }).isDisjoint(with: Dictionary(uniqueKeysWithValues:\
    \ Array(s.characters).enumerated().map { String($0.element), String($0.element\
    \ + 1) }).map{$0.element}).map {\n                                           \
    \                                                       ^\n/tmp/tmpxiaurv00.swift:22:230:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \   if !Dictionary(uniqueKeysWithValues: Array(s.characters).enumerated().map\
    \ { $0.element, String($0.element) }).isDisjoint(with: Dictionary(uniqueKeysWithValues:\
    \ Array(s.characters).enumerated().map { String($0.element), String($0.element\
    \ + 1) }).map{$0.element}).map {\n                                           \
    \                                                                            \
    \                                                                            \
    \                                  ^\n                                       \
    \                                                                            \
    \                                                                            \
    \                                      ;\n/tmp/tmpxiaurv00.swift:22:230: error:\
    \ expected expression\n            if !Dictionary(uniqueKeysWithValues: Array(s.characters).enumerated().map\
    \ { $0.element, String($0.element) }).isDisjoint(with: D"
  stdout: ''
  timestamp: 1660014481
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count >= 3 &&\n        s[0..2].sorted() == s.characters.sorted()\
    \ &&\n        s[2...].sorted() == s.characters.sorted() &&\n        s[0..1].sorted()\
    \ == s.characters.sorted() &&\n        s[1...].sorted() == s.characters.sorted()\
    \ &&\n        s[0..2].sorted() != s.characters.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0t2ff_li.swift:20:12: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        s[0..2].sorted() == s.characters.sorted() &&\n\
    \           ^~\n           ...\n/tmp/tmp0t2ff_li.swift:22:12: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n        s[0..1].sorted() == s.characters.sorted()\
    \ &&\n           ^~\n           ...\n/tmp/tmp0t2ff_li.swift:24:12: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n        s[0..2].sorted() !=\
    \ s.characters.sorted()\n           ^~\n           ...\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    // TODO: Implement\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmp3obxe1qp/tmp3obxe1qp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96ebfebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96ebce2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96ebce2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96ebce17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3obxe1qp                        0x00005603b03fd39b <unavailable> + 5019

    5    libc.so.6                          0x00002b96ec1d7460 __libc_start_main +
    245

    6    tmp3obxe1qp                        0x00005603b03fcee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    // Your code here\n    var freq: [Int] = [Int](repeating: 0, count: 26)\n\
    \    var i = 0\n    var j = 0\n    for character in s.characters {\n        freq[character]\
    \ -= 1\n        i += 1\n        if freq[character] <= 0 {\n            freq[character]\
    \ = 1\n        } else {\n            freq[character] += 1\n        }\n       \
    \ if freq[character - 1] <= 0 {\n            freq[character - 1] = 1\n       \
    \ } else {\n            freq[character - 1] += 1\n        }\n        j += 1\n\
    \        if freq[character + 1] <= 0 {\n            freq[character + 1] = 1\n\
    \        } else {\n            freq[character + 1] += 1\n        }\n    }\n  \
    \  return i != 3 && j != 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_qrbfwzs.swift:23:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in s.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_qrbfwzs.swift:24:14:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \        freq[character] -= 1\n             ^\n/tmp/tmp_qrbfwzs.swift:26:17: error:\
    \ cannot convert value of type 'Character' to expected argument type 'Int'\n \
    \       if freq[character] <= 0 {\n                ^\n/tmp/tmp_qrbfwzs.swift:27:18:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            freq[character] = 1\n                 ^\n/tmp/tmp_qrbfwzs.swift:29:18:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            freq[character] += 1\n                 ^\n/tmp/tmp_qrbfwzs.swift:31:17:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \        if freq[character - 1] <= 0 {\n                ^\n/tmp/tmp_qrbfwzs.swift:32:18:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            freq[character - 1] = 1\n                 ^\n/tmp/tmp_qrbfwzs.swift:34:18:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            freq[character - 1] += 1\n                 ^\n/tmp/tmp_qrbfwzs.swift:37:17:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \        if freq[character + 1] <= 0 {\n                ^\n/tmp/tmp_qrbfwzs.swift:38:18:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            freq[character + 1] = 1\n                 ^\n/tmp/tmp_qrbfwzs.swift:40:18:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            freq[character + 1] += 1\n                 ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  guard let s = s else {\n    return false\n  }\n  guard s.count > 3 else\
    \ {\n    return false\n  }\n  \n  for index in stride(from: 0, to: s.count - 3,\
    \ by: 3) {\n    guard let c = s[index, 1] == s[index + 1, 1] && s[index + 1, 1]\
    \ == s[index + 2, 1] else {\n      return false\n    }\n  }\n  return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8cxpqb2r.swift:19:9: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n  guard let s = s else {\n        ^ \
    \      ~\n/tmp/tmp8cxpqb2r.swift:27:28: error: extra argument in call\n    guard\
    \ let c = s[index, 1] == s[index + 1, 1] && s[index + 1, 1] == s[index + 2, 1]\
    \ else {\n                   ~~~~~~~~^~\n/tmp/tmp8cxpqb2r.swift:27:47: error:\
    \ extra argument in call\n    guard let c = s[index, 1] == s[index + 1, 1] &&\
    \ s[index + 1, 1] == s[index + 2, 1] else {\n                                \
    \  ~~~~~~~~~~~~^~\n/tmp/tmp8cxpqb2r.swift:27:66: error: extra argument in call\n\
    \    guard let c = s[index, 1] == s[index + 1, 1] && s[index + 1, 1] == s[index\
    \ + 2, 1] else {\n                                                     ~~~~~~~~~~~~^~\n\
    /tmp/tmp8cxpqb2r.swift:27:85: error: extra argument in call\n    guard let c =\
    \ s[index, 1] == s[index + 1, 1] && s[index + 1, 1] == s[index + 2, 1] else {\n\
    \                                                                        ~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    let d = s.makeIterator()\n    if\
    \ let letter1 = d.next() where letter1 != d.next() where letter1 != d.next() {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ssz5d42.swift:21:31: error: expected ',' joining parts of a multi-clause\
    \ condition\n    if let letter1 = d.next() where letter1 != d.next() where letter1\
    \ != d.next() {\n                             ~^~~~~\n                       \
    \      ,\n/tmp/tmp_ssz5d42.swift:21:57: error: expected ',' joining parts of a\
    \ multi-clause condition\n    if let letter1 = d.next() where letter1 != d.next()\
    \ where letter1 != d.next() {\n                                              \
    \         ~^~~~~\n                                                       ,\n/tmp/tmp_ssz5d42.swift:21:24:\
    \ error: cannot use mutating member on immutable value: 'd' is a 'let' constant\n\
    \    if let letter1 = d.next() where letter1 != d.next() where letter1 != d.next()\
    \ {\n                     ~ ^\n/tmp/tmp_ssz5d42.swift:20:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let d = s.makeIterator()\n    ^~~\n    var\n\
    /tmp/tmp_ssz5d42.swift:21:50: error: cannot use mutating member on immutable value:\
    \ 'd' is a 'let' constant\n    if let letter1 = d.next() where letter1 != d.next()\
    \ where letter1 != d.next() {\n                                              \
    \ ~ ^\n/tmp/tmp_ssz5d42.swift:20:5: note: change 'let' to 'var' to make it mutable\n\
    \    let d = s.makeIterator()\n    ^~~\n    var\n/tmp/tmp_ssz5d42.swift:21:76:\
    \ error: cannot use mutating member on immutable value: 'd' is a 'let' constant\n\
    \    if let letter1 = d.next() where letter1 != d.next() where letter1 != d.next()\
    \ {\n                                                                        \
    \ ~ ^\n/tmp/tmp_ssz5d42.swift:20:5: note: change 'let' to 'var' to make it mutable\n\
    \    let d = s.makeIterator()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var chars = Array(s)\n    var count = 0\n\n    for i in 0..<chars.count\
    \ {\n        if chars[i] != chars[(i+1)&(s.count-1)] {\n            count = count\
    \ + 1\n            if count > 3 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpst8pzwxf/tmpst8pzwxf.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ad5cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ad59b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ad59b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ad59b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpst8pzwxf                        0x00005632bcade937 <unavailable> + 6455

    5    libc.so.6                          0x00002b0ad5eae460 __libc_start_main +
    245

    6    tmpst8pzwxf                        0x00005632bcade329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result: String = \"\"\n    \n    for i in 0..<s.count {\n       \
    \ result += s[i]\n    }\n    \n    if s.count < 3 { return false }\n    \n   \
    \ for i in 0..<s.count {\n        result += s[i]\n    }\n    \n    for i in 0..<s.count\
    \ {\n        result += s[i]\n    }\n    \n    for i in 0..<s.count {\n       \
    \ result += s[i]\n    }\n    \n    if result != s { return false }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp000k393e.swift:22:20: error: no exact matches in call to subscript\
    \ \n        result += s[i]\n                   ^\nSwift.String:3:12: note: candidate\
    \ expects value of type 'Range<String.Index>' for parameter #1 (got 'Int')\n \
    \   public subscript(r: Range<String.Index>) -> Substring { get }\n          \
    \ ^\nSwift.Collection:3:23: note: candidate expects value of type '(UnboundedRange_)\
    \ -> ()' for parameter #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_)\
    \ -> ()) -> Self.SubSequence { get }\n                      ^\n/tmp/tmp000k393e.swift:28:20:\
    \ error: no exact matches in call to subscript \n        result += s[i]\n    \
    \               ^\nSwift.String:3:12: note: candidate expects value of type 'Range<String.Index>'\
    \ for parameter #1 (got 'Int')\n    public subscript(r: Range<String.Index>) ->\
    \ Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n/tmp/tmp000k393e.swift:32:20: error: no exact matches\
    \ in call to subscript \n        result += s[i]\n                   ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get\
    \ }\n           ^\nSwift.Collection:3:23: note: candidate expects value of type\
    \ '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable public\
    \ subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n        \
    \              ^\n/tmp/tmp000k393e.swift:36:20: error: no exact matches in call\
    \ to subscript \n        result += s[i]\n                   ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get\
    \ }\n           ^\nSwift.Collection:3:23: note: candidate expects value of type\
    \ '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable publi"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count > 3 else {\n        return false\n    }\n\n    let first\
    \ = s.characters.first\n    let last = s.characters.last\n    let firstSet = Set(first)\n\
    \    let lastSet = Set(last)\n\n    for index in 1..<s.count - 1 {\n        if\
    \ firstSet == lastSet {\n            firstSet.removeLast()\n            lastSet.removeFirst()\n\
    \            continue\n        }\n\n        let element = s[index..<index+1]\n\
    \        let set = Set(element)\n        if set == firstSet {\n            firstSet.removeLast()\n\
    \            continue\n        }\n\n        if set == lastSet {\n            lastSet.removeFirst()\n\
    \        }\n    }\n\n    return firstSet == lastSet\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_zjt_8jb.swift:23:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let first = s.characters.first\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_zjt_8jb.swift:24:18:\
    \ error: 'characters' is unavailable: Please use String directly\n    let last\
    \ = s.characters.last\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_zjt_8jb.swift:25:20: error: no exact matches in call\
    \ to initializer \n    let firstSet = Set(first)\n                   ^\nSwift.Set:2:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(arrayLiteral:)')\n\
    \    @inlinable public init(arrayLiteral elements: Element...)\n             \
    \         ^\nSwift.SetAlgebra:2:23: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(arrayLiteral:)')\n    @inlinable public init(arrayLiteral:\
    \ Self.Element...)\n                      ^\n/tmp/tmp_zjt_8jb.swift:26:19: error:\
    \ no exact matches in call to initializer \n    let lastSet = Set(last)\n    \
    \              ^\nSwift.Set:2:23: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(arrayLiteral:)')\n    @inlinable public init(arrayLiteral\
    \ elements: Element...)\n                      ^\nSwift.SetAlgebra:2:23: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(arrayLiteral:)')\n\
    \    @inlinable public init(arrayLiteral: Self.Element...)\n                 \
    \     ^\n/tmp/tmp_zjt_8jb.swift:35:23: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \        let element = s[index..<index+1]\n                      ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count > 3 && !s.characters.isEmpty && is_happy_helper(s)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi0j1vcga.swift:19:63: error: cannot find 'is_happy_helper' in scope\n\
    \    return s.characters.count > 3 && !s.characters.isEmpty && is_happy_helper(s)\n\
    \                                                              ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && !s.contains(Array(\"a\", \"b\", \"c\"))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwce_aguj.swift:19:45: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return s.count >= 3 && !s.contains(Array(\"a\", \"b\", \"c\"))\n\
    \                                            ^\n                             \
    \                arrayLiteral: \n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let newString = \"\\(s).\" // make s's length 3\n    let regex = try!\
    \ NSRegularExpression(pattern: \"\\\\w{3,}\\\\w{3,}\\\\w{3,}\", options: [])\n\
    \    let match = regex.firstMatch(in: newString, options: [], range: NSMakeRange(0,\
    \ newString.count))\n    return match != nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpvpb9qlmk.swift:20:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w{3,}\\\\\
    w{3,}\\\\w{3,}\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvpb9qlmk.swift:21:69:\
    \ error: cannot find 'NSMakeRange' in scope\n    let match = regex.firstMatch(in:\
    \ newString, options: [], range: NSMakeRange(0, newString.count))\n          \
    \                                                          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 { return false }\n\n    let chars\
    \ = Array(s.characters)\n    let count = stride(from: 0, through: len - 3, by:\
    \ 3)\n\n    for n in count {\n        if chars[chars.count - n - 1] == chars[chars.count\
    \ - n] { continue }\n        else { return false }\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf6801brj.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpf6801brj.swift:22:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = Array(s.characters)\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    var visited = [String]()\n\
    \    var stack = [String]()\n    var happy = false\n    for ch in s {\n      \
    \  if visited.contains(ch) {\n            stack.insert(ch, at: 0)\n        } else\
    \ {\n            visited.insert(ch, at: 0)\n        }\n    }\n    if stack.isEmpty\
    \ {\n        happy = true\n    } else {\n        for ch in stack {\n         \
    \   if visited.contains(ch) {\n                happy = false\n               \
    \ break\n            }\n        }\n    }\n    return happy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptivx_3qb.swift:26:29: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if visited.contains(ch) {\n    \
    \                        ^\n/tmp/tmptivx_3qb.swift:27:26: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            stack.insert(ch,\
    \ at: 0)\n                         ^\n/tmp/tmptivx_3qb.swift:29:28: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       visited.insert(ch, at: 0)\n                           ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: '/tmp/tmpslkvtko8.swift:20:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n\n    let counts\
    \ = stride(from: 0, through: s.count, by: 3).compactMap({ $0.isMultiple })\n \
    \   return counts.contains(false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx56m4j0f.swift:24:28: error: missing argument label 'where:' in\
    \ call\n    return counts.contains(false)\n                           ^\n    \
    \                       where: \n/tmp/tmpx56m4j0f.swift:24:28: error: cannot convert\
    \ value of type 'Bool' to expected argument type '(@escaping (Int) -> Bool) throws\
    \ -> Bool'\n    return counts.contains(false)\n                           ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var i = 0\n    for letter in s.characters {\n        if i >= len -\
    \ 3 {\n            return false\n        }\n        if i == 0 || s.characters[i]\
    \ != s.characters[i+1] || s.characters[i] != s.characters[i+2] {\n           \
    \ return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxjfu4ogm.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxjfu4ogm.swift:24:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for letter\
    \ in s.characters {\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxjfu4ogm.swift:28:22: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if i == 0 || s.characters[i] != s.characters[i+1] || s.characters[i]\
    \ != s.characters[i+2] {\n                     ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjfu4ogm.swift:28:24:\
    \ error: 'characters' is unavailable: Please use String directly\n        if i\
    \ == 0 || s.characters[i] != s.characters[i+1] || s.characters[i] != s.characters[i+2]\
    \ {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxjfu4ogm.swift:28:41: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ i == 0 || s.characters[i] != s.characters[i+1] || s.characters[i] != s.characters[i+2]\
    \ {\n                                        ^~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjfu4ogm.swift:28:43:\
    \ error: 'characters' is unavailable: Please use String directly\n        if i\
    \ == 0 || s.characters[i] != s.characters[i+1] || s.characters[i] != s.characters[i+2]\
    \ {\n                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ not"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var letters: Set<String> = [String]()\n    for char in s.characters {\n\
    \        if letters.contains(char) {\n            return false\n        }\n  \
    \      letters.insert(char)\n    }\n    return s.characters.count >= 3 &&\n  \
    \      letters.count == s.characters.count &&\n        letters.count == letters.filter{\
    \ $0 != letters.first }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxcqeq32m.swift:19:32: error: cannot convert value of type '[String]'\
    \ to specified type 'Set<String>'\n    var letters: Set<String> = [String]()\n\
    \                               ^~~~~~~~~~\n/tmp/tmpxcqeq32m.swift:20:19: error:\
    \ 'characters' is unavailable: Please use String directly\n    for char in s.characters\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxcqeq32m.swift:21:29: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if letters.contains(char) {\n  \
    \                          ^\n/tmp/tmpxcqeq32m.swift:24:24: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        letters.insert(char)\n\
    \                       ^\n/tmp/tmpxcqeq32m.swift:28:34: error: cannot convert\
    \ value of type 'Set<String>' to expected argument type 'Int'\n        letters.count\
    \ == letters.filter{ $0 != letters.first }\n                                 ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last = [UInt8](repeating: 0,\
    \ count: s.count / 3)\n    for idx in 0..<s.count {\n        last[idx / 3] = s[idx].unicodeScalars.last!.value\
    \ - 32\n    }\n    var res = true\n    for idx in 1..<s.count {\n        res =\
    \ res && last[idx-1] == last[idx]\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6n24r85i.swift:22:59: error: cannot assign value of type 'UInt32'\
    \ to subscript of type 'UInt8'\n        last[idx / 3] = s[idx].unicodeScalars.last!.value\
    \ - 32\n                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n     \
    \                   UInt8(                                )\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let chars = s.characters\n    return s.characters.count == 3 &&\n   \
    \     chars.count > 0 &&\n        chars.reduce(true) { $0 && !($1 ==  chars[$1.startIndex.advancedBy(1)\
    \ + 1])}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2j16xfxv.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2j16xfxv.swift:22:54:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'startIndex'\n\
    \        chars.reduce(true) { $0 && !($1 ==  chars[$1.startIndex.advancedBy(1)\
    \ + 1])}\n                                                  ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    var count = 0\n    var\
    \ charCount = [Character]()\n    for char in s {\n        charCount.append(char)\n\
    \    }\n    charCount.removeFirst()\n    for char in charCount {\n        if char\
    \ == charCount[0] {\n            count++\n            charCount.removeFirst()\n\
    \        }\n        else {\n            count = 0\n        }\n    }\n    return\
    \ (count > 3) && (charCount.isEmpty == false)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpm8_qrcc7.swift:30:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    for i in stride(from: 0, to: s.count, by: 3) {\n        if s[i] != s[i]\
    \ { // Not unique\n            return false\n        }\n    }\n    return s.count\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdpx2xpzf.swift:20:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] !=\
    \ s[i] { // Not unique\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpdpx2xpzf.swift:20:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] != s[i] { // Not unique\n                   ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    return s.split(separator:\
    \ \"\")\n        .map{ $0 }.map({ String($0) }).forEach { (chars) in\n       \
    \ return !chars.isSubset(of: chars.dropLast())\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdfw690yy.swift:23:40: error: cannot convert return expression of\
    \ type '()' to return type 'Bool'\n        .map{ $0 }.map({ String($0) }).forEach\
    \ { (chars) in\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdfw690yy.swift:24:16: error: cannot convert value of type 'Bool' to closure\
    \ result type 'Void'\n        return !chars.isSubset(of: chars.dropLast())\n \
    \              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdfw690yy.swift:24:23:\
    \ error: value of type 'String' has no member 'isSubset'\n        return !chars.isSubset(of:\
    \ chars.dropLast())\n                ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if (s.count < 3) {\n        return false\n    }\n\n    var distinctLetters\
    \ = Set<String>()\n    var distinctLettersCount = 0\n    var haystack = s\n\n\
    \    for i in 1..<s.count {\n        if haystack[i] == s[i] {\n            distinctLetters.insert(haystack[i])\n\
    \            distinctLettersCount = distinctLettersCount + 1\n        }\n\n  \
    \      if haystack[i] == s[i - 2] && haystack[i] == s[i - 3] {\n            distinctLetters.insert(haystack[i])\n\
    \            distinctLettersCount = distinctLettersCount + 1\n        }\n    }\n\
    \n    return distinctLettersCount >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2i96cxkr.swift:28:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if haystack[i]\
    \ == s[i] {\n           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2i96cxkr.swift:28:27: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if haystack[i] == s[i] {\n                          ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2i96cxkr.swift:29:44:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            distinctLetters.insert(haystack[i])\n                           \
    \                ^\n/tmp/tmp2i96cxkr.swift:33:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ haystack[i] == s[i - 2] && haystack[i] == s[i - 3] {\n           ^~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2i96cxkr.swift:33:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if haystack[i] == s[i - 2] && haystack[i]\
    \ == s[i - 3] {\n                          ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp2i96cxkr.swift:33:39: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if haystack[i] == s[i - 2] && haystack[i] == s[i - 3] {\n\
    \                                      ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2i96"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.characters.count == 0 {\n        return false\n    }\n    if s.characters.count\
    \ < 3 {\n        return false\n    }\n    \n    for i in 0..<3 {\n        if let\
    \ first = s.characters.index(s.startIndex, offsetBy: i) {\n            if let\
    \ last = s.characters.index(s.startIndex, offsetBy: i + 1) {\n               \
    \ if let _ = Array(s[first...last]).sorted(by: {$0 == $1}).first {\n         \
    \           return false\n                }\n            }\n        }\n    }\n\
    \    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj9s7y2zz.swift:19:10: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s.characters.count == 0 {\n         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj9s7y2zz.swift:22:10:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s.characters.count\
    \ < 3 {\n         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj9s7y2zz.swift:27:26: error: 'characters' is unavailable: Please\
    \ use String directly\n        if let first = s.characters.index(s.startIndex,\
    \ offsetBy: i) {\n                         ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpj9s7y2zz.swift:28:29: error: 'characters'\
    \ is unavailable: Please use String directly\n            if let last = s.characters.index(s.startIndex,\
    \ offsetBy: i + 1) {\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpj9s7y2zz.swift:28:16: error: initializer\
    \ for conditional binding must have Optional type, not 'String.Index'\n      \
    \      if let last = s.characters.index(s.startIndex, offsetBy: i + 1) {\n   \
    \            ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj9s7y2zz.swift:27:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String.Index'\n\
    \        if let first = s.characters.index(s.startIndex, offsetBy: i) {\n    \
    \       ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n\n    var first:\
    \ Character? = nil\n    var second: Character? = nil\n    var third: Character?\
    \ = nil\n    var fourth: Character? = nil\n    var fifth: Character? = nil\n \
    \   var sixth: Character? = nil\n    var seventh: Character? = nil\n    var eighth:\
    \ Character? = nil\n    var ninth: Character? = nil\n    var tenth: Character?\
    \ = nil\n    var eleventh: Character? = nil\n    var twelfth: Character? = nil\n\
    \n    for i in 0..<s.count {\n        switch i {\n        case 0:\n          \
    \  first = s[i]\n        case 1:\n            second = s[i]\n        case 2:\n\
    \            third = s[i]\n        case 3:\n            fourth = s[i]\n      \
    \  case 4:\n            fifth = s[i]\n        case 5:\n            sixth = s[i]\n\
    \        case 6:\n            seventh = s[i]\n        case 7:\n            eighth\
    \ = s[i]\n        case 8:\n            ninth = s[i]\n        case 9:\n       \
    \     tenth = s[i]\n        case 10:\n            eleventh = s[i]\n        case\
    \ 11:\n            twelfth = s[i]\n        default:\n            break\n     \
    \   }\n    }\n\n    if first != nil && second != nil && third != nil && fourth\
    \ != nil && fifth != nil && sixth != nil && seventh != nil && eighth != nil &&\
    \ ninth != nil && tenth != nil && eleventh != nil && twelfth != nil && first ==\
    \ second && second == third && third == fourth && fourth == fifth && fifth ==\
    \ sixth && sixth == seventh && seventh == eighth && eighth == ninth && ninth ==\
    \ tenth && tenth == eleventh && eleventh == twelfth {\n        return true\n \
    \   }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpakhxxg7a.swift:39:21: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            first\
    \ = s[i]\n                    ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpakhxxg7a.swift:41:22: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            second = s[i]\n                     ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpakhxxg7a.swift:43:21: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n            third = s[i]\n                    ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpakhxxg7a.swift:45:22:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            fourth = s[i]\n                   \
    \  ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpakhxxg7a.swift:47:21:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            fifth = s[i]\n                    ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpakhxxg7a.swift:49:21:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            sixth = s[i]\n                    ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpakhxxg7a.swift:51:23:\
    \ error: 'subscript(_:)'"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var start = 0\n    var end = len - 1\n    var count = 0\n    while\
    \ start < end {\n        if s[start] == s[end] {\n            count += 1\n   \
    \     }\n        if count == 3 {\n            return true\n        }\n       \
    \ if s[start] != s[end] {\n            count = 0\n        }\n        start +=\
    \ 1\n        end -= 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp67y_epov.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp67y_epov.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[start] == s[end] {\n           ^~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp67y_epov.swift:27:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[start] == s[end] {\n             \
    \          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp67y_epov.swift:33:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[start] != s[end] {\n           ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp67y_epov.swift:33:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[start] != s[end] {\n                       ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.isEmpty else { return false }\n    if s.count < 3 { return false\
    \ }\n\n    var lastIndex = s.count - 1\n    var count = 1\n    for _ in 0..<3\
    \ {\n        if s[lastIndex] != s[lastIndex - 1] {\n            count += 1\n \
    \       }\n        lastIndex -= 1\n    }\n\n    return (lastIndex < 0 || count\
    \ == 3 || count == 7) && (lastIndex == 0 || s[lastIndex] == s[lastIndex - 1])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxdlddqh0.swift:25:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[lastIndex]\
    \ != s[lastIndex - 1] {\n           ^~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxdlddqh0.swift:25:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[lastIndex] != s[lastIndex - 1] {\n                           ^~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxdlddqh0.swift:31:78:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    return (lastIndex < 0 || count == 3 || count\
    \ == 7) && (lastIndex == 0 || s[lastIndex] == s[lastIndex - 1])\n            \
    \                                                                 ^~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxdlddqh0.swift:31:94:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    return (lastIndex < 0 || count == 3 || count\
    \ == 7) && (lastIndex == 0 || s[lastIndex] == s[lastIndex - 1])\n            \
    \                                                                            \
    \     ^~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.characters.count > 3 else { return false }\n\n    var prevChar\
    \ = String()\n    var isHappy = false\n\n    for i in 0..<(s.characters.count\
    \ - 1) {\n        let currChar = String(s.characters.suffixStarting(at: i))\n\
    \        guard currChar == prevChar else { return false }\n\n        prevChar\
    \ = currChar\n        isHappy = true\n    }\n    return isHappy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgm3tnqfg.swift:19:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard s.characters.count > 3 else { return false }\n\
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpgm3tnqfg.swift:24:21: error: 'characters' is unavailable: Please use String\
    \ directly\n    for i in 0..<(s.characters.count - 1) {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgm3tnqfg.swift:25:44:\
    \ error: value of type 'String' has no member 'suffixStarting'\n        let currChar\
    \ = String(s.characters.suffixStarting(at: i))\n                             \
    \ ~~~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return (s.characters.count > 3) && !s.isEmpty && s.characters.map {\n\
    \        Character($0)\n    }.reduce(false, {$0 && $1})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsic3iwwo.swift:20:19: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        Character($0)\n                  ^\n                  extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpsic3iwwo.swift:21:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Bool'\n    }.reduce(false, {$0 && $1})\n        \
    \                   ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var distinctCounts: [Int]\n    var\
    \ previousCount: Int = 0\n    for letter in s.characters {\n        if letter\
    \ == previousCount {\n            distinctCounts[distinctCounts.count-1] += 1\n\
    \        } else {\n            distinctCounts.append(1)\n        }\n        previousCount\
    \ = letter\n    }\n    return distinctCounts.count >= 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpthuctq39.swift:22:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpthuctq39.swift:23:19:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'Int'\n        if letter == previousCount {\n           ~~~~~~ ^  ~~~~~~~~~~~~~\n\
    /tmp/tmpthuctq39.swift:23:19: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (Int, Int)\n        if letter\
    \ == previousCount {\n                  ^\n/tmp/tmpthuctq39.swift:28:25: error:\
    \ cannot assign value of type 'Character' to type 'Int'\n        previousCount\
    \ = letter\n                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.length < 3 { return false }\n    let mut set = HashSet<String>()\n\
    \    for (i, c) in s.characters.enumerated() {\n        if set.contains(c) {\n\
    \            return false\n        }\n        set.insert(String(c))\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp38avq5a2.swift:20:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut set = HashSet<String>()\n\
    \            ^\n/tmp/tmp38avq5a2.swift:20:13: note: join the identifiers together\n\
    \    let mut set = HashSet<String>()\n        ~~~~^~~\n        mutset\n/tmp/tmp38avq5a2.swift:20:13:\
    \ note: join the identifiers together with camel-case\n    let mut set = HashSet<String>()\n\
    \        ~~~~^~~\n        mutSet\n/tmp/tmp38avq5a2.swift:19:10: error: value of\
    \ type 'String' has no member 'length'\n    if s.length < 3 { return false }\n\
    \       ~ ^~~~~~\n/tmp/tmp38avq5a2.swift:20:19: error: cannot find 'HashSet' in\
    \ scope\n    let mut set = HashSet<String>()\n                  ^~~~~~~\n/tmp/tmp38avq5a2.swift:21:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for (i,\
    \ c) in s.characters.enumerated() {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp38avq5a2.swift:22:12: error: cannot find\
    \ 'set' in scope\n        if set.contains(c) {\n           ^~~\n/tmp/tmp38avq5a2.swift:25:9:\
    \ error: cannot find 'set' in scope\n        set.insert(String(c))\n        ^~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var s = s\n    for i in 0..<s.length {\n        for j in i+1..<s.length\
    \ {\n            if s[i] != s[j] {\n                break\n            }\n   \
    \     }\n        if i != s.length {\n            if s[i] != s[i+1] || s[i] !=\
    \ s[i+1] || s[i] != s[i+1] {\n                return false\n            }\n  \
    \      }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5kn_5__3.swift:20:20: error: value of type 'String' has no member\
    \ 'length'\n    for i in 0..<s.length {\n                 ~ ^~~~~~\n/tmp/tmp5kn_5__3.swift:21:26:\
    \ error: value of type 'String' has no member 'length'\n        for j in i+1..<s.length\
    \ {\n                       ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let length = s.characters.count\n    if length <= 3 { return false }\n\
    \n    let group = Dictionary(grouping: s.characters, by: { String($0) })\n   \
    \ let result = group.values.contains(where: { $0.count > 3 })\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk0xmfaqy.swift:19:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = s.characters.count\n                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpk0xmfaqy.swift:22:40:\
    \ error: 'characters' is unavailable: Please use String directly\n    let group\
    \ = Dictionary(grouping: s.characters, by: { String($0) })\n                 \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    let arr = [String]()\n\n    for i in\
    \ 0..<len - 3 {\n        let first = s.character(at: i)\n        let second =\
    \ s.character(at: i + 1)\n        let third = s.character(at: i + 2)\n       \
    \ let first = String(first)\n        let second = String(second)\n        let\
    \ third = String(third)\n        if !arr.contains(first) && !arr.contains(second)\
    \ && !arr.contains(third) {\n            arr.append(first)\n            arr.append(second)\n\
    \            arr.append(third)\n        }\n    }\n    return arr.count == len\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3saq1_ut.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3saq1_ut.swift:23:23:\
    \ error: value of type 'String' has no member 'character'\n        let first =\
    \ s.character(at: i)\n                    ~ ^~~~~~~~~\n/tmp/tmp3saq1_ut.swift:24:24:\
    \ error: value of type 'String' has no member 'character'\n        let second\
    \ = s.character(at: i + 1)\n                     ~ ^~~~~~~~~\n/tmp/tmp3saq1_ut.swift:25:23:\
    \ error: value of type 'String' has no member 'character'\n        let third =\
    \ s.character(at: i + 2)\n                    ~ ^~~~~~~~~\n/tmp/tmp3saq1_ut.swift:30:17:\
    \ error: no exact matches in call to instance method 'append'\n            arr.append(first)\n\
    \                ^\n/tmp/tmp3saq1_ut.swift:30:17: note: found candidate with type\
    \ '(__owned String) -> ()'\n            arr.append(first)\n                ^\n\
    /tmp/tmp3saq1_ut.swift:31:17: error: no exact matches in call to instance method\
    \ 'append'\n            arr.append(second)\n                ^\n/tmp/tmp3saq1_ut.swift:31:17:\
    \ note: found candidate with type '(__owned String) -> ()'\n            arr.append(second)\n\
    \                ^\n/tmp/tmp3saq1_ut.swift:32:17: error: no exact matches in call\
    \ to instance method 'append'\n            arr.append(third)\n               \
    \ ^\n/tmp/tmp3saq1_ut.swift:32:17: note: found candidate with type '(__owned String)\
    \ -> ()'\n            arr.append(third)\n                ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len  = s.characters.count\n    let news = s.characters.map { $0.isUppercased()\
    \ }.joined()\n    return len >= 3 && news == s.lowercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptdhixn54.swift:19:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len  = s.characters.count\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptdhixn54.swift:20:38:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'isUppercased'\n\
    \    let news = s.characters.map { $0.isUppercased() }.joined()\n            \
    \                      ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.characters.count >= 3 else {\n        return false\n    }\n \
    \   \n    for i in 0..<3 {\n        guard let c1 = s.characters[i+1], let c2 =\
    \ s.characters[i+2] else {\n            return false\n        }\n        guard\
    \ c1 != c2 else { return false }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6umdalsb.swift:19:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard s.characters.count >= 3 else {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6umdalsb.swift:24:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard let c1 = s.characters[i+1], let c2\
    \ = s.characters[i+2] else {\n                       ^~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6umdalsb.swift:24:26:\
    \ error: 'characters' is unavailable: Please use String directly\n        guard\
    \ let c1 = s.characters[i+1], let c2 = s.characters[i+2] else {\n            \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6umdalsb.swift:24:52: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        guard let\
    \ c1 = s.characters[i+1], let c2 = s.characters[i+2] else {\n                \
    \                                   ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp6umdalsb.swift:24:54: error:\
    \ 'characters' is unavailable: Please use String directly\n        guard let c1\
    \ = s.characters[i+1], let c2 = s.characters[i+2] else {\n                   \
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6umdalsb.swift:24:15: error: initializer for conditional\
    \ binding must have Optional type, not 'Character'\n        guard let c1 = s.characters[i+1],\
    \ let c2 = s.characters[i+2] else {\n              ^        ~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6umd"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var has3DistinctLetters = false\n    let strArr = s.characters\n    for\
    \ index in 0...(strArr.count - 3) {\n        if strArr[index] != strArr[index\
    \ + 1] ||\n            strArr[index + 1] != strArr[index + 2] ||\n           \
    \ strArr[index + 2] != strArr[index + 3] {\n            has3DistinctLetters =\
    \ true\n        }\n    }\n    return (has3DistinctLetters && strArr.count >= 3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxfcx0n5c.swift:20:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let strArr = s.characters\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxfcx0n5c.swift:22:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if strArr[index] != strArr[index + 1] ||\n\
    \           ^~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxfcx0n5c.swift:22:29: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ strArr[index] != strArr[index + 1] ||\n                            ^~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxfcx0n5c.swift:23:13:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            strArr[index + 1] != strArr[index +\
    \ 2] ||\n            ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxfcx0n5c.swift:23:34: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            strArr[index + 1] != strArr[index + 2] ||\n                     \
    \            ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpxfcx0n5c.swift:24:13: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            strArr[index + 2] != strArr[index + 3] {\n            ^~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly mar"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count == 1 {\n\
    \        return true\n    }\n    if s.count == 3 {\n        return s.isDistinct\n\
    \    }\n    var last = 0\n    var i = 0\n    var j = 0\n    for i in 0..<s.count\
    \ {\n        if s[i] != s[last] {\n            if j == 1 {\n                return\
    \ false\n            }\n            j = i\n        }\n        last++\n    }\n\
    \    if last == s.count {\n        if let subRange = s.rangeOfCharacter(from:\
    \ CharacterSet.init(charactersIn: \"B\")...) {\n            if let lastSub = s.substring(with:\
    \ subRange) {\n                if lastSub.characters.count == 2 {\n          \
    \          return false\n                } else {\n                    return\
    \ true\n                }\n            }\n        }\n        return true\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_zs657ff.swift:26:18: error: value of type 'String' has no member\
    \ 'isDistinct'\n        return s.isDistinct\n               ~ ^~~~~~~~~~\n/tmp/tmp_zs657ff.swift:32:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] != s[last] {\n           ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_zs657ff.swift:32:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] != s[last] {\n                \
    \   ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmp_zs657ff.swift:38:13: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        last++\n            ^~\n/tmp/tmp_zs657ff.swift:41:52:\
    \ error: cannot find 'CharacterSet' in scope\n        if let subRange = s.rangeOfCharacter(from:\
    \ CharacterSet.init(charactersIn: \"B\")...) {\n                             \
    \                      ^~~~~~~~~~~~\n/tmp/tmp_zs657ff.swift:41:29: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n        if let subRange =\
    \ s.rangeOfCharacter(from: CharacterSet.init(charactersIn: \"B\")...) {\n    \
    \                      ~ ^~~~~~~~~~~~~~~~\n/tmp/tmp_zs657ff.swift:42:32: error:\
    \ value of type 'String' has no member 'substring'\n            if let lastSub\
    \ = s.substring(with: subRange) {\n                             ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var lastChar = s[0]\n    var secondLastChar = s[1]\n    var thirdLastChar\
    \ = s[2]\n    \n    if s.count < 3 || lastChar == secondLastChar && secondLastChar\
    \ == thirdLastChar {\n        return false\n    } else {\n        return true\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ee_z81w.swift:19:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp1ee_z81w.swift:20:26: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var secondLastChar = s[1]\n                         ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1ee_z81w.swift:21:25:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var thirdLastChar = s[2]\n                \
    \        ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmp1ee_z81w.swift:19:9: warning: variable 'lastChar' was never mutated;\
    \ consider changing to 'let' constant\n    var lastChar = s[0]\n    ~~~ ^\n  \
    \  let\n/tmp/tmp1ee_z81w.swift:20:9: warning: variable 'secondLastChar' was never\
    \ mutated; consider changing to 'let' constant\n    var secondLastChar = s[1]\n\
    \    ~~~ ^\n    let\n/tmp/tmp1ee_z81w.swift:21:9: warning: variable 'thirdLastChar'\
    \ was never mutated; consider changing to 'let' constant\n    var thirdLastChar\
    \ = s[2]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var hapswift = true\n    let newStr = s.characters.filter { !CharacterSet.letters.contains($0)\
    \ }\n    for _ in 0..<newStr.count {\n        let a = newStr[newStr.startIndex]\n\
    \        let b = newStr[newStr.startIndex + 1]\n        let c = newStr[newStr.startIndex\
    \ + 2]\n        let d = newStr[newStr.startIndex + 3]\n        let h = newStr[newStr.startIndex\
    \ + 4]\n        let p = newStr[newStr.startIndex + 5]\n        let q = newStr[newStr.startIndex\
    \ + 6]\n        let r = newStr[newStr.startIndex + 7]\n        let s = newStr[newStr.startIndex\
    \ + 8]\n        let t = newStr[newStr.startIndex + 9]\n        let n = newStr[newStr.startIndex\
    \ + 10]\n        let m = newStr[newStr.startIndex + 11]\n        if a != b !=\
    \ c != d != h != p != q != r != s != t != n != m {\n            hapswift = false\n\
    \        } else {\n            hapswift = true\n        }\n    }\n    return hapswift\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn12fcaiu.swift:20:41: error: cannot find 'CharacterSet' in scope\n\
    \    let newStr = s.characters.filter { !CharacterSet.letters.contains($0) }\n\
    \                                        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if len(s) >= 3 {\n        let set1 = Set<String>()\n        let set2\
    \ = Set<String>()\n        var j = 0\n        for i in 0..<s.count {\n       \
    \     if s[i] == s[j] {\n                j++\n            } else {\n         \
    \       if j == 3 {\n                    set1.insert(s[i])\n                }\n\
    \                if j == 3 {\n                    set2.insert(s[i])\n        \
    \        }\n                j = 0\n            }\n        }\n        return set1.count\
    \ == 3 && set2.count == 3\n    } else {\n        return false\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkocu57uo.swift:19:8: error: cannot find 'len' in scope\n    if\
    \ len(s) >= 3 {\n       ^~~\n/tmp/tmpkocu57uo.swift:24:16: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if s[i] == s[j] {\n               ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpkocu57uo.swift:24:24: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n            if s[i] == s[j] {\n                       ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpkocu57uo.swift:25:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      j++\n                 ^~\n/tmp/tmpkocu57uo.swift:28:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \       set1.insert(s[i])\n                                 ^\n/tmp/tmpkocu57uo.swift:28:26:\
    \ error: cannot use mutating member on immutable value: 'set1' is a 'let' constant\n\
    \                    set1.insert(s[i])\n                    ~~~~ ^\n/tmp/tmpkocu57uo.swift:20:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let set1 = Set<String>()\n\
    \        ^~~\n        var\n/tmp/tmpkocu57uo.swift:31:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \       set2.insert(s[i])\n                                 ^\n/tmp/tmpkocu57uo.swift:31:26:\
    \ error: cannot use mutating member on immutable value: 'set2' is a 'let' constant\n\
    \                    set2.insert(s[i])\n                    ~~~~ ^\n/tmp/tmpkocu57uo.swift:21:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let set2 = Set<String>()\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && !is_same(s.prefix(3), s.suffix(3))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_nshvhgu.swift:19:29: error: cannot find 'is_same' in scope\n \
    \   return s.count >= 3 && !is_same(s.prefix(3), s.suffix(3))\n              \
    \              ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    \n    var\
    \ count = 0\n    for i in 0..<s.count {\n        if s[i] == s[i+1] {\n       \
    \     count = count+1\n        }\n    }\n    if count == s.count-3  {\n      \
    \  return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_87sj6b7.swift:25:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ s[i+1] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp_87sj6b7.swift:25:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == s[i+1] {\n                   ^~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var index = 0\n    for letter in s.characters {\n        if index ==\
    \ 0 || letter != s[index-1] {\n            return false\n        }\n        index++\n\
    \    }\n    return index == 3 && s.characters.count == 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf6ffyfcn.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpf6ffyfcn.swift:21:36:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if index == 0 || letter != s[index-1] {\n\
    \                                   ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpf6ffyfcn.swift:24:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        index++\n       \
    \      ^~\n/tmp/tmpf6ffyfcn.swift:26:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    return index == 3 && s.characters.count == 3\n    \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    for x in stride(from: 0, to: s.characters.count, by: 3) {\n        if\
    \ s.substring(from: x, to: x + 3) != s.substring(from: x + 3, to: x + 4) {\n \
    \           return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpotd0n1a7.swift:19:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    for x in stride(from: 0, to: s.characters.count, by:\
    \ 3) {\n                                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpotd0n1a7.swift:20:14: error: value of type\
    \ 'String' has no member 'substring'\n        if s.substring(from: x, to: x +\
    \ 3) != s.substring(from: x + 3, to: x + 4) {\n           ~ ^~~~~~~~~\n/tmp/tmpotd0n1a7.swift:20:49:\
    \ error: value of type 'String' has no member 'substring'\n        if s.substring(from:\
    \ x, to: x + 3) != s.substring(from: x + 3, to: x + 4) {\n                   \
    \                           ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var distinctCharCount:\
    \ Int = 0\n    var charArr: [Char] = []\n    for(_, ch) in s.enumerated() {\n\
    \        if !charArr.contains(ch) {\n            charArr.append(ch)\n        }\n\
    \        distinctCharCount += 1\n    }\n    return distinctCharCount >= 3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo72a9lc1.swift:21:19: error: cannot find type 'Char' in scope\n\
    \    var charArr: [Char] = []\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count > 3 else {\n        return true\n    }\n    var buffer\
    \ = [Character](repeating: Character(), count: s.count)\n    let lastIndex = s.count\
    \ - 1\n    for index in 0..<s.count {\n        buffer[index] = s[index]\n    }\n\
    \    var isHappy = true\n    for index in 0..<3 {\n        if buffer[index] !=\
    \ buffer[index+1] || buffer[index] != buffer[index+2] {\n            isHappy =\
    \ false\n            break\n        }\n    }\n    return isHappy\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpod15f53w.swift:22:51: error: missing argument for parameter #1\
    \ in call\n    var buffer = [Character](repeating: Character(), count: s.count)\n\
    \                                                  ^\n                       \
    \                           <#Unicode.Scalar#>\nSwift.Character:2:23: note: 'init(_:)'\
    \ declared here\n    @inlinable public init(_ content: Unicode.Scalar)\n     \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.isHappy && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp44lt6ol_.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy && s.isHappy()\n           ~ ^~~~~~~\n/tmp/tmp44lt6ol_.swift:19:27:\
    \ error: value of type 'String' has no member 'isHappy'\n    return s.isHappy\
    \ && s.isHappy()\n                        ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return is_happy_helper(s)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe0g7slxw.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var chars = s.characters\n    var len = chars.count\n    if (len < 3)\
    \ return false\n    var isHappy = true\n    var prev = \"\"\n    var i = 0\n \
    \   var j = 0\n    while (i < len) {\n        if chars[i] == prev {\n        \
    \    i += 1\n        } else {\n            isHappy = false\n            break\n\
    \        }\n        if i >= len {\n            break\n        }\n        prev\
    \ = chars[i]\n        i += 1\n    }\n    for (i = 0; i < len; i++) {\n       \
    \ j = 0\n        while (j < len) {\n            if chars[i] == chars[j] {\n  \
    \              j += 1\n            } else {\n                isHappy = false\n\
    \                break\n            }\n            if (j >= len) {\n         \
    \       break\n            }\n        }\n    }\n    return isHappy\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvs9o1szs.swift:21:18: error: expected '{' after 'if' condition\n\
    \    if (len < 3) return false\n                 ^\n/tmp/tmpvs9o1szs.swift:39:5:\
    \ error: C-style for statement has been removed in Swift 3\n    for (i = 0; i\
    \ < len; i++) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvs9o1szs.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    var chars\
    \ = s.characters\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvs9o1szs.swift:27:17: error: no exact matches in call\
    \ to subscript \n        if chars[i] == prev {\n                ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get\
    \ }\n           ^\nSwift.Collection:3:23: note: candidate expects value of type\
    \ '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable public\
    \ subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n        \
    \              ^\n/tmp/tmpvs9o1szs.swift:36:21: error: cannot assign value of\
    \ type 'Character' to type 'String'\n        prev = chars[i]\n               ~~~~~^~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = s[s.startIndex..<s.endIndex]\n    return s.count > 3 && is_happy_helper(s)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp70ygyim9.swift:20:27: error: cannot find 'is_happy_helper' in scope\n\
    \    return s.count > 3 && is_happy_helper(s)\n                          ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev: String?\
    \ = nil\n    for c in s {\n        if prev != nil && prev! == c {\n          \
    \  return false\n        }\n        prev = c as String\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxo39h7nr.swift:24:33: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        if prev != nil && prev!\
    \ == c {\n                          ~~~~~ ^  ~\n/tmp/tmpxo39h7nr.swift:24:33:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if prev != nil && prev! ==\
    \ c {\n                                ^\n/tmp/tmpxo39h7nr.swift:27:18: error:\
    \ cannot convert value of type 'Character' to type 'String' in coercion\n    \
    \    prev = c as String\n               ~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty { return false }\n    return s.count == 3 && s.characters.split{$0\
    \ == \"\"}.map{$0.characters.map{\n            switch $0 {\n            case \"\
    a\", \"e\", \"i\", \"o\", \"u\": return true\n            default: return false\n\
    \            }\n        }.reduce(true, combine: { $0 && $1 })\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftavw43e.swift:20:57: error: cannot convert value of type '[Bool]'\
    \ to expected argument type 'Bool'\n    return s.count == 3 && s.characters.split{$0\
    \ == \"\"}.map{$0.characters.map{\n                                          \
    \              ^\n/tmp/tmpftavw43e.swift:20:30: error: type '(String) -> Bool'\
    \ cannot conform to 'RegexComponent'\n    return s.count == 3 && s.characters.split{$0\
    \ == \"\"}.map{$0.characters.map{\n                             ^\n/tmp/tmpftavw43e.swift:20:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    return s.count == 3 && s.characters.split{$0 == \"\"}.map{$0.characters.map{\n\
    \                             ^\n/tmp/tmpftavw43e.swift:20:30: note: required\
    \ by instance method 'split(separator:maxSplits:omittingEmptySubsequences:)' where\
    \ 'some RegexComponent' = '(String) -> Bool'\n    return s.count == 3 && s.characters.split{$0\
    \ == \"\"}.map{$0.characters.map{\n                             ^\n/tmp/tmpftavw43e.swift:25:17:\
    \ error: extraneous argument label 'combine:' in call\n        }.reduce(true,\
    \ combine: { $0 && $1 })\n                ^      ~~~~~~~~~\n                 \
    \      \n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    let start\
    \ = s[0...2].sorted()\n    let end = s[2...].sorted()\n    for (_, v) in start.zip(end)\
    \ {\n        if v != v {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9_l9vtq7.swift:22:17: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \    let start = s[0...2].sorted()\n                ^~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmp9_l9vtq7.swift:23:15: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    let end = s[2...].sorted()\n              ^~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmp9_l9vtq7.swift:24:5: error: failed to produce\
    \ diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, v) in start.zip(end) {\n    ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpla3rciqv.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let result = s.characters.split(separator: \"\").map({ String($0) }).filter({\
    \ \n        let cSet = NSCharacterSet(charactersIn: $0).inverted\n        return\
    \ cSet.count == s.characters.count\n    }).count >= 3\n\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1tip0xxw.swift:20:20: error: cannot find 'NSCharacterSet' in scope\n\
    \        let cSet = NSCharacterSet(charactersIn: $0).inverted\n              \
    \     ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    let alphabet = Set(\"abcdefghijklmnopqrstuvwxyz\"\
    .characters)\n    var seen = Set<String>()\n    for i in 0..<s.count {\n     \
    \   let subString = s[i ..< i+3]\n        let alreadySeen = seen.intersection(Set(subString.characters)).count\
    \ != 0\n        if alreadySeen {\n            seen.remove(subString)\n       \
    \ } else {\n            seen.add(\"\\(&subString)\")\n        }\n    }\n    return\
    \ seen.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpidinsc4q.swift:20:53: error: 'characters' is unavailable: Please\
    \ use String directly\n    let alphabet = Set(\"abcdefghijklmnopqrstuvwxyz\".characters)\n\
    \                                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpidinsc4q.swift:23:25: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n        let subString = s[i ..< i+3]\n                     \
    \   ^~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n/tmp/tmpidinsc4q.swift:24:49:\
    \ error: missing argument label 'arrayLiteral:' in call\n        let alreadySeen\
    \ = seen.intersection(Set(subString.characters)).count != 0\n                \
    \                                ^\n                                         \
    \       arrayLiteral: \n/tmp/tmpidinsc4q.swift:28:18: error: value of type 'Set<String>'\
    \ has no member 'add'\n            seen.add(\"\\(&subString)\")\n            ~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let count = s.length\n    let res = count == 3 && allDistinct(s.substringWithRange(NSMakeRange(0,\
    \ count-3)))\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdyp6qper.swift:19:19: error: value of type 'String' has no member\
    \ 'length'\n    let count = s.length\n                ~ ^~~~~~\n/tmp/tmpdyp6qper.swift:20:29:\
    \ error: cannot find 'allDistinct' in scope\n    let res = count == 3 && allDistinct(s.substringWithRange(NSMakeRange(0,\
    \ count-3)))\n                            ^~~~~~~~~~~\n/tmp/tmpdyp6qper.swift:20:62:\
    \ error: cannot find 'NSMakeRange' in scope\n    let res = count == 3 && allDistinct(s.substringWithRange(NSMakeRange(0,\
    \ count-3)))\n                                                             ^~~~~~~~~~~\n\
    /tmp/tmpdyp6qper.swift:20:43: error: value of type 'String' has no member 'substringWithRange'\n\
    \    let res = count == 3 && allDistinct(s.substringWithRange(NSMakeRange(0, count-3)))\n\
    \                                        ~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.charsNotIn(\"abcde\").sorted == s\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpug1mr8y7.swift:19:30: error: value of type 'String' has no member\
    \ 'charsNotIn'\n    return s.count >= 3 && s.charsNotIn(\"abcde\").sorted == s\n\
    \                           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var index = 0\n  \
    \  var prevIndex = 0\n    while index < s.count {\n        if s[index] == s[index]\
    \ {\n            index++\n        } else {\n            if index != prevIndex\
    \ + 1 {\n                return false\n            }\n            prevIndex =\
    \ index\n            index++\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpukp2f7_3.swift:25:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[index]\
    \ == s[index] {\n           ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpukp2f7_3.swift:25:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] == s[index] {\n                       ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpukp2f7_3.swift:26:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n/tmp/tmpukp2f7_3.swift:32:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            index++\n        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 && s.count % 3 == 0 else { return false }\n    var\
    \ distinctCount = 0\n    for c in s.characters {\n        if s.lowercaseString.contains(c.lowercaseString)\
    \ {\n            distinctCount += 1\n        }\n    }\n    return distinctCount\
    \ >= s.count / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp35dka6kd.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp35dka6kd.swift:22:14:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        if s.lowercaseString.contains(c.lowercaseString)\
    \ {\n           ~ ^~~~~~~~~~~~~~~\n/tmp/tmp35dka6kd.swift:22:41: error: value\
    \ of type 'Character' has no member 'lowercaseString'\n        if s.lowercaseString.contains(c.lowercaseString)\
    \ {\n                                      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty { return false }\n    let n = 3\n    if s.count%3! == 0\
    \ { return false }\n    let result = Set<String>.init(repeating: \"\", count:\
    \ s.count/3)\n    for i in 1..<s.count{\n        if s[i] == s[i-1] {\n       \
    \     if s[i] == s[i+1] {\n                result[i] = s[i]\n            }\n \
    \       }\n    }\n    return result.count == n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpq4h_ji__.swift:21:17: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n    if s.count%3! == 0 { return false }\n               ~^\n   \
    \             \n/tmp/tmpq4h_ji__.swift:22:30: error: no exact matches in call\
    \ to initializer \n    let result = Set<String>.init(repeating: \"\", count: s.count/3)\n\
    \                             ^\n/tmp/tmpq4h_ji__.swift:22:30: note: found candidate\
    \ with type '(__owned String) -> Set<String>'\n    let result = Set<String>.init(repeating:\
    \ \"\", count: s.count/3)\n                             ^\n/tmp/tmpq4h_ji__.swift:24:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i-1] {\n           ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq4h_ji__.swift:24:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i-1] {\n                 \
    \  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpq4h_ji__.swift:25:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if s[i] == s[i+1] {\n               ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpq4h_ji__.swift:25:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if s[i] == s[i+1] {\n                       ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    var count = 0\n    for index in s.characters.indices\
    \ {\n        if s.characters.characters.contains(index) {\n            count +=\
    \ 1\n        }\n    }\n    if count < 3 {\n        return false\n    }\n    for\
    \ index in s.characters.indices {\n        if s.characters.characters.contains(index)\
    \ {\n            count += 1\n        }\n        if count > 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpfqle7_cy.swift:20:9: error: invalid redeclaration of 'count'\n\
    \    var count = 0\n        ^\n/tmp/tmpfqle7_cy.swift:19:9: note: 'count' previously\
    \ declared here\n    var count = 0\n        ^\n/tmp/tmpfqle7_cy.swift:21:20: error:\
    \ 'characters' is unavailable: Please use String directly\n    for index in s.characters.indices\
    \ {\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfqle7_cy.swift:22:36: error: no exact matches in call to\
    \ instance method 'contains'\n        if s.characters.characters.contains(index)\
    \ {\n                                   ^\n_StringProcessing.Collection:3:17:\
    \ note: candidate requires that 'DefaultIndices<String>.Element' (aka 'String.Index')\
    \ conform to 'Collection' (requirement specified as 'C' : 'Collection')\n    public\
    \ func contains<C>(_ other: C) -> Bool where C : Collection, Self.Element == C.Element\n\
    \                ^\n_StringProcessing.BidirectionalCollection:3:17: note: candidate\
    \ requires that 'DefaultIndices<String>.Element' (aka 'String.Index') conform\
    \ to 'RegexComponent' (requirement specified as 'some RegexComponent' : 'RegexComponent')\n\
    \    public func contains(_ regex: some RegexComponent) -> Bool\n            \
    \    ^\n/tmp/tmpfqle7_cy.swift:29:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in s.characters.indices {\n             \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfqle7_cy.swift:30:36:\
    \ error: no exact matches in call to instance method 'contains'\n        if s.characters.characters.contains(index)\
    \ {\n                                   ^\n_StringProcessing.Collection:3:17:\
    \ note: candidate requires that 'DefaultIndices<String>.Element' (aka 'String.Index')\
    \ conform to 'Collection' (requirement specified as 'C' : 'Collection')\n    public\
    \ func contains<C>(_ other: C) -> Bool where C : Collection, Self.Element == C.Element\n\
    \            "
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n\n    var counter: Int\
    \ = 0\n    var prev: String = \"\"\n\n    for letter in s.characters {\n     \
    \   if letter != prev {\n            counter = 1\n        } else {\n         \
    \   counter += 1\n        }\n\n        prev = letter\n    }\n\n    return counter\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpebjt1t84.swift:26:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpebjt1t84.swift:27:22:\
    \ error: cannot convert value of type 'String' to expected argument type 'Character'\n\
    \        if letter != prev {\n                     ^\n/tmp/tmpebjt1t84.swift:33:16:\
    \ error: cannot assign value of type 'Character' to type 'String'\n        prev\
    \ = letter\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.isHappy // or !s.isEmpty && s.count >= 3 && s.lastIndexOf(\"\
    a\", from: s.startIndex) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxy0_33so.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy // or !s.isEmpty && s.count >= 3 && s.lastIndexOf(\"\
    a\", from: s.startIndex) != nil\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var s = s\n    let len = s.characters.count\n    if len < 3 {\n     \
    \   return false\n    }\n    if s.count % 3 != 0 {\n        return false\n   \
    \ }\n    for i in 0..<len {\n        for j in i + 2..<len {\n            if s[i]\
    \ != s[j] {\n                return false\n            }\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf_onyibm.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpf_onyibm.swift:29:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if s[i] != s[j] {\n               ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpf_onyibm.swift:29:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if s[i] != s[j] {\n               \
    \        ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpf_onyibm.swift:19:9: warning: variable 's' was never mutated;\
    \ consider changing to 'let' constant\n    var s = s\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let n = s.characters.count\n    return (n == 3) || (n == s.characters.filter{$0\
    \ != s[$1]}).isEmpty ?? false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi_uuvhgn.swift:19:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let n = s.characters.count\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi_uuvhgn.swift:20:49:\
    \ error: contextual closure type '(String.Element) throws -> Bool' (aka '(Character)\
    \ throws -> Bool') expects 1 argument, but 2 were used in closure body\n    return\
    \ (n == 3) || (n == s.characters.filter{$0 != s[$1]}).isEmpty ?? false\n     \
    \                                           ^\n/tmp/tmpi_uuvhgn.swift:20:27: error:\
    \ binary operator '==' cannot be applied to operands of type 'Int' and 'String'\n\
    \    return (n == 3) || (n == s.characters.filter{$0 != s[$1]}).isEmpty ?? false\n\
    \                        ~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpi_uuvhgn.swift:20:27:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Int, Int), (String, String)\n    return (n == 3) || (n == s.characters.filter{$0\
    \ != s[$1]}).isEmpty ?? false\n                          ^\n/tmp/tmpi_uuvhgn.swift:20:64:\
    \ error: value of type 'Bool' has no member 'isEmpty'\n    return (n == 3) ||\
    \ (n == s.characters.filter{$0 != s[$1]}).isEmpty ?? false\n                 \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var n = s.characters.count\n    var a = [String]()\n    var b = [String]()\n\
    \n    for index in 0..<n {\n        guard let c = s.characters[index] else {\n\
    \            return false\n        }\n\n        if !a.contains(c) {\n        \
    \    a.append(c)\n        }\n\n        if a.count >= 3 {\n            for k in\
    \ 0..<a.count {\n                if a[k] == a[k+1] && a[k] == a[k+2] {\n     \
    \               b.append(a[k])\n                }\n            }\n        }\n\
    \    }\n\n    if a.count > 3 {\n        return false\n    }\n\n    return b.count\
    \ <= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2l2_s2fp.swift:19:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    var n = s.characters.count\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2l2_s2fp.swift:24:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard let c = s.characters[index] else\
    \ {\n                      ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2l2_s2fp.swift:24:25: error: 'characters'\
    \ is unavailable: Please use String directly\n        guard let c = s.characters[index]\
    \ else {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l2_s2fp.swift:24:15: error: initializer for conditional\
    \ binding must have Optional type, not 'Character'\n        guard let c = s.characters[index]\
    \ else {\n              ^       ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2l2_s2fp.swift:28:24:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if !a.contains(c) {\n                       ^\n/tmp/tmp2l2_s2fp.swift:29:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            a.append(c)\n                     ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  if s.count < 3 { return false }\n  \n  var last: Character? = nil\n  \n\
    \  for letter in s {\n    if letter == last {\n      return false\n    }\n   \
    \ last = letter\n  }\n  \n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpiu0l7noa/tmpiu0l7noa.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abab93b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abab90aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abab90aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abab90a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiu0l7noa                        0x00005609e256c888 <unavailable> + 6280

    5    libc.so.6                          0x00002abab959f460 __libc_start_main +
    245

    6    tmpiu0l7noa                        0x00005609e256c049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptkxc2okl.swift:23:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] !=\
    \ s[i] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmptkxc2okl.swift:23:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] != s[i] {\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  guard s.count > 3 else { return true }\n  let groups = s.unicodeScalars.reduce([])\
    \ { $0 + [String($1)] }\n  return groups.count % 3 == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp5keiqotm/tmp5keiqotm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1377e00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1377af7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1377af7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1377af67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5keiqotm                        0x0000562c879aa71d <unavailable> + 5917

    5    libc.so.6                          0x00002b1377fec460 __libc_start_main +
    245

    6    tmp5keiqotm                        0x0000562c879aa3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    \n    for\
    \ index in 0..<s.count {\n        if let _ = s.subSequence(index, index + 2).distinct().count\
    \ {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcqznkzh3.swift:24:63: error: type of expression is ambiguous without\
    \ more context\n        if let _ = s.subSequence(index, index + 2).distinct().count\
    \ {\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.length < 3 {\n\
    \        return false\n    }\n    var counts: [Character] = [Character]()\n  \
    \  for char in s {\n        if !counts.contains(char) {\n            counts.append(char)\n\
    \        }\n    }\n    if counts.length != 3 {\n        return false\n    }\n\
    \    for index in stride(from: 0, to: counts.length - 1, by: 3) {\n        if\
    \ counts[index] != counts[index + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppf960wpi.swift:22:10: error: value of type 'String' has no member\
    \ 'length'\n    if s.length < 3 {\n       ~ ^~~~~~\n/tmp/tmppf960wpi.swift:31:15:\
    \ error: value of type '[Character]' has no member 'length'\n    if counts.length\
    \ != 3 {\n       ~~~~~~ ^~~~~~\n/tmp/tmppf960wpi.swift:34:45: error: value of\
    \ type '[Character]' has no member 'length'\n    for index in stride(from: 0,\
    \ to: counts.length - 1, by: 3) {\n                                     ~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    var lastLetterIsA: String\
    \ = \"false\"\n    var charIsA: String = \"false\"\n    var numOfLettersCheck:\
    \ Int = 0\n    var lastThreeLettersCheck: String = s.substringToIndex(s.startIndex.advancedBy(2))\n\
    \    for char in lastThreeLettersCheck.unicodeScalars {\n        numOfLettersCheck\
    \ += 1\n        if char == unicodeScalar(0) || (numOfLettersCheck == 3 && char\
    \ == unicodeScalar(1)){\n            lastLetterIsA = \"true\"\n        } else\
    \ if char == unicodeScalar(1) {\n            lastLetterIsA = \"false\"\n     \
    \   }\n    }\n    if numOfLettersCheck < 3 {\n        return false\n    }\n  \
    \  if lastLetterIsA == charIsA {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppv8v3zon.swift:25:43: error: value of type 'String' has no member\
    \ 'substringToIndex'\n    var lastThreeLettersCheck: String = s.substringToIndex(s.startIndex.advancedBy(2))\n\
    \                                        ~ ^~~~~~~~~~~~~~~~\n/tmp/tmppv8v3zon.swift:25:73:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n    var lastThreeLettersCheck:\
    \ String = s.substringToIndex(s.startIndex.advancedBy(2))\n                  \
    \                                         ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmppv8v3zon.swift:28:20:\
    \ error: cannot find 'unicodeScalar' in scope\n        if char == unicodeScalar(0)\
    \ || (numOfLettersCheck == 3 && char == unicodeScalar(1)){\n                 \
    \  ^~~~~~~~~~~~~\n/tmp/tmppv8v3zon.swift:28:75: error: cannot find 'unicodeScalar'\
    \ in scope\n        if char == unicodeScalar(0) || (numOfLettersCheck == 3 &&\
    \ char == unicodeScalar(1)){\n                                               \
    \                           ^~~~~~~~~~~~~\n/tmp/tmppv8v3zon.swift:30:27: error:\
    \ cannot find 'unicodeScalar' in scope\n        } else if char == unicodeScalar(1)\
    \ {\n                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return true\n    }\n\n    if s.count < 3 {\n\
    \        return false\n    }\n\n    var happed = false\n\n    for i in 0 ..< s.count\
    \ {\n        if s[i] == s[i + 1] {\n            happed = !happed // don't re-happed\
    \ previous letter\n        }\n    }\n\n    return happed\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphiy0cio0.swift:30:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ s[i + 1] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmphiy0cio0.swift:30:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == s[i + 1] {\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty{\n        return false\n    }\n    var result = 0\n    for\
    \ i in 0..<s.count{\n        if s.index(after: i)!=s.index(before: i){\n     \
    \       result+=1\n        }\n    }\n    if result >= 3 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6yw3k1yq.swift:24:27: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n        if s.index(after: i)!=s.index(before:\
    \ i){\n                          ^\n/tmp/tmp6yw3k1yq.swift:24:29: error: cannot\
    \ force unwrap value of non-optional type 'String.Index'\n        if s.index(after:\
    \ i)!=s.index(before: i){\n           ~~~~~~~~~~~~~~~~~^\n                   \
    \         \n/tmp/tmp6yw3k1yq.swift:24:30: error: use of '=' in a boolean context,\
    \ did you mean '=='?\n        if s.index(after: i)!=s.index(before: i){\n    \
    \                        ~^  ~~~~~\n                             ==\n/tmp/tmp6yw3k1yq.swift:24:47:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \        if s.index(after: i)!=s.index(before: i){\n                         \
    \                     ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count == 3 {\n        for pos in stride(from: 0, to: s.count - 1,\
    \ by: 3) {\n            if s[pos] != s[pos + 1] || s[pos] != s[pos + 2] {\n  \
    \              return false\n            }\n        }\n        return true\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjeeqwkm3.swift:21:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if s[pos]\
    \ != s[pos + 1] || s[pos] != s[pos + 2] {\n               ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjeeqwkm3.swift:21:26:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if s[pos] != s[pos + 1] || s[pos] !=\
    \ s[pos + 2] {\n                         ^~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjeeqwkm3.swift:21:40: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n            if s[pos] != s[pos + 1] || s[pos] != s[pos + 2] {\n  \
    \                                     ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjeeqwkm3.swift:21:50: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if s[pos] != s[pos + 1] || s[pos] != s[pos + 2] {\n             \
    \                                    ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return len(s) > 3 && is_happy_helper(s.characters.split(\"\").map({ Character($0)\
    \ }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmph1tadrez.swift:19:12: error: cannot find 'len' in scope\n    return\
    \ len(s) > 3 && is_happy_helper(s.characters.split(\"\").map({ Character($0) }))\n\
    \           ^~~\n/tmp/tmph1tadrez.swift:19:26: error: cannot find 'is_happy_helper'\
    \ in scope\n    return len(s) > 3 && is_happy_helper(s.characters.split(\"\").map({\
    \ Character($0) }))\n                         ^~~~~~~~~~~~~~~\n/tmp/tmph1tadrez.swift:19:71:\
    \ error: no exact matches in call to initializer \n    return len(s) > 3 && is_happy_helper(s.characters.split(\"\
    \").map({ Character($0) }))\n                                                \
    \                      ^\n/tmp/tmph1tadrez.swift:19:71: note: found candidate\
    \ with type '(Unicode.Scalar) -> Character'\n    return len(s) > 3 && is_happy_helper(s.characters.split(\"\
    \").map({ Character($0) }))\n                                                \
    \                      ^\n/tmp/tmph1tadrez.swift:19:71: note: found candidate\
    \ with type '(String) -> Character'\n    return len(s) > 3 && is_happy_helper(s.characters.split(\"\
    \").map({ Character($0) }))\n                                                \
    \                      ^\n/tmp/tmph1tadrez.swift:19:61: error: missing argument\
    \ label 'separator:' in call\n    return len(s) > 3 && is_happy_helper(s.characters.split(\"\
    \").map({ Character($0) }))\n                                                \
    \            ^\n                                                            separator:\
    \ \n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 &&\n        s.reduce(true, {\n            $0 &&\n\
    \            s.last!.count != s.count\n        })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpesqr0v2r.swift:20:24: error: contextual closure type '(Bool, String.Element)\
    \ throws -> Bool' (aka '(Bool, Character) throws -> Bool') expects 2 arguments,\
    \ but 1 was used in closure body\n        s.reduce(true, {\n                 \
    \      ^\n/tmp/tmpesqr0v2r.swift:22:21: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'count'\n            s.last!.count != s.count\n\
    \            ~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var sum: Int = 0\n    for letter in s {\n        sum += Int(letter)!\n\
    \    }\n    if sum < 3 { return false }\n    var prev = 0\n    var count = 0\n\
    \    for letter in s {\n        if letter != s[prev] {\n            count += 1\n\
    \        } else {\n            count = 0\n        }\n        if count >= 3 &&\
    \ sum - prev == 3 * (count - 3) { return true }\n        prev = Int(letter)!\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ibax4x8.swift:21:20: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        sum += Int(letter)!\n          \
    \         ^\n/tmp/tmp3ibax4x8.swift:27:22: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ letter != s[prev] {\n                     ^~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp3ibax4x8.swift:33:20: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        prev = Int(letter)!\n                   ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n\n    let firstDistinctIndexSet\
    \ = Array(Set(s.characters)).indices.filter({ s.characters[$0] == s.characters[$0\
    \ + 1] })\n    if firstDistinctIndexSet.count == 0 {\n        return false\n \
    \   }\n\n    let lastDistinctIndexSet = Array(Set(s.characters[firstDistinctIndexSet.end..<s.characters.count]).reverse()).indices.filter({\
    \ s.characters[$0] == s.characters[$0 + 1] })\n    if lastDistinctIndexSet.count\
    \ == 0 {\n        return false\n    }\n\n    for i in firstDistinctIndexSet.indices\n\
    \    {\n        if i != lastDistinctIndexSet.first && lastDistinctIndexSet.contains(i\
    \ + 1)\n        {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8wuckw28.swift:23:45: error: 'characters' is unavailable: Please\
    \ use String directly\n    let firstDistinctIndexSet = Array(Set(s.characters)).indices.filter({\
    \ s.characters[$0] == s.characters[$0 + 1] })\n                              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8wuckw28.swift:23:75: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    let firstDistinctIndexSet\
    \ = Array(Set(s.characters)).indices.filter({ s.characters[$0] == s.characters[$0\
    \ + 1] })\n                                                                  \
    \        ^~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp8wuckw28.swift:23:77: error: 'characters' is unavailable:\
    \ Please use String directly\n    let firstDistinctIndexSet = Array(Set(s.characters)).indices.filter({\
    \ s.characters[$0] == s.characters[$0 + 1] })\n                              \
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp8wuckw28.swift:23:95: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    let firstDistinctIndexSet = Array(Set(s.characters)).indices.filter({ s.characters[$0]\
    \ == s.characters[$0 + 1] })\n                                               \
    \                                               ^~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8wuckw28.swift:23:97:\
    \ error: 'characters' is unavailable: Please use String directly\n    let firstDistinctIndexSet\
    \ = Array(Set(s.characters)).indices.filter({ s.characters[$0] == s.characters[$0\
    \ + 1] })\n           "
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return true\n    }\n    \n    let len = s.count\n\
    \    if len < 3 {\n        return true\n    }\n    var hap_arr = [String]()\n\
    \    \n    for i in 0..<3 {\n        hap_arr.append(s.prefix(i))\n    }\n    \n\
    \    for i in 1..<(len - 3) {\n        if hap_arr.contains(hap_arr[i - 1] + hap_arr[i\
    \ + 1] + hap_arr[i + 2]) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjgm69668.swift:30:17: error: no exact matches in call to instance\
    \ method 'append'\n        hap_arr.append(s.prefix(i))\n                ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpjgm69668.swift:30:17: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        hap_arr.append(s.prefix(i))\n\
    \                ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let n = s.count\n    return n > 3 && !s.isEmpty &&\n        count(s.first!,\
    \ s.first!) == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc78dmxcd.swift:21:9: error: cannot find 'count' in scope\n    \
    \    count(s.first!, s.first!) == n\n        ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    return len >= 3 && s.characters.reduce(true)\
    \ { (prev, cur) -> Bool in\n        guard let prev = prev else {\n           \
    \ return false\n        }\n        if cur != prev {\n            return false\n\
    \        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0j_1qt7z.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0j_1qt7z.swift:24:16:\
    \ error: conflicting arguments to generic parameter 'Self' ('String.Element' vs.\
    \ 'Bool')\n        if cur != prev {\n               ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   if String(Array(s.characters)[0 ..< 3]).isEmpty {\n        return true\n \
    \   }\n    return String(Array(s.characters)[0 ..< 3]).isEqualToString(String(Array(s.characters)[1\
    \ ..< 4]))\n        && String(Array(s.characters)[1 ..< 4]).isEqualToString(String(Array(s.characters)[2\
    \ ..< 6]))\n        && String(Array(s.characters)[2 ..< 6]).isEqualToString(String(Array(s.characters)[3\
    \ ..< 9]))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq_ent3ix.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpq_ent3ix.swift:23:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    if String(Array(s.characters)[0\
    \ ..< 3]).isEmpty {\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpq_ent3ix.swift:26:49: error: value of type\
    \ 'String' has no member 'isEqualToString'\n    return String(Array(s.characters)[0\
    \ ..< 3]).isEqualToString(String(Array(s.characters)[1 ..< 4]))\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpq_ent3ix.swift:27:49: error: value of type 'String'\
    \ has no member 'isEqualToString'\n        && String(Array(s.characters)[1 ..<\
    \ 4]).isEqualToString(String(Array(s.characters)[2 ..< 6]))\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpq_ent3ix.swift:28:49: error: value of type 'String'\
    \ has no member 'isEqualToString'\n        && String(Array(s.characters)[2 ..<\
    \ 6]).isEqualToString(String(Array(s.characters)[3 ..< 9]))\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014388
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count >= 3 &&\n        Arrays.filter(s.characters.enumerated()).map({\
    \ $0.element}.joined().characters.map { String($0) }.sorted(by: {$0.0 < $1.0}).reduce(into:\
    \ \"\") { $0.append(\"\\($1)\") } == s\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoiazi273.swift:21:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpoiazi273.swift:20:53: note: to match this opening '('\n        Arrays.filter(s.characters.enumerated()).map({\
    \ $0.element}.joined().characters.map { String($0) }.sorted(by: {$0.0 < $1.0}).reduce(into:\
    \ \"\") { $0.append(\"\\($1)\") } == s\n                                     \
    \               ^\n/tmp/tmpoiazi273.swift:20:9: error: cannot find 'Arrays' in\
    \ scope\n        Arrays.filter(s.characters.enumerated()).map({ $0.element}.joined().characters.map\
    \ { String($0) }.sorted(by: {$0.0 < $1.0}).reduce(into: \"\") { $0.append(\"\\\
    ($1)\") } == s\n        ^~~~~~\n/tmp/tmpoiazi273.swift:19:12: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n    return s.characters.count\
    \ >= 3 &&\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014402
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    var lastCount = 0\n    for c in s {\n        if last\
    \ == c {\n            count += 1\n        } else {\n            if count >= 3\
    \ {\n                return false\n            }\n            count = 0\n    \
    \    }\n        lastCount = count\n    }\n    if lastCount >= 3 {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqrfupkre.swift:22:12: error: cannot find 'last' in scope\n    \
    \    if last == c {\n           ^~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 && checkDistinct(s, count: 3) else {\n        return\
    \ false\n    }\n    for idx in stride(from: s.count - 1, to: 0, by: -1) {\n  \
    \      if s[idx] == s[idx+1] &&\n            s[idx] == s[idx+2] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9s49atqj.swift:19:27: error: cannot find 'checkDistinct' in scope\n\
    \    guard s.count >= 3 && checkDistinct(s, count: 3) else {\n               \
    \           ^~~~~~~~~~~~~\n/tmp/tmp9s49atqj.swift:23:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[idx] == s[idx+1] &&\n           ^~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp9s49atqj.swift:23:22: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if s[idx] == s[idx+1] &&\n                     ^~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9s49atqj.swift:24:13:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            s[idx] == s[idx+2] {\n            ^~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9s49atqj.swift:24:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            s[idx] == s[idx+2] {\n            \
    \          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 &&\n        all((0..<3).map { s[$0] == s[$0 + 1]\
    \ }) &&\n        all((0..<3).map { s[$0] == s[$0 + 2] })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp26jygee3.swift:20:21: error: cannot convert value of type '[Bool]'\
    \ to expected argument type 'SIMDMask<Storage>'\n        all((0..<3).map { s[$0]\
    \ == s[$0 + 1] }) &&\n                    ^\n/tmp/tmp26jygee3.swift:20:9: error:\
    \ generic parameter 'Storage' could not be inferred\n        all((0..<3).map {\
    \ s[$0] == s[$0 + 1] }) &&\n        ^\nSwift.all:1:13: note: in call to function\
    \ 'all'\npublic func all<Storage>(_ mask: SIMDMask<Storage>) -> Bool where Storage\
    \ : SIMD, Storage.Scalar : FixedWidthInteger, Storage.Scalar : SignedInteger\n\
    \            ^\n/tmp/tmp26jygee3.swift:21:9: error: generic parameter 'Storage'\
    \ could not be inferred\n        all((0..<3).map { s[$0] == s[$0 + 2] })\n   \
    \     ^\nSwift.all:1:13: note: in call to function 'all'\npublic func all<Storage>(_\
    \ mask: SIMDMask<Storage>) -> Bool where Storage : SIMD, Storage.Scalar : FixedWidthInteger,\
    \ Storage.Scalar : SignedInteger\n            ^\n/tmp/tmp26jygee3.swift:21:21:\
    \ error: cannot convert value of type '[Bool]' to expected argument type 'SIMDMask<Storage>'\n\
    \        all((0..<3).map { s[$0] == s[$0 + 2] })\n                    ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count > 3 && !s.isEmpty &&\n        s == String(s.prefix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpzwx3_vdf/tmpzwx3_vdf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54953f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54950edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54950ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54950ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwx3_vdf                        0x0000561954deb5bb <unavailable> + 5563

    5    libc.so.6                          0x00002b54955e2460 __libc_start_main +
    245

    6    tmpzwx3_vdf                        0x0000561954deb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var i = 0\n    while i < s.count {\n        if i == 0 || s[i - 1] !=\
    \ s[i] {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ i >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe9p0pkas.swift:21:22: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if i == 0\
    \ || s[i - 1] != s[i] {\n                     ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpe9p0pkas.swift:21:34: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if i == 0 || s[i - 1] != s[i] {\n                        \
    \         ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    var counts\
    \ = Array(repeating: 0, count: s.count)\n    for i in 0..<s.count {\n        if\
    \ s[i] == s[i + 1] {\n            counts[i] += 1\n        }\n        if counts[i]\
    \ > 1 {\n            counts[i] = 0\n        }\n    }\n    return counts[s.count]\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyafhomb6.swift:24:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ s[i + 1] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpyafhomb6.swift:24:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == s[i + 1] {\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len: Int = s.count\n    let numOfConsecutiveLetters = Int(len / 3)\n\
    \    let distinctLetters = s[0..<numOfConsecutiveLetters].filter({ String($0).isNotEmpty\
    \ }).reduce(\"\", +)\n    \n    return numOfConsecutiveLetters == 3 && distinctLetters.isNotEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcyefkxm1.swift:21:78: error: value of type 'String' has no member\
    \ 'isNotEmpty'\n    let distinctLetters = s[0..<numOfConsecutiveLetters].filter({\
    \ String($0).isNotEmpty }).reduce(\"\", +)\n                                 \
    \                                 ~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpcyefkxm1.swift:21:103:\
    \ error: binary operator '+' cannot be applied to operands of type 'String' and\
    \ 'String.Element' (aka 'Character')\n    let distinctLetters = s[0..<numOfConsecutiveLetters].filter({\
    \ String($0).isNotEmpty }).reduce(\"\", +)\n                                 \
    \                                                                     ^\nSwift.RangeReplaceableCollection:5:35:\
    \ note: candidate requires that 'String.Element' (aka 'Character') conform to\
    \ 'RangeReplaceableCollection' (requirement specified as 'Other' : 'RangeReplaceableCollection')\n\
    \    @inlinable public static func + <Other>(lhs: Self, rhs: Other) -> Self where\
    \ Other : RangeReplaceableCollection, Self.Element == Other.Element\n        \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var i = 0\n    let length = s.length\n    guard length >= 3 else {\n\
    \        return false\n    }\n    while i < length {\n        if s[i] == s[i+1]\
    \ &&\n            s[i+1] == s[i+2] &&\n            s[i+2] == s[i+3] {\n      \
    \      return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqs2vibr5.swift:20:20: error: value of type 'String' has no member\
    \ 'length'\n    let length = s.length\n                 ~ ^~~~~~\n/tmp/tmpqs2vibr5.swift:25:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i+1] &&\n           ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqs2vibr5.swift:25:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i+1] &&\n                \
    \   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpqs2vibr5.swift:26:13: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   s[i+1] == s[i+2] &&\n            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpqs2vibr5.swift:26:23: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            s[i+1] == s[i+2] &&\n                      ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqs2vibr5.swift:27:13:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            s[i+2] == s[i+3] {\n            ^~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqs2vibr5.swift:27:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            s[i+2] == s[i+3] {\n              \
    \        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has be"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return is_happy_helper(s, 0) == nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpbnjqky58.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s, 0) == nil\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  return is_happy_helper(s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsf3bm16j.swift:19:10: error: cannot find 'is_happy_helper' in scope\n\
    \  return is_happy_helper(s)\n         ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var check:Bool = true\n    var result:Int = 0\n    for i in 0..<s.count\
    \ {\n        result = (i+2)%3\n        if s.substringWithRange((i,3)) == s.substringWithRange((result,3))\
    \ {\n            check = false\n        }\n    }\n    return check\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7jd8z_ra.swift:23:14: error: value of type 'String' has no member\
    \ 'substringWithRange'\n        if s.substringWithRange((i,3)) == s.substringWithRange((result,3))\
    \ {\n           ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7jd8z_ra.swift:23:45: error: value\
    \ of type 'String' has no member 'substringWithRange'\n        if s.substringWithRange((i,3))\
    \ == s.substringWithRange((result,3)) {\n                                    \
    \      ~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var prev: Character?\n    for c in s.characters {\n        if c == prev\
    \ {\n            return false\n        }\n        prev = c\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmi9ixc8w.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    var happy\
    \ = false\n    for (_, letter) in s.enumerated() {\n        if letter != s.last!\
    \ {\n            happy = true\n            break\n        }\n    }\n    return\
    \ happy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp8ysub3lv/tmp8ysub3lv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18885b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18882b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18882b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18882af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ysub3lv                        0x000055c564b798a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b18887a5460 __libc_start_main +
    245

    6    tmp8ysub3lv                        0x000055c564b79349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkuiy0fs4.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy()\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && is_happy_helper(s)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2yf1yhhd.swift:19:28: error: cannot find 'is_happy_helper' in scope\n\
    \    return s.count >= 3 && is_happy_helper(s)\n                           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    var count = 0\n    for n in s.characters {\n     \
    \   guard n < 'z' else {\n            return false\n        }\n        guard n\
    \ > 'a' else {\n            return false\n        }\n        count += 1\n    \
    \    if count == 3 {\n            if n == s.characters[count] {\n            \
    \    count += 1\n                count += 1\n                count += 1\n    \
    \        } else {\n                count = 0\n            }\n        }\n    }\n\
    \    return count == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv64fnsx.swift:22:19: error: single-quoted string literal found,\
    \ use '\"'\n        guard n < 'z' else {\n                  ^~~\n            \
    \      \"z\"\n/tmp/tmpxv64fnsx.swift:25:19: error: single-quoted string literal\
    \ found, use '\"'\n        guard n > 'a' else {\n                  ^~~\n     \
    \             \"a\"\n/tmp/tmpxv64fnsx.swift:20:9: error: invalid redeclaration\
    \ of 'count'\n    var count = 0\n        ^\n/tmp/tmpxv64fnsx.swift:19:9: note:\
    \ 'count' previously declared here\n    var count = 0\n        ^\n/tmp/tmpxv64fnsx.swift:21:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for n in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.characters.count < 3 { return false }\n    var prev: Character?\n\
    \    for char in s.characters {\n        if let prev = prev { if char != prev\
    \ { return false } }\n        prev = char\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwc682muf.swift:19:10: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s.characters.count < 3 { return false }\n      \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpwc682muf.swift:21:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count > 2 else {\n        return false\n    }\n    var hapswiftCheck\
    \ = false\n    for i in 1...s.count {\n        if s[i-1] == s[i-2] || s[i-1] ==\
    \ s[i-3] || s[i-1] == s[i-4] || s[i-1] == s[i-5] || s[i-1] == s[i-6] || s[i-1]\
    \ == s[i-7] || s[i-1] == s[i-8] || s[i-1] == s[i-9] || s[i-1] == s[i-10] || s[i-1]\
    \ == s[i-11] || s[i-1] == s[i-12] || s[i-1] == s[i-13] || s[i-1] == s[i-14] ||\
    \ s[i-1] == s[i-15] || s[i-1] == s[i-16] || s[i-1] == s[i-17] || s[i-1] == s[i-18]\
    \ || s[i-1] == s[i-19] || s[i-1] == s[i-20] || s[i-1] == s[i-21] || s[i-1] ==\
    \ s[i-22] || s[i-1] == s[i-23] || s[i-1] == s[i-24] || s[i-1] == s[i-25] || s[i-1]\
    \ == s[i-26] || s[i-1] == s[i-27] || s[i-1] == s[i-28] || s[i-1] == s[i-29] ||\
    \ s[i-1] == s[i-30] {\n            hapswiftCheck = true\n            break\n \
    \       }\n    }\n    return hapswiftCheck\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpn8n7ktec.swift:24:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i-1]\
    \ == s[i-2] || s[i-1] == s[i-3] || s[i-1] == s[i-4] || s[i-1] == s[i-5] || s[i-1]\
    \ == s[i-6] || s[i-1] == s[i-7] || s[i-1] == s[i-8] || s[i-1] == s[i-9] || s[i-1]\
    \ == s[i-10] || s[i-1] == s[i-11] || s[i-1] == s[i-12] || s[i-1] == s[i-13] ||\
    \ s[i-1] == s[i-14] || s[i-1] == s[i-15] || s[i-1] == s[i-16] || s[i-1] == s[i-17]\
    \ || s[i-1] == s[i-18] || s[i-1] == s[i-19] || s[i-1] == s[i-20] || s[i-1] ==\
    \ s[i-21] || s[i-1] == s[i-22] || s[i-1] == s[i-23] || s[i-1] == s[i-24] || s[i-1]\
    \ == s[i-25] || s[i-1] == s[i-26] || s[i-1] == s[i-27] || s[i-1] == s[i-28] ||\
    \ s[i-1] == s[i-29] || s[i-1] == s[i-30] {\n           ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn8n7ktec.swift:24:22:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i-1] == s[i-2] || s[i-1] == s[i-3]\
    \ || s[i-1] == s[i-4] || s[i-1] == s[i-5] || s[i-1] == s[i-6] || s[i-1] == s[i-7]\
    \ || s[i-1] == s[i-8] || s[i-1] == s[i-9] || s[i-1] == s[i-10] || s[i-1] == s[i-11]\
    \ || s[i-1] == s[i-12] || s[i-1] == s[i-13] || s[i-1] == s[i-14] || s[i-1] ==\
    \ s[i-15] || s[i-1] == s[i-16] || s[i-1] == s[i-17] || s[i-1] == s[i-18] || s[i-1]\
    \ == s[i-19] || s[i-1] == s[i-20] || s[i-1] == s[i-21] || s[i-1] == s[i-22] ||\
    \ s[i-1] == s[i-23] || s[i-1] == s[i-24] || s[i-1] == s[i-25] || s[i-1] == s[i-26]\
    \ || s[i-1] == s[i-27] || s[i-1] == s[i-28] || s[i-1] == s[i-29] || s[i-1] ==\
    \ s[i-30] {\n                     ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpn8n7ktec.swift:24:32: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i-1] == s[i-2] || s[i-1] == s[i-3] || s[i-1] == s[i-4] || s[i-1]\
    \ == s"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let alphabet = Array(s.characters)\n    for _ in 0 ..< 3 {\n        if\
    \ alphabet.contains(alphabet[alphabet.index(alphabet.startIndex, offsetBy: 3)])\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpujdhm2ln.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let alphabet = Array(s.characters)\n              \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard let _ = s.characters.count else { return false }\n    return s.isHappy()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcvv0jcwo.swift:19:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard let _ = s.characters.count else { return false\
    \ }\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpcvv0jcwo.swift:19:11: error: initializer for conditional\
    \ binding must have Optional type, not 'Int'\n    guard let _ = s.characters.count\
    \ else { return false }\n          ^       ~~~~~~~~~~~~~~~~~~\n/tmp/tmpcvv0jcwo.swift:20:14:\
    \ error: value of type 'String' has no member 'isHappy'\n    return s.isHappy()\n\
    \           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    for x in stride(from: 3, to: s.count, by: 3) {\n        if s.range(of:\
    \ x) != nil {\n            continue\n        }\n        return false\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpge84fsgu.swift:21:14: error: value of type 'String' has no member\
    \ 'range'\n        if s.range(of: x) != nil {\n           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  if s.length >= 3 { return s.isHappy() }\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi_co909f.swift:19:8: error: value of type 'String' has no member\
    \ 'length'\n  if s.length >= 3 { return s.isHappy() }\n     ~ ^~~~~~\n/tmp/tmpi_co909f.swift:19:31:\
    \ error: value of type 'String' has no member 'isHappy'\n  if s.length >= 3 {\
    \ return s.isHappy() }\n                            ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    // write your code in JavaScript (Node.js 8.9.4)\n    let str = s.toLowerCase()\n\
    \    \n    let isHappy = true\n    var count = 0\n    \n    for(let i = 0; i <\
    \ str.length; i++){\n        if(str[i] === str[i+1]){\n            count++\n \
    \       } else {\n            isHappy = false\n            break\n        }\n\
    \    }\n    return isHappy && count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplq28_3hb.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for(let i = 0; i < str.length; i++){\n    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplq28_3hb.swift:20:17: error: value of type 'String' has no member 'toLowerCase'\n\
    \    let str = s.toLowerCase()\n              ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count == 3 &&\n        (s.characters().enumerated().map({$0.0}).reduce({\n\
    \            $0 &&\n            $1 == $2 ? false : $0\n        }))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmewllnqn.swift:20:12: error: cannot call value of non-function\
    \ type 'String'\n        (s.characters().enumerated().map({$0.0}).reduce({\n \
    \          ^         ~~\n                     \n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  return s.characters.count >= 3 && is_happy_impl(&s.characters.dropFirst())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptww31hcz.swift:19:37: error: cannot find 'is_happy_impl' in scope\n\
    \  return s.characters.count >= 3 && is_happy_impl(&s.characters.dropFirst())\n\
    \                                    ^~~~~~~~~~~~~\n/tmp/tmptww31hcz.swift:19:51:\
    \ error: cannot pass immutable value as inout argument: function call returns\
    \ immutable value\n  return s.characters.count >= 3 && is_happy_impl(&s.characters.dropFirst())\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.length >= 3 else {\n        return false\n    }\n\n    var result:\
    \ Bool = false\n    for i in 0..<s.count {\n        if s[i] == s[i+1] && s[i+1]\
    \ == s[i+2] && s[i] != s[i+1] {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo7tiy3ux.swift:19:13: error: value of type 'String' has no member\
    \ 'length'\n    guard s.length >= 3 else {\n          ~ ^~~~~~\n/tmp/tmpo7tiy3ux.swift:25:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i+1] && s[i+1] == s[i+2] &&\
    \ s[i] != s[i+1] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpo7tiy3ux.swift:25:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == s[i+1] && s[i+1] == s[i+2] && s[i] != s[i+1] {\n         \
    \          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpo7tiy3ux.swift:25:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] == s[i+1] && s[i+1] == s[i+2] && s[i] != s[i+1] {\n                   \
    \          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpo7tiy3ux.swift:25:40: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] == s[i+1] && s[i+1] == s[i+2] && s[i] != s[i+1] {\n                   \
    \                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpo7tiy3ux.swift:25:50: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == s[i+1] && s[i+1] == s[i+2] && s[i] != s[i+1] {\n         \
    \                                        ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n          "
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar = \"\"\
    \n    var hapswift = true\n    var count = -1\n    for i in  s.characters{\n \
    \       count += 1\n        if count > 2 {\n            if lastChar != s[i] {\n\
    \                hapswift = false\n                break\n            }\n    \
    \    } else {\n            lastChar = s[i]\n        }\n    }\n    return hapswift\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvpels6nz.swift:25:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in  s.characters{\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvpels6nz.swift:28:29:\
    \ error: no exact matches in call to subscript \n            if lastChar != s[i]\
    \ {\n                            ^\nSwift.String:3:12: note: candidate expects\
    \ value of type 'Range<String.Index>' for parameter #1 (got 'Character')\n   \
    \ public subscript(r: Range<String.Index>) -> Substring { get }\n           ^\n\
    Swift.Collection:3:23: note: candidate expects value of type '(UnboundedRange_)\
    \ -> ()' for parameter #1 (got 'Character')\n    @inlinable public subscript(x:\
    \ (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n                     \
    \ ^\n/tmp/tmpvpels6nz.swift:33:25: error: no exact matches in call to subscript\
    \ \n            lastChar = s[i]\n                        ^\n/tmp/tmpvpels6nz.swift:33:25:\
    \ note: found candidate with type '(String.Index) -> Character'\n            lastChar\
    \ = s[i]\n                        ^\n/tmp/tmpvpels6nz.swift:33:25: note: found\
    \ candidate with type '(Range<String.Index>) -> Substring'\n            lastChar\
    \ = s[i]\n                        ^\n/tmp/tmpvpels6nz.swift:33:25: note: found\
    \ candidate with type '((UnboundedRange_) -> ()) -> String.SubSequence' (aka '((UnboundedRange_)\
    \ -> ()) -> Substring')\n            lastChar = s[i]\n                       \
    \ ^\n/tmp/tmpvpels6nz.swift:33:25: error: no 'subscript' candidates produce the\
    \ expected contextual result type 'String'\n            lastChar = s[i]\n    \
    \                    ^\nSwift.String:12:12: note: 'subscript(_:)' produces 'Character',\
    \ not the expected contextual result type 'String'\n    public subscript(i: String.Index)\
    \ -> Character { get }\n           ^\nSwift.String:3:12: note: 'subscript(_:)'\
    \ produces 'Substring', not the expected contextual result type 'String'\n   \
    \ public subscript(r: Range<String.Index>) -> Substring { get }\n           ^\n\
    Swift.Collection:"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count == 3 && count_distinct(s.characters, from: s.characters)\
    \ % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0y6h7uk.swift:19:28: error: cannot find 'count_distinct' in scope\n\
    \    return s.count == 3 && count_distinct(s.characters, from: s.characters) %\
    \ 3 == 0\n                           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var len = 0\n    for c in s.characters {\n        if c == ' ' {\n   \
    \         len++\n        }\n        else {\n            len += countCharactersWithOne(s:\
    \ c)\n        }\n    }\n    return len >= 3 && everyThreeCharactersHaveDistinctLetter(s:\
    \ s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbp2y37bj.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpbp2y37bj.swift:20:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpbp2y37bj.swift:22:16: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            len++\n          \
    \     ^~\n/tmp/tmpbp2y37bj.swift:25:20: error: cannot find 'countCharactersWithOne'\
    \ in scope\n            len += countCharactersWithOne(s: c)\n                \
    \   ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbp2y37bj.swift:28:24: error: cannot find 'everyThreeCharactersHaveDistinctLetter'\
    \ in scope\n    return len >= 3 && everyThreeCharactersHaveDistinctLetter(s: s)\n\
    \                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkuiy0fs4.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy()\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let chars = s.characters\n    guard s.count > 3 else {\n        return\
    \ true\n    }\n    var check = false\n    for index in 0..<3 {\n        if chars[index]\
    \ != chars[index + 1] || chars[index] != chars[index + 2] {\n            check\
    \ = true\n            break\n        }\n    }\n    return check\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppwgsz3zc.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppwgsz3zc.swift:25:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if chars[index] != chars[index + 1] ||\
    \ chars[index] != chars[index + 2] {\n           ^~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppwgsz3zc.swift:25:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if chars[index] != chars[index + 1] ||\
    \ chars[index] != chars[index + 2] {\n                           ^~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppwgsz3zc.swift:25:48:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if chars[index] != chars[index + 1] ||\
    \ chars[index] != chars[index + 2] {\n                                       \
    \        ^~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmppwgsz3zc.swift:25:64: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ chars[index] != chars[index + 1] || chars[index] != chars[index + 2] {\n   \
    \                                                            ^~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count == 3 && s.split(into: s.characters.prefix(3))\n\
    \            .contains(Set(s.characters.dropFirst(3))) == nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplo4k6buz.swift:19:66: error: extra argument 'into' in call\n  \
    \  return s.characters.count == 3 && s.split(into: s.characters.prefix(3))\n \
    \                                            ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n\
    /tmp/tmplo4k6buz.swift:19:47: error: missing argument for parameter 'separator'\
    \ in call\n    return s.characters.count == 3 && s.split(into: s.characters.prefix(3))\n\
    \                                              ^\n                           \
    \                   separator: <#String.Element#>, \nSwift.Collection:2:40: note:\
    \ 'split(separator:maxSplits:omittingEmptySubsequences:)' declared here\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n/tmp/tmplo4k6buz.swift:20:27: error: missing argument\
    \ label 'arrayLiteral:' in call\n            .contains(Set(s.characters.dropFirst(3)))\
    \ == nil\n                          ^\n                          arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 &&\n        s.characters.split(separator: \"\").reduce(true)\
    \ { accumulator, currentCharacter in\n            accumulator &&\n           \
    \ !accumulator &&\n            currentCharacter != currentCharacter\n        }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbumq2nrd.swift:20:11: error: 'characters' is unavailable: Please\
    \ use String directly\n        s.characters.split(separator: \"\").reduce(true)\
    \ { accumulator, currentCharacter in\n          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  return s.count > 3\n    && s.chars.dropFirst(3).reduce(true) { (prev, curr)\
    \ in\n      return !prev || !curr\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8oi5nata.swift:20:10: error: value of type 'String' has no member\
    \ 'chars'\n    && s.chars.dropFirst(3).reduce(true) { (prev, curr) in\n      \
    \ ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    for k in stride(from: 1, to: s.count\
    \ - 3, by: 3) {\n        guard !s.isEqualToString(String(s.prefix(from: k), count:3))\
    \ else { return false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpki56wn7q.swift:21:34: error: no exact matches in call to initializer\
    \ \n        guard !s.isEqualToString(String(s.prefix(from: k), count:3)) else\
    \ { return false }\n                                 ^\n/tmp/tmpki56wn7q.swift:21:34:\
    \ note: found candidate with type '(String, Int) -> String'\n        guard !s.isEqualToString(String(s.prefix(from:\
    \ k), count:3)) else { return false }\n                                 ^\n/tmp/tmpki56wn7q.swift:21:34:\
    \ note: found candidate with type '(Character, Int) -> String'\n        guard\
    \ !s.isEqualToString(String(s.prefix(from: k), count:3)) else { return false }\n\
    \                                 ^\n/tmp/tmpki56wn7q.swift:21:18: error: value\
    \ of type 'String' has no member 'isEqualToString'\n        guard !s.isEqualToString(String(s.prefix(from:\
    \ k), count:3)) else { return false }\n               ~ ^~~~~~~~~~~~~~~\n/tmp/tmpki56wn7q.swift:21:49:\
    \ error: extraneous argument label 'from:' in call\n        guard !s.isEqualToString(String(s.prefix(from:\
    \ k), count:3)) else { return false }\n                                      \
    \          ^~~~~~~\n                                                 \n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return true\n    }\n\n\
    \    let mut letters = HashSet<Char>()\n    for i in 0..<len {\n        let ch\
    \ = s[i]\n        letters.insert(ch)\n    }\n\n    return len == 3 && letters.isSuperset(letters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7cojgoqf.swift:24:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut letters\
    \ = HashSet<Char>()\n            ^\n/tmp/tmp7cojgoqf.swift:24:13: note: join the\
    \ identifiers together\n    let mut letters = HashSet<Char>()\n        ~~~~^~~~~~~\n\
    \        mutletters\n/tmp/tmp7cojgoqf.swift:24:13: note: join the identifiers\
    \ together with camel-case\n    let mut letters = HashSet<Char>()\n        ~~~~^~~~~~~\n\
    \        mutLetters\n/tmp/tmp7cojgoqf.swift:19:17: error: value of type 'String'\
    \ has no member 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmp7cojgoqf.swift:24:23:\
    \ error: cannot find 'HashSet' in scope\n    let mut letters = HashSet<Char>()\n\
    \                      ^~~~~~~\n/tmp/tmp7cojgoqf.swift:30:24: error: cannot find\
    \ 'letters' in scope\n    return len == 3 && letters.isSuperset(letters)\n   \
    \                    ^~~~~~~\n/tmp/tmp7cojgoqf.swift:30:43: error: cannot find\
    \ 'letters' in scope\n    return len == 3 && letters.isSuperset(letters)\n   \
    \                                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    // Your code here\n    return s.count > 3 && allPass(s.enumerated().map\
    \ { (i, _) in i % 3 != 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjwj6tuj4.swift:20:27: error: cannot find 'allPass' in scope\n \
    \   return s.count > 3 && allPass(s.enumerated().map { (i, _) in i % 3 != 0 })\n\
    \                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let str = s.characters.reduce(\"\") { (prev, current) in\n        return\
    \ prev + String(current)\n    }\n    return (str.characters.count >= 3) && (str\
    \ == str.characters.prefix(3))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm20mqp39.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let str = s.characters.reduce(\"\") { (prev, current)\
    \ in\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpm20mqp39.swift:22:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    return (str.characters.count >= 3) && (str == str.characters.prefix(3))\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpm20mqp39.swift:22:55: error: 'characters' is unavailable: Please\
    \ use String directly\n    return (str.characters.count >= 3) && (str == str.characters.prefix(3))\n\
    \                                                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return is_happy_impl(s, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpokfbjol9.swift:19:12: error: cannot find 'is_happy_impl' in scope\n\
    \    return is_happy_impl(s, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var isHappy = true // assume all strings are happy\n    for c in s {\n\
    \        if !isHappy {\n            break\n        }\n        if c != s[s.index(c)+1...s.index(c+2)]\
    \ {\n            isHappy = false\n            break\n        }\n    }\n    return\
    \ isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbhz6h2jh.swift:24:36: error: no exact matches in call to instance\
    \ method 'index'\n        if c != s[s.index(c)+1...s.index(c+2)] {\n         \
    \                          ^\n/tmp/tmpbhz6h2jh.swift:24:36: note: candidate expects\
    \ value of type 'String.Index' for parameter #1 (got 'Character')\n        if\
    \ c != s[s.index(c)+1...s.index(c+2)] {\n                                   ^\n\
    /tmp/tmpbhz6h2jh.swift:24:36: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n        if c != s[s.index(c)+1...s.index(c+2)]\
    \ {\n                                   ^\n/tmp/tmpbhz6h2jh.swift:24:36: note:\
    \ candidate expects value of type '(String.Element) throws -> Bool' (aka '(Character)\
    \ throws -> Bool') for parameter #1 (got 'Character')\n        if c != s[s.index(c)+1...s.index(c+2)]\
    \ {\n                                   ^\n/tmp/tmpbhz6h2jh.swift:24:36: note:\
    \ candidate expects value of type 'String.Element' (aka 'Character') for parameter\
    \ #1 (got 'Character')\n        if c != s[s.index(c)+1...s.index(c+2)] {\n   \
    \                                ^\n/tmp/tmpbhz6h2jh.swift:24:31: error: cannot\
    \ convert value of type 'ClosedRange<String.Index>' to expected argument type\
    \ 'String.Index'\n        if c != s[s.index(c)+1...s.index(c+2)] {\n         \
    \                     ^\n/tmp/tmpbhz6h2jh.swift:24:27: error: missing argument\
    \ label 'of:' in call\n        if c != s[s.index(c)+1...s.index(c+2)] {\n    \
    \                      ^\n                          of: \n/tmp/tmpbhz6h2jh.swift:24:29:\
    \ error: binary operator '+' cannot be applied to operands of type 'String.Index?'\
    \ and 'Int'\n        if c != s[s.index(c)+1...s.index(c+2)] {\n              \
    \    ~~~~~~~~~~^~\n/tmp/tmpbhz6h2jh.swift:24:29: note: overloads for '+' exist\
    \ with these partially matching parameter lists: (Int, Int)\n        if c != s[s.index(c)+1...s.index(c+2)]\
    \ {\n                            ^\n/tmp/tmpbhz6h2jh.swift:24:42: error: cannot\
    \ convert value of type 'Character' to expected argument type 'Int'\n        if\
    \ c != s[s.index(c)+1...s.index(c+2)] {\n                            "
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && allDistinct(s.prefix(3))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplg3j4bti.swift:19:28: error: cannot find 'allDistinct' in scope\n\
    \    return s.count >= 3 && allDistinct(s.prefix(3))\n                       \
    \    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   if let firstIndex = s.index(s.startIndex, offsetBy: 3) {\n        if firstIndex\
    \ > 0 && !s[firstIndex].isLetter {\n            return false\n        }\n    }\n\
    \    var firstIndex = 0\n    for index in stride(from: 0, to: len - 3, by: 3)\
    \ {\n        if index != firstIndex {\n            if s[index] != s[index + 1]\
    \ {\n                return false\n            }\n        }\n        if index\
    \ == firstIndex + 2 {\n            if s[index] != s[index + 3] {\n           \
    \     return false\n            }\n        }\n        firstIndex = index\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2fpnqi8s.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmp2fpnqi8s.swift:24:23:\
    \ error: referencing operator function '>' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n        if firstIndex > 0 && !s[firstIndex].isLetter\
    \ {\n                      ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\n\
    extension BinaryInteger {\n          ^\n/tmp/tmp2fpnqi8s.swift:23:8: error: initializer\
    \ for conditional binding must have Optional type, not 'String.Index'\n    if\
    \ let firstIndex = s.index(s.startIndex, offsetBy: 3) {\n       ^            \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var checking = \"abcdefghijklmnopqrstuvwxyz\".characters.map({Character($0)})\n\
    \    var checking2 = \"abcdefghijklmnopqrstuvwxyz\".characters.map({Character($0)})\n\
    \    var checking3 = \"abcdefghijklmnopqrstuvwxyz\".characters.map({Character($0)})\n\
    \    let charToFind = checking\n    if s.characters.count < 3 {\n        return\
    \ false\n    }\n    if checking.isEmpty {\n        return true\n    }\n    for\
    \ i in 0..<s.characters.count {\n        for j in 1..<3 {\n            if charToFind.contains(checking[i])\
    \ == false && checking2[i].contains(checking2[j+1])==false && checking3[j].contains(checking[j])\
    \ == false {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx8jt1m3i.swift:19:75: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n    var checking = \"abcdefghijklmnopqrstuvwxyz\".characters.map({Character($0)})\n\
    \                                                                          ^\n\
    \                                                                          extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpx8jt1m3i.swift:20:76: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n    var checking2 = \"abcdefghijklmnopqrstuvwxyz\".characters.map({Character($0)})\n\
    \                                                                           ^\n\
    \                                                                           extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpx8jt1m3i.swift:21:76: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n    var checking3 = \"abcdefghijklmnopqrstuvwxyz\".characters.map({Character($0)})\n\
    \                                                                           ^\n\
    \                                                                           extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpx8jt1m3i.swift:23:10: error: 'characters' is unavailable: Please use\
    \ String directly\n    if s.characters.count < 3 {\n         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpx8jt1m3i.swift:29:20: error: 'characters'\
    \ is unavailable: Please use String directly\n    for i in 0..<s.characters.count\
    \ {\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return is_happy_helper(s.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrlqso_p.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s.utf8)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var hapswift = false\n\
    \    for i in 0..<s.count {\n        let first = s[i]\n        let second = s[i+1]\n\
    \        let third = s[i+2]\n        if first != second && second != third {\n\
    \            hapswift = true\n            break\n        }\n    }\n    return\
    \ hapswift\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyaerc9s1.swift:24:21: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let first\
    \ = s[i]\n                    ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpyaerc9s1.swift:25:22: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let second = s[i+1]\n                     ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyaerc9s1.swift:26:21:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let third = s[i+2]\n                  \
    \  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    return len >= 3 && s.split(separator: \"-\").count\
    \ == len && \n        Array(s.split(separator: \"-\")).flatMap({ $0 }).forEach\
    \ { (c) in\n            let arr = [c]\n            return arr.contains(where:\
    \ { !arr.contains($0) })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxmvqsv9t.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpxmvqsv9t.swift:21:56:\
    \ error: cannot convert value of type '()' to expected argument type 'Bool'\n\
    \        Array(s.split(separator: \"-\")).flatMap({ $0 }).forEach { (c) in\n \
    \                                                      ^\n/tmp/tmpxmvqsv9t.swift:23:24:\
    \ error: unexpected non-void return value in void function\n            return\
    \ arr.contains(where: { !arr.contains($0) })\n                   ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  guard s.count >= 3 else {\n    return true\n  }\n  var count = 0\n  for\
    \ c in s.chars() {\n    if c != s[count] {\n      return false\n    }\n    count\
    \ += 1\n  }\n  return count == s.count && count == s.count * 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxq1d0npt.swift:23:14: error: value of type 'String' has no member\
    \ 'chars'\n  for c in s.chars() {\n           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count >= 3 &&\n        (Array(s.characters[0..<3])\
    \ == Array(s.characters[1..<3]) &&\n         Array(s.characters[2..<3]) == Array(s.characters[3..<3])\
    \ &&\n         Array(s.characters[0..<3]) == Array(s.characters[2..<3])) &&\n\
    \        (Array(s.characters[0..<3]) == Array(s.characters[3..<3])) &&\n     \
    \   (Array(s.characters[0..<3]) == Array(s.characters[1..<3])) &&\n        (Array(s.characters[0..<3])\
    \ == Array(s.characters[2..<3]))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwfu579zy.swift:19:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.count >= 3 &&\n             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwfu579zy.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n        (Array(s.characters[0..<3])\
    \ == Array(s.characters[1..<3]) &&\n               ^~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmpwfu579zy.swift:20:18: error: 'characters' is\
    \ unavailable: Please use String directly\n        (Array(s.characters[0..<3])\
    \ == Array(s.characters[1..<3]) &&\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpwfu579zy.swift:20:46: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n        (Array(s.characters[0..<3]) == Array(s.characters[1..<3])\
    \ &&\n                                             ^~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmpwfu579zy.swift:20:48: error: 'characters' is\
    \ unavailable: Please use String directly\n        (Array(s.characters[0..<3])\
    \ == Array(s.characters[1..<3]) &&\n                                         \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwfu579zy.swift:21:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n         Array(s.characte"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpla3rciqv.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = true\n    for i in 0 ..< s.count {\n        var isDistinct\
    \ = true\n        for j in 0 ..< 3 {\n            if let v = s[i] + s[i + 1] +\
    \ s[j] + s[j + 1] + s[j + 2] + s[j + 3] {\n                if v == \"x\" || v\
    \ == \"y\" {\n                    isDistinct = false\n                }\n    \
    \        }\n        }\n        if isDistinct {\n            result = false\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkqzn7pup.swift:23:24: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            if let v = s[i] + s[i + 1] + s[j] + s[j + 1] +\
    \ s[j + 2] + s[j + 3] {\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014406
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    if s.count < 3 { return false }\n    \n    let alphabet = Array(s.characters)\n\
    \    \n    let hasDuplicates = Array()\n    \n    for i in 0..<alphabet.count\
    \ {\n        if i == 0 {\n            if alphabet[0] != alphabet[i] {\n      \
    \          hasDuplicates.append(alphabet[0])\n            }\n        } else {\n\
    \            if alphabet[i-1] != alphabet[i] {\n                hasDuplicates.append(alphabet[i-1])\n\
    \            }\n        }\n    }\n    \n    let distinctCount = hasDuplicates.count\n\
    \    \n    return distinctCount >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfg1gxrd9.swift:22:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let alphabet = Array(s.characters)\n              \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfg1gxrd9.swift:24:25: error: generic parameter 'Element' could not\
    \ be inferred\n    let hasDuplicates = Array()\n                        ^\n/tmp/tmpfg1gxrd9.swift:24:25:\
    \ note: explicitly specify the generic arguments to fix this issue\n    let hasDuplicates\
    \ = Array()\n                        ^\n                             <Any>\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.length < 3 {\n        return false\n    }\n\n    var seenSet: Set<String>\
    \ = []\n    var last: Character?\n\n    for c in s {\n        last = c\n\n   \
    \     if seenSet.contains(last) {\n            return false\n        } else {\n\
    \            seenSet.append(last!)\n        }\n    }\n\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyn8gtp61.swift:19:10: error: value of type 'String' has no member\
    \ 'length'\n    if s.length < 3 {\n       ~ ^~~~~~\n/tmp/tmpyn8gtp61.swift:29:29:\
    \ error: cannot convert value of type 'Character?' to expected argument type 'String'\n\
    \        if seenSet.contains(last) {\n                            ^\n/tmp/tmpyn8gtp61.swift:32:21:\
    \ error: value of type 'Set<String>' has no member 'append'\n            seenSet.append(last!)\n\
    \            ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    return s.prefix(3).count\
    \ { $0.1 == $0.2 } == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcwrmekwj.swift:22:24: error: value of type 'PrefixSequence<String>'\
    \ has no member 'count'\n    return s.prefix(3).count { $0.1 == $0.2 } == 0\n\
    \           ~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return len(s) >= 3 &&\n        !s.isEmpty &&\n        allSatisfy(s.index(after:\
    \ s.startIndex, offsetBy: 3, limitedBy: s.endIndex) ==\n            s.index(after:\
    \ s.endIndex, offsetBy: -3, limitedBy: s.startIndex))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptszbj19q.swift:19:12: error: cannot find 'len' in scope\n    return\
    \ len(s) >= 3 &&\n           ^~~\n/tmp/tmptszbj19q.swift:21:9: error: cannot find\
    \ 'allSatisfy' in scope\n        allSatisfy(s.index(after: s.startIndex, offsetBy:\
    \ 3, limitedBy: s.endIndex) ==\n        ^~~~~~~~~~\n/tmp/tmptszbj19q.swift:21:27:\
    \ error: extraneous argument label 'after:' in call\n        allSatisfy(s.index(after:\
    \ s.startIndex, offsetBy: 3, limitedBy: s.endIndex) ==\n                     \
    \     ^~~~~~~~\n                           \n/tmp/tmptszbj19q.swift:22:20: error:\
    \ extraneous argument label 'after:' in call\n            s.index(after: s.endIndex,\
    \ offsetBy: -3, limitedBy: s.startIndex))\n                   ^~~~~~~~\n     \
    \               \n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.count\n    if len < 3{\n        return false\n    }\n\n \
    \   let freq = s.reduce([Int:Int]()){\n        (a,b) in a.setValue(b+b.1,forKey:\
    \ $0)\n    }\n    let sorted = freq.keys.sorted()\n\n    for c in sorted{\n  \
    \      let freqC = freq[c]\n        if freqC == 0 {\n            return false\n\
    \        }\n        if freqC == 1 {\n            if freq[c-1] != freq[c] {\n \
    \               return false\n            }\n        }else if freqC > 1 {\n  \
    \          if freq[c-1] != freq[c-2] {\n                return false\n       \
    \     }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpjrgdehi8.swift:25:43: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'a'?\n  \
    \      (a,b) in a.setValue(b+b.1,forKey: $0)\n                               \
    \           ^~\n                                          a\n/tmp/tmpjrgdehi8.swift:24:24:\
    \ error: missing argument label 'into:' in call\n    let freq = s.reduce([Int:Int]()){\n\
    \                       ^\n                        into: \n/tmp/tmpjrgdehi8.swift:24:25:\
    \ error: cannot convert value of type '[Int : Int]' to expected argument type\
    \ '(inout @escaping (_, _) -> _, String.Element) throws -> ()' (aka '(inout @escaping\
    \ (_, _) -> _, Character) throws -> ()')\n    let freq = s.reduce([Int:Int]()){\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let sArray: [Character] = s.characters\n    guard sArray.count >= 3 else\
    \ {\n        return false\n    }\n    let lastChar = sArray[sArray.count - 1]\n\
    \    guard lastChar == lastChar, lastChar != lastChar, sArray.indices.contains(lastChar.unicodeScalars.endIndex)\
    \ else {\n        return false\n    }\n    var index = 0\n    var consecutiveLettersCount\
    \ = 0\n    let isHappy = sArray[..].isEmpty\n\n    while index < sArray.count\
    \ - 3 {\n        if sArray[index] == sArray[index + 1] == sArray[index + 2] ==\
    \ sArray[index + 3] {\n            consecutiveLettersCount += 1\n        } else\
    \ {\n            if consecutiveLettersCount > 3 {\n                return false\n\
    \            }\n            consecutiveLettersCount = 0\n        }\n        index\
    \ += 4\n    }\n\n    if consecutiveLettersCount != 3 {\n        return false\n\
    \    }\n\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu8q3j13h.swift:19:33: error: cannot convert value of type 'String'\
    \ to specified type '[Character]'\n    let sArray: [Character] = s.characters\n\
    \                              ~~^~~~~~~~~~\n/tmp/tmpu8q3j13h.swift:24:62: error:\
    \ instance method 'contains' requires that 'String.UnicodeScalarView.Index' (aka\
    \ 'String.Index') conform to 'Collection'\n    guard lastChar == lastChar, lastChar\
    \ != lastChar, sArray.indices.contains(lastChar.unicodeScalars.endIndex) else\
    \ {\n                                                             ^\n_StringProcessing.Collection:3:17:\
    \ note: where 'C' = 'String.UnicodeScalarView.Index' (aka 'String.Index')\n  \
    \  public func contains<C>(_ other: C) -> Bool where C : Collection, Self.Element\
    \ == C.Element\n                ^\n/tmp/tmpu8q3j13h.swift:29:26: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n    let isHappy = sArray[..].isEmpty\n\
    \                         ^~\n                         ...\n/tmp/tmpu8q3j13h.swift:32:26:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \        if sArray[index] == sArray[index + 1] == sArray[index + 2] == sArray[index\
    \ + 3] {\n                         ^                    ~~\n/tmp/tmpu8q3j13h.swift:32:47:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \        if sArray[index] == sArray[index + 1] == sArray[index + 2] == sArray[index\
    \ + 3] {\n                                              ^                    ~~\n\
    /tmp/tmpu8q3j13h.swift:32:68: error: binary operator '==' cannot be applied to\
    \ operands of type 'Bool' and 'Character'\n        if sArray[index] == sArray[index\
    \ + 1] == sArray[index + 2] == sArray[index + 3] {\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~\n/tmp/tmpu8q3j13h.swift:32:68: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Bool, Bool), (Character,\
    \ Character)\n        if sArray[index] == sArray[index + 1] == sArray[index +\
    \ 2] == sArray[index + 3] {\n                                        "
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 1\n    \n    for i in 0..<s.count {\n        if s.startIndex.advancedBy(i)\
    \ != s.endIndex.advancedBy(i) {\n            count += 1\n        }\n    }\n  \
    \  \n    return count >= 3 && s.isDistinct\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpaqbijyef.swift:22:25: error: value of type 'String.Index' has no\
    \ member 'advancedBy'\n        if s.startIndex.advancedBy(i) != s.endIndex.advancedBy(i)\
    \ {\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpaqbijyef.swift:22:53: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        if s.startIndex.advancedBy(i)\
    \ != s.endIndex.advancedBy(i) {\n                                         ~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpaqbijyef.swift:27:28: error: value of type 'String' has\
    \ no member 'isDistinct'\n    return count >= 3 && s.isDistinct\n            \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let str: String = s.lowercased()\n    guard str.characters.count >= 3\
    \ else { return false }\n    guard str.characters.count == 3 * str.count().lowercased().characters.count\
    \ else { return false }\n    return str.characters.enumerated().map({ $0.element.lowercased()\
    \ }).reduce(true, {\n        a, b in\n        !a && !b\n    }) \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl77yf35u.swift:20:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard str.characters.count >= 3 else { return false\
    \ }\n              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl77yf35u.swift:21:43: error: cannot call value of non-function type\
    \ 'Int'\n    guard str.characters.count == 3 * str.count().lowercased().characters.count\
    \ else { return false }\n                                          ^    ~~\n \
    \                                              \n/tmp/tmpl77yf35u.swift:24:16:\
    \ error: cannot convert value of type 'String' to expected argument type 'Bool'\n\
    \        !a && !b\n               ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.length >= 3 && is_happy_helper(s: s)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfway1hlg.swift:19:29: error: cannot find 'is_happy_helper' in scope\n\
    \    return s.length >= 3 && is_happy_helper(s: s)\n                         \
    \   ^~~~~~~~~~~~~~~\n/tmp/tmpfway1hlg.swift:19:14: error: value of type 'String'\
    \ has no member 'length'\n    return s.length >= 3 && is_happy_helper(s: s)\n\
    \           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let n = s.characters.count\n    var hash = [String]()\n    var flag =\
    \ 0\n    for i in 0..<n {\n        hash.append(s[i]+\"\")\n    }\n\n    for i\
    \ in 0..<n {\n        var found = 0\n        for j in 0..<n {\n            if\
    \ i != j && j == (i - 3) {\n                if hash[i].hashValue == hash[j].hashValue\
    \ && hash[i].hashValue != 0 {\n                    found = 1\n               \
    \     break\n                }\n            }\n        }\n        if found ==\
    \ 0 {\n            flag = 1\n            break\n        }\n    }\n    return flag\
    \ == 0 ? true : false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5vskp0u6.swift:19:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let n = s.characters.count\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5vskp0u6.swift:23:22:\
    \ error: no exact matches in call to subscript \n        hash.append(s[i]+\"\"\
    )\n                     ^\nSwift.String:3:12: note: candidate expects value of\
    \ type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count == 0 {\n        return true\n    }\n    \n    // check string\
    \ length greater than 3\n    if s.count < 3 {\n        return false\n    }\n \
    \   \n    // check all characters are unique\n    let set = Set(s)\n    return\
    \ !set.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp0zae5w0e/tmp0zae5w0e.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51915f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51912ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51912ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51912eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zae5w0e                        0x0000563e689cf641 <unavailable> + 5697

    5    libc.so.6                          0x00002b51917e1460 __libc_start_main +
    245

    6    tmp0zae5w0e                        0x0000563e689cf0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count > 3 && !s.isEmpty && !s.lowercaseString.isEmpty && s.lowercaseString.flatMap\
    \ { $0.characters.filter { !$0.isEmpty }.joined(separator: \"\") == s.lowercaseString.flatMap\
    \ { $0.characters.filter { !$0.isEmpty }.joined(separator: \"\") }.joined(separator:\
    \ \"\").characters.filter { !$0.isEmpty }.count == s.lowercaseString.flatMap {\
    \ $0.characters.filter { !$0.isEmpty }.joined(separator: \"\").characters.filter\
    \ { !$0.isEmpty }.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4c7ceedo.swift:42:41: error: expected '}' at end of brace statement\n\
    assert(is_happy(s: \"iopaxioi\") == false)\n                                 \
    \       ^\n/tmp/tmp4c7ceedo.swift:18:34: note: to match this opening '{'\nfunc\
    \ is_happy(s: String) -> Bool {\n                                 ^\n/tmp/tmp4c7ceedo.swift:19:158:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \    return s.count > 3 && !s.isEmpty && !s.lowercaseString.isEmpty && s.lowercaseString.flatMap\
    \ { $0.characters.filter { !$0.isEmpty }.joined(separator: \"\") == s.lowercaseString.flatMap\
    \ { $0.characters.filter { !$0.isEmpty }.joined(separator: \"\") }.joined(separator:\
    \ \"\").characters.filter { !$0.isEmpty }.count == s.lowercaseString.flatMap {\
    \ $0.characters.filter { !$0.isEmpty }.joined(separator: \"\").characters.filter\
    \ { !$0.isEmpty }.count }\n                                                  \
    \                                                                            \
    \                               ^                                            \
    \                                                                            \
    \                                 ~~\n/tmp/tmp4c7ceedo.swift:19:44: error: value\
    \ of type 'String' has no member 'lowercaseString'\n    return s.count > 3 &&\
    \ !s.isEmpty && !s.lowercaseString.isEmpty && s.lowercaseString.flatMap { $0.characters.filter\
    \ { !$0.isEmpty }.joined(separator: \"\") == s.lowercaseString.flatMap { $0.characters.filter\
    \ { !$0.isEmpty }.joined(separator: \"\") }.joined(separator: \"\").characters.filter\
    \ { !$0.isEmpty }.count == s.lowercaseString.flatMap { $0.characters.filter {\
    \ !$0.isEmpty }.joined(separator: \"\").characters.filter { !$0.isEmpty }.count\
    \ }\n                                         ~ ^~~~~~~~~~~~~~~\n/tmp/tmp4c7ceedo.swift:19:73:\
    \ error: value of type 'String' has no member 'lowercaseString'\n    return s.count\
    \ > 3 && !s.isEmpty && !s.lowercaseString.isEmpty && s.lowercaseString.flatMap\
    \ { $0.characters.filter { !$0.isEmpty }.joined(separator: \"\") == s.lowercaseString.flatMap\
    \ { $0.cha"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    let length = s.characters.count\n    \n    return length >= 3 &&\
    \ \n        s.characters.enumerated().map({ $0.element % 3 }).reduce(true) { $0\
    \ && $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphdz_2cdv.swift:20:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = s.characters.count\n                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmphdz_2cdv.swift:23:52:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \      s.characters.enumerated().map({ $0.element % 3 }).reduce(true) { $0 &&\
    \ $1 }\n                                        ~~~~~~~~~~~^~~\n/tmp/tmphdz_2cdv.swift:23:44:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n        s.characters.enumerated().map({ $0.element % 3\
    \ }).reduce(true) { $0 && $1 }\n                                           ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count >= 3 &&\n        allUnique(s.characters.stride(from:\
    \ s.startIndex, to: s.endIndex, by: 3))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjz71n1q4.swift:20:9: error: cannot find 'allUnique' in scope\n\
    \        allUnique(s.characters.stride(from: s.startIndex, to: s.endIndex, by:\
    \ 3))\n        ^~~~~~~~~\n/tmp/tmpjz71n1q4.swift:20:32: error: value of type 'String'\
    \ has no member 'stride'\n        allUnique(s.characters.stride(from: s.startIndex,\
    \ to: s.endIndex, by: 3))\n                  ~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var arr: [Int] = []\n    var count = 0\n    var last: Int = 0\n    for\
    \ (index, char) in s.enumerated() {\n        arr.append(char)\n        last =\
    \ char\n    }\n\n    if (arr.count == 3 && arr[0] == arr[1] && arr[1] == arr[2])\
    \ {\n        for (index, char) in s.enumerated() {\n            if (arr[index]\
    \ != last) count += 1\n        }\n        return count >= 3\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1i_raqh7.swift:29:37: error: expected '{' after 'if' condition\n\
    \            if (arr[index] != last) count += 1\n                            \
    \        ^\n/tmp/tmp1i_raqh7.swift:23:20: error: cannot convert value of type\
    \ 'String.Element' (aka 'Character') to expected argument type 'Int'\n       \
    \ arr.append(char)\n                   ^\n/tmp/tmp1i_raqh7.swift:24:16: error:\
    \ cannot assign value of type 'String.Element' (aka 'Character') to type 'Int'\n\
    \        last = char\n               ^~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var n = s.length\n    if n < 3 {\n        return false\n    }\n    var\
    \ count = 0\n    for _ in 0..<n {\n        if s.characters.contains(s.characters.last!)\
    \ {\n            count++\n        } else {\n            count = 0\n        }\n\
    \    }\n    return count >= 3 && !s.characters.contains(\"aaa\")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe100p2vt.swift:19:15: error: value of type 'String' has no member\
    \ 'length'\n    var n = s.length\n            ~ ^~~~~~\n/tmp/tmpe100p2vt.swift:31:29:\
    \ error: 'characters' is unavailable: Please use String directly\n    return count\
    \ >= 3 && !s.characters.contains(\"aaa\")\n                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    var counter\
    \ = 0\n    var last_char = \"\"\n    \n    for i in s.characters {\n        if\
    \ i != last_char {\n            counter += 1;\n            last_char = i;\n  \
    \      }\n        else {\n            counter += 1;\n        }\n    }\n    \n\
    \    return counter >= 3;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjyyu3r9y.swift:25:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjyyu3r9y.swift:26:17:\
    \ error: cannot convert value of type 'String' to expected argument type 'Character'\n\
    \        if i != last_char {\n                ^\n/tmp/tmpjyyu3r9y.swift:28:25:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  last_char = i;\n                        ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var freq = Dictionary<Character, Int>()\n    s.characters.forEach() {\n\
    \        freq[$0] += 1\n    }\n\n    let res = s.characters.count >= 3 && freq.count\
    \ == 3 && freq[s.characters[0]] == freq[s.characters[1]] && freq[s.characters[2]]\
    \ == freq[s.characters[3]]\n\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4gclnwhn.swift:21:13: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        freq[$0] += 1\n            ^\n\
    /tmp/tmp4gclnwhn.swift:21:13: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        freq[$0] += 1\n            ^\n\
    \                !\n/tmp/tmp4gclnwhn.swift:24:17: error: 'characters' is unavailable:\
    \ Please use String directly\n    let res = s.characters.count >= 3 && freq.count\
    \ == 3 && freq[s.characters[0]] == freq[s.characters[1]] && freq[s.characters[2]]\
    \ == freq[s.characters[3]]\n                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp4gclnwhn.swift:24:66: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    let res = s.characters.count >= 3 && freq.count == 3 && freq[s.characters[0]]\
    \ == freq[s.characters[1]] && freq[s.characters[2]] == freq[s.characters[3]]\n\
    \                                                                 ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4gclnwhn.swift:24:68:\
    \ error: 'characters' is unavailable: Please use String directly\n    let res\
    \ = s.characters.count >= 3 && freq.count == 3 && freq[s.characters[0]] == freq[s.characters[1]]\
    \ && freq[s.characters[2]] == freq[s.characters[3]]\n                        \
    \                                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp4gclnwhn.swift:24:91: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    let res = s.characters.count >= 3 && freq.count == 3 && freq[s.characters[0]]\
    \ == freq[s.characters[1]] && freq[s.characters[2]] == freq[s.characters[3]]\n\
    \                                                             "
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var prevChar = 0\n    var nextChar\
    \ = 0\n    var foundMatch = false\n    for ch in s.characters {\n        nextChar++\n\
    \        if nextChar == 3 {\n            foundMatch = foundMatch || ch == s[prevChar+prevChar+prevChar]\n\
    \            nextChar = 0\n        }\n        prevChar = ch\n    }\n    return\
    \ foundMatch\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6jjqwkbg.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    for ch in s.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6jjqwkbg.swift:24:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        nextChar++\n\
    \                ^~\n/tmp/tmp6jjqwkbg.swift:26:46: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   foundMatch = foundMatch || ch == s[prevChar+prevChar+prevChar]\n         \
    \                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6jjqwkbg.swift:29:20:\
    \ error: cannot assign value of type 'Character' to type 'Int'\n        prevChar\
    \ = ch\n                   ^~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let chars = s.characters\n\n    // Checking for length of string\n  \
    \  if chars.count == 0 {\n        return true\n    }\n\n    // Checking every\
    \ 3 consecutive letters\n    var i = 0\n    var j = 0\n    for _ in 0...chars.count\
    \ - 1 {\n        if i != chars.count - 1 && j != chars.count - 1 {\n         \
    \   if chars[i] == chars[j] {\n                i += 1\n                j += 1\n\
    \            }\n        } else {\n            if i == chars.count - 1 && j !=\
    \ chars.count - 1 {\n                return true\n            }\n            i\
    \ = 0\n            j += 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcwaqnzgc.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcwaqnzgc.swift:31:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if chars[i] == chars[j] {\n       \
    \        ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpcwaqnzgc.swift:31:28: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if chars[i] == chars[j] {\n                           ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 && s.count % 3 == 0 else {\n        return false\n\
    \    }\n    var hapswift = true\n    var count = 0\n    for ch in s {\n      \
    \  if let index = s.index(of: ch) {\n            count += 1\n            if index\
    \ > 0 {\n                if s[index - 1] == s[index] {\n                    count\
    \ -= 1\n                }\n            }\n            if count == 3 {\n      \
    \          hapswift = false\n                count = 0\n            }\n      \
    \  }\n    }\n    return hapswift\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaj9f1g41.swift:25:26: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = s.index(of: ch) {\n           \
    \              ^\n/tmp/tmpaj9f1g41.swift:25:26: note: use 'firstIndex(of:)' instead\n\
    \        if let index = s.index(of: ch) {\n                         ^~~~~\n  \
    \                       firstIndex\n/tmp/tmpaj9f1g41.swift:27:22: error: referencing\
    \ operator function '>' on 'BinaryInteger' requires that 'String.Index' conform\
    \ to 'BinaryInteger'\n            if index > 0 {\n                     ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n\
    /tmp/tmpaj9f1g41.swift:28:22: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                if s[index - 1] == s[index]\
    \ {\n                     ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   let lastChar = s[len-1]\n    var setOfChars = Set<Character>(repeating: lastChar,\
    \ count: len-2)\n    let chars = Array(s.dropLast())\n    for i in 0..<len-2 {\n\
    \        if setOfChars.contains(chars[i]) {\n            setOfChars.remove(chars[i])\n\
    \        } else {\n            return false\n        }\n    }\n    return !setOfChars.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnsps300c.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpnsps300c.swift:24:68:\
    \ error: extra argument 'count' in call\n    var setOfChars = Set<Character>(repeating:\
    \ lastChar, count: len-2)\n                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.characters.count >= 3 && is_happy_helper(s)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnpw0ouxx.swift:19:39: error: cannot find 'is_happy_helper' in scope\n\
    \    return s.characters.count >= 3 && is_happy_helper(s)\n                  \
    \                    ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let set: Set<String> =\
    \ s.flatMap { String($0) }.toSet()\n    return set.count == (s.count / 3) && set.countUnique()\
    \ == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzho8s_v3.swift:20:53: error: value of type '[String.Element]' (aka\
    \ 'Array<Character>') has no member 'toSet'\n    let set: Set<String> = s.flatMap\
    \ { String($0) }.toSet()\n                           ~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~\n/tmp/tmpzho8s_v3.swift:21:46: error: value of type 'Set<String>' has\
    \ no member 'countUnique'\n    return set.count == (s.count / 3) && set.countUnique()\
    \ == s.count\n                                         ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    return s.prefix(3).map({\
    \ $0 in HashSet($0) }).forall({ $0 == .distinct })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplp0nybif.swift:22:32: error: consecutive statements on a line must\
    \ be separated by ';'\n    return s.prefix(3).map({ $0 in HashSet($0) }).forall({\
    \ $0 == .distinct })\n                               ^\n                     \
    \          ;\n/tmp/tmplp0nybif.swift:22:33: error: expected expression\n    return\
    \ s.prefix(3).map({ $0 in HashSet($0) }).forall({ $0 == .distinct })\n       \
    \                         ^\n/tmp/tmplp0nybif.swift:22:51: error: value of type\
    \ '[PrefixSequence<String>.Iterator.Element]' (aka 'Array<Character>') has no\
    \ member 'forall'\n    return s.prefix(3).map({ $0 in HashSet($0) }).forall({\
    \ $0 == .distinct })\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var letters = \"\"\n    for index1 in range(len) {\n        letters = letters\
    \ + String(s[index1]) + String(s[index1 + 1])\n    }\n    return String(letters)\
    \ == \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2x5uwplf.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    var len = s.length\n              ~ ^~~~~~\n/tmp/tmp2x5uwplf.swift:24:19:\
    \ error: cannot find 'range' in scope\n    for index1 in range(len) {\n      \
    \            ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
