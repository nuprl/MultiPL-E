language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n\t\n\tlet highest_gpa = grades.max()\n\tvar letters\
    \ : [String] = []\n\tfor i in grades {\n\t\tlet temp : Double = i\n\t\tif temp\
    \ == highest_gpa {\n\t\t\tletters.append(\"E\")\n\t\t} else {\n\t\t\tvar letter\
    \ : String = \"\"\n\t\t\tif temp > highest_gpa { letter = \"A+\" } else if temp\
    \ > highest_gpa * 0.7 { letter = \"A\" } else if temp > highest_gpa * 0.3 { letter\
    \ = \"A-\" } else if temp > highest_gpa * 0.1 { letter = \"B+\" } else if temp\
    \ > highest_gpa * 0.07 { letter = \"B\" } else if temp > highest_gpa * 0.03 {\
    \ letter = \"B-\" } else if temp > highest_gpa * 0.01 { letter = \"C+\" } else\
    \ if temp > highest_gpa * 0.007 { letter = \"C\" } else if temp > highest_gpa\
    \ * 0.003 { letter = \"C-\" } else if temp > highest_gpa * 0.001 { letter = \"\
    D+\" } else { letter = \"D\" }\n\t\t\tletters.append(letter)\n\t\t}\n\t}\n\treturn\
    \ letters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9qy99qn7.swift:34:14: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n                        if temp >\
    \ highest_gpa { letter = \"A+\" } else if temp > highest_gpa * 0.7 { letter =\
    \ \"A\" } else if temp > highest_gpa * 0.3 { letter = \"A-\" } else if temp >\
    \ highest_gpa * 0.1 { letter = \"B+\" } else if temp > highest_gpa * 0.07 { letter\
    \ = \"B\" } else if temp > highest_gpa * 0.03 { letter = \"B-\" } else if temp\
    \ > highest_gpa * 0.01 { letter = \"C+\" } else if temp > highest_gpa * 0.007\
    \ { letter = \"C\" } else if temp > highest_gpa * 0.003 { letter = \"C-\" } else\
    \ if temp > highest_gpa * 0.001 { letter = \"D+\" } else { letter = \"D\" }\n\
    \                                  ^\n/tmp/tmp9qy99qn7.swift:34:14: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \                     if temp > highest_gpa { letter = \"A+\" } else if temp >\
    \ highest_gpa * 0.7 { letter = \"A\" } else if temp > highest_gpa * 0.3 { letter\
    \ = \"A-\" } else if temp > highest_gpa * 0.1 { letter = \"B+\" } else if temp\
    \ > highest_gpa * 0.07 { letter = \"B\" } else if temp > highest_gpa * 0.03 {\
    \ letter = \"B-\" } else if temp > highest_gpa * 0.01 { letter = \"C+\" } else\
    \ if temp > highest_gpa * 0.007 { letter = \"C\" } else if temp > highest_gpa\
    \ * 0.003 { letter = \"C-\" } else if temp > highest_gpa * 0.001 { letter = \"\
    D+\" } else { letter = \"D\" }\n                                  ^\n        \
    \                                      ?? <#default value#>\n/tmp/tmp9qy99qn7.swift:34:14:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                        if temp > highest_gpa { letter = \"A+\" } else\
    \ if temp > highest_gpa * 0.7 { letter = \"A\" } else if temp > highest_gpa *\
    \ 0.3 { letter = \"A-\" } else if temp > highest_gpa * 0.1 { letter = \"B+\" }\
    \ else if temp > highest_gpa * 0.07 { letter = \"B\" } else if temp > highest_gpa\
    \ * 0.03 { letter = \"B-\" } else if temp > highest_gpa * 0.01 { letter = \"C+\"\
    \ } else if temp > highest_gpa * 0.007 { letter = \"C\" } else if temp > highest_gpa\
    \ * 0.003 { "
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpaSum =\
    \ 0.0\n    for gp in grades {\n        if gp > 3.0 {\n            gpaSum += gp\n\
    \            if gpaSum > 3.0 {\n                gpaSum -= 3.0\n              \
    \  letterGrades.append(\"C+\")\n            } else if gpaSum > 2.0 {\n       \
    \         gpaSum -= 2.0\n                letterGrades.append(\"C\")\n        \
    \    } else if gpaSum > 1.0 {\n                gpaSum -= 1.0\n               \
    \ letterGrades.append(\"B\")\n            } else if gpaSum > 0.7 {\n         \
    \       gpaSum -= 0.7\n                letterGrades.append(\"B+\")\n         \
    \   } else if gpaSum > 0.3 {\n                gpaSum -= 0.3\n                letterGrades.append(\"\
    B-\")\n            } else if gpaSum > 0.1 {\n                gpaSum -= 0.1\n \
    \               letterGrades.append(\"B-\")\n            } else if gpaSum < -0.7\
    \ {\n                gpaSum += 0.7\n                letterGrades.append(\"B+\"\
    ) \n            } else if gpaSum < -0.3 {\n                gpaSum += 0.3\n   \
    \             letterGrades.append(\"B\")\n            } else if gpaSum < -0.1\
    \ {\n                gpaSum += 0.1\n                letterGrades.append(\"B\"\
    )\n            } else {\n                letterGrades.append(\"D\")\n        \
    \    }\n        } else if gp > 2.0 {\n            gpaSum += gp\n            if\
    \ gpaSum > 2.0 {\n                gpaSum -= 2.0\n                letterGrades.append(\"\
    B+\")\n            } else if gpaSum > 1.0 {\n                gpaSum -= 1.0\n \
    \               letterGrades.append(\"B\")\n            } else if gpaSum > 0.7\
    \ {\n                gpaSum -= 0.7\n                letterGrades.append(\"B\"\
    )\n            } else if gpaSum > 0.3 {\n                gpaSum -= 0.3\n     \
    \           letterGrades.append(\"B-\")\n            } else if gpaSum > 0.1 {\n\
    \                gpaSum -= 0.1\n                letterGrades.append(\"B-\")\n\
    \            } else if gpaSum < -0.7 {\n                gpaSum += 0.7\n      \
    \          letterGrades.append(\"B\")\n            } else if gpaSum < -0.3 {\n\
    \                gpaSum += 0.3\n                letterGrades.append(\"B\")\n \
    \           } else if gpaSum < -0.1 {\n                gpaSum += 0.1\n       \
    \         letterGrades.append(\"B\")\n            } else {\n                letterGrades.append(\"\
    C\")\n            }\n        } else if gp > 1.0 {\n            gpaSum \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeuo7nv2_.swift:111:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpeuo7nv2_.swift:27:22:\
    \ note: to match this opening '{'\n    for gp in grades {\n                  \
    \   ^\n/tmp/tmpeuo7nv2_.swift:111:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpeuo7nv2_.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpeuo7nv2_.swift:90:13: warning: variable is unused\n            gpaSum\
    \ \n            ^~~~~~\n/tmp/tmpeuo7nv2_.swift:94:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    \n    \n    var letterGrades: [String] =\
    \ []\n    \n    if grades.count < 1 {\n        print(\"grades array is empty.\"\
    )\n        return letterGrades\n    }\n    \n    if grades.count == 1 {\n    \
    \    letterGrades.append(\"0\")\n        return letterGrades\n    }\n    \n  \
    \  let gpa: Double = grades.reduce(0, combine: {$0 + $1})\n    let gpaSum: Double\
    \ = grades.reduce(0, combine: {$0 + $1})\n    let totalGrades = gpaSum / Double(grades.count)\n\
    \    \n    let points: Double = totalGrades * (4.0 / 100) - gpa\n    \n    if\
    \ points > 0 {\n        letterGrades.append(String(format: \"%.2f\", points))\n\
    \    }\n    \n    let gpaDiff = points * -1\n    if gpaDiff > 0 {\n        letterGrades.append(String(format:\
    \ \"%.2f\", gpaDiff))\n    }\n    \n    if gpaDiff < 0 {\n        letterGrades.append(String(format:\
    \ \"%.2f\", -gpaDiff))\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxvlb_9fo.swift:40:36: error: extraneous argument label 'combine:'\
    \ in call\n    let gpa: Double = grades.reduce(0, combine: {$0 + $1})\n      \
    \                             ^   ~~~~~~~~~\n                                \
    \       \n/tmp/tmpxvlb_9fo.swift:41:39: error: extraneous argument label 'combine:'\
    \ in call\n    let gpaSum: Double = grades.reduce(0, combine: {$0 + $1})\n   \
    \                                   ^   ~~~~~~~~~\n                          \
    \                \n/tmp/tmpxvlb_9fo.swift:47:29: error: no exact matches in call\
    \ to initializer \n        letterGrades.append(String(format: \"%.2f\", points))\n\
    \                            ^\nSwift.String:4:23: note: candidate '(String) ->\
    \ String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpxvlb_9fo.swift:47:29:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        letterGrades.append(String(format: \"%.2f\", points))\n      \
    \                      ^\nSwift.String:3:12: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: candidate '(String) -> String' requires 1 argument,\
    \ but 2 were provided\n    public init<S>(_ characters: S) where S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmpxvlb_9fo.swift:52:29: error:\
    \ no exact matches in call to initializer \n        letterGrades.append(String(format:\
    \ \"%.2f\", gpaDiff))\n                            ^\nSwift.String:4:23: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/t"
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"\
    B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptzpzb3rg/tmptzpzb3rg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c44bf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c448edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c448ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c448ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzpzb3rg                        0x0000558c9b6925e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1c44de2460 __libc_start_main +
    245

    6    tmptzpzb3rg                        0x0000558c9b692109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n\t\n\t// 1. Write the function below\n\t\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmphv4wrlqy.swift:28:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    \n    if grades.count\
    \ < 7 { \n        return result\n    }\n    \n    let highest_number = grades.reduce(0)\
    \ { $0 > $1 ? $0 : $1 }\n    \n    for value in grades {\n        let gpa = abs(value)\
    \ / highest_number\n        let grade_letter = gpa < 0.7 ? \"D\" : gpa < 0.3 ?\
    \ \"C\" : gpa < 0.1 ? \"B\" : gpa < 0.0 ? \"F\" : \"E\"\n        result.append(grade_letter)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpq7v1107z/tmpq7v1107z.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db16bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db13b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db13b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db13b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7v1107z                        0x000056056c06d966 <unavailable> + 6502

    5    libc.so.6                          0x00002b3db18a7460 __libc_start_main +
    245

    6    tmpq7v1107z                        0x000056056c06d489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var tempGPA\
    \ = grades.last ?? 0\n    for gpas in grades.enumerated(){\n        if gpas >\
    \ tempGPA {\n            letterGrades.append(String(\"\\(gpas.element)\"+\">\\\
    (gpas.offset)\")\n        } else {\n            letterGrades.append(String(\"\\\
    (gpas.element)\"+\">\\(gpas.offset-0.5)\"+\n                \"A\")\n        }\n\
    \    }\n    if tempGPA == grades.last {\n        letterGrades.append(String(\"\
    \\(gpas.element)\"+\">\\(gpas.offset)\"+\"E\"))\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6pj21vvf.swift:30:9: error: expected ')' in expression list\n \
    \       } else {\n        ^\n/tmp/tmp6pj21vvf.swift:29:32: note: to match this\
    \ opening '('\n            letterGrades.append(String(\"\\(gpas.element)\"+\"\
    >\\(gpas.offset)\")\n                               ^\n/tmp/tmp6pj21vvf.swift:31:80:\
    \ error: expected ',' separator\n            letterGrades.append(String(\"\\(gpas.element)\"\
    +\">\\(gpas.offset-0.5)\"+\n                                                 \
    \                              ^\n                                           \
    \                                    ,\n/tmp/tmp6pj21vvf.swift:33:9: error: expected\
    \ ')' in expression list\n        }\n        ^\n/tmp/tmp6pj21vvf.swift:31:32:\
    \ note: to match this opening '('\n            letterGrades.append(String(\"\\\
    (gpas.element)\"+\">\\(gpas.offset-0.5)\"+\n                               ^\n\
    /tmp/tmp6pj21vvf.swift:28:17: error: binary operator '>' cannot be applied to\
    \ operands of type '(offset: Int, element: Double)' and 'Double'\n        if gpas\
    \ > tempGPA {\n           ~~~~ ^ ~~~~~~~\n/tmp/tmp6pj21vvf.swift:31:79: error:\
    \ '+' is not a postfix unary operator\n            letterGrades.append(String(\"\
    \\(gpas.element)\"+\">\\(gpas.offset-0.5)\"+\n                               \
    \                                               ^\n/tmp/tmp6pj21vvf.swift:31:39:\
    \ error: missing argument labels 'repeating:count:' in call\n            letterGrades.append(String(\"\
    \\(gpas.element)\"+\">\\(gpas.offset-0.5)\"+\n                               \
    \       ^\n                                       repeating: \n/tmp/tmp6pj21vvf.swift:32:17:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \                \"A\")\n                ^\n/tmp/tmp6pj21vvf.swift:36:39: error:\
    \ cannot find 'gpas' in scope\n        letterGrades.append(String(\"\\(gpas.element)\"\
    +\">\\(gpas.offset)\"+\"E\"))\n                                      ^~~~\n/tmp/tmp6pj21vvf.swift:36:58:\
    \ error: cannot find 'gpas' in scope\n        letterGrades.append(String(\"\\\
    (gpas.element)\"+\">\\(gpas.offset)\"+\"E\"))\n                              \
    \                           "
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnuw1umli/tmpnuw1umli.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f6741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f6438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f6438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f64377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnuw1umli                        0x0000558a9ec66721 <unavailable> + 5921

    5    libc.so.6                          0x00002b00f692d460 __libc_start_main +
    245

    6    tmpnuw1umli                        0x0000558a9ec66109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let sorted_grades = grades.sorted()\n    var letterGrades:\
    \ [String] = []\n    \n    for i in 0...(grades.count - 1) {\n        let grade\
    \ = sorted_grades[i]\n        let letter_grade = grade < 1.0 ? \"D-\" : grade\
    \ < 1.2 ? \"C-\" : grade < 1.7 ? \"C-\" : grade < 2.3 ? \"B-\" : grade < 2.7 ?\
    \ \"B-\" : grade < 3.3 ? \"A-\" : grade < 3.7 ? \"A-\" : grade < 4.0 ? \"A+\"\
    \ : grade < 4.7 ? \"A+\" : grade < 5.3 ? \"A-\" : grade < 5.7 ? \"A-\" : grade\
    \ < 6.2 ? \"A\" : grade < 6.7 ? \"A\" : grade < 7.2 ? \"A-\" : grade < 7.7 ? \"\
    A-\" : grade < 8.2 ? \"B+\" : grade < 8.7 ? \"B+\" : grade < 9.2 ? \"B\" : grade\
    \ < 9.7 ? \"B\" : grade < 10.2 ? \"B-\" : grade < 10.7 ? \"B-\" : grade < 11.2\
    \ ? \"B\" : grade < 11.7 ? \"B\" : grade < 12.2 ? \"B+\" : grade < 12.7 ? \"B+\"\
    \ : grade < 13.2 ? \"B\" : grade < 13.7 ? \"B\" : grade < 14.2 ? \"B-\" : grade\
    \ < 14.7 ? \"B-\" : grade < 15.2 ? \"B-\" : grade < 15.7 ? \"B-\" : grade < 16.2\
    \ ? \"B-\" : grade < 16.7 ? \"B-\" : grade < 17.2 ? \"C+\" : grade < 17.7 ? \"\
    C+\" : grade < 18.2 ? \"C\" : grade < 18.7 ? \"C\" : grade < 19.2 ? \"C-\" : grade\
    \ < 19.7 ? \"C-\" : grade < 20.2 ? \"C-\" : grade < 20.7 ? \"C-\" : grade < 21.2\
    \ ? \"C\" : grade < 21.7 ? \"C\" : grade < 22.2 ? \"C-\" : grade < 22.7 ? \"C-\"\
    \ : grade < 23.2 ? \"C-\" : grade < 23.7 ? \"C-\" : grade < 24.2 ? \"C\" : grade\
    \ < 24.7 ? \"C\" : grade < 25.2 ? \"C+\" : grade < 25.7 ? \"C+\" : grade < 26.2\
    \ ? \"C\" : grade < 26.7 ? \"C\" : grade < 27.2 ? \"C+\" : grade < 27.7 ? \"C+\"\
    \ : grade < 28.2 ? \"C-\" : grade < 28.7 ? \"C-\" : grade < 29.\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw04u1bu6.swift:30:1257: error: expected member name following '.'\n\
    \        let letter_grade = grade < 1.0 ? \"D-\" : grade < 1.2 ? \"C-\" : grade\
    \ < 1.7 ? \"C-\" : grade < 2.3 ? \"B-\" : grade < 2.7 ? \"B-\" : grade < 3.3 ?\
    \ \"A-\" : grade < 3.7 ? \"A-\" : grade < 4.0 ? \"A+\" : grade < 4.7 ? \"A+\"\
    \ : grade < 5.3 ? \"A-\" : grade < 5.7 ? \"A-\" : grade < 6.2 ? \"A\" : grade\
    \ < 6.7 ? \"A\" : grade < 7.2 ? \"A-\" : grade < 7.7 ? \"A-\" : grade < 8.2 ?\
    \ \"B+\" : grade < 8.7 ? \"B+\" : grade < 9.2 ? \"B\" : grade < 9.7 ? \"B\" :\
    \ grade < 10.2 ? \"B-\" : grade < 10.7 ? \"B-\" : grade < 11.2 ? \"B\" : grade\
    \ < 11.7 ? \"B\" : grade < 12.2 ? \"B+\" : grade < 12.7 ? \"B+\" : grade < 13.2\
    \ ? \"B\" : grade < 13.7 ? \"B\" : grade < 14.2 ? \"B-\" : grade < 14.7 ? \"B-\"\
    \ : grade < 15.2 ? \"B-\" : grade < 15.7 ? \"B-\" : grade < 16.2 ? \"B-\" : grade\
    \ < 16.7 ? \"B-\" : grade < 17.2 ? \"C+\" : grade < 17.7 ? \"C+\" : grade < 18.2\
    \ ? \"C\" : grade < 18.7 ? \"C\" : grade < 19.2 ? \"C-\" : grade < 19.7 ? \"C-\"\
    \ : grade < 20.2 ? \"C-\" : grade < 20.7 ? \"C-\" : grade < 21.2 ? \"C\" : grade\
    \ < 21.7 ? \"C\" : grade < 22.2 ? \"C-\" : grade < 22.7 ? \"C-\" : grade < 23.2\
    \ ? \"C-\" : grade < 23.7 ? \"C-\" : grade < 24.2 ? \"C\" : grade < 24.7 ? \"\
    C\" : grade < 25.2 ? \"C+\" : grade < 25.7 ? \"C+\" : grade < 26.2 ? \"C\" : grade\
    \ < 26.7 ? \"C\" : grade < 27.2 ? \"C+\" : grade < 27.7 ? \"C+\" : grade < 28.2\
    \ ? \"C-\" : grade < 28.7 ? \"C-\" : grade < 29.\n                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     "
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    var sum: Double\
    \ = 0\n    for grade in grades {\n        sum += grade\n        if sum >= 3.0\
    \ {\n            letterGrades.append(\"A+\")\n            sum = sum - 3.0\n  \
    \      } else if sum >= 2.0 {\n            letterGrades.append(\"A\")\n      \
    \      sum = sum - 2.0\n        } else if sum >= 1.0 {\n            letterGrades.append(\"\
    A-\")\n            sum = sum - 1.0\n        } else if sum >= 0.7 && sum < 1.0\
    \ {\n            letterGrades.append(\"B\")\n            sum = sum - 0.7\n   \
    \     } else if sum >= 0.3 && sum < 0.7 {\n            letterGrades.append(\"\
    B-\")\n            sum = sum - 0.3\n        } else if sum >= 0.0 && sum < 0.3\
    \ {\n            letterGrades.append(\"C\")\n            sum = sum - 0.0\n   \
    \     } else if sum < 0.0 && sum < 0.3 {\n            letterGrades.append(\"C+\"\
    )\n            sum = sum - 0.0\n        } else {\n            letterGrades.append(\"\
    D-\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbt_op6nv/tmpbt_op6nv.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e13aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e13798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e13798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e137977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbt_op6nv                        0x0000559e6f6577a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8e13c8d460 __libc_start_main +
    245

    6    tmpbt_op6nv                        0x0000559e6f6572c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let result: [String] = []\n\n    for grade in grades\
    \ {\n        guard grade >= 0 && grade < 10 else {\n            print(\"\\nInvalid\
    \ input. Grade must be between 0 and 10\")\n            return []\n        }\n\
    \n        if grade < 3 && grade >= -3 { // <-\n            result.append(String.init(\"\
    D\"))\n        } else if grade < 6 && grade >= -6 { // <- \n            result.append(String.init(\"\
    B\"))\n        } else if grade < 9 && grade >= -9 {\n            result.append(String.init(\"\
    C\"))\n        } else if grade < 12 && grade >= -12 {\n            result.append(String.init(\"\
    A-\"))\n        } else if grade < 15 && grade >= -15 {\n            result.append(String.init(\"\
    B+\"))\n        } else if grade < 18 && grade >= -18 {\n            result.append(String.init(\"\
    B-\"))\n        } else if grade < 21 && grade >= -21 {\n            result.append(String.init(\"\
    C+\"))\n        } else if grade < 24 && grade >= -24 {\n            result.append(String.init(\"\
    C\"))\n        } else if grade < 27 && grade >= -27 {\n            result.append(String.init(\"\
    A-\"))\n        } else if grade < 30 && grade >= -30 {\n            result.append(String.init(\"\
    D+\"))\n        } else if grade < 33 && grade >= -33 {\n            result.append(String.init(\"\
    D\"))\n        } else if grade < 36 && grade >= -36 {\n            result.append(String.init(\"\
    D-\"))\n        } else {\n            result.append(String.init(\"E\"))\n    \
    \    }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpss6eoxow.swift:34:20: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n            result.append(String.init(\"\
    D\"))\n            ~~~~~~ ^\n/tmp/tmpss6eoxow.swift:25:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let result: [String] = []\n    ^~~\n    var\n\
    /tmp/tmpss6eoxow.swift:36:20: error: cannot use mutating member on immutable value:\
    \ 'result' is a 'let' constant\n            result.append(String.init(\"B\"))\n\
    \            ~~~~~~ ^\n/tmp/tmpss6eoxow.swift:25:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result: [String] = []\n    ^~~\n    var\n/tmp/tmpss6eoxow.swift:38:20:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \            result.append(String.init(\"C\"))\n            ~~~~~~ ^\n/tmp/tmpss6eoxow.swift:25:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result: [String] = []\n\
    \    ^~~\n    var\n/tmp/tmpss6eoxow.swift:40:20: error: cannot use mutating member\
    \ on immutable value: 'result' is a 'let' constant\n            result.append(String.init(\"\
    A-\"))\n            ~~~~~~ ^\n/tmp/tmpss6eoxow.swift:25:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let result: [String] = []\n    ^~~\n    var\n\
    /tmp/tmpss6eoxow.swift:42:20: error: cannot use mutating member on immutable value:\
    \ 'result' is a 'let' constant\n            result.append(String.init(\"B+\"))\n\
    \            ~~~~~~ ^\n/tmp/tmpss6eoxow.swift:25:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result: [String] = []\n    ^~~\n    var\n/tmp/tmpss6eoxow.swift:44:20:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \            result.append(String.init(\"B-\"))\n            ~~~~~~ ^\n/tmp/tmpss6eoxow.swift:25:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result: [String] = []\n\
    \    ^~~\n    var\n/tmp/tmpss6eoxow.swift:46:20: error: cannot use mutating member\
    \ on immutable value: 'result' is a 'let' constant\n            result.append(String.init(\"\
    C+\"))\n            ~~~~~~ ^\n/tmp/tmpss6eoxow.swift:25:5: note: change 'let'\
    \ to 'var' to make i"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeArray = [String]()\n    if grades.isEmpty{\n\
    \        return gradeArray\n    }\n    if grades.count == 1 {\n        let temp\
    \ = String(grades[0])\n        return temp == \"0.0\" ?\n            [\"E\"] :\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\", \"D+\", \"D\", \"D-\", \"E\"]\n    }\n\
    \    if grades.count == 2 {\n        if grades[0] > grades[1] {\n            let\
    \ temp = String(grades[1])\n            return temp == \"0.0\" ?\n           \
    \     [\"E\"] : [\"A+\", \"B\", \"C-\", \"C\", \"A-\", \"D+\", \"D\", \"D-\",\
    \ \"E\"]\n        } else {\n            let temp = String(grades[0])\n       \
    \     return temp == \"0.0\" ?\n                [\"E\"] : [\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\", \"D+\", \"D\", \"D-\", \"E\"]\n        }\n    }\n    let temp\
    \ = [Double](count: grades.count, repeatedValue: 0.0)\n    var currentGrade =\
    \ grades[0]\n    grades.enumerate().forEach {\n        let grade = String($0.element)\n\
    \        if grade == \"0.0\" {\n            temp[$0.index] = currentGrade\n  \
    \          currentGrade = grades[1]\n        } else {\n            if grade <\
    \ \"3.0\" {\n                temp[$0.index] = currentGrade\n                currentGrade\
    \ = grades[0]\n            } else if grade > \"3.6\" {\n                temp[$0.index]\
    \ = currentGrade\n                currentGrade = grades[1]\n            } else\
    \ if grade > \"3.9\" {\n                temp[$0.index] = currentGrade\n      \
    \          currentGrade = grades[2]\n            } else if grade > \"4.1\" {\n\
    \                temp[$0.index] = currentGrade\n                currentGrade =\
    \ grades[3]\n            } else if grade > \"4.3\" {\n                temp[$0.index]\
    \ = currentGrade\n                currentGrade = grades[4]\n            } else\
    \ if grade > \"4.5\" {\n                temp[$0.index] = currentGrade\n      \
    \          currentGrade = grades[5]\n            } else {\n                temp[$0.index]\
    \ = currentGrade\n                currentGrade = grades[6]\n            }\n  \
    \      }\n    }\n    gradeArray = Array(temp.prefix(grades.count).map { String($0)\
    \ })\n    return gradeArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp55kbo7_q.swift:45:16: error: no exact matches in call to initializer\
    \ \n    let temp = [Double](count: grades.count, repeatedValue: 0.0)\n       \
    \        ^\n/tmp/tmp55kbo7_q.swift:45:16: note: candidate has partially matching\
    \ parameter list (repeating: Double, count: Int)\n    let temp = [Double](count:\
    \ grades.count, repeatedValue: 0.0)\n               ^\n/tmp/tmp55kbo7_q.swift:45:16:\
    \ note: candidate has partially matching parameter list (repeating: Double, count:\
    \ Int)\n    let temp = [Double](count: grades.count, repeatedValue: 0.0)\n   \
    \            ^\n/tmp/tmp55kbo7_q.swift:47:12: error: value of type '[Double]'\
    \ has no member 'enumerate'\n    grades.enumerate().forEach {\n    ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { grade in\n        if grade\
    \ < 4.0 {\n            return \"A+\"\n        } else if grade > 3.7 {\n      \
    \      return \"A\"\n        } else if grade > 3.3 {\n            return \"A-\"\
    \n        } else if grade > 3.0 {\n            return \"B+\"\n        } else if\
    \ grade > 2.7 {\n            return \"B\"\n        } else if grade > 2.3 {\n \
    \           return \"B-\"\n        } else if grade > 2.0 {\n            return\
    \ \"C+\"\n        } else if grade > 1.7 {\n            return \"C\"\n        }\
    \ else if grade > 1.3 {\n            return \"C-\"\n        } else if grade >\
    \ 1.0 {\n            return \"D+\"\n        } else if grade > 0.7 {\n        \
    \    return \"D\"\n        } else if grade > 0.0 {\n            return \"D-\"\n\
    \        } else if grade == 0.0 {\n            return \"E\"\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr4d5ut3y.swift:53:5: error: missing return in closure expected\
    \ to return 'String'\n    }\n    ^\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesSorted: [Double] = []\n    for grade\
    \ in grades {\n        gradesSorted.append(grade > 3.0 ? Double(grade) + 0.1 :\
    \ grade)\n    }\n    gradesSorted.sort()\n    \n    var letterGrades = [String]()\n\
    \    var currentLetterGrade: Character = \"D-\"\n    var currentGrade: Double\
    \ = 0.0\n    var firstLetter = String(currentLetterGrade)\n    \n    for grade\
    \ in gradesSorted {\n        if grade < firstGrade {\n            currentLetterGrade\
    \ = currentLetterGrade.capitalized()\n        }\n        \n        switch grade\
    \ {\n        case 3.0:\n            currentLetterGrade = \"B+\"\n        case\
    \ 2.7:\n            currentLetterGrade = \"B\"\n        case 2.3:\n          \
    \  currentLetterGrade = \"B-\"\n        case 2.0:\n            currentLetterGrade\
    \ = \"C+\"\n        case 1.7:\n            currentLetterGrade = \"C\"\n      \
    \  case 1.3:\n            currentLetterGrade = \"C-\"\n        case 1.0:\n   \
    \         currentLetterGrade = \"D+\"\n        case 0.7:\n            currentLetterGrade\
    \ = \"D\"\n        case 0.0:\n            currentLetterGrade = \"D-\"\n      \
    \  default:\n            currentLetterGrade = \"E\"\n        }\n        \n   \
    \     let firstLetterIndex = letterGrades.index(of: firstLetter)\n        let\
    \ letterGradeIndex = letterGrades.index(of: currentLetterGrade)\n        let gradeIndex\
    \ = letterGrades.index(of: String(currentGrade))\n        \n        letterGrades.append(letterGrades[firstLetterIndex].capitalized()\
    \ +\n                            letterGrades[letterGradeIndex])\n        \n \
    \       currentGrade = Double(grade)\n    }\n    \n    return letterGrades\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpepkkzmw4.swift:32:41: error: cannot convert value of type 'String'\
    \ to specified type 'Character'\n    var currentLetterGrade: Character = \"D-\"\
    \n                                        ^~~~\n/tmp/tmpepkkzmw4.swift:37:20:\
    \ error: cannot find 'firstGrade' in scope\n        if grade < firstGrade {\n\
    \                   ^~~~~~~~~~\n/tmp/tmpepkkzmw4.swift:38:53: error: value of\
    \ type 'Character' has no member 'capitalized'\n            currentLetterGrade\
    \ = currentLetterGrade.capitalized()\n                                 ~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~\n/tmp/tmpepkkzmw4.swift:43:34: error: cannot assign value of type\
    \ 'String' to type 'Character'\n            currentLetterGrade = \"B+\"\n    \
    \                             ^~~~\n/tmp/tmpepkkzmw4.swift:47:34: error: cannot\
    \ assign value of type 'String' to type 'Character'\n            currentLetterGrade\
    \ = \"B-\"\n                                 ^~~~\n/tmp/tmpepkkzmw4.swift:49:34:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \  currentLetterGrade = \"C+\"\n                                 ^~~~\n/tmp/tmpepkkzmw4.swift:53:34:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \  currentLetterGrade = \"C-\"\n                                 ^~~~\n/tmp/tmpepkkzmw4.swift:55:34:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \  currentLetterGrade = \"D+\"\n                                 ^~~~\n/tmp/tmpepkkzmw4.swift:59:34:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \  currentLetterGrade = \"D-\"\n                                 ^~~~\n/tmp/tmpepkkzmw4.swift:64:45:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ firstLetterIndex = letterGrades.index(of: firstLetter)\n                   \
    \                         ^\n/tmp/tmpepkkzmw4.swift:64:45: note: use 'firstIndex(of:)'\
    \ instead\n        let firstLetterIndex = letterGrades.index(of: firstLetter)\n\
    \                                            ^~~~~\n                         \
    \                   firstIndex\n/tmp/tmpepkkzmw4.swift:65:55: er"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    gradesArray =\
    \ Array(grades)\n    gradesArray = gradesArray.sorted(by: {$0 < $1}).reverse()\n\
    \    if gradesArray.first >= 4.0 {\n        gradesArray = Array(gradesArray.dropFirst()).sorted(by:\
    \ {$0 < $1}).reverse()\n        gradesArray.removeFirst()\n    }\n    var gradesIndex\
    \ = 0\n    var currentGPA = gradesArray[gradesIndex]\n    var result = [String]()\n\
    \    for element in gradesArray {\n        var grade = \"\"\n        switch currentGPA\
    \ {\n        case 0...0.1:\n            grade = \"D-\"\n        case 0.1...0.2:\n\
    \            grade = \"C-\"\n        case 0.2...0.3:\n            grade = \"C\"\
    \n        case 0.3...0.4:\n            grade = \"B-\"\n        case 0.4...0.5:\n\
    \            grade = \"B\"\n        case 0.5...0.6:\n            grade = \"A-\"\
    \n        case 0.6...0.7:\n            grade = \"A\"\n        case 0.7...0.8:\n\
    \            grade = \"A+\"\n        case 0.8...0.9:\n            grade = \"A\"\
    \n        default:\n            grade = \"E\"\n        }\n        result.append(grade)\n\
    \        currentGPA = element\n        gradesIndex += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj52b_cd9.swift:26:17: error: cannot assign value of type 'Array<Double>'\
    \ to type '[String]'\n    gradesArray = Array(grades)\n                ^\n/tmp/tmpj52b_cd9.swift:26:17:\
    \ note: arguments to generic parameter 'Element' ('Double' and 'String') are expected\
    \ to be equal\n    gradesArray = Array(grades)\n                ^\n/tmp/tmpj52b_cd9.swift:27:53:\
    \ error: cannot assign value of type '()' to type '[String]'\n    gradesArray\
    \ = gradesArray.sorted(by: {$0 < $1}).reverse()\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpj52b_cd9.swift:27:53: error: cannot use mutating member on immutable value:\
    \ function call returns immutable value\n    gradesArray = gradesArray.sorted(by:\
    \ {$0 < $1}).reverse()\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^\n\
    /tmp/tmpj52b_cd9.swift:28:20: error: cannot convert value of type 'String?' to\
    \ expected argument type 'Double'\n    if gradesArray.first >= 4.0 {\n       \
    \            ^\n/tmp/tmpj52b_cd9.swift:29:76: error: cannot assign value of type\
    \ '()' to type '[String]'\n        gradesArray = Array(gradesArray.dropFirst()).sorted(by:\
    \ {$0 < $1}).reverse()\n                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpj52b_cd9.swift:38:14: error: expression pattern of type 'ClosedRange<Double>'\
    \ cannot match values of type 'String'\n        case 0...0.1:\n             ^\n\
    /tmp/tmpj52b_cd9.swift:38:14: note: overloads for '~=' exist with these partially\
    \ matching parameter lists: (Substring, String)\n        case 0...0.1:\n     \
    \        ^\n/tmp/tmpj52b_cd9.swift:40:14: error: expression pattern of type 'ClosedRange<Double>'\
    \ cannot match values of type 'String'\n        case 0.1...0.2:\n            \
    \ ^\n/tmp/tmpj52b_cd9.swift:40:14: note: overloads for '~=' exist with these partially\
    \ matching parameter lists: (Substring, String)\n        case 0.1...0.2:\n   \
    \          ^\n/tmp/tmpj52b_cd9.swift:42:14: error: expression pattern of type\
    \ 'ClosedRange<Double>' cannot match values of type 'String'\n        case 0.2...0.3:\n\
    \             ^\n/tmp/tmpj52b_cd9.swift:42:14: "
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    // Write your code here\n    let letterGrades\
    \ = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"]\n    let gpas = grades.map { $0 * 0.3 } + [0 ..< 1]\n\
    \    let grade = grades.reduce((acc, cur) -> Double(acc.last!) + cur)\n    let\
    \ gradeRange = gpas.count - 1\n    let letter = letterGrades[Int(gradeRange)]\n\
    \    return Array(letter)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqc4kay7p.swift:29:32: error: cannot find 'acc' in scope\n    let\
    \ grade = grades.reduce((acc, cur) -> Double(acc.last!) + cur)\n             \
    \                  ^~~\n/tmp/tmpqc4kay7p.swift:29:37: error: cannot find 'cur'\
    \ in scope\n    let grade = grades.reduce((acc, cur) -> Double(acc.last!) + cur)\n\
    \                                    ^~~\n/tmp/tmpqc4kay7p.swift:29:52: error:\
    \ cannot find 'acc' in scope\n    let grade = grades.reduce((acc, cur) -> Double(acc.last!)\
    \ + cur)\n                                                   ^~~\n/tmp/tmpqc4kay7p.swift:29:65:\
    \ error: cannot find 'cur' in scope\n    let grade = grades.reduce((acc, cur)\
    \ -> Double(acc.last!) + cur)\n                                              \
    \                  ^~~\n/tmp/tmpqc4kay7p.swift:29:31: error: expected type before\
    \ '->'\n    let grade = grades.reduce((acc, cur) -> Double(acc.last!) + cur)\n\
    \                              ^\n/tmp/tmpqc4kay7p.swift:29:63: error: expected\
    \ type after '->'\n    let grade = grades.reduce((acc, cur) -> Double(acc.last!)\
    \ + cur)\n                                                              ^\n/tmp/tmpqc4kay7p.swift:29:68:\
    \ error: missing argument for parameter #2 in call\n    let grade = grades.reduce((acc,\
    \ cur) -> Double(acc.last!) + cur)\n                                         \
    \                          ^\n                                               \
    \                    , <#(_.Type, Double) throws -> _.Type#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n/tmp/tmpqc4kay7p.swift:32:18:\
    \ error: missing argument label 'arrayLiteral:' in call\n    return Array(letter)\n\
    \                 ^\n                 arrayLiteral: \n"
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var letters: [String] = []\n    var gradesIndex\
    \ = -1\n    \n    for i in grades.indices {\n        gradesIndex = i\n       \
    \ if grades[i] <= 2.0 {\n            letters.append(\"D+\")\n        } else if\
    \ grades[i] <= 3.0 {\n            letters.append(\"D-\")\n        } else if grades[i]\
    \ <= 3.3 {\n            letters.append(\"C\")\n        } else if grades[i] <=\
    \ 3.7 {\n            letters.append(\"C+\")\n        } else if grades[i] <= 4.0\
    \ {\n            letters.append(\"B+\")\n        } else if grades[i] <= 4.3 {\n\
    \            letters.append(\"B\")\n        } else if grades[i] <= 4.7 {\n   \
    \         letters.append(\"B-\")\n        } else if grades[i] <= 5.0 {\n     \
    \       letters.append(\"A+\")\n        } else if grades[i] <= 5.3 {\n       \
    \     letters.append(\"A\")\n        } else if grades[i] <= 5.7 {\n          \
    \  letters.append(\"A-\")\n        } else if grades[i] <= 6.0 {\n            letters.append(\"\
    E\")\n        } else {\n            letters.append(\"F\")\n        }\n    }\n\
    \    \n    return letters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsavajb3y/tmpsavajb3y.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f530e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f52dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f52dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f52dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsavajb3y                        0x0000559809ccb806 <unavailable> + 6150

    5    libc.so.6                          0x00002b4f532cd460 __libc_start_main +
    245

    6    tmpsavajb3y                        0x0000559809ccb329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        var letterGrade = \"\"\n        if grade >= 3.0 {\n      \
    \      letterGrade = \"C+\"\n        }\n        else if grade >= 2.7 {\n     \
    \       letterGrade = \"B\"\n        }\n        else if grade >= 2.3 {\n     \
    \       letterGrade = \"B-\"\n        }\n        else if grade >= 2.0 {\n    \
    \        letterGrade = \"C\"\n        }\n        else if grade >= 1.7 {\n    \
    \        letterGrade = \"C+\"\n        }\n        else if grade >= 1.3 {\n   \
    \         letterGrade = \"C-\"\n        }\n        else if grade >= 1.0 {\n  \
    \          letterGrade = \"D+\"\n        }\n        else if grade >= 0.7 {\n \
    \           letterGrade = \"D\"\n        }\n        else {\n            letterGrade\
    \ = \"D-\"\n        }\n        letterGrades.append(letterGrade)\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpa2qgmukf/tmpa2qgmukf.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7077b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b707780ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b707780a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70778097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2qgmukf                        0x000055d5d25807f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b7077cff460 __libc_start_main +
    245

    6    tmpa2qgmukf                        0x000055d5d2580319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades: [String] = [] // array of grade letter\
    \ strings\n    var grade_sum: Double = 0.0 // sum of grades\n    var current_grade:\
    \ Double // current grade \n    \n    for grade in grades {\n        // check\
    \ if grade is above or below average (4.0)\n        if grade >= 4 {\n        \
    \    current_grade = 4.0\n        } else {\n            current_grade = grade\n\
    \        }\n        // calculate and assign grade letter\n        switch current_grade\
    \ {\n        case 3.7:\n            grades.append(\"A+\")\n        case 3.3:\n\
    \            grades.append(\"A\")\n        case 3.0:\n            grades.append(\"\
    B+\")\n        case 2.7:\n            grades.append(\"B\")\n        case 2.3:\n\
    \            grades.append(\"B-\")\n        case 2.0:\n            grades.append(\"\
    C+\")\n        case 1.7:\n            grades.append(\"C\")\n        case 1.3:\n\
    \            grades.append(\"C-\")\n        case 1.0:\n            grades.append(\"\
    D+\")\n        case 0.7:\n            grades.append(\"D\")\n        case 0.0:\n\
    \            grades.append(\"D-\")\n        default:\n            grades.append(\"\
    E\")\n        }\n        grade_sum += current_grade\n    }\n    if grade_sum ==\
    \ 0.0 {\n        grades.append(\"E\")\n    }\n    return grades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphg74ttph.swift:31:18: error: binary operator '>=' cannot be applied\
    \ to operands of type 'String' and 'Int'\n        if grade >= 4 {\n          \
    \ ~~~~~ ^  ~\n/tmp/tmphg74ttph.swift:31:18: note: overloads for '>=' exist with\
    \ these partially matching parameter lists: (Int, Int)\n        if grade >= 4\
    \ {\n                 ^\n/tmp/tmphg74ttph.swift:34:29: error: cannot assign value\
    \ of type 'String' to type 'Double'\n            current_grade = grade\n     \
    \                       ^~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    let gradesCount = grades.count\n    var letterGrades\
    \ = [String]()\n    var prevGPA = Double()\n    var currentLetter = \"\"\n   \
    \ \n    for _ in 0..<gradesCount {\n        let currentGPA = grades[_]\n     \
    \   \n        guard currentGPA >= 0 else {\n            letterGrades.append(currentLetter)\n\
    \            break\n        }\n        \n        guard currentGPA < prevGPA else\
    \ {\n            letterGrades.append(currentLetter)\n            break\n     \
    \   }\n        \n        prevGPA = currentGPA\n        \n        if currentGPA\
    \ > 0 {\n            currentLetter = \"A\"\n        } else if currentGPA < 0 {\n\
    \            currentLetter = \"D\"\n        } else if currentGPA == 0 {\n    \
    \        currentLetter = \"E\"\n        }\n        letterGrades.append(currentLetter)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa0j7wzgh.swift:32:33: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        let currentGPA = grades[_]\n    \
    \                            ^\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.count < 1 {\n        return [\"E\"]\n\
    \    }\n    var letter_grades: [String] = []\n    let min_grade = grades[0]\n\
    \    for gpa: Double in grades {\n        let letter = gpa.rounded(to: .down).letterGrade\n\
    \        if gpa >= min_grade {\n            letter_grades.append(letter)\n   \
    \     }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7nl0zwjr.swift:31:33: error: extraneous argument label 'to:' in\
    \ call\n        let letter = gpa.rounded(to: .down).letterGrade\n            \
    \                    ^~~~~\n                                 \n/tmp/tmp7nl0zwjr.swift:31:45:\
    \ error: value of type 'Double' has no member 'letterGrade'\n        let letter\
    \ = gpa.rounded(to: .down).letterGrade\n                     ~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesCopy = [Double]()\n    gradesCopy = grades\n\
    \n    let totalGrade = gradesCopy.last!\n    let totalLetterGradeArray = [String]()\n\
    \n    for grade in gradesCopy {\n        if totalGrade <= 3.0 {\n            totalLetterGradeArray.append(\"\
    A+\")\n        }\n        else if totalGrade <= 3.7 {\n            totalLetterGradeArray.append(\"\
    A\")\n        }\n        else if totalGrade <= 3.3 {\n            totalLetterGradeArray.append(\"\
    A-\")\n        }\n        else if totalGrade <= 3.0 {\n            totalLetterGradeArray.append(\"\
    B+\")\n        }\n        else if totalGrade <= 2.7 {\n            totalLetterGradeArray.append(\"\
    B\")\n        }\n        else if totalGrade <= 2.3 {\n            totalLetterGradeArray.append(\"\
    B-\")\n        }\n        else if totalGrade <= 2.0 {\n            totalLetterGradeArray.append(\"\
    C+\")\n        }\n        else if totalGrade <= 1.7 {\n            totalLetterGradeArray.append(\"\
    C\")\n        }\n        else if totalGrade <= 1.3 {\n            totalLetterGradeArray.append(\"\
    C-\")\n        }\n        else if totalGrade <= 1.0 {\n            totalLetterGradeArray.append(\"\
    D+\")\n        }\n        else if totalGrade <= 0.7 {\n            totalLetterGradeArray.append(\"\
    D\")\n        }\n        else if totalGrade <= 0.0 {\n            totalLetterGradeArray.append(\"\
    D-\")\n        }\n        else if totalGrade <= 0.3 {\n            totalLetterGradeArray.append(\"\
    E\")\n        }\n        else {\n            totalLetterGradeArray.append(\"F\"\
    )\n        }\n    }\n    return totalLetterGradeArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6_avvtoc.swift:33:35: error: cannot use mutating member on immutable\
    \ value: 'totalLetterGradeArray' is a 'let' constant\n            totalLetterGradeArray.append(\"\
    A+\")\n            ~~~~~~~~~~~~~~~~~~~~~ ^\n/tmp/tmp6_avvtoc.swift:29:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let totalLetterGradeArray = [String]()\n\
    \    ^~~\n    var\n/tmp/tmp6_avvtoc.swift:36:35: error: cannot use mutating member\
    \ on immutable value: 'totalLetterGradeArray' is a 'let' constant\n          \
    \  totalLetterGradeArray.append(\"A\")\n            ~~~~~~~~~~~~~~~~~~~~~ ^\n\
    /tmp/tmp6_avvtoc.swift:29:5: note: change 'let' to 'var' to make it mutable\n\
    \    let totalLetterGradeArray = [String]()\n    ^~~\n    var\n/tmp/tmp6_avvtoc.swift:39:35:\
    \ error: cannot use mutating member on immutable value: 'totalLetterGradeArray'\
    \ is a 'let' constant\n            totalLetterGradeArray.append(\"A-\")\n    \
    \        ~~~~~~~~~~~~~~~~~~~~~ ^\n/tmp/tmp6_avvtoc.swift:29:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let totalLetterGradeArray = [String]()\n  \
    \  ^~~\n    var\n/tmp/tmp6_avvtoc.swift:42:35: error: cannot use mutating member\
    \ on immutable value: 'totalLetterGradeArray' is a 'let' constant\n          \
    \  totalLetterGradeArray.append(\"B+\")\n            ~~~~~~~~~~~~~~~~~~~~~ ^\n\
    /tmp/tmp6_avvtoc.swift:29:5: note: change 'let' to 'var' to make it mutable\n\
    \    let totalLetterGradeArray = [String]()\n    ^~~\n    var\n/tmp/tmp6_avvtoc.swift:45:35:\
    \ error: cannot use mutating member on immutable value: 'totalLetterGradeArray'\
    \ is a 'let' constant\n            totalLetterGradeArray.append(\"B\")\n     \
    \       ~~~~~~~~~~~~~~~~~~~~~ ^\n/tmp/tmp6_avvtoc.swift:29:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let totalLetterGradeArray = [String]()\n  \
    \  ^~~\n    var\n/tmp/tmp6_avvtoc.swift:48:35: error: cannot use mutating member\
    \ on immutable value: 'totalLetterGradeArray' is a 'let' constant\n          \
    \  totalLetterGradeArray.append(\"B-\")\n            ~~~~~~~~~~~~~~~~~~~~~ ^\n\
    /tmp/tmp6_avvtoc.swift:29:5: note: change 'let' to 'var' to make it mutable\n\
    \    let totalLetterGradeArray = ["
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var lettergrades = Array<String>(count: grades.count,\
    \ repeatedValue: \"\")\n    for i in 0..<lettergrades.count {\n        if grades[i]\
    \ >= 3.0 { lettergrades[i] = \"A+\" }\n        else if grades[i] >= 2.7 { lettergrades[i]\
    \ = \"B+\" }\n        else if grades[i] >= 2.3 { lettergrades[i] = \"B\" }\n \
    \       else if grades[i] >= 1.7 { lettergrades[i] = \"C+\" }\n        else if\
    \ grades[i] >= 1.3 { lettergrades[i] = \"C\" }\n        else if grades[i] >= 1.0\
    \ { lettergrades[i] = \"D+\" }\n        else if grades[i] >= 0.7 { lettergrades[i]\
    \ = \"D\" }\n        else if grades[i] >= 0.0 { lettergrades[i] = \"D-\" }\n \
    \       else { lettergrades[i] = \"E\" }\n    }\n    return lettergrades\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpajk72g50.swift:25:24: error: no exact matches in call to initializer\
    \ \n    var lettergrades = Array<String>(count: grades.count, repeatedValue: \"\
    \")\n                       ^\n/tmp/tmpajk72g50.swift:25:24: note: candidate has\
    \ partially matching parameter list (repeating: String, count: Int)\n    var lettergrades\
    \ = Array<String>(count: grades.count, repeatedValue: \"\")\n                \
    \       ^\n/tmp/tmpajk72g50.swift:25:24: note: candidate has partially matching\
    \ parameter list (repeating: String, count: Int)\n    var lettergrades = Array<String>(count:\
    \ grades.count, repeatedValue: \"\")\n                       ^\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    var result = [\"E\"]\n \
    \   var i = 1\n    while i < grades.count {\n        let grade_ = grades[i]\n\
    \        if grade_ > 3.0 {\n            if grade_ < 4.0 {\n                result.append(String(grade_))\n\
    \            }\n            else {\n                result.append(String(grade_\
    \ - 3.0) + \"+\")\n            }\n        }\n        else {\n            if grade_\
    \ < 3.7 {\n                result.append(String(grade_))\n            }\n    \
    \        else {\n                if grade_ < 3.3 {\n                    result.append(String(grade_\
    \ - 3.7) + \"-\")\n                }\n                else {\n               \
    \     result.append(String(grade_ - 3.3) + \"+\")\n                }\n       \
    \     }\n        }\n        i = i + 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3grmee7r/tmp3grmee7r.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7c92f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7c8ff0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7c8ff0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7c8fef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3grmee7r                        0x000055b875bed806 <unavailable> + 6150

    5    libc.so.6                          0x00002af7c94e5460 __libc_start_main +
    245

    6    tmp3grmee7r                        0x000055b875bed329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesCounts = [Int: Int]()\n    var letterGrades\
    \ = [String]()\n\n    for i in grades {\n        if gradesCounts[i] != 0 {\n \
    \           letterGrades.append(String(gradesCounts[i] - 1))\n        }\n    \
    \    gradesCounts[i] = 1\n    }\n\n    for i in gradesCounts {\n        if i !=\
    \ 0 {\n            letterGrades.append(String(i + 1))\n        }\n    }\n\n  \
    \  return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmppgpo3koy.swift:29:25: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        if gradesCounts[i] != 0 {\n       \
    \                 ^\n                        Int( )\n/tmp/tmppgpo3koy.swift:30:53:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \            letterGrades.append(String(gradesCounts[i] - 1))\n              \
    \                                      ^\n                                   \
    \                 Int( )\n/tmp/tmppgpo3koy.swift:30:52: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n            letterGrades.append(String(gradesCounts[i]\
    \ - 1))\n                                                   ^\n/tmp/tmppgpo3koy.swift:30:52:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            letterGrades.append(String(gradesCounts[i] - 1))\n      \
    \                                             ^\n                            \
    \           (               ?? <#default value#>)\n/tmp/tmppgpo3koy.swift:30:52:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            letterGrades.append(String(gradesCounts[i] - 1))\n      \
    \                                             ^\n                            \
    \                          !\n/tmp/tmppgpo3koy.swift:32:22: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n        gradesCounts[i]\
    \ = 1\n                     ^\n                     Int( )\n/tmp/tmppgpo3koy.swift:36:14:\
    \ error: type '(key: Int, value: Int)' cannot conform to 'BinaryInteger'\n   \
    \     if i != 0 {\n             ^\n/tmp/tmppgpo3koy.swift:36:14: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n        if\
    \ i != 0 {\n             ^\n/tmp/tmppgpo3koy.swift:36:14: note: required by referencing\
    \ operator function '!=' on 'BinaryInteger' where 'Self' = '(key: Int, value:\
    \ Int)'\n        if i != 0 {\n             ^\n/tmp/tmppgpo3koy.swift:37:40: error:\
    \ cannot convert value of type '(key: Int, value: Int)' to expected "
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    if grades.count < 1 {\n\
    \        return [\"E\"]\n    }\n    \n    var gpa = grades[0]\n    \n    var grades\
    \ = [String]()\n    \n    for i in 1..<grades.count {\n        if gpa < 1.0 {\n\
    \            gpa = grades[i-1]\n            grades.append(\"D+\")\n        } else\
    \ if gpa < 1.7 {\n            gpa = grades[i-1]\n            grades.append(\"\
    D\")\n        } else if gpa < 2.3 {\n            gpa = grades[i-1]\n         \
    \   grades.append(\"D-\")\n        } else if gpa < 2.7 {\n            gpa = grades[i-1]\n\
    \            grades.append(\"C+\")\n        } else if gpa < 3.0 {\n          \
    \  gpa = grades[i-1]\n            grades.append(\"C\")\n        } else if gpa\
    \ < 3.7 {\n            gpa = grades[i-1]\n            grades.append(\"C-\")\n\
    \        } else if gpa < 4.0 {\n            gpa = grades[i-1]\n            grades.append(\"\
    B+\")\n        } else if gpa < 4.3 {\n            gpa = grades[i-1]\n        \
    \    grades.append(\"B\")\n        } else if gpa < 4.7 {\n            gpa = grades[i-1]\n\
    \            grades.append(\"B-\")\n        } else if gpa < 5.0 {\n          \
    \  gpa = grades[i-1]\n            grades.append(\"A+\")\n        } else if gpa\
    \ < 5.3 {\n            gpa = grades[i-1]\n            grades.append(\"A\")\n \
    \       } else if gpa < 5.7 {\n            gpa = grades[i-1]\n            grades.append(\"\
    A-\")\n        } else {\n            gpa = grades[i-1]\n            grades.append(\"\
    A\")\n        }\n    }\n    \n    return grades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv4nl1zp3.swift:36:25: error: cannot assign value of type 'String'\
    \ to type 'Double'\n            gpa = grades[i-1]\n                  ~~~~~~^~~~~\n\
    /tmp/tmpv4nl1zp3.swift:39:25: error: cannot assign value of type 'String' to type\
    \ 'Double'\n            gpa = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:42:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:45:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:48:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:51:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:54:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:57:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:60:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:63:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:66:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:69:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n/tmp/tmpv4nl1zp3.swift:72:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n            gpa\
    \ = grades[i-1]\n                  ~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let firstGrade = grades.first!\n    let sortedGrade\
    \ = grades.sorted()\n    guard let minGrade = sortedGrade.first,\n        minGrade\
    \ >= 4.0 else { return [] }\n    guard let maxGrade = sortedGrade.last,\n    \
    \    maxGrade <= 0.0 else { return [] }\n    let point = (maxGrade - minGrade)\
    \ / 4\n    \n    return Array(stride(from: minGrade, to: maxGrade, by: point).map({\
    \ String($0 - $1) })\n                .dropFirst(points.count - 1))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn41k278z.swift:34:28: error: cannot find 'points' in scope\n  \
    \              .dropFirst(points.count - 1))\n                           ^~~~~~\n\
    /tmp/tmpn41k278z.swift:33:70: error: contextual closure type '(Double) throws\
    \ -> String' expects 1 argument, but 2 were used in closure body\n    return Array(stride(from:\
    \ minGrade, to: maxGrade, by: point).map({ String($0 - $1) })\n              \
    \                                                       ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for i in 0\
    \ ..< grades.count {\n        if grades[i] > 3.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grades[i] < 3.0 {\n            letter_grades.append(\"\
    A\")\n        } else if grades[i] < 2.0 {\n            letter_grades.append(\"\
    B\")\n        } else if grades[i] < 2.7 {\n            letter_grades.append(\"\
    B+\")\n        } else if grades[i] < 2.3 {\n            letter_grades.append(\"\
    B-\")\n        } else if grades[i] < 2.0 {\n            letter_grades.append(\"\
    C+\")\n        } else if grades[i] < 1.7 {\n            letter_grades.append(\"\
    C\")\n        } else if grades[i] < 1.3 {\n            letter_grades.append(\"\
    C-\")\n        } else if grades[i] < 1.0 {\n            letter_grades.append(\"\
    D+\")\n        } else if grades[i] < 0.7 {\n            letter_grades.append(\"\
    D\")\n        } else if grades[i] < 0.0 {\n            letter_grades.append(\"\
    D-\")\n        } else {\n            letter_grades.append(\"E\")\n        }\n\
    \    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgc15o_5k/tmpgc15o_5k.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4d946c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4d63db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4d63d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4d63c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgc15o_5k                        0x000055a2f42628c6 <unavailable> + 6342

    5    libc.so.6                          0x00002adf4db32460 __libc_start_main +
    245

    6    tmpgc15o_5k                        0x000055a2f42623e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        var gradePoints: Double = grade * 4.0\n        \n     \
    \   if gradePoints >= 3.7 {\n            gradePoints = gradePoints - 3.7\n   \
    \         letterGrades.append(\"A+\")\n        } else if gradePoints >= 3.3 {\n\
    \            gradePoints = gradePoints - 3.3\n            letterGrades.append(\"\
    A\")\n        } else if gradePoints >= 2.7 {\n            gradePoints = gradePoints\
    \ - 2.7\n            letterGrades.append(\"B\")\n        } else if gradePoints\
    \ >= 2.3 {\n            gradePoints = gradePoints - 2.3\n            letterGrades.append(\"\
    B-\")\n        } else if gradePoints >= 1.7 {\n            gradePoints = gradePoints\
    \ - 1.7\n            letterGrades.append(\"C+\")\n        } else if gradePoints\
    \ >= 1.3 {\n            gradePoints = gradePoints - 1.3\n            letterGrades.append(\"\
    C\")\n        } else if gradePoints >= 1.0 {\n            gradePoints = gradePoints\
    \ - 1.0\n            letterGrades.append(\"D+\")\n        } else if gradePoints\
    \ >= 0.7 {\n            gradePoints = gradePoints - 0.7\n            letterGrades.append(\"\
    D\")\n        } else if gradePoints < 0.7 {\n            gradePoints = gradePoints\
    \ - 0.7\n            letterGrades.append(\"D-\")\n        }\n        letterGrades.append(\"\
    D-\") // last point\n        letterGrades.append(String(gradePoints))\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqimizn03/tmpqimizn03.swift:77: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b42906c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b425fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b425fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b425fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqimizn03                        0x0000563dc665f8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b0b42af2460 __libc_start_main +
    245

    6    tmpqimizn03                        0x0000563dc665f3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = [] // A temporary array\
    \ to store letter grades\n    let maxGrade = grades.max() // Find max GPA\n  \
    \  let minGrade = grades.min() // Find min GPA\n    \n    // Loop through the\
    \ array to check all grades\n    for number in grades {\n        let grade = round(number)\
    \ // Get letter grade from GPA\n        // Check to see if this grade is lower\
    \ than the minimum\n        if grade < minGrade {\n            gradesArray.append(\"\
    D\")\n        }\n        // Check to see if this grade is greater than the maximum\n\
    \        else if grade > maxGrade {\n            gradesArray.append(\"F\")\n \
    \       }\n        // Check to see if this grade is between 3.3 and 3.7\n    \
    \    else if grade <= 3.3 && grade >= 3.7 {\n            gradesArray.append(\"\
    C\")\n        }\n        // Check to see if this grade is between 3.2 and 3.4\n\
    \        else if grade <= 3.2 && grade >= 3.4 {\n            gradesArray.append(\"\
    B-\")\n        }\n        // Check to see if this grade is between 3.0 and 3.6\n\
    \        else if grade <= 3.0 && grade >= 3.6 {\n            gradesArray.append(\"\
    B-\")\n        }\n        // Check to see if this grade is between 2.7 and 3.0\n\
    \        else if grade <= 2.7 && grade >= 3.0 {\n            gradesArray.append(\"\
    B-\")\n        }\n        // Check to see if this grade is between 2.3 and 2.7\n\
    \        else if grade <= 2.3 && grade >= 2.7 {\n            gradesArray.append(\"\
    B-\")\n        }\n        // Check to see if this grade is between 2.0 and 2.4\n\
    \        else if grade <= 2.0 && grade >= 2.4 {\n            gradesArray.append(\"\
    B-\")\n        }\n        // Check to see if this grade is between 1.7 and 2.0\n\
    \        else if grade <= 1.7 && grade >= 2.0 {\n            gradesArray.append(\"\
    B-\")\n        }\n        // Check to see if this grade is between 1.3\n     \
    \   else if grade <= 1.3 {\n            gradesArray.append(\"A-\")\n        }\n\
    \        // Check to see if this grade is below 1.0\n        else if grade <=\
    \ 1.0 {\n            gradesArray.append(\"A-\")\n        }\n        // Check to\
    \ see if this grade is below 0.7\n        else if grade <= 0.7 {\n           \
    \ gradesArray.append(\"A-\")\n        }\n        // Check to see if this grade\
    \ is below 0.0\n        else if grade <= 0.0 {\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpns124bnr.swift:103:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpns124bnr.swift:30:26:\
    \ note: to match this opening '{'\n    for number in grades {\n              \
    \           ^\n/tmp/tmpns124bnr.swift:103:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpns124bnr.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpns124bnr.swift:31:21: error: cannot find 'round' in scope\n        let\
    \ grade = round(number) // Get letter grade from GPA\n                    ^~~~~\n\
    /tmp/tmpns124bnr.swift:33:20: error: value of optional type 'Double?' must be\
    \ unwrapped to a value of type 'Double'\n        if grade < minGrade {\n     \
    \              ^\n/tmp/tmpns124bnr.swift:27:9: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n    let minGrade\
    \ = grades.min() // Find min GPA\n        ^\n    guard                       else\
    \ { return <#default value#> }\n/tmp/tmpns124bnr.swift:27:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    let minGrade\
    \ = grades.min() // Find min GPA\n                          ^\n              \
    \                  ?? <#default value#>\n/tmp/tmpns124bnr.swift:27:27: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    let minGrade\
    \ = grades.min() // Find min GPA\n                          ^\n              \
    \                 !\n/tmp/tmpns124bnr.swift:33:20: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        if grade <\
    \ minGrade {\n                   ^\n                            ?? <#default value#>\n\
    /tmp/tmpns124bnr.swift:33:20: note: force-unwrap using '!' to abort exe"
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if grade > gpa {\n            gradeLetters.append(\"\
    D\")\n        } else if grade > 3.0 && grade < 4.0 {\n            gradeLetters.append(\"\
    A-\")\n        } else if grade > 2.0 && grade < 3.0 {\n            gradeLetters.append(\"\
    A-\")\n        } else if grade > 0.0 && grade < 2.0 {\n            gradeLetters.append(\"\
    A-\")\n        } else if grade < 0.0 {\n            gradeLetters.append(\"A-\"\
    )\n        } else {\n            gradeLetters.append(\"A+\")\n        }\n    \
    \    gpa = grade\n    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6mz83edj/tmp6mz83edj.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac161860c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac161557b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac161557988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1615567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mz83edj                        0x0000559432b37856 <unavailable> + 6230

    5    libc.so.6                          0x00002ac161a4c460 __libc_start_main +
    245

    6    tmp6mz83edj                        0x0000559432b37379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var letterGrades: [String] = [] // initialize\
    \ empty array\n    \n    var gpa = grades.first // first gpa of first student\
    \ \n    \n    for g in grades {\n        \n        // use gpa to calculate letter\
    \ grade\n        var letterGrade = gpa > 3.3 ? \"B+\" : gpa > 2.3 ? \"B-\" : gpa\
    \ > 1.7 ? \"C-\" : gpa > 1.3 ? \"C\" : gpa > 0.7 ? \"D+\" : gpa > 0.3 ? \"D\"\
    \ : gpa > 0 ? \"D-\" : gpa > 0 ? \"E\" : \"F\"\n        \n        // append letter\
    \ grade to letterGrades array\n        letterGrades.append(letterGrade)\n    \
    \    \n        // update gpa\n        gpa = gpa * 2\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0h9aes7o.swift:33:27: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n        var letterGrade = gpa > 3.3\
    \ ? \"B+\" : gpa > 2.3 ? \"B-\" : gpa > 1.7 ? \"C-\" : gpa > 1.3 ? \"C\" : gpa\
    \ > 0.7 ? \"D+\" : gpa > 0.3 ? \"D\" : gpa > 0 ? \"D-\" : gpa > 0 ? \"E\" : \"\
    F\"\n                          ^\n/tmp/tmp0h9aes7o.swift:33:27: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     var letterGrade = gpa > 3.3 ? \"B+\" : gpa > 2.3 ? \"B-\" : gpa > 1.7 ?\
    \ \"C-\" : gpa > 1.3 ? \"C\" : gpa > 0.7 ? \"D+\" : gpa > 0.3 ? \"D\" : gpa >\
    \ 0 ? \"D-\" : gpa > 0 ? \"E\" : \"F\"\n                          ^\n        \
    \                      ?? <#default value#>\n/tmp/tmp0h9aes7o.swift:33:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        var letterGrade = gpa > 3.3 ? \"B+\" : gpa > 2.3 ? \"B-\" : gpa > 1.7\
    \ ? \"C-\" : gpa > 1.3 ? \"C\" : gpa > 0.7 ? \"D+\" : gpa > 0.3 ? \"D\" : gpa\
    \ > 0 ? \"D-\" : gpa > 0 ? \"E\" : \"F\"\n                          ^\n      \
    \                       !\n/tmp/tmp0h9aes7o.swift:33:46: error: value of optional\
    \ type 'Double?' must be unwrapped to a value of type 'Double'\n        var letterGrade\
    \ = gpa > 3.3 ? \"B+\" : gpa > 2.3 ? \"B-\" : gpa > 1.7 ? \"C-\" : gpa > 1.3 ?\
    \ \"C\" : gpa > 0.7 ? \"D+\" : gpa > 0.3 ? \"D\" : gpa > 0 ? \"D-\" : gpa > 0\
    \ ? \"E\" : \"F\"\n                                             ^\n/tmp/tmp0h9aes7o.swift:33:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        var letterGrade = gpa > 3.3 ? \"B+\" : gpa > 2.3 ? \"B-\" : gpa\
    \ > 1.7 ? \"C-\" : gpa > 1.3 ? \"C\" : gpa > 0.7 ? \"D+\" : gpa > 0.3 ? \"D\"\
    \ : gpa > 0 ? \"D-\" : gpa > 0 ? \"E\" : \"F\"\n                             \
    \                ^\n                                                 ?? <#default\
    \ value#>\n/tmp/tmp0h9aes7o.swift:33:46: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        var letterGrade = gpa\
    \ > 3.3 ? \"B+\" : gpa > 2.3 ? \"B-\" : gpa > 1.7 ? \"C-\" : gpa > 1.3 ? \"C\"\
    \ : gpa > 0.7 ? \"D+\" : gpa > 0.3 ? \"D\" : gpa > 0 ? \""
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let lower = grades.min()!\n    let upper = grades.max()!\n\
    \    var letterGrades = [String]()\n    \n    if lower <= 5.0 {\n        letterGrades.append(\"\
    D\")\n    } else if lower > 5.0 && lower <= 6.0 {\n        letterGrades.append(\"\
    C+\")\n    } else if lower > 6.0 && lower <= 7.0 {\n        letterGrades.append(\"\
    C-\")\n    } else if lower > 7.0 && lower <= 8.0 {\n        letterGrades.append(\"\
    B+\")\n    } else if lower > 8.0 && lower <= 9.0 {\n        letterGrades.append(\"\
    B-\")\n    } else if lower > 9.0 && lower <= 10.0 {\n        letterGrades.append(\"\
    A+\")\n    } else if lower > 10.0 && lower <= 11.0 {\n        letterGrades.append(\"\
    A\")\n    } else if lower > 11.0 && lower <= 12.0 {\n        letterGrades.append(\"\
    A-\")\n    } else if lower > 12.0 {\n        letterGrades.append(\"A\")\n    }\n\
    \    \n    for grade in grades {\n        if grade > 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n     \
    \   } else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n       \
    \ } else if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if\
    \ grade > 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade\
    \ > 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0\
    \ {\n            letterGrades.append(\"D-\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"E\")\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppl3b4j6r/tmppl3b4j6r.swift:95: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7109ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b710989ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b710989a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71098997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppl3b4j6r                        0x000055b60add2996 <unavailable> + 6550

    5    libc.so.6                          0x00002b7109d8f460 __libc_start_main +
    245

    6    tmppl3b4j6r                        0x000055b60add24b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 3.0: letterGrades.append(\"B+\"\
    ); break\n        case 3.1: letterGrades.append(\"B\"); break\n        case 3.2:\
    \ letterGrades.append(\"B-\"); break\n        case 3.3: letterGrades.append(\"\
    A-\"); break\n        case 3.4: letterGrades.append(\"A\"); break\n        case\
    \ 3.5: letterGrades.append(\"A+\"); break\n        case 3.6: letterGrades.append(\"\
    A\"); break\n        case 3.7: letterGrades.append(\"A-\"); break\n        case\
    \ 3.8: letterGrades.append(\"B-\"); break\n        case 3.9: letterGrades.append(\"\
    B-\"); break\n        case 3.10: letterGrades.append(\"C-\"); break\n        case\
    \ 3.11: letterGrades.append(\"C\"); break\n        case 3.12: letterGrades.append(\"\
    C\"); break\n        case 3.13: letterGrades.append(\"C\"); break\n        case\
    \ 3.14: letterGrades.append(\"C\"); break\n        case 3.15: letterGrades.append(\"\
    C\"); break\n        case 3.16: letterGrades.append(\"C\"); break\n        case\
    \ 3.17: letterGrades.append(\"C\"); break\n        case 3.18: letterGrades.append(\"\
    C\"); break\n        case 3.19: letterGrades.append(\"C\"); break\n        case\
    \ 3.20: letterGrades.append(\"C+\"); break\n        case 3.21: letterGrades.append(\"\
    C+\"); break\n        case 3.22: letterGrades.append(\"C+\"); break\n        case\
    \ 3.23: letterGrades.append(\"C+\"); break\n        case 3.24: letterGrades.append(\"\
    C+\"); break\n        case 3.25: letterGrades.append(\"C+\"); break\n        case\
    \ 3.26: letterGrades.append(\"C+\"); break\n        case 3.27: letterGrades.append(\"\
    C+\"); break\n        case 3.28: letterGrades.append(\"C+\"); break\n        case\
    \ 3.29: letterGrades.append(\"C+\"); break\n        case 3.30: letterGrades.append(\"\
    C+\"); break\n        case 3.31: letterGrades.append(\"C+\"); break\n        case\
    \ 3.32: letterGrades.append(\"C+\"); break\n        case 3.33: letterGrades.append(\"\
    C+\"); break\n        case 3.34: letterGrades.append(\"C+\"); break\n        case\
    \ 3.35: letterGrades.append(\"C+\"); break\n        case 3.36: letterGrades.append(\"\
    C+\"); break\n        case 3.37: letterGrades.append(\"C+\"); break\n        case\
    \ 3.38: letterGrades.append(\"C+\"); break\n        case 3.39: letterGrades.append(\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnqe7q27v.swift:67:40: error: unterminated string literal\n    \
    \    case 3.39: letterGrades.append(\"\n                                     \
    \  ^\n/tmp/tmpnqe7q27v.swift:88:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpnqe7q27v.swift:26:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpnqe7q27v.swift:88:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpnqe7q27v.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpnqe7q27v.swift:67:40: error: missing argument for parameter #1 in call\n\
    \        case 3.39: letterGrades.append(\"\n                                 \
    \      ^\n                                       <#String#>\nSwift.Array:6:37:\
    \ note: 'append' declared here\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\n/tmp/tmpnqe7q27v.swift:38:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case 3.10: letterGrades.append(\"C-\"); break\n             ^~~~\n\
    /tmp/tmpnqe7q27v.swift:29:14: note: first occurrence of identical literal pattern\
    \ is here\n        case 3.1: letterGrades.append(\"B\"); break\n             ^~~\n\
    /tmp/tmpnqe7q27v.swift:48:14: warning: literal value is already handled by previous\
    \ pattern; consider removing it\n        case 3.20: letterGrades.append(\"C+\"\
    ); break\n             ^~~~\n/tmp/tmpnqe7q27v.swift:30:14: note: first occurrence\
    \ of identical literal pattern is here\n        case 3.2: letterGrades.append(\"\
    B-\"); break\n             ^~~\n/tmp/tmpnqe7q27v.swift:58:14: warning: literal\
    \ value is already handled by previous pattern; consider removing it\n       \
    \ case 3.30: l"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    if grades.count\
    \ < 2 {\n        return letterGrades\n    }\n    if grades.count > 7 {\n     \
    \   return letterGrades\n    }\n    var maxGrade = grades.max()\n    var maxGradeIndex\
    \ = grades.firstIndex(of: maxGrade)!\n    if maxGrade <= 4.0 {\n        var firstHalf\
    \ = grades[0...maxGradeIndex]\n        var secondHalf = grades[maxGradeIndex...grades.count]\n\
    \        var minGrade = firstHalf.min()\n        var minGradeIndex = firstHalf.firstIndex(of:\
    \ minGrade)!\n        if minGrade <= 3.7 {\n            var thirdHalf = secondHalf[0...minGradeIndex]\n\
    \            var fourthHalf = secondHalf[minGradeIndex...secondHalf.count]\n \
    \           var maxGradeLetter = thirdHalf.max()\n            var maxGradeLetterIndex\
    \ = thirdHalf.firstIndex(of: maxGradeLetter)!\n            if maxGradeLetter >=\
    \ 3.3 {\n                let maxGradeLetterString = String(describing: maxGradeLetter)\n\
    \                let maxGradeLetterStringIndex = thirdHalf.firstIndex(of: maxGradeLetterString)!\n\
    \                var letterGrade = String(repeating: \"D-\", count: maxGradeLetterStringIndex\
    \ - thirdHalf.count)\n                letterGrades.append(letterGrade.joined())\n\
    \            } else {\n                let maxGradeLetterString = String(describing:\
    \ maxGradeLetter)\n                let maxGradeLetterStringIndex = thirdHalf.firstIndex(of:\
    \ maxGradeLetterString)!\n                var letterGrade = String(repeating:\
    \ \"D\", count: maxGradeLetterStringIndex - thirdHalf.count)\n               \
    \ letterGrades.append(letterGrade.joined())\n            }\n        } else if\
    \ minGrade <= 3.3 {\n            let minGradeLetterString = String(describing:\
    \ minGrade)\n            let minGradeLetterStringIndex = thirdHalf.firstIndex(of:\
    \ minGradeLetterString)!\n            var letterGrade = String(repeating: \"C\"\
    , count: minGradeLetterStringIndex - thirdHalf.count)\n            letterGrades.append(letterGrade.joined())\n\
    \        } else {\n            let minGradeLetterString = String(describing: minGrade)\n\
    \            let minGradeLetterStringIndex = thirdHalf.firstIndex(of: minGradeLetterString)!\n\
    \            var letterGrade = String(repeating: \"B\", count: minGradeLetterStringIndex\
    \ - thir\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwqyina6b.swift:64:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpwqyina6b.swift:63:37: note: to match this opening '('\n           \
    \ var letterGrade = String(repeating: \"B\", count: minGradeLetterStringIndex\
    \ - thir\n                                    ^\n/tmp/tmpwqyina6b.swift:84:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpwqyina6b.swift:34:24: note: to match this opening\
    \ '{'\n    if maxGrade <= 4.0 {\n                       ^\n/tmp/tmpwqyina6b.swift:84:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpwqyina6b.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpwqyina6b.swift:33:47:\
    \ error: value of optional type 'Double?' must be unwrapped to a value of type\
    \ 'Double'\n    var maxGradeIndex = grades.firstIndex(of: maxGrade)!\n       \
    \                                       ^\n/tmp/tmpwqyina6b.swift:33:47: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    var maxGradeIndex = grades.firstIndex(of: maxGrade)!\n                  \
    \                            ^\n                                             \
    \          ?? <#default value#>\n/tmp/tmpwqyina6b.swift:33:47: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    var maxGradeIndex\
    \ = grades.firstIndex(of: maxGrade)!\n                                       \
    \       ^\n                                                      !\n/tmp/tmpwqyina6b.swift:34:8:\
    \ error: value of optional type 'Double?' must be unwrapped to a value of type\
    \ 'Double'\n    if maxGrade <= 4.0 {\n       ^\n/tmp/tmpwqyina6b.swift:34:8: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    if maxGra"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArr = grades\n    var gpaSum = 0\n  \
    \  for each in gradesArr {\n        gpaSum += each\n    }\n    var gpaMin = gpaSum\
    \ / Double(grades.count)\n    var gpaMax = gpaSum / Double(grades.count)\n\n \
    \   var resultArr: [String] = []\n    for each in gradesArr {\n        let letterGrade\
    \ = letterGrade(grade: each, gpa: gpaMin)\n        resultArr.append(letterGrade)\n\
    \    }\n    for each in gradesArr.reversed() {\n        let letterGrade = letterGrade(grade:\
    \ each, gpa: gpaMax)\n        resultArr.append(letterGrade)\n    }\n\n    return\
    \ resultArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7cjqcgx2.swift:28:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        gpaSum += each\n                  ^\n\
    \                  Int()\n/tmp/tmp7cjqcgx2.swift:30:25: error: binary operator\
    \ '/' cannot be applied to operands of type 'Int' and 'Double'\n    var gpaMin\
    \ = gpaSum / Double(grades.count)\n                 ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7cjqcgx2.swift:30:25: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n\
    \    var gpaMin = gpaSum / Double(grades.count)\n                        ^\n/tmp/tmp7cjqcgx2.swift:31:25:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    var gpaMax = gpaSum / Double(grades.count)\n                 ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7cjqcgx2.swift:31:25: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n\
    \    var gpaMax = gpaSum / Double(grades.count)\n                        ^\n/tmp/tmp7cjqcgx2.swift:35:27:\
    \ error: use of local variable 'letterGrade' before its declaration\n        let\
    \ letterGrade = letterGrade(grade: each, gpa: gpaMin)\n                      \
    \    ^\n/tmp/tmp7cjqcgx2.swift:35:13: note: 'letterGrade' declared here\n    \
    \    let letterGrade = letterGrade(grade: each, gpa: gpaMin)\n            ^\n\
    /tmp/tmp7cjqcgx2.swift:39:27: error: use of local variable 'letterGrade' before\
    \ its declaration\n        let letterGrade = letterGrade(grade: each, gpa: gpaMax)\n\
    \                          ^\n/tmp/tmp7cjqcgx2.swift:39:13: note: 'letterGrade'\
    \ declared here\n        let letterGrade = letterGrade(grade: each, gpa: gpaMax)\n\
    \            ^\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return Array(zip(grades, [\"A+\", \"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"])).enumerated().map{[$0.0\
    \ + 1 + \"+\", $1.1, $1.3, $1.5, $1.6, $1.7, $1.8, $1.9, $1.0]}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvfytmh6q.swift:25:18: error: missing argument label 'from:' in\
    \ call\n    return Array(zip(grades, [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"\
    B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"])).enumerated().map{[$0.0\
    \ + 1 + \"+\", $1.1, $1.3, $1.5, $1.6, $1.7, $1.8, $1.9, $1.0]}\n            \
    \     ^\n                 from: \n/tmp/tmpvfytmh6q.swift:25:127: error: value\
    \ of type 'Int' has no member '0'\n    return Array(zip(grades, [\"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"])).enumerated().map{[$0.0 + 1 + \"+\", $1.1, $1.3, $1.5, $1.6, $1.7, $1.8,\
    \ $1.9, $1.0]}\n                                                             \
    \                                                              ~~ ^\n/tmp/tmpvfytmh6q.swift:25:122:\
    \ error: unable to infer type of a closure parameter '$1' in the current context\n\
    \    return Array(zip(grades, [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"\
    C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"])).enumerated().map{[$0.0 +\
    \ 1 + \"+\", $1.1, $1.3, $1.5, $1.6, $1.7, $1.8, $1.9, $1.0]}\n              \
    \                                                                            \
    \                               ^\n"
  stdout: ''
  timestamp: 1660014990
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n\n    // Your code\
    \ here\n    // ...\n\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3bqs93va/tmp3bqs93va.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1a73f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1a70e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1a70e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1a70e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bqs93va                        0x000055d3a6a1d636 <unavailable> + 5686

    5    libc.so.6                          0x00002ab1a75dc460 __libc_start_main +
    245

    6    tmp3bqs93va                        0x000055d3a6a1d159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gpas = grades\n    gpas.sort()\n    var grades:\
    \ [String] = []\n    var index = 0\n    while index < gpas.count {\n        let\
    \ gpa = gpas[index]\n        if gpa < 3.0 {\n            grades.append(\"E\")\n\
    \            break\n        }\n        if gpa < 3.3 {\n            grades.append(\"\
    B-\")\n            index += 1\n        } else if gpa < 3.7 {\n            grades.append(\"\
    B-\")\n            index += 1\n        } else if gpa < 4.0 {\n            grades.append(\"\
    A+\")\n            index += 1\n        } else if gpa < 4.3 {\n            grades.append(\"\
    A-\")\n            index += 1\n        } else if gpa < 4.7 {\n            grades.append(\"\
    A-\")\n            index += 1\n        } else if gpa < 5.0 {\n            grades.append(\"\
    B+\")\n            index += 1\n        } else if gpa < 5.3 {\n            grades.append(\"\
    B\")\n            index += 1\n        } else if gpa < 5.7 {\n            grades.append(\"\
    B\")\n            index += 1\n        } else if gpa < 6.0 {\n            grades.append(\"\
    C+\")\n            index += 1\n        } else if gpa < 6.3 {\n            grades.append(\"\
    C\")\n            index += 1\n        } else if gpa < 6.7 {\n            grades.append(\"\
    C\")\n            index += 1\n        } else if gpa < 7.0 {\n            grades.append(\"\
    D+\")\n            index += 1\n        } else if gpa < 7.3 {\n            grades.append(\"\
    D\")\n            index += 1\n        } else if gpa < 7.7 {\n            grades.append(\"\
    D\")\n            index += 1\n        } else if gpa < 8.0 {\n            grades.append(\"\
    D-\")\n            index += 1\n        } else {\n            grades.append(\"\
    D-\")\n            index += 1\n        }\n    }\n    return grades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1fhr5st8/tmp1fhr5st8.swift:101: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4459cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4456c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4456c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4456c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fhr5st8                        0x0000557746191806 <unavailable> + 6150

    5    libc.so.6                          0x00002af445bba460 __libc_start_main +
    245

    6    tmp1fhr5st8                        0x0000557746191329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    \n    if grades.count\
    \ < 2 {\n        return result\n    }\n    \n    if grades.count > 7 {\n     \
    \   return result\n    }\n    \n    let lowGrades = grades.filter {\n        if\
    \ $0 < 3.0 {\n            return true\n        }\n        \n        return false\n\
    \    }\n    \n    let highGrades = grades.filter {\n        if $0 >= 3.0 {\n \
    \           return true\n        }\n        \n        return false\n    }\n  \
    \  \n    if lowGrades.count < 4 {\n        let grade = (lowGrades.count == 0)\
    \ ? \"E\" : lowGrades.last!.description\n        result.append(grade)\n      \
    \  return result\n    }\n    \n    if highGrades.count < 5 {\n        let grade\
    \ = highGrades.first!.description\n        result.append(grade)\n        return\
    \ result\n    }\n    \n    let high = highGrades.max()\n    \n    var total =\
    \ 0\n    \n    for number in lowGrades {\n        total += number\n    }\n   \
    \ \n    let avg = (total / lowGrades.count).description\n    \n    if avg < 4.0\
    \ {\n        let grade = (avg < 3.0 ? \"A+\" : avg > 3.7 ? \"A\" : avg > 3.3 ?\
    \ \"A-\" : avg > 3.0 ? \"B+\" : avg > 2.7 ? \"B\" : avg > 2.3 ? \"B-\" : avg >\
    \ 2.0 ? \"C+\" : avg > 1.7 ? \"C\" : avg > 1.3 ? \"C-\" : avg > 1.0 ? \"D+\" :\
    \ avg > 0.7 ? \"D\" : avg > 0.0 ? \"D-\" : \"E\").description\n        result.append(grade)\n\
    \        return result\n    }\n    \n    var count = 0\n    \n    for number in\
    \ highGrades {\n        let numberString = number.description\n        \n    \
    \    if number > avg {\n            count += 1\n        }\n        \n        result.append(numberString)\n\
    \    }\n    \n    if count == 0 {\n        result.append(avg)\n    }\n    \n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6kfpnw49.swift:68:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        total += number\n                 ^\n\
    \                 Int(  )\n/tmp/tmp6kfpnw49.swift:73:12: error: binary operator\
    \ '<' cannot be applied to operands of type 'String' and 'Double'\n    if avg\
    \ < 4.0 {\n       ~~~ ^ ~~~\n/tmp/tmp6kfpnw49.swift:73:12: note: overloads for\
    \ '<' exist with these partially matching parameter lists: (String, String)\n\
    \    if avg < 4.0 {\n           ^\n/tmp/tmp6kfpnw49.swift:74:21: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n        let grade = (avg < 3.0\
    \ ? \"A+\" : avg > 3.7 ? \"A\" : avg > 3.3 ? \"A-\" : avg > 3.0 ? \"B+\" : avg\
    \ > 2.7 ? \"B\" : avg > 2.3 ? \"B-\" : avg > 2.0 ? \"C+\" : avg > 1.7 ? \"C\"\
    \ : avg > 1.3 ? \"C-\" : avg > 1.0 ? \"D+\" : avg > 0.7 ? \"D\" : avg > 0.0 ?\
    \ \"D-\" : \"E\").description\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6kfpnw49.swift:84:19: error: binary operator '>' cannot be applied to\
    \ operands of type 'Double' and 'String'\n        if number > avg {\n        \
    \   ~~~~~~ ^ ~~~\n"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var total =\
    \ 0.0\n    for grade in grades {\n        total += grade\n    }\n    var divisor\
    \ = pow(10.0, ceil(log10(total)) - 2)\n    var prevGrade = grades[0]\n    var\
    \ prevLetter = \"A\"\n    for grade in grades {\n        letterGrades.append(String())\n\
    \        var gradeString = String(grade / divisor)\n        if gradeString.count\
    \ > 1 {\n            gradeString = String(gradeString.dropLast())\n        }\n\
    \        if gradeString == \"1\" {\n            letterGrades[letterGrades.count-1]\
    \ = \"A+\"\n        } else if gradeString == \"0\" {\n            letterGrades[letterGrades.count-1]\
    \ = \"D-\"\n        } else {\n            if prevGrade >= grade {\n          \
    \      letterGrades[letterGrades.count-1] = String(prevLetter)\n            }\
    \ else {\n                if prevGrade < grade {\n                    if prevLetter\
    \ == \"A\" {\n                        letterGrades[letterGrades.count-1] = \"\
    A-\"\n                    } else {\n                        letterGrades[letterGrades.count-1]\
    \ = \"B+\"\n                    }\n                } else {\n                \
    \    letterGrades[letterGrades.count-1] = \"B\"\n                }\n         \
    \   }\n        }\n        prevGrade = grade\n        prevLetter = gradeString\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptv2dlqvl.swift:30:19: error: cannot find 'pow' in scope\n    var\
    \ divisor = pow(10.0, ceil(log10(total)) - 2)\n                  ^~~\n/tmp/tmptv2dlqvl.swift:30:29:\
    \ error: cannot find 'ceil' in scope\n    var divisor = pow(10.0, ceil(log10(total))\
    \ - 2)\n                            ^~~~\n/tmp/tmptv2dlqvl.swift:30:34: error:\
    \ cannot find 'log10' in scope\n    var divisor = pow(10.0, ceil(log10(total))\
    \ - 2)\n                                 ^~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var lettergrades = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = letterGrade(from: grade)\n        lettergrades.append(letterGrade)\n\
    \    }\n    return lettergrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiqtil83k.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(from: grade)\n\
    \                          ^\n/tmp/tmpiqtil83k.swift:27:13: note: 'letterGrade'\
    \ declared here\n        let letterGrade = letterGrade(from: grade)\n        \
    \    ^\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        default:\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6rts80ee/tmp6rts80ee.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3558adcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35587d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35587d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35587d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rts80ee                        0x000055feddf467a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b3558cc8460 __libc_start_main +
    245

    6    tmp6rts80ee                        0x000055feddf462c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    func findCeil(grade: Double) -> Double {\n    \
    \    if grade <= 0 {\n            return 0\n        }\n\n        let precision\
    \ = (grade*10).rounded(.up)/10\n        return round(precision)\n    }\n\n   \
    \ var letterGrades = [String]()\n    var gpa = grades.last!\n    var gpaCeil =\
    \ findCeil(gpa)\n\n    // We need to round the gpa since we might have an exact\
    \ GPA but wrong grades\n    for grade in grades {\n        let gradeCeil = findCeil(grade)\n\
    \        let letterGrade: String = letterGradeForGpa(gpa, gradeCeil, gpaCeil)\n\
    \        letterGrades.append(letterGrade)\n    }\n\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuyegkcw2.swift:31:16: error: cannot find 'round' in scope\n   \
    \     return round(precision)\n               ^~~~~\n/tmp/tmpuyegkcw2.swift:36:28:\
    \ error: missing argument label 'grade:' in call\n    var gpaCeil = findCeil(gpa)\n\
    \                           ^\n                           grade: \n/tmp/tmpuyegkcw2.swift:40:34:\
    \ error: missing argument label 'grade:' in call\n        let gradeCeil = findCeil(grade)\n\
    \                                 ^\n                                 grade: \n\
    /tmp/tmpuyegkcw2.swift:41:35: error: cannot find 'letterGradeForGpa' in scope\n\
    \        let letterGrade: String = letterGradeForGpa(gpa, gradeCeil, gpaCeil)\n\
    \                                  ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    func subroutine(grades: [Double], result:\
    \ [String], indexInt: Int) {\n        if indexInt >= grades.count {\n        \
    \    result.append(grades[indexInt])\n        }\n        \n        if grades[indexInt]\
    \ > 3.7 {\n            result.append(letterGrade(grades[indexInt]))\n        \
    \    subroutine(grades, result, indexInt+1)\n        }\n        \n    }\n    \n\
    \    func letterGrade(grade: Double) -> String {\n        if grade >= 3.0 {\n\
    \            return \"A+\"\n        }\n        \n        if grade >= 3.3 {\n \
    \           return \"A\"\n        }\n        \n        if grade >= 3.7 {\n   \
    \         return \"A-\"\n        }\n        \n        if grade >= 4.0 {\n    \
    \        return \"B+\"\n        }\n        \n        if grade >= 2.7 {\n     \
    \       return \"B\"\n        }\n        \n        if grade >= 2.3 {\n       \
    \     return \"B-\"\n        }\n        \n        if grade >= 2.0 {\n        \
    \    return \"C+\"\n        }\n        \n        if grade >= 1.7 {\n         \
    \   return \"C\"\n        }\n        \n        if grade >= 1.3 {\n           \
    \ return \"C-\"\n        }\n        \n        if grade >= 1.0 {\n            return\
    \ \"D+\"\n        }\n        \n        if grade >= 0.7 {\n            return \"\
    D\"\n        }\n        \n        if grade <= 0.0 {\n            return \"D-\"\
    \n        }\n        \n        return \"E\"\n    }\n    \n    subroutine(grades:\
    \ grades, result: [String](), indexInt: 0)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptbxlhq47.swift:28:20: error: no exact matches in call to instance\
    \ method 'append'\n            result.append(grades[indexInt])\n             \
    \      ^\n/tmp/tmptbxlhq47.swift:28:20: note: found candidate with type '(__owned\
    \ String) -> ()'\n            result.append(grades[indexInt])\n              \
    \     ^\n/tmp/tmptbxlhq47.swift:32:20: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n            result.append(letterGrade(grades[indexInt]))\n\
    \            ~~~~~~ ^\n/tmp/tmptbxlhq47.swift:32:39: error: missing argument label\
    \ 'grade:' in call\n            result.append(letterGrade(grades[indexInt]))\n\
    \                                      ^\n                                   \
    \   grade: \n/tmp/tmptbxlhq47.swift:33:23: error: missing argument labels 'grades:result:indexInt:'\
    \ in call\n            subroutine(grades, result, indexInt+1)\n              \
    \        ^\n                       grades: result: indexInt: \n/tmp/tmptbxlhq47.swift:91:12:\
    \ error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.count > 0 && (grades.last > 3.0 || grades.last\
    \ < 0.0 || grades.last == 0.0) {\n        print(\"ERROR, GRADES MUST BE RANGE\
    \ 0.0 TO 3.0 AND EXACTLY ONE PER GRADE\")\n        return []\n    }\n\n    var\
    \ letterGrades: [String] = []\n\n    if grades.count == 0 {\n        print(\"\
    ERROR, THERE ARE NO GRADES\")\n        return []\n    }\n\n    var highestGrade\
    \ = grades.last!\n\n    if highestGrade >= 4.0 {\n        letterGrades.append(\"\
    A+\")\n    }\n    if highestGrade > 3.7 && highestGrade < 4.0 {\n        letterGrades.append(\"\
    A\")\n    }\n    if highestGrade > 3.3 && highestGrade < 3.7 {\n        letterGrades.append(\"\
    A-\")\n    }\n    if highestGrade > 3.0 && highestGrade < 3.3 {\n        letterGrades.append(\"\
    B+\")\n    }\n    if highestGrade > 2.7 && highestGrade < 3.0 {\n        letterGrades.append(\"\
    B\")\n    }\n    if highestGrade > 2.3 && highestGrade < 2.7 {\n        letterGrades.append(\"\
    B-\")\n    }\n    if highestGrade > 2.0 && highestGrade < 2.3 {\n        letterGrades.append(\"\
    C+\")\n    }\n    if highestGrade > 1.7 && highestGrade < 2.0 {\n        letterGrades.append(\"\
    C\")\n    }\n    if highestGrade > 1.3 && highestGrade < 1.7 {\n        letterGrades.append(\"\
    C-\")\n    }\n    if highestGrade > 1.0 && highestGrade < 1.3 {\n        letterGrades.append(\"\
    D+\")\n    }\n    if highestGrade > 0.7 && highestGrade < 1.0 {\n        letterGrades.append(\"\
    D\")\n    }\n    if highestGrade > 0.0 {\n        letterGrades.append(\"D-\")\n\
    \    }\n    if highestGrade < 0.0 || highestGrade == 0.0 {\n        letterGrades.append(\"\
    E\")\n    }\n\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx3cldgye.swift:25:36: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n    if grades.count > 0 && (grades.last\
    \ > 3.0 || grades.last < 0.0 || grades.last == 0.0) {\n                      \
    \             ^\n/tmp/tmpx3cldgye.swift:25:36: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if grades.count > 0 &&\
    \ (grades.last > 3.0 || grades.last < 0.0 || grades.last == 0.0) {\n         \
    \                          ^\n                                        ?? <#default\
    \ value#>\n/tmp/tmpx3cldgye.swift:25:36: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    if grades.count > 0 && (grades.last\
    \ > 3.0 || grades.last < 0.0 || grades.last == 0.0) {\n                      \
    \             ^\n                                       !\n/tmp/tmpx3cldgye.swift:25:57:\
    \ error: value of optional type 'Double?' must be unwrapped to a value of type\
    \ 'Double'\n    if grades.count > 0 && (grades.last > 3.0 || grades.last < 0.0\
    \ || grades.last == 0.0) {\n                                                 \
    \       ^\n/tmp/tmpx3cldgye.swift:25:57: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if grades.count > 0 &&\
    \ (grades.last > 3.0 || grades.last < 0.0 || grades.last == 0.0) {\n         \
    \                                               ^\n                          \
    \                                   ?? <#default value#>\n/tmp/tmpx3cldgye.swift:25:57:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if grades.count > 0 && (grades.last > 3.0 || grades.last < 0.0 ||\
    \ grades.last == 0.0) {\n                                                    \
    \    ^\n                                                            !\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    var GPA:\
    \ Double = grades.reduce(0, combine: +) / Double(grades.count)\n    \n    let\
    \ letterGrades: [(Double, String)] = [\n        (4.0, \"A+\"),\n        (4.0,\
    \ \"A\"),\n        (3.7, \"A\"),\n        (3.3, \"A\"),\n        (3.0, \"B+\"\
    ),\n        (2.7, \"B\"),\n        (2.3, \"B\"),\n        (2.0, \"C+\"),\n   \
    \     (1.7, \"C\"),\n        (1.3, \"C\"),\n        (1.0, \"D+\"),\n        (0.7,\
    \ \"D\"),\n        (0.0, \"D\")\n    ]\n    \n    var next: Double = 4.0\n   \
    \ for x in grades {\n        if x >= next {\n            letter_grades.append(letterGrades.filter\
    \ { $0.0 == x }.map { $0.1 }[0])\n        } else {\n            letter_grades.append(letterGrades.filter\
    \ { $0.0 >= next }.map { $0.1 }[0])\n        }\n        next = x + 1.0\n    }\n\
    \    letter_grades.append(letterGrades.filter { $0.0 == GPA }.map { $0.1 }[0])\n\
    \    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpur0snymb.swift:26:36: error: extraneous argument label 'combine:'\
    \ in call\n    var GPA: Double = grades.reduce(0, combine: +) / Double(grades.count)\n\
    \                                   ^   ~~~~~~~~~\n                          \
    \             \n"
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    var tempGrade:\
    \ Double = 0.0\n    for gp in grades {\n        tempGrade = gp\n        \n   \
    \     // Grading algorithm\n        if tempGrade >= 4.0{\n            letterGrades.append(\"\
    A+\")\n        } else if (tempGrade > 3.7) {\n            letterGrades.append(\"\
    A\")\n        } else if (tempGrade > 3.3) {\n            letterGrades.append(\"\
    A\")\n        } else if (tempGrade > 3.0) {\n            letterGrades.append(\"\
    B+\")\n        } else if (tempGrade > 2.7) {\n            letterGrades.append(\"\
    B\")\n        } else if (tempGrade > 2.3) {\n            letterGrades.append(\"\
    B\")\n        } else if (tempGrade > 2.0) {\n            letterGrades.append(\"\
    C+\")\n        } else if (tempGrade > 1.7) {\n            letterGrades.append(\"\
    C\")\n        } else if (tempGrade > 1.3) {\n            letterGrades.append(\"\
    C\")\n        } else if (tempGrade > 1.0) {\n            letterGrades.append(\"\
    D+\")\n        } else if (tempGrade > 0.7) {\n            letterGrades.append(\"\
    D\")\n        } else if (tempGrade > 0.0) {\n            letterGrades.append(\"\
    D\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n  \
    \  }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpy5_19avn/tmpy5_19avn.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00a3c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00a3931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00a3931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00a39307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_19avn                        0x000055ca5cae07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00a3e26460 __libc_start_main +
    245

    6    tmpy5_19avn                        0x000055ca5cae02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = 0\n\
    \    var numGrade = 0\n    for grade in grades {\n        numGrade += 1\n    \
    \    if numGrade == 1 {\n            gpa = grade\n            continue\n     \
    \   }\n        if gpa < grade {\n            letterGrades.append(\"B\")\n    \
    \    }\n        if gpa <= grade && gpa >= grade - 0.5 {\n            letterGrades.append(\"\
    B-\")\n        }\n        if gpa > grade && gpa <= grade + 0.5 {\n           \
    \ letterGrades.append(\"B+\")\n        }\n        if gpa >= grade + 0.5 && gpa\
    \ < grade + 1.5 {\n            letterGrades.append(\"B\")\n        }\n       \
    \ if gpa >= grade + 1.5 {\n            letterGrades.append(\"B-\")\n        }\n\
    \        if gpa >= grade - 1.5 {\n            letterGrades.append(\"C+\")\n  \
    \      }\n        if gpa >= grade {\n            letterGrades.append(\"C\")\n\
    \        }\n        if gpa > grade {\n            letterGrades.append(\"C-\")\n\
    \        }\n        if gpa > grade - 0.5 {\n            letterGrades.append(\"\
    C\")\n        }\n        if gpa > grade + 0.5 {\n            letterGrades.append(\"\
    C+\")\n        }\n        if gpa >= grade - 0.5 {\n            letterGrades.append(\"\
    D+\")\n        }\n        if gpa >= grade + 0.5 {\n            letterGrades.append(\"\
    D\")\n        }\n        if gpa > grade - 1.5 {\n            letterGrades.append(\"\
    D-\")\n        }\n        if gpa > grade + 1.5 {\n            letterGrades.append(\"\
    D+\")\n        }\n        if gpa >= grade + 1.5 {\n            letterGrades.append(\"\
    E\")\n        }\n        gpa = grade\n        numGrade = 1\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeumpnin5.swift:31:19: error: cannot assign value of type 'Double'\
    \ to type 'Int'\n            gpa = grade\n                  ^~~~~\n          \
    \        Int( )\n/tmp/tmpeumpnin5.swift:34:16: error: binary operator '<' cannot\
    \ be applied to operands of type 'Int' and 'Double'\n        if gpa < grade {\n\
    \           ~~~ ^ ~~~~~\n/tmp/tmpeumpnin5.swift:34:16: note: overloads for '<'\
    \ exist with these partially matching parameter lists: (Int, Int)\n        if\
    \ gpa < grade {\n               ^\n/tmp/tmpeumpnin5.swift:37:19: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n        if gpa\
    \ <= grade && gpa >= grade - 0.5 {\n                  ^\n                  Int(\
    \ )\n/tmp/tmpeumpnin5.swift:37:41: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        if gpa <= grade && gpa >= grade - 0.5\
    \ {\n                                        ^\n                             \
    \     Int(       )\n/tmp/tmpeumpnin5.swift:40:18: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n        if gpa > grade &&\
    \ gpa <= grade + 0.5 {\n                 ^\n                 Int( )\n/tmp/tmpeumpnin5.swift:40:40:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        if gpa > grade && gpa <= grade + 0.5 {\n                            \
    \           ^\n                                 Int(       )\n/tmp/tmpeumpnin5.swift:43:25:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        if gpa >= grade + 0.5 && gpa < grade + 1.5 {\n                      \
    \  ^\n                  Int(       )\n/tmp/tmpeumpnin5.swift:43:46: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n        if gpa\
    \ >= grade + 0.5 && gpa < grade + 1.5 {\n                                    \
    \         ^\n                                       Int(       )\n/tmp/tmpeumpnin5.swift:46:16:\
    \ error: binary operator '>=' cannot be applied to operands of type 'Int' and\
    \ 'Double'\n        if gpa >= grade + 1.5 {\n           ~~~ ^  ~~~~~~~~~~~\n/tmp/tmpeumpnin5.swift:46:16: "
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    var sumOfGrades\
    \ = 0.0\n    for gp in grades {\n        sumOfGrades += gp\n    }\n    let totalGrade\
    \ = 4.0\n    if sumOfGrades > totalGrade {\n        for gp in grades {\n     \
    \       if gp == totalGrade {\n                letterGrades.append(\"E\")\n  \
    \          } else {\n                let deltaGrade = sumOfGrades - totalGrade\n\
    \                let delta = deltaGrade / totalGrade * 100\n                let\
    \ percent = delta / 100\n                let letterGrade = GPAStringToLetter(percent)\n\
    \                letterGrades.append(letterGrade)\n            }\n        }\n\
    \    } else if sumOfGrades < totalGrade {\n        for gp in grades {\n      \
    \      if gp == totalGrade {\n                letterGrades.append(\"D\")\n   \
    \         } else {\n                let deltaGrade = totalGrade - sumOfGrades\n\
    \                let delta = deltaGrade / totalGrade * 100\n                let\
    \ percent = delta / 100\n                let letterGrade = GPAStringToLetter(percent)\n\
    \                letterGrades.append(letterGrade)\n            }\n        }\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbyd5oj1q.swift:39:35: error: cannot find 'GPAStringToLetter' in\
    \ scope\n                let letterGrade = GPAStringToLetter(percent)\n      \
    \                            ^~~~~~~~~~~~~~~~~\n/tmp/tmpbyd5oj1q.swift:51:35:\
    \ error: cannot find 'GPAStringToLetter' in scope\n                let letterGrade\
    \ = GPAStringToLetter(percent)\n                                  ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let letterGrade = grades.map({ String($0) }).joined(separator:\
    \ \"\")\n    var result = [String]()\n    \n    for i in stride(from: grades.count,\
    \ to: 0, by: -1) {\n        let currentGrade = String(grades[i])\n        \n \
    \       if currentGrade == \"0.0\" {\n            result.append(letterGrade)\n\
    \            break\n        }\n        \n        let firstLetter = letterGrade.characters.first\n\
    \        let secondLetter = letterGrade.characters.last!\n        \n        let\
    \ letter = currentGrade.hasPrefix(firstLetter) ? firstLetter : secondLetter\n\
    \        \n        result.append(letter)\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdhytdfer.swift:36:39: error: 'characters' is unavailable: Please\
    \ use String directly\n        let firstLetter = letterGrade.characters.first\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdhytdfer.swift:37:40: error: 'characters' is unavailable:\
    \ Please use String directly\n        let secondLetter = letterGrade.characters.last!\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdhytdfer.swift:39:45: error: cannot convert value of\
    \ type 'String.Element?' (aka 'Optional<Character>') to expected argument type\
    \ 'String'\n        let letter = currentGrade.hasPrefix(firstLetter) ? firstLetter\
    \ : secondLetter\n                                            ^\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: Write code here\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpo4t9wvf8/tmpo4t9wvf8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b66edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b63e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b63e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b63e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4t9wvf8                        0x000055f8c919c5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ac0b68d9460 __libc_start_main +
    245

    6    tmpo4t9wvf8                        0x000055f8c919c109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    func letterGrade(grade\
    \ : Double) -> String {\n        switch grade {\n        case 4.0:\n         \
    \   return \"A+\"\n        case 3.7:\n            return \"A\"\n        case 3.3:\n\
    \            return \"A-\"\n        case 3.0:\n            return \"B+\"\n   \
    \     case 2.7:\n            return \"B\"\n        case 2.3:\n            return\
    \ \"B-\"\n        case 2.0:\n            return \"C+\"\n        case 1.7:\n  \
    \          return \"C\"\n        case 1.3:\n            return \"C-\"\n      \
    \  case 1.0:\n            return \"D+\"\n        case 0.7:\n            return\
    \ \"D\"\n        case 0.0:\n            return \"D-\"\n        default:\n    \
    \        return \"E\"\n        }\n    }\n\n    for grade in grades {\n       \
    \ letterGrades.append(letterGrade(grade))\n    }\n\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnpk9ktle.swift:59:41: error: missing argument label 'grade:' in\
    \ call\n        letterGrades.append(letterGrade(grade))\n                    \
    \                    ^\n                                        grade: \n"
  stdout: ''
  timestamp: 1660014969
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters: [String] = []\n    for i in grades\
    \ {\n        let temp: Double = abs(i)\n        if temp < 3.0 {\n            gradeLetters.append(\"\
    A+\")\n        } else if temp <= 3.7 {\n            gradeLetters.append(\"A\"\
    )\n        } else if temp <= 4.0 {\n            gradeLetters.append(\"B+\")\n\
    \        } else if temp <= 4.3 {\n            gradeLetters.append(\"B\")\n   \
    \     } else if temp <= 4.6 {\n            gradeLetters.append(\"B-\")\n     \
    \   } else if temp <= 4.9 {\n            gradeLetters.append(\"C+\")\n       \
    \ } else if temp <= 5.3 {\n            gradeLetters.append(\"C\")\n        } else\
    \ if temp <= 5.6 {\n            gradeLetters.append(\"C-\")\n        } else if\
    \ temp <= 5.9 {\n            gradeLetters.append(\"D+\")\n        } else if temp\
    \ <= 6.2 {\n            gradeLetters.append(\"D\")\n        } else if temp <=\
    \ 6.5 {\n            gradeLetters.append(\"D-\")\n        } else {\n         \
    \   gradeLetters.append(\"E\")\n        }\n    }\n    return gradeLetters\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpistsq3uv/tmpistsq3uv.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9bc1b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9bbeadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9bbead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9bbeac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpistsq3uv                        0x00005578729cb896 <unavailable> + 6294

    5    libc.so.6                          0x00002ad9bc3a2460 __libc_start_main +
    245

    6    tmpistsq3uv                        0x00005578729cb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeCounts = [String: Int]()\n    for grade\
    \ in grades {\n        if gradeCounts[grade] != nil {\n            gradeCounts[grade]\
    \ += 1\n        } else {\n            gradeCounts[grade] = 1\n        }\n    }\n\
    \    var gradeLetters = [String]()\n    for (_, count) in gradeCounts {\n    \
    \    if count > 0 {\n            gradeLetters.append(String(count) * \"A\")\n\
    \        }\n    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyl6cxagy.swift:27:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'String'\n        if gradeCounts[grade] != nil {\n\
    \                       ^\n/tmp/tmpyl6cxagy.swift:28:25: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n            gradeCounts[grade]\
    \ += 1\n                        ^\n/tmp/tmpyl6cxagy.swift:28:24: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \     gradeCounts[grade] += 1\n                       ^\n/tmp/tmpyl6cxagy.swift:28:24:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            gradeCounts[grade] += 1\n                       ^\n     \
    \                         !\n/tmp/tmpyl6cxagy.swift:30:25: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n            gradeCounts[grade]\
    \ = 1\n                        ^\n/tmp/tmpyl6cxagy.swift:36:47: error: binary\
    \ operator '*' cannot be applied to two 'String' operands\n            gradeLetters.append(String(count)\
    \ * \"A\")\n                                              ^\nSwift.FloatingPoint:1:17:\
    \ note: candidate requires that 'String' conform to 'FloatingPoint' (requirement\
    \ specified as 'Self' : 'FloatingPoint')\npublic protocol FloatingPoint : Hashable,\
    \ SignedNumeric, Strideable where Self == Self.Magnitude {\n                ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArr = [String]()\n    for i in grades\
    \ {\n        let result = letterGrade(grade: i)\n        gradesArr.append(result)\n\
    \    }\n    return gradesArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxlwbj6le.swift:27:22: error: cannot find 'letterGrade' in scope\n\
    \        let result = letterGrade(grade: i)\n                     ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014969
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.isEmpty() { return [] }\n    var grades_string\
    \ = \"\"\n    for grade in grades {\n        if grade < 2.0 || grade > 5.0 {\n\
    \            continue\n        }\n        if grade == 5.0 {\n            grades_string\
    \ = grades_string + \"D+\"\n        }\n        if grade == 4.0 {\n           \
    \ grades_string = grades_string + \"A+\"\n        }\n        if grade > 3.7 &&\
    \ grade < 4.0 {\n            grades_string = grades_string + \"A\"\n        }\n\
    \        if grade > 3.3 && grade < 3.7 {\n            grades_string = grades_string\
    \ + \"A-\"\n        }\n        if grade > 2.7 && grade < 3.3 {\n            grades_string\
    \ = grades_string + \"B\"\n        }\n        if grade > 2.3 && grade < 2.7 {\n\
    \            grades_string = grades_string + \"B-\"\n        }\n        if grade\
    \ > 1.7 && grade < 2.3 {\n            grades_string = grades_string + \"C\"\n\
    \        }\n        if grade > 1.3 && grade < 1.7 {\n            grades_string\
    \ = grades_string + \"C-\"\n        }\n        if grade > 1.0 {\n            grades_string\
    \ = grades_string + \"D\"\n        }\n        if grade > 0.7 {\n            grades_string\
    \ = grades_string + \"D-\"\n        }\n        if grade > 0.0 {\n            grades_string\
    \ = grades_string + \"E\"\n        }\n    }\n    return Array(grades_string[..<grades_string.count])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnhx3ihgo.swift:25:15: error: cannot call value of non-function\
    \ type 'Bool'\n    if grades.isEmpty() { return [] }\n              ^      ~~\n\
    \                     \n/tmp/tmpnhx3ihgo.swift:65:12: error: no exact matches\
    \ in call to initializer \n    return Array(grades_string[..<grades_string.count])\n\
    \           ^\nSwift.Array:3:23: note: candidate requires that the types 'String'\
    \ and 'String.Element' (aka 'Character') be equivalent (requirement specified\
    \ as 'Element' == 'S.Element')\n    @inlinable public init<S>(_ s: S) where Element\
    \ == S.Element, S : Sequence\n                      ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String' and 'String.Element' (aka 'Character')\
    \ be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n   \
    \ @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element ==\
    \ S.Element\n                      ^\nSwift.Array:2:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(arrayLiteral:)')\n    @inlinable public\
    \ init(arrayLiteral elements: Element...)\n                      ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grade_string = \"\"\n    var letter_grade =\
    \ \"\"\n    \n    for i in 0..<grades.count {\n        if grades[i] > 3.0 {\n\
    \            letter_grade = \"B+\"\n        }\n        else if grades[i] <= 3.0\
    \ && grades[i] >= 2.0 {\n            letter_grade = \"B-\"\n        }\n      \
    \  else if grades[i] <= 2.0 && grades[i] >= 1.0 {\n            letter_grade =\
    \ \"C+\"\n        }\n        else if grades[i] <= 1.0 && grades[i] >= 0.7 {\n\
    \            letter_grade = \"C\"\n        }\n        else if grades[i] <= 0.7\
    \ && grades[i] >= 0.0 {\n            letter_grade = \"C-\"\n        }\n      \
    \  else if grades[i] <= 0.0 && grades[i] >= -3.0 {\n            letter_grade =\
    \ \"D+\"\n        }\n        else if grades[i] <= -3.0 && grades[i] >= -1.7 {\n\
    \            letter_grade = \"D\"\n        }\n        else if grades[i] <= -1.7\
    \ && grades[i] >= -1.0 {\n            letter_grade = \"D-\"\n        }\n     \
    \   else if grades[i] <= -1.0 && grades[i] >= -2.0 {\n            letter_grade\
    \ = \"E\"\n        }\n        else if grades[i] <= -2.0 {\n            letter_grade\
    \ = \"E+\"\n        }\n        else {\n            letter_grade = \"A+\"\n   \
    \     }\n        \n        grade_string.append(letter_grade)\n    }\n    \n  \
    \  return grade_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiroyj9l0.swift:66:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grade_string\n         \
    \  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters: [String] = []\n    for grade\
    \ in grades {\n        var letter: String = \"\"\n        if grade > 2.0 {\n \
    \           letter = \"B\"\n        } else if grade > 1.7 {\n            letter\
    \ = \"C\"\n        } else if grade > 1.0 {\n            letter = \"C\"\n     \
    \   } else if grade > 0.7 {\n            letter = \"D\"\n        } else if grade\
    \ > 0.3 {\n            letter = \"D-\"\n        } else if grade > 0.0 {\n    \
    \        letter = \"D+\"\n        } else if grade > -1.0 {\n            letter\
    \ = \"E\"\n        } else {\n            letter = \"A\"\n        }\n        gradeLetters.append(letter)\n\
    \    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxpghknbw/tmpxpghknbw.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89f8b7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89f8874b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89f8874988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89f88737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpghknbw                        0x0000560cd0d467a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b89f8d69460 __libc_start_main +
    245

    6    tmpxpghknbw                        0x0000560cd0d462c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0.0)\
    \ { $0 + Double($1) }\n    let gpaDouble = gpa\n    let gpaRange = 5.0 / gpaDouble\n\
    \    for i in 0..<gpaDouble {\n        let tempGpa = gpa + gpaRange * i\n    \
    \    guard tempGpa > 0.0 && tempGpa < 5.0 else {\n            letterGrades.append(\"\
    E\")\n            break\n        }\n        let letter = letterGrades[i]\n   \
    \     let letterScore = letter != \"D\" ? letterGrades.count - 1 - i : 0\n   \
    \     let letterGrade = String(format: \"%.2f\", gpaRange * letterScore + tempGpa)\n\
    \        letterGrades.append(letterGrade)\n    }\n    return letterGrades\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwvcwuz8e.swift:29:15: error: protocol 'Sequence' requires that\
    \ 'Double' conform to 'SignedInteger'\n    for i in 0..<gpaDouble {\n        \
    \      ^\nSwift.Range:1:11: note: requirement from conditional conformance of\
    \ 'Range<Double>' to 'Sequence'\nextension Range : Sequence where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpwvcwuz8e.swift:29:15: error:\
    \ referencing instance method 'makeIterator()' on 'Range' requires that 'Double'\
    \ conform to 'SignedInteger'\n    for i in 0..<gpaDouble {\n              ^\n\
    Swift.Range:1:11: note: requirement from conditional conformance of 'Range<Double>'\
    \ to 'Collection'\nextension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0:\
    \ error: referencing instance method 'next()' on 'Range' requires that 'Double'\
    \ conform to 'SignedInteger'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<Double>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n/tmp/tmpwvcwuz8e.swift:37:50: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n        let\
    \ letterGrade = String(format: \"%.2f\", gpaRange * letterScore + tempGpa)\n \
    \                                                ^\n                         \
    \                        Int(    )\n/tmp/tmpwvcwuz8e.swift:37:59: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n        let\
    \ letterGrade = String(format: \"%.2f\", gpaRange * letterScore + tempGpa)\n \
    \                                                         ^\n                \
    \                                 Int(                  )\n/tmp/tmpwvcwuz8e.swift:37:27:\
    \ error: no exact matches in call to initializer \n        let letterGrade = String(format:\
    \ \"%.2f\", gpaRange * letterScore + tempGpa)\n                          ^\n/tmp/tmpwvcwuz8e.swift:37:27:\
    \ note: found candidate with type '(String, Int) -> String'\n  "
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gpa = grades.reduce(0.0) { $0 + $1; $1 / Float(grades.count)\
    \ }\n    let grades = gpa.map{$0 * 100 / gpa.max()}.map{$0 > 7.0 ? \"A+\" :\n\
    \        ($0 > 6.0 ? \"A-\" : $0 > 3.0 ? \"B-\" : $0 > 2.0 ? \"B-\" : $0 > 1.0\
    \ ? \"C-\" : $0 > 0.0 ? \"D-\" : \"E\") }\n    return grades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0r5ozio3.swift:25:48: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Float'\n    var gpa = grades.reduce(0.0) {\
    \ $0 + $1; $1 / Float(grades.count) }\n                                      \
    \      ~~ ^ ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0r5ozio3.swift:25:48: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Float, Float)\n    var gpa = grades.reduce(0.0) { $0 + $1; $1 / Float(grades.count)\
    \ }\n                                               ^\n/tmp/tmp0r5ozio3.swift:26:18:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let grades\
    \ = gpa.map{$0 * 100 / gpa.max()}.map{$0 > 7.0 ? \"A+\" :\n                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015051
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n\tlet letters = [\"A+\", \"A\", \"A-\", \"B+\", \"\
    B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n\tlet letterGrades\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]\n\tvar result = [String]()\n\
    \t\n\tfor i in 0..<letterGrades.count {\n\t\tlet result = 0.0;\n\t\tif letterGrades[i]\
    \ != 0 {\n\t\t\tfor j in 1..<letterGrades.count {\n\t\t\t\tif i != j {\n\t\t\t\
    \t\tresult += letterGrades[i]/letterGrades[j]\n\t\t\t\t}\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tresult = letterGrades[i]\n\t\t}\n\t\t\n\t\tif result > 3.0 { \n\t\t\
    \tresult = 3.0\n\t\t} else if result < -2.0 {\n\t\t\tresult = -2.0\n\t\t}\n\t\t\
    \n\t\tif result < -1.0 {\n\t\t\tresult = -1.0\n\t\t} else if result > 2.0 {\n\t\
    \t\tresult = 2.0\n\t\t}\n\t\t\n\t\tif result < -1.0 {\n\t\t\tresult = -1.0\n\t\
    \t} else if result > 1.0 {\n\t\t\tresult = 1.0\n\t\t}\n\t\t\n\t\tif result < -1.0\
    \ {\n\t\t\tresult = -1.0\n\t\t} else if result > 0.7 {\n\t\t\tresult = 0.7\n\t\
    \t}\n\t\t\n\t\tif result < -1.0 {\n\t\t\tresult = -1.0\n\t\t}\n\t\t\n\t\tif result\
    \ > 1.0 {\n\t\t\tresult = 1.0\n\t\t}\n\t\t\n\t\tif result < -1.0 {\n\t\t\tresult\
    \ = -1.0\n\t\t}\n\t\t\n\t\tif result > 0.0 {\n\t\t\tresult = 0.0\n\t\t}\n\t\t\n\
    \t\tif result != 0.0 {\n\t\t\tresult = \"\\(result)\"\n\t\t}\n\t\t\n\t\tresult.append(letters[i])\n\
    \t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcyl9rck.swift:34:13: error: left side of mutating operator isn't\
    \ mutable: 'result' is a 'let' constant\n                                    \
    \    result += letterGrades[i]/letterGrades[j]\n                             \
    \           ~~~~~~ ^\n/tmp/tmpbcyl9rck.swift:30:3: note: change 'let' to 'var'\
    \ to make it mutable\n                let result = 0.0;\n                ^~~\n\
    \                var\n/tmp/tmpbcyl9rck.swift:38:4: error: cannot assign to value:\
    \ 'result' is a 'let' constant\n                        result = letterGrades[i]\n\
    \                        ^~~~~~\n/tmp/tmpbcyl9rck.swift:30:3: note: change 'let'\
    \ to 'var' to make it mutable\n                let result = 0.0;\n           \
    \     ^~~\n                var\n/tmp/tmpbcyl9rck.swift:42:4: error: cannot assign\
    \ to value: 'result' is a 'let' constant\n                        result = 3.0\n\
    \                        ^~~~~~\n/tmp/tmpbcyl9rck.swift:30:3: note: change 'let'\
    \ to 'var' to make it mutable\n                let result = 0.0;\n           \
    \     ^~~\n                var\n/tmp/tmpbcyl9rck.swift:44:4: error: cannot assign\
    \ to value: 'result' is a 'let' constant\n                        result = -2.0\n\
    \                        ^~~~~~\n/tmp/tmpbcyl9rck.swift:30:3: note: change 'let'\
    \ to 'var' to make it mutable\n                let result = 0.0;\n           \
    \     ^~~\n                var\n/tmp/tmpbcyl9rck.swift:48:4: error: cannot assign\
    \ to value: 'result' is a 'let' constant\n                        result = -1.0\n\
    \                        ^~~~~~\n/tmp/tmpbcyl9rck.swift:30:3: note: change 'let'\
    \ to 'var' to make it mutable\n                let result = 0.0;\n           \
    \     ^~~\n                var\n/tmp/tmpbcyl9rck.swift:50:4: error: cannot assign\
    \ to value: 'result' is a 'let' constant\n                        result = 2.0\n\
    \                        ^~~~~~\n/tmp/tmpbcyl9rck.swift:30:3: note: change 'let'\
    \ to 'var' to make it mutable\n                let result = 0.0;\n           \
    \     ^~~\n                var\n/tmp/tmpbcyl9rck.swift:54:4: error: cannot assign\
    \ to value: 'result' is a 'let' constant\n                 "
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let minGrade = grades.min()\n    let maxGrade =\
    \ grades.max()\n    let min = minGrade - 0.5\n    let max = maxGrade + 0.5\n \
    \   var grades: [Double] = (0..<grades.count).map { Double(grades[$0]) }\n   \
    \ for i in 0..<grades.count {\n        grades[i] = ((grades[i] - min) / (max -\
    \ min)) * 100\n    }\n    return grades.map { letter in\n        if let idx =\
    \ grades.firstIndex(where: { $0 == letter }) {\n            return \"\\(letter)\"\
    \ + (idx < grades.count - 1 ? \"+\" : \"\")\n        } else {\n            return\
    \ \"\\(letter)\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy5iyfkrz.swift:27:15: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n    let min = minGrade - 0.5\n   \
    \           ^\n/tmp/tmpy5iyfkrz.swift:25:9: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n    let minGrade\
    \ = grades.min()\n        ^\n    guard                       else { return <#default\
    \ value#> }\n/tmp/tmpy5iyfkrz.swift:25:27: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    let minGrade = grades.min()\n\
    \                          ^\n                                ?? <#default value#>\n\
    /tmp/tmpy5iyfkrz.swift:25:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    let minGrade = grades.min()\n    \
    \                      ^\n                               !\n/tmp/tmpy5iyfkrz.swift:27:15:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let min = minGrade - 0.5\n              ^\n              (      \
    \  ?? <#default value#>)\n/tmp/tmpy5iyfkrz.swift:27:15: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    let min = minGrade\
    \ - 0.5\n              ^\n                      !\n/tmp/tmpy5iyfkrz.swift:28:15:\
    \ error: value of optional type 'Double?' must be unwrapped to a value of type\
    \ 'Double'\n    let max = maxGrade + 0.5\n              ^\n/tmp/tmpy5iyfkrz.swift:26:9:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n    let maxGrade = grades.max()\n        ^\n    guard\
    \                       else { return <#default value#> }\n/tmp/tmpy5iyfkrz.swift:26:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let maxGrade = grades.max()\n                          ^\n      \
    \                          ?? <#default value#>\n/tmp/tmpy5iyfkrz.swift:26:27:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let maxGrade = grades.max()\n                          ^\n      \
    \                 "
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    if grades.count\
    \ < 7 {\n        for grade in grades {\n            if grade < 3.0 {\n       \
    \         letterGrades.append(LetterGrade.A + \"\".random())\n            } else\
    \ if grade < 4.0 {\n                letterGrades.append(LetterGrade.A + \".\"\
    .random())\n            } else if grade < 3.7 {\n                letterGrades.append(LetterGrade.A\
    \ + \"\".random())\n            } else if grade < 3.0 {\n                letterGrades.append(LetterGrade.B\
    \ + \".\".random())\n            } else if grade < 2.7 {\n                letterGrades.append(LetterGrade.B\
    \ + \"\".random())\n            } else if grade < 2.3 {\n                letterGrades.append(LetterGrade.B\
    \ + \"\".random())\n            } else if grade < 2.0 {\n                letterGrades.append(LetterGrade.C\
    \ + \".\".random())\n            } else if grade < 1.7 {\n                letterGrades.append(LetterGrade.C\
    \ + \"\".random())\n            } else if grade < 1.3 {\n                letterGrades.append(LetterGrade.C\
    \ + \"\".random())\n            } else if grade < 1.0 {\n                letterGrades.append(LetterGrade.D\
    \ + \"\".random())\n            } else if grade < 0.7 {\n                letterGrades.append(LetterGrade.D\
    \ + \".\".random())\n            } else {\n                letterGrades.append(LetterGrade.D\
    \ + \"\".random())\n            }\n        }\n    } else {\n        for grade\
    \ in grades {\n            if grade < 3.0 {\n                letterGrades.append(LetterGrade.A\
    \ + \"\".random())\n            } else if grade < 4.0 {\n                letterGrades.append(LetterGrade.A\
    \ + \".\".random())\n            } else if grade < 3.7 {\n                letterGrades.append(LetterGrade.A\
    \ + \"\".random())\n            } else if grade < 3.0 {\n                letterGrades.append(LetterGrade.B\
    \ + \".\".random())\n            } else if grade < 2.7 {\n                letterGrades.append(LetterGrade.B\
    \ + \"\".random())\n            } else if grade < 2.3 {\n                letterGrades.append(LetterGrade.B\
    \ + \"\".random())\n            } else if grade < 2.0 {\n                letterGrades.append(LetterGrade.C\
    \ + \".\".random())\n            } else if grade < 1.7 {\n                letterGrades.append(LetterGrade.C\
    \ + \"\".random())\n            } else if grade < 1.3 {\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqowa3cl.swift:94:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmptqowa3cl.swift:55:29:\
    \ note: to match this opening '{'\n        for grade in grades {\n           \
    \                 ^\n/tmp/tmptqowa3cl.swift:94:66: error: expected '}' at end\
    \ of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"\
    E\", \"D-\"])\n                                                              \
    \   ^\n/tmp/tmptqowa3cl.swift:54:12: note: to match this opening '{'\n    } else\
    \ {\n           ^\n/tmp/tmptqowa3cl.swift:94:66: error: expected '}' at end of\
    \ brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\"\
    , \"D-\"])\n                                                                 ^\n\
    /tmp/tmptqowa3cl.swift:24:59: note: to match this opening '{'\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n                                                  \
    \        ^\n/tmp/tmptqowa3cl.swift:29:37: error: cannot find 'LetterGrade' in\
    \ scope\n                letterGrades.append(LetterGrade.A + \"\".random())\n\
    \                                    ^~~~~~~~~~~\n/tmp/tmptqowa3cl.swift:29:56:\
    \ error: value of type 'String' has no member 'random'\n                letterGrades.append(LetterGrade.A\
    \ + \"\".random())\n                                                    ~~ ^~~~~~\n\
    /tmp/tmptqowa3cl.swift:31:37: error: cannot find 'LetterGrade' in scope\n    \
    \            letterGrades.append(LetterGrade.A + \".\".random())\n           \
    \                         ^~~~~~~~~~~\n/tmp/tmptqowa3cl.swift:31:57: error: value\
    \ of type 'String' has no member 'random'\n                letterGrades.append(LetterGrade.A\
    \ + \".\".random())\n                                                    ~~~ ^~~~~~\n\
    /tmp/tmptqowa3cl.swift:33:37: error: cannot find 'LetterGrade' in scope\n    \
    \            letterGrades.append(LetterGrade.A + \"\".random())\n            \
    \                        ^~~~~~~~~~~\n/tmp/tmptqowa3cl.swift:33:56: error: value\
    \ of type "
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades: [String] = []\n    var letterGrade\
    \ = \"\"\n    for grade in grades {\n        var tempGrade = grade\n        if\
    \ tempGrade <= 4.0 {\n            tempGrade = 4.0\n        } else if tempGrade\
    \ > 3.7 {\n            tempGrade = 3.7\n        }\n        letterGrade = \"A+\"\
    \ + (tempGrade - 4.0).truncatingRemainder(dividingBy: 4).map(String.init).joined(separator:\
    \ \"\")\n        grades.append(letterGrade)\n    }\n    return grades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlz9f3kl.swift:29:22: error: binary operator '<=' cannot be applied\
    \ to operands of type 'String' and 'Double'\n        if tempGrade <= 4.0 {\n \
    \          ~~~~~~~~~ ^  ~~~\n/tmp/tmpvlz9f3kl.swift:30:25: error: cannot assign\
    \ value of type 'Double' to type 'String'\n            tempGrade = 4.0\n     \
    \                   ^~~\n/tmp/tmpvlz9f3kl.swift:31:29: error: binary operator\
    \ '>' cannot be applied to operands of type 'String' and 'Double'\n        } else\
    \ if tempGrade > 3.7 {\n                  ~~~~~~~~~ ^ ~~~\n/tmp/tmpvlz9f3kl.swift:32:25:\
    \ error: cannot assign value of type 'Double' to type 'String'\n            tempGrade\
    \ = 3.7\n                        ^~~\n/tmp/tmpvlz9f3kl.swift:34:31: error: cannot\
    \ convert value of type 'String' to expected argument type 'Double'\n        letterGrade\
    \ = \"A+\" + (tempGrade - 4.0).truncatingRemainder(dividingBy: 4).map(String.init).joined(separator:\
    \ \"\")\n                              ^\n/tmp/tmpvlz9f3kl.swift:34:83: error:\
    \ value of type 'Double' has no member 'map'\n        letterGrade = \"A+\" + (tempGrade\
    \ - 4.0).truncatingRemainder(dividingBy: 4).map(String.init).joined(separator:\
    \ \"\")\n                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let result = grades.compactMap { Double($0) }.sorted()\n\
    \    let firstLetter = result.first - 4.0\n    let lastLetter = result.last +\
    \ 1.0\n    let gradeRange = lastLetter > firstLetter ? lastLetter : firstLetter\n\
    \    let gradeRangeString = String(gradeRange)\n    let gradeRangeWithZeros =\
    \ String(gradeRange).padding(withLength: 3, withPad: 0)\n    let letterGrades\
    \ = (0..<result.count).map { i in\n        guard let index = i % gradeRange,\n\
    \              index > gradeRange,\n              index > gradeRangeWithZeros\
    \ else {\n            return String(result[i])\n        }\n        return String(result[i]\
    \ + gradeRangeString.suffix(1))\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpubezh_ft.swift:26:30: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n    let firstLetter = result.first\
    \ - 4.0\n                             ^\n/tmp/tmpubezh_ft.swift:26:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ let firstLetter = result.first - 4.0\n                             ^\n     \
    \                 (            ?? <#default value#>)\n/tmp/tmpubezh_ft.swift:26:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let firstLetter = result.first - 4.0\n                          \
    \   ^\n                                  !\n/tmp/tmpubezh_ft.swift:27:29: error:\
    \ value of optional type 'Double?' must be unwrapped to a value of type 'Double'\n\
    \    let lastLetter = result.last + 1.0\n                            ^\n/tmp/tmpubezh_ft.swift:27:29:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let lastLetter = result.last + 1.0\n                            ^\n\
    \                     (           ?? <#default value#>)\n/tmp/tmpubezh_ft.swift:27:29:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let lastLetter = result.last + 1.0\n                            ^\n\
    \                                !\n/tmp/tmpubezh_ft.swift:30:50: error: reference\
    \ to member 'padding' cannot be resolved without a contextual type\n    let gradeRangeWithZeros\
    \ = String(gradeRange).padding(withLength: 3, withPad: 0)\n                  \
    \                               ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    // TODO: Create a String Array called gradeStrings\
    \ using this function\n    // (Hint: Remember that this function should take an\
    \ Array of Doubles\n    // and return an Array of Strings)\n    let gradeStrings\
    \ = grades.map { letter in\n        \n        // TODO: Rewrite this function using\
    \ Swift 2.3's map function\n        // Hint: This function should take a single\
    \ Double as an argument\n        // and return a String that represents this Double\
    \ in Letter Grade \n        // notation\n        if let letterGrade = letterGrade(grade:\
    \ letter) {\n            return letterGrade\n        } else {\n            return\
    \ \"E\"\n        }\n    }\n    \n    // TODO: Rewrite this function using Swift\
    \ 2.3's map function\n    // Hint: This function should take an Array of Strings\
    \ as an argument\n    // and return an Array of Strings\n    return gradeStrings.map\
    \ { $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdpte941w.swift:35:30: error: cannot find 'letterGrade' in scope\n\
    \        if let letterGrade = letterGrade(grade: letter) {\n                 \
    \            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    // Create an empty array of strings\n   \
    \ var letterGrades = [String]()\n    \n    // Iterate over every index\n    for\
    \ i in 0..<grades.count {\n        \n        // Calculate the letter grade using\
    \ the formula\n        let letterGrade = calculateLetterGrade(grades[i])\n   \
    \     \n        // Add it to our array\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    // Return it\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkv5v6vt3.swift:33:27: error: cannot find 'calculateLetterGrade'\
    \ in scope\n        let letterGrade = calculateLetterGrade(grades[i])\n      \
    \                    ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp108uguym/tmp108uguym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6906c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6903bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6903bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6903bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp108uguym                        0x000055c853ce65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba6908b2460 __libc_start_main +
    245

    6    tmp108uguym                        0x000055c853ce6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetterArray: [String] = []\n    var sum:\
    \ Double = 0\n\n    for grade in grades {\n        sum += grade\n    }\n\n   \
    \ gradeLetterArray.append(\"\")\n\n    let gradeArray: [Double] = Array(grades)\n\
    \    var previousGrade: Double = -1\n\n    for grade in gradeArray {\n       \
    \ if grade != previousGrade {\n            gradeLetterArray[gradeArray.index(grade)]\
    \ = \"D-\"\n        }\n\n        previousGrade = grade\n    }\n\n    gradeLetterArray[gradeArray.index(grades.last!)]\
    \ = \"D+\"\n\n    return gradeLetterArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1b07niou.swift:39:41: error: value of optional type 'Array<Double>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Double>.Index'\
    \ (aka 'Int')\n            gradeLetterArray[gradeArray.index(grade)] = \"D-\"\n\
    \                                        ^\n/tmp/tmp1b07niou.swift:39:41: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            gradeLetterArray[gradeArray.index(grade)] = \"D-\"\n            \
    \                            ^\n                                             \
    \        ?? <#default value#>\n/tmp/tmp1b07niou.swift:39:41: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    gradeLetterArray[gradeArray.index(grade)] = \"D-\"\n                    \
    \                    ^\n                                                    !\n\
    /tmp/tmp1b07niou.swift:39:47: error: missing argument label 'of:' in call\n  \
    \          gradeLetterArray[gradeArray.index(grade)] = \"D-\"\n              \
    \                                ^\n                                         \
    \     of: \n/tmp/tmp1b07niou.swift:45:33: error: value of optional type 'Array<Double>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Double>.Index'\
    \ (aka 'Int')\n    gradeLetterArray[gradeArray.index(grades.last!)] = \"D+\"\n\
    \                                ^\n/tmp/tmp1b07niou.swift:45:33: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ gradeLetterArray[gradeArray.index(grades.last!)] = \"D+\"\n                \
    \                ^\n                                                    ?? <#default\
    \ value#>\n/tmp/tmp1b07niou.swift:45:33: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    gradeLetterArray[gradeArray.index(grades.last!)]\
    \ = \"D+\"\n                                ^\n                              \
    \                     !\n/tmp/tmp1b07niou.swift:45:39: error: missing argument\
    \ label 'of:' in call\n    gradeLetterArray[gradeArray.index(grades.last!)] =\
    \ \"D+\"\n                     "
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for i in\
    \ 0..<grades.count {\n        if grades[i] >= 3.0 {\n            letter_grades.append(\"\
    A+\")\n            grades[i] -= 3.0\n        } else if grades[i] >= 2.0 {\n  \
    \          letter_grades.append(\"B+\")\n            grades[i] -= 2.0\n      \
    \  } else if grades[i] >= 1.0 {\n            letter_grades.append(\"C+\")\n  \
    \          grades[i] -= 1.0\n        } else if grades[i] >= 0.7 && grades[i] <\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n            grades[i] -= 0.7\n\
    \        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letter_grades.append(\"\
    D-\")\n            grades[i] -= 0.0\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz0t_cukb.swift:29:23: error: left side of mutating operator isn't\
    \ mutable: 'grades' is a 'let' constant\n            grades[i] -= 3.0\n      \
    \      ~~~~~~    ^\n/tmp/tmpz0t_cukb.swift:32:23: error: left side of mutating\
    \ operator isn't mutable: 'grades' is a 'let' constant\n            grades[i]\
    \ -= 2.0\n            ~~~~~~    ^\n/tmp/tmpz0t_cukb.swift:35:23: error: left side\
    \ of mutating operator isn't mutable: 'grades' is a 'let' constant\n         \
    \   grades[i] -= 1.0\n            ~~~~~~    ^\n/tmp/tmpz0t_cukb.swift:38:23: error:\
    \ left side of mutating operator isn't mutable: 'grades' is a 'let' constant\n\
    \            grades[i] -= 0.7\n            ~~~~~~    ^\n/tmp/tmpz0t_cukb.swift:41:23:\
    \ error: left side of mutating operator isn't mutable: 'grades' is a 'let' constant\n\
    \            grades[i] -= 0.0\n            ~~~~~~    ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2q46o5co/tmp2q46o5co.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b453c021c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b453bd18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b453bd18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b453bd177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2q46o5co                        0x000056375593d5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b453c20d460 __libc_start_main +
    245

    6    tmp2q46o5co                        0x000056375593d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.isEmpty {\n        return [\"E\"]\n \
    \   }\n    var letterGrades: [String] = []\n    var sum: Double = 0\n    for grade\
    \ in grades {\n        sum += grade\n        letterGrades.append(String.init(\"\
    \\(grade)\" + \"\\(getLetterGrade(grade)))\")\n    }\n    if sum < 0 {\n     \
    \   letterGrades.removeLast()\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp58431tc6.swift:33:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmp58431tc6.swift:32:28: note: to match this opening '('\n\
    \        letterGrades.append(String.init(\"\\(grade)\" + \"\\(getLetterGrade(grade)))\"\
    )\n                           ^\n/tmp/tmp58431tc6.swift:32:57: error: cannot find\
    \ 'getLetterGrade' in scope\n        letterGrades.append(String.init(\"\\(grade)\"\
    \ + \"\\(getLetterGrade(grade)))\")\n                                        \
    \                ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    var gpa: Double\
    \ = grades[0]\n    \n    guard grades.count == 4 else { return letterGrades }\n\
    \    \n    for grade in grades {\n        switch grade {\n        case 3.0:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 3.7:\n            letterGrades.append(\"\
    A+\")\n        case 3.3:\n            letterGrades.append(\"A\")\n        case\
    \ 4.0:\n            letterGrades.append(\"A\")\n        default:\n           \
    \ letterGrades.append(\"E\")\n        }\n    }\n    \n    guard gpa > 0.0 else\
    \ {\n        return letterGrades\n    }\n    \n    if let lastLetter = letterGrades.last\
    \ {\n        if lastLetter == \"E\" {\n            return letterGrades\n     \
    \   }\n    }\n    \n    if let firstLetter = letterGrades.first {\n        if\
    \ firstLetter == \"E\" {\n            letterGrades.insert(\"E\", at: 0)\n    \
    \        return letterGrades\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8lc_2pho/tmp8lc_2pho.swift:94: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b625286bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6252562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6252562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62525617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lc_2pho                        0x000055a630d029f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b6252a57460 __libc_start_main +
    245

    6    tmp8lc_2pho                        0x000055a630d02519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { grade -> String in\n      \
    \  let letterGrade = grade > 4.0 ? \"A+\" : grade > 3.7 ? \"A\" : grade > 3.3\
    \ ? \"A-\" : grade > 3.0 ? \"B+\" : grade > 2.7 ? \"B\" : grade > 2.3 ? \"B-\"\
    \ : grade > 2.0 ? \"C+\" : grade > 1.7 ? \"C\" : grade > 1.3 ? \"C-\" : grade\
    \ > 1.0 ? \"D+\" : grade > 0.7 ? \"D\" : grade > 0.0 ? \"D-\" : \"E\"\n      \
    \  return letterGrade\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbmmto6ty/tmpbmmto6ty.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84334a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b843319fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b843319f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b843319e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmmto6ty                        0x00005579b4d16686 <unavailable> + 5766

    5    libc.so.6                          0x00002b8433694460 __libc_start_main +
    245

    6    tmpbmmto6ty                        0x00005579b4d161a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: write your code in Swift\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprtkwjrvh/tmprtkwjrvh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b347398cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3473683b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3473683988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34736827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtkwjrvh                        0x000055f2fec925e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b3473b78460 __libc_start_main +
    245

    6    tmprtkwjrvh                        0x000055f2fec92109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    // TODO: fill this out\n    \n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmps0ropl14/tmps0ropl14.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07cc192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07cbe89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07cbe89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07cbe887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0ropl14                        0x0000556cc22685e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b07cc37e460 __libc_start_main +
    245

    6    tmps0ropl14                        0x0000556cc2268109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: write your code here\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpsjj1hqi8.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    var i = grades.count\
    \ - 1\n    while i >= 0 {\n        guard let gpa = grades[i] else {\n        \
    \    return result\n        }\n        let resultGrade: String\n        if gpa\
    \ > 4.0 {\n            resultGrade = \"A+\"\n        } else if gpa > 3.7 {\n \
    \           resultGrade = \"A\"\n        } else if gpa > 3.3 {\n            resultGrade\
    \ = \"A-\"\n        } else if gpa > 3.0 {\n            resultGrade = \"B+\"\n\
    \        } else if gpa > 2.7 {\n            resultGrade = \"B\"\n        } else\
    \ if gpa > 2.3 {\n            resultGrade = \"B-\"\n        } else if gpa > 2.0\
    \ {\n            resultGrade = \"C+\"\n        } else if gpa > 1.7 {\n       \
    \     resultGrade = \"C\"\n        } else if gpa > 1.3 {\n            resultGrade\
    \ = \"C-\"\n        } else if gpa > 1.0 {\n            resultGrade = \"D+\"\n\
    \        } else if gpa > 0.7 {\n            resultGrade = \"D\"\n        } else\
    \ if gpa > 0.0 {\n            resultGrade = \"D-\"\n        } else {\n       \
    \     resultGrade = \"E\"\n        }\n        result.append(resultGrade)\n   \
    \     i--\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv1l2uzlj.swift:28:15: error: initializer for conditional binding\
    \ must have Optional type, not 'Double'\n        guard let gpa = grades[i] else\
    \ {\n              ^         ~~~~~~~~~\n/tmp/tmpv1l2uzlj.swift:60:10: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n        i--\n         ^~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    if grades.isEmpty\
    \ {\n        return letterGrades\n    }\n    let maxGrade = grades.max()\n   \
    \ guard maxGrade > 0.0 else {\n        return letterGrades\n    }\n    let average\
    \ = grades.reduce(0.0) { $0 + $1 }\n    let average = Double(average / Double(grades.count))\n\
    \    let grade = average\n    \n    if grade < 3.0 {\n        letterGrades.append(\"\
    A-\")\n    }\n    if grade < 3.3 {\n        letterGrades.append(\"A-\")\n    }\n\
    \    if grade < 3.7 {\n        letterGrades.append(\"A+\")\n    }\n    if grade\
    \ < 4.0 {\n        letterGrades.append(\"A+\")\n    }\n    if grade < 4.3 {\n\
    \        letterGrades.append(\"B+\")\n    }\n    if grade < 4.7 {\n        letterGrades.append(\"\
    B+\")\n    }\n    if grade < 5.0 {\n        letterGrades.append(\"B\")\n    }\n\
    \    if grade < 5.3 {\n        letterGrades.append(\"B\")\n    }\n    if grade\
    \ < 5.7 {\n        letterGrades.append(\"B-\")\n    }\n    if grade < 6.0 {\n\
    \        letterGrades.append(\"B-\")\n    }\n    if grade < 6.3 {\n        letterGrades.append(\"\
    C+\")\n    }\n    if grade < 6.7 {\n        letterGrades.append(\"C+\")\n    }\n\
    \    if grade < 7.0 {\n        letterGrades.append(\"C\")\n    }\n    if grade\
    \ < 7.3 {\n        letterGrades.append(\"C\")\n    }\n    if grade < 7.7 {\n \
    \       letterGrades.append(\"C-\")\n    }\n    if grade < 8.0 {\n        letterGrades.append(\"\
    C-\")\n    }\n    if grade < 8.3 {\n        letterGrades.append(\"D+\")\n    }\n\
    \    if grade < 8.7 {\n        letterGrades.append(\"D+\")\n    }\n    if grade\
    \ < 9.0 {\n        letterGrades.append(\"D\")\n    }\n    if grade < 9.3 {\n \
    \       letterGrades.append(\"D\")\n    }\n    if grade < 9.7 {\n        letterGrades.append(\"\
    D-\")\n    }\n    if grade < 10.0 {\n        letterGrades.append(\"D-\")\n   \
    \ }\n    if grade < 10.3 {\n        letterGrades.append(\"E\")\n    }\n    \n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl7196t__.swift:30:11: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n    guard maxGrade > 0.0 else {\n\
    \          ^\n/tmp/tmpl7196t__.swift:29:9: note: short-circuit using 'guard' to\
    \ exit this function early if the optional value contains 'nil'\n    let maxGrade\
    \ = grades.max()\n        ^\n    guard                       else { return <#default\
    \ value#> }\n/tmp/tmpl7196t__.swift:29:27: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    let maxGrade = grades.max()\n\
    \                          ^\n                                ?? <#default value#>\n\
    /tmp/tmpl7196t__.swift:29:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    let maxGrade = grades.max()\n    \
    \                      ^\n                               !\n/tmp/tmpl7196t__.swift:30:11:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    guard maxGrade > 0.0 else {\n          ^\n                   ?? <#default\
    \ value#>\n/tmp/tmpl7196t__.swift:30:11: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    guard maxGrade > 0.0 else\
    \ {\n          ^\n                  !\n/tmp/tmpl7196t__.swift:34:9: error: invalid\
    \ redeclaration of 'average'\n    let average = Double(average / Double(grades.count))\n\
    \        ^\n/tmp/tmpl7196t__.swift:33:9: note: 'average' previously declared here\n\
    \    let average = grades.reduce(0.0) { $0 + $1 }\n        ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letters = [String]()\n    var sum: Double =\
    \ 0.0\n    grades.forEach {\n        sum += $0\n    }\n    let maxGrade = grades.last!\n\
    \    var current = 0.0\n    var currentGrade = \"\"\n    for x in grades {\n \
    \       if x > max {\n            break\n        }\n        letters.append(\"\"\
    )\n        if x > sum {\n            letters.append(currentGrade)\n          \
    \  break\n        }\n        if x == maxGrade {\n            current = maxGrade\n\
    \            letters.append(currentGrade)\n            break\n        }\n    \
    \    current = x\n        currentGrade = String(current.truncatingRemainder(dividingBy:\
    \ max))\n    }\n    return letters.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6buq4quc.swift:34:16: error: generic parameter 'T' could not be\
    \ inferred\n        if x > max {\n               ^\nSwift.max:1:24: note: in call\
    \ to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n/tmp/tmp6buq4quc.swift:34:14: error:\
    \ binary operator '>' cannot be applied to operands of type 'Double' and '(_,\
    \ _) -> _'\n        if x > max {\n           ~ ^ ~~~\n/tmp/tmp6buq4quc.swift:48:71:\
    \ error: generic parameter 'T' could not be inferred\n        currentGrade = String(current.truncatingRemainder(dividingBy:\
    \ max))\n                                                                    \
    \  ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func\
    \ max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letters = [String]()\n    if grades.isEmpty\
    \ {\n        return letters\n    }\n    \n    let average = grades.reduce(0, combine:\
    \ +)\n    \n    let gradingRange = average/Double(grades.count)\n    let gradesAfter\
    \ = grades.filter {\n        grade -> Bool in\n        let percentGrade = Double(grade)\
    \ * gradingRange\n        return percentGrade < grade\n    }\n    \n    letters.append(gradesAfter.map\
    \ {\n        grade -> String in\n        \n        let letter = String(grade <\
    \ average/2 ? \"A-\" : grade < average/3 ? \"B-\" : grade < average/4 ? \"C-\"\
    \ : grade < average/5 ? \"D-\" : grade < average/6 ? \"D\" : grade < average/7\
    \ ? \"F\" : grade < average/8 ? \"F-\" : \"F\")\n        return letter\n    }.joined())\n\
    \    return letters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8ok17dsw.swift:30:32: error: extraneous argument label 'combine:'\
    \ in call\n    let average = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n"
  stdout: ''
  timestamp: 1660015023
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    guard grades.count > 0 else { return [] }\n\n \
    \   // Create array of ranges of grades (each with grade+1 and grade-1 values)\n\
    \    let ranges = [Range<Double>](repeating: grades.first .. grades.last - 1,\
    \ count: grades.count)\n    \n    // Sort ranges\n    let sortedRanges = ranges.sorted\
    \ { $0.offset < $1.offset }\n\n    // Initialize grade counter\n    var counter\
    \ = 0\n\n    // Return sorted letters from range\n    return sortedRanges.map\
    \ { letter in\n        guard letter <= grades.last else { return \"\" }\n    \
    \    guard letter >= grades.first else { return \"\" }\n        if counter < letter.toUInt16()\
    \ { return \"\" }\n        counter += 1\n        let grade = Double(letter.toUInt16())\n\
    \        \n        guard letter <= grades.last - 1 else { return \"\" }\n    \
    \    let prevLetter = Double(letter.toUInt16() - 1).toInt()\n        \n      \
    \  guard letter >= grades.first else { return \"\" }\n        let nextLetter =\
    \ Double(letter.toUInt16() + 1).toInt()\n\n        guard letter <= grades.last\
    \ - 2 else { return \"\" }\n        let prevNextLetter = Double(letter.toUInt16()\
    \ - 2).toInt()\n        \n        guard letter >= grades.first else { return \"\
    \" }\n        let nextNextLetter = Double(letter.toUInt16() + 2).toInt()\n\n \
    \       let gradeLetter = \"A+\" + (grade >= grades.first && grade < grades.last).description\
    \ ?? \"\"\n        let prevGradeLetter = grade >= grades.first && grade < grades.last\
    \ ? \"A-\" : (grade > prevLetter ? \"B+\" : grade == prevLetter ? \"B\" : grade\
    \ == prevLetter ? \"B-\" : \"\")\n        let nextGradeLetter = grade >= grades.first\
    \ && grade < grades.last ? \"A-\" : (grade > nextLetter ? \"B+\" : grade == nextLetter\
    \ ? \"B\" : grade == nextLetter ? \"B-\" : \"\")\n        let prevNextGradeLetter\
    \ = grade >= grades.first && grade < grades.last ? \"A-\" : (grade > prevNextLetter\
    \ ? \"B+\" : grade == prevNextLetter ? \"B\" : grade == prevNextLetter ? \"B-\"\
    \ : \"\")\n        let nextNextGradeLetter = grade >= grades.first && grade <\
    \ grades.last ? \"A-\" : (grade > nextNextLetter ? \"B+\" : grade == nextNextLetter\
    \ ? \"B\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsnl97otw.swift:60:148: error: unterminated string literal\n   \
    \     let nextNextGradeLetter = grade >= grades.first && grade < grades.last ?\
    \ \"A-\" : (grade > nextNextLetter ? \"B+\" : grade == nextNextLetter ? \"B\n\
    \                                                                            \
    \                                                                       ^\n/tmp/tmpsnl97otw.swift:81:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpsnl97otw.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpsnl97otw.swift:28:58:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    let ranges\
    \ = [Range<Double>](repeating: grades.first .. grades.last - 1, count: grades.count)\n\
    \                                                         ^~\n               \
    \                                          ...\n/tmp/tmpsnl97otw.swift:28:73:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Range<Double>'\n\
    \    let ranges = [Range<Double>](repeating: grades.first .. grades.last - 1,\
    \ count: grades.count)\n                                                     \
    \                   ^\n/tmp/tmpsnl97otw.swift:64:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return Array(zip(grades, letterGrades(grades))).filter\
    \ { (grade : Double, letter : String) -> Bool in\n        grade >= 0 && grade\
    \ <= 7\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmplmm_79gy.swift:25:30: error: cannot find 'letterGrades' in scope\n\
    \    return Array(zip(grades, letterGrades(grades))).filter { (grade : Double,\
    \ letter : String) -> Bool in\n                             ^~~~~~~~~~~~\n/tmp/tmplmm_79gy.swift:25:62:\
    \ error: contextual closure type '(String) throws -> Bool' expects 1 argument,\
    \ but 2 were used in closure body\n    return Array(zip(grades, letterGrades(grades))).filter\
    \ { (grade : Double, letter : String) -> Bool in\n                           \
    \                                  ^\n/tmp/tmplmm_79gy.swift:25:12: error: no\
    \ exact matches in call to initializer \n    return Array(zip(grades, letterGrades(grades))).filter\
    \ { (grade : Double, letter : String) -> Bool in\n           ^\n/tmp/tmplmm_79gy.swift:25:12:\
    \ note: found candidate with type '(Zip2Sequence<Array<Double>, _>) -> Array<String>'\n\
    \    return Array(zip(grades, letterGrades(grades))).filter { (grade : Double,\
    \ letter : String) -> Bool in\n           ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var accumulatedGrade\
    \ = grades.reduce(0, combine: +)\n    \n    if accumulatedGrade >= 4.0 {\n   \
    \     letterGrades.append(\"A+\")\n        accumulatedGrade -= 4.0\n    }\n  \
    \  \n    if accumulatedGrade > 3.0 && accumulatedGrade < 4.0 {\n        letterGrades.append(\"\
    A\")\n        accumulatedGrade -= 3.0\n    }\n    \n    if accumulatedGrade >\
    \ 3.0 && accumulatedGrade < 3.7 {\n        letterGrades.append(\"A-\")\n     \
    \   accumulatedGrade -= 3.3\n    }\n    \n    if accumulatedGrade > 3.0 && accumulatedGrade\
    \ < 3.3 {\n        letterGrades.append(\"B+\")\n        accumulatedGrade -= 2.7\n\
    \    }\n    \n    if accumulatedGrade > 2.7 && accumulatedGrade < 3.3 {\n    \
    \    letterGrades.append(\"B\")\n        accumulatedGrade -= 2.3\n    }\n    \n\
    \    if accumulatedGrade > 2.3 && accumulatedGrade < 2.7 {\n        letterGrades.append(\"\
    B-\")\n        accumulatedGrade -= 2.0\n    }\n    \n    if accumulatedGrade >\
    \ 2.0 && accumulatedGrade < 2.3 {\n        letterGrades.append(\"C+\")\n     \
    \   accumulatedGrade -= 1.7\n    }\n    \n    if accumulatedGrade > 1.7 && accumulatedGrade\
    \ < 2.0 {\n        letterGrades.append(\"C\")\n        accumulatedGrade -= 1.3\n\
    \    }\n    \n    if accumulatedGrade > 1.3 && accumulatedGrade < 1.7 {\n    \
    \    letterGrades.append(\"C-\")\n        accumulatedGrade -= 1.0\n    }\n   \
    \ \n    if accumulatedGrade > 1.0 {\n        letterGrades.append(\"D+\")\n   \
    \     accumulatedGrade -= 0.7\n    }\n    \n    if accumulatedGrade > 0.7 && accumulatedGrade\
    \ < 1.0 {\n        letterGrades.append(\"D\")\n        accumulatedGrade -= 0.0\n\
    \    }\n    \n    if accumulatedGrade < 0.0 && accumulatedGrade < 0.7 {\n    \
    \    letterGrades.append(\"D-\")\n    }\n    \n    if accumulatedGrade == 0.0\
    \ {\n        letterGrades.append(\"E\")\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsamxucqv.swift:26:41: error: extraneous argument label 'combine:'\
    \ in call\n    var accumulatedGrade = grades.reduce(0, combine: +)\n         \
    \                               ^   ~~~~~~~~~\n                              \
    \              \n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    \n    for\
    \ grade in grades {\n        letter_grades.append(calculateGrade(grade))\n   \
    \ }\n    \n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7axjwndd.swift:28:30: error: cannot find 'calculateGrade' in scope\n\
    \        letter_grades.append(calculateGrade(grade))\n                       \
    \      ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: replace this implementation with your\
    \ own\n    var letterGrades: [String] = []\n    if grades.first == 0.0 {\n   \
    \     letterGrades.append(\"E\")\n    } else {\n        if grades.first < 3.0\
    \ {\n            if grades.first <= 3.7 { \n                letterGrades.append(\"\
    A+\")\n            } else if grades.first <= 3.3 {\n                letterGrades.append(\"\
    A-\")\n            } else if grades.first <= 3.0 { \n                letterGrades.append(\"\
    B+\")\n            } else if grades.first <= 2.7 { \n                letterGrades.append(\"\
    B\")\n            } else if grades.first <= 2.3 { \n                letterGrades.append(\"\
    B-\")\n            } else if grades.first <= 2.0 { \n                letterGrades.append(\"\
    C+\")\n            } else if grades.first <= 1.7 { \n                letterGrades.append(\"\
    C\")\n            } else if grades.first <= 1.3 { \n                letterGrades.append(\"\
    C-\")\n            } else if grades.first <= 1.0 { \n                letterGrades.append(\"\
    D+\")\n            } else if grades.first <= 0.7 { \n                letterGrades.append(\"\
    D\")\n            } else { \n                letterGrades.append(\"D-\")\n   \
    \         }\n        } else if grades.first > 3.0 {\n            if grades.first\
    \ <= 3.7 { \n                letterGrades.append(\"A\")\n            } else if\
    \ grades.first <= 3.3 { \n                letterGrades.append(\"A-\")\n      \
    \      } else if grades.first <= 3.0 { \n                letterGrades.append(\"\
    B\")\n            } else if grades.first <= 2.7 { \n                letterGrades.append(\"\
    B-\")\n            } else if grades.first <= 2.3 { \n                letterGrades.append(\"\
    C\")\n            } else if grades.first <= 2.0 { \n                letterGrades.append(\"\
    C-\")\n            } else if grades.first <= 1.7 { \n                letterGrades.append(\"\
    D\")\n            } else if grades.first <= 1.3 { \n                letterGrades.append(\"\
    D-\")\n            } else if grades.first <= 1.0 { \n                letterGrades.append(\"\
    E\")\n            } else { \n                letterGrades.append(\"E-\")\n   \
    \         }\n        } else {\n            letterGrades.append(\"F\")\n      \
    \  }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt06jx9ni.swift:30:19: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n        if grades.first < 3.0 {\n\
    \                  ^\n/tmp/tmpt06jx9ni.swift:30:19: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        if grades.first\
    \ < 3.0 {\n                  ^\n                        ?? <#default value#>\n\
    /tmp/tmpt06jx9ni.swift:30:19: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if grades.first < 3.0 {\n    \
    \              ^\n                       !\n/tmp/tmpt06jx9ni.swift:31:23: error:\
    \ value of optional type 'Double?' must be unwrapped to a value of type 'Double'\n\
    \            if grades.first <= 3.7 { \n                      ^\n/tmp/tmpt06jx9ni.swift:31:23:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            if grades.first <= 3.7 { \n                      ^\n    \
    \                        ?? <#default value#>\n/tmp/tmpt06jx9ni.swift:31:23: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            if grades.first <= 3.7 { \n                      ^\n            \
    \               !\n/tmp/tmpt06jx9ni.swift:33:30: error: value of optional type\
    \ 'Double?' must be unwrapped to a value of type 'Double'\n            } else\
    \ if grades.first <= 3.3 {\n                             ^\n/tmp/tmpt06jx9ni.swift:33:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            } else if grades.first <= 3.3 {\n                       \
    \      ^\n                                   ?? <#default value#>\n/tmp/tmpt06jx9ni.swift:33:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            } else if grades.first <= 3.3 {\n                       \
    \      ^\n                                  !\n/tmp/tmpt06jx9ni.swift:35:30: error:\
    \ value of optional type 'Double?' must be unwrapped to a value of type 'Double'\n\
    \            } else if grades.first <= 3.0 { \n                             ^\n\
    /tmp/tmp"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for i in\
    \ 0 ..< grades.count {\n        let letterGrade = calculateLetterGrade(GPA: grades[i])\n\
    \        letter_grades.append(letterGrade)\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmplfwko8st.swift:27:27: error: cannot find 'calculateLetterGrade'\
    \ in scope\n        let letterGrade = calculateLetterGrade(GPA: grades[i])\n \
    \                         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.count < 2 {\n        return []\n    }\n\
    \    if grades.count > 10 {\n        return []\n    }\n    \n    var letterGrades:\
    \ [String] = []\n    for gpa: Double in grades {\n        letterGrades.append(gpaAsLetter[gpa])\n\
    \    }\n    letterGrades.sort()\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp68gnjjjj.swift:34:29: error: cannot find 'gpaAsLetter' in scope\n\
    \        letterGrades.append(gpaAsLetter[gpa])\n                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpui2coac0.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { grade in\n        let gpa =\
    \ grade\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if\
    \ gpa > 3.7 && gpa <= 4.0 {\n            return \"A\"\n        } else if gpa >\
    \ 3.3 && gpa <= 3.7 {\n            return \"A-\"\n        } else if gpa > 3.0\
    \ && gpa <= 3.3 {\n            return \"B+\"\n        } else if gpa > 2.7 && gpa\
    \ <= 3.0 {\n            return \"B\"\n        } else if gpa > 2.3 && gpa <= 2.7\
    \ {\n            return \"B-\"\n        } else if gpa > 2.0 && gpa <= 2.3 {\n\
    \            return \"C+\"\n        } else if gpa > 1.7 && gpa <= 2.0 {\n    \
    \        return \"C\"\n        } else if gpa > 1.3 && gpa <= 1.7 {\n         \
    \   return \"C-\"\n        } else if gpa > 1.0 && gpa <= 1.3 {\n            return\
    \ \"D+\"\n        } else if gpa > 0.7 && gpa <= 1.0 {\n            return \"D\"\
    \n        } else if gpa > 0.0 && gpa <= 0.7 {\n            return \"D-\"\n   \
    \     } else {\n            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrade = [String]()\n\n    for i in 0..<grades.count\
    \ {\n        switch grades[i] {\n        case 0...0.7:\n            letterGrade.append(\"\
    D+\")\n        case 0.7...1.3:\n            letterGrade.append(\"D\")\n      \
    \  case 1.3...2.7:\n            letterGrade.append(\"D-\")\n        case 2.7...3.3:\n\
    \            letterGrade.append(\"C-\")\n        case 3.3...4.0:\n           \
    \ letterGrade.append(\"C\")\n        case 4.0...4.7:\n            letterGrade.append(\"\
    B-\")\n        case 4.7...5.3:\n            letterGrade.append(\"B\")\n      \
    \  case 5.3...6.0:\n            letterGrade.append(\"A-\")\n        case 6.0...6.7:\n\
    \            letterGrade.append(\"A\")\n        case 6.7...7.3:\n            letterGrade.append(\"\
    A+\")\n        default:\n            letterGrade.append(\"E\")\n        }\n  \
    \  }\n    \n    return letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_qqrjnn0/tmp_qqrjnn0.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b648d16cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b648ce63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b648ce63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b648ce627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qqrjnn0                        0x0000559ec9eb8956 <unavailable> + 6486

    5    libc.so.6                          0x00002b648d358460 __libc_start_main +
    245

    6    tmp_qqrjnn0                        0x0000559ec9eb8479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ > 7 {\n        print(\"Too many grades.\")\n        return letterGrades\n  \
    \  }\n    \n    guard let min = grades.min() else {\n        print(\"All grades\
    \ need to be greater than zero.\")\n        return letterGrades\n    }\n    \n\
    \    guard let max = grades.max() {\n        print(\"All grades need to be less\
    \ than 1.0.\")\n        return letterGrades\n    }\n    \n    var gpa = grades.reduce(0,\
    \ { $0 + $1})\n    var gpaSum = gpa\n    \n    switch gpa < 1.0 {\n    case true:\
    \ break\n    case false: gpaSum += 1\n    }\n    \n    while gpa >= 1.0 {\n  \
    \      if gpa < 3.0 {\n            letterGrades.append(\"A+\")\n            break\n\
    \        }\n        if gpa < 3.7 {\n            letterGrades.append(\"A\")\n \
    \           break\n        }\n        if gpa < 4.0 {\n            letterGrades.append(\"\
    A-\")\n            break\n        }\n        if gpa < 4.3 {\n            letterGrades.append(\"\
    B+\")\n            break\n        }\n        if gpa < 4.6 {\n            letterGrades.append(\"\
    B\")\n            break\n        }\n        if gpa < 4.9 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 5.0 {\n            letterGrades.append(\"\
    C+\")\n            break\n        }\n        if gpa < 5.3 {\n            letterGrades.append(\"\
    C\")\n            break\n        }\n        if gpa < 5.6 {\n            letterGrades.append(\"\
    C-\")\n            break\n        }\n        if gpa < 5.9 {\n            letterGrades.append(\"\
    D+\")\n            break\n        }\n        if gpa < 6.0 {\n            letterGrades.append(\"\
    D\")\n            break\n        }\n        if gpa < 6.3 {\n            letterGrades.append(\"\
    D-\")\n            break\n        }\n        if gpa < 6.6 {\n            letterGrades.append(\"\
    E\")\n            break\n        }\n        gpa -= 1.0\n    }\n    \n    while\
    \ gpaSum >= 1.0 {\n        if gpaSum < 3.0 {\n            letterGrades.append(\"\
    A+\")\n            break\n        }\n        if gpaSum < 3.7 {\n            letterGrades.append(\"\
    A\")\n            break\n        }\n        if gpaSum < 4.0 {\n            letterGrades.append(\"\
    A-\")\n            break\n        }\n        if gpaSum < 4.3 {\n            letterGrades.append(\"\
    B+\")\n            break\n        }\n        if gpaSum < 4.6 {\n            letterGra\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp61uq8st5.swift:37:34: error: expected 'else' after 'guard' condition\n\
    \    guard let max = grades.max() {\n                                 ^\n    \
    \                             else \n/tmp/tmp61uq8st5.swift:145:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmp61uq8st5.swift:106:25: note: to match this opening '{'\n\
    \    while gpaSum >= 1.0 {\n                        ^\n/tmp/tmp61uq8st5.swift:145:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmp61uq8st5.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmp61uq8st5.swift:124:13:\
    \ error: cannot find 'letterGra' in scope\n            letterGra\n           \
    \ ^~~~~~~~~\n/tmp/tmp61uq8st5.swift:128:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gpa = grades.map { $0 * 4.0 }\n    var letterGrades\
    \ = [String]()\n    \n    let grade = grades.map { $0 }\n    \n    let gradeZero\
    \ = grade[0]\n    let gpaZero = gpa[0]\n    \n    if gradeZero > gpaZero {\n \
    \       letterGrades.append(\"A+\")\n    }\n    else if gradeZero < gpaZero {\n\
    \        letterGrades.append(\"A-\")\n    }\n    else if gradeZero == gpaZero\
    \ {\n        letterGrades.append(\"A-\")\n    }\n    else if gradeZero > gpaZero\
    \ {\n        letterGrades.append(\"B+\")\n    }\n    else if gradeZero < gpaZero\
    \ {\n        letterGrades.append(\"B\")\n    }\n    else if gradeZero > gpaZero\
    \ {\n        letterGrades.append(\"B-\")\n    }\n    else if gradeZero < gpaZero\
    \ {\n        letterGrades.append(\"C+\")\n    }\n    else if gradeZero > gpaZero\
    \ {\n        letterGrades.append(\"C\")\n    }\n    else if gradeZero < gpaZero\
    \ {\n        letterGrades.append(\"C\")\n    }\n    else if gradeZero > gpaZero\
    \ {\n        letterGrades.append(\"D+\")\n    }\n    else if gradeZero < gpaZero\
    \ {\n        letterGrades.append(\"D\")\n    }\n    else if gradeZero < gpaZero\
    \ {\n        letterGrades.append(\"D-\")\n    }\n    else if gradeZero < gpaZero\
    \ {\n        letterGrades.append(\"E\")\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphaw2adrj/tmphaw2adrj.swift:89: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ef082bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ef0522b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ef0522988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ef05217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphaw2adrj                        0x0000560bf3e6f786 <unavailable> + 6022

    5    libc.so.6                          0x00002b7ef0a17460 __libc_start_main +
    245

    6    tmphaw2adrj                        0x0000560bf3e6f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let sum = grades.reduce(0, {$0 + $1})\n    let\
    \ average = sum / grades.count\n\n    let highToLow = grades.map {\n        if\
    \ average > 2.0 {\n            return \"A+\"\n        } else if average > 1.2\
    \ {\n            return \"A\"\n        } else if average > 0.8 {\n           \
    \ return \"A-\"\n        } else if average > 0.4 {\n            return \"B+\"\n\
    \        } else if average > 0.1 {\n            return \"B\"\n        } else if\
    \ average > 0.05 {\n            return \"B-\"\n        } else if average > 0.02\
    \ {\n            return \"C+\"\n        } else if average > 0.01 {\n         \
    \   return \"C\"\n        } else if average > 0.005 {\n            return \"C-\"\
    \n        } else if average > 0.002 {\n            return \"D+\"\n        } else\
    \ if average > 0.001 {\n            return \"D\"\n        } else if average >\
    \ 0.0005 {\n            return \"D-\"\n        } else {\n            return \"\
    E\"\n        }\n    }\n\n    return highToLow\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpui2j1pi8.swift:26:23: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    let average = sum / grades.count\n\
    \                  ~~~ ^ ~~~~~~~~~~~~\n/tmp/tmpui2j1pi8.swift:26:23: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    let average = sum / grades.count\n                      ^\n\
    /tmp/tmpui2j1pi8.swift:28:32: error: contextual type for closure argument list\
    \ expects 1 argument, which cannot be implicitly ignored\n    let highToLow =\
    \ grades.map {\n                               ^\n                           \
    \     _ in \n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  var gradeLetters: [String] = [] \n  var total: Double\
    \ = 0.0\n  \n  for grade in grades {\n    total += grade\n  }\n  \n  for grade\
    \ in grades {\n    gradeLetters.append(\"\\(grade)\") // add grade to gradeLetters\n\
    \  }\n  \n  for grade in grades {\n    // compare grade to total \n    if grade\
    \ > total {\n      // add A-\n      if grade > 3.0 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"A-\")\n      } else if grade > 2.7 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"B-\")\n      } else if grade > 2.3 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"B-\")\n      } else if grade > 2.0 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"B-\")\n      } else if grade > 1.7 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"C+\")\n      } else if grade > 1.3 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"C\")\n      } else if grade > 1.0 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"C-\")\n      } else if grade > 0.7 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"D+\")\n      } else if grade > 0.3 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"D\")\n      } else if grade > 0.0 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"D-\")\n      }\n    } else if grade < total {\n      // add B+ \n      if\
    \ grade > 3.0 {\n        gradeLetters.insert(gradeLetters.end, \"B+\")\n     \
    \ } else if grade > 2.7 {\n        gradeLetters.insert(gradeLetters.end, \"B\"\
    )\n      } else if grade > 2.3 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"B-\")\n      } else if grade > 2.0 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"B-\")\n      } else if grade > 1.7 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"C+\")\n      } else if grade > 1.3 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"C\")\n      } else if grade > 1.0 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"C-\")\n      } else if grade > 0.7 {\n        gradeLetters.insert(gradeLetters.end,\
    \ \"D+\")\n      } else if grade > 0.3 {\n        gradeLetters.insert(gradeLetters.\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2s3hov7v.swift:80:41: error: expected member name following '.'\n\
    \        gradeLetters.insert(gradeLetters.\n                                 \
    \       ^\n/tmp/tmp2s3hov7v.swift:81:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmp2s3hov7v.swift:80:28: note: to match this opening '('\n        gradeLetters.insert(gradeLetters.\n\
    \                           ^\n/tmp/tmp2s3hov7v.swift:101:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmp2s3hov7v.swift:61:29: note: to match this opening '{'\n\
    \    } else if grade < total {\n                            ^\n/tmp/tmp2s3hov7v.swift:101:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmp2s3hov7v.swift:36:23: note: to match this opening\
    \ '{'\n  for grade in grades {\n                      ^\n/tmp/tmp2s3hov7v.swift:101:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmp2s3hov7v.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmp2s3hov7v.swift:41:22:\
    \ error: no exact matches in call to instance method 'insert'\n        gradeLetters.insert(gradeLetters.end,\
    \ \"A-\")\n                     ^\n/tmp/tmp2s3hov7v.swift:41:22: note: found candidate\
    \ with type '(__owned String, Int) -> ()'\n        gradeLetters.insert(gradeLetters.end,\
    \ \"A-\")\n                     ^\n/tmp/tmp2s3hov7v.swift:41:42: error: value\
    \ of type '[String]' has no member 'end'\n        gradeLetters.insert(gradeLetters.end,\
    \ \"A-\")\n                            ~~~~~~~~~~~~ ^~~\n/tmp/tmp2s3hov7v.swift:43:22:\
    \ error: no exact matches in call to instance method 'insert'\n        gradeLetters.insert(gradeLetters.e"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        let gpa = grade * 4.0\n        let letterGrade = GPA[Int(gpa)]!\n\
    \        letter_grades.append(letterGrade)\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmrpuu1g2.swift:28:27: error: cannot find 'GPA' in scope\n     \
    \   let letterGrade = GPA[Int(gpa)]!\n                          ^~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let min_value = grades.min()!\n    let max_value\
    \ = grades.max()!\n    var letter_grades: [String] = []\n    let total_score =\
    \ grades.reduce(0, {$0 + $1})\n    var current_grade: Double = 0\n    for i in\
    \ 0...grades.count {\n        let percent = Double(i) / Double(grades.count) *\
    \ 100\n        let score = total_score - grades[i]\n        let grade = (percent\
    \ / 100) * max_value\n        if score < current_grade {\n            letter_grades.append(\"\
    \")\n        }\n        current_grade = score\n        switch percent {\n    \
    \    case 99...100:\n            letter_grades.append(\" \")\n        case 99...90:\n\
    \            letter_grades.append(\"A-\")\n        case 90...85:\n           \
    \ letter_grades.append(\"B-\")\n        case 85...90:\n            letter_grades.append(\"\
    B-\")\n        case 90...85:\n            letter_grades.append(\"B-\")\n     \
    \   case 85...90:\n            letter_grades.append(\"B-\")\n        case 90...85:\n\
    \            letter_grades.append(\"B-\")\n        case 85...90:\n           \
    \ letter_grades.append(\"B-\")\n        case 90...85:\n            letter_grades.append(\"\
    B-\")\n        case 85...90:\n            letter_grades.append(\"B-\")\n     \
    \   case 90...85:\n            letter_grades.append(\"B-\")\n        case 85...90:\n\
    \            letter_grades.append(\"B-\")\n        case 90...85:\n           \
    \ letter_grades.append(\"B-\")\n        case 85...90:\n            letter_grades.append(\"\
    B-\")\n        case 90...85:\n            letter_grades.append(\"B-\")\n     \
    \   case 85...90:\n            letter_grades.append(\"B-\")\n        case 90...85:\n\
    \            letter_grades.append(\"B-\")\n        case 85...90:\n           \
    \ letter_grades.append(\"B-\")\n        case 90...85:\n            letter_grades.append(\"\
    B-\")\n        case 85...90:\n            letter_grades.append(\"B-\")\n     \
    \   case 90...85:\n            letter_grades.append(\"B-\")\n        case 85...90:\n\
    \            letter_grades.append(\"B-\")\n        case 90...85:\n           \
    \ letter_grades.append(\"B-\")\n        case 85...90:\n            letter_grades.append(\"\
    B-\")\n        case 90...85:\n            letter_grades.append(\"B-\")\n     \
    \   case 85...90:\n            letter_grades.append(\"B-\")\n        case 90...85:\n\
    \            letter_grades.append(\"B-\")\n        case 85...90:\n           \
    \ letter_grades.append(\"B-\")\n        case 90...85:\n            letter_grades.append(\"\
    B-\")\n        case 85...90:\n            letter_grades.append(\"B-\")\n     \
    \   case 90...85:\n            letter_grades.append(\"B-\")\n        case 85...\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyydv0d8p.swift:101:19: error: expected ':' after 'case'\n     \
    \   case 85...\n                  ^\n/tmp/tmpyydv0d8p.swift:122:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmpyydv0d8p.swift:30:31: note: to match this opening '{'\n\
    \    for i in 0...grades.count {\n                              ^\n/tmp/tmpyydv0d8p.swift:122:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpyydv0d8p.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpyydv0d8p.swift:38:9:\
    \ error: switch must be exhaustive\n        switch percent {\n        ^\n/tmp/tmpyydv0d8p.swift:38:9:\
    \ note: do you want to add a default clause?\n        switch percent {\n     \
    \   ^\n/tmp/tmpyydv0d8p.swift:105:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n/tmp/tmpyydv0d8p.swift:25:9: warning: initialization of immutable\
    \ value 'min_value' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    let min_value = grades.min()!\n    ~~~~^~~~~~~~~\n    _\n\
    /tmp/tmpyydv0d8p.swift:33:13: warning: initialization of immutable value 'grade'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \       let grade = (percent / 100) * max_value\n        ~~~~^~~~~\n        _\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return numerical_letter_grade(grades: grades, alphabet:\
    \ grade_alphabet)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6uz2khkb.swift:25:61: error: cannot find 'grade_alphabet' in scope\n\
    \    return numerical_letter_grade(grades: grades, alphabet: grade_alphabet)\n\
    \                                                            ^~~~~~~~~~~~~~\n\
    /tmp/tmp6uz2khkb.swift:25:61: error: extra argument 'alphabet' in call\n    return\
    \ numerical_letter_grade(grades: grades, alphabet: grade_alphabet)\n         \
    \                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    let gpa = grades.reduce(0,\
    \ +)\n    let lower = gpa / 3\n    let upper = (gpa - lower) / 3\n    var current:\
    \ String = \"\"\n    switch lower {\n    case 0:\n        current = current =\
    \ \"E\"\n    case 1:\n        current = current = \"D-\"\n    case 2:\n      \
    \  current = current = \"C+\"\n    case 3:\n        current = current = \"B+\"\
    \n    case 4:\n        current = current = \"A-\"\n    case 5:\n        current\
    \ = current = \"A-\"\n    case 6:\n        current = current = \"A+\"\n    case\
    \ 7:\n        current = current = \"B\"\n    case 8:\n        current = current\
    \ = \"B-\"\n    case 9:\n        current = current = \"B-\"\n    case 10:\n  \
    \      current = current = \"B+\"\n    case 11:\n        current = current = \"\
    C\"\n    case 12:\n        current = current = \"C+\"\n    case 13:\n        current\
    \ = current = \"C+\"\n    case 14:\n        current = current = \"C\"\n    case\
    \ 15:\n        current = current = \"C+\"\n    case 16:\n        current = current\
    \ = \"C\"\n    case 17:\n        current = current = \"C\"\n    case 18:\n   \
    \     current = current = \"C\"\n    case 19:\n        current = current = \"\
    C\"\n    case 20:\n        current = current = \"C\"\n    case 21:\n        current\
    \ = current = \"C\"\n    case 22:\n        current = current = \"D\"\n    case\
    \ 23:\n        current = current = \"D+\"\n    case 24:\n        current = current\
    \ = \"D\"\n    case 25:\n        current = current = \"D+\"\n    case 26:\n  \
    \      current = current = \"D\"\n    case 27:\n        current = current = \"\
    D+\"\n    case 28:\n        current = current = \"D\"\n    case 29:\n        current\
    \ = current = \"D+\"\n    case 30:\n        current = current = \"D\"\n    case\
    \ 31:\n        current = current = \"D+\"\n    case 32:\n        current = current\
    \ = \"D\"\n    case 33:\n        current = current = \"D\"\n    case 34:\n   \
    \     current = current = \"D\"\n    case 35:\n        current = current = \"\
    D\"\n    case 36:\n        current = current = \"D\"\n    case 37:\n        current\
    \ = current = \"D\"\n    case 38:\n        current = current = \"D\"\n    case\
    \ 39:\n        current = current = \"D\"\n    case 40:\n        current = current\
    \ = \"D\"\n    case 41:\n        current = current = \"D\"\n    case 42:\n   \
    \     current = current = \"D\"\n    case 43:\n        current = current = \"\
    D\"\n    case 44:\n        current = current = \"D\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpewccaj60.swift:141:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpewccaj60.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpewccaj60.swift:32:17: error: assigning a variable to itself\n        current\
    \ = current = \"E\"\n        ~~~~~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:34:17:\
    \ error: assigning a variable to itself\n        current = current = \"D-\"\n\
    \        ~~~~~~~ ^ ~~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:36:17: error: assigning\
    \ a variable to itself\n        current = current = \"C+\"\n        ~~~~~~~ ^\
    \ ~~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:38:17: error: assigning a variable to\
    \ itself\n        current = current = \"B+\"\n        ~~~~~~~ ^ ~~~~~~~~~~~~~~\n\
    /tmp/tmpewccaj60.swift:40:17: error: assigning a variable to itself\n        current\
    \ = current = \"A-\"\n        ~~~~~~~ ^ ~~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:42:17:\
    \ error: assigning a variable to itself\n        current = current = \"A-\"\n\
    \        ~~~~~~~ ^ ~~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:44:17: error: assigning\
    \ a variable to itself\n        current = current = \"A+\"\n        ~~~~~~~ ^\
    \ ~~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:46:17: error: assigning a variable to\
    \ itself\n        current = current = \"B\"\n        ~~~~~~~ ^ ~~~~~~~~~~~~~\n\
    /tmp/tmpewccaj60.swift:48:17: error: assigning a variable to itself\n        current\
    \ = current = \"B-\"\n        ~~~~~~~ ^ ~~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:50:17:\
    \ error: assigning a variable to itself\n        current = current = \"B-\"\n\
    \        ~~~~~~~ ^ ~~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:52:17: error: assigning\
    \ a variable to itself\n        current = current = \"B+\"\n        ~~~~~~~ ^\
    \ ~~~~~~~~~~~~~~\n/tmp/tmpewccaj60.swift:54:17: error: assigning a variable to\
    \ itself\n        current = current = \"C\"\n        ~~~~~~~ ^ ~~~~~~~~~~~~~\n\
    /tmp/tmpewccaj60.swift:56:17: error: assigning a varia"
  stdout: ''
  timestamp: 1660014970
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradeStrings = [\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    let\
    \ gradeCount = grades.count\n    let gradeGPAs = grades.map({ Float($0)/10 })\n\
    \    let sortedGPAs = gradeGPAs.sorted(by: >)\n    if gradeCount == 0 {\n    \
    \    return [\"E\"]\n    }\n    var letterGrades = [String]()\n    for i in 0..<sortedGPAs.count-2\
    \ {\n        let gpa = sortedGPAs[i]\n        let grade = gradeStrings[i]\n  \
    \      if gpa < 3.0 {\n            if gpa < 2.0 {\n                letterGrades.append(grade)\n\
    \            } else {\n                letterGrades.append(grade+\"-\") // \"\
    D-\"\n            }\n        } else {\n            if gpa < 1.7 {\n          \
    \      letterGrades.append(grade)\n            } else {\n                letterGrades.append(grade+\"\
    -\") // \"D-\"\n            }\n        }\n    }\n    letterGrades.append(letterGrades[letterGrades.count-1])\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxv5oit0d/tmpxv5oit0d.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba358e74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba358b6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba358b6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba358b6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxv5oit0d                        0x000056351a867bb6 <unavailable> + 7094

    5    libc.so.6                          0x00002ba359060460 __libc_start_main +
    245

    6    tmpxv5oit0d                        0x000056351a8676d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    \n    //\
    \ 1. For each grade, subtract it from 4.0\n    // 2. Compare to see if its less\
    \ than 1.0\n    // 3. if less than 1.0 is true, subtract 1.0\n    // 4. Subtract\
    \ 1 from the index of the grade and add this letter grade to the letter_grades\
    \ array\n    for i in 0..<grades.count {\n        let current_grade: Double =\
    \ grades[i]\n        let current_grade_index: Int = i - 1\n        \n        let\
    \ current_grade_to_subtract: Double = 4.0\n        let current_grade_index_to_subtract:\
    \ Int = i\n        \n        // 1\n        let temp_grade: Double = current_grade\
    \ - current_grade_to_subtract\n        \n        // 2\n        if temp_grade <\
    \ 1.0 {\n            // 3\n            temp_grade -= 1.0\n            \n     \
    \       // 4\n            letter_grades.append(current_grade_index_to_subtract.description\
    \ + \"-\") // \"-\" is the string concatenation operator\n        }\n        else\
    \ {\n            // 4\n            letter_grades.append(current_grade_index_to_subtract.description)\n\
    \        }\n    }\n    \n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwu9oo2yp.swift:44:24: error: left side of mutating operator isn't\
    \ mutable: 'temp_grade' is a 'let' constant\n            temp_grade -= 1.0\n \
    \           ~~~~~~~~~~ ^\n/tmp/tmpwu9oo2yp.swift:39:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let temp_grade: Double = current_grade - current_grade_to_subtract\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    guard grades.count >= 3 else {\n        return\
    \ [\"E\"]\n    }\n    var gradesAsStringArray = [String]()\n    \n    for i in\
    \ 0 ..< grades.count {\n        let currentGrade = grades[i]\n        let currentGPA\
    \ = Double(grades[i])\n        let previousGPA = Double(grades[i-1])\n       \
    \ let letterGrade = letterGrade(currentGPA, previousGPA, currentGrade)\n     \
    \   gradesAsStringArray.append(letterGrade)\n    }\n    return gradesAsStringArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn7x19hud.swift:34:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(currentGPA, previousGPA,\
    \ currentGrade)\n                          ^\n/tmp/tmpn7x19hud.swift:34:13: note:\
    \ 'letterGrade' declared here\n        let letterGrade = letterGrade(currentGPA,\
    \ previousGPA, currentGrade)\n            ^\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    guard !grades.isEmpty else { return [] }\n\n  \
    \  let gradeCounts: [Int] = Array(grades.map { ($0 as! Double).rounded(.toNearestOrEven)\
    \ }.reduce([Int]()) {\n        (var counter, grade) in\n        counter[grade]\
    \ += 1\n        return counter\n    }, value: [Int]())\n\n    let totalGradeCounts\
    \ = gradeCounts.reduce(0) { (acc: Int, gradeCount: Int) -> Int in\n        return\
    \ acc + gradeCount\n    }\n\n    let remainderGrades = totalGradeCounts - gradeCounts\n\
    \n    let letterGrades: [String] = remainderGrades.map { (remainderGrade: Int)\
    \ in\n        let average = gradeCounts.reduce(0) { (acc, gradeCount) -> Int in\n\
    \            return acc + gradeCount\n        } / totalGradeCounts.rounded(.toNearestOrEven)\n\
    \        guard average > 0 else { return \"E\" }\n\n        var letter = \"\"\n\
    \        if remainderGrade > 0 { letter = \"A\" }\n        else if remainderGrade\
    \ < 0 { letter = \"B\" }\n        else if remainderGrade == 0 { letter = \"C\"\
    \ }\n        else { letter = \"D\" }\n\n        return letter\n    }\n\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmph1bmfwpy.swift:28:10: error: closure cannot have keyword arguments\n\
    \        (var counter, grade) in\n         ^~~~\n         \n/tmp/tmph1bmfwpy.swift:31:15:\
    \ error: extra argument 'value' in call\n    }, value: [Int]())\n~~~~~~~~~~~~~~^~~~~~~~\n\
    /tmp/tmph1bmfwpy.swift:27:53: warning: forced cast of 'Double' to same type has\
    \ no effect\n    let gradeCounts: [Int] = Array(grades.map { ($0 as! Double).rounded(.toNearestOrEven)\
    \ }.reduce([Int]()) {\n                                                    ^~~~~~~~~~\n\
    \                                                    \n/tmp/tmph1bmfwpy.swift:29:17:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        counter[grade] += 1\n                ^\n                Int( )\n/tmp/tmph1bmfwpy.swift:37:46:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    let remainderGrades = totalGradeCounts - gradeCounts\n                  \
    \                           ^\n/tmp/tmph1bmfwpy.swift:42:30: error: value of type\
    \ 'Int' has no member 'rounded'\n        } / totalGradeCounts.rounded(.toNearestOrEven)\n\
    \            ~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmph1bmfwpy.swift:42:39: error: cannot\
    \ infer contextual base in reference to member 'toNearestOrEven'\n        } /\
    \ totalGradeCounts.rounded(.toNearestOrEven)\n                               \
    \      ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014978
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var gradesCount:Int\
    \ = 0\n    var letterGrades:[String] = []\n    for i in grades {\n        if gradesCount\
    \ > 9 {\n            letterGrades.append(\"E\")\n            break\n        }\n\
    \        \n        if i == 0.0 {\n            letterGrades.append(\"D-\")\n  \
    \      }\n        \n        if i > 3.0 {\n            letterGrades.append(\"B-\"\
    )\n        }\n        \n        if i > 2.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 2.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 1.7 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 1.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 1.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 0.7 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 0.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 0.1 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 0.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i <= 0.0{\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 3.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 2.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 2.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 1.7 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 1.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 1.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 0.7 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 0.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 0.1 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 0.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i <= 0.0{\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 3.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 2.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 2.0 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 1.7 {\n            letterGrades.append(\"\
    B-\")\n        }\n        \n        if i > 1.3 {\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg76_dwfy.swift:164:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpg76_dwfy.swift:28:21:\
    \ note: to match this opening '{'\n    for i in grades {\n                   \
    \ ^\n/tmp/tmpg76_dwfy.swift:164:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpg76_dwfy.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpg76_dwfy.swift:147:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmpg76_dwfy.swift:26:9: warning: variable 'gradesCount'\
    \ was never mutated; consider changing to 'let' constant\n    var gradesCount:Int\
    \ = 0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // For\
    \ each grade, find the letter grade using the table above\n    for grade in grades\
    \ {\n        \n        // Start with the letter grade for the first grade\n  \
    \      var letterGrade = letterGrades[0]\n        \n        // If grade is bigger\
    \ than first grade, set letterGrade to\n        // the grade minus the first grade\n\
    \        if grade > letterGrades.first {\n            letterGrade = letterGrades.first\n\
    \        }\n        \n        // If the grade is less than the letter grade for\
    \ the previous grade,\n        // set letterGrade to the previous letter grade\n\
    \        if grade < letterGrades[letterGrades.count - 1] {\n            letterGrade\
    \ = letterGrades[letterGrades.count - 1]\n        }\n        \n        // If the\
    \ grade is between the letter grades for the previous and current grades,\n  \
    \      // set letterGrade to the current letter grade\n        if grade <= letterGrades[letterGrades.count\
    \ - 1] && grade >= letterGrades[0] {\n            letterGrade = letterGrades[0]\n\
    \        }\n        \n        // Add the letter grade to the array\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8or0p5wa.swift:35:33: error: cannot convert value of type 'String?'\
    \ to expected argument type 'Double'\n        if grade > letterGrades.first {\n\
    \                                ^\n/tmp/tmp8or0p5wa.swift:36:40: error: value\
    \ of optional type 'String?' must be unwrapped to a value of type 'String'\n \
    \           letterGrade = letterGrades.first\n                               \
    \        ^\n/tmp/tmp8or0p5wa.swift:36:40: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            letterGrade =\
    \ letterGrades.first\n                                       ^\n             \
    \                                ?? <#default value#>\n/tmp/tmp8or0p5wa.swift:36:40:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            letterGrade = letterGrades.first\n                      \
    \                 ^\n                                            !\n/tmp/tmp8or0p5wa.swift:41:12:\
    \ error: cannot convert value of type 'Double' to expected argument type 'String'\n\
    \        if grade < letterGrades[letterGrades.count - 1] {\n           ^\n/tmp/tmp8or0p5wa.swift:47:18:\
    \ error: binary operator '<=' cannot be applied to operands of type 'Double' and\
    \ 'String'\n        if grade <= letterGrades[letterGrades.count - 1] && grade\
    \ >= letterGrades[0] {\n           ~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8or0p5wa.swift:47:67: error: binary operator '>=' cannot be applied to\
    \ operands of type 'Double' and 'String'\n        if grade <= letterGrades[letterGrades.count\
    \ - 1] && grade >= letterGrades[0] {\n                                       \
    \                     ~~~~~ ^  ~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        let gpa = grade\n        let letter = letterGradeForGPA(gpa)\n\
    \        letter_grades.append(letter)\n    }\n    return letter_grades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptbpws2dq.swift:28:22: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        let letter = letterGradeForGPA(gpa)\n                     ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesAlphabet = [\"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\"\
    , \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\
    ]\n    var minGrade = Double(grades.min())!\n    var maxGrade = Double(grades.max())!\n\
    \    var gradesRange = maxGrade - minGrade + 1\n    var totalGrades = grades.count\n\
    \    var letterGrades = [String]()\n    for grade in grades {\n        letterGrades.append(String(format:\
    \ \"%.2f\", grade * 100 / totalGrades / gradesRange))\n    }\n    var sortedGrades\
    \ = letterGrades.sorted { $0.localizedStandardCompare($1) == ComparisonResult.orderedAscending\
    \ }\n    var index = 0\n    while index < totalGrades {\n        if sortedGrades[index]\
    \ == letterGrades[index] {\n            index += 1\n            continue\n   \
    \     }\n        if index > 0 {\n            sortedGrades[index] = letterGrades[index]\n\
    \        }\n        letterGrades[index] = sortedGrades[index - 1]\n        index\
    \ += 1\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9lu5r1pe.swift:26:20: error: no exact matches in call to initializer\
    \ \n    var minGrade = Double(grades.min())!\n                   ^\nSwift.Double:4:12:\
    \ note: candidate expects value of type 'Substring' for parameter #1 (got 'Double?')\n\
    \    public init?(_ text: Substring)\n           ^\n/tmp/tmp9lu5r1pe.swift:26:20:\
    \ note: found candidate with type '(Double) -> Double'\n    var minGrade = Double(grades.min())!\n\
    \                   ^\n/tmp/tmp9lu5r1pe.swift:26:20: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'Double?')\n    var minGrade = Double(grades.min())!\n\
    \                   ^\n/tmp/tmp9lu5r1pe.swift:26:20: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'Double?')\n    var minGrade = Double(grades.min())!\n\
    \                   ^\n/tmp/tmp9lu5r1pe.swift:27:20: error: no exact matches in\
    \ call to initializer \n    var maxGrade = Double(grades.max())!\n           \
    \        ^\nSwift.Double:4:12: note: candidate expects value of type 'Substring'\
    \ for parameter #1 (got 'Double?')\n    public init?(_ text: Substring)\n    \
    \       ^\n/tmp/tmp9lu5r1pe.swift:27:20: note: found candidate with type '(Double)\
    \ -> Double'\n    var maxGrade = Double(grades.max())!\n                   ^\n\
    /tmp/tmp9lu5r1pe.swift:27:20: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Double?')\n    var maxGrade = Double(grades.max())!\n   \
    \                ^\n/tmp/tmp9lu5r1pe.swift:27:20: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'Double?')\n    var maxGrade = Double(grades.max())!\n\
    \                   ^\n/tmp/tmp9lu5r1pe.swift:28:43: error: binary operator '+'\
    \ cannot be applied to operands of type 'Duration' and 'Int'\n    var gradesRange\
    \ = maxGrade - minGrade + 1\n                      ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmp9lu5r1pe.swift:28:43:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Duration, Duration), (Int, Int)\n    var gradesRange = maxGrade - minGrade\
    \ + 1\n                                          ^\n/tmp/tmp9lu5r1pe.swift:32:9:\
    \ error: the compiler i"
  stdout: ''
  timestamp: 1660014995
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    guard\
    \ grades.count >= 5 else { return letterGrades }\n    \n    if grades.count ==\
    \ 6 { letterGrades = [\"E\"] } else { letterGrades = [\"D-\", \"D\", \"C+\", \"\
    C\", \"B-\", \"B\", \"A-\", \"A\", \"A+\", \"A-\", \"A-\", \"A-\", \"A-\", \"\
    A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\",\
    \ \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3b2ce_w4.swift:29:1456: error: unterminated string literal\n  \
    \  if grades.count == 6 { letterGrades = [\"E\"] } else { letterGrades = [\"D-\"\
    , \"D\", \"C+\", \"C\", \"B-\", \"B\", \"A-\", \"A\", \"A+\", \"A-\", \"A-\",\
    \ \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\"\
    , \"A-\n                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                         "
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    let average\
    \ = grades.reduce(0, combine: {$0 + $1 / Double(grades.count)}) / Double(grades.count)\n\
    \    let basePoint = 2.0 * average * Double(points.count) - 1\n    let averageBasePoint\
    \ = basePoint / Double(points.count)\n    let minBasePoint = averageBasePoint\
    \ * Double(points.count) - 2\n    for grade in grades {\n        let basePointScore\
    \ = (grade - average) * points.count\n        let averageBasePointScore = basePointScore\
    \ / Double(points.count)\n        let minBasePointScore = averageBasePointScore\
    \ * Double(points.count) - 2\n        if basePointScore < minBasePointScore {\n\
    \            letterGrades.append(\"D\")\n        } else if basePointScore >= minBasePoint\
    \ {\n            let letterGrade = \"B\"\n            if basePointScore > averageBasePointScore\
    \ {\n                letterGrade = \"B-\"\n            }\n            if basePointScore\
    \ > minBasePointScore {\n                letterGrade = \"C+\"\n            }\n\
    \            if basePointScore < averageBasePointScore {\n                letterGrade\
    \ = \"C\"\n            }\n            if basePointScore < minBasePointScore {\n\
    \                letterGrade = \"C-\"\n            }\n            if basePointScore\
    \ == averageBasePointScore {\n                letterGrade = \"C\"\n          \
    \  }\n            letterGrades.append(letterGrade)\n        } else if basePointScore\
    \ >= minBasePointScore {\n            let letterGrade = \"A+\"\n            if\
    \ basePointScore > averageBasePointScore {\n                letterGrade = \"A-\"\
    \n            }\n            if basePointScore > minBasePointScore {\n       \
    \         letterGrade = \"A\"\n            }\n            if basePointScore <\
    \ averageBasePointScore {\n                letterGrade = \"A+\"\n            }\n\
    \            if basePointScore < minBasePointScore {\n                letterGrade\
    \ = \"A\"\n            }\n            if basePointScore == averageBasePointScore\
    \ {\n                letterGrade = \"A\"\n            }\n            letterGrades.append(letterGrade)\n\
    \        } else {\n            letterGrades.append(\"E\")\n        }\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl2tr0lt.swift:26:32: error: extraneous argument label 'combine:'\
    \ in call\n    let average = grades.reduce(0, combine: {$0 + $1 / Double(grades.count)})\
    \ / Double(grades.count)\n                               ^   ~~~~~~~~~\n     \
    \                              \n/tmp/tmpsl2tr0lt.swift:27:44: error: cannot find\
    \ 'points' in scope\n    let basePoint = 2.0 * average * Double(points.count)\
    \ - 1\n                                           ^~~~~~\n/tmp/tmpsl2tr0lt.swift:28:47:\
    \ error: cannot find 'points' in scope\n    let averageBasePoint = basePoint /\
    \ Double(points.count)\n                                              ^~~~~~\n\
    /tmp/tmpsl2tr0lt.swift:29:50: error: cannot find 'points' in scope\n    let minBasePoint\
    \ = averageBasePoint * Double(points.count) - 2\n                            \
    \                     ^~~~~~\n/tmp/tmpsl2tr0lt.swift:31:50: error: cannot find\
    \ 'points' in scope\n        let basePointScore = (grade - average) * points.count\n\
    \                                                 ^~~~~~\n/tmp/tmpsl2tr0lt.swift:32:61:\
    \ error: cannot find 'points' in scope\n        let averageBasePointScore = basePointScore\
    \ / Double(points.count)\n                                                   \
    \         ^~~~~~\n/tmp/tmpsl2tr0lt.swift:33:64: error: cannot find 'points' in\
    \ scope\n        let minBasePointScore = averageBasePointScore * Double(points.count)\
    \ - 2\n                                                               ^~~~~~\n\
    /tmp/tmpsl2tr0lt.swift:39:17: error: cannot assign to value: 'letterGrade' is\
    \ a 'let' constant\n                letterGrade = \"B-\"\n                ^~~~~~~~~~~\n\
    /tmp/tmpsl2tr0lt.swift:37:13: note: change 'let' to 'var' to make it mutable\n\
    \            let letterGrade = \"B\"\n            ^~~\n            var\n/tmp/tmpsl2tr0lt.swift:42:17:\
    \ error: cannot assign to value: 'letterGrade' is a 'let' constant\n         \
    \       letterGrade = \"C+\"\n                ^~~~~~~~~~~\n/tmp/tmpsl2tr0lt.swift:37:13:\
    \ note: change 'let' to 'var' to make it mutable\n            let letterGrade\
    \ = \"B\"\n            ^~~\n            var\n/tmp/tmpsl2tr0lt.swift:"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: Return a string array that contains letter\
    \ grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmprt1z64wo.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014970
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeStrings: [String] = []\n\n    for grade\
    \ in grades {\n        // Use this line if you want to use the old school algorithm\n\
    \        // gradeStrings.append(numerical_letter_grade(grade))\n\n        // Use\
    \ this line if you want to use your own algorithm\n        gradeStrings.append(numerical_letter_grade2(grade))\n\
    \    }\n\n    return gradeStrings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3xar8jsa.swift:32:29: error: cannot find 'numerical_letter_grade2'\
    \ in scope\n        gradeStrings.append(numerical_letter_grade2(grade))\n    \
    \                        ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  var letter_grades = [String]()\n  var gpa = grades.max()\n\
    \  letter_grades.append(\"\")\n  if gpa < 0.0 {\n    return letter_grades\n  }\n\
    \  var i = gpa\n  var j = 0\n  var x = 0.0\n  while true {\n    if i > 0.0 {\n\
    \      j = gpa - i\n      x = i * 3.0 - 3.0 * j / 2.0\n    }\n    i = x\n    if\
    \ i == 0.0 {\n      break\n    }\n    letter_grades.append(String(format: \"%.1f\"\
    , i))\n  }\n  letter_grades.reverse()\n  return letter_grades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkl5s0_wh.swift:28:6: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n  if gpa < 0.0 {\n     ^\n/tmp/tmpkl5s0_wh.swift:28:6:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n  if gpa < 0.0 {\n     ^\n         ?? <#default value#>\n/tmp/tmpkl5s0_wh.swift:28:6:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n  if gpa < 0.0 {\n     ^\n        !\n/tmp/tmpkl5s0_wh.swift:35:8: error:\
    \ value of optional type 'Double?' must be unwrapped to a value of type 'Double'\n\
    \    if i > 0.0 {\n       ^\n/tmp/tmpkl5s0_wh.swift:35:8: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    if i >\
    \ 0.0 {\n       ^\n         ?? <#default value#>\n/tmp/tmpkl5s0_wh.swift:35:8:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if i > 0.0 {\n       ^\n        !\n/tmp/tmpkl5s0_wh.swift:36:15:\
    \ error: binary operator '-' cannot be applied to two 'Double?' operands\n   \
    \   j = gpa - i\n          ~~~ ^ ~\n/tmp/tmpkl5s0_wh.swift:36:15: note: overloads\
    \ for '-' exist with these partially matching parameter lists: (Double, Double)\n\
    \      j = gpa - i\n              ^\n/tmp/tmpkl5s0_wh.swift:36:15: error: cannot\
    \ assign value of type 'Double' to type 'Int'\n      j = gpa - i\n          ~~~~^~~\n\
    \          Int(   )\n/tmp/tmpkl5s0_wh.swift:37:27: error: cannot convert value\
    \ of type 'Int' to expected argument type 'Double'\n      x = i * 3.0 - 3.0 *\
    \ j / 2.0\n                          ^\n                          Double( )\n\
    /tmp/tmpkl5s0_wh.swift:37:11: error: value of optional type 'Double?' must be\
    \ unwrapped to a value of type 'Double'\n      x = i * 3.0 - 3.0 * j / 2.0\n \
    \         ^\n/tmp/tmpkl5s0_wh.swift:37:11: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n      x = i * 3.0 - 3.0 *\
    \ j / 2.0\n          ^\n          ( ?? <#default value#>)\n/tmp/tmpkl5s0_wh.swift:37:11:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n      x = i * "
  stdout: ''
  timestamp: 1660014975
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        let gradeString: String\n\n        if grade < 4 {\n   \
    \         gradeString = \"A\"\n        } else if grade < 3.7 {\n            gradeString\
    \ = \"A+\"\n        } else if grade < 3.3 {\n            gradeString = \"A\"\n\
    \        } else if grade < 3 {\n            gradeString = \"B\"\n        } else\
    \ if grade < 2.7 {\n            gradeString = \"B+\"\n        } else if grade\
    \ < 2.3 {\n            gradeString = \"B\"\n        } else if grade < 2 {\n  \
    \          gradeString = \"C\"\n        } else if grade < 1.7 {\n            gradeString\
    \ = \"C+\"\n        } else if grade < 1.3 {\n            gradeString = \"C\"\n\
    \        } else if grade < 1 {\n            gradeString = \"D\"\n        } else\
    \ if grade < 0.7 {\n            gradeString = \"D+\"\n        } else if grade\
    \ < 0 {\n            gradeString = \"D\"\n        } else {\n            gradeString\
    \ = \"E\"\n        }\n        letterGrades.append(gradeString)\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpvy5kfoxd/tmpvy5kfoxd.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af42413ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af423e31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af423e31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af423e307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvy5kfoxd                        0x00005642f65b37a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af424326460 __libc_start_main +
    245

    6    tmpvy5kfoxd                        0x00005642f65b32c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArr = Array(grades)\n    var gradesArr2\
    \ = Array(gradesArr.count)\n    var output = [String]()\n    if gradesArr[0] ==\
    \ 0.0 {\n        gradesArr[0] = 0.0\n    }\n    if gradesArr[0] > gradesArr[1]\
    \ { gradesArr[0] -= gradesArr[1]; gradesArr[1] = 0.0 }\n    if gradesArr[1] >\
    \ gradesArr[2] { gradesArr[1] -= gradesArr[2]; gradesArr[2] = 0.0 }\n    if gradesArr[2]\
    \ > gradesArr[3] { gradesArr[2] -= gradesArr[3]; gradesArr[3] = 0.0 }\n    if\
    \ gradesArr[3] > gradesArr[0] { gradesArr[3] -= gradesArr[0]; gradesArr[0] = 0.0\
    \ }\n    if gradesArr[0] > gradesArr[1] { gradesArr[0] -= gradesArr[1]; gradesArr[1]\
    \ = 0.0 }\n    if gradesArr[1] > gradesArr[2] { gradesArr[1] -= gradesArr[2];\
    \ gradesArr[2] = 0.0 }\n    if gradesArr[2] > gradesArr[3] { gradesArr[2] -= gradesArr[3];\
    \ gradesArr[3] = 0.0 }\n    if gradesArr[3] > gradesArr[0] { gradesArr[3] -= gradesArr[0];\
    \ gradesArr[0] = 0.0 }\n    if gradesArr[0] > gradesArr[1] { gradesArr[0] -= gradesArr[1];\
    \ gradesArr[1] = 0.0 }\n    if gradesArr[1] > gradesArr[2] { gradesArr[1] -= gradesArr[2];\
    \ gradesArr[2] = 0.0 }\n    if gradesArr[2] > gradesArr[3] { gradesArr[2] -= gradesArr[3];\
    \ gradesArr[3] = 0.0 }\n    if gradesArr[0] > gradesArr[1] { gradesArr[0] -= gradesArr[1];\
    \ gradesArr[1] = 0.0 }\n    if gradesArr[1] > gradesArr[2] { gradesArr[1] -= gradesArr[2];\
    \ gradesArr[2] = 0.0 }\n    if gradesArr[2] > gradesArr[3] { gradesArr[2] -= gradesArr[3];\
    \ gradesArr[3] = 0.0 }\n    if gradesArr[0] > gradesArr[1] { gradesArr[0] -= gradesArr[1];\
    \ gradesArr[1] = 0.0 }\n    if gradesArr[1] > gradesArr[2] { gradesArr[1] -= gradesArr[2];\
    \ gradesArr[2] = 0.0 }\n    if gradesArr[2] > gradesArr[3] { gradesArr[2] -= gradesArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp52789xk5.swift:68:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp52789xk5.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp52789xk5.swift:26:28: error: missing argument label 'arrayLiteral:' in\
    \ call\n    var gradesArr2 = Array(gradesArr.count)\n                        \
    \   ^\n                           arrayLiteral: \n/tmp/tmp52789xk5.swift:47:54:\
    \ error: cannot convert value of type '[Double]' to expected argument type 'Double'\n\
    \    if gradesArr[2] > gradesArr[3] { gradesArr[2] -= gradesArr\n            \
    \                                         ^\n/tmp/tmp52789xk5.swift:51:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.isEmpty() {\n        return [] // empty\
    \ array\n    }\n    let sum = grades.reduce(0.0, combine: +) //sum of grades\n\
    \    let avg = sum / Double(grades.count) //avg\n    \n    var lettergrades: [String]\
    \ = []\n    \n    if grades.contains {\n        let firstGrade = grades.first!\n\
    \        var prev: Double? = nil\n        \n        for value in grades.dropFirst()\
    \ {\n            let grade = value // we could do sum += grade, but that's a bit\
    \ inefficient - use += instead\n            \n            if prev != nil { //\
    \ if the previous grade was set (meaning first grade was a gap)\n            \
    \    let gap = value - prev // in percent\n                \n                if\
    \ gap > 0.0 { // if the gap is greater than zero, we've found a gap!\n       \
    \             lettergrades.append(String(format: \"%.1f\", gap)+\"%\") // add\
    \ the gap to the array\n                }\n                \n                lettergrades.append(letterGrade(grade:\
    \ grade)!)\n            } else { // no gap, just add the first grade\n       \
    \         lettergrades.append(letterGrade(grade: grade)!)\n                \n\
    \                prev = grade // set the previous grade as current for next loop\n\
    \            }\n        }\n    }\n    \n    if sum > 0.0 { //if sum is not 0,\
    \ then append letter grade for avg grade\n        let grade = avg\n        lettergrades.append(String(format:\
    \ \"%.1f\", grade)+\"%\")\n    }\n    \n    return lettergrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuqyfigyb.swift:25:15: error: cannot call value of non-function\
    \ type 'Bool'\n    if grades.isEmpty() {\n              ^      ~~\n          \
    \           \n/tmp/tmpuqyfigyb.swift:28:28: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = grades.reduce(0.0, combine: +) //sum of grades\n    \
    \                       ^     ~~~~~~~~~\n                                 \n/tmp/tmpuqyfigyb.swift:33:15:\
    \ error: no 'contains' candidates produce the expected contextual result type\
    \ 'Bool'\n    if grades.contains {\n              ^\nSwift.Sequence:2:28: note:\
    \ found candidate with type '((Double) throws -> Bool) throws -> Bool'\n    @inlinable\
    \ public func contains(where predicate: (Self.Element) throws -> Bool) rethrows\
    \ -> Bool\n                           ^\nSwift.Sequence:2:28: note: found candidate\
    \ with type '(Double) -> Bool'\n    @inlinable public func contains(_ element:\
    \ Self.Element) -> Bool\n                           ^\n/tmp/tmpuqyfigyb.swift:41:35:\
    \ error: value of optional type 'Double?' must be unwrapped to a value of type\
    \ 'Double'\n                let gap = value - prev // in percent\n           \
    \                       ^\n/tmp/tmpuqyfigyb.swift:41:35: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \       let gap = value - prev // in percent\n                               \
    \   ^\n                                  (    ?? <#default value#>)\n/tmp/tmpuqyfigyb.swift:41:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                let gap = value - prev // in percent\n              \
    \                    ^\n                                      !\n/tmp/tmpuqyfigyb.swift:44:47:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \                    lettergrades.append(String(format: \"%.1f\", gap)+\"%\")\
    \ // add the gap to the array\n                                              ^~~~~~~\n\
    \                                               repeating       count: \n/tmp/tmpuqyfigyb.swift:47:37:\
    \ error: cannot find 'letterGrade' "
  stdout: ''
  timestamp: 1660014971
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: fill this in.\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpr3i6tj58/tmpr3i6tj58.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6544e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6541deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6541de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6541dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3i6tj58                        0x000056325c6405e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ab6546d3460 __libc_start_main +
    245

    6    tmpr3i6tj58                        0x000056325c640109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    // YOUR CODE HERE\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdydslkgi/tmpdydslkgi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47f214c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47ef0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac47ef0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac47ef0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdydslkgi                        0x000055f85a4ef5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ac47f400460 __libc_start_main +
    245

    6    tmpdydslkgi                        0x000055f85a4ef109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for g in grades\
    \ {\n        let gpa = Double(g)\n        var letter_grade = \"\"\n        if\
    \ gpa < 3.0 {\n            letter_grade = \"C\"\n        } else if gpa < 2.7 {\n\
    \            letter_grade = \"B-\"\n        } else if gpa < 2.3 {\n          \
    \  letter_grade = \"B-\"\n        } else if gpa < 1.3 {\n            letter_grade\
    \ = \"B\"\n        } else if gpa < 0.7 {\n            letter_grade = \"B-\"\n\
    \        } else if gpa < 0.3 {\n            letter_grade = \"B\"\n        } else\
    \ if gpa < 0.0 {\n            letter_grade = \"B\"\n        } else if gpa < -0.3\
    \ {\n            letter_grade = \"B-\"\n        } else if gpa < -1.0 {\n     \
    \       letter_grade = \"B-\"\n        } else if gpa < -1.7 {\n            letter_grade\
    \ = \"B\"\n        } else if gpa < -2.0 {\n            letter_grade = \"B\"\n\
    \        } else if gpa < -2.3 {\n            letter_grade = \"B+\"\n        }\
    \ else if gpa < -2.7 {\n            letter_grade = \"B+\"\n        } else if gpa\
    \ < -3.0 {\n            letter_grade = \"C\"\n        } else if gpa < -3.3 {\n\
    \            letter_grade = \"C\"\n        } else if gpa < -3.7 {\n          \
    \  letter_grade = \"C\"\n        } else if gpa < -4.0 {\n            letter_grade\
    \ = \"C\"\n        } else if gpa < -4.7 {\n            letter_grade = \"C\"\n\
    \        } else if gpa < -5.0 {\n            letter_grade = \"C\"\n        } else\
    \ if gpa < -5.3 {\n            letter_grade = \"C\"\n        } else if gpa < -5.7\
    \ {\n            letter_grade = \"C\"\n        } else if gpa < -6.0 {\n      \
    \      letter_grade = \"D+\"\n        } else if gpa < -6.7 {\n            letter_grade\
    \ = \"D+\"\n        } else if gpa < -7.0 {\n            letter_grade = \"D\"\n\
    \        } else if gpa < -7.3 {\n            letter_grade = \"D\"\n        } else\
    \ if gpa < -7.7 {\n            letter_grade = \"D\"\n        } else if gpa < -8.0\
    \ {\n            letter_grade = \"D\"\n        } else if gpa < -8.3 {\n      \
    \      letter_grade = \"D+\"\n        } else if gpa < -8.7 {\n            letter_grade\
    \ = \"D+\"\n        } else if gpa < -9.0 {\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb77mg3yu.swift:109:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpb77mg3yu.swift:26:21:\
    \ note: to match this opening '{'\n    for g in grades {\n                   \
    \ ^\n/tmp/tmpb77mg3yu.swift:109:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpb77mg3yu.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpb77mg3yu.swift:92:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmpb77mg3yu.swift:25:9: warning: initialization of variable\
    \ 'letter_grades' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var letter_grades = [String]()\n    ~~~~^~~~~~~~~~~~~\n   \
    \ _\n/tmp/tmpb77mg3yu.swift:28:13: warning: variable 'letter_grade' was written\
    \ to, but never read\n        var letter_grade = \"\"\n            ^\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let totalGrades = grades.reduce(0.0, +)\n    let\
    \ result = [String]()\n    for grade in grades {\n        switch grade {\n   \
    \     case 4.0:\n            if totalGrades > 4.0 { result.append(LetterGrade.Aplus)\
    \ }\n        case > 3.7: result.append(LetterGrade.A)\n        case > 3.3: result.append(LetterGrade.Aminus)\n\
    \        case > 3.0: result.append(LetterGrade.Bplus)\n        case > 2.7: result.append(LetterGrade.B)\n\
    \        case > 2.3: result.append(LetterGrade.Bminus)\n        case > 2.0: result.append(LetterGrade.Cplus)\n\
    \        case > 1.7: result.append(LetterGrade.C)\n        case > 1.3: result.append(LetterGrade.Cminus)\n\
    \        case > 1.0: result.append(LetterGrade.Dplus)\n        case > 0.7: result.append(LetterGrade.D)\n\
    \        case > 0.0: result.append(LetterGrade.Dminus)\n        case 0.0 : result.append(LetterGrade.E)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxdt4nem2.swift:31:14: error: unary operator cannot be separated\
    \ from its operand\n        case > 3.7: result.append(LetterGrade.A)\n       \
    \      ^~\n              \n/tmp/tmpxdt4nem2.swift:32:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 3.3: result.append(LetterGrade.Aminus)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:33:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 3.0: result.append(LetterGrade.Bplus)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:34:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 2.7: result.append(LetterGrade.B)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:35:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 2.3: result.append(LetterGrade.Bminus)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:36:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 2.0: result.append(LetterGrade.Cplus)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:37:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 1.7: result.append(LetterGrade.C)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:38:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 1.3: result.append(LetterGrade.Cminus)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:39:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 1.0: result.append(LetterGrade.Dplus)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:40:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 0.7: result.append(LetterGrade.D)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:41:14: error: unary operator\
    \ cannot be separated from its operand\n        case > 0.0: result.append(LetterGrade.Dminus)\n\
    \             ^~\n              \n/tmp/tmpxdt4nem2.swift:31:14: error: '>' is\
    \ not a prefix unary operator\n        case > 3.7: result.append(LetterGrade.A)\n\
    \             ^\n/tmp/tmpxdt4nem2.swif"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var results: [String] = []\n    var total = 0\n\
    \    for grade in grades {\n        total += grade\n    }\n    for grade in grades\
    \ {\n        let gradePercentile = grade * 100 / (total + 0.01)\n        if gradePercentile\
    \ < 2.2 {\n            results.append(\"A+\")\n        } else if gradePercentile\
    \ < 2.4 {\n            results.append(\"A\")\n        } else if gradePercentile\
    \ < 2.6 {\n            results.append(\"A-\")\n        } else if gradePercentile\
    \ < 2.9 {\n            results.append(\"B+\")\n        } else if gradePercentile\
    \ < 3.1 {\n            results.append(\"B\")\n        } else if gradePercentile\
    \ < 3.3 {\n            results.append(\"B-\")\n        } else if gradePercentile\
    \ < 3.5 {\n            results.append(\"C+\")\n        } else if gradePercentile\
    \ < 3.7 {\n            results.append(\"C\")\n        } else if gradePercentile\
    \ < 3.9 {\n            results.append(\"C-\")\n        } else if gradePercentile\
    \ < 4.1 {\n            results.append(\"D+\")\n        } else if gradePercentile\
    \ < 4.3 {\n            results.append(\"D\")\n        } else if gradePercentile\
    \ < 4.5 {\n            results.append(\"D-\")\n        } else if gradePercentile\
    \ < 4.7 {\n            results.append(\"E\")\n        } else {\n            results.append(\"\
    D-\")\n        }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmplgb_wdvk.swift:28:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        total += grade\n                 ^\n\
    \                 Int( )\n/tmp/tmplgb_wdvk.swift:31:46: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n        let gradePercentile\
    \ = grade * 100 / (total + 0.01)\n                                           \
    \  ^\n                                             Double( )\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var grade : String = \"\"\n    for grade in grades {\n        switch\
    \ grade {\n        case 0.0 <= gpa && gpa <= 3.0:\n            letterGrades.append(\"\
    A+\")\n            break\n        case 3.0 <= gpa && gpa <= 3.7:\n           \
    \ letterGrades.append(\"A\")\n            break\n        case 3.7 <= gpa && gpa\
    \ <= 3.3:\n            letterGrades.append(\"A-\")\n            break\n      \
    \  case 3.3 <= gpa && gpa <= 3.0:\n            letterGrades.append(\"B+\")\n \
    \           break\n        case 3.0 <= gpa && gpa <= 2.7:\n            letterGrades.append(\"\
    B\")\n            break\n        case 2.7 <= gpa && gpa <= 2.3:\n            letterGrades.append(\"\
    B-\")\n            break\n        case 2.3 <= gpa && gpa <= 2.0:\n           \
    \ letterGrades.append(\"C+\")\n            break\n        case 2.0 <= gpa && gpa\
    \ <= 1.7:\n            letterGrades.append(\"C\")\n            break\n       \
    \ case 1.7 <= gpa && gpa <= 1.3:\n            letterGrades.append(\"C-\")\n  \
    \          break\n        case 1.3 <= gpa && gpa <= 1.0:\n            letterGrades.append(\"\
    D+\")\n            break\n        case 1.0 <= gpa && gpa <= 0.7:\n           \
    \ letterGrades.append(\"D\")\n            break\n        case 0.7 <= gpa && gpa\
    \ <= 0.0:\n            letterGrades.append(\"D-\")\n            break\n      \
    \  case 0.0 <= gpa:\n            letterGrades.append(\"E\")\n            break\n\
    \        default:\n            letterGrades.append(\"\")\n            break\n\
    \        }\n        gpa += 0.1\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3kfu_zks.swift:30:25: error: expression pattern of type 'Bool'\
    \ cannot match values of type 'Double'\n        case 0.0 <= gpa && gpa <= 3.0:\n\
    \             ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp3kfu_zks.swift:33:25: error: expression\
    \ pattern of type 'Bool' cannot match values of type 'Double'\n        case 3.0\
    \ <= gpa && gpa <= 3.7:\n             ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp3kfu_zks.swift:36:25:\
    \ error: expression pattern of type 'Bool' cannot match values of type 'Double'\n\
    \        case 3.7 <= gpa && gpa <= 3.3:\n             ~~~~~~~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp3kfu_zks.swift:39:25: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Double'\n        case 3.3 <= gpa && gpa <= 3.0:\n    \
    \         ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp3kfu_zks.swift:42:25: error: expression\
    \ pattern of type 'Bool' cannot match values of type 'Double'\n        case 3.0\
    \ <= gpa && gpa <= 2.7:\n             ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp3kfu_zks.swift:45:25:\
    \ error: expression pattern of type 'Bool' cannot match values of type 'Double'\n\
    \        case 2.7 <= gpa && gpa <= 2.3:\n             ~~~~~~~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp3kfu_zks.swift:48:25: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Double'\n        case 2.3 <= gpa && gpa <= 2.0:\n    \
    \         ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp3kfu_zks.swift:51:25: error: expression\
    \ pattern of type 'Bool' cannot match values of type 'Double'\n        case 2.0\
    \ <= gpa && gpa <= 1.7:\n             ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp3kfu_zks.swift:54:25:\
    \ error: expression pattern of type 'Bool' cannot match values of type 'Double'\n\
    \        case 1.7 <= gpa && gpa <= 1.3:\n             ~~~~~~~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp3kfu_zks.swift:57:25: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Double'\n        case 1.3 <= gpa && gpa <= 1.0:\n    \
    \         ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp3kfu_zks.swift:60:25: error: expression\
    \ pattern of type 'Bool' cannot match values of type 'Double'\n        case 1.0\
    \ <= gpa && gpa <= 0.7:\n             ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp3kfu_"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n\tvar letterGrades = [String]()\n\tletterGrades.append(grade(grades[0],\
    \ 0))\n\tfor _, grade in grades.enumerated() {\n\t\tletterGrades.append(letterGrade(grade,\
    \ letterGrades.count))\n\t}\n\treturn letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0rmpbzey.swift:27:7: error: expected 'in' after for-each pattern\n\
    \        for _, grade in grades.enumerated() {\n             ^\n/tmp/tmp0rmpbzey.swift:27:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, grade\
    \ in grades.enumerated() {\n             ^\n/tmp/tmp0rmpbzey.swift:26:22: error:\
    \ cannot find 'grade' in scope\n        letterGrades.append(grade(grades[0], 0))\n\
    \                            ^~~~~\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeArray = [String]()\n    var total = 0\n\
    \    for grade in grades {\n        if total > 8 {\n            gradeArray.append(\"\
    E\")\n            break\n        }\n        total += grade\n        if total >=\
    \ 3.0 {\n            gradeArray.append(\"A+\")\n        } else if total >= 3.0\
    \ {\n            gradeArray.append(\"A\")\n        } else if total >= 2.0 {\n\
    \            gradeArray.append(\"A-\")\n        } else if total >= 2.0 {\n   \
    \         gradeArray.append(\"B+\")\n        } else if total >= 1.0 {\n      \
    \      gradeArray.append(\"B\")\n        } else if total >= 1.0 {\n          \
    \  gradeArray.append(\"B-\")\n        } else if total >= 0.0 {\n            gradeArray.append(\"\
    C+\")\n        } else if total >= 0.0 {\n            gradeArray.append(\"C\")\n\
    \        } else if total >= 0.0 {\n            gradeArray.append(\"C-\")\n   \
    \     } else if total >= 0.0 {\n            gradeArray.append(\"D+\")\n      \
    \  } else if total >= 0.0 {\n            gradeArray.append(\"D\")\n        } else\
    \ if total >= 0.0 {\n            gradeArray.append(\"D-\")\n        } else {\n\
    \            gradeArray.append(\"E\")\n        }\n    }\n    return gradeArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkwigk2vr.swift:32:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        total += grade\n                 ^\n\
    \                 Int( )\n/tmp/tmpkwigk2vr.swift:33:18: error: binary operator\
    \ '>=' cannot be applied to operands of type 'Int' and 'Double'\n        if total\
    \ >= 3.0 {\n           ~~~~~ ^  ~~~\n/tmp/tmpkwigk2vr.swift:33:18: note: overloads\
    \ for '>=' exist with these partially matching parameter lists: (Int, Int)\n \
    \       if total >= 3.0 {\n                 ^\n/tmp/tmpkwigk2vr.swift:35:25: error:\
    \ binary operator '>=' cannot be applied to operands of type 'Int' and 'Double'\n\
    \        } else if total >= 3.0 {\n                  ~~~~~ ^  ~~~\n/tmp/tmpkwigk2vr.swift:35:25:\
    \ note: overloads for '>=' exist with these partially matching parameter lists:\
    \ (Int, Int)\n        } else if total >= 3.0 {\n                        ^\n/tmp/tmpkwigk2vr.swift:37:25:\
    \ error: binary operator '>=' cannot be applied to operands of type 'Int' and\
    \ 'Double'\n        } else if total >= 2.0 {\n                  ~~~~~ ^  ~~~\n\
    /tmp/tmpkwigk2vr.swift:37:25: note: overloads for '>=' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        } else if total >= 2.0 {\n   \
    \                     ^\n/tmp/tmpkwigk2vr.swift:39:25: error: binary operator\
    \ '>=' cannot be applied to operands of type 'Int' and 'Double'\n        } else\
    \ if total >= 2.0 {\n                  ~~~~~ ^  ~~~\n/tmp/tmpkwigk2vr.swift:39:25:\
    \ note: overloads for '>=' exist with these partially matching parameter lists:\
    \ (Int, Int)\n        } else if total >= 2.0 {\n                        ^\n/tmp/tmpkwigk2vr.swift:41:25:\
    \ error: binary operator '>=' cannot be applied to operands of type 'Int' and\
    \ 'Double'\n        } else if total >= 1.0 {\n                  ~~~~~ ^  ~~~\n\
    /tmp/tmpkwigk2vr.swift:41:25: note: overloads for '>=' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        } else if total >= 1.0 {\n   \
    \                     ^\n/tmp/tmpkwigk2vr.swift:43:25: error: binary operator\
    \ '>=' cannot be applied to operands of type 'Int' and 'Double'\n   "
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesDict = [:]\n    for g in grades {\n \
    \       if gradesDict[g] != nil {\n            gradesDict[g]!.append(g)\n    \
    \    } else {\n            gradesDict[g] = [g]\n        }\n    }\n    var output\
    \ = [String]()\n    var minGrades = grades.min()\n    for (k,v) in gradesDict\
    \ {\n        if k.isMultiple(0.5) && v.count > minGrades {\n            for g\
    \ in v {\n                output.append(g)\n            }\n        }\n    }\n\
    \    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2njxxto8.swift:25:22: error: empty collection literal requires\
    \ an explicit type\n    var gradesDict = [:]\n                     ^~~\n/tmp/tmp2njxxto8.swift:28:24:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Dictionary<AnyHashable,\
    \ Any>.Index'\n            gradesDict[g]!.append(g)\n                       ^\n\
    /tmp/tmp2njxxto8.swift:28:26: error: cannot force unwrap value of non-optional\
    \ type '(key: AnyHashable, value: Any)'\n            gradesDict[g]!.append(g)\n\
    \            ~~~~~~~~~~~~~^\n                         \n/tmp/tmp2njxxto8.swift:28:28:\
    \ error: value of tuple type '(key: AnyHashable, value: Any)' has no member 'append'\n\
    \            gradesDict[g]!.append(g)\n            ~~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmp2njxxto8.swift:36:14:\
    \ error: value of type 'AnyHashable' has no member 'isMultiple'\n        if k.isMultiple(0.5)\
    \ && v.count > minGrades {\n           ~ ^~~~~~~~~~\n/tmp/tmp2njxxto8.swift:36:35:\
    \ error: value of type 'Any' has no member 'count'\n        if k.isMultiple(0.5)\
    \ && v.count > minGrades {\n                                ~ ^~~~~\n/tmp/tmp2njxxto8.swift:36:35:\
    \ note: cast 'Any' to 'AnyObject' or use 'as!' to force downcast to a more specific\
    \ type to access members\n        if k.isMultiple(0.5) && v.count > minGrades\
    \ {\n                                  ^\n                                ( as\
    \ AnyObject)\n/tmp/tmp2njxxto8.swift:36:43: error: value of optional type 'Double?'\
    \ must be unwrapped to a value of type 'Double'\n        if k.isMultiple(0.5)\
    \ && v.count > minGrades {\n                                          ^\n/tmp/tmp2njxxto8.swift:34:9:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n    var minGrades = grades.min()\n        ^\n    guard\
    \                        else { return <#default value#> }\n/tmp/tmp2njxxto8.swift:34:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    var minGrades = grades.min()\n                           ^\n    \
    \                             ?? <#default value#>\n/tmp/tmp2njxxto8.sw"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrades\
    \ = 0.0\n    var currentGrade = grades[0]\n    \n    for i in 1...grades.count\
    \ {\n        totalGrades += grades[i]\n        if totalGrades < 0.0 {\n      \
    \      totalGrades = 0.0\n        }\n        if totalGrades > 0.0 {\n        \
    \    if totalGrades >= currentGrade {\n                letterGrades.append(String(currentGrade)!)\n\
    \            } else if totalGrades >= 3.0 && currentGrade <= 3.0 {\n         \
    \       letterGrades.append(String(currentGrade)!)\n            } else if totalGrades\
    \ >= 2.0 && currentGrade <= 2.0 {\n                letterGrades.append(String(\"\
    -\")!)\n            } else {\n                letterGrades.append(String(currentGrade)!)\n\
    \            }\n        }\n        currentGrade = totalGrades\n    }\n    \n \
    \   return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmps019aqgx.swift:36:57: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                letterGrades.append(String(currentGrade)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~^\n                 \
    \                                       \n/tmp/tmps019aqgx.swift:38:57: error:\
    \ cannot force unwrap value of non-optional type 'String'\n                letterGrades.append(String(currentGrade)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~^\n                 \
    \                                       \n/tmp/tmps019aqgx.swift:40:48: error:\
    \ cannot force unwrap value of non-optional type 'String'\n                letterGrades.append(String(\"\
    -\")!)\n                                    ~~~~~~~~~~~^\n                   \
    \                            \n/tmp/tmps019aqgx.swift:42:57: error: cannot force\
    \ unwrap value of non-optional type 'String'\n                letterGrades.append(String(currentGrade)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~^\n                 \
    \                                       \n"
  stdout: ''
  timestamp: 1660014971
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.compactMap { GPA in\n        switch\
    \ GPA {\n        case 3.0:\n            return \"A+\"\n        case 2.7:\n   \
    \         return \"B\"\n        case 2.3:\n            return \"B-\"\n       \
    \ case 1.7:\n            return \"C\"\n        case 1.3:\n            return \"\
    C-\"\n        case 1.0:\n            return \"D+\"\n        case 0.7:\n      \
    \      return \"D\"\n        case 0.0:\n            return \"D-\"\n        case\
    \ 0.0:\n            return \"E\"\n        default:\n            return \"N/A\"\
    \n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3y25fbso/tmp3y25fbso.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac471d92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac471a89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac471a89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac471a887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3y25fbso                        0x0000563c7da0b656 <unavailable> + 5718

    5    libc.so.6                          0x00002ac471f7e460 __libc_start_main +
    245

    6    tmp3y25fbso                        0x0000563c7da0b179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Calculate\
    \ the total for grade calculation\n    let total = 0.0\n    for grade in grades\
    \ {\n        total += grade\n    }\n    \n    // Calculate the letter grades\n\
    \    let gradeFactor = 1.0 / total\n    let lowThreshold = 4.0\n    let midThreshold\
    \ = (3.7 * gradeFactor) + lowThreshold\n    let highThreshold = (3.3 * gradeFactor)\
    \ + midThreshold\n    let low = (3.0 * gradeFactor) + highThreshold\n    let mid\
    \ = (2.7 * gradeFactor) + low\n    let high = (2.3 * gradeFactor) + mid\n    let\
    \ lowMid = (2.0 * gradeFactor) + high\n    \n    // Iterate over each grade and\
    \ find out letter grade\n    for grade in grades {\n        switch grade {\n \
    \       case 0...lowThreshold:\n            letterGrades.append(\"A+\")\n    \
    \    case lowThreshold ... midThreshold:\n            letterGrades.append(\"A\"\
    )\n        case midThreshold ... highThreshold:\n            letterGrades.append(\"\
    A-\")\n        case highThreshold ... lowMid:\n            letterGrades.append(\"\
    B+\")\n        case lowMid ... mid:\n            letterGrades.append(\"B\")\n\
    \        case mid ... high:\n            letterGrades.append(\"B-\")\n       \
    \ case high ... lowMid:\n            letterGrades.append(\"C+\")\n        case\
    \ lowMid ... mid:\n            letterGrades.append(\"C\")\n        case mid ...\
    \ high:\n            letterGrades.append(\"C-\")\n        case high ... lowMid:\n\
    \            letterGrades.append(\"D+\")\n        case lowMid ... mid:\n     \
    \       letterGrades.append(\"D\")\n        case mid ... high:\n            letterGrades.append(\"\
    D-\")\n        default:\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp07up5oo5.swift:30:15: error: left side of mutating operator isn't\
    \ mutable: 'total' is a 'let' constant\n        total += grade\n        ~~~~~\
    \ ^\n/tmp/tmp07up5oo5.swift:28:5: note: change 'let' to 'var' to make it mutable\n\
    \    let total = 0.0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var gpa : Double =\
    \ grades[0]\n    var grade : String = \"\"\n    var index = 0\n    while index\
    \ < grades.count {\n        gpa += grades[index]\n        if gpa > 3.0 {\n   \
    \         gpa -= 3.0\n            grade += \"B-\"\n        } else if gpa > 2.7\
    \ {\n            gpa -= 2.7\n            grade += \"B-\"\n        } else if gpa\
    \ > 2.3 {\n            gpa -= 2.3\n            grade += \"B-\"\n        } else\
    \ if gpa > 1.7 {\n            gpa -= 1.7\n            grade += \"B-\"\n      \
    \  } else if gpa > 1.0 {\n            gpa -= 1.0\n            grade += \"B-\"\n\
    \        } else if gpa > 0.7 {\n            gpa -= 0.7\n            grade += \"\
    B-\"\n        } else if gpa > 0.0 {\n            gpa -= 0.0\n            grade\
    \ += \"B-\"\n        } else if gpa < 3.0 {\n            gpa += 3.0\n         \
    \   grade += \"B+\"\n        } else if gpa < 2.7 {\n            gpa += 2.7\n \
    \           grade += \"B+\"\n        } else if gpa < 2.3 {\n            gpa +=\
    \ 2.3\n            grade += \"B+\"\n        } else if gpa < 1.7 {\n          \
    \  gpa += 1.7\n            grade += \"B+\"\n        } else if gpa < 1.0 {\n  \
    \          gpa += 1.0\n            grade += \"B+\"\n        } else if gpa < 0.7\
    \ {\n            gpa += 0.7\n            grade += \"B+\"\n        } else if gpa\
    \ < 0.0 {\n            gpa += 0.0\n            grade += \"B+\"\n        } else\
    \ if gpa < 3.0 {\n            gpa += 3.0\n            grade += \"C+\"\n      \
    \  } else if gpa < 2.7 {\n            gpa += 2.7\n            grade += \"C+\"\n\
    \        } else if gpa < 2.3 {\n            gpa += 2.3\n            grade += \"\
    C+\"\n        } else if gpa < 1.7 {\n            gpa += 1.7\n            grade\
    \ += \"C+\"\n        } else if gpa < 1.0 {\n            gpa += 1.0\n         \
    \   grade += \"C+\"\n        } else if gpa < 0.7 {\n            gpa += 0.7\n \
    \           grade += \"C+\"\n        } else if gpa < 0.0 {\n            gpa +=\
    \ 0.0\n            grade += \"C+\"\n        } else if gpa \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpph8lzmy_.swift:94:22: error: expected '{' after 'if' condition\n\
    \        } else if gpa \n                     ^\n/tmp/tmpph8lzmy_.swift:115:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpph8lzmy_.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpph8lzmy_.swift:94:19:\
    \ error: cannot convert value of type 'Double' to expected condition type 'Bool'\n\
    \        } else if gpa \n                  ^~~\n/tmp/tmpph8lzmy_.swift:98:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    func get_letter_grade(_ gpa: Double) -> String\
    \ {\n        if gpa > 4 {\n            return \"A+\"\n        } else if gpa >\
    \ 3.7 {\n            return \"A\"\n        } else if gpa > 3.3 {\n           \
    \ return \"A-\"\n        } else if gpa > 3 {\n            return \"B+\"\n    \
    \    } else if gpa > 2.7 {\n            return \"B\"\n        } else if gpa >\
    \ 2.3 {\n            return \"B-\"\n        } else if gpa > 2 {\n            return\
    \ \"C+\"\n        } else if gpa > 1.7 {\n            return \"C\"\n        } else\
    \ if gpa > 1.3 {\n            return \"C-\"\n        } else if gpa > 1 {\n   \
    \         return \"D+\"\n        } else if gpa > 0.7 {\n            return \"\
    D\"\n        } else if gpa > 0 {\n            return \"D-\"\n        } else {\n\
    \            return \"E\"\n        }\n    }\n    return grades.map{ get_letter_grade($0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp19yc7ouk/tmp19yc7ouk.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b821b93cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821b633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821b633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b821b6327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19yc7ouk                        0x000055913843c686 <unavailable> + 5766

    5    libc.so.6                          0x00002b821bb28460 __libc_start_main +
    245

    6    tmp19yc7ouk                        0x000055913843c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var results = [String]()\n\n    for grade in grades\
    \ {\n        if grade == 1.0 {\n            results.append(\"E\")\n          \
    \  continue\n        }\n\n        let lower = Int(grade * 100)\n        let higher\
    \ = Int(lower + 1)\n\n        for index in 0 ..< 4 {\n            let letter =\
    \ Double(index) * 'A' - lower\n            let letterGrade = Double(index) + letter\
    \ / 100\n            guard letterGrade >= 0.0 && letterGrade <= 5.0 else { continue\
    \ }\n\n            let letterGradeDouble = letterGrade * Double(index + 1) * 10\n\
    \n            let numeralString = \"\\(letterGradeDouble)\".paddingLeft(2, '0')\n\
    \            results.append(String(numeralString))\n        }\n    }\n\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmprt4rkq_x.swift:37:42: error: single-quoted string literal found,\
    \ use '\"'\n            let letter = Double(index) * 'A' - lower\n           \
    \                              ^~~\n                                         \"\
    A\"\n/tmp/tmprt4rkq_x.swift:43:71: error: single-quoted string literal found,\
    \ use '\"'\n            let numeralString = \"\\(letterGradeDouble)\".paddingLeft(2,\
    \ '0')\n                                                                     \
    \ ^~~\n                                                                      \"\
    0\"\n/tmp/tmprt4rkq_x.swift:37:42: error: cannot convert value of type 'String'\
    \ to expected argument type 'Double'\n            let letter = Double(index) *\
    \ 'A' - lower\n                                         ^\n/tmp/tmprt4rkq_x.swift:37:46:\
    \ error: binary operator '-' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n            let letter = Double(index) * 'A' - lower\n              \
    \           ~~~~~~~~~~~~~~~~~~~ ^ ~~~~~\n/tmp/tmprt4rkq_x.swift:37:46: note: overloads\
    \ for '-' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n            let letter = Double(index) * 'A' - lower\n         \
    \                                    ^\n/tmp/tmprt4rkq_x.swift:43:56: error: value\
    \ of type 'String' has no member 'paddingLeft'\n            let numeralString\
    \ = \"\\(letterGradeDouble)\".paddingLeft(2, '0')\n                          \
    \      ~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    var grade = grades[0]\n\
    \    var letterGrade = String()\n    if grade > 5.0 {\n        for element in\
    \ grades.dropFirst() {\n            if element > 5.0 {\n                grade\
    \ = element\n            } else {\n                if grade == 5.0 {\n       \
    \             letterGrade = \"D+\"\n                } else {\n               \
    \     letterGrade = String()\n                }\n                letterGrade =\
    \ letterGrade.prepend(String(format: \"%.1f\", grade))\n                if letter\
    \ grade == \"A+\" {\n                    letterGrade = \"A+\"\n              \
    \  } else if letter grade == \"A-\" {\n                    letterGrade = \"A-\"\
    \n                } else if letter grade == \"B+\" {\n                    letterGrade\
    \ = \"B+\"\n                } else if letter grade == \"B-\" {\n             \
    \       letterGrade = \"B-\"\n                } else if letter grade == \"C+\"\
    \ {\n                    letterGrade = \"C+\"\n                } else if letter\
    \ grade == \"C\" {\n                    letterGrade = \"C\"\n                }\
    \ else if letter grade == \"D+\" {\n                    letterGrade = \"D+\"\n\
    \                } else if letter grade == \"D\" {\n                    letterGrade\
    \ = \"D\"\n                } else if letter grade == \"D-\" {\n              \
    \      letterGrade = \"D-\"\n                } else {\n                    letterGrade\
    \ = \"E\"\n                }\n            }\n        }\n    } else {\n       \
    \ for element in grades.dropFirst() {\n            if element > 5.0 {\n      \
    \          letterGrade = String()\n                letterGrade = letterGrade.prepend(String(format:\
    \ \"%.1f\", element))\n                result.insert(letterGrade, at: 0)\n   \
    \         } else {\n                if grade == 5.0 {\n                    letterGrade\
    \ = \"D+\"\n                } else {\n                    letterGrade = String()\n\
    \                }\n                letterGrade = letterGrade.prepend(String(format:\
    \ \"%.1f\", element))\n                result.insert(letterGrade, at: 0)\n   \
    \         }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpni9ge844.swift:39:27: error: expected '{' after 'if' condition\n\
    \                if letter grade == \"A+\" {\n                          ^\n/tmp/tmpni9ge844.swift:41:34:\
    \ error: expected '{' after 'if' condition\n                } else if letter grade\
    \ == \"A-\" {\n                                 ^\n/tmp/tmpni9ge844.swift:43:34:\
    \ error: expected '{' after 'if' condition\n                } else if letter grade\
    \ == \"B+\" {\n                                 ^\n/tmp/tmpni9ge844.swift:45:34:\
    \ error: expected '{' after 'if' condition\n                } else if letter grade\
    \ == \"B-\" {\n                                 ^\n/tmp/tmpni9ge844.swift:47:34:\
    \ error: expected '{' after 'if' condition\n                } else if letter grade\
    \ == \"C+\" {\n                                 ^\n/tmp/tmpni9ge844.swift:49:34:\
    \ error: expected '{' after 'if' condition\n                } else if letter grade\
    \ == \"C\" {\n                                 ^\n/tmp/tmpni9ge844.swift:51:34:\
    \ error: expected '{' after 'if' condition\n                } else if letter grade\
    \ == \"D+\" {\n                                 ^\n/tmp/tmpni9ge844.swift:53:34:\
    \ error: expected '{' after 'if' condition\n                } else if letter grade\
    \ == \"D\" {\n                                 ^\n/tmp/tmpni9ge844.swift:55:34:\
    \ error: expected '{' after 'if' condition\n                } else if letter grade\
    \ == \"D-\" {\n                                 ^\n/tmp/tmpni9ge844.swift:38:51:\
    \ error: no exact matches in call to initializer \n                letterGrade\
    \ = letterGrade.prepend(String(format: \"%.1f\", grade))\n                   \
    \                               ^\n/tmp/tmpni9ge844.swift:38:51: note: found candidate\
    \ with type '(String) -> String'\n                letterGrade = letterGrade.prepend(String(format:\
    \ \"%.1f\", grade))\n                                                  ^\n/tmp/tmpni9ge844.swift:38:51:\
    \ note: found candidate with type '(String, Int) -> String'\n                letterGrade\
    \ = letterGrade.prepend(String(format: \"%.1f\", grade))\n                   \
    \                               ^\n/tmp/tmpni9ge844.swif"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.count == 0 {\n        return []\n   \
    \ }\n\n    var gradeLetters = [String]()\n    var index = 0\n    var indexMax\
    \ = 0\n\n    for grade in grades {\n        gradeLetters.append(\"E\")\n     \
    \   indexMax = index\n        for index = indexMax + 1; index < grades.count;\
    \ index++ {\n            if grades[index] == grade {\n                break\n\
    \            }\n            if grades[index] > grade {\n                break\n\
    \            }\n            if grades[index] == 0.0 {\n                break\n\
    \            }\n        }\n\n        if index < grades.count {\n            gradeLetters.insert(gradeLetters.end(),\
    \ grades[indexMax] + \"-\")\n        }\n    }\n\n    return gradeLetters\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg8eyk_jw.swift:36:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for index = indexMax + 1; index < grades.count; index++\
    \ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg8eyk_jw.swift:49:70:\
    \ error: binary operator '+' cannot be applied to operands of type 'Double' and\
    \ 'String'\n            gradeLetters.insert(gradeLetters.end(), grades[indexMax]\
    \ + \"-\")\n                                                    ~~~~~~~~~~~~~~~~\
    \ ^ ~~~\n/tmp/tmpg8eyk_jw.swift:49:70: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Double, Double), (String, String)\n   \
    \         gradeLetters.insert(gradeLetters.end(), grades[indexMax] + \"-\")\n\
    \                                                                     ^\n/tmp/tmpg8eyk_jw.swift:49:26:\
    \ error: no exact matches in call to instance method 'insert'\n            gradeLetters.insert(gradeLetters.end(),\
    \ grades[indexMax] + \"-\")\n                         ^\n/tmp/tmpg8eyk_jw.swift:49:26:\
    \ note: found candidate with type '(__owned String, Int) -> ()'\n            gradeLetters.insert(gradeLetters.end(),\
    \ grades[indexMax] + \"-\")\n                         ^\n/tmp/tmpg8eyk_jw.swift:49:46:\
    \ error: value of type '[String]' has no member 'end'\n            gradeLetters.insert(gradeLetters.end(),\
    \ grades[indexMax] + \"-\")\n                                ~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gpaIndex = grades.count - 1\n\n    let gpaMin\
    \ = grades[0]\n    let gpaMax = grades[gpaIndex]\n    let gpaRange = Double((gpaMax\
    \ - gpaMin))\n\n    let numericalIndexes = [Int](count: gpaIndex + 1, repeatedValue:\
    \ 0)\n    \n    for i in 0..<gpaIndex {\n        numericalIndexes[i] = (grades[i]\
    \ - gpaMin) / gpaRange\n    }\n\n    let numericalIndexesCount = numericalIndexes.count\n\
    \    let letterGrades: [String] = []\n    for i in 0..<numericalIndexesCount {\n\
    \        let gpa = numericalIndexes[i]\n        let letterGrade = gpaToLetter(gpa)\n\
    \        letterGrades.append(letterGrade)\n    }\n    return letterGrades\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp42a0rucf.swift:31:28: error: no exact matches in call to initializer\
    \ \n    let numericalIndexes = [Int](count: gpaIndex + 1, repeatedValue: 0)\n\
    \                           ^\n/tmp/tmp42a0rucf.swift:31:28: note: candidate has\
    \ partially matching parameter list (repeating: Int, count: Int)\n    let numericalIndexes\
    \ = [Int](count: gpaIndex + 1, repeatedValue: 0)\n                           ^\n\
    /tmp/tmp42a0rucf.swift:31:28: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    let numericalIndexes = [Int](count: gpaIndex\
    \ + 1, repeatedValue: 0)\n                           ^\n/tmp/tmp42a0rucf.swift:41:27:\
    \ error: cannot find 'gpaToLetter' in scope\n        let letterGrade = gpaToLetter(gpa)\n\
    \                          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var lettergrades = [String]()\n    var gpa = grades.max()!\n\
    \    if gpa > 3.0 {\n        for gpa in grades {\n            var lettergrade\
    \ = String()\n            if gpa <= 3.0 {\n                lettergrade = \"C+\"\
    \n            } else if gpa > 3.0 && gpa <= 3.7 {\n                lettergrade\
    \ = \"C\"\n            } else if gpa > 3.7 && gpa <= 3.3 {\n                lettergrade\
    \ = \"C\"\n            } else if gpa > 3.3 && gpa <= 3.0 {\n                lettergrade\
    \ = \"B+\"\n            } else if gpa > 3.0 && gpa <= 2.7 {\n                lettergrade\
    \ = \"B\"\n            } else if gpa > 2.7 && gpa <= 2.3 {\n                lettergrade\
    \ = \"B-\"\n            } else if gpa > 2.3 && gpa <= 2.0 {\n                lettergrade\
    \ = \"A-\"\n            } else if gpa > 2.0 && gpa <= 1.7 {\n                lettergrade\
    \ = \"A+\"\n            } else if gpa > 1.7 && gpa <= 1.0 {\n                lettergrade\
    \ = \"A\"\n            } else if gpa > 1.0 && gpa <= 0.7 {\n                lettergrade\
    \ = \"A-\"\n            } else if gpa > 0.7 && gpa <= 0.0 {\n                lettergrade\
    \ = \"D+\"\n            } else if gpa > 0.0 {\n                lettergrade = \"\
    D\"\n            }\n            lettergrades.append(lettergrade)\n        }\n\
    \    }\n    return lettergrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp0d01qbr8/tmp0d01qbr8.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8784274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8783f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8783f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8783f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0d01qbr8                        0x0000559aeb4bd976 <unavailable> + 6518

    5    libc.so.6                          0x00002b8784460460 __libc_start_main +
    245

    6    tmp0d01qbr8                        0x0000559aeb4bd499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: { (acc, curr) -> Double in\n        return acc + curr\n    })\n   \
    \ for grade, letter in grades.enumerated() {\n        if gpa >= grade {\n    \
    \        letterGrades.append(letter)\n        } else {\n            letterGrades.append(letterGrades[letterGrades.count\
    \ - 1])\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3td3uxzx.swift:29:14: error: expected 'in' after for-each pattern\n\
    \    for grade, letter in grades.enumerated() {\n             ^\n/tmp/tmp3td3uxzx.swift:29:14:\
    \ error: expected Sequence expression for for-each loop\n    for grade, letter\
    \ in grades.enumerated() {\n             ^\n/tmp/tmp3td3uxzx.swift:26:28: error:\
    \ extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: { (acc, curr) -> Double in\n                           ^   ~~~~~~~~~\n\
    \                               \n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: You should be able to do this without\
    \ using a loop\n    // loop over the array of grades\n    // if grade is > 4 print\
    \ letter\n    // if grade < 0 print letter\n    // else print letter plus the\
    \ letter for the negative sign\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpdo1ma154.swift:30:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let total_gpa = grades.reduce(0, {$0 + $1}) //sum\
    \ of all grades\n    var grades : [String] = []\n    \n    if total_gpa < 0 {\n\
    \        return grades\n    }\n    \n    if total_gpa < 3.0 {\n        grades.append(\"\
    E\")\n    } else if total_gpa < 3.3 {\n        grades.append(\"B-\")\n    } else\
    \ if total_gpa < 3.7 {\n        grades.append(\"B-\")\n    } else if total_gpa\
    \ < 4.0 {\n        grades.append(\"B-\")\n    } else if total_gpa < 4.3 {\n  \
    \      grades.append(\"B-\")\n    } else if total_gpa < 4.7 {\n        grades.append(\"\
    B-\")\n    } else if total_gpa < 5.0 {\n        grades.append(\"B-\")\n    } else\
    \ if total_gpa < 5.3 {\n        grades.append(\"B-\")\n    } else if total_gpa\
    \ < 5.7 {\n        grades.append(\"B-\")\n    } else if total_gpa < 6.0 {\n  \
    \      grades.append(\"B-\")\n    } else if total_gpa < 6.3 {\n        grades.append(\"\
    B-\")\n    } else if total_gpa < 6.7 {\n        grades.append(\"B-\")\n    } else\
    \ if total_gpa < 7.0 {\n        grades.append(\"B-\")\n    } else if total_gpa\
    \ < 7.3 {\n        grades.append(\"B-\")\n    } else if total_gpa < 7.7 {\n  \
    \      grades.append(\"B-\")\n    } else if total_gpa < 8.0 {\n        grades.append(\"\
    B-\")\n    } else if total_gpa < 8.3 {\n        grades.append(\"B-\")\n    } else\
    \ if total_gpa < 8.7 {\n        grades.append(\"B-\")\n    } else if total_gpa\
    \ < 9.0 {\n        grades.append(\"B-\")\n    } else if total_gpa < 9.3 {\n  \
    \      grades.append(\"B-\")\n    } else if total_gpa < 9.7 {\n        grades.append(\"\
    B-\")\n    } else if total_gpa < 10.0 {\n        grades.append(\"B-\")\n    }\
    \ else if total_gpa < 10.3 {\n        grades.append(\"B-\")\n    } else if total_gpa\
    \ < 10.7 {\n        grades.append(\"B-\")\n    } else if total_gpa < 11.0 {\n\
    \        grades.append(\"B-\")\n    } else if total_gpa < 11.3 {\n        grades.append(\"\
    B-\")\n    } else if total_gpa < 11.7 {\n        grades.append(\"B-\")\n    }\
    \ else if total_gpa < 12.0 {\n        grades.append(\"B-\")\n    } else if total_gpa\
    \ < 12.3 {\n        grades.append(\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyl2yjgya.swift:89:23: error: unterminated string literal\n    \
    \    grades.append(\"\n                      ^\n/tmp/tmpyl2yjgya.swift:110:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpyl2yjgya.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpyl2yjgya.swift:89:23:\
    \ error: missing argument for parameter #1 in call\n        grades.append(\"\n\
    \                      ^\n                      <#String#>\nSwift.Array:6:37:\
    \ note: 'append' declared here\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\n/tmp/tmpyl2yjgya.swift:93:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    var numericalGrades\
    \ = [Double]()\n    var letter = String()\n    \n    for grade in grades {\n \
    \       letter = String(grade % 10)\n        \n        if letter != \"E\" && letter\
    \ != \"F\" && letter != \"M\" {\n            if letter < \"1\" {\n           \
    \     letter = \"0\" + letter\n            }\n        }\n        \n        if\
    \ letter != \"E\" {\n            numericalGrades.append(Double(letter)!)\n   \
    \     } else {\n            numericalGrades.append(Double(letter)!)\n        \
    \    letter_grades.append(\"E\")\n        }\n    }\n    \n    var min = min(numericalGrades)\n\
    \    var max = max(numericalGrades)\n    \n    for grade in numericalGrades {\n\
    \        if grade < min {\n            letter_grades.append(\"F\")\n        }\
    \ else {\n            if grade < max {\n                if grade == min {\n  \
    \                  letter_grades.append(\"D-\")\n                } else {\n  \
    \                  letter_grades.append(\"D\")\n                }\n          \
    \  } else if grade == min {\n                letter_grades.append(\"D+\")\n  \
    \          } else {\n                letter_grades.append(\"D\")\n           \
    \ }\n        }\n    }\n    \n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzguvm9_d.swift:30:31: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        letter = String(grade % 10)\n\
    \                              ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpzguvm9_d.swift:46:34: error: missing argument for parameter\
    \ #2 in call\n    var min = min(numericalGrades)\n                           \
    \      ^\n                                 , <#[Double]#>\nSwift.min:1:24: note:\
    \ 'min' declared here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n/tmp/tmpzguvm9_d.swift:47:34: error:\
    \ missing argument for parameter #2 in call\n    var max = max(numericalGrades)\n\
    \                                 ^\n                                 , <#[Double]#>\n\
    Swift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var array = [String]()\n    var firstLetter = String()\n\
    \    var secondLetter = String()\n    var thirdLetter = String()\n    var fourthLetter\
    \ = String()\n    var fifthLetter = String()\n    \n    array.append(\"E\")\n\
    \    \n    if grades.count < 5 { return array }\n    \n    for _ in 0..<grades.count\
    \ {\n        if grades.last > 4.0 {\n            array.append(firstLetter)\n \
    \           array.append(secondLetter)\n            array.append(thirdLetter)\n\
    \            array.append(fourthLetter)\n            array.append(fifthLetter)\n\
    \            firstLetter = String()\n            secondLetter = String()\n   \
    \         thirdLetter = String()\n            fourthLetter = String()\n      \
    \      fifthLetter = String()\n            break\n        }\n        \n      \
    \  let grade = grades.last\n        let gpa = grade\n        \n        switch\
    \ grade {\n        case 0...2.0:\n            firstLetter.append(\"A\")\n    \
    \    case 2.0...4.0:\n            firstLetter.append(\"B\")\n        case 4.0...6.0:\n\
    \            firstLetter.append(\"C\")\n        case 6.0...8.0:\n            firstLetter.append(\"\
    D\")\n        case 8.0...10.0:\n            firstLetter.append(\"E\")\n      \
    \  case 10.0...11.0:\n            firstLetter.append(\"F\")\n        case 11.0...12.0:\n\
    \            firstLetter.append(\"F\")\n        case 12...14.0:\n            secondLetter.append(\"\
    A\")\n        case 14...16.0:\n            secondLetter.append(\"B\")\n      \
    \  case 16...18.0:\n            secondLetter.append(\"C\")\n        case 18...20.0:\n\
    \            secondLetter.append(\"D\")\n        case 20...22.0:\n           \
    \ secondLetter.append(\"E\")\n        case 22.0...24.0:\n            secondLetter.append(\"\
    F\")\n        case 24...26.0:\n            thirdLetter.append(\"A\")\n       \
    \ case 26...28.0:\n            thirdLetter.append(\"B\")\n        case 28...30.0:\n\
    \            thirdLetter.append(\"C\")\n        case 30.0...32.0:\n          \
    \  thirdLetter.append(\"D\")\n        case 32...34.0:\n            thirdLetter.append(\"\
    E\")\n        case 34.0...36.0:\n            thirdLetter.append(\"F\")\n     \
    \   case 36...38.0:\n            fourthLetter.append(\"A\")\n        case 38...40.0:\n\
    \            fourthLetter.append(\"B\")\n        case 40.0...42.0:\n         \
    \   fourthLetter.append(\"C\")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptt_5v8qf.swift:120:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmptt_5v8qf.swift:36:31:\
    \ note: to match this opening '{'\n    for _ in 0..<grades.count {\n         \
    \                     ^\n/tmp/tmptt_5v8qf.swift:120:66: error: expected '}' at\
    \ end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) ==\
    \ [\"E\", \"D-\"])\n                                                         \
    \        ^\n/tmp/tmptt_5v8qf.swift:24:59: note: to match this opening '{'\nfunc\
    \ numerical_letter_grade(grades: [Double]) -> [String] {\n                   \
    \                                       ^\n/tmp/tmptt_5v8qf.swift:37:19: error:\
    \ value of optional type 'Double?' must be unwrapped to a value of type 'Double'\n\
    \        if grades.last > 4.0 {\n                  ^\n/tmp/tmptt_5v8qf.swift:37:19:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if grades.last > 4.0 {\n                  ^\n               \
    \        ?? <#default value#>\n/tmp/tmptt_5v8qf.swift:37:19: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        if\
    \ grades.last > 4.0 {\n                  ^\n                      !\n/tmp/tmptt_5v8qf.swift:55:18:\
    \ error: value of optional type 'Double?' must be unwrapped to a value of type\
    \ 'Double'\n        case 0...2.0:\n                 ^\n/tmp/tmptt_5v8qf.swift:55:18:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        case 0...2.0:\n                 ^\n                     ?? <#default\
    \ value#>\n/tmp/tmptt_5v8qf.swift:55:18: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        case 0...2.0:\n    \
    \             ^\n                    !\n/tmp/tmptt_5v8qf.swift:57:20: error: value\
    \ of optional type 'Double?' must be unwrapped to a value of type 'Double'\n \
    \       case 2.0...4.0:\n                   ^\n/tmp/tmptt_5v8qf.swift:57:20: note:\
    \ coalesce using '??' t"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var previousGPA\
    \ = grades.last ?? 0.0\n    for grade in grades {\n        let currentGPA = grade\
    \ - previousGPA\n        let letterGrade = String.init(format: \"%.1f\", currentGPA)\n\
    \        letterGrades.append(letterGrade)\n        previousGPA = grade\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpunzqd7x7.swift:29:34: error: no exact matches in call to initializer\
    \ \n        let letterGrade = String.init(format: \"%.1f\", currentGPA)\n    \
    \                             ^\nSwift.String:4:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpunzqd7x7.swift:29:34:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        let letterGrade = String.init(format: \"%.1f\", currentGPA)\n\
    \                                 ^\nSwift.String:3:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeStrings = [String]()\n\n    let maxGrade\
    \ = grades.max()!\n    let minGrade = grades.min()!\n\n    if grades.count > 0\
    \ {\n        let firstGrade = grades.first!\n        gradeStrings.append(String(format:\
    \ \"%+.1f\", firstGrade))\n    }\n\n    for grade in grades {\n        if grade\
    \ > maxGrade {\n            gradeStrings.append(String(format: \"%+.1f\", maxGrade))\n\
    \        } else if grade < minGrade {\n            gradeStrings.append(String(format:\
    \ \"%+.1f\", minGrade))\n        } else if grade == maxGrade {\n            gradeStrings.append(String(format:\
    \ \"%+.1f\", maxGrade))\n        } else if grade == minGrade {\n            gradeStrings.append(String(format:\
    \ \"%+.1f\", minGrade))\n        } else {\n            let gpa = grade / maxGrade\n\
    \            let letterGrade = findLetterGrade(gpa)\n            gradeStrings.append(letterGrade)\n\
    \        }\n    }\n\n    gradeStrings.append(String(format: \"%+.1f\", grades.last!))\n\
    \    return gradeStrings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp_aaix1h.swift:32:29: error: no exact matches in call to initializer\
    \ \n        gradeStrings.append(String(format: \"%+.1f\", firstGrade))\n     \
    \                       ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpp_aaix1h.swift:32:29:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        gradeStrings.append(String(format: \"%+.1f\", firstGrade))\n \
    \                           ^\nSwift.String:3:12: note: candidate '(String) ->\
    \ String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmpp_aaix1h.swift:37:33: error:\
    \ no exact matches in call to initializer \n            gradeStrings.append(String(format:\
    \ \"%+.1f\", maxGrade))\n                                ^\nSwift.String:4:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmpp_aaix1h.swift:37:33: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n            gradeStrings.append(String(format:\
    \ \"%+.1f\", maxGrade))\n                                ^\nSwift.String:3:12:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    public init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.String:4:12: "
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n\n    // first we\
    \ calculate the number of points for each student\n    var pointsCount: [Double]\
    \ = [Double](repeating: 0.0, count: grades.count)\n    for grade in grades {\n\
    \        pointsCount[grade] += 1\n    }\n\n    // then we calculate for each student\
    \ what letter grade should be\n    // then we append it to the list of letters\n\
    \    for index, _ in pointsCount.enumerated() {\n        let points = pointsCount[index]\n\
    \        var gradeLetter: String\n\n        switch points {\n        case 0:\n\
    \            gradeLetter = \"E\"\n        case 1:\n            gradeLetter = \"\
    D+\"\n        case 2:\n            gradeLetter = \"D\"\n        case 3:\n    \
    \        gradeLetter = \"C+\"\n        case 4:\n            gradeLetter = \"C\"\
    \n        case 5:\n            gradeLetter = \"B-\"\n        case 6:\n       \
    \     gradeLetter = \"B\"\n        case 7:\n            gradeLetter = \"A+\"\n\
    \        case 8:\n            gradeLetter = \"A\"\n        case 9:\n         \
    \   gradeLetter = \"A+\"\n        default:\n            gradeLetter = \"?\"\n\
    \        }\n\n        letterGrades.append(gradeLetter)\n    }\n\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjoucdh5p.swift:35:14: error: expected 'in' after for-each pattern\n\
    \    for index, _ in pointsCount.enumerated() {\n             ^\n/tmp/tmpjoucdh5p.swift:35:14:\
    \ error: expected Sequence expression for for-each loop\n    for index, _ in pointsCount.enumerated()\
    \ {\n             ^\n/tmp/tmpjoucdh5p.swift:30:21: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n        pointsCount[grade]\
    \ += 1\n                    ^\n                    Int( )\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    grades.sort {$0.0 < $1.0}\n    var letterGrades\
    \ = [String]()\n\n    for grade in grades {\n        if grade >= 3.0 {\n     \
    \       letterGrades.append(\"A+\")\n        }\n        else if grade >= 2.7 {\n\
    \            letterGrades.append(\"B\")\n        }\n        else if grade >= 2.3\
    \ {\n            letterGrades.append(\"B-\")\n        }\n        else if grade\
    \ >= 1.3 {\n            letterGrades.append(\"C+\")\n        }\n        else if\
    \ grade >= 1.1 {\n            letterGrades.append(\"C\")\n        }\n        else\
    \ if grade >= 0.7 {\n            letterGrades.append(\"D\")\n        }\n     \
    \   else if grade >= 0.3 {\n            letterGrades.append(\"D-\")\n        }\n\
    \        else if grade >= 0.0 {\n            letterGrades.append(\"E\")\n    \
    \    }\n        else {\n            letterGrades.append(\"F\")\n        }\n  \
    \  }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe55a9qy6.swift:25:12: error: cannot use mutating member on immutable\
    \ value: 'grades' is a 'let' constant\n    grades.sort {$0.0 < $1.0}\n    ~~~~~~\
    \ ^\n/tmp/tmpe55a9qy6.swift:25:21: error: value of type 'Double' has no member\
    \ '0'\n    grades.sort {$0.0 < $1.0}\n                 ~~ ^\n/tmp/tmpe55a9qy6.swift:25:28:\
    \ error: value of type 'Double' has no member '0'\n    grades.sort {$0.0 < $1.0}\n\
    \                        ~~ ^\n"
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // code goes here\n    var gradeLetter: [String]\
    \ = []\n    \n    gradeLetter.append(grades.reduce((0.0, Double.max), combine:\
    \ {$0 > $1.0 ? $0 : $1}))\n    gradeLetter.append(grades.reduce((0.0, Double.min),\
    \ combine: {$0 > $1.0 ? $0 : $1}))\n    gradeLetter.append(grades.reduce((0.0,\
    \ Double.zero), combine: {$0 > $1.0 ? $0 : $1}))\n    gradeLetter.append(grades.reduce((0.0,\
    \ Double.zero), combine: {$0 > $1.0 ? $0 : $1}))\n\n    return gradeLetter\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7qk36e4t.swift:28:66: error: extra argument 'combine' in call\n\
    \    gradeLetter.append(grades.reduce((0.0, Double.max), combine: {$0 > $1.0 ?\
    \ $0 : $1}))\n                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7qk36e4t.swift:28:51: error: type 'Double' has no member 'max'\n    gradeLetter.append(grades.reduce((0.0,\
    \ Double.max), combine: {$0 > $1.0 ? $0 : $1}))\n                            \
    \               ~~~~~~ ^~~\n/tmp/tmp7qk36e4t.swift:29:66: error: extra argument\
    \ 'combine' in call\n    gradeLetter.append(grades.reduce((0.0, Double.min), combine:\
    \ {$0 > $1.0 ? $0 : $1}))\n                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7qk36e4t.swift:29:51: error: type 'Double' has no member 'min'\n    gradeLetter.append(grades.reduce((0.0,\
    \ Double.min), combine: {$0 > $1.0 ? $0 : $1}))\n                            \
    \               ~~~~~~ ^~~\n/tmp/tmp7qk36e4t.swift:30:67: error: extra argument\
    \ 'combine' in call\n    gradeLetter.append(grades.reduce((0.0, Double.zero),\
    \ combine: {$0 > $1.0 ? $0 : $1}))\n                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7qk36e4t.swift:31:67: error: extra argument 'combine' in call\n    gradeLetter.append(grades.reduce((0.0,\
    \ Double.zero), combine: {$0 > $1.0 ? $0 : $1}))\n                           \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 { // 4+ grades\n            let letterGrade = grade\
    \ >= 3.70 ? \"A+\" :\n                grade >= 3.30 ? \"A-\" :\n             \
    \       grade >= 3.00 ? \"B+\" :\n                        grade >= 2.70 ? \"B\"\
    \ :\n                            grade >= 2.30 ? \"B-\" :\n                  \
    \              grade >= 2.00 ? \"C+\" :\n                                    grade\
    \ >= 1.70? \"C\" :\n                                        grade >= 1.30 ? \"\
    C-\" :\n                                            grade >= 1.00 ? \"D+\" :\n\
    \                                                grade >= 0.70? \"D\" :\n    \
    \                                                grade >= 0.50? \"D-\" :\n   \
    \                                                     grade >= 0.00? \"E\" :\n\
    \                                                            \"\"\n          \
    \  result.append(letterGrade)\n        } else { // 0-4 grades\n            result.append(\"\
    \")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptr0yi822.swift:34:51: error: consecutive statements on a line must\
    \ be separated by ';'\n                                    grade >= 1.70? \"C\"\
    \ :\n                                                  ^\n                   \
    \                               ;\n/tmp/tmptr0yi822.swift:34:55: error: consecutive\
    \ statements on a line must be separated by ';'\n                            \
    \        grade >= 1.70? \"C\" :\n                                            \
    \          ^\n                                                      ;\n/tmp/tmptr0yi822.swift:34:56:\
    \ error: expected expression\n                                    grade >= 1.70?\
    \ \"C\" :\n                                                       ^\n/tmp/tmptr0yi822.swift:28:47:\
    \ error: result values in '? :' expression have mismatching types 'String' and\
    \ 'Bool'\n            let letterGrade = grade >= 3.70 ? \"A+\" :\n           \
    \                                   ^~~~\n/tmp/tmptr0yi822.swift:29:33: error:\
    \ result values in '? :' expression have mismatching types 'String' and 'Bool'\n\
    \                grade >= 3.30 ? \"A-\" :\n                                ^~~~\n\
    /tmp/tmptr0yi822.swift:30:37: error: result values in '? :' expression have mismatching\
    \ types 'String' and 'Bool'\n                    grade >= 3.00 ? \"B+\" :\n  \
    \                                  ^~~~\n/tmp/tmptr0yi822.swift:31:41: error:\
    \ result values in '? :' expression have mismatching types 'String' and 'Bool'\n\
    \                        grade >= 2.70 ? \"B\" :\n                           \
    \             ^~~\n/tmp/tmptr0yi822.swift:32:45: error: result values in '? :'\
    \ expression have mismatching types 'String' and 'Bool'\n                    \
    \        grade >= 2.30 ? \"B-\" :\n                                          \
    \  ^~~~\n/tmp/tmptr0yi822.swift:33:49: error: result values in '? :' expression\
    \ have mismatching types 'String' and 'Bool'\n                               \
    \ grade >= 2.00 ? \"C+\" :\n                                                ^~~~\n\
    /tmp/tmptr0yi822.swift:34:50: error: value of optional type 'Double?' must be\
    \ unwrapped to a value of type 'Dou"
  stdout: ''
  timestamp: 1660014971
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n\n    for grade\
    \ in grades {\n        switch grade {\n        case 3.0: letterGrades.append(\"\
    A+\")\n        case 3.3: letterGrades.append(\"A-\")\n        case 3.5: letterGrades.append(\"\
    B+\")\n        case 3.7: letterGrades.append(\"B\")\n        case 3.0: letterGrades.append(\"\
    B-\")\n        case 3.3: letterGrades.append(\"C+\")\n        case 3.5: letterGrades.append(\"\
    C\")\n        case 3.7: letterGrades.append(\"C-\")\n        case 3.0: letterGrades.append(\"\
    D+\")\n        case 3.3: letterGrades.append(\"D\")\n        case 3.5: letterGrades.append(\"\
    D-\")\n        case 3.7: letterGrades.append(\"D+\")\n        case 3.0: letterGrades.append(\"\
    D-\")\n        case 3.0: letterGrades.append(\"E\")\n        default: letterGrades.append(\"\
    E\")\n        }\n    }\n\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3lyuv2g2/tmp3lyuv2g2.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab589352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab589049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab589049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5890487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3lyuv2g2                        0x00005625ac5a17f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab58953e460 __libc_start_main +
    245

    6    tmp3lyuv2g2                        0x00005625ac5a1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gpa = grades.sorted()\n    let grade = gpa.reduce((0.0,\
    \ \"\") { $0.0 + $1.0 })\n    if grade == 0.0 {\n        return [\"E\"]\n    }\
    \ else {\n        let numerical_grade = (grade * 9.0) / 5.0\n        let gpa_min\
    \ = grades.index(gpa.min()!)\n        let gpa_max = grades.index(gpa.max()!)\n\
    \        let letters = [String]()\n        for i in 0..<gpa_max - gpa_min + 1\
    \ {\n            letters.append(\"A-\")\n        }\n        for i in 0..<gpa_max\
    \ - gpa_min + 1 {\n            if i != gpa_max - gpa_min {\n                letters.append(\"\
    A-\")\n            } else {\n                letters.append(\"\" + String(numerical_grade\
    \ - round(numerical_grade)))\n            }\n        }\n        for i in 0..<gpa_max\
    \ - gpa_min + 1 {\n            if i == gpa_max - gpa_min {\n                letters.append(\"\
    \" + String(numerical_grade))\n            } else {\n                letters.append(\"\
    \" + String(numerical_grade - round(numerical_grade)))\n            }\n      \
    \  }\n        for i in 0..<gpa_max - gpa_min + 1 {\n            if i == gpa_max\
    \ - gpa_min {\n                letters.append(\"\" + String(numerical_grade))\n\
    \            } else {\n                letters.append(\"A-\")\n            }\n\
    \        }\n        return letters\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxv7_4gz7.swift:26:38: error: expected ',' separator\n    let grade\
    \ = gpa.reduce((0.0, \"\") { $0.0 + $1.0 })\n                                \
    \     ^\n                                    ,\n/tmp/tmpxv7_4gz7.swift:26:50:\
    \ error: value of type 'Double' has no member '0'\n    let grade = gpa.reduce((0.0,\
    \ \"\") { $0.0 + $1.0 })\n                                              ~~ ^\n\
    /tmp/tmpxv7_4gz7.swift:31:36: error: missing argument label 'of:' in call\n  \
    \      let gpa_min = grades.index(gpa.min()!)\n                              \
    \     ^\n                                   of: \n/tmp/tmpxv7_4gz7.swift:32:36:\
    \ error: missing argument label 'of:' in call\n        let gpa_max = grades.index(gpa.max()!)\n\
    \                                   ^\n                                   of:\
    \ \n/tmp/tmpxv7_4gz7.swift:34:30: error: cannot convert value of type 'Duration'\
    \ to expected argument type 'Int'\n        for i in 0..<gpa_max - gpa_min + 1\
    \ {\n                             ^\n/tmp/tmpxv7_4gz7.swift:37:30: error: cannot\
    \ convert value of type 'Duration' to expected argument type 'Int'\n        for\
    \ i in 0..<gpa_max - gpa_min + 1 {\n                             ^\n/tmp/tmpxv7_4gz7.swift:44:30:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        for i in 0..<gpa_max - gpa_min + 1 {\n                             ^\n\
    /tmp/tmpxv7_4gz7.swift:51:30: error: cannot convert value of type 'Duration' to\
    \ expected argument type 'Int'\n        for i in 0..<gpa_max - gpa_min + 1 {\n\
    \                             ^\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradesCopy = grades\n    let maxGrade = grades.max()!\n\
    \    let minGrade = grades.min()!\n    \n    var letterGrades = [String]()\n \
    \   let gradesCount = grades.count\n    \n    guard gradesCount > 0 else {\n \
    \       return letterGrades\n    }\n    \n    let numberOfLetterGrades = (maxGrade\
    \ - minGrade)/2.0\n    let average = grades.reduce(0.0, +) / Double(gradesCount)\n\
    \    let halfOfAvg = (average / 2.0).rounded(.towardZero)\n    \n    for i in\
    \ 0..<numberOfLetterGrades {\n        let value = minGrade + Double(i) * Double(halfOfAvg)\n\
    \        let letter = grade_table(value)\n        letterGrades.append(letter)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmwvoleyr.swift:40:15: error: protocol 'Sequence' requires that\
    \ 'Double' conform to 'SignedInteger'\n    for i in 0..<numberOfLetterGrades {\n\
    \              ^\nSwift.Range:1:11: note: requirement from conditional conformance\
    \ of 'Range<Double>' to 'Sequence'\nextension Range : Sequence where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpmwvoleyr.swift:40:15: error:\
    \ referencing instance method 'makeIterator()' on 'Range' requires that 'Double'\
    \ conform to 'SignedInteger'\n    for i in 0..<numberOfLetterGrades {\n      \
    \        ^\nSwift.Range:1:11: note: requirement from conditional conformance of\
    \ 'Range<Double>' to 'Collection'\nextension Range : Collection, BidirectionalCollection,\
    \ RandomAccessCollection where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n<unknown>:0: error: referencing instance method 'next()' on\
    \ 'Range' requires that 'Double' conform to 'SignedInteger'\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<Double>' to 'Collection'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpmwvoleyr.swift:42:22:\
    \ error: cannot find 'grade_table' in scope\n        let letter = grade_table(value)\n\
    \                     ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    // Step 1: Calculate the sum of the grades\n\
    \    var gradesSum = grades.reduce(0, +)\n\n    // Step 2: Calculate the difference\
    \ between the sum of the grades and the average\n    var difference = gradesSum\
    \ / Double(grades.count)\n\n    // Step 3: Calculate the average of the grades\n\
    \    let average = grades.reduce(0, +) / Double(grades.count)\n\n    // Step 4:\
    \ Calculate the first letter grade based on the difference\n    // The letter\
    \ grades are A-\n    let firstLetterGrade = (Double(average) - Double(difference))\
    \ * 20\n\n    // Step 5: Calculate the second letter grade based on the difference\n\
    \    // The letter grades are B+\n    let secondLetterGrade = (Double(average)\
    \ + Double(difference)) * 20\n\n    // Step 6: Calculate the third letter grade\
    \ based on the difference\n    // The letter grades are B-\n    let thirdLetterGrade\
    \ = (Double(average) - Double(difference)) * 15\n\n    // Step 7: Calculate the\
    \ fourth letter grade based on the difference\n    // The letter grades are C-\n\
    \    let fourthLetterGrade = (Double(average) + Double(difference)) * 15\n\n \
    \   // Step 8: Calculate the fifth letter grade based on the difference\n    //\
    \ The letter grades are D+\n    let fifthLetterGrade = (Double(average) + Double(difference))\
    \ * 10\n\n    // Step 9: Calculate the sixth letter grade based on the difference\n\
    \    // The letter grades are D-\n    let sixthLetterGrade = (Double(average)\
    \ - Double(difference)) * 10\n\n    // Step 10: Calculate the seventh letter grade\
    \ based on the difference\n    // The letter grades are E\n    let seventhLetterGrade\
    \ = Double(average) * 0\n\n    // Step 11: Calculate the letter grades based on\
    \ the difference using the formula given in the question\n    let letterGrades\
    \ = [firstLetterGrade, secondLetterGrade, thirdLetterGrade, fourthLetterGrade,\
    \ fifthLetterGrade, sixthLetterGrade, seventhLetterGrade].map { String($0) }\n\
    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8hglkfiu/tmp8hglkfiu.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b071bb4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b071b842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b071b842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b071b8417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8hglkfiu                        0x00005580ad466866 <unavailable> + 6246

    5    libc.so.6                          0x00002b071bd37460 __libc_start_main +
    245

    6    tmp8hglkfiu                        0x00005580ad466389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grade : String = \"\"\n    for grade in grades\
    \ {\n        if grade >= 3.0 {\n            if grade <= 3.7 {\n              \
    \  grade += \"A+\";\n            } else if grade <= 3.3 {\n                grade\
    \ += \"A\";\n            } else if grade <= 2.7 {\n                grade += \"\
    B+\";\n            } else if grade <= 2.3 {\n                grade += \"B\";\n\
    \            } else if grade <= 1.7 {\n                grade += \"C+\";\n    \
    \        } else {\n                grade += \"C\";\n            }\n        } else\
    \ if grade >= 2.0 {\n            if grade <= 2.7 {\n                grade += \"\
    B+\";\n            } else if grade <= 2.3 {\n                grade += \"B\";\n\
    \            } else if grade <= 1.7 {\n                grade += \"C+\";\n    \
    \        } else {\n                grade += \"C\";\n            }\n        } else\
    \ if grade >= 1.0 {\n            if grade <= 1.7 {\n                grade += \"\
    C\";\n            } else {\n                grade += \"C\";\n            }\n \
    \       } else if grade >= 0.0 && grade <= 0.7 {\n            grade += \"D\";\n\
    \        } else if grade == 0.0 {\n            grade += \"D\";\n        } else\
    \ {\n            grade += \"E\";\n        }\n    }\n    return grade\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmprtdgkevb.swift:29:17: error: cannot convert value of type 'Double'\
    \ to expected argument type 'String'\n                grade += \"A+\";\n     \
    \           ^\n/tmp/tmprtdgkevb.swift:31:17: error: cannot convert value of type\
    \ 'Double' to expected argument type 'String'\n                grade += \"A\"\
    ;\n                ^\n/tmp/tmprtdgkevb.swift:33:17: error: cannot convert value\
    \ of type 'Double' to expected argument type 'String'\n                grade +=\
    \ \"B+\";\n                ^\n/tmp/tmprtdgkevb.swift:35:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"B\";\n                ^\n/tmp/tmprtdgkevb.swift:37:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"C+\";\n                ^\n/tmp/tmprtdgkevb.swift:39:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"C\";\n                ^\n/tmp/tmprtdgkevb.swift:43:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"B+\";\n                ^\n/tmp/tmprtdgkevb.swift:45:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"B\";\n                ^\n/tmp/tmprtdgkevb.swift:47:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"C+\";\n                ^\n/tmp/tmprtdgkevb.swift:49:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"C\";\n                ^\n/tmp/tmprtdgkevb.swift:53:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"C\";\n                ^\n/tmp/tmprtdgkevb.swift:55:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n                grade\
    \ += \"C\";\n                ^\n/tmp/tmprtdgkevb.swift:58:13: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n            grade\
    \ += \"D\";\n           "
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var letter_grades = [String]()\n    \n  \
    \  for grade in grades {\n        let (min, max) = (grade, grade + 3)\n      \
    \  let index = findIndex(max)\n        if index == nil {\n            letter_grades.append(\"\
    E\")\n        } else {\n            let value = Int(index!)\n            if value\
    \ < 2 {\n                letter_grades.append(\"A+\")\n            } else if value\
    \ < 4 {\n                letter_grades.append(\"A\")\n            } else if value\
    \ < 6 {\n                letter_grades.append(\"A-\")\n            } else if value\
    \ < 9 {\n                letter_grades.append(\"B+\")\n            } else if value\
    \ < 12 {\n                letter_grades.append(\"B\")\n            } else if value\
    \ < 15 {\n                letter_grades.append(\"B-\")\n            } else if\
    \ value < 18 {\n                letter_grades.append(\"C+\")\n            } else\
    \ if value < 23 {\n                letter_grades.append(\"C\")\n            }\
    \ else if value < 26 {\n                letter_grades.append(\"C-\")\n       \
    \     } else if value < 29 {\n                letter_grades.append(\"D+\")\n \
    \           } else if value < 32 {\n                letter_grades.append(\"D\"\
    )\n            } else if value < 35 {\n                letter_grades.append(\"\
    D-\")\n            } else {\n                letter_grades.append(\"E\")\n   \
    \         }\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptzjx3uj9.swift:30:21: error: cannot find 'findIndex' in scope\n\
    \        let index = findIndex(max)\n                    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: fill this in.\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpr3i6tj58/tmpr3i6tj58.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6544e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6541deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6541de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6541dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3i6tj58                        0x000056325c6405e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ab6546d3460 __libc_start_main +
    245

    6    tmpr3i6tj58                        0x000056325c640109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014971
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradeSum = grades.reduce(0, +)\n    let gradeDiff\
    \ = grades.reduce(0, +)\n    let letterGrades = grades.map({ diff > 0 ? \"+\"\
    \ : \"-\" }).flatMap { diff > 0 ? \"A+\" : diff <= 0.7 ? \"B\" : diff <= 0.3 ?\
    \ \"B-\" : diff <= 0.1 ? \"C\" : diff <= 0.7 ? \"C\" : diff <= 0.3 ? \"C-\" :\
    \ diff <= 0.1 ? \"D+\" : diff <= 0.7 ? \"D\" : diff <= 0.3 ? \"D-\" : diff <=\
    \ 0.1 ? \"E\" : nil }\n    \n    return Array(letterGrades)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp05pmkc1q.swift:27:37: error: cannot find 'diff' in scope\n    let\
    \ letterGrades = grades.map({ diff > 0 ? \"+\" : \"-\" }).flatMap { diff > 0 ?\
    \ \"A+\" : diff <= 0.7 ? \"B\" : diff <= 0.3 ? \"B-\" : diff <= 0.1 ? \"C\" :\
    \ diff <= 0.7 ? \"C\" : diff <= 0.3 ? \"C-\" : diff <= 0.1 ? \"D+\" : diff <=\
    \ 0.7 ? \"D\" : diff <= 0.3 ? \"D-\" : diff <= 0.1 ? \"E\" : nil }\n         \
    \                           ^~~~\n/tmp/tmp05pmkc1q.swift:27:71: error: cannot\
    \ find 'diff' in scope\n    let letterGrades = grades.map({ diff > 0 ? \"+\" :\
    \ \"-\" }).flatMap { diff > 0 ? \"A+\" : diff <= 0.7 ? \"B\" : diff <= 0.3 ? \"\
    B-\" : diff <= 0.1 ? \"C\" : diff <= 0.7 ? \"C\" : diff <= 0.3 ? \"C-\" : diff\
    \ <= 0.1 ? \"D+\" : diff <= 0.7 ? \"D\" : diff <= 0.3 ? \"D-\" : diff <= 0.1 ?\
    \ \"E\" : nil }\n                                                            \
    \          ^~~~\n/tmp/tmp05pmkc1q.swift:27:89: error: cannot find 'diff' in scope\n\
    \    let letterGrades = grades.map({ diff > 0 ? \"+\" : \"-\" }).flatMap { diff\
    \ > 0 ? \"A+\" : diff <= 0.7 ? \"B\" : diff <= 0.3 ? \"B-\" : diff <= 0.1 ? \"\
    C\" : diff <= 0.7 ? \"C\" : diff <= 0.3 ? \"C-\" : diff <= 0.1 ? \"D+\" : diff\
    \ <= 0.7 ? \"D\" : diff <= 0.3 ? \"D-\" : diff <= 0.1 ? \"E\" : nil }\n      \
    \                                                                            \
    \      ^~~~\n/tmp/tmp05pmkc1q.swift:27:109: error: cannot find 'diff' in scope\n\
    \    let letterGrades = grades.map({ diff > 0 ? \"+\" : \"-\" }).flatMap { diff\
    \ > 0 ? \"A+\" : diff <= 0.7 ? \"B\" : diff <= 0.3 ? \"B-\" : diff <= 0.1 ? \"\
    C\" : diff <= 0.7 ? \"C\" : diff <= 0.3 ? \"C-\" : diff <= 0.1 ? \"D+\" : diff\
    \ <= 0.7 ? \"D\" : diff <= 0.3 ? \"D-\" : diff <= 0.1 ? \"E\" : nil }\n      \
    \                                                                            \
    \                          ^~~~\n/tmp/tmp05pmkc1q.swift:27:130: error: cannot\
    \ find 'diff' in scope\n    let letterGrades = grades.map({ diff > 0 ? \"+\" :\
    \ \"-\" }).flatMap { diff > 0 ? \"A+\" : diff <= 0.7 ? \"B\" : diff <= 0.3 ? \"\
    B-\" : diff <= 0.1 ? \"C\" : diff <= 0.7 ? \"C\" : diff <= 0.3 ? \"C-\" : diff\
    \ <= 0.1 ? \"D+\" : diff <= 0.7 ? \"D\" : diff <= 0.3 ? \"D-\" : diff <= 0.1 ?\
    \ \"E\" : nil }\n         "
  stdout: ''
  timestamp: 1660014972
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade > 4 {\n            letter_grades.append(\"A+\")\n\
    \        } else {\n            letter_grades.append(\"A\")\n        }\n      \
    \  if grade > 3 {\n            letter_grades.append(\"A-\")\n        } else {\n\
    \            letter_grades.append(\"B\")\n        }\n        if grade > 2 {\n\
    \            letter_grades.append(\"B+\")\n        } else {\n            letter_grades.append(\"\
    B\")\n        }\n        if grade > 1 {\n            letter_grades.append(\"B-\"\
    )\n        } else {\n            letter_grades.append(\"C\")\n        }\n    \
    \    if grade > 0.7 {\n            letter_grades.append(\"C+\")\n        } else\
    \ {\n            letter_grades.append(\"C\")\n        }\n        if grade > 0.3\
    \ {\n            letter_grades.append(\"C-\")\n        } else {\n            letter_grades.append(\"\
    D\")\n        }\n        if grade > 0.1 {\n            letter_grades.append(\"\
    D+\")\n        } else {\n            letter_grades.append(\"D\")\n        }\n\
    \        if grade < 0 {\n            letter_grades.append(\"E\")\n        } else\
    \ {\n            letter_grades.append(\"F\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpth0bif7d/tmpth0bif7d.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5b3727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5b341eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5b341e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5b341d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth0bif7d                        0x0000562fc95af7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac5b3913460 __libc_start_main +
    245

    6    tmpth0bif7d                        0x0000562fc95af319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let alphabet = [\"A\", \"A-\", \"B+\", \"B\", \"\
    B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    var grades_letters:\
    \ [String] = []\n    var gpas: Int = 0\n    for grade in grades {\n        let\
    \ gpa : Double = grade * 1.1\n        if gpa > 7 {\n            grades_letters.append(alphabet[gpa])\n\
    \        }\n        else {\n            grades_letters.append(alphabet[gpa]+\"\
    -\"+alphabet[gpa])\n        }\n    }\n    return grades_letters\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpag61eifv.swift:31:44: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            grades_letters.append(alphabet[gpa])\n\
    \                                           ^\n                              \
    \             Int( )\n/tmp/tmpag61eifv.swift:34:44: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n            grades_letters.append(alphabet[gpa]+\"\
    -\"+alphabet[gpa])\n                                           ^\n           \
    \                                Int( )\n/tmp/tmpag61eifv.swift:34:62: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \        grades_letters.append(alphabet[gpa]+\"-\"+alphabet[gpa])\n          \
    \                                                   ^\n                      \
    \                                       Int( )\n"
  stdout: ''
  timestamp: 1660014974
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        var letterGrade = \"\"\n        \n        if grade >= 3.0\
    \ { letterGrade += \"B+\" }\n        \n        if grade > 2.7 { letterGrade +=\
    \ \"B\" }\n        \n        if grade > 2.3 { letterGrade += \"B-\" }\n      \
    \  \n        if grade > 2.0 { letterGrade += \"C+\" }\n        \n        if grade\
    \ > 1.7 { letterGrade += \"C\" }\n        \n        if grade > 1.3 { letterGrade\
    \ += \"C-\" }\n        \n        if grade > 1.0 { letterGrade += \"D+\" }\n  \
    \      \n        if grade > 0.7 { letterGrade += \"D\" }\n        \n        if\
    \ grade > 0.0 { letterGrade += \"D-\" }\n        \n        if grade < 0.0 { letterGrade\
    \ += \"E\" }\n        \n        if grade < 3.0 { letterGrade += \"A+\" }\n   \
    \     \n        if grade < 3.7 { letterGrade += \"A\" }\n        \n        if\
    \ grade < 3.3 { letterGrade += \"A-\" }\n        \n        if grade < 3.0 { letterGrade\
    \ += \"B+\" }\n        \n        if grade < 2.7 { letterGrade += \"B\" }\n   \
    \     \n        if grade < 2.3 { letterGrade += \"B-\" }\n        \n        if\
    \ grade < 2.0 { letterGrade += \"C+\" }\n        \n        if grade < 1.7 { letterGrade\
    \ += \"C\" }\n        \n        if grade < 1.3 { letterGrade += \"C-\" }\n   \
    \     \n        if grade < 1.0 { letterGrade += \"D+\" }\n        \n        if\
    \ grade < 0.7 { letterGrade += \"D\" }\n        \n        if grade < 0.0 { letterGrade\
    \ += \"D-\" }\n        \n        if grade >= 0.0 { letterGrade += \"A+\" }\n \
    \       \n        letterGrades.append(letterGrade)\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmplcc4eh6c/tmplcc4eh6c.swift:95: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c4925dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c48f54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c48f54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c48f537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplcc4eh6c                        0x000055d319bb1856 <unavailable> + 6230

    5    libc.so.6                          0x00002b9c49449460 __libc_start_main +
    245

    6    tmplcc4eh6c                        0x000055d319bb1379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014972
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    let numberOfGrades\
    \ = grades.count\n    for grade in grades {\n        let letterGrade: String\n\
    \        if grade >= 3.0 {\n            letterGrade = \"A+\"\n        }\n    \
    \    else if grade > 2.0 && grade <= 3.7 {\n            letterGrade = \"A\"\n\
    \        }\n        else if grade > 2.3 && grade <= 3.0 {\n            letterGrade\
    \ = \"A-\"\n        }\n        else if grade > 2.7 && grade <= 3.3 {\n       \
    \     letterGrade = \"B+\"\n        }\n        else if grade > 2.0 && grade <=\
    \ 2.7 {\n            letterGrade = \"B\"\n        }\n        else if grade > 1.7\
    \ && grade <= 2.3 {\n            letterGrade = \"B-\"\n        }\n        else\
    \ if grade > 1.3 && grade <= 1.7 {\n            letterGrade = \"C+\"\n       \
    \ }\n        else if grade > 1.0 && grade <= 1.3 {\n            letterGrade =\
    \ \"C\"\n        }\n        else if grade > 0.7 && grade <= 1.0 {\n          \
    \  letterGrade = \"C-\"\n        }\n        else if grade > 0.0 && grade <= 0.7\
    \ {\n            letterGrade = \"D+\"\n        }\n        else {\n           \
    \ letterGrade = \"D\"\n        }\n        result.append(letterGrade)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdsli4iqq/tmpdsli4iqq.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b371df1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b371dc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b371dc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b371dc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsli4iqq                        0x000055f751553856 <unavailable> + 6230

    5    libc.so.6                          0x00002b371e10a460 __libc_start_main +
    245

    6    tmpdsli4iqq                        0x000055f751553379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014972
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeStrs = [String]()\n    for g in grades\
    \ {\n        var gradeStr = \"\"\n        if g > 4.0 {\n            gradeStr +=\
    \ String(g)\n            gradeStrs.append(\"A+\")\n        }\n        else if\
    \ g > 3.7 {\n            gradeStr += String(g)\n            gradeStrs.append(\"\
    A\")\n        }\n        else if g > 3.3 {\n            gradeStr += String(g)\n\
    \            gradeStrs.append(\"A-\")\n        }\n        else if g > 3.0 {\n\
    \            gradeStr += String(g)\n            gradeStrs.append(\"B+\")\n   \
    \     }\n        else if g > 2.7 {\n            gradeStr += String(g)\n      \
    \      gradeStrs.append(\"B\")\n        }\n        else if g > 2.3 {\n       \
    \     gradeStr += String(g)\n            gradeStrs.append(\"B-\")\n        }\n\
    \        else if g > 2.0 {\n            gradeStr += String(g)\n            gradeStrs.append(\"\
    C+\")\n        }\n        else if g > 1.7 {\n            gradeStr += String(g)\n\
    \            gradeStrs.append(\"C\")\n        }\n        else if g > 1.3 {\n \
    \           gradeStr += String(g)\n            gradeStrs.append(\"C-\")\n    \
    \    }\n        else if g > 1.0 {\n            gradeStr += String(g)\n       \
    \     gradeStrs.append(\"D+\")\n        }\n        else if g > 0.7 {\n       \
    \     gradeStr += String(g)\n            gradeStrs.append(\"D\")\n        }\n\
    \        else {\n            gradeStr += String(g)\n            gradeStrs.append(\"\
    D-\")\n        }\n        gradeStrs.append(gradeStr)\n    }\n    return gradeStrs\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpc68rjlnk/tmpc68rjlnk.swift:94: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1cfcf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1cf9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1cf9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1cf9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc68rjlnk                        0x00005653686c4916 <unavailable> + 6422

    5    libc.so.6                          0x00002ac1cfee3460 __libc_start_main +
    245

    6    tmpc68rjlnk                        0x00005653686c4439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    let n = grades.count\n\
    \    var gpa = 0.0\n\n    if n < 1 {\n        return letterGrades\n    }\n\n \
    \   gpa = grades.reduce(0, combine: { (sum, item) -> Double in\n        return\
    \ sum + item\n    })\n\n    let grading = Double((gpa / n) * 4.0) / 4.0\n    if\
    \ grading < 1.0 {\n        letterGrades.append(\"D-\")\n    } else {\n       \
    \ if grading > 0.75 {\n            letterGrades.append(\"A-\")\n        } else\
    \ {\n            if grading > 0.6 {\n                letterGrades.append(\"B-\"\
    )\n            } else {\n                if grading > 0.5 {\n                \
    \    letterGrades.append(\"C+\")\n                } else {\n                 \
    \   if grading > 0.4 {\n                        letterGrades.append(\"C-\")\n\
    \                    } else {\n                        if grading > 0.3 {\n  \
    \                          letterGrades.append(\"D+\")\n                     \
    \   } else {\n                            if grading > 0.2 {\n               \
    \                 letterGrades.append(\"D\")\n                            } else\
    \ {\n                                if grading > 0.1 {\n                    \
    \                letterGrades.append(\"E\")\n                                }\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt0o3sxb7.swift:33:24: error: extraneous argument label 'combine:'\
    \ in call\n    gpa = grades.reduce(0, combine: { (sum, item) -> Double in\n  \
    \                     ^   ~~~~~~~~~\n                           \n/tmp/tmpt0o3sxb7.swift:37:33:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    let grading = Double((gpa / n) * 4.0) / 4.0\n                           \
    \     ^\n                                Double( )\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradesLength: Int = grades.count\n    var letterGrades:\
    \ [String] = []\n    var currentGPA: Double = 0.0\n\n    grades.reverse()\n\n\
    \    for index in 0..<gradesLength {\n        // A + if 4.0 or greater or < 3.7\n\
    \        let letterGPA = currentGPA + grades[index]\n\n        if letterGPA >=\
    \ 4.0 {\n            letterGrades.append(\"A+\")\n        }\n\n        // A- if\
    \ 3.7 or greater or < 3.3\n        else if letterGPA >= 3.7 {\n            letterGrades.append(\"\
    A-\")\n        }\n\n        // B+ if 3.3 or greater or < 3.0\n        else if\
    \ letterGPA >= 3.3 {\n            letterGrades.append(\"B+\")\n        }\n\n \
    \       // B- if 3.0 or greater or < 2.7\n        else if letterGPA >= 3.0 {\n\
    \            letterGrades.append(\"B\")\n        }\n\n        // B-  if 2.7 or\
    \ greater or < 2.3\n        else if letterGPA >= 2.7 {\n            letterGrades.append(\"\
    B-\")\n        }\n\n        // C+ if 2.3 or greater or < 2.0\n        else if\
    \ letterGPA >= 2.3 {\n            letterGrades.append(\"C+\")\n        }\n\n \
    \       // C  if 2.0 or greater or < 1.7\n        else if letterGPA >= 2.0 {\n\
    \            letterGrades.append(\"C\")\n        }\n\n        // C-  if 1.7 or\
    \ greater or < 1.3\n        else if letterGPA >= 1.7 {\n            letterGrades.append(\"\
    C-\")\n        }\n\n        // D+ if 1.3 or greater or < 1.0\n        else if\
    \ letterGPA >= 1.3 {\n            letterGrades.append(\"D+\")\n        }\n\n \
    \       // D  if 1.0 or greater or < 0.7\n        else if letterGPA >= 1.0 {\n\
    \            letterGrades.append(\"D\")\n        }\n\n        // D-  if 0.7 or\
    \ greater\n        else if letterGPA >= 0.7 {\n            letterGrades.append(\"\
    D-\")\n        }\n\n        // E  if < 0.0\n        else if letterGPA < 0.0 {\n\
    \            letterGrades.append(\"E\")\n        }\n\n        // Append letter\
    \ grades\n        else if letterGPA < 0.0 {\n            letterGrades.append(\"\
    E\")\n        }\n\n        currentGPA = letterGPA\n    }\n\n    return letterGrades.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2ebnt22v.swift:29:12: error: cannot use mutating member on immutable\
    \ value: 'grades' is a 'let' constant\n    grades.reverse()\n    ~~~~~~ ^\n/tmp/tmp2ebnt22v.swift:102:25:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return letterGrades.reverse()\n           ~~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your solution here\n    \n    let gradesSet\
    \ = grades.sorted()\n    var letterGrades = [String]()\n    var currentGPA = 0\n\
    \    let gpaIndex = 5\n    \n    while currentGPA <= grades.last {\n        let\
    \ index = grades.firstIndex(of: currentGPA)\n        let grade = grades[index]\n\
    \        letterGrades.append(grade == 0 ? \"E\" : letterGrades[gradeIndex] + String(grade))\n\
    \        currentGPA = (currentGPA * gpaIndex) + grades[grades.firstIndex(of: currentGPA)]\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0ryyiky4.swift:32:22: error: type '((Double) throws -> Bool) throws\
    \ -> Double?' cannot conform to 'BinaryInteger'\n    while currentGPA <= grades.last\
    \ {\n                     ^\n/tmp/tmp0ryyiky4.swift:32:22: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n    while\
    \ currentGPA <= grades.last {\n                     ^\n/tmp/tmp0ryyiky4.swift:32:22:\
    \ note: required by operator function '<=' where 'Other' = '((Double) throws ->\
    \ Bool) throws -> Double?'\n    while currentGPA <= grades.last {\n          \
    \           ^\n/tmp/tmp0ryyiky4.swift:33:43: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Double'\n        let index = grades.firstIndex(of:\
    \ currentGPA)\n                                          ^\n                 \
    \                         Double(   )\n/tmp/tmp0ryyiky4.swift:35:61: error: cannot\
    \ find 'gradeIndex' in scope\n        letterGrades.append(grade == 0 ? \"E\" :\
    \ letterGrades[gradeIndex] + String(grade))\n                                \
    \                            ^~~~~~~~~~\n/tmp/tmp0ryyiky4.swift:36:54: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \    currentGPA = (currentGPA * gpaIndex) + grades[grades.firstIndex(of: currentGPA)]\n\
    \                                                     ^\n                    \
    \                           Int(                                     )\n/tmp/tmp0ryyiky4.swift:36:77:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        currentGPA = (currentGPA * gpaIndex) + grades[grades.firstIndex(of: currentGPA)]\n\
    \                                                                            ^\n\
    \                                                                            Double(\
    \   )\n/tmp/tmp0ryyiky4.swift:36:62: error: value of optional type 'Array<Double>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Double>.Index'\
    \ (aka 'Int')\n        currentGPA = (currentGPA * gpaIndex) + grades[grades.firstIndex(of:\
    \ currentGPA)]\n                                    "
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades_copy = grades\n\n    for grade_index\
    \ in 0..<grades.count {\n        // find the minimum GPA from the array\n    \
    \    var minimum_grade = grades_copy[grade_index]\n        for index in grade_index..<grades_copy.count\
    \ {\n            if grades_copy[index] < minimum_grade {\n                minimum_grade\
    \ = grades_copy[index]\n            }\n        }\n        // if there is a tie\
    \ for a grade, choose the lowest possible grade\n        if minimum_grade == grades_copy[grade_index]\
    \ {\n            for index in grade_index..<grades_copy.count {\n            \
    \    grades_copy[index] = 0\n            }\n        } else {\n            for\
    \ index in grade_index..<grades_copy.count {\n                grades_copy[index]\
    \ -= minimum_grade\n            }\n        }\n    }\n    return grades_copy.map\
    \ { grade in\n        // convert the grade to the letter grade\n        let letterGrade\
    \ = grade\n        switch letter {\n        case \"A\" ... \"F\":\n          \
    \  return letter\n        case \"A+\", \"A\":\n            return letter\n   \
    \     case \"A-\", \"A\":\n            return letter + \"-\"\n        case \"\
    B\" ... \"F\":\n            return letter\n        case \"B+\", \"B\":\n     \
    \       return letter\n        case \"B-\", \"B\":\n            return letter\
    \ + \"+\"\n        case \"C\" ... \"F\":\n            return letter\n        case\
    \ \"C+\", \"C\":\n            return letter\n        case \"C-\", \"C\":\n   \
    \         return letter + \"-\"\n        case \"D\" ... \"F\":\n            return\
    \ letter\n        case \"D+\", \"D\":\n            return letter\n        case\
    \ \"D-\", \"D\":\n            return letter + \"+\"\n        case \"E\":\n   \
    \         return letter\n        default:\n            return \"\"\n        }\n\
    \    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2e21jw7r.swift:49:16: error: cannot find 'letter' in scope\n  \
    \      switch letter {\n               ^~~~~~\n/tmp/tmp2e21jw7r.swift:51:20: error:\
    \ cannot find 'letter' in scope\n            return letter\n                 \
    \  ^~~~~~\n/tmp/tmp2e21jw7r.swift:53:20: error: cannot find 'letter' in scope\n\
    \            return letter\n                   ^~~~~~\n/tmp/tmp2e21jw7r.swift:55:20:\
    \ error: cannot find 'letter' in scope\n            return letter + \"-\"\n  \
    \                 ^~~~~~\n/tmp/tmp2e21jw7r.swift:57:20: error: cannot find 'letter'\
    \ in scope\n            return letter\n                   ^~~~~~\n/tmp/tmp2e21jw7r.swift:59:20:\
    \ error: cannot find 'letter' in scope\n            return letter\n          \
    \         ^~~~~~\n/tmp/tmp2e21jw7r.swift:61:20: error: cannot find 'letter' in\
    \ scope\n            return letter + \"+\"\n                   ^~~~~~\n/tmp/tmp2e21jw7r.swift:63:20:\
    \ error: cannot find 'letter' in scope\n            return letter\n          \
    \         ^~~~~~\n/tmp/tmp2e21jw7r.swift:65:20: error: cannot find 'letter' in\
    \ scope\n            return letter\n                   ^~~~~~\n/tmp/tmp2e21jw7r.swift:67:20:\
    \ error: cannot find 'letter' in scope\n            return letter + \"-\"\n  \
    \                 ^~~~~~\n/tmp/tmp2e21jw7r.swift:69:20: error: cannot find 'letter'\
    \ in scope\n            return letter\n                   ^~~~~~\n/tmp/tmp2e21jw7r.swift:71:20:\
    \ error: cannot find 'letter' in scope\n            return letter\n          \
    \         ^~~~~~\n/tmp/tmp2e21jw7r.swift:73:20: error: cannot find 'letter' in\
    \ scope\n            return letter + \"+\"\n                   ^~~~~~\n/tmp/tmp2e21jw7r.swift:75:20:\
    \ error: cannot find 'letter' in scope\n            return letter\n          \
    \         ^~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.isEmpty {\n        return []\n    }\n\
    \    var letterGrades: [String] = []\n    letterGrades.append(\"\")\n    for grade\
    \ in grades {\n        let lowGrade: Double = Double(grade < 3.0 ? \"0.0\" : \"\
    1.0\")\n        let highGrade: Double = Double(grade > 3.5 ? \"4.0\" : \"5.0\"\
    )\n        if grade < 3.0 {\n            letterGrades[0].append(lowGrade)\n  \
    \          letterGrades[0].append(highGrade)\n        } else {\n            letterGrades[0].append(lowGrade)\n\
    \            letterGrades[0].append(\"-\")\n            letterGrades[0].append(highGrade)\n\
    \            letterGrades[0].append(\"-\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphg8mlifm.swift:31:32: error: type of expression is ambiguous without\
    \ more context\n        let lowGrade: Double = Double(grade < 3.0 ? \"0.0\" :\
    \ \"1.0\")\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphg8mlifm.swift:32:33: error: type of expression is ambiguous without more\
    \ context\n        let highGrade: Double = Double(grade > 3.5 ? \"4.0\" : \"5.0\"\
    )\n                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphg8mlifm.swift:34:29:\
    \ error: no exact matches in call to instance method 'append'\n            letterGrades[0].append(lowGrade)\n\
    \                            ^\nSwift.String:6:26: note: candidate expects value\
    \ of type 'String' for parameter #1 (got 'Double')\n    public mutating func append(_\
    \ other: String)\n                         ^\nSwift.String:7:26: note: candidate\
    \ expects value of type 'Character' for parameter #1 (got 'Double')\n    public\
    \ mutating func append(_ c: Character)\n                         ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String.Element' (aka 'Character') for\
    \ parameter #1 (got 'Double')\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmphg8mlifm.swift:35:29:\
    \ error: no exact matches in call to instance method 'append'\n            letterGrades[0].append(highGrade)\n\
    \                            ^\nSwift.String:6:26: note: candidate expects value\
    \ of type 'String' for parameter #1 (got 'Double')\n    public mutating func append(_\
    \ other: String)\n                         ^\nSwift.String:7:26: note: candidate\
    \ expects value of type 'Character' for parameter #1 (got 'Double')\n    public\
    \ mutating func append(_ c: Character)\n                         ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String.Element' (aka 'Character') for\
    \ parameter #1 (got 'Double')\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmphg8mlifm.swift:37:29:\
    \ error: no exact"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let sorted = grades.sorted() \n    var result:\
    \ [String] = []\n    for i in sorted {\n        let value = CGFloat(Double(i))\n\
    \        if value < 4.0 {\n            result.append(String(a+i))\n        } else\
    \ if value < 3.7 {\n            result.append(String(a))\n        } else if value\
    \ < 3.3 {\n            result.append(String(a-i))\n        } else if value < 3.0\
    \ {\n            result.append(String(b+i))\n        } else if value < 2.7 {\n\
    \            result.append(String(b))\n        } else if value < 2.3 {\n     \
    \       result.append(String(b-i))\n        } else if value < 2.0 {\n        \
    \    result.append(String(c+i))\n        } else if value < 1.7 {\n           \
    \ result.append(String(c))\n        } else if value < 1.3 {\n            result.append(String(c-i))\n\
    \        } else if value < 1.0 {\n            result.append(String(d+i))\n   \
    \     } else if value < 0.7 {\n            result.append(String(d))\n        }\
    \ else if value < 0.0 {\n            result.append(String(d-i))\n        } else\
    \ {\n            result.append(String(e))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx7vlltth.swift:28:21: error: cannot find 'CGFloat' in scope\n \
    \       let value = CGFloat(Double(i))\n                    ^~~~~~~\n/tmp/tmpx7vlltth.swift:30:34:\
    \ error: cannot find 'a' in scope\n            result.append(String(a+i))\n  \
    \                               ^\n/tmp/tmpx7vlltth.swift:32:34: error: cannot\
    \ find 'a' in scope\n            result.append(String(a))\n                  \
    \               ^\n/tmp/tmpx7vlltth.swift:34:34: error: cannot find 'a' in scope\n\
    \            result.append(String(a-i))\n                                 ^\n\
    /tmp/tmpx7vlltth.swift:36:34: error: cannot find 'b' in scope\n            result.append(String(b+i))\n\
    \                                 ^\n/tmp/tmpx7vlltth.swift:38:34: error: cannot\
    \ find 'b' in scope\n            result.append(String(b))\n                  \
    \               ^\n/tmp/tmpx7vlltth.swift:40:34: error: cannot find 'b' in scope\n\
    \            result.append(String(b-i))\n                                 ^\n\
    /tmp/tmpx7vlltth.swift:42:34: error: cannot find 'c' in scope\n            result.append(String(c+i))\n\
    \                                 ^\n/tmp/tmpx7vlltth.swift:44:34: error: cannot\
    \ find 'c' in scope\n            result.append(String(c))\n                  \
    \               ^\n/tmp/tmpx7vlltth.swift:46:34: error: cannot find 'c' in scope\n\
    \            result.append(String(c-i))\n                                 ^\n\
    /tmp/tmpx7vlltth.swift:48:34: error: cannot find 'd' in scope\n            result.append(String(d+i))\n\
    \                                 ^\n/tmp/tmpx7vlltth.swift:50:34: error: cannot\
    \ find 'd' in scope\n            result.append(String(d))\n                  \
    \               ^\n/tmp/tmpx7vlltth.swift:52:34: error: cannot find 'd' in scope\n\
    \            result.append(String(d-i))\n                                 ^\n\
    /tmp/tmpx7vlltth.swift:54:34: error: cannot find 'e' in scope\n            result.append(String(e))\n\
    \                                 ^\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    // The formula for finding the letter grade\
    \ is the average of the grades\n    var averageGrade = grades.reduce(0, combine:\
    \ +) / grades.count\n    \n    // The letter grade is calculated as follows:\n\
    \    switch averageGrade {\n    case 3.0 < averageGrade && averageGrade < 3.7:\n\
    \        return \"A+\"\n    case 3.7 < averageGrade && averageGrade < 3.3:\n \
    \       return \"A\"\n    case 3.3 < averageGrade && averageGrade < 2.7:\n   \
    \     return \"A-\"\n    case 2.7 < averageGrade && averageGrade < 2.3:\n    \
    \    return \"B+\"\n    case 2.3 < averageGrade && averageGrade < 1.7:\n     \
    \   return \"B\"\n    case 1.7 < averageGrade && averageGrade < 1.3:\n       \
    \ return \"B-\"\n    case 1.3 < averageGrade && averageGrade < 1.0:\n        return\
    \ \"C+\"\n    case 1.0 < averageGrade && averageGrade < 0.7:\n        return \"\
    C\"\n    case 0.7 < averageGrade && averageGrade < 0.0:\n        return \"C-\"\
    \n    default:\n        return \"E\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbcvfsbar.swift:27:37: error: extraneous argument label 'combine:'\
    \ in call\n    var averageGrade = grades.reduce(0, combine: +) / grades.count\n\
    \                                    ^   ~~~~~~~~~\n                         \
    \               \n/tmp/tmpbcvfsbar.swift:27:50: error: cannot convert value of\
    \ type '(Int) -> Int' to expected argument type '(Int, Double) throws -> Int'\n\
    \    var averageGrade = grades.reduce(0, combine: +) / grades.count\n        \
    \                                         ^\n/tmp/tmpbcvfsbar.swift:32:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"A+\"\n               ^~~~\n/tmp/tmpbcvfsbar.swift:34:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"A\"\n               ^~~\n/tmp/tmpbcvfsbar.swift:36:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"A-\"\n               ^~~~\n/tmp/tmpbcvfsbar.swift:38:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"B+\"\n               ^~~~\n/tmp/tmpbcvfsbar.swift:40:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"B\"\n               ^~~\n/tmp/tmpbcvfsbar.swift:42:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"B-\"\n               ^~~~\n/tmp/tmpbcvfsbar.swift:44:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"C+\"\n               ^~~~\n/tmp/tmpbcvfsbar.swift:46:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"C\"\n               ^~~\n/tmp/tmpbcvfsbar.swift:48:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"C-\"\n               ^~~~\n/tmp/tmpbcvfsbar.swift:50:16: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \        return \"E\"\n               ^~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n\n    if grades.count\
    \ <= 0 {\n        return letter_grades\n    }\n\n    // sort the array into descending\
    \ order from high to low\n    grades.sortInPlace()\n\n    for index in grades.indices{\n\
    \        if index < grades.count-1 {\n            // check if the value at index\
    \ i and the value at index i+1 are\n            // both above and below the midpoint\
    \ of the grade\n            if grades[index] <= grades[index + 1] {\n        \
    \        // if the values are both above and below the midpoint of the\n     \
    \           // grade, we can just assign a letter grade of A+\n              \
    \  letter_grades.append(\"A+\")\n            } else {\n                // otherwise,\
    \ we can check the grade to see if the grade is a\n                // higher than\
    \ the midpoint of the grade or lower than the\n                // midpoint of\
    \ the grade\n                if grades[index] > grades[index + 1] {\n        \
    \            letter_grades.append(\"A-\")\n                } else {\n        \
    \            letter_grades.append(\"B+\")\n                }\n            }\n\
    \        } else {\n            // if the final grade is higher than the midpoint\
    \ of the grade,\n            // we can just assign a letter grade of D+\n    \
    \        letter_grades.append(\"D+\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjox33vbq.swift:32:12: error: value of type '[Double]' has no member\
    \ 'sortInPlace'\n    grades.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    \n    let maxGrade = grades.max()!\n    let\
    \ minGrade = grades.min()!\n    \n    let difference = grades.reduce(0.0, combine:\
    \ +)\n    \n    \n    let differencePercent = difference / maxGrade\n    \n  \
    \  let gradePercent = differencePercent * 100\n    \n    \n    let grades = [\"\
    \", \"\", \"\", \"\", \"\"]\n    \n    \n    grades[0] = \"A+\" //1\n    \n  \
    \  \n    if gradePercent > 90 {\n        grades[0] = \"B+\"\n    }\n    \n   \
    \ \n    if gradePercent > 80 {\n        grades[0] = \"B\"\n    }\n    \n    \n\
    \    if gradePercent > 70 {\n        grades[0] = \"B-\"\n    }\n    \n    \n \
    \   if gradePercent > 60 {\n        grades[0] = \"C+\"\n    }\n    \n    \n  \
    \  if gradePercent > 50 {\n        grades[0] = \"C\"\n    }\n    \n    \n    if\
    \ gradePercent > 40 {\n        grades[0] = \"C-\"\n    }\n    \n    \n    if gradePercent\
    \ > 30 {\n        grades[0] = \"D+\"\n    }\n    \n    \n    if gradePercent >\
    \ 20 {\n        grades[0] = \"D\"\n    }\n    \n    \n    if gradePercent > 10\
    \ {\n        grades[0] = \"D-\"\n    }\n    \n    \n    if gradePercent > 0 {\n\
    \        grades[0] = \"E\"\n    }\n    \n    \n    return grades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp44lj3aff.swift:30:35: error: extraneous argument label 'combine:'\
    \ in call\n    let difference = grades.reduce(0.0, combine: +)\n             \
    \                     ^     ~~~~~~~~~\n                                      \
    \  \n/tmp/tmp44lj3aff.swift:41:11: error: cannot assign through subscript: 'grades'\
    \ is a 'let' constant\n    grades[0] = \"A+\" //1\n    ~~~~~~^\n/tmp/tmp44lj3aff.swift:38:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let grades = [\"\", \"\"\
    , \"\", \"\", \"\"]\n    ^~~\n    var\n/tmp/tmp44lj3aff.swift:45:15: error: cannot\
    \ assign through subscript: 'grades' is a 'let' constant\n        grades[0] =\
    \ \"B+\"\n        ~~~~~~^\n/tmp/tmp44lj3aff.swift:38:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let grades = [\"\", \"\", \"\", \"\", \"\"]\n\
    \    ^~~\n    var\n/tmp/tmp44lj3aff.swift:50:15: error: cannot assign through\
    \ subscript: 'grades' is a 'let' constant\n        grades[0] = \"B\"\n       \
    \ ~~~~~~^\n/tmp/tmp44lj3aff.swift:38:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let grades = [\"\", \"\", \"\", \"\", \"\"]\n    ^~~\n    var\n\
    /tmp/tmp44lj3aff.swift:55:15: error: cannot assign through subscript: 'grades'\
    \ is a 'let' constant\n        grades[0] = \"B-\"\n        ~~~~~~^\n/tmp/tmp44lj3aff.swift:38:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let grades = [\"\", \"\"\
    , \"\", \"\", \"\"]\n    ^~~\n    var\n/tmp/tmp44lj3aff.swift:60:15: error: cannot\
    \ assign through subscript: 'grades' is a 'let' constant\n        grades[0] =\
    \ \"C+\"\n        ~~~~~~^\n/tmp/tmp44lj3aff.swift:38:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let grades = [\"\", \"\", \"\", \"\", \"\"]\n\
    \    ^~~\n    var\n/tmp/tmp44lj3aff.swift:65:15: error: cannot assign through\
    \ subscript: 'grades' is a 'let' constant\n        grades[0] = \"C\"\n       \
    \ ~~~~~~^\n/tmp/tmp44lj3aff.swift:38:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let grades = [\"\", \"\", \"\", \"\", \"\"]\n    ^~~\n    var\n\
    /tmp/tmp44lj3aff.swift:70:15: error: cannot assign through subscript: 'grades'\
    \ is a 'let' constant\n        grades[0] = \"C-\"\n        ~~~~~~^\n/tmp/tmp44lj3aff.swift:38:5:\
    \ note: change 'let' to 'var' to make it m"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    switch\
    \ grades.count {\n    case 0:\n        break\n    case 1:\n        let firstGrade\
    \ = grades[0]\n        \n        if firstGrade > 3.0 { letterGrades.append(\"\
    A+\") }\n        else if firstGrade > 2.7 { letterGrades.append(\"B\") }\n   \
    \     else if firstGrade > 2.0 { letterGrades.append(\"B-\") }\n        else if\
    \ firstGrade > 1.7 { letterGrades.append(\"C\") }\n        else if firstGrade\
    \ > 1.3 { letterGrades.append(\"C-\") }\n        else if firstGrade > 1.0 { letterGrades.append(\"\
    D+\") }\n        else if firstGrade > 0.7 { letterGrades.append(\"D\") }\n   \
    \     else if firstGrade > 0.0 { letterGrades.append(\"D-\") }\n        else {\
    \ letterGrades.append(\"E\") }\n        \n    case 2:\n        let firstGrade\
    \ = grades[0]\n        let secondGrade = grades[1]\n        \n        if firstGrade\
    \ > 3.0 { letterGrades.append(\"A+\") }\n        else if firstGrade > 2.7 { letterGrades.append(\"\
    B\") }\n        else if firstGrade > 2.0 { letterGrades.append(\"B-\") }\n   \
    \     else if firstGrade > 1.7 { letterGrades.append(\"C\") }\n        else if\
    \ firstGrade > 1.3 { letterGrades.append(\"C-\") }\n        else if firstGrade\
    \ > 1.0 { letterGrades.append(\"D+\") }\n        else if firstGrade > 0.7 { letterGrades.append(\"\
    D\") }\n        else if firstGrade > 0.0 { letterGrades.append(\"D-\") }\n   \
    \     else { letterGrades.append(\"E\") }\n        \n        if secondGrade >\
    \ 3.0 { letterGrades.append(\"A+\") }\n        else if secondGrade > 2.7 { letterGrades.append(\"\
    B\") }\n        else if secondGrade > 2.0 { letterGrades.append(\"B-\") }\n  \
    \      else if secondGrade > 1.7 { letterGrades.append(\"C\") }\n        else\
    \ if secondGrade > 1.3 { letterGrades.append(\"C-\") }\n        else if secondGrade\
    \ > 1.0 { letterGrades.append(\"D+\") }\n        else if secondGrade > 0.7 { letterGrades.append(\"\
    D\") }\n        else if secondGrade > 0.0 { letterGrades.append(\"D-\") }\n  \
    \      else { letterGrades.append(\"E\") }\n        \n    case 3:\n        let\
    \ firstGrade = grades[0]\n        let secondGra\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0vvg_wor.swift:90:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp0vvg_wor.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp0vvg_wor.swift:69:13: error: type annotation missing in pattern\n    \
    \    let secondGra\n            ^\n/tmp/tmp0vvg_wor.swift:27:5: error: switch\
    \ must be exhaustive\n    switch grades.count {\n    ^\n/tmp/tmp0vvg_wor.swift:27:5:\
    \ note: do you want to add a default clause?\n    switch grades.count {\n    ^\n\
    /tmp/tmp0vvg_wor.swift:73:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grade_letters(grades, numerical_letters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5lampf10.swift:25:12: error: cannot find 'grade_letters' in scope\n\
    \    return grade_letters(grades, numerical_letters)\n           ^~~~~~~~~~~~~\n\
    /tmp/tmp5lampf10.swift:25:34: error: cannot find 'numerical_letters' in scope\n\
    \    return grade_letters(grades, numerical_letters)\n                       \
    \          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var grade_length\
    \ = grades.count\n    var grade_numerator = grades.reduce(0, *)\n    var letter_grade\
    \ = \"\"\n    for i in 0..<grade_length {\n        letter_grade = \"\"\n     \
    \   var gpa = grades[i]\n        if gpa < 4.0 {\n            letter_grade = \"\
    A-\"\n        } else if gpa < 3.7 {\n            letter_grade = \"A+\"\n     \
    \   } else if gpa < 3.3 {\n            letter_grade = \"A\"\n        } else if\
    \ gpa < 3.0 {\n            letter_grade = \"B+\"\n        } else if gpa < 2.7\
    \ {\n            letter_grade = \"B\"\n        } else if gpa < 2.3 {\n       \
    \     letter_grade = \"B-\"\n        } else if gpa < 2.0 {\n            letter_grade\
    \ = \"C+\"\n        } else if gpa < 1.7 {\n            letter_grade = \"C\"\n\
    \        } else if gpa < 1.3 {\n            letter_grade = \"C-\"\n        } else\
    \ if gpa < 1.0 {\n            letter_grade = \"D+\"\n        } else if gpa < 0.7\
    \ {\n            letter_grade = \"D\"\n        } else {\n            letter_grade\
    \ = \"D-\"\n        }\n        gradesArray.append(String(letter_grade))\n    }\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz1uvtc8v/tmpz1uvtc8v.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f2dedec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f2dbd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f2dbd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f2dbd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1uvtc8v                        0x000055ae6a7c59f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b0f2e0ca460 __libc_start_main +
    245

    6    tmpz1uvtc8v                        0x000055ae6a7c5519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArr = grades\n    gradesArr.remove(at:\
    \ 0)\n    \n    var gradesCounter: Int = 1\n    var gradesMax = gradesArr.max()!\n\
    \    \n    for i in 1...gradesArr.count {\n        gradesCounter += 1\n      \
    \  if gradesArr[i] == gradesMax {\n            gradesCounter = 1\n           \
    \ gradesArr.remove(at: i)\n        }\n    }\n    \n    var gradesAvg = (gradesArr.reduce(0.0,\
    \ +)) / Double(gradesCounter.rounded())\n    \n    var gradesArrRev: [Double]\
    \ = []\n    for i in gradesArr.reversed() {\n        gradesArrRev.append(i)\n\
    \    }\n    \n    var gradesArrAvg: [Double] = []\n    for i in gradesArrRev {\n\
    \        gradesArrAvg.append(i)\n    }\n    \n    var gradesArrFinal: [Double]\
    \ = []\n    for i in gradesArrAvg {\n        let xy = gradesArrRev.index(of: i)!\n\
    \        let grade = gradesArrArr[xy - 1]\n        gradesArrFinal.append(grade)\n\
    \    }\n    \n    var gradesArrFinalRev: [Double] = []\n    for i in gradesArrArr.reversed()\
    \ {\n        gradesArrFinalRev.append(i)\n    }\n    \n    var letterGrades: [String]\
    \ = []\n    for i in gradesArrFinal {\n        let gradeLetter = gradesArrFinalRev.index(of:\
    \ i)!\n        let letter = letterGrades[gradeLetter - 1]\n        letterGrades.append(letter)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdtf3jdhh.swift:39:71: error: value of type 'Int' has no member\
    \ 'rounded'\n    var gradesAvg = (gradesArr.reduce(0.0, +)) / Double(gradesCounter.rounded())\n\
    \                                                        ~~~~~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpdtf3jdhh.swift:53:31: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n        let xy = gradesArrRev.index(of: i)!\n           \
    \                   ^\n/tmp/tmpdtf3jdhh.swift:53:31: note: use 'firstIndex(of:)'\
    \ instead\n        let xy = gradesArrRev.index(of: i)!\n                     \
    \         ^~~~~\n                              firstIndex\n/tmp/tmpdtf3jdhh.swift:54:21:\
    \ error: cannot find 'gradesArrArr' in scope\n        let grade = gradesArrArr[xy\
    \ - 1]\n                    ^~~~~~~~~~~~\n/tmp/tmpdtf3jdhh.swift:59:14: error:\
    \ cannot find 'gradesArrArr' in scope\n    for i in gradesArrArr.reversed() {\n\
    \             ^~~~~~~~~~~~\n/tmp/tmpdtf3jdhh.swift:65:45: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n        let gradeLetter = gradesArrFinalRev.index(of:\
    \ i)!\n                                            ^\n/tmp/tmpdtf3jdhh.swift:65:45:\
    \ note: use 'firstIndex(of:)' instead\n        let gradeLetter = gradesArrFinalRev.index(of:\
    \ i)!\n                                            ^~~~~\n                   \
    \                         firstIndex\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeArray: [String] = []\n    if grades.count\
    \ < 5 {\n        for grade in grades {\n            if grade > 0.0 && grade <=\
    \ 1.0 {\n                gradeArray.append(String(format: \"%.2f\", grade))\n\
    \            } else {\n                gradeArray.append(String(format: \"%.02f\"\
    , grade))\n            }\n        }\n    } else {\n        gradeArray = Array(repeating:\
    \ \"\", count: grades.count)\n        for grade in grades {\n            if grade\
    \ > 0.0 && grade <= 1.0 {\n                gradeArray[gradeArray.index(grade)]\
    \ += String(format: \"%.2f\", grade)\n            } else {\n                gradeArray[gradeArray.index(grade)]\
    \ += String(format: \"%.02f\", grade)\n            }\n        }\n    }\n    return\
    \ gradeArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwyjluimt.swift:29:35: error: no exact matches in call to initializer\
    \ \n                gradeArray.append(String(format: \"%.2f\", grade))\n     \
    \                             ^\nSwift.String:4:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpwyjluimt.swift:29:35:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n                gradeArray.append(String(format: \"%.2f\", grade))\n \
    \                                 ^\nSwift.String:3:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmpwyjluimt.swift:31:35: error:\
    \ no exact matches in call to initializer \n                gradeArray.append(String(format:\
    \ \"%.02f\", grade))\n                                  ^\nSwift.String:4:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmpwyjluimt.swift:31:35: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n                gradeArray.append(String(format:\
    \ \"%.02f\", grade))\n                                  ^\nSwift.String:3:12:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    public init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence,\
    \ S.Element == Character\n           ^\nSwift"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let min = grades.min()!\n    let max = grades.max()!\n\
    \    let grade_range: [(Double, Double)] = [ (min * 4.0, min * 3.0)\n        \
    \                                , ( min * 3.0, max )\n                      \
    \                  , ( min * 3.3, min * 2.3)\n                               \
    \         , ( min * 3.2, max )\n                                        , ( min\
    \ * 3.0, max )\n                                        , ( min * 2.7, min * 2.0)\n\
    \                                        , ( min * 2.3, min * 1.7)\n         \
    \                               , ( min * 2.0, max )\n                       \
    \                 , ( min * 1.7, min * 1.3)\n                                \
    \        , ( min * 1.3, min * 1.0)\n                                        ,\
    \ ( min * 1.0, max )\n                                        , ( min * 0.7, min\
    \ * 0.0)\n                                        , ( min * 0.0, max )]\n    return\
    \ grade_range.map { grade in\n        let letter_grade = String.localizedStringWithDefault(grade\
    \ * Double(9.0) + \"A\", comment: \"letter grade\")\n        return letter_grade\
    \ + \"+\"\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiwh2abyq.swift:41:82: error: binary operator '+' cannot be applied\
    \ to operands of type 'Double' and 'String'\n        let letter_grade = String.localizedStringWithDefault(grade\
    \ * Double(9.0) + \"A\", comment: \"letter grade\")\n                        \
    \                                     ~~~~~~~~~~~~~~~~~~~ ^ ~~~\n/tmp/tmpiwh2abyq.swift:41:82:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Duration), (String, String)\n        let letter_grade\
    \ = String.localizedStringWithDefault(grade * Double(9.0) + \"A\", comment: \"\
    letter grade\")\n                                                            \
    \                     ^\n/tmp/tmpiwh2abyq.swift:41:68: error: binary operator\
    \ '*' cannot be applied to operands of type '(Double, Double)' and 'Double'\n\
    \        let letter_grade = String.localizedStringWithDefault(grade * Double(9.0)\
    \ + \"A\", comment: \"letter grade\")\n                                      \
    \                       ~~~~~ ^ ~~~~~~~~~~~\n/tmp/tmpiwh2abyq.swift:41:68: note:\
    \ overloads for '*' exist with these partially matching parameter lists: (Double,\
    \ Double), (Duration, Double)\n        let letter_grade = String.localizedStringWithDefault(grade\
    \ * Double(9.0) + \"A\", comment: \"letter grade\")\n                        \
    \                                           ^\n/tmp/tmpiwh2abyq.swift:43:7: error:\
    \ cannot convert return expression of type 'String' to return type '[String]'\n\
    \    }.joined()\n~~~~~~^~~~~~~~\n/tmp/tmpiwh2abyq.swift:41:35: error: type 'String'\
    \ has no member 'localizedStringWithDefault'\n        let letter_grade = String.localizedStringWithDefault(grade\
    \ * Double(9.0) + \"A\", comment: \"letter grade\")\n                        \
    \   ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    let gradesCount\
    \ = grades.count\n    if gradesCount == 0 {\n        gradeLetters.append(\"E\"\
    )\n        return gradeLetters\n    }\n    let maxGrade = grades.max()!\n    let\
    \ minGrade = grades.min()!\n    let gradeDifference = maxGrade - minGrade\n  \
    \  let totalGradeCount = gradesCount - 1\n    let increment = gradeDifference\
    \ / CGFloat(totalGradeCount)\n    for index in 0..<totalGradeCount {\n       \
    \ let curGrade = grades[index] + increment\n        let letter = gradeLetterIndex(curGrade)\n\
    \        if letter == nil {\n            letter = gradeLetters[gradeLetters.count-1]\n\
    \        }\n        gradeLetters.append(letter!)\n    }\n    return gradeLetters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqho4m9sm.swift:35:39: error: cannot find 'CGFloat' in scope\n \
    \   let increment = gradeDifference / CGFloat(totalGradeCount)\n             \
    \                         ^~~~~~~\n/tmp/tmpqho4m9sm.swift:38:22: error: cannot\
    \ find 'gradeLetterIndex' in scope\n        let letter = gradeLetterIndex(curGrade)\n\
    \                     ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    var totalGrade:\
    \ Double = 0.0\n    for grade in grades {\n        if grade > 0 {\n          \
    \  totalGrade += grade\n        } else {\n            totalGrade += grade*-1\n\
    \        }\n    }\n    if totalGrade == 0.0 {\n        letterGrades = [\"E\"]\n\
    \        return letterGrades\n    }\n    var letterGradeIndex = 0\n    var gp\
    \ = 0\n    for grade in grades {\n        if totalGrade > gp*1.1 && totalGrade\
    \ < gp*1.3 { // + A+\n            letterGrades.append(grades[letterGradeIndex].description)\n\
    \            letterGradeIndex += 1\n        }\n        gp++\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0ktfzbj5.swift:31:32: error: missing whitespace between '*' and\
    \ '-' operators\n            totalGrade += grade*-1\n                        \
    \       ^~\n                                 \n/tmp/tmp0ktfzbj5.swift:41:25: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    \
    \    if totalGrade > gp*1.1 && totalGrade < gp*1.3 { // + A+\n               \
    \         ^\n                        Double( )\n/tmp/tmp0ktfzbj5.swift:41:48:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        if totalGrade > gp*1.1 && totalGrade < gp*1.3 { // + A+\n           \
    \                                    ^\n                                     \
    \          Double( )\n/tmp/tmp0ktfzbj5.swift:45:11: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        gp++\n          ^~\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n\tvar grades_string = [String]()\n\tvar index = 0\n\
    \tfor element in grades {\n\t\tgrades_string.append(String.init(\"\\(element)\"\
    ))\n\t\tif element == 0.0 {\n\t\t\tgrades_string.append(\"E\")\n\t\t\tbreak\n\t\
    \t}\n\t}\n\tif grades.count > 7 {\n\t\treturn grades_string\n\t}\n\tvar index\
    \ = 0\n\tvar last_index = grades.count - 1\n\tfor element in grades {\n\t\tif\
    \ element == 0.0 {\n\t\t\tlast_index = index\n\t\t\tbreak\n\t\t}\n\t\tindex +=\
    \ 1\n\t}\n\t\n\t\n\tfor element in grades {\n\t\tif element == 0.0 {\n\t\t\tgrades_string.append(\"\
    D-\")\n\t\t\tbreak\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tif element < 3.0 {\n\t\t\tif\
    \ element > last_index {\n\t\t\t\tgrades_string.append(\"B-\")\n\t\t\t} else {\n\
    \t\t\t\tgrades_string.append(\"A-\")\n\t\t\t}\n\t\t} else if element >= 3.0 &&\
    \ element <= 3.7 {\n\t\t\tgrades_string.append(\"B+\")\n\t\t} else if element\
    \ >= 3.8 && element < 4.0 {\n\t\t\tgrades_string.append(\"B\")\n\t\t} else if\
    \ element >= 4.0 && element <= 4.7 {\n\t\t\tgrades_string.append(\"B-\")\n\t\t\
    } else if element >= 4.8 && element < 5.0 {\n\t\t\tgrades_string.append(\"C+\"\
    )\n\t\t} else if element >= 5.0 && element <= 5.7 {\n\t\t\tgrades_string.append(\"\
    C\")\n\t\t} else if element >= 5.8 && element < 6.0 {\n\t\t\tgrades_string.append(\"\
    C-\")\n\t\t} else if element >= 6.0 && element <= 6.7 {\n\t\t\tgrades_string.append(\"\
    D+\")\n\t\t} else if element >= 6.8 && element < 7.0 {\n\t\t\tgrades_string.append(\"\
    D\")\n\t\t} else if element >= 7.0 && element <= 7.7 {\n\t\t\tgrades_string.append(\"\
    D-\")\n\t\t} else if element == 7.0 {\n\t\t\tgrades_string.append(\"E\")\n\t\t\
    }\n\t}\n\treturn grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgxdj4m7n.swift:37:6: error: invalid redeclaration of 'index'\n\
    \        var index = 0\n            ^\n/tmp/tmpgxdj4m7n.swift:26:6: note: 'index'\
    \ previously declared here\n        var index = 0\n            ^\n/tmp/tmpgxdj4m7n.swift:57:15:\
    \ error: binary operator '>' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n                        if element > last_index {\n                 \
    \          ~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmpgxdj4m7n.swift:57:15: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \                      if element > last_index {\n                           \
    \        ^\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradesSet = Array(Set(grades))\n    let sortedGrades\
    \ = grades.sorted(by: <)\n    var lettersGrades = [String]()\n    for let grade\
    \ in sortedGrades {\n        switch grade {\n        case 0...0.1:\n         \
    \   lettersGrades.append(\"E-\")\n        case 0.1:\n            lettersGrades.append(\"\
    D-\")\n        case 0.2 ... 0.3:\n            lettersGrades.append(\"C+\")\n \
    \       case 0.3 ... 0.4:\n            lettersGrades.append(\"B-\")\n        case\
    \ 0.4:\n            lettersGrades.append(\"B+\")\n        case 0.5 ... 0.6:\n\
    \            lettersGrades.append(\"A+\")\n        case 0.6:\n            lettersGrades.append(\"\
    A\")\n        case 0.7 ... 0.8:\n            lettersGrades.append(\"A-\")\n  \
    \      case 0.8 ... 0.9:\n            lettersGrades.append(\"B\")\n        case\
    \ 0.9:\n            lettersGrades.append(\"B-\")\n        case 1.0 ... 1.1:\n\
    \            lettersGrades.append(\"C\")\n        case 1.1 ... 1.2:\n        \
    \    lettersGrades.append(\"C-\")\n        case 1.2 ... 1.3:\n            lettersGrades.append(\"\
    D+\")\n        case 1.3:\n            lettersGrades.append(\"D\")\n        case\
    \ 1.4 ... 1.5:\n            lettersGrades.append(\"D-\")\n        case 1.5 ...\
    \ 1.6:\n            lettersGrades.append(\"E\")\n        case 1.6:\n         \
    \   lettersGrades.append(\"E-\")\n        case 1.7 ... 1.8:\n            lettersGrades.append(\"\
    F\")\n        case 1.8 ... 1.9:\n            lettersGrades.append(\"F+\")\n  \
    \      case 1.9:\n            lettersGrades.append(\"F\")\n        case 2.0 ...\
    \ 2.1:\n            lettersGrades.append(\"G\")\n        case 2.1 ... 2.2:\n \
    \           lettersGrades.append(\"G+\")\n        case 2.2 ... 2.3:\n        \
    \    lettersGrades.append(\"G-\")\n        case 2.3 ... 2.4:\n            lettersGrades.append(\"\
    H\")\n        case 2.4:\n            lettersGrades.append(\"H-\")\n        case\
    \ 2.5 ... 2.6:\n            lettersGrades.append(\"I\")\n        case 2.6:\n \
    \           lettersGrades.append(\"I+\")\n        case 2.7 ... 2.8:\n        \
    \    lettersGrades.append(\"I\")\n        case 2.8 ... 2.9:\n            lettersGrades.append(\"\
    I+\")\n        case 2.9:\n            lettersGrades.append(\"I\")\n        case\
    \ 3.0:\n            lettersGrades.append(\"J\")\n        case 3.1 ... 3.2:\n \
    \           lettersGrades.append(\"J+\")\n        case 3.2:\n            lettersGrades.append(\"\
    J\")\n        case 3.3 ... 3.4:\n            letters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9eukymbz.swift:28:9: error: 'let' pattern cannot appear nested\
    \ in an already immutable context\n    for let grade in sortedGrades {\n     \
    \   ^\n/tmp/tmp9eukymbz.swift:118:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp9eukymbz.swift:28:35:\
    \ note: to match this opening '{'\n    for let grade in sortedGrades {\n     \
    \                             ^\n/tmp/tmp9eukymbz.swift:118:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmp9eukymbz.swift:24:59: note: to match this opening '{'\n\
    func numerical_letter_grade(grades: [Double]) -> [String] {\n                \
    \                                          ^\n/tmp/tmp9eukymbz.swift:97:13: error:\
    \ cannot find 'letters' in scope\n            letters\n            ^~~~~~~\n/tmp/tmp9eukymbz.swift:29:9:\
    \ error: switch must be exhaustive\n        switch grade {\n        ^\n/tmp/tmp9eukymbz.swift:29:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmp9eukymbz.swift:101:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let maxGrade: Double = grades.max()\n    let gradeRange\
    \ = maxGrade - min(grades)\n\n    var result = [String]()\n    let total = 0\n\
    \n    for i in 0 ..< grades.count {\n        let grade = grades[i]\n        let\
    \ remainder = grade % 1.0\n\n        if remainder <= 0.9 {\n            total\
    \ += 1.0\n        }\n        \n        if total > gradeRange {\n            result.append(letterGrade(grade))\n\
    \            total = 0\n        } else {\n            result.append(letterGrade(remainder))\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmply09a32r.swift:25:35: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n    let maxGrade: Double = grades.max()\n\
    \                                  ^\n/tmp/tmply09a32r.swift:25:35: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ let maxGrade: Double = grades.max()\n                                  ^\n \
    \                                       ?? <#default value#>\n/tmp/tmply09a32r.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let maxGrade: Double = grades.max()\n                           \
    \       ^\n                                       !\n/tmp/tmply09a32r.swift:26:43:\
    \ error: missing argument for parameter #2 in call\n    let gradeRange = maxGrade\
    \ - min(grades)\n                                          ^\n               \
    \                           , <#Double#>\nSwift.min:1:24: note: 'min' declared\
    \ here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n/tmp/tmply09a32r.swift:26:37: error: cannot convert\
    \ value of type '[Double]' to expected argument type 'Double'\n    let gradeRange\
    \ = maxGrade - min(grades)\n                                    ^\n/tmp/tmply09a32r.swift:33:31:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n        let remainder = grade % 1.0\n                             \
    \ ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic\
    \ func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n\
    /tmp/tmply09a32r.swift:36:13: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n            total += 1.0\n            ^\n          \
    \  Double( )\n/tmp/tmply09a32r.swift:40:27: error: cannot find 'letterGrade' in\
    \ scope\n            result.append(letterGrade(grade))\n                     \
    \     ^~~~~~~~~~~\n/tmp/tmply09a32r.swift:41:13: error: cannot assign to value:\
    \ 'total' is a 'let' constant\n            total = 0\n            ^~~~~\n/tmp/tmply09a32r.swift:29:5:"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    guard grades.count\
    \ == 7 else {\n        return letterGrades\n    }\n    let gpa = grades[0]\n \
    \   if gpa.truncatingRemainder(dividingBy: 3.0) < 2.0 {\n        let gpa3 = gpa.truncatingRemainder(dividingBy:\
    \ 3.0)\n        if gpa3 < 3.0 {\n            letterGrades.append(\"A+\")\n   \
    \     } else if gpa3 > 3.0 && gpa3 <= 4.0 {\n            letterGrades.append(\"\
    A\")\n        } else if gpa3 > 4.0 {\n            letterGrades.append(\"B+\")\n\
    \        }\n    }\n    if gpa.truncatingRemainder(dividingBy: 3.0) < 1.0 {\n \
    \       let gpa2 = gpa.truncatingRemainder(dividingBy: 3.0)\n        if gpa2 <\
    \ 3.0 {\n            letterGrades.append(\"A\")\n        } else if gpa2 > 3.0\
    \ && gpa2 <= 4.0 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ gpa2 > 4.0 {\n            letterGrades.append(\"B\")\n        }\n    }\n   \
    \ if gpa.truncatingRemainder(dividingBy: 3.0) < 0.7 {\n        let gpa1 = gpa.truncatingRemainder(dividingBy:\
    \ 3.0)\n        if gpa1 < 3.0 {\n            letterGrades.append(\"B\")\n    \
    \    } else if gpa1 > 3.0 && gpa1 <= 4.0 {\n            letterGrades.append(\"\
    B-\")\n        } else if gpa1 > 4.0 {\n            letterGrades.append(\"C\")\n\
    \        }\n    }\n    if gpa.truncatingRemainder(dividingBy: 3.0) < 0.1 {\n \
    \       let gpa0 = gpa.truncatingRemainder(dividingBy: 3.0)\n        if gpa0 <\
    \ 3.0 {\n            letterGrades.append(\"C\")\n        } else if gpa0 > 3.0\
    \ && gpa0 <= 4.0 {\n            letterGrades.append(\"C-\")\n        } else if\
    \ gpa0 > 4.0 {\n            letterGrades.append(\"D+\")\n        }\n    }\n  \
    \  if gpa.truncatingRemainder(dividingBy: 3.0) < 0.0 {\n        let gpa7 = gpa.truncatingRemainder(dividingBy:\
    \ 3.0)\n        if gpa7 < 3.0 {\n            letterGrades.append(\"D\")\n    \
    \    } else if gpa7 > 3.0 && gpa7 <= 4.0 {\n            letterGrades.append(\"\
    D-\")\n        }\n    }\n    if gpa.truncatingRemainder(dividingBy: 3.0) < -1.0\
    \ {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyia8_gkk.swift:99:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpyia8_gkk.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpyia8_gkk.swift:82:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n\n    if grades.count\
    \ <= 1 {\n        return gradeLetters\n    }\n\n    if grades.count > 1 {\n  \
    \      let gpa = grades.reduce(0, +)\n        let numGrades = Int(gpa)\n     \
    \   let gpaPoints = (grades[grades.count - 1] * 4).rounded(.up)\n        let gpaPercent\
    \ = Double(gpaPoints).truncatingRemainder(.allFinite)\n        let firstGrade\
    \ = Double(grades[0]).truncatingRemainder(.allFinite)\n        let gpaPercentPer\
    \ = Double(firstGrade).truncatingRemainder(.allFinite)\n        let lastGrade\
    \ = Double(grades[grades.count - 1]).truncatingRemainder(.allFinite)\n       \
    \ let lastPercent = Double(lastGrade).truncatingRemainder(.allFinite)\n      \
    \  let numGrades2 = Int(numGrades)\n        let gpaPoints2 = (gpaPoints / numGrades).rounded(.up)\n\
    \        let gpaPercent2 = Double(gpaPoints2).truncatingRemainder(.allFinite)\n\
    \        let firstGrade2 = Double(grades[grades.count - 1] / numGrades).rounded(.up)\n\
    \        let gpaPercentPer = Double(firstGrade2).truncatingRemainder(.allFinite)\n\
    \        let lastGrade2 = Double(grades[grades.count - 1] / numGrades) * lastPercent\n\
    \        let lastPercent2 = Double(lastGrade2).truncatingRemainder(.allFinite)\n\
    \        let gpaPercentSum = Double(gpaPoints2 + gpaPoints2 / numGrades2 + lastPercent2).truncatingRemainder(.allFinite)\n\
    \n        if gpaPercent == 0 {\n            gradeLetters.append(grades[0])\n \
    \           return gradeLetters\n        }\n\n        // First Letter Grade\n\
    \        if gpaPercent <= gpaPercentPer {\n            gradeLetters.append(\"\
    A+\")\n        } else {\n            gradeLetters.append(\"A-\")\n        }\n\n\
    \        // Second Letter Grade\n        if gpaPercent <= gpaPercentSum {\n  \
    \          gradeLetters.append(\"A\")\n        } else {\n            gradeLetters.append(\"\
    B+\")\n        }\n\n        // Third Letter Grade\n        if gpaPercent <= lastPercent\
    \ {\n            gradeLetters.append(\"B\")\n        } else {\n            gradeLetters.append(\"\
    B-\")\n        }\n\n        // Fourth Letter Grade\n        if gpaPercent <= gpaPercent2\
    \ {\n            gradeLetter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd0becs4n.swift:98:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpd0becs4n.swift:31:25:\
    \ note: to match this opening '{'\n    if grades.count > 1 {\n               \
    \         ^\n/tmp/tmpd0becs4n.swift:98:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpd0becs4n.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpd0becs4n.swift:35:64: error: missing argument label 'dividingBy:' in call\n\
    \        let gpaPercent = Double(gpaPoints).truncatingRemainder(.allFinite)\n\
    \                                                               ^\n          \
    \                                                     dividingBy: \n/tmp/tmpd0becs4n.swift:35:65:\
    \ error: type 'Double' has no member 'allFinite'\n        let gpaPercent = Double(gpaPoints).truncatingRemainder(.allFinite)\n\
    \                                                               ~^~~~~~~~~\n/tmp/tmpd0becs4n.swift:36:64:\
    \ error: missing argument label 'dividingBy:' in call\n        let firstGrade\
    \ = Double(grades[0]).truncatingRemainder(.allFinite)\n                      \
    \                                         ^\n                                \
    \                               dividingBy: \n/tmp/tmpd0becs4n.swift:36:65: error:\
    \ type 'Double' has no member 'allFinite'\n        let firstGrade = Double(grades[0]).truncatingRemainder(.allFinite)\n\
    \                                                               ~^~~~~~~~~\n/tmp/tmpd0becs4n.swift:37:68:\
    \ error: missing argument label 'dividingBy:' in call\n        let gpaPercentPer\
    \ = Double(firstGrade).truncatingRemainder(.allFinite)\n                     \
    \                                              ^\n                           \
    \                             "
  stdout: ''
  timestamp: 1660014977
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n\n    for grade\
    \ in grades {\n        switch grade {\n        case 3.5:\n            letterGrades.append(\"\
    D+\")\n        case 3.0:\n            letterGrades.append(\"D-\")\n        case\
    \ 2.7:\n            letterGrades.append(\"B\")\n        case 2.3:\n          \
    \  letterGrades.append(\"B-\")\n        case 1.7:\n            letterGrades.append(\"\
    C\")\n        case 1.3:\n            letterGrades.append(\"C-\")\n        case\
    \ 1:\n            letterGrades.append(\"C\")\n        case 0.7:\n            letterGrades.append(\"\
    D\")\n        case 0:\n            letterGrades.append(\"D\")\n        case 0.3:\n\
    \            letterGrades.append(\"D-\")\n        case 0:\n            letterGrades.append(\"\
    E\")\n        case -3.5:\n            letterGrades.append(\"D+\")\n        case\
    \ -3.0:\n            letterGrades.append(\"D-\")\n        case -2.7:\n       \
    \     letterGrades.append(\"B\")\n        case -2.3:\n            letterGrades.append(\"\
    B-\")\n        case -1.7:\n            letterGrades.append(\"C\")\n        case\
    \ -1.3:\n            letterGrades.append(\"C-\")\n        case -1:\n         \
    \   letterGrades.append(\"C\")\n        case -0.7:\n            letterGrades.append(\"\
    D\")\n        case -0:\n            letterGrades.append(\"D\")\n        case -0.3:\n\
    \            letterGrades.append(\"D-\")\n        case -1:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"A\")\n        }\n  \
    \  }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpaxxct3qz/tmpaxxct3qz.swift:93: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a3f3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a3c32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a3c32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a3c317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxxct3qz                        0x00005619326b87f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b35a4127460 __libc_start_main +
    245

    6    tmpaxxct3qz                        0x00005619326b8319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n\n    for grade\
    \ in grades {\n        var letterGrade = \"\"\n\n        switch grade {\n    \
    \    case 0.0 <= grade && grade < 1.0:\n            letterGrade = \"D+\"\n   \
    \     case 1.0 <= grade && grade < 2.0:\n            letterGrade = \"D\"\n   \
    \     case 2.0 <= grade && grade < 3.0:\n            letterGrade = \"C+\"\n  \
    \      case 3.0 <= grade && grade < 4.0:\n            letterGrade = \"C\"\n  \
    \      case 4.0 <= grade && grade < 5.0:\n            letterGrade = \"B-\"\n \
    \       case 5.0 <= grade && grade < 6.0:\n            letterGrade = \"B\"\n \
    \       case 6.0 <= grade && grade < 7.0:\n            letterGrade = \"A-\"\n\
    \        case 7.0 <= grade && grade < 8.0:\n            letterGrade = \"A\"\n\
    \        case 8.0 <= grade && grade < 9.0:\n            letterGrade = \"A+\"\n\
    \        case 9.0 <= grade && grade < 10.0:\n            letterGrade = \"B+\"\n\
    \        case 10.0 <= grade && grade < 11.0:\n            letterGrade = \"B\"\n\
    \        case 11.0 <= grade && grade < 12.0:\n            letterGrade = \"C+\"\
    \n        case 12.0 <= grade && grade < 13.0:\n            letterGrade = \"C\"\
    \n        case 13.0 <= grade && grade < 14.0:\n            letterGrade = \"D-\"\
    \n        case 14.0 <= grade && grade < 15.0:\n            letterGrade = \"D\"\
    \n        case 15.0 <= grade && grade < 16.0:\n            letterGrade = \"D+\"\
    \n        default:\n            letterGrade = \"E\"\n        }\n\n        letterGrades.append(letterGrade)\n\
    \    }\n\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpotnku7d2.swift:31:27: error: expression pattern of type 'Bool'\
    \ cannot match values of type 'Double'\n        case 0.0 <= grade && grade < 1.0:\n\
    \             ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmpotnku7d2.swift:33:27: error:\
    \ expression pattern of type 'Bool' cannot match values of type 'Double'\n   \
    \     case 1.0 <= grade && grade < 2.0:\n             ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n\
    /tmp/tmpotnku7d2.swift:35:27: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Double'\n        case 2.0 <= grade && grade < 3.0:\n \
    \            ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmpotnku7d2.swift:37:27: error:\
    \ expression pattern of type 'Bool' cannot match values of type 'Double'\n   \
    \     case 3.0 <= grade && grade < 4.0:\n             ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n\
    /tmp/tmpotnku7d2.swift:39:27: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Double'\n        case 4.0 <= grade && grade < 5.0:\n \
    \            ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmpotnku7d2.swift:41:27: error:\
    \ expression pattern of type 'Bool' cannot match values of type 'Double'\n   \
    \     case 5.0 <= grade && grade < 6.0:\n             ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n\
    /tmp/tmpotnku7d2.swift:43:27: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Double'\n        case 6.0 <= grade && grade < 7.0:\n \
    \            ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmpotnku7d2.swift:45:27: error:\
    \ expression pattern of type 'Bool' cannot match values of type 'Double'\n   \
    \     case 7.0 <= grade && grade < 8.0:\n             ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n\
    /tmp/tmpotnku7d2.swift:47:27: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Double'\n        case 8.0 <= grade && grade < 9.0:\n \
    \            ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmpotnku7d2.swift:49:27: error:\
    \ expression pattern of type 'Bool' cannot match values of type 'Double'\n   \
    \     case 9.0 <= grade && grade < 10.0:\n             ~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n\
    /tmp/tmpotnku7d2.swift:51:28: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Double'\n        case 10.0 <= grade &"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var grade = \"\"\n    \n    for grade in\
    \ grades {\n        switch grade {\n            case 3.0:\n                grade\
    \ = \"A+\"\n            case 3.1:\n                grade = \"A\"\n           \
    \ case 3.2:\n                grade = \"A-\"\n            case 3.3:\n         \
    \       grade = \"B+\"\n            case 3.4:\n                grade = \"B\"\n\
    \            case 3.5:\n                grade = \"B-\"\n            case 3.6:\n\
    \                grade = \"C+\"\n            case 3.7:\n                grade\
    \ = \"C\"\n            case 3.8:\n                grade = \"C-\"\n           \
    \ case 3.9:\n                grade = \"D+\"\n            case 4.0:\n         \
    \       grade = \"D\"\n            case 4.1:\n                grade = \"D-\"\n\
    \            case 4.2:\n                grade = \"E\"\n            default:\n\
    \                grade = \"Invalid input\"\n        }\n    }\n    return grade\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo8ppmmo_.swift:31:17: error: cannot assign to value: 'grade' is\
    \ a 'let' constant\n                grade = \"A+\"\n                ^~~~~\n/tmp/tmpo8ppmmo_.swift:31:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n             \
    \   grade = \"A+\"\n                        ^~~~\n/tmp/tmpo8ppmmo_.swift:33:17:\
    \ error: cannot assign to value: 'grade' is a 'let' constant\n               \
    \ grade = \"A\"\n                ^~~~~\n/tmp/tmpo8ppmmo_.swift:33:25: error: cannot\
    \ assign value of type 'String' to type 'Double'\n                grade = \"A\"\
    \n                        ^~~\n/tmp/tmpo8ppmmo_.swift:35:17: error: cannot assign\
    \ to value: 'grade' is a 'let' constant\n                grade = \"A-\"\n    \
    \            ^~~~~\n/tmp/tmpo8ppmmo_.swift:35:25: error: cannot assign value of\
    \ type 'String' to type 'Double'\n                grade = \"A-\"\n           \
    \             ^~~~\n/tmp/tmpo8ppmmo_.swift:37:17: error: cannot assign to value:\
    \ 'grade' is a 'let' constant\n                grade = \"B+\"\n              \
    \  ^~~~~\n/tmp/tmpo8ppmmo_.swift:37:25: error: cannot assign value of type 'String'\
    \ to type 'Double'\n                grade = \"B+\"\n                        ^~~~\n\
    /tmp/tmpo8ppmmo_.swift:39:17: error: cannot assign to value: 'grade' is a 'let'\
    \ constant\n                grade = \"B\"\n                ^~~~~\n/tmp/tmpo8ppmmo_.swift:39:25:\
    \ error: cannot assign value of type 'String' to type 'Double'\n             \
    \   grade = \"B\"\n                        ^~~\n/tmp/tmpo8ppmmo_.swift:41:17:\
    \ error: cannot assign to value: 'grade' is a 'let' constant\n               \
    \ grade = \"B-\"\n                ^~~~~\n/tmp/tmpo8ppmmo_.swift:41:25: error:\
    \ cannot assign value of type 'String' to type 'Double'\n                grade\
    \ = \"B-\"\n                        ^~~~\n/tmp/tmpo8ppmmo_.swift:43:17: error:\
    \ cannot assign to value: 'grade' is a 'let' constant\n                grade =\
    \ \"C+\"\n                ^~~~~\n/tmp/tmpo8ppmmo_.swift:43:25: error: cannot assign\
    \ value of type 'String' to type 'Double'\n                grade = \"C+\"\n  \
    \                      ^~~~\n/tmp/tmpo8ppmmo_.swift:45:17: e"
  stdout: ''
  timestamp: 1660014972
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let minGrade = grades.min()\n    let maxGrade =\
    \ grades.max()\n    let range = minGrade < 0 ? minGrade - maxGrade : maxGrade\
    \ - minGrade\n    \n    var letterGrades = [String]()\n    let letterGrade = \"\
    E\"\n    var letterGradeIndex = -1\n    \n    for i in 0 ..< grades.count {\n\
    \        let grade = grades[i]\n        let remainder = grade % range\n      \
    \  letterGradeIndex = remainder < 0 ? letterGradeIndex + 1 : letterGradeIndex\n\
    \        letterGrades[letterGradeIndex].append(grade > 0 ? \"A+\" : string(grade\
    \ % 1) + \"A\")\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2118g4cx.swift:27:17: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n    let range = minGrade < 0 ? minGrade\
    \ - maxGrade : maxGrade - minGrade\n                ^\n/tmp/tmp2118g4cx.swift:27:17:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let range = minGrade < 0 ? minGrade - maxGrade : maxGrade - minGrade\n\
    \                ^\n                         ?? <#default value#>\n/tmp/tmp2118g4cx.swift:27:17:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let range = minGrade < 0 ? minGrade - maxGrade : maxGrade - minGrade\n\
    \                ^\n                        !\n/tmp/tmp2118g4cx.swift:27:32: error:\
    \ value of optional type 'Double?' must be unwrapped to a value of type 'Double'\n\
    \    let range = minGrade < 0 ? minGrade - maxGrade : maxGrade - minGrade\n  \
    \                             ^\n/tmp/tmp2118g4cx.swift:27:32: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ let range = minGrade < 0 ? minGrade - maxGrade : maxGrade - minGrade\n     \
    \                          ^\n                               (        ?? <#default\
    \ value#>)\n/tmp/tmp2118g4cx.swift:27:32: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    let range = minGrade < 0\
    \ ? minGrade - maxGrade : maxGrade - minGrade\n                              \
    \ ^\n                                       !\n/tmp/tmp2118g4cx.swift:27:43: error:\
    \ value of optional type 'Double?' must be unwrapped to a value of type 'Double'\n\
    \    let range = minGrade < 0 ? minGrade - maxGrade : maxGrade - minGrade\n  \
    \                                        ^\n/tmp/tmp2118g4cx.swift:27:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    let range = minGrade < 0 ? minGrade - maxGrade : maxGrade - minGrade\n  \
    \                                        ^\n                                 \
    \         (        ?? <#default value#>)\n/tmp/tmp2118g4cx.swift:27:43: note:\
    \ force-unwrap "
  stdout: ''
  timestamp: 1660014973
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output = [String]()\n    \n    // Write code\
    \ here.\n    \n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpknout_8e/tmpknout_8e.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b333c451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b333c148b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b333c148988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b333c1477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknout_8e                        0x000056475601c636 <unavailable> + 5686

    5    libc.so.6                          0x00002b333c63d460 __libc_start_main +
    245

    6    tmpknout_8e                        0x000056475601c159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let grades_sum = grades.reduce(0, {$0 + $1})\n\
    \    let result = [String]()\n    if grades_sum > 1.0 {\n        \n        grades.reverse()\n\
    \        \n        var index = grades.startIndex\n        for n in grades {\n\
    \            let grade = grades[index]\n            if grade < 0.7 {\n       \
    \         result.append(String(grade))\n            }\n            if grade >=\
    \ 0.7 {\n                \n                result.append(String(grade))\n    \
    \            result.append(String(\"-\"))\n            }\n            \n     \
    \       index += 1.0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_hfbx5p.swift:29:16: error: cannot use mutating member on immutable\
    \ value: 'grades' is a 'let' constant\n        grades.reverse()\n        ~~~~~~\
    \ ^\n/tmp/tmpa_hfbx5p.swift:35:24: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n                result.append(String(grade))\n\
    \                ~~~~~~ ^\n/tmp/tmpa_hfbx5p.swift:26:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let result = [String]()\n    ^~~\n    var\n/tmp/tmpa_hfbx5p.swift:39:24:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \                result.append(String(grade))\n                ~~~~~~ ^\n/tmp/tmpa_hfbx5p.swift:26:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [String]()\n\
    \    ^~~\n    var\n/tmp/tmpa_hfbx5p.swift:40:24: error: cannot use mutating member\
    \ on immutable value: 'result' is a 'let' constant\n                result.append(String(\"\
    -\"))\n                ~~~~~~ ^\n/tmp/tmpa_hfbx5p.swift:26:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let result = [String]()\n    ^~~\n    var\n\
    /tmp/tmpa_hfbx5p.swift:43:22: error: cannot convert value of type 'Double' to\
    \ expected argument type 'Int'\n            index += 1.0\n                   \
    \  ^\n                     Int( )\n"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var gradesStrings = [String]()\n    \n  \
    \  let totalGrades = grades.reduce(0, combine: { (accum, grade) -> Double in\n\
    \        return accum + grade\n    })\n    \n    let averageGrade = totalGrades\
    \ / Double(grades.count)\n    \n    var letterGrade: String = grades.last! >=\
    \ averageGrade ? \"D-\" : \"D\"\n    \n    for gradeIndex in grades.indices {\n\
    \        let grade = grades[gradeIndex]\n        let currentLetterGrade: String\n\
    \        \n        if grade >= averageGrade {\n            currentLetterGrade\
    \ = \"D+\"\n        } else {\n            currentLetterGrade = \"D\"\n       \
    \ }\n        \n        for index = 0 to gradeIndex {\n            let previousGrade\
    \ = grades[index-1]\n            let nextGrade = grades[index+1]\n           \
    \ \n            if index == gradeIndex - 1 && gradeIndex != grades.count - 1 &&\
    \ nextGrade != 0.0 {\n                let nextLetterGrade: String\n          \
    \      \n                if nextGrade >= averageGrade {\n                    nextLetterGrade\
    \ = \"D-\"\n                } else {\n                    nextLetterGrade = \"\
    D\"\n                }\n                \n                letterGrade = currentLetterGrade\
    \ + nextLetterGrade\n                break\n            }\n            \n    \
    \        letterGrade = currentLetterGrade + \"-\"\n        }\n        \n     \
    \   gradesStrings.append(letterGrade)\n    }\n    \n    return gradesStrings\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxdhs8s8v.swift:46:19: error: expected 'in' after for-each pattern\n\
    \        for index = 0 to gradeIndex {\n                  ^\n/tmp/tmpxdhs8s8v.swift:46:19:\
    \ error: expected Sequence expression for for-each loop\n        for index = 0\
    \ to gradeIndex {\n                  ^\n/tmp/tmpxdhs8s8v.swift:28:36: error: extraneous\
    \ argument label 'combine:' in call\n    let totalGrades = grades.reduce(0, combine:\
    \ { (accum, grade) -> Double in\n                                   ^   ~~~~~~~~~\n\
    \                                       \n"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    if grades.isEmpty\
    \ {\n        return letter_grades\n    }\n\n    let gpas = grades.map { String($0)\
    \ }\n    let lowest_gpa = grades.min() ?? 0\n    let highest_gpa = grades.max()\
    \ ?? 0\n\n    let gpa = gpas.max()\n    let index = (gpas - gpa).count\n\n   \
    \ if index < 3 {\n        letter_grades.append(lowest_gpa)\n    }\n\n    for i\
    \ in 0..<index {\n        letter_grades.append(gpas.first!)\n    }\n\n    for\
    \ i in 0..<index {\n        letter_grades.append(gpas[index - 1 - i] ?? highest_gpa)\n\
    \    }\n\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdhhu9zhz.swift:35:23: error: binary operator '-' cannot be applied\
    \ to operands of type '[String]' and 'String?'\n    let index = (gpas - gpa).count\n\
    \                 ~~~~ ^ ~~~\n/tmp/tmpdhhu9zhz.swift:38:30: error: cannot convert\
    \ value of type 'Double' to expected argument type 'String'\n        letter_grades.append(lowest_gpa)\n\
    \                             ^\n"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let average = grades.reduce(0.0, +) / Double(grades.count)\n\
    \    let result: [String] = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\n    for\
    \ index in stride(from: grades.count-1, to: 0, by: -1) {\n        let gpa = grades[index]\n\
    \        let letterGrade = result[index+1]\n\n        let finalGPA = gpa + average\n\
    \n        if finalGPA >= 3.0 {\n            if letterGrade == \"D+\" {\n     \
    \           letterGrade = \"D\"\n            } else if letterGrade == \"D\" {\n\
    \                letterGrade = \"D-\"\n            } else if letterGrade == \"\
    C+\" {\n                letterGrade = \"C\"\n            } else if letterGrade\
    \ == \"C\" {\n                letterGrade = \"C-\"\n            } else if letterGrade\
    \ == \"B-\" {\n                letterGrade = \"B\"\n            } else if letterGrade\
    \ == \"B\" {\n                letterGrade = \"B+\"\n            } else if letterGrade\
    \ == \"A-\" {\n                letterGrade = \"A\"\n            } else if letterGrade\
    \ == \"A\" {\n                letterGrade = \"A+\"\n            }\n        }\n\
    \n        result[index] = letterGrade\n    }\n\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbst50di3.swift:36:17: error: cannot assign to value: 'letterGrade'\
    \ is a 'let' constant\n                letterGrade = \"D\"\n                ^~~~~~~~~~~\n\
    /tmp/tmpbst50di3.swift:30:9: note: change 'let' to 'var' to make it mutable\n\
    \        let letterGrade = result[index+1]\n        ^~~\n        var\n/tmp/tmpbst50di3.swift:38:17:\
    \ error: cannot assign to value: 'letterGrade' is a 'let' constant\n         \
    \       letterGrade = \"D-\"\n                ^~~~~~~~~~~\n/tmp/tmpbst50di3.swift:30:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let letterGrade = result[index+1]\n\
    \        ^~~\n        var\n/tmp/tmpbst50di3.swift:40:17: error: cannot assign\
    \ to value: 'letterGrade' is a 'let' constant\n                letterGrade = \"\
    C\"\n                ^~~~~~~~~~~\n/tmp/tmpbst50di3.swift:30:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let letterGrade = result[index+1]\n   \
    \     ^~~\n        var\n/tmp/tmpbst50di3.swift:42:17: error: cannot assign to\
    \ value: 'letterGrade' is a 'let' constant\n                letterGrade = \"C-\"\
    \n                ^~~~~~~~~~~\n/tmp/tmpbst50di3.swift:30:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let letterGrade = result[index+1]\n   \
    \     ^~~\n        var\n/tmp/tmpbst50di3.swift:44:17: error: cannot assign to\
    \ value: 'letterGrade' is a 'let' constant\n                letterGrade = \"B\"\
    \n                ^~~~~~~~~~~\n/tmp/tmpbst50di3.swift:30:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let letterGrade = result[index+1]\n   \
    \     ^~~\n        var\n/tmp/tmpbst50di3.swift:46:17: error: cannot assign to\
    \ value: 'letterGrade' is a 'let' constant\n                letterGrade = \"B+\"\
    \n                ^~~~~~~~~~~\n/tmp/tmpbst50di3.swift:30:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let letterGrade = result[index+1]\n   \
    \     ^~~\n        var\n/tmp/tmpbst50di3.swift:48:17: error: cannot assign to\
    \ value: 'letterGrade' is a 'let' constant\n                letterGrade = \"A\"\
    \n                ^~~~~~~~~~~\n/tmp/tmpbst50di3.swift:30:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let letter"
  stdout: ''
  timestamp: 1660014973
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        var letter_grade = \"\"\n        if grade < 3 {\n        \
    \    letter_grade = \"A+\"\n        } else if grade < 4 {\n            letter_grade\
    \ = \"A\"\n        } else if grade < 5 {\n            letter_grade = \"A-\"\n\
    \        } else if grade < 6 {\n            letter_grade = \"B+\"\n        } else\
    \ if grade < 7 {\n            letter_grade = \"B\"\n        } else if grade <\
    \ 8 {\n            letter_grade = \"B-\"\n        } else if grade < 9 {\n    \
    \        letter_grade = \"C+\"\n        } else if grade < 10 {\n            letter_grade\
    \ = \"C\"\n        } else if grade < 11 {\n            letter_grade = \"C-\"\n\
    \        } else if grade < 12 {\n            letter_grade = \"D+\"\n        }\
    \ else if grade < 13 {\n            letter_grade = \"D\"\n        } else if grade\
    \ < 14 {\n            letter_grade = \"D-\"\n        } else if grade < 15 {\n\
    \            letter_grade = \"E\"\n        }\n        letter_grades.append(letter_grade)\n\
    \    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbxd22m9w/tmpbxd22m9w.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2d42d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2d3fcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2d3fca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2d3fc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxd22m9w                        0x000055d3ddb207f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ad2d44bf460 __libc_start_main +
    245

    6    tmpbxd22m9w                        0x000055d3ddb20319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014973
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 3.0 {\n            letterGrades.append(\"A+\"\
    )\n        }\n        else if grade >= 2.7 {\n            letterGrades.append(\"\
    B\")\n        }\n        else if grade >= 2.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        else if grade >= 2.0 {\n            letterGrades.append(\"\
    C+\")\n        }\n        else if grade >= 1.7 {\n            letterGrades.append(\"\
    C\")\n        }\n        else if grade >= 1.3 {\n            letterGrades.append(\"\
    C-\")\n        }\n        else if grade >= 1.0 {\n            letterGrades.append(\"\
    D+\")\n        }\n        else if grade >= 0.7 {\n            letterGrades.append(\"\
    D\")\n        }\n        else if grade >= 0.0 {\n            letterGrades.append(\"\
    D-\")\n        }\n        else {\n            letterGrades.append(\"E\")\n   \
    \     }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqdrw0cts/tmpqdrw0cts.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2564d10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2564a07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2564a07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2564a067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdrw0cts                        0x000055c8536b37a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2564efc460 __libc_start_main +
    245

    6    tmpqdrw0cts                        0x000055c8536b32c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code goes here\n    let gradesCount = grades.count\n\
    \    var letterGrades = [String]()\n    if gradesCount == 0 {\n        letterGrades.append(\"\
    \")\n        return letterGrades\n    }\n    var index = 0\n    if grades[0] <\
    \ 3.0 {\n        letterGrades.append(\"E\")\n    } else {\n        letterGrades.append(\"\
    A\")\n        index++\n    }\n    let sortedGrades = grades.sorted()\n    for\
    \ grade in sortedGrades {\n        if grade > 3.0 {\n            letterGrades.append(String(sortedGrades[index].uppercased()))\n\
    \            index = index + 1\n        }\n    }\n    return letterGrades\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtqk33a.swift:37:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n/tmp/tmp1xtqk33a.swift:42:60:\
    \ error: value of type 'Double' has no member 'uppercased'\n            letterGrades.append(String(sortedGrades[index].uppercased()))\n\
    \                                       ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output = [String]()\n    for i in 0 ..< grades.count\
    \ {\n        if grades[i] >= 3.0 {\n            if grades[i] > 3.0 {\n       \
    \         if grades[i] > 2.0 {\n                    if grades[i] > 1.0 {\n   \
    \                     if grades[i] > 0.4 {\n                            if grades[i]\
    \ > 0.0 {\n                                output.append(\"A+\")\n           \
    \                 } else {\n                                output.append(\"E\"\
    )\n                            }\n                        } else {\n         \
    \                   if grades[i] > 0.2 {\n                                if grades[i]\
    \ > 0.0 {\n                                    output.append(\"A-\")\n       \
    \                         } else {\n                                    output.append(\"\
    D-\")\n                                }\n                            } else {\n\
    \                                if grades[i] > 0.1 {\n                      \
    \              if grades[i] > 0.0 {\n                                        output.append(\"\
    B+\")\n                                    } else {\n                        \
    \                output.append(\"C+\")\n                                    }\n\
    \                                } else {\n                                  \
    \  if grades[i] > 0.0 {\n                                        output.append(\"\
    B\")\n                                    } else {\n                         \
    \               output.append(\"C\")\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    } else {\n                        if grades[i]\
    \ > 0.2 {\n                            if grades[i] > 0.0 {\n                \
    \                output.append(\"B-\")\n                            } else {\n\
    \                                output.append(\"C\")\n                      \
    \      }\n                        } else {\n                            if grades[i]\
    \ > 0.3 {\n                                if grades[i] > 0.0 {\n            \
    \                        output.append(\"C-\")\n                             \
    \   } else {\n                                    output.append(\"D\")\n     \
    \                           }\n                            } else {\n        \
    \                        if grades[i] > 0.0 {\n                              \
    \      output.append(\"D\")\n                                } else {\n      \
    \                              output.append(\"E\")\n                        \
    \        }\n                            }\n                        }\n       \
    \             }\n                } else {\n                    if grades[i] >\
    \ 2.0 {\n                        if grades[i] > 1.1 {\n                      \
    \      if grades[i] > 0.4 {\n                                if grades[i] > 0.0\
    \ {\n                                    output.append(\"A+\")\n             \
    \                   } else {\n                                    output.append(\"\
    E\")\n                                }\n                            } else {\n\
    \                                if grades[i] > 0.3 {\n                      \
    \              if grades[i] > 0.0 {\n                                        output.append(\"\
    A-\")\n                                    } else {\n                        \
    \                output.append(\"D-\")\n                                    }\n\
    \                                } else {\n                                  \
    \  if grades[i] > 0.2 {\n                                        if grades[i]\
    \ > 0.0 {\n                                            output.append(\"B+\")\n\
    \                                        } else {\n                          \
    \                  output.append(\"C+\")\n                                   \
    \     }\n                                    } else {\n                      \
    \                  if grades[i] > 0.0 {\n                                    \
    \        output.append(\"B\")\n                                        } else\
    \ {\n                                            output.append(\"C\")\n      \
    \                                  }\n                                    }\n\
    \                                }\n                            }\n          \
    \              } else {\n                            if grades[i] > 1.1 {\n  \
    \                              if grades[i] > 0.4 {\n                        \
    \            if grades[i] > 0.0 {\n                                        output.append(\"\
    A-\")\n                                    } else {\n                        \
    \                output.append(\"D+\")\n                                    }\n\
    \                                } else {\n                                  \
    \  if grades[i] > 0.3 {\n                                        if grades[i]\
    \ > 0.0 {\n                                            output.append(\"B-\")\n\
    \                                        \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_l3_gn5.swift:148:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpo_l3_gn5.swift:124:56:\
    \ note: to match this opening '{'\n                                    if grades[i]\
    \ > 0.3 {\n                                                       ^\n/tmp/tmpo_l3_gn5.swift:148:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpo_l3_gn5.swift:123:40: note: to match this\
    \ opening '{'\n                                } else {\n                    \
    \                   ^\n/tmp/tmpo_l3_gn5.swift:148:66: error: expected '}' at end\
    \ of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"\
    E\", \"D-\"])\n                                                              \
    \   ^\n/tmp/tmpo_l3_gn5.swift:116:48: note: to match this opening '{'\n      \
    \                      if grades[i] > 1.1 {\n                                \
    \               ^\n/tmp/tmpo_l3_gn5.swift:148:66: error: expected '}' at end of\
    \ brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\"\
    , \"D-\"])\n                                                                 ^\n\
    /tmp/tmpo_l3_gn5.swift:115:32: note: to match this opening '{'\n             \
    \           } else {\n                               ^\n/tmp/tmpo_l3_gn5.swift:148:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpo_l3_gn5.swift:84:40: note: to match this opening\
    \ '{'\n                    if grades[i] > 2.0 {\n                            \
    \           ^\n/tmp/tmpo_l3_gn5.swift:148:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpo_l3_gn5.swift:83:24:\
    \ no"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArr: [String] = Array(repeating: \"\"\
    , count: grades.count)\n    var gpa: Double = 0.0\n    var grade: Character =\
    \ \"E\"\n    \n    gradesArr[0] = grade\n    for gpa in grades {\n        if (gpa\
    \ > 3.7) {\n            grade = \"A+\"\n        } else if ((gpa > 3.3) && (gpa\
    \ < 3.7)) {\n            grade = \"A\"\n        } else if ((gpa > 3.0) && (gpa\
    \ < 3.3)) {\n            grade = \"A-\"\n        } else if ((gpa > 2.7) && (gpa\
    \ < 3.0)) {\n            grade = \"B+\"\n        } else if ((gpa > 2.3) && (gpa\
    \ < 2.7)) {\n            grade = \"B\"\n        } else if ((gpa > 2.0) && (gpa\
    \ < 2.3)) {\n            grade = \"B-\"\n        } else if ((gpa > 1.7) && (gpa\
    \ < 2.0)) {\n            grade = \"C+\"\n        } else if ((gpa > 1.3) && (gpa\
    \ < 1.7)) {\n            grade = \"C\"\n        } else if ((gpa > 1.0) && (gpa\
    \ < 1.3)) {\n            grade = \"C-\"\n        } else if ((gpa > 0.7) && (gpa\
    \ < 1.0)) {\n            grade = \"D+\"\n        } else if ((gpa > 0.0) && (gpa\
    \ < 0.7)) {\n            grade = \"D\"\n        } else {\n            grade =\
    \ \"D-\"\n        }\n        gradesArr[grades.count - 1] = grade\n    }\n    return\
    \ gradesArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4nz19yi3.swift:29:20: error: cannot assign value of type 'Character'\
    \ to subscript of type 'String'\n    gradesArr[0] = grade\n                  \
    \ ^~~~~\n/tmp/tmp4nz19yi3.swift:32:21: error: cannot assign value of type 'String'\
    \ to type 'Character'\n            grade = \"A+\"\n                    ^~~~\n\
    /tmp/tmp4nz19yi3.swift:36:21: error: cannot assign value of type 'String' to type\
    \ 'Character'\n            grade = \"A-\"\n                    ^~~~\n/tmp/tmp4nz19yi3.swift:38:21:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \  grade = \"B+\"\n                    ^~~~\n/tmp/tmp4nz19yi3.swift:42:21: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            grade\
    \ = \"B-\"\n                    ^~~~\n/tmp/tmp4nz19yi3.swift:44:21: error: cannot\
    \ assign value of type 'String' to type 'Character'\n            grade = \"C+\"\
    \n                    ^~~~\n/tmp/tmp4nz19yi3.swift:48:21: error: cannot assign\
    \ value of type 'String' to type 'Character'\n            grade = \"C-\"\n   \
    \                 ^~~~\n/tmp/tmp4nz19yi3.swift:50:21: error: cannot assign value\
    \ of type 'String' to type 'Character'\n            grade = \"D+\"\n         \
    \           ^~~~\n/tmp/tmp4nz19yi3.swift:54:21: error: cannot assign value of\
    \ type 'String' to type 'Character'\n            grade = \"D-\"\n            \
    \        ^~~~\n/tmp/tmp4nz19yi3.swift:56:39: error: cannot assign value of type\
    \ 'Character' to subscript of type 'String'\n        gradesArr[grades.count -\
    \ 1] = grade\n                                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return letterGrades(grades:\
    \ grades)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvqe2usf1.swift:26:12: error: cannot find 'letterGrades' in scope\n\
    \    return letterGrades(grades: grades)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014973
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    \n    let gpa\
    \ = grades.filter{$0 > 0}\n    \n    var current_letter = String()\n    var current_gpa:\
    \ Double = 0.0\n    \n    for i in 0..<gpa.count{\n        let a = gpa[i]\n  \
    \      current_gpa += a\n        if current_gpa > 5.0 {\n            current_letter\
    \ = \"D-\"\n            break\n        } else if current_gpa > 3.0 {\n       \
    \     current_letter = \"C+\"\n            break\n        } else if current_gpa\
    \ > 2.0 {\n            current_letter = \"B+\"\n            break\n        } else\
    \ if current_gpa > 1.0 {\n            current_letter = \"A-\"\n            break\n\
    \        } else if current_gpa > 0.0 {\n            current_letter = \"A+\"\n\
    \            break\n        }\n        \n        letter_grades.append(current_letter)\n\
    \    }\n    \n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpokd0c6tc/tmpokd0c6tc.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc1bb04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc1b7fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc1b7fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc1b7fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpokd0c6tc                        0x00005565ea9399d6 <unavailable> + 6614

    5    libc.so.6                          0x00002adc1bcf0460 __libc_start_main +
    245

    6    tmpokd0c6tc                        0x00005565ea9394f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let sortedGrades = grades.sorted(by: <)\n    let\
    \ numericalGrades = Array(sortedGrades).map({ String(format: \"%1.2f\", $0) })\n\
    \    var letterGrades = [String]()\n    let min = sortedGrades.min()!\n    let\
    \ max = sortedGrades.max()!\n    let range = max - min\n    let gpa = Array(sortedGrades).map({\
    \ String(format: \"%1.2f\", $0) })\n    for index in 0..<gpa.count {\n       \
    \ let grade = Int(gpa[index]) * range / 4\n        let letterGrade = letter grade\
    \ (grade: grade, min: min, max: max)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8drpdm6t.swift:34:33: error: consecutive statements on a line must\
    \ be separated by ';'\n        let letterGrade = letter grade (grade: grade, min:\
    \ min, max: max)\n                                ^\n                        \
    \        ;\n/tmp/tmp8drpdm6t.swift:26:53: error: no exact matches in call to initializer\
    \ \n    let numericalGrades = Array(sortedGrades).map({ String(format: \"%1.2f\"\
    , $0) })\n                                                    ^\nSwift.String:4:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmp8drpdm6t.swift:26:53: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n    let numericalGrades\
    \ = Array(sortedGrades).map({ String(format: \"%1.2f\", $0) })\n             \
    \                                       ^\nSwift.String:3:12: note: candidate\
    \ '(String) -> String' requires 1 argument, but 2 were provided\n    public init<S>(_\
    \ other: S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmp8drpdm6t.swift:31:41: error:\
    \ no exact matches in call to initializer \n    let gpa = Array(sortedGrades).map({\
    \ String(format: \"%1.2f\", $0) })\n                                        ^\n\
    Swift.String:4:23: note: candidate '(String) -> String' requires 1 argument, but\
    \ 2 were provided\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmp8drpdm6t.swift:31:41: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n  "
  stdout: ''
  timestamp: 1660014974
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    if grades.isEmpty() {\n        return []\n    }\n\
    \    var letterGrades: [String] = []\n    var grade: Double = 0\n    \n    for\
    \ i in 1...grades.count {\n        grade = grades[i-1]\n        if grade < 4.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade < 3.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade < 3.3 {\n   \
    \         letterGrades.append(\"C-\")\n        } else if grade < 3.0 {\n     \
    \       letterGrades.append(\"C\")\n        } else if grade < 2.7 {\n        \
    \    letterGrades.append(\"B-\")\n        } else if grade < 2.3 {\n          \
    \  letterGrades.append(\"B\")\n        } else if grade < 2.0 {\n            letterGrades.append(\"\
    B-\")\n        } else if grade < 1.7 {\n            letterGrades.append(\"B\"\
    )\n        } else if grade < 1.3 {\n            letterGrades.append(\"B-\")\n\
    \        } else if grade < 1.0 {\n            letterGrades.append(\"B\")\n   \
    \     } else if grade < 0.7 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade < 0.3 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade < 0.0 {\n            letterGrades.append(\"D-\")\n        } else\
    \ if grade < -0.3 {\n            letterGrades.append(\"D\")\n        } else if\
    \ grade < -0.7 {\n            letterGrades.append(\"D+\")\n        } else if grade\
    \ < -1.7 {\n            letterGrades.append(\"D\")\n        } else if grade <\
    \ -2.3 {\n            letterGrades.append(\"D\")\n        } else if grade < -3.0\
    \ {\n            letterGrades.append(\"D-\")\n        } else if grade < -3.3 {\n\
    \            letterGrades.append(\"D-\")\n        } else if grade < -3.7 {\n \
    \           letterGrades.append(\"D+\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyufwk0n6.swift:25:15: error: cannot call value of non-function\
    \ type 'Bool'\n    if grades.isEmpty() {\n              ^      ~~\n          \
    \           \n"
  stdout: ''
  timestamp: 1660014973
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    guard let gradeArray\
    \ = grades.compactMap { $0 }\n    else {\n        return letterGrades\n    }\n\
    \    let averageGrade = gradeArray.mean() ?? 0.0\n    gradeArray.forEach { \n\
    \        let normalizedGrade = ($0 - averageGrade)/gradeArray.count\n        let\
    \ gradeLetter = gradeToLetter(normalizedGrade)\n        letterGrades.append(gradeLetter)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvs5k0jcc.swift:26:46: error: expected 'else' after 'guard' condition\n\
    \    guard let gradeArray = grades.compactMap { $0 }\n                       \
    \                      ^\n                                             else \n\
    /tmp/tmpvs5k0jcc.swift:26:48: error: anonymous closure argument not contained\
    \ in a closure\n    guard let gradeArray = grades.compactMap { $0 }\n        \
    \                                       ^\n/tmp/tmpvs5k0jcc.swift:27:5: error:\
    \ expected expression\n    else {\n    ^\n/tmp/tmpvs5k0jcc.swift:26:28: error:\
    \ generic parameter 'ElementOfResult' could not be inferred\n    guard let gradeArray\
    \ = grades.compactMap { $0 }\n                           ^\nSwift.Sequence:2:28:\
    \ note: in call to function 'compactMap'\n    @inlinable public func compactMap<ElementOfResult>(_\
    \ transform: (Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\n\
    \                           ^\n/tmp/tmpvs5k0jcc.swift:33:27: error: cannot find\
    \ 'gradeToLetter' in scope\n        let gradeLetter = gradeToLetter(normalizedGrade)\n\
    \                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014973
