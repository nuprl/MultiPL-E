language: swift
name: HumanEval_45_triangle_area
results:
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.45 * a * h\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpa7sz4jdh.swift:6:17: error: binary operator '*' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    return 0.45 * a * h\n          \
    \ ~~~~ ^ ~\n/tmp/tmpa7sz4jdh.swift:6:17: note: overloads for '*' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    return 0.45 * a * h\n  \
    \              ^\n/tmp/tmpa7sz4jdh.swift:6:21: error: no '*' candidates produce\
    \ the expected contextual result type 'Double'\n    return 0.45 * a * h\n    \
    \                ^\nSwift.Int:9:24: note: '*' produces 'Int', not the expected\
    \ contextual result type 'Double'\n    public static func * (lhs: Int, rhs: Int)\
    \ -> Int\n                       ^\nSwift.Int:9:24: note: '*' produces 'Int',\
    \ not the expected contextual result type 'Double'\n    public static func * (lhs:\
    \ Int, rhs: Int) -> Int\n                       ^\nSwift.Numeric:5:17: note: '*'\
    \ produces 'Int', not the expected contextual result type 'Double'\n    static\
    \ func * (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.BinaryInteger:22:26:\
    \ note: '*' produces 'Int', not the expected contextual result type 'Double'\n\
    \    override static func * (lhs: Self, rhs: Self) -> Self\n                 \
    \        ^\nSwift.Int:9:24: note: '*' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    public static func * (lhs: Int, rhs: Int) -> Int\n\
    \                       ^\nSwift.BinaryInteger:22:26: note: '*' produces 'Int',\
    \ not the expected contextual result type 'Double'\n    override static func *\
    \ (lhs: Self, rhs: Self) -> Self\n                         ^\nSwift.Numeric:5:17:\
    \ note: '*' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func * (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.DurationProtocol:5:17:\
    \ note: '*' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    static func * (lhs: Self, rhs: Int) -> Self\n                ^\nSwift.Duration:16:24:\
    \ note: '*' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func * <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n\
    \         "
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * h / 4.0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp070ley_b.swift:6:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return a * h / 4.0\n             ^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let l = (a + h) / 2\n    return (l * l) / (4 * h * a)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpeivytp1g.swift:7:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (l * l) / (4 * h * a)\n     \
    \      ~~~~~~~~^~~~~~~~~~~~~\n           Double(              )\n"
  stdout: ''
  timestamp: 1659979504
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(sqrt((sqr(a) + sqr(h))) / 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7ak_nhl7.swift:6:17: error: cannot find 'sqrt' in scope\n  return\
    \ Double(sqrt((sqr(a) + sqr(h))) / 2)\n                ^~~~\n/tmp/tmp7ak_nhl7.swift:6:23:\
    \ error: cannot find 'sqr' in scope\n  return Double(sqrt((sqr(a) + sqr(h))) /\
    \ 2)\n                      ^~~\n/tmp/tmp7ak_nhl7.swift:6:32: error: cannot find\
    \ 'sqr' in scope\n  return Double(sqrt((sqr(a) + sqr(h))) / 2)\n             \
    \                  ^~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a * h * h / 6.0)\n    return area\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp2y3p5j89.swift:6:33: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let area = Double(a * h * h / 6.0)\n\
    \                      ~~~~~~~~~ ^ ~~~\n/tmp/tmp2y3p5j89.swift:6:33: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    let area = Double(a * h * h / 6.0)\n                       \
    \         ^\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double((a + h) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpyu0qw3n2/tmpyu0qw3n2.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d88981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d88678b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d88678988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d886777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyu0qw3n2                        0x000055bb3a55a257 <unavailable> + 4695

    5    libc.so.6                          0x00002b8d88b6d460 __libc_start_main +
    245

    6    tmpyu0qw3n2                        0x000055bb3a559ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return triangle_area(Double(a), Double(h))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp6v2dpq_q.swift:6:25: error: missing argument labels 'a:h:' in call\n\
    \    return triangle_area(Double(a), Double(h))\n                        ^\n \
    \                        a:         h: \n/tmp/tmp6v2dpq_q.swift:6:26: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n    return triangle_area(Double(a),\
    \ Double(h))\n                         ^\n                         Int(     )\n\
    /tmp/tmp6v2dpq_q.swift:6:37: error: cannot convert value of type 'Double' to expected\
    \ argument type 'Int'\n    return triangle_area(Double(a), Double(h))\n      \
    \                              ^\n                                    Int(   \
    \  )\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return h * (h + a - 1) / (2.0 * a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp05xqpabd.swift:6:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return h * (h + a - 1) / (2.0 * a)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979579
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpg81yfnfs/tmpg81yfnfs.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1433e1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1433b12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1433b12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1433b117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg81yfnfs                        0x0000558b014a41c7 <unavailable> + 4551

    5    libc.so.6                          0x00002b1434007460 __libc_start_main +
    245

    6    tmpg81yfnfs                        0x0000558b014a3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let a = Double(a)\n    let h = Double(h)\n    let s = 2.0 * a\
    \ * (h + h + h)\n    let mu = sqrt(s) / 2.0\n    return (2.0 * (h * h + h * s\
    \ - a * a) * (mu + mu - 2.0 * mu)) / Double(6)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxa4zsw0b.swift:9:14: error: cannot find 'sqrt' in scope\n    let\
    \ mu = sqrt(s) / 2.0\n             ^~~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return pow(Double(a) / pow(2.0, Double(h)), 2.0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7o_0zemz.swift:6:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(a) / pow(2.0, Double(h)), 2.0)\n           ^~~\n/tmp/tmp7o_0zemz.swift:6:28:\
    \ error: cannot find 'pow' in scope\n    return pow(Double(a) / pow(2.0, Double(h)),\
    \ 2.0)\n                           ^~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n\treturn (3. * a * h) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpru5xo2_a.swift:6:11: error: extraneous whitespace after '.' is\
    \ not permitted\n        return (3. * a * h) / 6\n                 ^~\n      \
    \            \n/tmp/tmpru5xo2_a.swift:6:13: error: expected member name following\
    \ '.'\n        return (3. * a * h) / 6\n                   ^\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let b2 = a*a*h\n    let c2 = (b2 - math.square(a))/2\n    return\
    \ math.sqrt(c2+b2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmppewpdr0m.swift:7:20: error: cannot find 'math' in scope\n    let\
    \ c2 = (b2 - math.square(a))/2\n                   ^~~~\n/tmp/tmppewpdr0m.swift:8:12:\
    \ error: cannot find 'math' in scope\n    return math.sqrt(c2+b2)\n          \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) / Double(h)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpayzlm04v/tmpayzlm04v.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b5060cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b50303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b50303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b503027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayzlm04v                        0x000055a4871021c7 <unavailable> + 4551

    5    libc.so.6                          0x00002b7b507f8460 __libc_start_main +
    245

    6    tmpayzlm04v                        0x000055a487101e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a, 2) + pow(h - a, 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpkix3vyxo.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h - a, 2))\n           ^~~~\n/tmp/tmpkix3vyxo.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h - a, 2))\n\
    \                ^~~\n/tmp/tmpkix3vyxo.swift:6:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h - a, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(Double(a) * Double(h) / Double(2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmppgtx9pfk.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(Double(a) * Double(h) / Double(2))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979418
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let base: Double = 2.0\n    return Double(base)*(h/2.0)*(h/2.0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp6l25cy4n.swift:7:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(base)*(h/2.0)*(h/2.0)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979537
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let (ax, ay) = (1.0, 0.0)\n    let (bx, by) = (0.0, 1.0)\n   \
    \ let (cx, cy) = (0.0, 0.0)\n    let d1: Double\n    let d2: Double\n    let d3:\
    \ Double\n    let d4: Double\n    let area: Double\n    d1 = (bx - ax) * (h -\
    \ by)\n    d2 = (cx - bx) * (h - by)\n    d3 = (cx - ax) * (ay - by)\n    d4 =\
    \ (ax - cx) * (ay - by)\n    area = d1 + d2 + d3 + d4\n    return area / 2.0 /\
    \ abs(a) * sign(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7_2iaao2.swift:14:23: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    d1 = (bx - ax) * (h - by)\n        \
    \              ^\n                      Double( )\n/tmp/tmp7_2iaao2.swift:15:23:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    d2 = (cx - bx) * (h - by)\n                      ^\n                    \
    \  Double( )\n/tmp/tmp7_2iaao2.swift:19:34: error: cannot find 'sign' in scope\n\
    \    return area / 2.0 / abs(a) * sign(a)\n                                 ^~~~\n\
    /tmp/tmp7_2iaao2.swift:19:25: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n    return area / 2.0 / abs(a) * sign(a)\n         \
    \               ^\n                        Double( )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = a * h\n    return Double(area) / Double(a) * Double(h)\
    \ / Double(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmp1q0up3s9/tmp1q0up3s9.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab73b294c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab73af8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab73af8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab73af8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q0up3s9                        0x00005572d6f531c7 <unavailable> + 4551

    5    libc.so.6                          0x00002ab73b480460 __libc_start_main +
    245

    6    tmp1q0up3s9                        0x00005572d6f52e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 4.0 * a * (h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpzv0eb7dp.swift:6:16: error: binary operator '*' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    return 4.0 * a * (h / 2)\n     \
    \      ~~~ ^ ~\n/tmp/tmpzv0eb7dp.swift:6:16: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    return 4.0 * a * (h\
    \ / 2)\n               ^\n/tmp/tmpzv0eb7dp.swift:6:20: error: no '*' candidates\
    \ produce the expected contextual result type 'Double'\n    return 4.0 * a * (h\
    \ / 2)\n                   ^\nSwift.Int:9:24: note: '*' produces 'Int', not the\
    \ expected contextual result type 'Double'\n    public static func * (lhs: Int,\
    \ rhs: Int) -> Int\n                       ^\nSwift.Int:9:24: note: '*' produces\
    \ 'Int', not the expected contextual result type 'Double'\n    public static func\
    \ * (lhs: Int, rhs: Int) -> Int\n                       ^\nSwift.Int:9:24: note:\
    \ '*' produces 'Int', not the expected contextual result type 'Double'\n    public\
    \ static func * (lhs: Int, rhs: Int) -> Int\n                       ^\nSwift.Numeric:5:17:\
    \ note: '*' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func * (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.BinaryInteger:22:26:\
    \ note: '*' produces 'Int', not the expected contextual result type 'Double'\n\
    \    override static func * (lhs: Self, rhs: Self) -> Self\n                 \
    \        ^\nSwift.Int:9:24: note: '*' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    public static func * (lhs: Int, rhs: Int) -> Int\n\
    \                       ^\nSwift.Int:9:24: note: '*' produces 'Int', not the expected\
    \ contextual result type 'Double'\n    public static func * (lhs: Int, rhs: Int)\
    \ -> Int\n                       ^\nSwift.BinaryInteger:22:26: note: '*' produces\
    \ 'Int', not the expected contextual result type 'Double'\n    override static\
    \ func * (lhs: Self, rhs: Self) -> Self\n                         ^\nSwift.Numeric:5:17:\
    \ note: '*' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func * (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.DurationProtocol:5"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 2.0 * ((h / a) - a)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpj5_sxvnh.swift:6:27: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return 2.0 * ((h / a) - a)\n       \
    \                   ^\n                 Double(      )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area = Double(0)\n    for i in 0..<h {\n        area += pow(a,\
    \ i) / 2\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpjuhwp7e7.swift:8:17: error: cannot find 'pow' in scope\n      \
    \  area += pow(a, i) / 2\n                ^~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return triangle_length_helper(a, b, h) * triangle_area_helper(a,\
    \ b, h) / a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp41041efi.swift:6:12: error: cannot find 'triangle_length_helper'\
    \ in scope\n    return triangle_length_helper(a, b, h) * triangle_area_helper(a,\
    \ b, h) / a\n           ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp41041efi.swift:6:38: error:\
    \ cannot find 'b' in scope\n    return triangle_length_helper(a, b, h) * triangle_area_helper(a,\
    \ b, h) / a\n                                     ^\n/tmp/tmp41041efi.swift:6:46:\
    \ error: cannot find 'triangle_area_helper' in scope\n    return triangle_length_helper(a,\
    \ b, h) * triangle_area_helper(a, b, h) / a\n                                \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp41041efi.swift:6:70: error: cannot\
    \ find 'b' in scope\n    return triangle_length_helper(a, b, h) * triangle_area_helper(a,\
    \ b, h) / a\n                                                                \
    \     ^\n/tmp/tmp41041efi.swift:6:76: error: no '/' candidates produce the expected\
    \ contextual result type 'Double'\n    return triangle_length_helper(a, b, h)\
    \ * triangle_area_helper(a, b, h) / a\n                                      \
    \                                     ^\nSwift.DurationProtocol:3:17: note: '/'\
    \ produces 'Duration', not the expected contextual result type 'Double'\n    static\
    \ func / (lhs: Self, rhs: Int) -> Self\n                ^\nSwift.Int:10:24: note:\
    \ '/' produces 'Int', not the expected contextual result type 'Double'\n    public\
    \ static func / (lhs: Int, rhs: Int) -> Int\n                       ^\nSwift.Int:10:24:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    public static func / (lhs: Int, rhs: Int) -> Int\n                      \
    \ ^\nSwift.BinaryInteger:14:17: note: '/' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    static func / (lhs: Self, rhs: Self) -> Self\n   \
    \             ^\nSwift.Int:10:24: note: '/' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    public static func / (lhs: Int, rhs: Int) -> Int\n\
    \                       ^\nSwift.BinaryInteger:14:17: note: '/' produces 'Int',\
    \ not the expected contextual result type 'Double'\n    static func / ("
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var res = Double(0)\n    var x = a\n    var y = h\n    var z =\
    \ ((x * x) + (y * y)) * ((x > 0) * 2 - 1)\n    var area = Double(abs(z))\n   \
    \ var pi = 3.14159265358979323\n\n    while z > 0 {\n        x -= 1\n        y\
    \ -= 1\n        z = ((x * x) + (y * y)) * ((x > 0) * 2 - 1)\n        res += area\n\
    \    }\n\n    return res / pi\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp5vd_xfhd.swift:9:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    var z = ((x * x) + (y * y)) * ((x > 0) * 2 - 1)\n     \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5vd_xfhd.swift:16:9:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        z = ((x\
    \ * x) + (y * y)) * ((x > 0) * 2 - 1)\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979596
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area_square = Double(h*h*h) / 2\n    for _ in 0 ..< a {\n\
    \        area_square += Double(h*h)\n    }\n    return area_square / 4\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpaxniytcp/tmpaxniytcp.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d11aeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d117e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d117e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d117e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxniytcp                        0x0000556855b75347 <unavailable> + 4935

    5    libc.so.6                          0x00002b7d11cd6460 __libc_start_main +
    245

    6    tmpaxniytcp                        0x0000556855b74fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979502
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * 0.5 * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpjul78ez3/tmpjul78ez3.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefcf9a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefcf69db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefcf69d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefcf69c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjul78ez3                        0x000056541ff231c7 <unavailable> + 4551

    5    libc.so.6                          0x00002aefcfb92460 __libc_start_main +
    245

    6    tmpjul78ez3                        0x000056541ff22e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let w = 2.0 * a * a\n    let h = 2.0 * h * a\n    return (w *\
    \ h) / Double(h)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmplpy2gfz3.swift:6:17: error: binary operator '*' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    let w = 2.0 * a * a\n          \
    \  ~~~ ^ ~\n/tmp/tmplpy2gfz3.swift:6:17: note: overloads for '*' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    let w = 2.0 * a * a\n  \
    \              ^\n/tmp/tmplpy2gfz3.swift:7:17: error: binary operator '*' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    let h = 2.0 * h * a\n\
    \            ~~~ ^ ~\n/tmp/tmplpy2gfz3.swift:7:17: note: overloads for '*' exist\
    \ with these partially matching parameter lists: (Int, Int)\n    let h = 2.0 *\
    \ h * a\n                ^\n/tmp/tmplpy2gfz3.swift:8:20: error: cannot convert\
    \ return expression of type 'Duration' to return type 'Double'\n    return (w\
    \ * h) / Double(h)\n           ~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let length = hypot(a, h)\n    let area = length * (length + a\
    \ + h) - length * length\n    return area / (length * length)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxu9c9nas.swift:6:18: error: cannot find 'hypot' in scope\n    let\
    \ length = hypot(a, h)\n                 ^~~~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a, 2) + pow(h,2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpb_ygxini.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h,2))\n           ^~~~\n/tmp/tmpb_ygxini.swift:6:17: error:\
    \ cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h,2))\n        \
    \        ^~~\n/tmp/tmpb_ygxini.swift:6:29: error: cannot find 'pow' in scope\n\
    \    return sqrt(pow(a, 2) + pow(h,2))\n                            ^~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    func squareOfSide(_ side: Double) -> Double {\n        return\
    \ side * side\n    }\n\n    func area(_ side1: Double, _ side2: Double) -> Double\
    \ {\n        return squareOfSide(side1) * squareOfSide(side2) - squareOfSide(side1\
    \ + side2) - squareOfSide(side2 - side1)\n    }\n\n    return (area(a, a) + area(a,\
    \ h) - area(a + h, a) - area(a + h, h)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpk9og4irw.swift:14:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (area(a, a) + area(a, h) - area(a\
    \ + h, a) - area(a + h, h)) / 2\n                 ^\n                 Double(\
    \ )\n/tmp/tmpk9og4irw.swift:14:21: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    return (area(a, a) + area(a, h) - area(a\
    \ + h, a) - area(a + h, h)) / 2\n                    ^\n                    Double(\
    \ )\n/tmp/tmpk9og4irw.swift:14:31: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    return (area(a, a) + area(a, h) - area(a\
    \ + h, a) - area(a + h, h)) / 2\n                              ^\n           \
    \                   Double( )\n/tmp/tmpk9og4irw.swift:14:34: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n    return (area(a,\
    \ a) + area(a, h) - area(a + h, a) - area(a + h, h)) / 2\n                   \
    \              ^\n                                 Double( )\n/tmp/tmpk9og4irw.swift:14:51:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (area(a, a) + area(a, h) - area(a + h, a) - area(a + h, h)) / 2\n\
    \                                                  ^\n                       \
    \                           Double( )\n/tmp/tmpk9og4irw.swift:14:46: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n    return (area(a,\
    \ a) + area(a, h) - area(a + h, a) - area(a + h, h)) / 2\n                   \
    \                          ^\n                                           Double(\
    \ )\n/tmp/tmpk9og4irw.swift:14:68: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    return (area(a, a) + area(a, h) - area(a\
    \ + h, a) - area(a + h, h)) / 2\n                                            \
    \                       ^\n                                                  \
    \                 Double( )\n/tmp/tmpk9og4irw.swift:14:63: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n    return (area(a,\
    \ a) + area(a, h) - area(a + h, a) - area(a"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(h, 2) + pow(a, 2) - pow(a, 2) * pow((h + a) /\
    \ 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpbcy_uxfy.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(h, 2) + pow(a, 2) - pow(a, 2) * pow((h + a) / 2, 2))\n           ^~~~\n\
    /tmp/tmpbcy_uxfy.swift:6:17: error: cannot find 'pow' in scope\n    return sqrt(pow(h,\
    \ 2) + pow(a, 2) - pow(a, 2) * pow((h + a) / 2, 2))\n                ^~~\n/tmp/tmpbcy_uxfy.swift:6:29:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(h, 2) + pow(a, 2) - pow(a,\
    \ 2) * pow((h + a) / 2, 2))\n                            ^~~\n/tmp/tmpbcy_uxfy.swift:6:41:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(h, 2) + pow(a, 2) - pow(a,\
    \ 2) * pow((h + a) / 2, 2))\n                                        ^~~\n/tmp/tmpbcy_uxfy.swift:6:53:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(h, 2) + pow(a, 2) - pow(a,\
    \ 2) * pow((h + a) / 2, 2))\n                                                \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979512
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  let b: Double = pow(a, Double(2))\n  let c: Double = pow(h, Double(2))\n\
    \  let area: Double = pow(b + c, Double(0.5))\n  return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0crmhc3q.swift:6:19: error: cannot find 'pow' in scope\n  let b:\
    \ Double = pow(a, Double(2))\n                  ^~~\n/tmp/tmp0crmhc3q.swift:7:19:\
    \ error: cannot find 'pow' in scope\n  let c: Double = pow(h, Double(2))\n   \
    \               ^~~\n/tmp/tmp0crmhc3q.swift:8:22: error: cannot find 'pow' in\
    \ scope\n  let area: Double = pow(b + c, Double(0.5))\n                     ^~~\n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n\tswitch {\n\tcase a <= h:\n\t\treturn 0\n\tcase h == a:\n\t\treturn\
    \ 1\n\tdefault:\n\t\treturn Double(a) * triangle_area(a - h, h) + triangle_area(a\
    \ - h, a - h)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpve1he7yr.swift:6:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n/tmp/tmpve1he7yr.swift:12:35: error: missing\
    \ argument labels 'a:h:' in call\n                return Double(a) * triangle_area(a\
    \ - h, h) + triangle_area(a - h, a - h)\n                                    \
    \            ^\n                                                 a:     h: \n\
    /tmp/tmpve1he7yr.swift:12:61: error: missing argument labels 'a:h:' in call\n\
    \                return Double(a) * triangle_area(a - h, h) + triangle_area(a\
    \ - h, a - h)\n                                                              \
    \            ^\n                                                             \
    \              a:     h: \n"
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return pow(Double(a)/3., Double(h)/3.)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8djqpekt.swift:6:27: error: expected member name following '.'\n\
    \    return pow(Double(a)/3., Double(h)/3.)\n                          ^\n/tmp/tmp8djqpekt.swift:6:41:\
    \ error: expected member name following '.'\n    return pow(Double(a)/3., Double(h)/3.)\n\
    \                                        ^\n/tmp/tmp8djqpekt.swift:6:12: error:\
    \ cannot find 'pow' in scope\n    return pow(Double(a)/3., Double(h)/3.)\n   \
    \        ^~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return ((pow(Double(a), 2) + pow(Double(h), 2)) / 2) * (pow(Double(h),\
    \ 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8s6r4k47.swift:6:14: error: cannot find 'pow' in scope\n    return\
    \ ((pow(Double(a), 2) + pow(Double(h), 2)) / 2) * (pow(Double(h), 2))\n      \
    \       ^~~\n/tmp/tmp8s6r4k47.swift:6:34: error: cannot find 'pow' in scope\n\
    \    return ((pow(Double(a), 2) + pow(Double(h), 2)) / 2) * (pow(Double(h), 2))\n\
    \                                 ^~~\n/tmp/tmp8s6r4k47.swift:6:61: error: cannot\
    \ find 'pow' in scope\n    return ((pow(Double(a), 2) + pow(Double(h), 2)) / 2)\
    \ * (pow(Double(h), 2))\n                                                    \
    \        ^~~\n"
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt((h * h) - (a * a))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxjsj0fpc.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt((h * h) - (a * a))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * (a + h) * (h + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpg_s7fm5o.swift:6:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * (a + h) * (h + 1)\n     \
    \      ~~~~~~~~~~~~^~~~~~~~~\n           Double(              )\n"
  stdout: ''
  timestamp: 1659979506
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return abs((a * b - c * d) / (h * w))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxrsd1uq1.swift:6:21: error: cannot find 'b' in scope\n    return\
    \ abs((a * b - c * d) / (h * w))\n                    ^\n/tmp/tmpxrsd1uq1.swift:6:25:\
    \ error: cannot find 'c' in scope\n    return abs((a * b - c * d) / (h * w))\n\
    \                        ^\n/tmp/tmpxrsd1uq1.swift:6:29: error: cannot find 'd'\
    \ in scope\n    return abs((a * b - c * d) / (h * w))\n                      \
    \      ^\n/tmp/tmpxrsd1uq1.swift:6:39: error: cannot find 'w' in scope\n    return\
    \ abs((a * b - c * d) / (h * w))\n                                      ^\n"
  stdout: ''
  timestamp: 1659979512
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(a * a * h / (2 * h))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmp5jp2cgfp/tmp5jp2cgfp.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b299ccb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b299c9a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b299c9a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b299c9a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5jp2cgfp                        0x000055f483d10257 <unavailable> + 4695

    5    libc.so.6                          0x00002b299ce9d460 __libc_start_main +
    245

    6    tmp5jp2cgfp                        0x000055f483d0fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return (a * (h - a) * .15) // 0.06\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp2r7ukaf8.swift:6:25: error: '.15' is not a valid floating point\
    \ literal; it must be written '0.15'\n  return (a * (h - a) * .15) // 0.06\n \
    \                       ^~~\n                        0\n/tmp/tmp2r7ukaf8.swift:6:13:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \  return (a * (h - a) * .15) // 0.06\n            ^\n          Double(    )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(h) * Double(a) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let base = sqrt(pow(a, 2) - pow(h * h, 2))\n    let a = pow(a,\
    \ 2)\n    let h = pow(h * h, 2)\n    return base + 0.5 * a / h\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp4lh48ft4.swift:6:16: error: cannot find 'sqrt' in scope\n    let\
    \ base = sqrt(pow(a, 2) - pow(h * h, 2))\n               ^~~~\n/tmp/tmp4lh48ft4.swift:6:21:\
    \ error: cannot find 'pow' in scope\n    let base = sqrt(pow(a, 2) - pow(h * h,\
    \ 2))\n                    ^~~\n/tmp/tmp4lh48ft4.swift:6:33: error: cannot find\
    \ 'pow' in scope\n    let base = sqrt(pow(a, 2) - pow(h * h, 2))\n           \
    \                     ^~~\n/tmp/tmp4lh48ft4.swift:7:13: error: cannot find 'pow'\
    \ in scope\n    let a = pow(a, 2)\n            ^~~\n/tmp/tmp4lh48ft4.swift:8:13:\
    \ error: cannot find 'pow' in scope\n    let h = pow(h * h, 2)\n            ^~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * (h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rsqxju.swift:6:14: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * (h / 2)\n           ~~^~~~~~~~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a + h) * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpp5jhaiz2.swift:6:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a + h) * 0.5\n             \
    \ ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a, 2) * (2 * h + h) * h / (h + h))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmptsajn_vn.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) * (2 * h + h) * h / (h + h))\n           ^~~~\n/tmp/tmptsajn_vn.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) * (2 * h + h) *\
    \ h / (h + h))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    guard a >= 0 && h > 0 else {\n        return Double.nan\n    }\n\
    \n    var sum = 0\n    var i = 0\n    for _ in 0 ..< h {\n        sum += a * triangle_side(a:\
    \ a, i: i + 1)\n        i += 1\n    }\n\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp1f939y5b.swift:13:20: error: cannot find 'triangle_side' in scope\n\
    \        sum += a * triangle_side(a: a, i: i + 1)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmp1f939y5b.swift:17:12: error: cannot convert return expression of type\
    \ 'Int' to return type 'Double'\n    return sum\n           ^~~\n           Double(\
    \ )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    guard a > 0 && h > 0 else {\n        return Double.infinity\n\
    \    }\n    let area = h * a * (h + 1)\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpll1v4q9z.swift:10:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let b1: Double = 2.0 / a\n    let b2: Double = 1.0 / a\n    let\
    \ a1: Double = 1.0 / h\n    return b1 * h * (a1 + b2) * h\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0fcuew3x.swift:6:28: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    let b1: Double = 2.0 / a\n         \
    \                  ^\n                           Double( )\n/tmp/tmp0fcuew3x.swift:7:28:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    let b2: Double = 1.0 / a\n                           ^\n                \
    \           Double( )\n/tmp/tmp0fcuew3x.swift:8:28: error: cannot convert value\
    \ of type 'Int' to expected argument type 'Double'\n    let a1: Double = 1.0 /\
    \ h\n                           ^\n                           Double( )\n/tmp/tmp0fcuew3x.swift:9:12:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Duration'\n\
    \    return b1 * h * (a1 + b2) * h\n           ^\n/tmp/tmp0fcuew3x.swift:9:31:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \    return b1 * h * (a1 + b2) * h\n           ~~~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let a: Double = a * sqrt(3)\n    let h: Double = h * sqrt(3)\n\
    \    return (a+h) * (a-h) * h / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpq145cm81.swift:6:25: error: cannot find 'sqrt' in scope\n    let\
    \ a: Double = a * sqrt(3)\n                        ^~~~\n/tmp/tmpq145cm81.swift:6:23:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    let\
    \ a: Double = a * sqrt(3)\n                    ~~^~~~~~~~~\n                 \
    \   Double(    )\n/tmp/tmpq145cm81.swift:7:25: error: cannot find 'sqrt' in scope\n\
    \    let h: Double = h * sqrt(3)\n                        ^~~~\n/tmp/tmpq145cm81.swift:7:23:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    let\
    \ h: Double = h * sqrt(3)\n                    ~~^~~~~~~~~\n                 \
    \   Double(    )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(h * a) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    switch h {\n    case 2:\n        return 2 * Triangle(a, b).area()\n\
    \    case 3:\n        return Triangle(a, b, c).area()\n    default:\n        return\
    \ 0.0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp1ehskok_.swift:8:20: error: cannot find 'Triangle' in scope\n \
    \       return 2 * Triangle(a, b).area()\n                   ^~~~~~~~\n/tmp/tmp1ehskok_.swift:8:32:\
    \ error: cannot find 'b' in scope\n        return 2 * Triangle(a, b).area()\n\
    \                               ^\n/tmp/tmp1ehskok_.swift:10:16: error: cannot\
    \ find 'Triangle' in scope\n        return Triangle(a, b, c).area()\n        \
    \       ^~~~~~~~\n/tmp/tmp1ehskok_.swift:10:28: error: cannot find 'b' in scope\n\
    \        return Triangle(a, b, c).area()\n                           ^\n/tmp/tmp1ehskok_.swift:10:31:\
    \ error: cannot find 'c' in scope\n        return Triangle(a, b, c).area()\n \
    \                             ^\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * (h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rsqxju.swift:6:14: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * (h / 2)\n           ~~^~~~~~~~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(sqrt(Double(a) * Double(h) / 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpqptpq26w.swift:6:17: error: cannot find 'sqrt' in scope\n  return\
    \ Double(sqrt(Double(a) * Double(h) / 2))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return math.sqrt(Double(a) * Double(h) / Double(2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvuwy21fj.swift:6:12: error: cannot find 'math' in scope\n    return\
    \ math.sqrt(Double(a) * Double(h) / Double(2))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a / sqrt(pow(a, 2.0) + pow(h - a, 2.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmptj8y_pb8.swift:6:16: error: cannot find 'sqrt' in scope\n    return\
    \ a / sqrt(pow(a, 2.0) + pow(h - a, 2.0))\n               ^~~~\n/tmp/tmptj8y_pb8.swift:6:21:\
    \ error: cannot find 'pow' in scope\n    return a / sqrt(pow(a, 2.0) + pow(h -\
    \ a, 2.0))\n                    ^~~\n/tmp/tmptj8y_pb8.swift:6:35: error: cannot\
    \ find 'pow' in scope\n    return a / sqrt(pow(a, 2.0) + pow(h - a, 2.0))\n  \
    \                                ^~~\n/tmp/tmptj8y_pb8.swift:6:14: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n    return\
    \ a / sqrt(pow(a, 2.0) + pow(h - a, 2.0))\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                )\n"
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  let w = a * h\n  return w * w\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpjnd_q_c1.swift:7:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n  return w * w\n         ~~^~~\n       \
    \  Double( )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  let a = a / h\n  let h2 = h / 2\n  let h4 = h / 4\n  let h8 = h\
    \ / 8\n  return a * (h2 + h4 + h8) - h2 * sqrt(Double(a) * h2 * h4 / 6)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpk7fon5ur.swift:10:36: error: cannot find 'sqrt' in scope\n  return\
    \ a * (h2 + h4 + h8) - h2 * sqrt(Double(a) * h2 * h4 / 6)\n                  \
    \                 ^~~~\n/tmp/tmpk7fon5ur.swift:10:10: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n  return a * (h2 + h4 + h8) - h2 * sqrt(Double(a)\
    \ * h2 * h4 / 6)\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979580
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(round((a * h) / 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmphtp318ch.swift:6:19: error: cannot find 'round' in scope\n    return\
    \ Double(round((a * h) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let length = h * 0.5\n    return (a * a) * (length + h) - (a *\
    \ a) * length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp38jy2a1i.swift:6:20: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let length = h * 0.5\n         \
    \        ~ ^ ~~~\n/tmp/tmp38jy2a1i.swift:6:20: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Double, Double), (Duration, Double),\
    \ (Int, Int)\n    let length = h * 0.5\n                   ^\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area = Double(0)\n    for _ in 0..<h {\n        area += Double(a)\
    \ / Double(h)\n        a -= 1.0;\n    }\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp4zrxmbxs.swift:9:9: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n        a -= 1.0;\n        ^\n        Double(\
    \ )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area = Double(0)\n\n    for i in 0..<h {\n        let p =\
    \ i * a / h\n        area += p * (1 - p)\n    }\n\n    return area\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp_wn5uptq.swift:10:19: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        area += p * (1 - p)\n          \
    \        ^\n                Double(    )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * Math.sqrt((3 * a * h) / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmplyu9kmw0.swift:6:16: error: cannot find 'Math' in scope\n    return\
    \ a * Math.sqrt((3 * a * h) / 2)\n               ^~~~\n/tmp/tmplyu9kmw0.swift:6:14:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return a * Math.sqrt((3 * a * h) / 2)\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                       )\n"
  stdout: ''
  timestamp: 1659979505
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = a * h / 2\n    return area\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpwalfpx_a.swift:7:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979418
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    switch a {\n    case 5: // square\n        if h > 0 {\n      \
    \      return 4.0 - ((h - 4.0) * (h - 4.0)) / (2.0 * a)\n        } else {\n  \
    \          return 4.0 * a * (4.0 - a)\n        }\n    case 3: // triangle\n  \
    \      if h > 0 {\n            return 2.0 * a * (h + 1.0) / (2.0 * h * a)\n  \
    \      } else {\n            return 2.0 * a * a\n        }\n    case 4: // pentagon\n\
    \        if h > 0 {\n            return 2.0 * a * (h - 2.0) / h\n        } else\
    \ {\n            return 2.0 * a * a\n        }\n    case 6: // hexagon\n     \
    \   if h > 0 {\n            return 2.0 * a * (h - 4.0) / h\n        } else {\n\
    \            return 2.0 * a * a\n        }\n    case 9: // heptagon\n        if\
    \ h > 0 {\n            return 2.0 * a * (h - 3.0) / h\n        } else {\n    \
    \        return 2.0 * a * a\n        }\n    case 12: // octagon\n        if h\
    \ > 0 {\n            return 2.0 * a * (h - 5.0) / h\n        } else {\n      \
    \      return 2.0 * a * a\n        }\n    default:\n        fatalError(\"Invalid\
    \ side length: \\(a)\")\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp14vrl4yd.swift:9:20: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            return 4.0 - ((h - 4.0) * (h - 4.0)) / (2.0 * a)\n\
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp14vrl4yd.swift:11:26:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \            return 4.0 * a * (4.0 - a)\n                         ^\n        \
    \                 Double( )\n/tmp/tmp14vrl4yd.swift:11:37: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n            return 4.0\
    \ * a * (4.0 - a)\n                                    ^\n                   \
    \                 Double( )\n/tmp/tmp14vrl4yd.swift:15:20: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n            return 2.0 * a * (h\
    \ + 1.0) / (2.0 * h * a)\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14vrl4yd.swift:17:24: error: binary operator '*' cannot be applied to\
    \ operands of type 'Double' and 'Int'\n            return 2.0 * a * a\n      \
    \             ~~~ ^ ~\n/tmp/tmp14vrl4yd.swift:17:24: note: overloads for '*' exist\
    \ with these partially matching parameter lists: (Int, Int)\n            return\
    \ 2.0 * a * a\n                       ^\n/tmp/tmp14vrl4yd.swift:17:28: error:\
    \ no '*' candidates produce the expected contextual result type 'Double'\n   \
    \         return 2.0 * a * a\n                           ^\nSwift.Int:9:24: note:\
    \ '*' produces 'Int', not the expected contextual result type 'Double'\n    public\
    \ static func * (lhs: Int, rhs: Int) -> Int\n                       ^\nSwift.Int:9:24:\
    \ note: '*' produces 'Int', not the expected contextual result type 'Double'\n\
    \    public static func * (lhs: Int, rhs: Int) -> Int\n                      \
    \ ^\nSwift.Numeric:5:17: note: '*' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    static func * (lhs: Self, rhs: Self) -> Self\n   \
    \             ^\nSwift.BinaryInteger:22:"
  stdout: ''
  timestamp: 1659979618
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(sqrt(pow(a, 2) * pow((h / 3), 2)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpb9gblsaj.swift:6:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) * pow((h / 3), 2)))\n                  ^~~~\n/tmp/tmpb9gblsaj.swift:6:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) * pow((h\
    \ / 3), 2)))\n                       ^~~\n/tmp/tmpb9gblsaj.swift:6:36: error:\
    \ cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) * pow((h / 3),\
    \ 2)))\n                                   ^~~\n"
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return 0.7234 * tan(deg2rad(90 + h / 2) * 0.6)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpcwbkeoqn.swift:6:19: error: cannot find 'tan' in scope\n  return\
    \ 0.7234 * tan(deg2rad(90 + h / 2) * 0.6)\n                  ^~~\n/tmp/tmpcwbkeoqn.swift:6:23:\
    \ error: cannot find 'deg2rad' in scope\n  return 0.7234 * tan(deg2rad(90 + h\
    \ / 2) * 0.6)\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * (a.square() + h.square())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp6srjkunk.swift:6:21: error: value of type 'Int' has no member 'square'\n\
    \    return 0.5 * (a.square() + h.square())\n                  ~ ^~~~~~\n/tmp/tmp6srjkunk.swift:6:34:\
    \ error: value of type 'Int' has no member 'square'\n    return 0.5 * (a.square()\
    \ + h.square())\n                               ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(triangleHeight(a), 2) + pow(triangleWidth(a),\
    \ 2) * h / 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvpmcxelr.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(triangleHeight(a), 2) + pow(triangleWidth(a), 2) * h / 3)\n       \
    \    ^~~~\n/tmp/tmpvpmcxelr.swift:6:17: error: cannot find 'pow' in scope\n  \
    \  return sqrt(pow(triangleHeight(a), 2) + pow(triangleWidth(a), 2) * h / 3)\n\
    \                ^~~\n/tmp/tmpvpmcxelr.swift:6:21: error: cannot find 'triangleHeight'\
    \ in scope\n    return sqrt(pow(triangleHeight(a), 2) + pow(triangleWidth(a),\
    \ 2) * h / 3)\n                    ^~~~~~~~~~~~~~\n/tmp/tmpvpmcxelr.swift:6:45:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(triangleHeight(a), 2)\
    \ + pow(triangleWidth(a), 2) * h / 3)\n                                      \
    \      ^~~\n/tmp/tmpvpmcxelr.swift:6:49: error: cannot find 'triangleWidth' in\
    \ scope\n    return sqrt(pow(triangleHeight(a), 2) + pow(triangleWidth(a), 2)\
    \ * h / 3)\n                                                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (-a / 2) * h\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpqodqo0ly.swift:6:21: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (-a / 2) * h\n           ~~~~~~~~~^~~\n\
    \           Double(     )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area_tri = (3. * h) / (3. * 3. * a)\n    return area_tri\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmptjm7nmmu.swift:6:22: error: extraneous whitespace after '.' is\
    \ not permitted\n    let area_tri = (3. * h) / (3. * 3. * a)\n               \
    \      ^~\n                      \n/tmp/tmptjm7nmmu.swift:6:24: error: expected\
    \ member name following '.'\n    let area_tri = (3. * h) / (3. * 3. * a)\n   \
    \                    ^\n/tmp/tmptjm7nmmu.swift:6:33: error: extraneous whitespace\
    \ after '.' is not permitted\n    let area_tri = (3. * h) / (3. * 3. * a)\n  \
    \                              ^~\n                                 \n/tmp/tmptjm7nmmu.swift:6:35:\
    \ error: expected member name following '.'\n    let area_tri = (3. * h) / (3.\
    \ * 3. * a)\n                                  ^\n/tmp/tmptjm7nmmu.swift:6:38:\
    \ error: extraneous whitespace after '.' is not permitted\n    let area_tri =\
    \ (3. * h) / (3. * 3. * a)\n                                     ^~\n        \
    \                              \n"
  stdout: ''
  timestamp: 1659979502
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 3.141592653589793 * Double(a) / Double(h)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmp631zdedl/tmp631zdedl.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b030bb41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b030b838b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b030b838988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b030b8377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp631zdedl                        0x00005637fbe241c7 <unavailable> + 4551

    5    libc.so.6                          0x00002b030bd2d460 __libc_start_main +
    245

    6    tmp631zdedl                        0x00005637fbe23e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return (4. * a * a) / h / (3. * a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp9141tarz.swift:6:12: error: extraneous whitespace after '.' is\
    \ not permitted\n  return (4. * a * a) / h / (3. * a)\n           ^~\n       \
    \     \n/tmp/tmp9141tarz.swift:6:14: error: expected member name following '.'\n\
    \  return (4. * a * a) / h / (3. * a)\n             ^\n/tmp/tmp9141tarz.swift:6:31:\
    \ error: extraneous whitespace after '.' is not permitted\n  return (4. * a *\
    \ a) / h / (3. * a)\n                              ^~\n                      \
    \         \n/tmp/tmp9141tarz.swift:6:33: error: expected member name following\
    \ '.'\n  return (4. * a * a) / h / (3. * a)\n                                ^\n\
    /tmp/tmp9141tarz.swift:6:27: error: no '/' candidates produce the expected contextual\
    \ result type 'Double'\n  return (4. * a * a) / h / (3. * a)\n               \
    \           ^\nSwift.Int:10:24: note: '/' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    public static func / (lhs: Int, rhs: Int) -> Int\n\
    \                       ^\nSwift.BinaryInteger:14:17: note: '/' produces 'Int',\
    \ not the expected contextual result type 'Double'\n    static func / (lhs: Self,\
    \ rhs: Self) -> Self\n                ^\nSwift.Duration:8:24: note: '/' produces\
    \ 'Duration', not the expected contextual result type 'Double'\n    public static\
    \ func / <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n    \
    \                   ^\n"
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a * h) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp1m26ikw1.swift:6:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / 2.0\n             \
    \ ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let s = 0.5 * (h * (h - a))\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpogi4dr74.swift:6:17: error: binary operator '*' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    let s = 0.5 * (h * (h - a))\n  \
    \          ~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpogi4dr74.swift:6:17: note: overloads for\
    \ '*' exist with these partially matching parameter lists: (Double, Double), (Int,\
    \ Int)\n    let s = 0.5 * (h * (h - a))\n                ^\n"
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(sqrt(Double(a * a + h * h)) / (2.0 * a))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxr2iyunk.swift:6:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + h * h)) / (2.0 * a))\n                  ^~~~\n/tmp/tmpxr2iyunk.swift:6:54:\
    \ error: binary operator '*' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    return Double(sqrt(Double(a * a + h * h)) / (2.0 * a))\n        \
    \                                         ~~~ ^ ~\n/tmp/tmpxr2iyunk.swift:6:54:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return Double(sqrt(Double(a * a + h * h))\
    \ / (2.0 * a))\n                                                     ^\n"
  stdout: ''
  timestamp: 1659979535
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var result: Double = 0.0\n    var a: Double = Double(a)\n    var\
    \ h: Double = Double(h)\n    var i: Double\n    var j: Double\n    var k: Double\n\
    \    for i = 0; i <= a; i++ {\n        result += (i / a) * (h / a)\n    }\n  \
    \  for j = 0; j <= h; j++ {\n        result += ((h - j) / h) * (a / h)\n    }\n\
    \    for i = 0; i <= a; i++ {\n        for j = 0; j <= h; j++ {\n            k\
    \ = (i + j) / 2\n            result += (i / ((a * h) / 2)) * (j / ((2 * h) / 2))\
    \ * (k / ((a * h) / 4))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpnqqed5by.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i <= a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpnqqed5by.swift:15:5:\
    \ error: C-style for statement has been removed in Swift 3\n    for j = 0; j <=\
    \ h; j++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpnqqed5by.swift:18:5: error: C-style\
    \ for statement has been removed in Swift 3\n    for i = 0; i <= a; i++ {\n  \
    \  ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpnqqed5by.swift:19:9: error: C-style for statement\
    \ has been removed in Swift 3\n        for j = 0; j <= h; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a * (a + h) - Triangle.side(a, b, h) * Triangle.side(b,\
    \ a, h)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpaqn_tdgt.swift:6:27: error: cannot find 'Triangle' in scope\n \
    \   return (a * (a + h) - Triangle.side(a, b, h) * Triangle.side(b, a, h)) / 2\n\
    \                          ^~~~~~~~\n/tmp/tmpaqn_tdgt.swift:6:44: error: cannot\
    \ find 'b' in scope\n    return (a * (a + h) - Triangle.side(a, b, h) * Triangle.side(b,\
    \ a, h)) / 2\n                                           ^\n/tmp/tmpaqn_tdgt.swift:6:52:\
    \ error: cannot find 'Triangle' in scope\n    return (a * (a + h) - Triangle.side(a,\
    \ b, h) * Triangle.side(b, a, h)) / 2\n                                      \
    \             ^~~~~~~~\n/tmp/tmpaqn_tdgt.swift:6:66: error: cannot find 'b' in\
    \ scope\n    return (a * (a + h) - Triangle.side(a, b, h) * Triangle.side(b, a,\
    \ h)) / 2\n                                                                 ^\n\
    /tmp/tmpaqn_tdgt.swift:6:12: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (a * (a + h) - Triangle.side(a, b, h) * Triangle.side(b,\
    \ a, h)) / 2\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979596
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (1.0 - cos(M_PI * a / h)) / (2.0 * M_PI)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpqxu2rbzr.swift:6:19: error: cannot find 'cos' in scope\n    return\
    \ (1.0 - cos(M_PI * a / h)) / (2.0 * M_PI)\n                  ^~~\n/tmp/tmpqxu2rbzr.swift:6:23:\
    \ error: cannot find 'M_PI' in scope\n    return (1.0 - cos(M_PI * a / h)) / (2.0\
    \ * M_PI)\n                      ^~~~\n/tmp/tmpqxu2rbzr.swift:6:47: error: cannot\
    \ find 'M_PI' in scope\n    return (1.0 - cos(M_PI * a / h)) / (2.0 * M_PI)\n\
    \                                              ^~~~\n"
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var a = a\n    var h = h\n\n    var area = Double()\n    if a\
    \ == 0.0 {\n        return Double()\n    }\n\n    let side = Double(h) / 2\n \
    \   if h == 0 {\n        area = Double(a)\n    } else {\n        var temp = 0\n\
    \        let lower = (a * (h - side)) / h\n        let upper = ((a * (h - side)))\
    \ / h\n\n        if h == 1 {\n            area = Double(a) * Double(a)\n     \
    \   }\n\n        if lower >= upper {\n            temp = Double(a)\n         \
    \   area = temp * temp\n        } else {\n            temp = Double(lower)\n \
    \           area = (a * temp + Double(upper))\n        }\n    }\n    return area\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmphr_s0j4u.swift:10:10: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if a == 0.0 {\n       ~ ^  ~~~\n\
    /tmp/tmphr_s0j4u.swift:10:10: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Int, Int)\n    if a == 0.0 {\n         ^\n/tmp/tmphr_s0j4u.swift:19:31:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        let lower = (a * (h - side)) / h\n                              ^\n \
    \                             Int()\n/tmp/tmphr_s0j4u.swift:20:32: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n        let\
    \ upper = ((a * (h - side))) / h\n                               ^\n         \
    \                      Int()\n/tmp/tmphr_s0j4u.swift:27:20: error: cannot assign\
    \ value of type 'Double' to type 'Int'\n            temp = Double(a)\n       \
    \            ^~~~~~~~~\n                   Int(     )\n/tmp/tmphr_s0j4u.swift:28:25:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            area\
    \ = temp * temp\n                   ~~~~~^~~~~~\n                   Double(  \
    \  )\n/tmp/tmphr_s0j4u.swift:30:20: error: no 'init' candidates produce the expected\
    \ contextual result type 'Int'\n            temp = Double(lower)\n           \
    \        ^\nSwift.Double:4:12: note: 'init(_:)' produces 'Double', not the expected\
    \ contextual result type 'Int'\n    public init(_ _value: Builtin.FPIEEE64)\n\
    \           ^\nSwift.Double:4:12: note: 'init(_:)' produces 'Double?', not the\
    \ expected contextual result type 'Int'\n    public init?(_ text: Substring)\n\
    \           ^\nSwift.Double:2:12: note: 'init(_:)' produces 'Double', not the\
    \ expected contextual result type 'Int'\n    public init(_ v: Int)\n         \
    \  ^\nSwift.Double:6:23: note: 'init(_:)' produces 'Double', not the expected\
    \ contextual result type 'Int'\n    @inlinable public init(_ other: Float16)\n\
    \                      ^\nSwift.Double:9:23: note: 'init(_:)' produces 'Double',\
    \ not the expected contextual result type 'Int'\n    @inlinable public init(_\
    \ other: Float)\n                      ^\nSwift.Do"
  stdout: ''
  timestamp: 1659979504
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return sqrt(Double(pow(a, 2) + pow(h, 2) - Double(a * h)))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8hn1weh6.swift:6:10: error: cannot find 'sqrt' in scope\n  return\
    \ sqrt(Double(pow(a, 2) + pow(h, 2) - Double(a * h)))\n         ^~~~\n/tmp/tmp8hn1weh6.swift:6:22:\
    \ error: cannot find 'pow' in scope\n  return sqrt(Double(pow(a, 2) + pow(h, 2)\
    \ - Double(a * h)))\n                     ^~~\n/tmp/tmp8hn1weh6.swift:6:34: error:\
    \ cannot find 'pow' in scope\n  return sqrt(Double(pow(a, 2) + pow(h, 2) - Double(a\
    \ * h)))\n                                 ^~~\n"
  stdout: ''
  timestamp: 1659979505
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let a1 = (a * 0.5) / h\n    return ((sqrt(a1 * a1 + a1 * a1) +\
    \ ((a1 * h) / 2) - a1) * 0.5) * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp939hiktu.swift:6:17: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let a1 = (a * 0.5) / h\n       \
    \       ~ ^ ~~~\n/tmp/tmp939hiktu.swift:6:17: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Duration, Double), (Int, Int)\n \
    \   let a1 = (a * 0.5) / h\n                ^\n/tmp/tmp939hiktu.swift:7:14: error:\
    \ cannot find 'sqrt' in scope\n    return ((sqrt(a1 * a1 + a1 * a1) + ((a1 * h)\
    \ / 2) - a1) * 0.5) * 0.5\n             ^~~~\n/tmp/tmp939hiktu.swift:7:12: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n    return ((sqrt(a1\
    \ * a1 + a1 * a1) + ((a1 * h) / 2) - a1) * 0.5) * 0.5\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979606
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(h) * Double(a) / Double(2.0 * Double(2.0))\n\
    \    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmp91oleja8/tmp91oleja8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc05475c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc0516cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc0516c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc0516b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91oleja8                        0x00005622b2140217 <unavailable> + 4631

    5    libc.so.6                          0x00002afc05661460 __libc_start_main +
    245

    6    tmp91oleja8                        0x00005622b213feb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let b = Double(h / 2)\n    let c = Double(a * a - b * b) / 2\n\
    \    let s = c * c + b * b\n    return s * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpm8u4jo3_.swift:7:26: error: binary operator '-' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let c = Double(a * a - b * b) /\
    \ 2\n                   ~~~~~ ^ ~~~~~\n/tmp/tmpm8u4jo3_.swift:7:26: note: overloads\
    \ for '-' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    let c = Double(a * a - b * b) / 2\n                        \
    \ ^\n/tmp/tmpm8u4jo3_.swift:8:21: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Duration'\n    let s = c * c + b * b\n          \
    \          ^\n/tmp/tmpm8u4jo3_.swift:8:19: error: binary operator '+' cannot be\
    \ applied to operands of type 'Duration' and 'Double'\n    let s = c * c + b *\
    \ b\n            ~~~~~ ^ ~~~~~\n/tmp/tmpm8u4jo3_.swift:8:19: note: overloads for\
    \ '+' exist with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Duration)\n    let s = c * c + b * b\n                  ^\n"
  stdout: ''
  timestamp: 1659979511
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * sqrt(sqr(a) * sqr(h))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp2vdl_c4j.swift:6:18: error: cannot find 'sqrt' in scope\n    return\
    \ 0.5 * sqrt(sqr(a) * sqr(h))\n                 ^~~~\n/tmp/tmp2vdl_c4j.swift:6:23:\
    \ error: cannot find 'sqr' in scope\n    return 0.5 * sqrt(sqr(a) * sqr(h))\n\
    \                      ^~~\n/tmp/tmp2vdl_c4j.swift:6:32: error: cannot find 'sqr'\
    \ in scope\n    return 0.5 * sqrt(sqr(a) * sqr(h))\n                         \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659979503
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(h, 2) * pow(2 * a, 3) - pow(h, 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp13lfd1km.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(h, 2) * pow(2 * a, 3) - pow(h, 2))\n           ^~~~\n/tmp/tmp13lfd1km.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(h, 2) * pow(2 * a, 3)\
    \ - pow(h, 2))\n                ^~~\n/tmp/tmp13lfd1km.swift:6:29: error: cannot\
    \ find 'pow' in scope\n    return sqrt(pow(h, 2) * pow(2 * a, 3) - pow(h, 2))\n\
    \                            ^~~\n/tmp/tmp13lfd1km.swift:6:45: error: cannot find\
    \ 'pow' in scope\n    return sqrt(pow(h, 2) * pow(2 * a, 3) - pow(h, 2))\n   \
    \                                         ^~~\n"
  stdout: ''
  timestamp: 1659979504
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (1 + sqrt(Double(a * a + h * h))) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp_f4mddoh.swift:6:17: error: cannot find 'sqrt' in scope\n    return\
    \ (1 + sqrt(Double(a * a + h * h))) / 2\n                ^~~~\n"
  stdout: ''
  timestamp: 1659979504
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (sqrt(2.0 * a * h) + 1.0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpzewzan6c.swift:6:13: error: cannot find 'sqrt' in scope\n    return\
    \ (sqrt(2.0 * a * h) + 1.0)\n            ^~~~\n/tmp/tmpzewzan6c.swift:6:22: error:\
    \ binary operator '*' cannot be applied to operands of type 'Double' and 'Int'\n\
    \    return (sqrt(2.0 * a * h) + 1.0)\n                 ~~~ ^ ~\n/tmp/tmpzewzan6c.swift:6:22:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    return (sqrt(2.0 * a * h) + 1.0)\n                     ^\n"
  stdout: ''
  timestamp: 1659979504
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (pow(Double(a), 2) + pow(Double(h), 2)) / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0fa9yddu.swift:6:13: error: cannot find 'pow' in scope\n    return\
    \ (pow(Double(a), 2) + pow(Double(h), 2)) / 2\n            ^~~\n/tmp/tmp0fa9yddu.swift:6:33:\
    \ error: cannot find 'pow' in scope\n    return (pow(Double(a), 2) + pow(Double(h),\
    \ 2)) / 2\n                                ^~~\n"
  stdout: ''
  timestamp: 1659979504
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area = 0.0\n    for i in 0..<h {\n        area += (a * (h\
    \ - i) * (h - i)) / 2\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpaosfehm8.swift:8:9: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        area += (a * (h - i) * (h - i)) / 2\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979556
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * h * h / 3.0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpp6fsutsr.swift:6:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return a * h * h / 3.0\n           \
    \      ^\n           Double(  )\n"
  stdout: ''
  timestamp: 1659979505
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = a * (h / 2)\n    return Double(area)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpzem77pi8/tmpzem77pi8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d873f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d870eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d870ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d870e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzem77pi8                        0x000055c91cfc2257 <unavailable> + 4695

    5    libc.so.6                          0x00002b8d875df460 __libc_start_main +
    245

    6    tmpzem77pi8                        0x000055c91cfc1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979505
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h / Double(2 * a + b))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpy0j2djtf.swift:6:42: error: cannot find 'b' in scope\n    return\
    \ Double(a * h / Double(2 * a + b))\n                                        \
    \ ^\n/tmp/tmpy0j2djtf.swift:6:25: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return Double(a * h / Double(2 *\
    \ a + b))\n                  ~~~~~ ^ ~~~~~~~~~~~~~~~~~\n/tmp/tmpy0j2djtf.swift:6:25:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return Double(a * h / Double(2 * a + b))\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * (h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rsqxju.swift:6:14: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * (h / 2)\n           ~~^~~~~~~~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659979502
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * (b - a + h * (b + h) / 2) / (2 * (b - h))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpgpgtemhn.swift:6:17: error: cannot find 'b' in scope\n    return\
    \ a * (b - a + h * (b + h) / 2) / (2 * (b - h))\n                ^\n/tmp/tmpgpgtemhn.swift:6:30:\
    \ error: cannot find 'b' in scope\n    return a * (b - a + h * (b + h) / 2) /\
    \ (2 * (b - h))\n                             ^\n/tmp/tmpgpgtemhn.swift:6:50:\
    \ error: cannot find 'b' in scope\n    return a * (b - a + h * (b + h) / 2) /\
    \ (2 * (b - h))\n                                                 ^\n/tmp/tmpgpgtemhn.swift:6:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return a *\
    \ (b - a + h * (b + h) / 2) / (2 * (b - h))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979567
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a - h) * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpgzqgvtvj.swift:6:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a - h) * 0.5\n             \
    \ ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979505
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    guard a >= 0 && h >= 0 else {\n        return 0\n    }\n\n   \
    \ let area = a * h * 0.5\n    return area - Double(area / h)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpb21aqklt.swift:10:22: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let area = a * h * 0.5\n       \
    \        ~~~~~ ^ ~~~\n/tmp/tmpb21aqklt.swift:10:22: note: overloads for '*' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    let area = a * h * 0.5\n                     ^\n/tmp/tmpb21aqklt.swift:10:16:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Duration'\n\
    \    let area = a * h * 0.5\n               ^\n"
  stdout: ''
  timestamp: 1659979505
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return ((1 / 3) * pow((a / 3), 2)) + ((1 / 3) * pow((h / 3), 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpfxduwoze.swift:6:21: error: cannot find 'pow' in scope\n  return\
    \ ((1 / 3) * pow((a / 3), 2)) + ((1 / 3) * pow((h / 3), 2))\n                \
    \    ^~~\n/tmp/tmpfxduwoze.swift:6:51: error: cannot find 'pow' in scope\n  return\
    \ ((1 / 3) * pow((a / 3), 2)) + ((1 / 3) * pow((h / 3), 2))\n                \
    \                                  ^~~\n/tmp/tmpfxduwoze.swift:6:10: error: the\
    \ compiler is unable to type-check this expression in reasonable time; try breaking\
    \ up the expression into distinct sub-expressions\n  return ((1 / 3) * pow((a\
    \ / 3), 2)) + ((1 / 3) * pow((h / 3), 2))\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979542
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return math.sqrt(pow(a / 2, 2) + pow(h / 2, 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpnjbwkr56.swift:6:12: error: cannot find 'math' in scope\n    return\
    \ math.sqrt(pow(a / 2, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpnjbwkr56.swift:6:22:\
    \ error: cannot find 'pow' in scope\n    return math.sqrt(pow(a / 2, 2) + pow(h\
    \ / 2, 2))\n                     ^~~\n/tmp/tmpnjbwkr56.swift:6:38: error: cannot\
    \ find 'pow' in scope\n    return math.sqrt(pow(a / 2, 2) + pow(h / 2, 2))\n \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659979505
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * h\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpn5cqqdv6.swift:6:14: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h\n           ~~^~~\n   \
    \        Double( )\n"
  stdout: ''
  timestamp: 1659979505
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpt_mqwvwc.swift:6:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a * h) / 2\n           ~~~~~~~~^~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659979505
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (pow(a, 2) + pow(h, 2)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvl7_ogdu.swift:6:13: error: cannot find 'pow' in scope\n    return\
    \ (pow(a, 2) + pow(h, 2)) / 2\n            ^~~\n/tmp/tmpvl7_ogdu.swift:6:25: error:\
    \ cannot find 'pow' in scope\n    return (pow(a, 2) + pow(h, 2)) / 2\n       \
    \                 ^~~\n"
  stdout: ''
  timestamp: 1659979506
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    // area of triangle with given length and high return area\n \
    \   return Double(a + h) * (h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpopsd4psl.swift:7:31: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return Double(a + h) * (h / 2)\n   \
    \                           ^\n                           Double()\n"
  stdout: ''
  timestamp: 1659979506
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * h / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpayvakzd7.swift:6:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979506
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a*a + h*h) / (2*a*h)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp1vsja3pc.swift:6:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (a*a + h*h) / (2*a*h)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979599
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area_tri = Double(h) * Double(a) / 2\n    return area_tri\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979506
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double((h * 3.0) * (a / 2.0))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpqv37ct9l.swift:6:34: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return Double((h * 3.0) * (a / 2.0))\n\
    \                               ~ ^ ~~~\n/tmp/tmpqv37ct9l.swift:6:34: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    return Double((h * 3.0) * (a / 2.0))\n                     \
    \            ^\n/tmp/tmpqv37ct9l.swift:6:22: error: binary operator '*' cannot\
    \ be applied to operands of type 'Int' and 'Double'\n    return Double((h * 3.0)\
    \ * (a / 2.0))\n                   ~ ^ ~~~\n/tmp/tmpqv37ct9l.swift:6:22: note:\
    \ overloads for '*' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n    return Double((h * 3.0) * (a / 2.0))\n            \
    \         ^\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = a * (h / 2)\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpylnnvysm.swift:7:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979418
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (4.0 * pow(a, 2.0) + pow(a, 2.0) + 2.0 * a) * (1.0 / 3.0)\
    \ * pow(h, 0.25)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpjz5_a4lm.swift:6:19: error: cannot find 'pow' in scope\n    return\
    \ (4.0 * pow(a, 2.0) + pow(a, 2.0) + 2.0 * a) * (1.0 / 3.0) * pow(h, 0.25)\n \
    \                 ^~~\n/tmp/tmpjz5_a4lm.swift:6:33: error: cannot find 'pow' in\
    \ scope\n    return (4.0 * pow(a, 2.0) + pow(a, 2.0) + 2.0 * a) * (1.0 / 3.0)\
    \ * pow(h, 0.25)\n                                ^~~\n/tmp/tmpjz5_a4lm.swift:6:72:\
    \ error: cannot find 'pow' in scope\n    return (4.0 * pow(a, 2.0) + pow(a, 2.0)\
    \ + 2.0 * a) * (1.0 / 3.0) * pow(h, 0.25)\n                                  \
    \                                     ^~~\n/tmp/tmpjz5_a4lm.swift:6:12: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n    return (4.0 *\
    \ pow(a, 2.0) + pow(a, 2.0) + 2.0 * a) * (1.0 / 3.0) * pow(h, 0.25)\n        \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979705
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let a2 = a * a\n    let h2 = h * h\n    let a2h = a2 + h2\n  \
    \  return (sqrt(a2h * a2h + h2 * h2) - a) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpe3m_lr6u.swift:9:13: error: cannot find 'sqrt' in scope\n    return\
    \ (sqrt(a2h * a2h + h2 * h2) - a) / 2\n            ^~~~\n/tmp/tmpe3m_lr6u.swift:9:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return (sqrt(a2h\
    \ * a2h + h2 * h2) - a) / 2\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = a * (a + h) / 2\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpjmfz80sq.swift:7:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return h * pow(abs(pow(a, 2) - 1), 1.0 / 2.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw53mg3.swift:6:16: error: cannot find 'pow' in scope\n    return\
    \ h * pow(abs(pow(a, 2) - 1), 1.0 / 2.0)\n               ^~~\n/tmp/tmp1jw53mg3.swift:6:24:\
    \ error: cannot find 'pow' in scope\n    return h * pow(abs(pow(a, 2) - 1), 1.0\
    \ / 2.0)\n                       ^~~\n/tmp/tmp1jw53mg3.swift:6:14: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n    return\
    \ h * pow(abs(pow(a, 2) - 1), 1.0 / 2.0)\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                               )\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * (h - a) * (2 / (h + a) - sqrt(Double(h + a +\
    \ 1) * h + a + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmptbovjjsj.swift:6:48: error: cannot find 'sqrt' in scope\n    return\
    \ Double(a * (h - a) * (2 / (h + a) - sqrt(Double(h + a + 1) * h + a + 1)))\n\
    \                                               ^~~~\n/tmp/tmptbovjjsj.swift:6:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return Double(a\
    \ * (h - a) * (2 / (h + a) - sqrt(Double(h + a + 1) * h + a + 1)))\n         \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979611
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a * h) / (4 * a)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmprn9nehc4.swift:6:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a * h) / (4 * a)\n         \
    \  ~~~~~~~~^~~~~~~~~\n           Double(          )\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var length = a * math.sqrt(3)\n    length = length * length /\
    \ 6\n    return length * h / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0lrlu2to.swift:6:22: error: cannot find 'math' in scope\n    var\
    \ length = a * math.sqrt(3)\n                     ^~~~\n/tmp/tmp0lrlu2to.swift:8:23:\
    \ error: no '/' candidates produce the expected contextual result type 'Double'\n\
    \    return length * h / 3\n                      ^\nSwift.Int:10:24: note: '/'\
    \ produces 'Int', not the expected contextual result type 'Double'\n    public\
    \ static func / (lhs: Int, rhs: Int) -> Int\n                       ^\nSwift.Int:10:24:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    public static func / (lhs: Int, rhs: Int) -> Int\n                      \
    \ ^\nSwift.BinaryInteger:14:17: note: '/' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    static func / (lhs: Self, rhs: Self) -> Self\n   \
    \             ^\nSwift.Int:10:24: note: '/' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    public static func / (lhs: Int, rhs: Int) -> Int\n\
    \                       ^\nSwift.BinaryInteger:14:17: note: '/' produces 'Int',\
    \ not the expected contextual result type 'Double'\n    static func / (lhs: Self,\
    \ rhs: Self) -> Self\n                ^\nSwift.DurationProtocol:3:17: note: '/'\
    \ produces 'Duration', not the expected contextual result type 'Double'\n    static\
    \ func / (lhs: Self, rhs: Int) -> Self\n                ^\nSwift.Duration:8:24:\
    \ note: '/' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func / <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / Double(2.0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmphia7pocz/tmphia7pocz.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40c7f80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40c7c77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40c7c77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40c7c767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphia7pocz                        0x00005604e164d1c7 <unavailable> + 4551

    5    libc.so.6                          0x00002b40c816c460 __libc_start_main +
    245

    6    tmphia7pocz                        0x00005604e164ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let l = (h - a) / 2\n    return sqrt(l * l + ((a - h) / 2) * h)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpd1f_5pq9.swift:7:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(l * l + ((a - h) / 2) * h)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return sqrt(Double(a * a * h * h + h * h - a * a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmphdaictdu.swift:6:10: error: cannot find 'sqrt' in scope\n  return\
    \ sqrt(Double(a * a * h * h + h * h - a * a))\n         ^~~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * (sqrt(1 - pow((a / h), 2)) / 2.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8b8zfqaw.swift:6:17: error: cannot find 'sqrt' in scope\n    return\
    \ a * (sqrt(1 - pow((a / h), 2)) / 2.0)\n                ^~~~\n/tmp/tmp8b8zfqaw.swift:6:26:\
    \ error: cannot find 'pow' in scope\n    return a * (sqrt(1 - pow((a / h), 2))\
    \ / 2.0)\n                         ^~~\n/tmp/tmp8b8zfqaw.swift:6:12: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n    return a\
    \ * (sqrt(1 - pow((a / h), 2)) / 2.0)\n           ^\n           Double( )\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    // TODO: use an algorithm that uses area formula from https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Triangle#Length_of_the_triangle\n\
    \    // http://mathworld.wolfram.com/Triangle.html\n    let d = (3.0 - 2.0 * a\
    \ + 3.0 * b + 4.0 * c) / 6.0\n    return sqrt(d * d + h * h)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpo0qbnxc9.swift:8:36: error: cannot find 'b' in scope\n    let d\
    \ = (3.0 - 2.0 * a + 3.0 * b + 4.0 * c) / 6.0\n                              \
    \     ^\n/tmp/tmpo0qbnxc9.swift:8:46: error: cannot find 'c' in scope\n    let\
    \ d = (3.0 - 2.0 * a + 3.0 * b + 4.0 * c) / 6.0\n                            \
    \                 ^\n/tmp/tmpo0qbnxc9.swift:8:13: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    let d = (3.0 - 2.0 * a + 3.0 * b + 4.0 *\
    \ c) / 6.0\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo0qbnxc9.swift:9:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(d * d + h * h)\n       \
    \    ^~~~\n/tmp/tmpo0qbnxc9.swift:9:23: error: binary operator '+' cannot be applied\
    \ to operands of type 'Duration' and 'Int'\n    return sqrt(d * d + h * h)\n \
    \               ~~~~~ ^ ~~~~~\n/tmp/tmpo0qbnxc9.swift:9:23: note: overloads for\
    \ '+' exist with these partially matching parameter lists: (Duration, Duration),\
    \ (Int, Int)\n    return sqrt(d * d + h * h)\n                      ^\n/tmp/tmpo0qbnxc9.swift:9:25:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Duration'\n\
    \    return sqrt(d * d + h * h)\n                        ^\n"
  stdout: ''
  timestamp: 1659979677
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let length = (h * h) + (a * a) - (h * h)\n    return length /\
    \ 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h: 3) ==\
    \ 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a: 10,\
    \ h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp_79qyrnc.swift:7:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return length / 2\n           ~~~~~~~^~~\n\
    \           Double(   )\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpojtft4u_/tmpojtft4u_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae67d320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae67d017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae67d017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae67d0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojtft4u_                        0x00005562b4fd4257 <unavailable> + 4695

    5    libc.so.6                          0x00002ae67d50c460 __libc_start_main +
    245

    6    tmpojtft4u_                        0x00005562b4fd3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a, 2.0) + pow(h / 2.0, 2.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp08jg9c08.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2.0) + pow(h / 2.0, 2.0))\n           ^~~~\n/tmp/tmp08jg9c08.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h / 2.0,\
    \ 2.0))\n                ^~~\n/tmp/tmp08jg9c08.swift:6:31: error: cannot find\
    \ 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h / 2.0, 2.0))\n         \
    \                     ^~~\n/tmp/tmp08jg9c08.swift:6:37: error: binary operator\
    \ '/' cannot be applied to operands of type 'Int' and 'Double'\n    return sqrt(pow(a,\
    \ 2.0) + pow(h / 2.0, 2.0))\n                                  ~ ^ ~~~\n/tmp/tmp08jg9c08.swift:6:37:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    return sqrt(pow(a, 2.0)\
    \ + pow(h / 2.0, 2.0))\n                                    ^\n"
  stdout: ''
  timestamp: 1659824599
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area = 0.0\n\n    for i in 0..<h {\n        for j in 0..<h\
    \ {\n            area += pow(a * pow((i + j) / 2, 2), (1.0/2.0))\n        }\n\
    \    }\n\n    return area / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp2t1_24k_.swift:10:21: error: cannot find 'pow' in scope\n     \
    \       area += pow(a * pow((i + j) / 2, 2), (1.0/2.0))\n                    ^~~\n\
    /tmp/tmp2t1_24k_.swift:10:29: error: cannot find 'pow' in scope\n            area\
    \ += pow(a * pow((i + j) / 2, 2), (1.0/2.0))\n                            ^~~\n"
  stdout: ''
  timestamp: 1659979511
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(abs(h * 0.5)) * (\n        0.8660254037844387 *\
    \ pow(abs(a), 3) - (abs(a) * sqrt(pow(abs(a), 3) + pow(abs(h), 2))))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpgt7rvh9m.swift:7:30: error: cannot find 'pow' in scope\n      \
    \  0.8660254037844387 * pow(abs(a), 3) - (abs(a) * sqrt(pow(abs(a), 3) + pow(abs(h),\
    \ 2))))\n                             ^~~\n/tmp/tmpgt7rvh9m.swift:7:57: error:\
    \ cannot find 'sqrt' in scope\n        0.8660254037844387 * pow(abs(a), 3) - (abs(a)\
    \ * sqrt(pow(abs(a), 3) + pow(abs(h), 2))))\n                                \
    \                        ^~~~\n/tmp/tmpgt7rvh9m.swift:7:62: error: cannot find\
    \ 'pow' in scope\n        0.8660254037844387 * pow(abs(a), 3) - (abs(a) * sqrt(pow(abs(a),\
    \ 3) + pow(abs(h), 2))))\n                                                   \
    \          ^~~\n/tmp/tmpgt7rvh9m.swift:7:79: error: cannot find 'pow' in scope\n\
    \        0.8660254037844387 * pow(abs(a), 3) - (abs(a) * sqrt(pow(abs(a), 3) +\
    \ pow(abs(h), 2))))\n                                                        \
    \                      ^~~\n/tmp/tmpgt7rvh9m.swift:6:12: error: the compiler is\
    \ unable to type-check this expression in reasonable time; try breaking up the\
    \ expression into distinct sub-expressions\n    return Double(abs(h * 0.5)) *\
    \ (\n           ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979602
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return a*h/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp1oqgqf3q.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n  return a*h/2\n         ~~~^~\n       \
    \  Double( )\n"
  stdout: ''
  timestamp: 1659979512
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / (2.0 * Double(a) * Double(h -\
    \ a)) * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpel53bpil/tmpel53bpil.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf4e463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf4e15ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf4e15a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf4e1597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpel53bpil                        0x000055b00bb5d1c7 <unavailable> + 4551

    5    libc.so.6                          0x00002abf4e64f460 __libc_start_main +
    245

    6    tmpel53bpil                        0x000055b00bb5ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979512
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(sqrt(pow(a, 2) + pow(h, 2) - 4 * pow(a, 2) * h))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpg_5yxllk.swift:6:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h, 2) - 4 * pow(a, 2) * h))\n                  ^~~~\n\
    /tmp/tmpg_5yxllk.swift:6:24: error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a,\
    \ 2) + pow(h, 2) - 4 * pow(a, 2) * h))\n                       ^~~\n/tmp/tmpg_5yxllk.swift:6:36:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h,\
    \ 2) - 4 * pow(a, 2) * h))\n                                   ^~~\n/tmp/tmpg_5yxllk.swift:6:52:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h,\
    \ 2) - 4 * pow(a, 2) * h))\n                                                 \
    \  ^~~\n"
  stdout: ''
  timestamp: 1659979512
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (-h) * (a + h) / (2.0 * h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpbya3ovmd.swift:6:30: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return (-h) * (a + h) / (2.0 * h)\n   \
    \                          ^\n                             Int( )\n/tmp/tmpbya3ovmd.swift:6:27:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (-h) * (a + h) / (2.0 * h)\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    \           Double(                   )\n"
  stdout: ''
  timestamp: 1659979561
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return pow((a + b + c) / 2.0 - a, 2) * h + (pow((a + b) / 2.0\
    \ - a, 2) * h / 2.0 - b) * h + ((pow((a + b + c) / 2.0 - a, 2) * h / 2.0 - b)\
    \ * h / 2.0 - c) * h / (a + b + c + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpgvoh1su3.swift:6:12: error: cannot find 'pow' in scope\n    return\
    \ pow((a + b + c) / 2.0 - a, 2) * h + (pow((a + b) / 2.0 - a, 2) * h / 2.0 - b)\
    \ * h + ((pow((a + b + c) / 2.0 - a, 2) * h / 2.0 - b) * h / 2.0 - c) * h / (a\
    \ + b + c + 1)\n           ^~~\n/tmp/tmpgvoh1su3.swift:6:21: error: cannot find\
    \ 'b' in scope\n    return pow((a + b + c) / 2.0 - a, 2) * h + (pow((a + b) /\
    \ 2.0 - a, 2) * h / 2.0 - b) * h + ((pow((a + b + c) / 2.0 - a, 2) * h / 2.0 -\
    \ b) * h / 2.0 - c) * h / (a + b + c + 1)\n                    ^\n/tmp/tmpgvoh1su3.swift:6:25:\
    \ error: cannot find 'c' in scope\n    return pow((a + b + c) / 2.0 - a, 2) *\
    \ h + (pow((a + b) / 2.0 - a, 2) * h / 2.0 - b) * h + ((pow((a + b + c) / 2.0\
    \ - a, 2) * h / 2.0 - b) * h / 2.0 - c) * h / (a + b + c + 1)\n              \
    \          ^\n/tmp/tmpgvoh1su3.swift:6:49: error: cannot find 'pow' in scope\n\
    \    return pow((a + b + c) / 2.0 - a, 2) * h + (pow((a + b) / 2.0 - a, 2) * h\
    \ / 2.0 - b) * h + ((pow((a + b + c) / 2.0 - a, 2) * h / 2.0 - b) * h / 2.0 -\
    \ c) * h / (a + b + c + 1)\n                                                ^~~\n\
    /tmp/tmpgvoh1su3.swift:6:58: error: cannot find 'b' in scope\n    return pow((a\
    \ + b + c) / 2.0 - a, 2) * h + (pow((a + b) / 2.0 - a, 2) * h / 2.0 - b) * h +\
    \ ((pow((a + b + c) / 2.0 - a, 2) * h / 2.0 - b) * h / 2.0 - c) * h / (a + b +\
    \ c + 1)\n                                                         ^\n/tmp/tmpgvoh1su3.swift:6:87:\
    \ error: cannot find 'b' in scope\n    return pow((a + b + c) / 2.0 - a, 2) *\
    \ h + (pow((a + b) / 2.0 - a, 2) * h / 2.0 - b) * h + ((pow((a + b + c) / 2.0\
    \ - a, 2) * h / 2.0 - b) * h / 2.0 - c) * h / (a + b + c + 1)\n              \
    \                                                                        ^\n/tmp/tmpgvoh1su3.swift:6:98:\
    \ error: cannot find 'pow' in scope\n    return pow((a + b + c) / 2.0 - a, 2)\
    \ * h + (pow((a + b) / 2.0 - a, 2) * h / 2.0 - b) * h + ((pow((a + b + c) / 2.0\
    \ - a, 2) * h / 2.0 - b) * h / 2.0 - c) * h / (a + b + c + 1)\n              \
    \                                                                            \
    \       ^~~"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return pow(Double(a) / Double(h), .5)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpwjomzpsf.swift:6:39: error: '.5' is not a valid floating point\
    \ literal; it must be written '0.5'\n    return pow(Double(a) / Double(h), .5)\n\
    \                                      ^~\n                                  \
    \    0\n/tmp/tmpwjomzpsf.swift:6:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(a) / Double(h), .5)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979512
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let tw = pow(a, 2.0)\n    let th = pow(a, 2.0) * pow((h / 2.0),\
    \ 2.0)\n    return sqrt(tw + th)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpr1avlkvn.swift:6:14: error: cannot find 'pow' in scope\n    let\
    \ tw = pow(a, 2.0)\n             ^~~\n/tmp/tmpr1avlkvn.swift:7:14: error: cannot\
    \ find 'pow' in scope\n    let th = pow(a, 2.0) * pow((h / 2.0), 2.0)\n      \
    \       ^~~\n/tmp/tmpr1avlkvn.swift:7:28: error: cannot find 'pow' in scope\n\
    \    let th = pow(a, 2.0) * pow((h / 2.0), 2.0)\n                           ^~~\n\
    /tmp/tmpr1avlkvn.swift:7:35: error: binary operator '/' cannot be applied to operands\
    \ of type 'Int' and 'Double'\n    let th = pow(a, 2.0) * pow((h / 2.0), 2.0)\n\
    \                                ~ ^ ~~~\n/tmp/tmpr1avlkvn.swift:7:35: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n    let th = pow(a, 2.0) * pow((h / 2.0), 2.0)\n\
    \                                  ^\n/tmp/tmpr1avlkvn.swift:8:12: error: cannot\
    \ find 'sqrt' in scope\n    return sqrt(tw + th)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979513
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) / sqrt(Double(h)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpz8qw7n7j.swift:6:25: error: cannot find 'sqrt' in scope\n    return\
    \ (Double(a) / sqrt(Double(h)))\n                        ^~~~\n"
  stdout: ''
  timestamp: 1659979513
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = a * (h / 2.0)\n    return Double(area)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpazlocrtt.swift:6:25: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let area = a * (h / 2.0)\n            \
    \            ^\n                        Int( )\n"
  stdout: ''
  timestamp: 1659979513
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(h, 2) / pow(a, 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp6f8b8n6f.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(h, 2) / pow(a, 2))\n           ^~~~\n/tmp/tmp6f8b8n6f.swift:6:17: error:\
    \ cannot find 'pow' in scope\n    return sqrt(pow(h, 2) / pow(a, 2))\n       \
    \         ^~~\n/tmp/tmp6f8b8n6f.swift:6:29: error: cannot find 'pow' in scope\n\
    \    return sqrt(pow(h, 2) / pow(a, 2))\n                            ^~~\n"
  stdout: ''
  timestamp: 1659979513
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return ((h * (h - 1) + a * a) / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmppyccazqc.swift:6:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return ((h * (h - 1) + a * a) / 2)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979596
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(sqrt(pow(Double(a) / Double(h), 2)) + 1) / (2.0\
    \ * Double(a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0h65onlf.swift:7:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp0h65onlf.swift:6:12: note: to match this opening '('\n    return (Double(sqrt(pow(Double(a)\
    \ / Double(h), 2)) + 1) / (2.0 * Double(a))\n           ^\n/tmp/tmp0h65onlf.swift:6:20:\
    \ error: cannot find 'sqrt' in scope\n    return (Double(sqrt(pow(Double(a) /\
    \ Double(h), 2)) + 1) / (2.0 * Double(a))\n                   ^~~~\n/tmp/tmp0h65onlf.swift:6:25:\
    \ error: cannot find 'pow' in scope\n    return (Double(sqrt(pow(Double(a) / Double(h),\
    \ 2)) + 1) / (2.0 * Double(a))\n                        ^~~\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area: (Double, Double) = ((Double(a) / 2) * sin(Double(h /\
    \ 2) * 2 * M_PI), (Double(a) / 2) * cos(Double(h / 2) * 2 * M_PI))\n    return\
    \ area.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxi241fxn.swift:6:53: error: cannot find 'sin' in scope\n    let\
    \ area: (Double, Double) = ((Double(a) / 2) * sin(Double(h / 2) * 2 * M_PI), (Double(a)\
    \ / 2) * cos(Double(h / 2) * 2 * M_PI))\n                                    \
    \                ^~~\n/tmp/tmpxi241fxn.swift:6:77: error: cannot find 'M_PI' in\
    \ scope\n    let area: (Double, Double) = ((Double(a) / 2) * sin(Double(h / 2)\
    \ * 2 * M_PI), (Double(a) / 2) * cos(Double(h / 2) * 2 * M_PI))\n            \
    \                                                                ^~~~\n/tmp/tmpxi241fxn.swift:6:102:\
    \ error: cannot find 'cos' in scope\n    let area: (Double, Double) = ((Double(a)\
    \ / 2) * sin(Double(h / 2) * 2 * M_PI), (Double(a) / 2) * cos(Double(h / 2) *\
    \ 2 * M_PI))\n                                                               \
    \                                      ^~~\n/tmp/tmpxi241fxn.swift:6:126: error:\
    \ cannot find 'M_PI' in scope\n    let area: (Double, Double) = ((Double(a) /\
    \ 2) * sin(Double(h / 2) * 2 * M_PI), (Double(a) / 2) * cos(Double(h / 2) * 2\
    \ * M_PI))\n                                                                 \
    \                                                            ^~~~\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return ((a / 2.0) * h) * Double.pi\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpr5l79h_9.swift:6:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Duration'\n    return ((a / 2.0) * h) * Double.pi\n\
    \             ^\n/tmp/tmpr5l79h_9.swift:6:28: error: cannot convert return expression\
    \ of type 'Duration' to return type 'Double'\n    return ((a / 2.0) * h) * Double.pi\n\
    \           ~~~~~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979518
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) / Double(h)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpayzlm04v/tmpayzlm04v.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b5060cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b50303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b50303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b503027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayzlm04v                        0x000055a4871021c7 <unavailable> + 4551

    5    libc.so.6                          0x00002b7b507f8460 __libc_start_main +
    245

    6    tmpayzlm04v                        0x000055a487101e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979501
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * h / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpayvakzd7.swift:6:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979506
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = a * h * 0.5\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpej74idyv.swift:6:22: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let area = a * h * 0.5\n       \
    \        ~~~~~ ^ ~~~\n/tmp/tmpej74idyv.swift:6:22: note: overloads for '*' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    let area = a * h * 0.5\n                     ^\n/tmp/tmpej74idyv.swift:6:16:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Duration'\n\
    \    let area = a * h * 0.5\n               ^\n"
  stdout: ''
  timestamp: 1659979518
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(h * 0.5 * a)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxqv8o4vn.swift:6:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return Double(h * 0.5 * a)\n          \
    \            ^\n                      Int( )\n"
  stdout: ''
  timestamp: 1659979519
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a, 2) + pow(h, 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpzfwfswrr.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h, 2))\n           ^~~~\n/tmp/tmpzfwfswrr.swift:6:17: error:\
    \ cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h, 2))\n       \
    \         ^~~\n/tmp/tmpzfwfswrr.swift:6:29: error: cannot find 'pow' in scope\n\
    \    return sqrt(pow(a, 2) + pow(h, 2))\n                            ^~~\n"
  stdout: ''
  timestamp: 1659979519
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let w = h * math.sqrt(3)\n    return w * sqrt(a * a + h * h -\
    \ w * w) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpsl0whzly.swift:6:17: error: cannot find 'math' in scope\n    let\
    \ w = h * math.sqrt(3)\n                ^~~~\n/tmp/tmpsl0whzly.swift:7:16: error:\
    \ cannot find 'sqrt' in scope\n    return w * sqrt(a * a + h * h - w * w) / 2\n\
    \               ^~~~\n"
  stdout: ''
  timestamp: 1659979519
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a + h) * (h - a) / (2 * a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp35f4wtkl.swift:6:30: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + h) * (h - a) / (2 * a)\n\
    \           ~~~~~~~~~~~~~~~~~~^~~~~~~~~\n           Double(                  \
    \  )\n"
  stdout: ''
  timestamp: 1659979561
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area = a * (h / 2)\n    if area < 1 {\n        area = area\
    \ - 1\n    }\n    return area / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpzsw2_1y3.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area / 2\n           ~~~~~^~~\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return h * sqrt(a * a + 4 * h * h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpgqthq76s.swift:6:16: error: cannot find 'sqrt' in scope\n    return\
    \ h * sqrt(a * a + 4 * h * h)\n               ^~~~\n/tmp/tmpgqthq76s.swift:6:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return h *\
    \ sqrt(a * a + 4 * h * h)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979575
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return pow(Double(a) * pow(2.0, Double(h) - 1) * 0.5, Double(1/2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpows4bk8q.swift:6:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(a) * pow(2.0, Double(h) - 1) * 0.5, Double(1/2))\n           ^~~\n\
    /tmp/tmpows4bk8q.swift:6:28: error: cannot find 'pow' in scope\n    return pow(Double(a)\
    \ * pow(2.0, Double(h) - 1) * 0.5, Double(1/2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpojtft4u_/tmpojtft4u_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae67d320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae67d017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae67d017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae67d0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojtft4u_                        0x00005562b4fd4257 <unavailable> + 4695

    5    libc.so.6                          0x00002ae67d50c460 __libc_start_main +
    245

    6    tmpojtft4u_                        0x00005562b4fd3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(math.pow(math.tan(math.radians(a)/2.0),h))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvkgme0hg.swift:6:17: error: cannot find 'math' in scope\n  return\
    \ Double(math.pow(math.tan(math.radians(a)/2.0),h))\n                ^~~~\n/tmp/tmpvkgme0hg.swift:6:26:\
    \ error: cannot find 'math' in scope\n  return Double(math.pow(math.tan(math.radians(a)/2.0),h))\n\
    \                         ^~~~\n/tmp/tmpvkgme0hg.swift:6:35: error: cannot find\
    \ 'math' in scope\n  return Double(math.pow(math.tan(math.radians(a)/2.0),h))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let a = (a * pi) / 180.0\n    let h = (a * pi) / 180.0\n    let\
    \ a = (a * pi) / 180.0\n    let h = (a * pi) / 180.0\n    return (pow(a, 2) *\
    \ pow((1 + h), 2)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpdm3t56lh.swift:6:18: error: cannot find 'pi' in scope\n    let\
    \ a = (a * pi) / 180.0\n                 ^~\n/tmp/tmpdm3t56lh.swift:7:18: error:\
    \ cannot find 'pi' in scope\n    let h = (a * pi) / 180.0\n                 ^~\n\
    /tmp/tmpdm3t56lh.swift:8:18: error: cannot find 'pi' in scope\n    let a = (a\
    \ * pi) / 180.0\n                 ^~\n/tmp/tmpdm3t56lh.swift:9:18: error: cannot\
    \ find 'pi' in scope\n    let h = (a * pi) / 180.0\n                 ^~\n/tmp/tmpdm3t56lh.swift:10:13:\
    \ error: cannot find 'pow' in scope\n    return (pow(a, 2) * pow((1 + h), 2))\
    \ / 2\n            ^~~\n/tmp/tmpdm3t56lh.swift:10:25: error: cannot find 'pow'\
    \ in scope\n    return (pow(a, 2) * pow((1 + h), 2)) / 2\n                   \
    \     ^~~\n"
  stdout: ''
  timestamp: 1659979522
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(sqrt(pow(triangle_side_distance(a, b), 2) + pow(triangle_side_distance(b,\
    \ a), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpoo3xykg4.swift:6:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(triangle_side_distance(a, b), 2) + pow(triangle_side_distance(b,\
    \ a), 2)))\n                  ^~~~\n/tmp/tmpoo3xykg4.swift:6:24: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(triangle_side_distance(a, b),\
    \ 2) + pow(triangle_side_distance(b, a), 2)))\n                       ^~~\n/tmp/tmpoo3xykg4.swift:6:28:\
    \ error: cannot find 'triangle_side_distance' in scope\n    return Double(sqrt(pow(triangle_side_distance(a,\
    \ b), 2) + pow(triangle_side_distance(b, a), 2)))\n                          \
    \ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoo3xykg4.swift:6:54: error: cannot find 'b'\
    \ in scope\n    return Double(sqrt(pow(triangle_side_distance(a, b), 2) + pow(triangle_side_distance(b,\
    \ a), 2)))\n                                                     ^\n/tmp/tmpoo3xykg4.swift:6:63:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(triangle_side_distance(a,\
    \ b), 2) + pow(triangle_side_distance(b, a), 2)))\n                          \
    \                                    ^~~\n/tmp/tmpoo3xykg4.swift:6:67: error:\
    \ cannot find 'triangle_side_distance' in scope\n    return Double(sqrt(pow(triangle_side_distance(a,\
    \ b), 2) + pow(triangle_side_distance(b, a), 2)))\n                          \
    \                                        ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoo3xykg4.swift:6:90:\
    \ error: cannot find 'b' in scope\n    return Double(sqrt(pow(triangle_side_distance(a,\
    \ b), 2) + pow(triangle_side_distance(b, a), 2)))\n                          \
    \                                                               ^\n"
  stdout: ''
  timestamp: 1659979523
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return sqrt(Double(a) * Double(h) / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpk0zn2gs6.swift:6:10: error: cannot find 'sqrt' in scope\n  return\
    \ sqrt(Double(a) * Double(h) / 2)\n         ^~~~\n"
  stdout: ''
  timestamp: 1659979523
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let length = sqrt(a * a + h * h) - Double(h) / 2\n    return length\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpledmmlar.swift:6:18: error: cannot find 'sqrt' in scope\n    let\
    \ length = sqrt(a * a + h * h) - Double(h) / 2\n                 ^~~~\n"
  stdout: ''
  timestamp: 1659979524
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(sqrt(a * a + h * h))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpm47gevan.swift:6:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(a * a + h * h))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979524
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a * h / 2, 2) + pow(a * h / 2, 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmph7yl2l0y.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a * h / 2, 2) + pow(a * h / 2, 2))\n           ^~~~\n/tmp/tmph7yl2l0y.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a * h / 2, 2) + pow(a\
    \ * h / 2, 2))\n                ^~~\n/tmp/tmph7yl2l0y.swift:6:37: error: cannot\
    \ find 'pow' in scope\n    return sqrt(pow(a * h / 2, 2) + pow(a * h / 2, 2))\n\
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659979524
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return abs((a / h) ** 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp992awutj.swift:6:24: error: cannot find operator '**' in scope\n\
    \    return abs((a / h) ** 2)\n                       ^~\n"
  stdout: ''
  timestamp: 1659979524
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let c = a * h\n    let s = (a + b + c) / 2\n    return s * (s\
    \ - a) * (s - b) * (s - c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpigknmtoi.swift:7:18: error: cannot find 'b' in scope\n    let s\
    \ = (a + b + c) / 2\n                 ^\n/tmp/tmpigknmtoi.swift:8:31: error: cannot\
    \ find 'b' in scope\n    return s * (s - a) * (s - b) * (s - c)\n            \
    \                  ^\n/tmp/tmpigknmtoi.swift:8:12: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    return s * (s - a) * (s - b) * (s - c)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979559
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(h) * Double(a)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979535
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return ((a / h) + 1) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpep3w971h.swift:6:21: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return ((a / h) + 1) * Double(h)\n \
    \                   ^\n           Double(      )\n"
  stdout: ''
  timestamp: 1659979538
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return pow(Double(a) * Double(h) / 3, 1 / 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmppoz82ipl.swift:6:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(a) * Double(h) / 3, 1 / 3)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979537
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(Double(a*a - h*h))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmppgwd0wyl.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(Double(a*a - h*h))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979538
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(pow(a, 2) * h) / 2\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpi4d9iw5o.swift:6:23: error: cannot find 'pow' in scope\n    let\
    \ area = Double(pow(a, 2) * h) / 2\n                      ^~~\n"
  stdout: ''
  timestamp: 1659979538
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (-b + sqrt(Double(a * a * h + b * b - h * a * h))) / (2.0\
    \ * a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpubi11ydc.swift:6:14: error: cannot find 'b' in scope\n    return\
    \ (-b + sqrt(Double(a * a * h + b * b - h * a * h))) / (2.0 * a)\n           \
    \  ^\n/tmp/tmpubi11ydc.swift:6:18: error: cannot find 'sqrt' in scope\n    return\
    \ (-b + sqrt(Double(a * a * h + b * b - h * a * h))) / (2.0 * a)\n           \
    \      ^~~~\n/tmp/tmpubi11ydc.swift:6:42: error: cannot find 'b' in scope\n  \
    \  return (-b + sqrt(Double(a * a * h + b * b - h * a * h))) / (2.0 * a)\n   \
    \                                      ^\n/tmp/tmpubi11ydc.swift:6:46: error:\
    \ cannot find 'b' in scope\n    return (-b + sqrt(Double(a * a * h + b * b - h\
    \ * a * h))) / (2.0 * a)\n                                             ^\n/tmp/tmpubi11ydc.swift:6:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return (-b\
    \ + sqrt(Double(a * a * h + b * b - h * a * h))) / (2.0 * a)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979626
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a / 2.0 * std::sqrt((b + h * h - a * a) / 4.0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp39lwhe7e.swift:6:25: error: consecutive statements on a line must\
    \ be separated by ';'\n    return a / 2.0 * std::sqrt((b + h * h - a * a) / 4.0)\n\
    \                        ^\n                        ;\n/tmp/tmp39lwhe7e.swift:6:25:\
    \ error: expected expression\n    return a / 2.0 * std::sqrt((b + h * h - a *\
    \ a) / 4.0)\n                        ^\n/tmp/tmp39lwhe7e.swift:6:22: error: cannot\
    \ find 'std' in scope\n    return a / 2.0 * std::sqrt((b + h * h - a * a) / 4.0)\n\
    \                     ^~~\n/tmp/tmp39lwhe7e.swift:6:12: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n    return a / 2.0 *\
    \ std::sqrt((b + h * h - a * a) / 4.0)\n           ^\n           Double( )\n"
  stdout: ''
  timestamp: 1659979539
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h / 3.0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpyd5o8rxr.swift:6:25: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return Double(a * h / 3.0)\n   \
    \               ~~~~~ ^ ~~~\n/tmp/tmpyd5o8rxr.swift:6:25: note: overloads for\
    \ '/' exist with these partially matching parameter lists: (Double, Double), (Int,\
    \ Int)\n    return Double(a * h / 3.0)\n                        ^\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var a: Double\n    var h: Double\n    if a == 0 {\n        a =\
    \ 1\n    }\n    if h == 0 {\n        h = 1\n    }\n    return a * h * Double(1.0\
    \ / 3.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmppxnq7jg4.swift:8:8: error: variable 'a' used before being initialized\n\
    \    if a == 0 {\n       ^\n/tmp/tmppxnq7jg4.swift:6:9: note: variable defined\
    \ here\n    var a: Double\n        ^\n/tmp/tmppxnq7jg4.swift:14:12: error: variable\
    \ 'a' used before being initialized\n    return a * h * Double(1.0 / 3.0)\n  \
    \         ^\n/tmp/tmppxnq7jg4.swift:6:9: note: variable defined here\n    var\
    \ a: Double\n        ^\n/tmp/tmppxnq7jg4.swift:11:8: error: variable 'h' used\
    \ before being initialized\n    if h == 0 {\n       ^\n/tmp/tmppxnq7jg4.swift:7:9:\
    \ note: variable defined here\n    var h: Double\n        ^\n/tmp/tmppxnq7jg4.swift:14:16:\
    \ error: variable 'h' used before being initialized\n    return a * h * Double(1.0\
    \ / 3.0)\n               ^\n/tmp/tmppxnq7jg4.swift:7:9: note: variable defined\
    \ here\n    var h: Double\n        ^\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let pi = Double.pi\n    let a2 = a * a\n    let h2 = h * h\n \
    \   let p = a2 * h2 - a2\n    let q = a2 * h2\n    let r = a * a2\n    let s =\
    \ p / q\n\n    if r > 0 {\n        if s > (a2 - h2) {\n            s = a2 - h2\n\
    \        }\n\n        if s < (a2 - h2) {\n            s = 0\n        }\n    }\
    \ else {\n        if p < 0 {\n            p = -p\n        }\n\n        if q <\
    \ 0 {\n            q = -q\n        }\n\n        if q > r {\n            s = -q\
    \ / r\n        }\n\n        if s > (a2 - h2) {\n            s = a2 - h2\n    \
    \    }\n\n        if s < (a2 - h2) {\n            s = 0\n        }\n    }\n\n\
    \    return (4 * s) / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8kv_dtvr.swift:16:13: error: cannot assign to value: 's' is a 'let'\
    \ constant\n            s = a2 - h2\n            ^\n/tmp/tmp8kv_dtvr.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let s = p / q\n    ^~~\n\
    \    var\n/tmp/tmp8kv_dtvr.swift:20:13: error: cannot assign to value: 's' is\
    \ a 'let' constant\n            s = 0\n            ^\n/tmp/tmp8kv_dtvr.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let s = p / q\n    ^~~\n\
    \    var\n/tmp/tmp8kv_dtvr.swift:24:13: error: cannot assign to value: 'p' is\
    \ a 'let' constant\n            p = -p\n            ^\n/tmp/tmp8kv_dtvr.swift:9:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let p = a2 * h2 - a2\n \
    \   ^~~\n    var\n/tmp/tmp8kv_dtvr.swift:28:13: error: cannot assign to value:\
    \ 'q' is a 'let' constant\n            q = -q\n            ^\n/tmp/tmp8kv_dtvr.swift:10:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let q = a2 * h2\n    ^~~\n\
    \    var\n/tmp/tmp8kv_dtvr.swift:32:13: error: cannot assign to value: 's' is\
    \ a 'let' constant\n            s = -q / r\n            ^\n/tmp/tmp8kv_dtvr.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let s = p / q\n    ^~~\n\
    \    var\n/tmp/tmp8kv_dtvr.swift:36:13: error: cannot assign to value: 's' is\
    \ a 'let' constant\n            s = a2 - h2\n            ^\n/tmp/tmp8kv_dtvr.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let s = p / q\n    ^~~\n\
    \    var\n/tmp/tmp8kv_dtvr.swift:40:13: error: cannot assign to value: 's' is\
    \ a 'let' constant\n            s = 0\n            ^\n/tmp/tmp8kv_dtvr.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let s = p / q\n    ^~~\n\
    \    var\n/tmp/tmp8kv_dtvr.swift:44:20: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return (4 * s) / 3\n           ~~~~~~~~^~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (length(a) * h) / 2 \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpl6qv46_x.swift:6:13: error: cannot find 'length' in scope\n   \
    \ return (length(a) * h) / 2 \n            ^~~~~~\n/tmp/tmpl6qv46_x.swift:6:28:\
    \ error: no '/' candidates produce the expected contextual result type 'Double'\n\
    \    return (length(a) * h) / 2 \n                           ^\nSwift.Int:10:24:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    public static func / (lhs: Int, rhs: Int) -> Int\n                      \
    \ ^\nSwift.Int:10:24: note: '/' produces 'Int', not the expected contextual result\
    \ type 'Double'\n    public static func / (lhs: Int, rhs: Int) -> Int\n      \
    \                 ^\nSwift.BinaryInteger:14:17: note: '/' produces 'Int', not\
    \ the expected contextual result type 'Double'\n    static func / (lhs: Self,\
    \ rhs: Self) -> Self\n                ^\nSwift.Int:10:24: note: '/' produces 'Int',\
    \ not the expected contextual result type 'Double'\n    public static func / (lhs:\
    \ Int, rhs: Int) -> Int\n                       ^\nSwift.BinaryInteger:14:17:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func / (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.DurationProtocol:3:17:\
    \ note: '/' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    static func / (lhs: Self, rhs: Int) -> Self\n                ^\nSwift.Duration:8:24:\
    \ note: '/' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func / <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a / 3) * Double(h / 2) * Double((h*h-a*a) / 6)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmp0t03bmjp/tmp0t03bmjp.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06515d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06512d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06512d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06512cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0t03bmjp                        0x000055f537224257 <unavailable> + 4695

    5    libc.so.6                          0x00002b06517c5460 __libc_start_main +
    245

    6    tmp0t03bmjp                        0x000055f537223ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * (h * h) / Double(h * h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp723kid_q.swift:6:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return a * (h * h) / Double(h * h)\n\
    \             ^\n           Double(    )\n"
  stdout: ''
  timestamp: 1659979544
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let a2 = a * a\n    let h2 = h * h\n    let side1 = a2 + h2\n\
    \    let side2 = 2 * a + h2\n    return sqrt(side1 / side2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp_xh8jssc.swift:10:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(side1 / side2)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979542
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return triangle_area(a, h, h, h)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp1gtol1xw.swift:6:23: error: extra arguments at positions #3, #4\
    \ in call\n  return triangle_area(a, h, h, h)\n                      ^\n/tmp/tmp1gtol1xw.swift:5:6:\
    \ note: 'triangle_area(a:h:)' declared here\nfunc triangle_area(a: Int, h: Int)\
    \ -> Double {\n     ^\n"
  stdout: ''
  timestamp: 1659979542
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let b = 2.0 * sqrt(Double(h / a))\n    return a * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpdq5m_o68.swift:6:19: error: cannot find 'sqrt' in scope\n    let\
    \ b = 2.0 * sqrt(Double(h / a))\n                  ^~~~\n/tmp/tmpdq5m_o68.swift:7:14:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return a * b\n           ~~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659979542
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(sin(((pi) / 6) * (h * h) - (pi) / 2 * a * a))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpemmt9hyz.swift:6:19: error: cannot find 'sin' in scope\n    return\
    \ Double(sin(((pi) / 6) * (h * h) - (pi) / 2 * a * a))\n                  ^~~\n\
    /tmp/tmpemmt9hyz.swift:6:25: error: cannot find 'pi' in scope\n    return Double(sin(((pi)\
    \ / 6) * (h * h) - (pi) / 2 * a * a))\n                        ^~\n/tmp/tmpemmt9hyz.swift:6:47:\
    \ error: cannot find 'pi' in scope\n    return Double(sin(((pi) / 6) * (h * h)\
    \ - (pi) / 2 * a * a))\n                                              ^~\n"
  stdout: ''
  timestamp: 1659979543
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let w = (a + h) * (a + b + h) / 2.0\n    let area: Double = w\
    \ * h\n    \n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp9fcg90th.swift:6:28: error: cannot find 'b' in scope\n    let w\
    \ = (a + h) * (a + b + h) / 2.0\n                           ^\n/tmp/tmp9fcg90th.swift:6:13:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let w = (a\
    \ + h) * (a + b + h) / 2.0\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9fcg90th.swift:7:26:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    let\
    \ area: Double = w * h\n                       ~~^~~\n                       Double(\
    \ )\n"
  stdout: ''
  timestamp: 1659979582
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * sqrt(Double(a * a * h))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpl1_ww7sb.swift:6:16: error: cannot find 'sqrt' in scope\n    return\
    \ a * sqrt(Double(a * a * h))\n               ^~~~\n/tmp/tmpl1_ww7sb.swift:6:14:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return a * sqrt(Double(a * a * h))\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                    )\n"
  stdout: ''
  timestamp: 1659979544
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) / Double(h) * Double(h) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpew0yx3gn/tmpew0yx3gn.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1aeeb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1aeba7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1aeba7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1aeba67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpew0yx3gn                        0x00005618865a61c7 <unavailable> + 4551

    5    libc.so.6                          0x00002ab1af09c460 __libc_start_main +
    245

    6    tmpew0yx3gn                        0x00005618865a5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979544
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a, 2.0) + pow(h, 2.0))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpkiyc0zdv.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2.0) + pow(h, 2.0))\n           ^~~~\n/tmp/tmpkiyc0zdv.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h, 2.0))\n\
    \                ^~~\n/tmp/tmpkiyc0zdv.swift:6:31: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2.0) + pow(h, 2.0))\n                        \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659979545
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a * (a + h) * 0.5) / (4.0 * (h * a))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp1xxgapon.swift:6:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (a * (a + h) * 0.5) / (4.0 * (h * a))\n        \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979594
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a, 2) + pow(h * h, 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp3ciaojyh.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h * h, 2))\n           ^~~~\n/tmp/tmp3ciaojyh.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h * h, 2))\n\
    \                ^~~\n/tmp/tmp3ciaojyh.swift:6:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h * h, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979556
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(triangle_perimeter(a), 2) * h / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8pqz4qsb.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(triangle_perimeter(a), 2) * h / 2)\n           ^~~~\n/tmp/tmp8pqz4qsb.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(triangle_perimeter(a),\
    \ 2) * h / 2)\n                ^~~\n/tmp/tmp8pqz4qsb.swift:6:21: error: cannot\
    \ find 'triangle_perimeter' in scope\n    return sqrt(pow(triangle_perimeter(a),\
    \ 2) * h / 2)\n                    ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979556
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(a, 2.0) + pow(h, 2.0)) / 2.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiulvyux7.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2.0) + pow(h, 2.0)) / 2.0\n           ^~~~\n/tmp/tmpiulvyux7.swift:6:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h, 2.0))\
    \ / 2.0\n                ^~~\n/tmp/tmpiulvyux7.swift:6:31: error: cannot find\
    \ 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h, 2.0)) / 2.0\n         \
    \                     ^~~\n"
  stdout: ''
  timestamp: 1659979557
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let s = (a + b) / 2.0\n    let hw = h * w\n    let area = s *\
    \ sqrtf(hw * (h + hw - a + hw))\n    return area / (1 + area)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpnu5gjiba.swift:6:18: error: cannot find 'b' in scope\n    let s\
    \ = (a + b) / 2.0\n                 ^\n/tmp/tmpnu5gjiba.swift:7:18: error: cannot\
    \ find 'w' in scope\n    let hw = h * w\n                 ^\n/tmp/tmpnu5gjiba.swift:8:20:\
    \ error: cannot find 'sqrtf' in scope\n    let area = s * sqrtf(hw * (h + hw -\
    \ a + hw))\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1659979557
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = 0.5 * a * h\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpdtazkv6k.swift:6:20: error: binary operator '*' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    let area = 0.5 * a * h\n       \
    \        ~~~ ^ ~\n/tmp/tmpdtazkv6k.swift:6:20: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    let area = 0.5 * a\
    \ * h\n                   ^\n"
  stdout: ''
  timestamp: 1659979557
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area = Double()\n    var half_area = Double()\n    var triangle_area\
    \ = Double()\n    var one_over_a = Double()\n    var one_over_a_2 = Double()\n\
    \    for var index = 0; index < h; index += 1 {\n        one_over_a = Double(1.0)/Double(a)\n\
    \        half_area = Double(1.0) - Double(one_over_a)\n        triangle_area =\
    \ half_area * a\n        area += triangle_area\n    }\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpw5upnh2d.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var index = 0; index < h; index += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979558
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let x0 = a\n    let x1 = h\n    let x2 = h * a\n    let x3 = 3\
    \ * a * a\n    let x4 = x0 + x1 + x2 + x3\n    let a2 = x1 / x0\n    let b2 =\
    \ x2 / x1\n    let c2 = x3 / x2\n    let d = pow((a2 + b2 + c2), 1 / 3)\n    let\
    \ e1 = pow(a, 1 / 3)\n    let e2 = pow(a2, 1 / 3)\n    let e3 = pow(a2, 1 / 3)\n\
    \    let e4 = pow(x4, 1 / 3)\n    let a3 = x4 / x0\n    let b3 = x4 / x1\n   \
    \ let c3 = x4 / x2\n    let e5 = pow(b2, 1 / 3)\n    let e6 = pow(b3, 1 / 3)\n\
    \    let e7 = -(pow(c2, 1 / 3))\n    let e8 = -(pow(c3, 1 / 3))\n    let f9 =\
    \ (2 * d * e2 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f10 = (3 * d * e2 - pow(d,\
    \ 1 / 3)) * pow(e1, 1 / 3)\n    let f11 = (2 * d * e3 + pow(d, 1 / 3)) * pow(e1,\
    \ 1 / 3)\n    let f12 = (3 * d * e3 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let\
    \ f13 = (2 * d * e4 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f14 = (3 * d *\
    \ e4 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f15 = (2 * d * e5 + pow(d, 1 /\
    \ 3)) * pow(e1, 1 / 3)\n    let f16 = (3 * d * e5 + pow(d, 1 / 3)) * pow(e1, 1\
    \ / 3)\n    let f17 = (2 * d * e6 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f18\
    \ = (3 * d * e6 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f19 = (2 * d * e7 +\
    \ pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f20 = (3 * d * e7 + pow(d, 1 / 3))\
    \ * pow(e1, 1 / 3)\n    let f21 = (-2 * d * e8 + pow(d, 1 / 3)) * pow(e1, 1 /\
    \ 3)\n    let f22 = (-3 * d * e8 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f23\
    \ = (2 * d * e3 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f24 = (3 * d * e3 -\
    \ pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f25 = (2 * d * e4 + pow(d, 1 / 3))\
    \ * pow(e1, 1 / 3)\n    let f26 = (3 * d * e4 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n\
    \    let f27 = (2 * d * e5 - pow(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpc_ecctws.swift:45:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpc_ecctws.swift:14:13: error: cannot find 'pow' in scope\n    let\
    \ d = pow((a2 + b2 + c2), 1 / 3)\n            ^~~\n/tmp/tmpc_ecctws.swift:15:14:\
    \ error: cannot find 'pow' in scope\n    let e1 = pow(a, 1 / 3)\n            \
    \ ^~~\n/tmp/tmpc_ecctws.swift:16:14: error: cannot find 'pow' in scope\n    let\
    \ e2 = pow(a2, 1 / 3)\n             ^~~\n/tmp/tmpc_ecctws.swift:17:14: error:\
    \ cannot find 'pow' in scope\n    let e3 = pow(a2, 1 / 3)\n             ^~~\n\
    /tmp/tmpc_ecctws.swift:18:14: error: cannot find 'pow' in scope\n    let e4 =\
    \ pow(x4, 1 / 3)\n             ^~~\n/tmp/tmpc_ecctws.swift:22:14: error: cannot\
    \ find 'pow' in scope\n    let e5 = pow(b2, 1 / 3)\n             ^~~\n/tmp/tmpc_ecctws.swift:23:14:\
    \ error: cannot find 'pow' in scope\n    let e6 = pow(b3, 1 / 3)\n           \
    \  ^~~\n/tmp/tmpc_ecctws.swift:24:16: error: cannot find 'pow' in scope\n    let\
    \ e7 = -(pow(c2, 1 / 3))\n               ^~~\n/tmp/tmpc_ecctws.swift:25:16: error:\
    \ cannot find 'pow' in scope\n    let e8 = -(pow(c3, 1 / 3))\n               ^~~\n\
    /tmp/tmpc_ecctws.swift:26:28: error: cannot find 'pow' in scope\n    let f9 =\
    \ (2 * d * e2 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n                           ^~~\n\
    /tmp/tmpc_ecctws.swift:26:45: error: cannot find 'pow' in scope\n    let f9 =\
    \ (2 * d * e2 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n                            \
    \                ^~~\n/tmp/tmpc_ecctws.swift:27:29: error: cannot find 'pow' in\
    \ scope\n    let f10 = (3 * d * e2 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n       \
    \                     ^~~\n/tmp/tmpc_ecctws.swift:27:46: error: cannot find 'pow'\
    \ in scope\n    let f10 = (3 * d * e2 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    \
    \                                         ^~~\n/tmp/tmpc_ecctws.swift:28:29: error:\
    \ cannot find 'pow' in scope\n    let f11 = (2 * d * e3 + pow(d, 1 / 3)) * pow(e1,\
    \ 1 / 3)\n                            ^~~\n/tmp/tmpc_ecctws.swift:28:46: error:\
    \ cannot find 'pow' in scope\n    let f11 = (2 * d * e3 + pow(d, 1 / 3)) * pow(e1,\
    \ 1 / 3)\n                               "
  stdout: ''
  timestamp: 1659979558
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (sqrt(pow(a, 2.0) + pow(h - a, 2.0)) - sqrt(pow(a, 2.0)\
    \ + pow(h, 2.0))) * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpqr0jibvw.swift:6:13: error: cannot find 'sqrt' in scope\n    return\
    \ (sqrt(pow(a, 2.0) + pow(h - a, 2.0)) - sqrt(pow(a, 2.0) + pow(h, 2.0))) * 0.5\n\
    \            ^~~~\n/tmp/tmpqr0jibvw.swift:6:18: error: cannot find 'pow' in scope\n\
    \    return (sqrt(pow(a, 2.0) + pow(h - a, 2.0)) - sqrt(pow(a, 2.0) + pow(h, 2.0)))\
    \ * 0.5\n                 ^~~\n/tmp/tmpqr0jibvw.swift:6:32: error: cannot find\
    \ 'pow' in scope\n    return (sqrt(pow(a, 2.0) + pow(h - a, 2.0)) - sqrt(pow(a,\
    \ 2.0) + pow(h, 2.0))) * 0.5\n                               ^~~\n/tmp/tmpqr0jibvw.swift:6:51:\
    \ error: cannot find 'sqrt' in scope\n    return (sqrt(pow(a, 2.0) + pow(h - a,\
    \ 2.0)) - sqrt(pow(a, 2.0) + pow(h, 2.0))) * 0.5\n                           \
    \                       ^~~~\n/tmp/tmpqr0jibvw.swift:6:56: error: cannot find\
    \ 'pow' in scope\n    return (sqrt(pow(a, 2.0) + pow(h - a, 2.0)) - sqrt(pow(a,\
    \ 2.0) + pow(h, 2.0))) * 0.5\n                                               \
    \        ^~~\n/tmp/tmpqr0jibvw.swift:6:70: error: cannot find 'pow' in scope\n\
    \    return (sqrt(pow(a, 2.0) + pow(h - a, 2.0)) - sqrt(pow(a, 2.0) + pow(h, 2.0)))\
    \ * 0.5\n                                                                    \
    \ ^~~\n"
  stdout: ''
  timestamp: 1659979579
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return a * (1.0 - Double(h / 2.0))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxr9q7bn8.swift:6:32: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return a * (1.0 - Double(h / 2.0))\n\
    \                             ~ ^ ~~~\n/tmp/tmpxr9q7bn8.swift:6:32: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    return a * (1.0 - Double(h / 2.0))\n                       \
    \        ^\n/tmp/tmpxr9q7bn8.swift:6:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return a * (1.0 - Double(h / 2.0))\n\
    \           ^\n           Double( )\n"
  stdout: ''
  timestamp: 1659979560
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * pi * ((a * h) / (4.0 * sqrt((a + 4.0) * h)))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpo6qhrcb0.swift:6:18: error: cannot find 'pi' in scope\n    return\
    \ 0.5 * pi * ((a * h) / (4.0 * sqrt((a + 4.0) * h)))\n                 ^~\n/tmp/tmpo6qhrcb0.swift:6:41:\
    \ error: cannot find 'sqrt' in scope\n    return 0.5 * pi * ((a * h) / (4.0 *\
    \ sqrt((a + 4.0) * h)))\n                                        ^~~~\n/tmp/tmpo6qhrcb0.swift:6:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return 0.5\
    \ * pi * ((a * h) / (4.0 * sqrt((a + 4.0) * h)))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979643
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(pow(Double(length(a)), Double(2.0))) / Double(pow(Double(length(h)),\
    \ Double(2.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8z3rll0b.swift:6:19: error: cannot find 'pow' in scope\n    return\
    \ Double(pow(Double(length(a)), Double(2.0))) / Double(pow(Double(length(h)),\
    \ Double(2.0)))\n                  ^~~\n/tmp/tmp8z3rll0b.swift:6:30: error: cannot\
    \ find 'length' in scope\n    return Double(pow(Double(length(a)), Double(2.0)))\
    \ / Double(pow(Double(length(h)), Double(2.0)))\n                            \
    \ ^~~~~~\n/tmp/tmp8z3rll0b.swift:6:65: error: cannot find 'pow' in scope\n   \
    \ return Double(pow(Double(length(a)), Double(2.0))) / Double(pow(Double(length(h)),\
    \ Double(2.0)))\n                                                            \
    \    ^~~\n/tmp/tmp8z3rll0b.swift:6:76: error: cannot find 'length' in scope\n\
    \    return Double(pow(Double(length(a)), Double(2.0))) / Double(pow(Double(length(h)),\
    \ Double(2.0)))\n                                                            \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1659979570
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (3 * a * h) / (a + h + 2 * a * h)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpgcqw16j0.swift:6:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (3 * a * h) / (a + h + 2 * a * h)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979607
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(pow(a, 2) + pow(h - a, 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpv31dv776.swift:6:17: error: cannot find 'pow' in scope\n  return\
    \ Double(pow(a, 2) + pow(h - a, 2))\n                ^~~\n/tmp/tmpv31dv776.swift:6:29:\
    \ error: cannot find 'pow' in scope\n  return Double(pow(a, 2) + pow(h - a, 2))\n\
    \                            ^~~\n"
  stdout: ''
  timestamp: 1659979567
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return sqrt(pow(h, 2) + pow(a, 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpu6xq85fn.swift:6:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(h, 2) + pow(a, 2))\n           ^~~~\n/tmp/tmpu6xq85fn.swift:6:17: error:\
    \ cannot find 'pow' in scope\n    return sqrt(pow(h, 2) + pow(a, 2))\n       \
    \         ^~~\n/tmp/tmpu6xq85fn.swift:6:29: error: cannot find 'pow' in scope\n\
    \    return sqrt(pow(h, 2) + pow(a, 2))\n                            ^~~\n"
  stdout: ''
  timestamp: 1659979567
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(h) / Double(a) * Double(1 - Double(math.tan(Double(math.pi/a))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpnueo5dk9.swift:6:54: error: cannot find 'math' in scope\n    return\
    \ Double(h) / Double(a) * Double(1 - Double(math.tan(Double(math.pi/a))))\n  \
    \                                                   ^~~~\n/tmp/tmpnueo5dk9.swift:6:70:\
    \ error: cannot find 'math' in scope\n    return Double(h) / Double(a) * Double(1\
    \ - Double(math.tan(Double(math.pi/a))))\n                                   \
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area: Double = 0.0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    while i < h {\n        area = (a + k) * (b + j) * (c + i)\n     \
    \   area = area / 6\n        i += 1\n        k += 1\n        j += 1\n    }\n \
    \   return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0dd772h2.swift:11:27: error: cannot find 'b' in scope\n       \
    \ area = (a + k) * (b + j) * (c + i)\n                          ^\n/tmp/tmp0dd772h2.swift:11:37:\
    \ error: cannot find 'c' in scope\n        area = (a + k) * (b + j) * (c + i)\n\
    \                                    ^\n/tmp/tmp0dd772h2.swift:11:9: error: the\
    \ compiler is unable to type-check this expression in reasonable time; try breaking\
    \ up the expression into distinct sub-expressions\n        area = (a + k) * (b\
    \ + j) * (c + i)\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979612
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let r = h / 2\n    return sqrt(pow(a, 2.0) + pow(r, 2.0))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpezljzk63.swift:7:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2.0) + pow(r, 2.0))\n           ^~~~\n/tmp/tmpezljzk63.swift:7:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(r, 2.0))\n\
    \                ^~~\n/tmp/tmpezljzk63.swift:7:31: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2.0) + pow(r, 2.0))\n                        \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659979570
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = pow(Double(a), 2.0) + pow(Double(h), 2.0)\n    return\
    \ area / sqrt(Double(4 * pow(a, 2.0) + pow(a, 2.0) * h))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp05_ejqw4.swift:6:16: error: cannot find 'pow' in scope\n    let\
    \ area = pow(Double(a), 2.0) + pow(Double(h), 2.0)\n               ^~~\n/tmp/tmp05_ejqw4.swift:6:38:\
    \ error: cannot find 'pow' in scope\n    let area = pow(Double(a), 2.0) + pow(Double(h),\
    \ 2.0)\n                                     ^~~\n/tmp/tmp05_ejqw4.swift:7:19:\
    \ error: cannot find 'sqrt' in scope\n    return area / sqrt(Double(4 * pow(a,\
    \ 2.0) + pow(a, 2.0) * h))\n                  ^~~~\n/tmp/tmp05_ejqw4.swift:7:35:\
    \ error: cannot find 'pow' in scope\n    return area / sqrt(Double(4 * pow(a,\
    \ 2.0) + pow(a, 2.0) * h))\n                                  ^~~\n/tmp/tmp05_ejqw4.swift:7:49:\
    \ error: cannot find 'pow' in scope\n    return area / sqrt(Double(4 * pow(a,\
    \ 2.0) + pow(a, 2.0) * h))\n                                                ^~~\n"
  stdout: ''
  timestamp: 1659979570
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n\treturn triangle_area_2(a, b, h) / 360.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmphqeihm0z.swift:6:9: error: cannot find 'triangle_area_2' in scope\n\
    \        return triangle_area_2(a, b, h) / 360.0\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmphqeihm0z.swift:6:28: error: cannot find 'b' in scope\n        return triangle_area_2(a,\
    \ b, h) / 360.0\n                                  ^\n"
  stdout: ''
  timestamp: 1659979570
