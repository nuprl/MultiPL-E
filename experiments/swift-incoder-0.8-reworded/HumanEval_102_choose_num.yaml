name: HumanEval_102_choose_num
language: swift
prompt: "\n/// This function takes two positive numbers x and y and returns the\n\
  /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
  \ there's no such number, then the function should return -1.\n/// For example:\n\
  /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
  \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
  \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
  \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
  \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
  \ 546, y: 546) == 546)"
completions: ["    // Return number that is in the range [x, y] inclusive.\n    if\
    \ x < y {\n        return (x+y) / 2.0\n    } else {\n        return (x-y) / 2.0\n\
    \    }", "    if (x < y) { return -1 }\n    if (x == y) { return x }\n    while\
    \ x <= y {\n        if ((x % 2) == 0) { x = x + 1 }\n        else { x = x - 1\
    \ }\n    }\n    return x", '    return Int(arc4random() % (UInt32)(y - x + 1))
    + x', "    var xEven = x * x\n    var yEven = y * y\n    var xGreaterY: Int =\
    \ xEven - yEven\n    if xGreaterY > 0 {\n        return x + xGreaterY - 1\n  \
    \  } else {\n        return x - yEven\n    }", "    var low: Int\n    var high:\
    \ Int\n    \n    if x < y {\n        low = x \n        high = y\n    } else {\n\
    \        low = y\n        high = x\n    }\n    \n    if low % 2 == 0 && high %\
    \ 2 == 0 {\n        \n        if low < high {\n            return low\n      \
    \  } else {\n            return high\n        }\n    } else {\n        return\
    \ -1\n    }", "    if x < y {\n        let tmp = x\n        x = y\n        y =\
    \ tmp\n    }\n    for i in 0..<min(Int(y) - Int(x), Int(x) - Int(y) + 1) {\n \
    \       if isEven(i) {\n            return i\n        }\n    }\n    return -1",
  "    let mut v = x;\n    while v < y && v & 1 != 0 {\n        v <<= 1;\n    }\n\
    \    if v > y {\n        return -1;\n    }\n    return v;", "    var min = x\n\
    \    var max = y\n    var result = -1\n    \n    while min <= max {\n        if\
    \ min % 2 == 0 && max % 2 == 1 {\n            result = min\n            break\n\
    \        }\n        \n        min = min * 2 + 1\n        max = max * 2 + 1\n \
    \   }\n    \n    return result", "    guard x > 0 && y > 0 else {\n        print(\"\
    error: choose_num called with invalid arguments\")\n        return -1\n    }\n\
    \n    if x <= y {\n        var x = Int(x)\n        var y = Int(y)\n        while\
    \ x < y {\n            if x % 2 == 0 {\n                y -= 1\n            }\
    \ else {\n                x += 1\n            }\n        }\n        return y\n\
    \    } else {\n        var x = Int(x)\n        var y = Int(y)\n        while x\
    \ > y {\n            if x % 2 == 0 {\n                x -= 1\n            } else\
    \ {\n                y += 1\n            }\n        }\n        return x\n    }",
  "    if x > y {\n        var temp = x\n        x = y\n        y = temp\n    }\n\n\
    \    if x < y {\n        var temp = x\n        x = y\n        y = temp\n    }\n\
    \n    var max = 0\n    for num in 0...y {\n        if x % 2 == 0 {\n         \
    \   if num > max {\n                max = num\n            }\n        } else {\n\
    \            if num >= max {\n                max = num\n            }\n     \
    \   }\n        x /= 2\n    }\n\n    return max", "    var max_num = x\n    if\
    \ y > max_num {\n        max_num = y\n    }\n\n    for i in stride(from: x, to:\
    \ y, by: 2) {\n        if i % 2 == 0 {\n            return i\n        }\n    }\n\
    \n    return -1", "    if x >= y {\n        return -1\n    }\n    \n    var x_even:\
    \ Int = x % 2 == 0\n    var y_even: Int = y % 2 == 0\n    if x_even && y_even\
    \ {\n        var max_even: Int = -1\n        var x_even: Int\n        var y_even:\
    \ Int\n        \n        while x_even || y_even {\n            if x_even {\n \
    \               x_even = x // x is odd\n                y_even = y // y is odd\n\
    \            } else {\n                x_even = y // x is odd\n              \
    \  y_even = x // y is odd\n            }\n            if x_even > max_even {\n\
    \                max_even = x_even\n            }\n            if y_even > max_even\
    \ {\n                max_even = y_even\n            }\n        }\n        return\
    \ max_even\n    }\n    \n    if x > y {\n        return y\n    }\n    return x",
  "    switch {\n    case x <= y && x >= 0 && (x - y) % 2 == 0 :\n        return x\
    \ // Found a number\n    case x > y :\n        return -1\n    default:\n     \
    \   return -1 // No number in range\n    }", "    if x >= y || x < 0 {\n     \
    \   return -1\n    }\n    \n    if y == x {\n        return 0\n    }\n\n    func\
    \ choose(first: Int, second: Int) -> (Int, Int) {\n        if second < first {\n\
    \            return (first, second)\n        }\n        return (second, first)\n\
    \    }\n\n    var first = choose_num(x - 1, y)\n    if first == -1 { return -1\
    \ }\n\n    var second = choose_num(x, y - 1)\n    if second == -1 { return -1\
    \ }\n\n    if second < first { return -1 }\n\n    return (first! + second!) /\
    \ 2", "    var num = y\n    for y in 0..<x {\n        if num % 2 != 0 {\n    \
    \        break\n        }\n        num += y\n    }\n    return num", "  \n  //\
    \ x cannot be larger than y\n  if x < y { return -1\n  }\n  \n  // x cannot be\
    \ smaller than y\n  if x > y { return -1\n  }\n  \n  // x must be in the range\
    \ [y, y]\n  if x <= y { return x\n  }\n  \n  // x must be in the range [0, y-1]\n\
    \  if x < 0 { return -1\n  }\n  \n  // x must be in the range [0, y-1]\n  if x\
    \ > y { return -1\n  }\n  \n  // x must be in the range [y, y-1]\n  for i in 0..<y\
    \ {\n    if x%i == 0 {\n      return -1\n    }\n  }\n  \n  return x // x is even",
  "    if x < y {\n        return choose_num(y, x)\n    }\n    if x <= 0 || y <= 0\
    \ {\n        return -1\n    }\n    var result: Int = 0\n    var x: Int = 0\n \
    \   while x <= y {\n        x = x * 2\n        if x % 2 == 0 {\n            result\
    \ = x\n        }\n    }\n    if x > y {\n        return result\n    } else {\n\
    \        return -1\n    }", "    let even = x % 2 == 0 && y % 2 == 0\n    let\
    \ odd = x % 2 != 0 && y % 2 != 0\n\n    if even {\n        if odd { return -1}\n\
    \        return y\n    } else if odd {\n        return -1\n    }\n    return x",
  "    if x == y {\n        return x\n    }\n    if x > y {\n        return choose_num(y,\
    \ x)\n    }\n    if x == 0 {\n        return -1\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    let m = (y + x) / 2\n    if m % 2 == 0 {\n     \
    \   return m\n    } else {\n        return -1\n    }", "    var largest = Int()\n\
    \    if x > y {\n        largest = y\n    } else {\n        largest = x\n    }\n\
    \    for num in 1...largest-1 {\n        if is_even(Int64(num)) {\n          \
    \  if x == y {\n                return num\n            } else {\n           \
    \     largest = num\n            }\n        }\n    }\n    return -1", "    var\
    \ even: Int?\n\n    for i in 1..<y {\n        if let v = i {\n            if v\
    \ % 2 == 0 {\n                if let p = v.truncatingRemainder(dividingBy: 2)\
    \ {\n                    if !even?.truncatingRemainder(dividingBy: 2)?.truncatingRemainder(dividingBy:\
    \ 2) ?? 0 {\n                        if v > p && (v > x - y) || v < x && (v <\
    \ y - y) {\n                            even = v\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n\n\
    \    guard even != nil else { return -1 }\n\n    return even!", "  if x > y {\
    \ return -1 }\n  var result = -1\n  for n in 0..<(x - y + 1) {\n    result +=\
    \ 2 * n\n    if result > y {\n      return result\n    }\n  }\n  return result",
  "\t\n\t// If there's no such number\n\tif x < y {\n\t\treturn -1\n\t} else if x\
    \ == y {\n\t\treturn x\n\t} else if x == 0 || y == 0 {\n\t\treturn 0\n\t} else\
    \ {\n\t\t\n\t\tvar a : Int = 0\n\t\t\n\t\tfor _ in 0 ..< y {\n\t\t\ta += 1\n\t\
    \t}\n\t\t\n\t\tfor _ in 0 ..< x {\n\t\t\ta -= 1\n\t\t}\n\t\t\n\t\treturn a\n\t\
    }", "    assert(x >= 0, \"x should be non-negative\")\n    assert(y >= 0, \"y\
    \ should be non-negative\")\n    \n    var result = -1\n    \n    if x <= 0 {\n\
    \        result = y\n    } else {\n        result = x\n    }\n    \n    let max_num\
    \ = x + y - 1\n    if max_num / 2 != max_num {\n        var num_start = max_num\
    \ / 2\n        var num_end = max_num / 2 + 1\n        while num_start <= num_end\
    \ {\n            if num_start % 2 == 0 && num_end % 2 == 0 {\n               \
    \ if num_start > num_end {\n                    num_start -= 1\n             \
    \   }\n                if num_end > num_start {\n                    num_end -=\
    \ 1\n                }\n                let left_num_start = 2 * num_start + 1\n\
    \                let right_num_end = 2 * num_end + 1\n                if left_num_start\
    \ <= right_num_end {\n                    if left_num_start > right_num_end {\n\
    \                        num_start += 2\n                    } else {\n      \
    \                  num_end += 2\n                    }\n                }\n  \
    \          }\n            num_start += 1\n            num_end += 1\n        }\n\
    \        \n        if num_start == num_end {\n            result = num_start\n\
    \        }\n    }\n    \n    return result", "    if x == y {\n        return\
    \ -1\n    }\n    if x > y {\n        let temp = x\n        x = y\n        y =\
    \ temp\n    }\n    for i in stride(from: x, to: y, by: 2) {\n        if x % i\
    \ == 0 && y % i == 0 {\n            return i\n        }\n    }\n    return -1",
  "    if x <= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x\n\
    \        }\n        return y\n    }\n    if y % 2 == 0 {\n        return y\n \
    \   }\n    return -1", "    var num: Int = 0\n\n    for i in 0 ..< y.toInt()!\
    \ {\n        if i < (x % 2) == 0 {\n            if i % 2 == 0 {\n            \
    \    num = i\n                break\n            }\n        } else {\n       \
    \     if i == (x % 2) {\n                num = i\n                break\n    \
    \        }\n        }\n    }\n    return num", "    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n\n    var smallest: Int = x\n    var largest: Int =\
    \ y\n    var mid: Int\n\n    while smallest != largest {\n        mid = (smallest\
    \ + largest) / 2\n\n        if mid % 2 == 0 {\n            if mid < smallest {\n\
    \                smallest = mid\n            } else {\n                largest\
    \ = mid\n            }\n        } else {\n            if mid > largest {\n   \
    \             smallest = mid\n            } else {\n                largest =\
    \ mid\n            }\n        }\n    }\n\n    return smallest", "    if x >= y\
    \ {\n        let x_even = x - y % x\n        let x_odd = y - x_even\n        return\
    \ x_even + x_odd\n    }\n    if x <= y {\n        let x_even = x - y % x\n   \
    \     let x_odd = x_even - x\n        return x_even + x_odd\n    }\n    return\
    \ -1", '    return Int(ceil(sqrt(pow(x, 2.0) + pow(y, 2.0))) / 2.0)', "    \n\
    \    var x: Int = x - 1;\n    var y: Int = y - 1;\n    \n    while y >= x {\n\
    \        let m: Int = x * y + (x - y) - x;\n        if m % 2 == 0 { \n       \
    \     x = x + 1; \n        } else { \n            y = y - 1;\n        }\n    }\n\
    \    \n    return x;", "    if x > y {\n        return -1\n    } else if x < y\
    \ {\n        return (x+y-1)/2\n    } else {\n        var m = (x+y)/2\n       \
    \ for n in 0 ..< y {\n            if n % 2 == 0 {\n                m = m*n\n \
    \           }\n        }\n        return m\n    }", "    let mut x = x.clamped_to(y:\
    \ y)\n    let mut y = y.clamped_to(y: x)\n    while x >= y {\n        let mut\
    \ j = x\n        x = y\n        y = j\n    }\n    x", "    // use binary search\n\
    \    let mid = Int(Double(x + y) / 2)\n    \n    if x == mid || y == mid {\n \
    \       return mid\n    }\n    \n    guard x < mid else { return -1 }\n    \n\
    \    guard x > y else { return -1 }\n    \n    if x == mid + 1 {\n        return\
    \ mid\n    }\n    \n    if y == mid + 1 {\n        return mid\n    }\n    \n \
    \   if x <= mid {\n        return choose_num(mid, y)\n    }\n    \n    if y <=\
    \ mid {\n        return choose_num(x, mid)\n    }\n    \n    return -1", "\tif\
    \ x > y {\n\t\treturn -1\n\t}\n\n\tvar result = x\n\n\tfor {\n\t\tvar remainder\
    \ = result % y\n\t\tif remainder == 0 {\n\t\t\tbreak\n\t\t}\n\n\t\tresult = y\n\
    \t\ty /= 2\n\t}\n\n\tif y == 0 {\n\t\tresult = 1\n\t}\n\n\treturn result", " \
    \   if x < y {\n        let xMin = y - 1\n        let xMax = x + 1\n        let\
    \ yMin = xMin - 1\n        let yMax = xMax + 1\n        if xMax < yMin {\n   \
    \         return -1\n        }\n        return (xMin + xMax) / 2\n    } else if\
    \ y < x {\n        let xMin = x - 1\n        let xMax = x + 1\n        let yMin\
    \ = xMin - 1\n        let yMax = xMax + 1\n        if yMax < xMin {\n        \
    \    return -1\n        }\n        return (yMin + yMax) / 2\n    } else {\n  \
    \      return x\n    }", "    switch x {\n    case x < y:\n        return -1\n\
    \    default:\n        switch y {\n        case x < y:\n            return -1\n\
    \        case x == y:\n            return x\n        default:\n            //\
    \ x > y\n            return (x + (y - x)) / 2\n        }\n    }", "    if x <=\
    \ y {\n        return find_max_even_bigger_than(x, y)\n    }\n    return find_max_even_smaller_than(x,\
    \ y)", "    var ans = -1\n    if x > y {\n        ans = x\n        x, y = y, x\n\
    \    }\n    if x % 2 == 0 {\n        ans = x / 2\n    }\n    if y == 0 {\n   \
    \     return x\n    }\n    \n    // Now x is even\n    \n    if x != 1 {\n   \
    \     ans = ans / 2\n        \n        // Now that x is even, y is odd\n     \
    \   \n        if y % 2 == 1 {\n            y = y + 1\n        } else {\n     \
    \       y = (y + 1) / 2\n        }\n        \n        // Repeat until y is not\
    \ even\n        \n    }\n    \n    return ans", "    // Your code here\n    var\
    \ x = x - 1\n    var y = y - 1\n    while x >= y {\n        if x % 2 == 0 {\n\
    \            x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n\
    \    }\n    while x < y {\n        if x % 2 == 0 {\n            x = x / 2\n  \
    \      } else {\n            x = x * 3 + 1\n        }\n    }\n    return x", " \
    \   if x < y {\n        if x % 2 == 0 {\n            return x\n        } else\
    \ {\n            return y\n        }\n    } else {\n        if y % 2 == 0 {\n\
    \            return y\n        } else {\n            return x\n        }\n   \
    \ }", '    return ((x + y) / 2) / 2', "    if x <= 0 || y <= 0 { return -1 }\n\
    \    var result = Int()\n    var low = Int(x)\n    var high = Int(y)\n    while\
    \ (low < high) {\n        var mid = Int(low)\n        if mid % 2 != 0 {\n    \
    \        mid = (mid + 1) * -1\n        }\n        if mid < high {\n          \
    \  low = mid\n        } else {\n            high = mid\n        }\n        result\
    \ = min(low, high, result)\n    }\n    return result", "    guard x > y else {\n\
    \        return -1\n    }\n    \n    var min_num = Int(x)\n    if y == min_num\
    \ {\n        return -1\n    }\n    \n    for num in stride(from: min_num, through:\
    \ y, by: 2) {\n        if num % 2 != 0 {\n            min_num = num\n        \
    \    break\n        }\n    }\n    \n    return min_num", "    if x < y {\n   \
    \     x, y = y, x\n    }\n    var result = Int()\n    for _ in 0..<(x+y-1)/2 {\n\
    \        let number = ((x + y) / 2) * 2 - 1\n        if number % 2 == 0 {\n  \
    \          result = number\n        }\n        y -= 1\n    }\n    return result",
  "    if x > y {\n        if x > y {\n            return x\n        }\n        return\
    \ y\n    }\n    if x == y {\n        return -1\n    }\n    if x < y {\n      \
    \  return -1\n    }\n    return (x+y)/2", "    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    if x == y {\n        return -1\n    }\n    var result: Int\n\
    \    if x % 2 == 0 && y % 2 == 0 {\n        result = (x + y) >> 1\n    } else\
    \ {\n        result = -1\n    }\n    while result > x {\n        result = result\
    \ >> 1\n    }\n    return result", "    var max_even = 0\n    \n    guard x >=\
    \ 0 && x <= y else {\n        return -1\n    }\n    \n    for number in stride(from:\
    \ x, through: y, by: 2) {\n        if number % 2 == 0 {\n            if number\
    \ > max_even {\n                max_even = number\n            }\n        }\n\
    \    }\n    \n    return max_even", "    let limit = Int(pow(2, Int(log10(y))\
    \ - Int(log10(x)) + 1))\n    var result: Int = 0\n    \n    for _ in 1...limit\
    \ {\n        let even = pow(2, result)\n        if even <= x && even <= y {\n\
    \            result = result + 1\n        }\n    }\n    \n    if result == 0 {\n\
    \        return -1\n    } else {\n        return result\n    }", "    var maxEven\
    \ = Int64(y)\n    if x > y {\n        var temp = Int64(x)\n        temp = temp\
    \ * -1\n        maxEven = temp\n    }\n    var num = 1\n    for num in 1...Int(maxEven)\
    \ {\n        if num % 2 == 0 && num > maxEven {\n            maxEven = num\n \
    \       }\n    }\n    if maxEven != Int.max {\n        return maxEven\n    } else\
    \ {\n        return -1\n    }", "    var result = -1\n    var biggest = 0\n  \
    \  for num in 0..<((x - y)...) {\n        biggest = num\n        for num in (x\
    \ - 1)..<y {\n            if ((num & 1) == 0) {\n                if ((biggest\
    \ & 1) == 0) {\n                    biggest = biggest >> 1\n                }\n\
    \                else {\n                    if ((biggest & 1) == 1) {\n     \
    \                   biggest = (biggest >> 1) ^ num\n                    }\n  \
    \              }\n            }\n        }\n    }\n    if biggest > -1 {\n   \
    \     result = biggest\n    }\n    return result", "\tlet xLow = x & -x\n\tlet\
    \ yLow = y & -x\n\tif xLow == 0 || yLow == 0 {\n\t\treturn -1\n\t}\n\tlet xHigh\
    \ = x & y\n\tlet yHigh = y & x\n\tif xHigh == 0 {\n\t\treturn yLow\n\t}\n\treturn\
    \ xHigh", "    var i = x\n    var j = y\n    var max = 0\n\n    for _ in 1...y\
    \ {\n        let z = min(i, j) + 2\n        if z == i {\n            max = i\n\
    \        }\n\n        if z > i {\n            max = z\n        }\n\n        if\
    \ max > j {\n            break\n        }\n\n        i = z\n        j += 1\n \
    \   }\n\n    return max", "\tlet upper = y + (y - x) / 2\n\tif upper >= x {\n\t\
    \treturn -1\n\t}\n\tvar result = x\n\tfor i = x + 1; i < upper; i += 2 {\n\t\t\
    if is_even(i) {\n\t\t\tif is_odd(i) {\n\t\t\t\treturn i\n\t\t\t}\n\t\t} else {\n\
    \t\t\tif is_even(i) {\n\t\t\t\treturn -1\n\t\t\t}\n\t\t}\n\t}\n\treturn result",
  "    if x < y {\n        return choose_num(y, x)\n    }\n    for n in 0..<x {\n\
    \        if n&1 == 0 {\n            return n\n        }\n    }\n    return -1",
  "    if x < y {\n        return choose_num(y, x)\n    }\n    \n    // x = y\n  \
    \  if x == y {\n        return 0\n    }\n    \n    // x is even\n    if x % 2\
    \ == 0 {\n        return x + y\n    }\n    \n    // y is even\n    if y % 2 ==\
    \ 0 {\n        return x + y\n    }\n    \n    // x is odd and y is odd\n    return\
    \ x + y", "    \n    if x < y {\n        return -1\n    }\n    var biggestEvenNum\
    \ = y\n    var firstNum = x + (y / 2)\n    while firstNum <= y && biggestEvenNum\
    \ > firstNum {\n        biggestEvenNum = biggestEvenNum + firstNum\n        firstNum\
    \ = firstNum + y\n    }\n    return biggestEvenNum", "    guard x > 0 && y > 0\
    \ else {\n        return -1\n    }\n\n    var result = x\n    var diff = y - x\n\
    \    \n    if diff > 0 {\n        result = x + diff\n    }\n    \n    while result\
    \ > y {\n        result -= 2\n    }\n    \n    return result", "    func is_even(_\
    \ n: Int) -> Bool {\n        return n % 2 == 0\n    }\n    var result: Int = 0\n\
    \    for i in 0..<(y-x+1) {\n        if !is_even(i) {\n            continue\n\
    \        }\n        if ((i + x) % 2) == 0 {\n            result = max(result,\
    \ i)\n        }\n    }\n    if result == -1 {\n        return -1\n    }\n    return\
    \ result", "    var sum = 0\n    \n    if x == y {\n        return -1\n    }\n\
    \n    while x > 0 {\n        sum += x % 2\n        x /= 2\n    }\n    while y\
    \ > 0 {\n        sum += y % 2\n        y /= 2\n    }\n    \n    if sum >= 2 {\n\
    \        sum += 2\n    }\n\n    return sum", "    var min = x\n    if y > x {\n\
    \        min = y\n    }\n    var max = x\n    if min > y {\n        max = y\n\
    \    }\n    while min <= max {\n        if min % 2 == 0 {\n            min = min\
    \ + 1\n        } else {\n            if max % 2 == 0 {\n                max =\
    \ max + 1\n            } else {\n                min = min + 1\n             \
    \   max = max + 1\n            }\n        }\n    }\n    if min > y {\n       \
    \ max = y\n    }\n    return min", "\tif x < y {\n\t\tif x == 0 {\n\t\t\treturn\
    \ y\n\t\t}\n\t\treturn choose_num(x, y - 1)\n\t}\n\tif y == 0 {\n\t\treturn x\n\
    \t}\n\treturn choose_num(x - 1, y)", "    guard x < y else { return -1 }\n   \
    \ var evenMax = x\n    var oddMax = y\n    while evenMax != 0 && oddMax != 0 {\n\
    \        guard evenMax % 2 == 0 && oddMax % 2 == 1 else {\n            return\
    \ evenMax\n        }\n        evenMax /= 2\n        oddMax /= 2\n    }\n    return\
    \ evenMax", "\tif x > y {\n\t\tvar temp = x\n\t\tx = y\n\t\ty = temp\n\t}\n\t\
    var result: Int\n\tif x % 2 == 0 && y % 2 == 0 {\n\t\tresult = x - y + 1\n\t}\
    \ else if x % 2 == 0 {\n\t\tresult = x\n\t} else if y % 2 == 0 {\n\t\tresult =\
    \ y\n\t} else {\n\t\tresult = -1\n\t}\n\treturn result", '    return (x - y) /
    2 + y', "    if x <= y {\n        let mid = x + Int(y/2)\n        if isEven(mid)\
    \ {\n            return mid\n        }\n        else {\n            if mid > x\
    \ {\n                return -1\n            }\n            else {\n          \
    \      return choose_num(x, mid)\n            }\n        }\n    }\n    else {\n\
    \        let mid = y + Int(x/2)\n        if isEven(mid) {\n            return\
    \ mid\n        }\n        else {\n            if mid > y {\n                return\
    \ -1\n            }\n            else {\n                return choose_num(mid\
    \ , y)\n            }\n        }\n    }", "    var answer = -1\n    var smaller_one\
    \ = UInt32(x)\n    var larger_one = UInt32(y)\n    var remainder = UInt32(1)\n\
    \    var temp: UInt32\n\n    while smaller != larger_one {\n        if smaller\
    \ > larger_one {\n            smaller_one += remainder\n            temp -= remainder\n\
    \            smaller = smaller_one\n            remainder = temp\n        } else\
    \ {\n            larger_one += remainder\n            temp -= remainder\n    \
    \        larger_one = larger_one\n            remainder = temp\n        }\n\n\
    \        if smaller_one % 2 == 0 && larger_one % 2 == 0 {\n            if smaller_one\
    \ < larger_one {\n                answer = smaller_one\n            } else {\n\
    \                answer = larger_one\n            }\n            break\n     \
    \   }\n\n        if smaller_one % 2 == 0 && larger_one % 2 != 0 {\n          \
    \  larger_one -= 1\n            smaller_one -= 1\n        } else if smaller_one\
    \ % 2 != 0 && larger_one % 2 == 0 {\n            smaller_one -= 1\n        } else\
    \ if smaller_one % 2 != 0 && larger_one % 2 != 0 {\n            smaller_one -=\
    \ 1\n            larger_one -= 1\n        }\n    }\n\n    return answer", "  \
    \  if x < y {\n        var z = x\n        var w = y\n    } else {\n        var\
    \ z = y\n        var w = x\n    }\n\n    for z != w {\n        if z%2 == 0 &&\
    \ w % 2 == 0 {\n            return z\n        }\n        w += z\n    }\n    return\
    \ -1", "    if x < y {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x\n        } else {\n            return y\n        }\n    } else {\n       \
    \ if x % 2 == 0 && y % 2 == 1 {\n            return x\n        } else {\n    \
    \        return y\n        }\n    }", "\tif x < y {\n\t\treturn -1\n\t}\n\t\n\t\
    // TODO: use binary search on sorted array\n\t\n\t// find the greatest odd number\
    \ between x and y\n\t\n\treturn -1", "    \n    let limit = min(max(x, y), max(x,\
    \ y)+1)\n    let start = 2\n    var x = start\n    while x >= limit {\n      \
    \  let remainder = x % 2\n        if remainder == 0 {\n            if x == start\
    \ {\n                return -1\n            } else {\n                return x\n\
    \            }\n        }\n        x = (x * 3) + 1\n    }\n    return -1", " \
    \ if y > x {\n    return -1\n  }\n\n  var num: Int = 0\n  while num < x || num\
    \ > y {\n    if num > y {\n      num += y % num\n    } else {\n      num += x\
    \ % num\n    }\n  }\n\n  return num", "    let xMax = x + (y - x + 1) % 2\n  \
    \  if x == xMax {\n        return xMax\n    }\n    return -1", "    var result\
    \ = -1\n    for _ in 0..<5 {\n        if x <= result && y <= result {\n      \
    \      return -1\n        }\n        if y > result {\n            if x % 2 ==\
    \ 0 {\n                return result // even number\n            }\n         \
    \   if x % 2 == 1 {\n                return y // odd number\n            }\n \
    \           return -1\n        }\n        if x > result {\n            if x %\
    \ 2 == 1 {\n                return result // even number\n            }\n    \
    \        if x % 2 == 0 {\n                return y // odd number\n           \
    \ }\n            return -1\n        }\n    }\n    return result", "    var even\
    \ = false\n    var min = 0\n    var max = x - 1\n    var sum = 0\n    while min\
    \ <= max {\n        sum += (min + max) / 2\n        if even {\n            if\
    \ sum >= y {\n                return sum\n            } else if sum < y {\n  \
    \              even = false\n                max = min + 1\n            } else\
    \ {\n                even = true\n                min = max + 1\n            }\n\
    \        } else {\n            if sum >= y {\n                return sum\n   \
    \         } else if sum < y {\n                even = true\n                min\
    \ = max + 1\n            } else {\n                even = false\n            \
    \    max = min + 1\n            }\n        }\n    }\n    return -1", "    if x\
    \ > y {\n        return -1\n    }\n    \n    // We use the fact that x and y are\
    \ both positive.\n    let remainder = x % y\n    if remainder == 0 {\n       \
    \ return y\n    } else {\n        return y\n    }", "    let xEven = x % 2 ==\
    \ 0\n    let yEven = y % 2 == 0\n    \n    if xEven && !yEven {\n        return\
    \ x \n    } else if yEven && !xEven {\n        return y\n    } else {\n      \
    \  if x <= y {\n            \n            // x is smaller than y\n           \
    \ let xDiv = x / (2 * 2)\n            let yDiv = y / (2 * 2)\n            \n \
    \           \n            // x is even and y is even\n            if xDiv * yDiv\
    \ == x {\n                return x\n            } else if yDiv * xDiv == x {\n\
    \                return y\n            } else {\n                return x \n \
    \           }\n            \n        } else {\n            \n            // x\
    \ is larger than y\n            let xDiv = x / (2 * 2)\n            let yDiv =\
    \ y / (2 * 2)\n            \n            \n            // y is even and x is even\n\
    \            if xDiv * yDiv == x {\n                return y\n            } else\
    \ if yDiv * xDiv == x {\n                return x\n            } else {\n    \
    \            return y\n            }\n            \n        }\n    }", "    guard\
    \ x > 0 else {\n        return -1\n    }\n    guard y > 0 else {\n        return\
    \ -1\n    }\n    let mid = Int(round(x / 2))\n    if mid == x {\n        return\
    \ -1\n    } else if mid == y {\n        return mid\n    } else if mid * 2 > x\
    \ && y != 0 {\n        return choose_num(mid, y - 1)\n    } else if mid * 2 <\
    \ x && y != 0 {\n        return choose_num(mid, y + 1)\n    } else {\n       \
    \ return mid\n    }", "    var even = x / 2\n    if x % 2 == 0 {\n        even\
    \ += y\n    }\n\n    var result: Int\n    if even > y {\n        result = even\n\
    \    } else {\n        result = y\n    }\n    return result", '    return (x <
    y ? x : y) - x', "    if x >= y {\n        return -1\n    }\n    var biggest =\
    \ y\n    for num in stride(from: x, through: y, by: 2) {\n        if num%2 !=\
    \ 0 && num > biggest%2 {\n            biggest = num\n        }\n    }\n    return\
    \ biggest", "    let result = Int(ceil(Double(x) / Double(y)))\n    let lastY\
    \ = Int(ceil(Double(y) / Double(x)))\n    if result == lastY {\n        return\
    \ -1\n    }\n    return result", "    if x > y {\n        let temp = x\n     \
    \   x = y\n        y = temp\n    }\n    \n    var max_num = -1\n    \n    var\
    \ x_remainder = x\n    var y_remainder = y\n    \n    while x_remainder >= y_remainder\
    \ {\n        \n        let divisor = x_remainder % y_remainder\n        \n   \
    \     if divisor == 0 {\n            \n            max_num = x_remainder + y_remainder\n\
    \            break\n        }\n        \n        if divisor > 0 {\n          \
    \  \n            x_remainder = x_remainder / divisor\n        }\n        else\
    \ {\n            \n            y_remainder = y_remainder / divisor\n        }\n\
    \    }\n    \n    return max_num", "    // 1. Find all the even numbers between\
    \ x and y inclusive\n    let evensX = findEvens(x: x, y: y)\n    let evensY =\
    \ findEvens(x: y, y: x)\n\n    // 2. Find the biggest even number among these\
    \ two\n    return max(evensX, evensY) ", "    if x > y {\n        swap(x, y)\n\
    \    }\n    var max_even = -1\n    for d in 2 ... x {\n        if (x % d == 0)\
    \ && (y % d == 0) {\n            let max_even = Int(x / d)\n            if max_even\
    \ > max_even {\n                max_even = max_even\n            }\n        }\n\
    \    }\n    return max_even", "    \n    guard x < y else { return -1 }\n    guard\
    \ x > y else { return -1 }\n    \n    var even = Int()\n    var odd  = Int()\n\
    \    \n    func isEven (n: Int) -> Bool {\n        return n % 2 == 0\n    }\n\
    \    \n    for i in 1..<(y - x + 1) {\n        if isEven(i) {\n            even\
    \ = i + x\n        } else {\n            odd  = i + x\n        }\n    }\n    \n\
    \    return even > odd ? even : odd", "    var result = -1\n    for i in  x ..<\
    \ y {\n        if isEven(i) {\n            result = i\n            break\n   \
    \     }\n    }\n    return result", "    // Check to see if the first number is\
    \ greater than the second number\n    if x >= y {\n        return -1\n    }\n\
    \    \n    // If the first number is less than the second number, then\n    //\
    \ the biggest even integer is the lower number.\n    if x < y {\n        return\
    \ y\n    }\n    \n    // Otherwise, if the first number is greater than the second\
    \ number, \n    // then the biggest even integer is the higher number.\n    return\
    \ x", "    let z = x ^ y\n    if z > 0 {\n        if z&1 == 0 {\n            return\
    \ x\n        } else {\n            return y\n        }\n    } else {\n       \
    \ if z & 1 == 0 {\n            return y\n        } else {\n            return\
    \ x\n        }\n    }", "    var m = 1\n    var n = y\n    while x <= n {\n  \
    \      m *= 2\n        n = m / 2\n    }\n    return n", "  if x > y {\n    swap(&x,\
    \ &y)\n  }\n  var result = Int64(-1)\n  var i = Int64(y)\n  while i >= x {\n \
    \   if i & 1 == 0 {\n      result = i\n      break\n    }\n    i /= 2\n  }\n \
    \ return result", "    \n    if x == y {\n        return -1\n    }\n    if x %\
    \ 2 != 0 || y % 2 != 0 {\n        return -1\n    }\n    \n    let max = (x + y\
    \ - 1) / 2\n    let min = x + y\n    \n    for _ in 0 ..< max {\n        if min\
    \ % 2 == 0 {\n            return min / 2\n        }\n        min = min / 2\n \
    \   }\n    \n    return -1", '    // TODO: Add your code', "    if x == y {\n\
    \        return x\n    }\n    if x > y {\n        if x % 2 == 0 {\n          \
    \  return choose_num(y, x)\n        } else {\n            return choose_num(y,\
    \ x + 1)\n        }\n    }\n    if y % 2 == 0 {\n        return y\n    } else\
    \ {\n        return choose_num(y + 1, x)\n    }", "\tlet biggest = x + y\n\tlet\
    \ evens = (x + y) / 2\n\n\tif ((biggest % 2) == 0) || ((evens % 2) == 0) {\n\t\
    \treturn evens\n\t} else {\n\t\treturn -1\n\t}", "    var result = 0\n    for\
    \ number in 2...y {\n        if number > x {\n            return -1\n        }\n\
    \        for _ in 2...number {\n            if ((x % number) == 0) {\n       \
    \         return number\n            }\n        }\n    }\n    return -1", "  \
    \  let start = max(x, y)\n    let end = min(x, y)\n    var num: Int?\n    if start\
    \ < end {\n        var counter: Int = 0\n        while (counter < end) {\n   \
    \         let value = start + counter\n            if value%2 == 0 {\n       \
    \         if num == nil {\n                    num = value\n                }\
    \ else {\n                    num = max(value, num)!\n                }\n    \
    \            counter += 1\n            }\n        }\n    } else {\n        num\
    \ = 1\n    }\n    return num!", "    guard x < y, x != 0 || y < x else {\n   \
    \     return -1\n    }\n    guard x > y, y > x else {\n        return x\n    }\n\
    \    var max: Int\n    var min = y\n    min = min > x ? x : min\n    max = max\
    \ > y ? y : max\n    while min < max {\n        let middle = min + ((max - min)\
    \ / 2)\n        if middle % 2 == 0 {\n            min = middle + 1\n        }\
    \ else {\n            max = middle\n        }\n    }\n    return max", "    \n\
    \    // If x or y are negative, then return -1.\n    if x < 0 || y < 0 {\n   \
    \     return -1\n    }\n\n    // Start from largest number in the range.\n   \
    \ var largest = y\n\n    // Iterate from large to small.\n    for i in x ..< y\
    \ {\n        // If i is even, then the biggest even number is i/2.\n        //\
    \ Otherwise the biggest even number is 3*i+1.\n        if i % 2 == 0 {\n     \
    \       largest = i/2\n        } else {\n            largest = 3*i+1\n       \
    \ }\n\n        // Break once we've found a number that is in the range.\n    \
    \    if largest > x {\n            break\n        }\n    }\n\n    // Return found\
    \ number.\n    return largest", "    var biggest = 0\n    \n    for n in 0..<(x-y)\
    \ {\n        if ((n - x) % 2 != 0 || (y - n) % 2 != 0) {\n            biggest\
    \ = n * 2 > biggest ? n * 2 : biggest\n        }\n    }\n    \n    return biggest",
  "    \n    if x >= y {\n        return -1\n    }\n\n    if x <= 2 {\n        return\
    \ -1\n    }\n\n    if x <= x {\n        return x\n    }\n\n    if x <= y {\n \
    \       return y\n    }\n\n    var even = 1\n    var odd = 0\n\n    for i in x\
    \ ..< y {\n        if i % 2 == 0 {\n            even = even + 1\n        } else\
    \ {\n            odd = odd + 1 \n        }\n    }\n\n    if even == x {\n    \
    \    return even\n    }\n\n    return odd", "    if x <= y {\n        // The second\
    \ value must be larger than the first one\n        return -1\n    }\n    \n  \
    \  var low: Int\n    var high: Int\n    \n    if x % 2 == 0 {\n        low = x\n\
    \        high = y\n    } else {\n        low = y\n        high = x\n    }\n  \
    \  \n    var next: Int\n    var index: Int\n    var current: Int\n    \n    if\
    \ low < high {\n        next = (low + high) / 2\n        index = next - 1\n  \
    \      current = low\n        \n        while next > 0 {\n            if next\
    \ % 2 == 0 {\n                if current == next {\n                    return\
    \ current\n                }\n                \n                current = next\n\
    \                next /= 2\n            } else {\n                next /= 2\n\
    \            }\n        }\n    }\n    \n    if current == next {\n        return\
    \ current\n    }\n    \n    return -1", "    var result: Int\n    for i in 0..<min(Int(x),\
    \ Int(y)) {\n        if (x-i)*(y-i)>0 { break }\n        result = i-(x+y)/2\n\
    \    }\n    return result", "    // TODO: implement this\n    return -1", "  \
    \  var max: Int\n    var min: Int\n\n    if x > y {\n        max = x\n       \
    \ min = y\n    } else {\n        max = y\n        min = x\n    }\n    if min %\
    \ 2 == 0 {\n        // Even min\n        return max\n    }\n    if max % 2 ==\
    \ 0 {\n        // Even max\n        return min\n    }\n    // Odd min or max\n\
    \    var maxEven: Int = max / 2\n    var minEven: Int = min / 2\n    var ret:\
    \ Int = -1\n\n    while maxEven > min {\n        if maxEven % 2 == 0 {\n     \
    \       if minEven % 2 == 0 {\n                return maxEven\n            } else\
    \ if minEven % 2 != 0 {\n                return maxEven + min\n            }\n\
    \        } else if maxEven % 2 != 0 {\n            if minEven % 2 == 0 {\n   \
    \             return maxEven + min\n            }\n        }\n        maxEven\
    \ /= 2\n        minEven /= 2\n    }\n    return ret", "\t\n\tlet range = (min(y,\
    \ x) - max(x, y) + 1)\n\t\n\tfor _ in 0 ..< range / 2 {\n\t\tif ((x % 2) == 0\
    \ && (y % 2) == 0) {\n\t\t\treturn x\n\t\t}\n\t\t\n\t\tif ((x % 2) == 0 && (y\
    \ % 2) != 0) {\n\t\t\treturn y\n\t\t}\n\t\t\n\t\tif ((x % 2) != 0 && (y % 2) ==\
    \ 0) {\n\t\t\treturn y\n\t\t}\n\t\t\n\t\tif ((x % 2) != 0 && (y % 2) != 0) {\n\
    \t\t\treturn x\n\t\t}\n\t}\n\t\n\treturn -1", "    var lower = x\n    var upper\
    \ = y\n    var largest: Int?\n\n    // special case when X is the lower bound\n\
    \    if x == y {\n        return -1\n    }\n\n    // special case when X is the\
    \ upper bound\n    if x == x {\n        return -1\n    }\n\n    // special case\
    \ when Y is the lower bound\n    if y == y {\n        return -1\n    }\n\n   \
    \ // special case when Y is the upper bound\n    if y == x {\n        return -1\n\
    \    }\n\n    if x <= y {\n        lower = x\n        upper = y\n    }\n\n   \
    \ if x <= x {\n        upper = x\n    }\n\n    while lower < upper {\n       \
    \ let mid = lower + ((upper - lower) / 2)\n        \n        if mid % 2 == 0 {\n\
    \            if mid > largest! {\n                largest = mid\n            }\n\
    \        } else {\n            if mid < largest {\n                largest = mid\n\
    \            }\n        }\n\n        if mid == x {\n            upper = mid\n\
    \        } else {\n            lower = mid + 1\n        }\n    }\n    \n    if\
    \ largest == -1 {\n        return -1\n    }\n    \n    return largest!", "   \
    \ if x < 0 || y < 0 {\n        return -1\n    }\n    \n    var x = Int64(x - 1)\n\
    \    var y = Int64(y - 1)\n    \n    while x > y {\n        x -= Int64(1)\n  \
    \      y += Int64(1)\n    }\n    \n    return Int64(x / y)", "    let max_num\
    \ = max(min(x, y), min(y, x))\n    let min_num = min(x, y)\n    for i in stride(from:\
    \ min_num, to: max_num, by: 2) {\n        if i % 2 == 0 {\n            return\
    \ i\n        }\n    }\n    return -1", "    var maxValue = -1\n    for var i =\
    \ x; i < y; i++ {\n        if i % 2 == 0 {\n            maxValue = i\n       \
    \ }\n    }\n    return maxValue", "    if x < y {\n        return y\n    } else\
    \ if x > y {\n        return x\n    } else {\n        if x % 2 == 0 {\n      \
    \      return y\n        } else {\n            return x\n        }\n    }", " \
    \   \n    // The code below is the same as below\n    // return min(x, y) // For\
    \ Swift >= 2.0\n    \n    // The following code is the same as\n    // return\
    \ min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code is equivalent\
    \ to\n    // return x._Int...y._Int // For Swift < 2.0\n    \n    // The following\
    \ code is the same as\n    // return min(x._Int, y._Int) // For Swift < 2.0\n\
    \    \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // ", "    let limit = min(x, y)\n    for num in 0 ..< limit {\n        if ((num\
    \ + 1) & 1) == 0 {\n            return num\n        }\n    }\n    return -1",
  "    // your code here\n    if x < 0 || y < 0 {\n        return -1\n    }\n    \n\
    \    var result = -1\n    if x > y {\n        for i in 0..x {\n            if\
    \ i % 2 == 0 {\n                result = i\n                break\n          \
    \  }\n        }\n    } else {\n        for i in 0..y {\n            if i % 2 ==\
    \ 0 {\n                result = i\n                break\n            }\n    \
    \    }\n    }\n    return result", "    var result = -1\n    for i in stride(from:\
    \ x, through: y, by: 2) {\n        if ((result | i) != result) {\n           \
    \ result = result | i\n        }\n    }\n    return result", "    if x < y {\n\
    \        var t = x\n        x = y\n        y = t\n    }\n    if x == y {\n   \
    \     return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        var n = x *\
    \ 2 + y\n        if n >= x {\n            n /= 2\n        } else {\n         \
    \   n = n - x\n        }\n        if n >= y {\n            n /= 2\n        } else\
    \ {\n            n = n - y\n        }\n        return Int(n)\n    }\n    var m\
    \ = Int(x) / 2\n    if m > y {\n        var t = x\n        x = y\n        y =\
    \ t\n    }\n    if m == y {\n        return m\n    }\n    if m % 2 == 0 && y %\
    \ 2 == 0 {\n        var n = m / 2 + y\n        if n >= x {\n            n /= 2\n\
    \        } else {\n            n = n - x\n        }\n        if n >= y {\n   \
    \         n /= 2\n        } else {\n            n = n - y\n        }\n       \
    \ return Int(n)\n    }\n    var n = Int(x) / 2\n    if n > y {\n        var t\
    \ = x\n        x = y\n        y = t\n    }\n    if n >= y {\n        var n = x\
    \ - y\n        if n >= x {\n            n /= 2\n        } else {\n           \
    \ n = n - x\n        }\n        return Int(n)\n    }\n    return -1", "\tlet biggest\
    \ = max(x: y, y: x)\n\t\n\tfor i in 0..<biggest/2 {\n\t\tif isprime(x+i) && isprime(y-i)\
    \ {\n\t\t\treturn i+x\n\t\t}\n\t}\n\t\n\treturn -1", "    var res: Int = -1\n\n\
    \    for i in 0..<(x-y) {\n        if ((i * y) % 2 == 0) {\n            res =\
    \ i\n            break\n        }\n    }\n\n    return res", "    var result =\
    \ -1\n    var low = x\n    var high = y\n    while low < high {\n        if ((low\
    \ % 2) == 0) {\n            if ((high % 2) != 0) {\n                low++\n  \
    \          } else {\n                high--\n            }\n        } else {\n\
    \            if ((high % 2) == 0) {\n                low++\n            } else\
    \ {\n                high--\n            }\n        }\n    }\n    return result",
  "    var min_x = abs(x) // absolute value of x\n    var min_y = abs(y) // absolute\
    \ value of y\n    var max_x = Int32(min_x + 1) // +1 because we want the even\
    \ number\n    var max_y = Int32(min_y + 1) // +1 because we want the even number\n\
    \n    if max_x > max_y { // biggest number above the other two numbers is the\
    \ biggest even number\n        max_x = max_y - 1\n    }\n\n    if min_x > min_y\
    \ { // if the smallest number above the other two numbers is bigger than the smallest\
    \ even number, then we\n        min_y = min_x - 1\n    }\n\n    var result = Int32(min_x\
    \ + min_y) // compute the sum\n    if min_x == max_x { // if x equals y, then\
    \ result is even\n        result = -1\n    }\n    return result", "    let max\
    \ = (x - y) + 1\n    if max % 2 == 0 {\n        return max / 2\n    } else {\n\
    \        return max\n    }", "    // check base case\n    if x >= y {\n      \
    \  return -1\n    }\n\n    // check even case\n    if x <= y {\n        return\
    \ x \n    }\n\n    // check odd case\n    let even = Int(x / 2)\n    let odd =\
    \ Int(x % 2)\n\n    if even * 2 == x {\n        return even\n    }\n\n    return\
    \ odd > y ? odd : y", "    if x < y {\n        // x is less than y, so we can\
    \ go left\n        if x > 0 {\n            // x is more than 0, so we need to\
    \ choose the biggest even number \n            // greater than x, which is x.\n\
    \            if x % 2 != 0 {\n                return x\n            }\n      \
    \  } else {\n            // x is 0, so we need to choose the biggest even number\
    \ greater than 0\n            if x % 2 == 0 {\n                return x\n    \
    \        }\n        }\n    } else {\n        // y is less than x, so we can go\
    \ right\n        if y > 0 {\n            // y is more than 0, so we need to choose\
    \ the biggest even number \n            // greater than y, which is y.\n     \
    \       if y % 2 != 0 {\n                return y\n            }\n        } else\
    \ {\n            // y is 0, so we need to choose the biggest even number greater\
    \ than 0\n            if y % 2 == 0 {\n                return y\n            }\n\
    \        }\n    }\n    return -1", "    // x should be smaller than y so that\
    \ x % 2 != 0\n    if x < y {\n        (x, y) = (y, x)\n    }\n    \n    // x should\
    \ be the biggest even number that is smaller than y\n    var biggest_even: Int\n\
    \    for num in 0..<x {\n        if num & 1 == 0 && num > y {\n            biggest_even\
    \ = num\n        }\n    }\n\n    // biggest_even should < x so that biggest_even\
    \ % 2 == 0\n    if biggest_even < x {\n        biggest_even = x\n    }\n    \n\
    \    // x should be the biggest odd number that is smaller than y\n    for num\
    \ in 0..<x {\n        if num & 1 == 1 && num > y {\n            biggest_even =\
    \ num\n        }\n    }\n\n    // biggest_even should < x so that biggest_even\
    \ % 2 == 1\n    if biggest_even < x {\n        biggest_even = x\n    }\n    \n\
    \    return biggest_even", "    if x == y {\n        return -1\n    }\n    if\
    \ x > y {\n        var temp = x\n        x = y\n        y = temp\n    }\n    if\
    \ x%2 == 0 {\n        return x + choose_num(x+1, y)\n    }\n    else {\n     \
    \   return x + choose_num(x, y+1)\n    }", "\tlet max_range: Int\n\tlet range:\
    \ Int\n\t\n\tmax_range = max(x, y) - (max(x, y) % (x - y + 1))\n\trange = x -\
    \ y\n\t\n\tfor i in 1..<max_range {\n\t\tif i % (x - y + 1) == 0 {\n\t\t\treturn\
    \ i\n\t\t}\n\t\t\n\t\tif range <= i {\n\t\t\treturn -1\n\t\t}\n\t\t\n\t\trange\
    \ = range - i\n\t}\n\t\n\treturn -1", "    if (x < 0 || y < 0 || x > y || y ==\
    \ 0) {\n        return -1\n    }\n\n    var x: UInt32 = UInt32(x)\n    var y:\
    \ UInt32 = UInt32(y)\n    \n    var max_even: UInt32 = 0\n\n    while x < y {\n\
    \        if x % 2 == 0 {\n            max_even = UInt32(max_even) + UInt32(x)\n\
    \        }\n\n        x += 1\n    }\n\n    return UInt32(max_even)", "    if x\
    \ <= 0 || y <= 0 {\n        return -1\n    }\n    var even = y\n    if even %\
    \ 2 == 0 {\n        even = even - 1\n    }\n    var biggest = x + 1\n    if even\
    \ > biggest {\n        biggest = even\n    }\n    while even > 0 {\n        biggest\
    \ = even + (biggest * 2)\n        even = biggest % even\n    }\n    return biggest",
  "    if (x % 2 == 0 && y % 2 == 0) || (x < y && y % 2 == 0) {\n        return x\n\
    \    }\n    return -1", "    // TODO (maybe): replace this with binary search\n\
    \    var biggest_even = 1\n    var biggest_odd = x\n    while biggest_even < biggest_odd\
    \ && biggest_even < y {\n        if biggest_even % 2 == 0 {\n            biggest_even\
    \ = biggest_even + 1\n        } else {\n            biggest_even = biggest_even\
    \ + 1\n        }\n    }\n\n    while biggest_odd < biggest_even && biggest_odd\
    \ < y {\n        if biggest_odd % 2 == 0 {\n            biggest_odd = biggest_odd\
    \ + 2\n        } else {\n            biggest_odd = biggest_odd + 3\n        }\n\
    \    }\n    if biggest_even >= biggest_odd {\n        return biggest_even\n  \
    \  } else {\n        return biggest_odd\n    }", "    if x <= y {\n        let\
    \ mid = (x + y) / 2\n        if mid % 2 == 0 {\n            return mid\n     \
    \   } else {\n            return choose_num(mid, y)\n        }\n    } else {\n\
    \        let mid = (x + y) / 2\n        if mid % 2 == 0 {\n            return\
    \ choose_num(x, mid)\n        } else {\n            return mid\n        }\n  \
    \  }", '    return min(x, y)', "    var a: Int\n    if x > y {\n        a = y\n\
    \    } else {\n        a = x\n    }\n    while a > 1 {\n        a /= 2\n     \
    \   if a % 2 == 0 {\n            return a\n        }\n    }\n    return -1", '    return
    (x + (y - x) / 2) & (y - x + 1)', "    \n    var a: Int = Int(floor((x - y) /\
    \ 2))\n    \n    while a == x || a == y {\n        a += 1\n    }\n    \n    return\
    \ a", "    \n    func gcd(a: Int, b: Int) -> Int {\n        return b == 0 ? a\
    \ : gcd(b, a % b)\n    }\n    \n    return gcd(x, y) > 0 ? y : -1", "    var x\
    \ = Int(x)\n    var y = Int(y)\n    if x >= y {\n        (x, y) = (y, x)\n   \
    \ }\n    \n    var even = 1\n    var high = 1\n    while even <= y {\n       \
    \ if x % 2 == 0 {\n            x /= 2\n            even += 2\n        } else {\n\
    \            x /= 2\n            even *= 2\n        }\n        high = even * high\n\
    \    }\n    \n    if x >= y {\n        (x, y) = (y, x)\n    }\n    \n    return\
    \ high", "    \n    var min = x\n    var max = y\n    \n    for _ in 0 ..< 2 {\n\
    \        min = max\n        \n        var tmp: Int = -1\n        \n        for\
    \ _ in 0 ..< x {\n            tmp = min + (2 * max - min) / 2\n            if\
    \ tmp % 2 == 0 {\n                min = tmp\n            }\n        }\n      \
    \  \n        for _ in 0 ..< y {\n            tmp = max - (2 * max - min) / 2\n\
    \            if tmp % 2 == 0 {\n                max = tmp\n            }\n   \
    \     }\n    }\n    \n    return min", "    if x == y { return x }\n    if x <=\
    \ y {\n        var smaller, larger, result: Int\n        smaller = x \n      \
    \  larger = y\n        result = smaller\n        while larger - smaller >= 2 {\n\
    \            if larger % smaller == 0 {\n                larger = smaller * larger\n\
    \            } else {\n                smaller = smaller + 1 \n            }\n\
    \        }\n        return larger\n    } else {\n        var smaller, larger,\
    \ result: Int\n        smaller = y \n        larger = x\n        result = smaller\n\
    \        while larger - smaller >= 2 {\n            if smaller % larger == 0 {\n\
    \                larger = smaller * larger\n            } else {\n           \
    \     smaller = smaller + 1 \n            }\n        }\n        return larger\n\
    \    }", "    var even: Int = 0\n    var n: Int = 0\n    for n in (x...y) {\n\
    \        if even > 0 || n % 2 != 0 {\n            even = even + n\n        }\n\
    \        if even > x {\n            break\n        }\n    }\n    return even ==\
    \ x ? n : -1", "\tif x <= y {\n\t\treturn choose_num_small(x, y)\n\t}\n\treturn\
    \ choose_num_large(x, y)", "    guard x < y else { return -1 }\n    guard x >\
    \ 0 && y > 0 else {\n        return -1\n    }\n\n    // If both x and y are positive\n\
    \    if x >= y {\n        // Divide x by 2 and check if it's even\n        let\
    \ even = (x / 2) * 2\n        return even % 2 == 0 ? even : -1\n    }\n\n    //\
    \ If y is a power of 2\n    if y != 1 && y != Int.max / 2 {\n        // Divide\
    \ y by 2 and check if it's even\n        let even = (y / 2) * 2\n        return\
    \ even % 2 == 0 ? even : -1\n    }\n\n    // If both x and y are power of 2\n\
    \    return -1", "    if x < 0 || y < 0 {\n        return -1\n    }\n    if x\
    \ >= y {\n        return -1\n    }\n    var ans = x\n    for var i = 1; i < y;\
    \ i++ {\n        if ((ans % 2) == 0) {\n            ans /= 2\n        } else {\n\
    \            return ans\n        }\n    }\n    return ans", "    guard (x > 0\
    \ && y > 0) else { return -1 }\n    return Int(ceil(log(abs((x * y) - Int64(x\
    \ * y)), 2))) + 1", "\tif x != Int.max && y != Int.max {\n\t\tif x > y {\n\t\t\
    \tif y % 2 == 0 {\n\t\t\t\treturn x\n\t\t\t} else {\n\t\t\t\treturn y\n\t\t\t\
    }\n\t\t} else if x < y {\n\t\t\tif x % 2 == 0 {\n\t\t\t\treturn y\n\t\t\t} else\
    \ {\n\t\t\t\treturn x\n\t\t\t}\n\t\t} else {\n\t\t\tif x % 2 == 0 {\n\t\t\t\t\
    return y\n\t\t\t} else {\n\t\t\t\treturn x\n\t\t\t}\n\t\t}\n\t}\n\treturn -1",
  "    if x < y {\n        return -1\n    }\n    var num = x\n    if x > y {\n   \
    \     num = y\n    }\n    for i in 2..(num / 2) {\n        if num % i == 0 {\n\
    \            return i\n        }\n    }\n    return -1", "\tvar ans = -1\n\n\t\
    // Check whether there's any even number\n\t// between x and y\n\tfor i := x -\
    \ 1; i < y; i++ {\n\t\tif i % 2 == 0 {\n\t\t\tans = i\n\t\t\tbreak\n\t\t}\n\t\
    }\n\t\n\t// If there's no even number, return -1\n\tif ans == -1 {\n\t\treturn\
    \ -1\n\t}\n\n\treturn ans", '    return Int(ceil(x/2.0) * 2.0) + Int(ceil(y/2.0)
    * 2.0) % 2', "    guard x > y else {\n        return -1\n    }\n    var ans =\
    \ x\n    for number in stride(from: x, to: y, by: 2) {\n        if number % 2\
    \ == 0 {\n            ans = number\n        }\n    }\n    return ans", "    //\
    \ Write code here\n    var even = 0\n    var odd = 0\n    while even + odd !=\
    \ x {\n        if ((x - even) * (x - even) + 2 * (y - odd) * (y - odd) > (x -\
    \ odd) * (x - odd) + 2 * (y - even) * (y - even))\n        {\n            even++\n\
    \        }\n        else\n        {\n            odd++\n        }\n    }\n   \
    \ return even", "    if x <= y {\n        return -1\n    }\n    var evenNums =\
    \ Set<Int>()\n    for i in 0..<Int(x/2) {\n        if x % 2 == 0 && y % 2 == 0\
    \ && x < y {\n            evenNums.insert(Int(i) * Int(i)! + Int(i)*Int(y/2)!)\n\
    \        }\n    }\n    if evenNums.contains(Int(y)) {\n        return Int(y)\n\
    \    } else {\n        return -1\n    }", "    if x <= 0 || y <= 0 { return -1\
    \ }\n    if x >= y { return -1 }\n    var z: Int = 0\n    var a = 0\n    var b\
    \ = 0\n    for _ in 0..<(x-y) { a += 1; b += 1; z += (a+b+2)%4 }\n    if z ==\
    \ 0 { return -1 }\n    return z", "    for i in x ..< y {\n        if (i % 2)\
    \ == 0 {\n            return i\n        }\n    }\n    return -1", '    return
    Int((x * y) / 2)', "    let result = Int((x - y) / 2)\n    if result >= y {\n\
    \        return -1\n    } else if result <= x {\n        return -1\n    }\n  \
    \  return result", "    for i in 0..<abs(y - x) {\n        if x != 0 {\n     \
    \       let mid = (x + y) / 2;\n            guard x > mid && y > mid else {\n\
    \                continue;\n            }\n            if x > mid && y > mid {\n\
    \                let result = choose_num(mid, y);\n                if result !=\
    \ -1 {\n                    return result;\n                }\n            }\n\
    \            if x < mid && y > mid {\n                let result = choose_num(x,\
    \ mid);\n                if result != -1 {\n                    return result;\n\
    \                }\n            }\n        } else {\n            return -1;\n\
    \        }\n    }\n    return x;", "    if x < y {\n        let min = x\n    \
    \    let max = y\n    } else {\n        let min = y\n        let max = x\n   \
    \ }\n\n    if min % 2 == 0 && max % 2 == 1 {\n        return min / 2\n    } else\
    \ {\n        return -1\n    }", "    let smallest = x < y ? x : y\n    let largest\
    \ = x > y ? x : y\n    while true {\n        if smallest % 2 == 0 {\n        \
    \    return smallest\n        }\n        if largest % 2 == 0 {\n            return\
    \ largest\n        }\n        smallest += 2\n        largest += 2\n    }\n   \
    \ return -1", "\t\n\tguard x > y else {\n\t\treturn -1\n\t}\n\t\n\t\n\tlet num\
    \ = (x + y) / 2\n\t\n\t\n\tguard num > 0 && num <= y else {\n\t\treturn -1\n\t\
    }\n\t\n\treturn num", "    if x < y {\n        var temp = x\n        x = y\n \
    \       y = temp\n    }\n\n    for _ in 0 ..< y {\n        if x % 2 == 0 {\n \
    \           return x\n        }\n        x /= 2\n    }\n    return -1", "    \n\
    \    var even = y % 2 == 0\n    if even {\n        if y > x {\n            return\
    \ -1\n        }\n    }\n    \n    var max_num = y\n    \n    // We start from\
    \ the last odd number (y) and iterate until we get a \n    // number between x\
    \ and the next odd number (y+1)\n    for i in (y + 1) ... y {\n        if i %\
    \ 2 == 0 {\n            continue\n        }\n        \n        if x >= i {\n \
    \           if even {\n                return -1\n            } else {\n     \
    \           return i\n            }\n        } else {\n            max_num = i\n\
    \            even = !even\n        }\n    }\n    \n    return -1", "    \n   \
    \ // TODO: return -1\n    if x > y {\n        guard x <= y else {\n          \
    \  return 0\n        }\n        let low = y\n        let high = x\n        for\
    \ n in stride(from: low, to: high, by: 1) {\n            if n % 2 != 0 {\n   \
    \             return n\n            }\n        }\n        return -1\n    } else\
    \ {\n        guard x >= y else {\n            return 0\n        }\n        let\
    \ low = x\n        let high = y\n        for n in stride(from: low, to: high,\
    \ by: 1) {\n            if n % 2 != 0 {\n                return n\n          \
    \  }\n        }\n        return -1\n    }", "    if x > y {\n        swap_num(x,\
    \ y)\n    }\n    var result = Int(0)\n    var remainder = Int(0)\n    for _ in\
    \ 0..((y - x) / 2) {\n        remainder = remainder + 2\n        if remainder\
    \ > x {\n            return -1\n        }\n        result = result + 2\n    }\n\
    \    if result == 0 {\n        return 1\n    }\n    return result", "    if x\
    \ <= y {\n        return -1\n    }\n\n    for i in 1..<(y-x) {\n        if x%i\
    \ == 0 && i%2 == 0 {\n            return i\n        }\n    }\n\n    return -1",
  "    for let i in  stride(from: x, to: y, by: 2) {\n        let num = i / 2\n  \
    \      if num % 2 == 0 {\n            return num\n        }\n    }\n    return\
    \ -1", "    var biggest = y\n    if x <= y {\n        while x > y {\n        \
    \    biggest--\n            if biggest < x {\n                break\n        \
    \    }\n            x--\n        }\n    } else {\n        while x < y {\n    \
    \        biggest++\n            if biggest > y {\n                break\n    \
    \        }\n            x++\n        }\n    }\n    return biggest", "    // x\
    \ is greater than y\n    if x > y {\n        return -1\n    }\n\n    // x is smaller\
    \ than y\n    if x < y {\n        return -1\n    }\n\n    // x and y are both\
    \ even\n    if x == y {\n        return -1\n    }\n\n    // x is even\n    if\
    \ x % 2 == 0 {\n        return x + 1\n    }\n\n    // y is even\n    if y % 2\
    \ == 0 {\n        return y + 1\n    }\n\n    // x and y are odd\n    let div =\
    \ x % y\n    if div == 0 {\n        return x + 1\n    }\n    return y + 1", " \
    \   // Initialize max to largest positive number that can be \n    // represented\
    \ by an Int.\n    let max = Int(IntMax)\n\n    // Initialize result to -1\n  \
    \  var result = -1\n\n    // Initialize x to y if x <= y\n    if (x <= y) {\n\
    \        max = x\n    }\n\n    // Initialize x to y if x > y\n    if x > y {\n\
    \        max = y\n    }\n\n    // Loop from min to max to find an even number\n\
    \    for num in min..max {\n        // Return num if even\n        if num % 2\
    \ == 0 {\n            result = num\n            break\n        }\n    }\n\n  \
    \  return result", "    if x > y {\n        guard x > 0 else { return -1 }\n \
    \       return -1\n    }\n    let min = (x < y ? x : y)\n    let max = ((x > y\
    \ ? x : y) - min)\n    return (min + (max-min) / 2)", "    \n    // Make sure\
    \ x and y are positive\n    if x < 0 || y < 0 {\n        return -1\n    }\n  \
    \  \n    // Find the smallest number that is greater than or equal to x and \n\
    \    // less than or equal to y\n    let result = x + 1\n    \n    // If x is\
    \ bigger than y, then we should return the smallest number \n    // that is greater\
    \ than or equal to x\n    if x > y {\n        result = x\n    }\n    \n    //\
    \ If y is bigger than x, then we should return the smallest number \n    // that\
    \ is less than or equal to y\n    if y > x {\n        result = y\n    }\n    \n\
    \    return result", "    if x > y {\n        let tmp = x\n        x = y\n   \
    \     y = tmp\n    }\n\n    if x == 0 || y == 0 {\n        return -1\n    }\n\n\
    \    var evenNums = [Int]()\n    var oddNums = [Int]()\n\n    for n in stride(from:\
    \ x, through: y, by: 2) {\n        if n % 2 == 0 {\n            evenNums.append(n)\n\
    \        } else {\n            oddNums.append(n)\n        }\n    }\n\n    if evenNums.isEmpty\
    \ && oddNums.isEmpty {\n        return 0\n    }\n\n    if evenNums.isEmpty {\n\
    \        return -1\n    }\n\n    if oddNums.isEmpty {\n        return -1\n   \
    \ }\n\n    if evenNums.first! > oddNums.first! {\n        return evenNums.first!\n\
    \    }\n\n    return oddNums.first!", "    var smallestNum = y // y is the smallest\n\
    \    var biggestNum = x // x is the biggest\n\n    if x <= y {\n        // x is\
    \ smaller than y, so swap them\n        let temp = x\n        x = y\n        y\
    \ = temp\n    }\n\n    while (biggestNum - smallestNum > 1) {\n        // Divide\
    \ the biggest number by the smallest one and see if the quotient\n        // is\
    \ even or odd.\n        let quotient = biggestNum / smallestNum\n        if quotient\
    \ % 2 == 0 {\n            // quotient is even, so swap the numbers and try the\
    \ other half\n            biggestNum = biggestNum % smallestNum\n            smallestNum\
    \ = smallestNum % biggestNum\n        } else {\n            // quotient is odd,\
    \ so swap the numbers and try the other half\n            smallestNum = smallestNum\
    \ % biggestNum\n            biggestNum = biggestNum % smallestNum\n        }\n\
    \    }\n\n    return biggestNum", "    var result: Int = 0\n    while x < y {\n\
    \        if (x&1 == 0 && y&1 != 0) || x&1 == 1 && y&1 == 0 {\n            return\
    \ -1\n        }\n        x += 1\n        y -= 1\n        result = x\n    }\n \
    \   return result", '    return max(min(x + 1, y), min(x - 1, y))', "    var max:\
    \ Int = 0\n    var min: Int = 0\n    for i in\n        0..<min(y, x) {\n     \
    \       var m: Int\n            if i == 0 || i == min(y, x) {\n              \
    \  m = i\n            } else {\n                m = i + 1 // \"i + 1\" because\
    \ we cannot get max number in range\n            }\n            if m > max {\n\
    \                max = m\n            }\n        }\n    \n    for i in\n     \
    \   0..<max(y, x) {\n            var m: Int\n            if i == 0 || i == max(y,\
    \ x) {\n                m = i\n            } else {\n                m = i - 1\
    \ // \"i - 1\" because we cannot get min number in range\n            }\n    \
    \        if m < min {\n                min = m\n            }\n        }\n   \
    \ \n    return max * min / 2", "\tlet min = x > y ? x : y\n\tlet max = x > y ?\
    \ y : x\n\tfor i in min...max {\n\t\tif i % 2 == 0 {\n\t\t\treturn i\n\t\t}\n\t\
    }\n\treturn -1", "  if x < y {\n    return -1\n  }\n  \n  if x == y {\n    return\
    \ x\n  }\n  \n  if x % 2 == 0 {\n    return (x + y)/2\n  }\n  \n  if y % 2 ==\
    \ 0 {\n    return (y + x)/2\n  }\n  \n  return -1", "    \n    let even = 0\n\
    \    let odd = 1\n    \n    if y >= x {\n        if x % 2 == 0 {\n           \
    \ return x\n        } else {\n            let result = x + (y - x) / 2 * odd +\
    \ x\n            if result >= y {\n                return x\n            } else\
    \ if result <= y {\n                return result\n            } else {\n    \
    \            return -1\n            }\n        }\n    } else {\n        if y %\
    \ 2 == 0 {\n            return y\n        } else {\n            let result = x\
    \ + (y - x) / 2 * even + y\n            if result >= x {\n                return\
    \ y\n            } else if result <= x {\n                return result\n    \
    \        } else {\n                return -1\n            }\n        }\n    }",
  "    // TODO: Make this more efficient\n    if x > y {\n        if x % 2 == 0 {\n\
    \            return x\n        } else {\n            return y\n        }\n   \
    \ } else if x < y {\n        if y % 2 == 0 {\n            return y\n        }\
    \ else {\n            return x\n        }\n    }\n\n    var max = 1\n    for num\
    \ in 1..1000 {\n        if num % 2 == 0 {\n            if num > max {\n      \
    \          max = num\n            }\n        }\n    }\n\n    return max", "  \
    \  let evens = Array(1...x).filter{ $0 % 2 }\n    guard evens.count > 0 else {\
    \ return -1 }\n    let index = evens.index{$0 >= y}\n    return evens[index] >=\
    \ y ? evens[index] : -1", "\tif x >= y {\n\t\treturn -1\n\t}\n\n\tlet m = (x +\
    \ y) >> 1\n\t\n\tif x % 2 == 0 {\n\t\tif m % 2 == 0 {\n\t\t\treturn x\n\t\t} else\
    \ {\n\t\t\treturn m\n\t\t}\n\t} else {\n\t\tif m % 2 == 1 {\n\t\t\treturn y\n\t\
    \t} else {\n\t\t\treturn m\n\t\t}\n\t}", "    if (x > y) || (x == y) || (x < 0)\n\
    \    {\n        return -1\n    }\n    if (x <= 0) || (y == 0) || (x > y)\n   \
    \ {\n        return -1\n    }\n    for var i = x - 1; i < y + 1; i++ {\n     \
    \   if (i % 2 == 0) return i\n    }\n    return -1", "    // Write your code here\n\
    \    if x > y {\n        var temp: Int = x\n        x = y\n        y = temp\n\
    \    }\n    var temp: Int = x - y\n    var result: Int = -1\n    var remainder:\
    \ Int = temp\n    while remainder != 0 {\n        result++\n        remainder\
    \ = remainder % 2\n    }\n    return result", "    if x > y {\n        let temp\
    \ = x\n        x = y\n        y = temp\n    }\n    if x % 2 != 0 {\n        let\
    \ temp = x\n        x = y\n        y = temp\n    }\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x - 1\n    }\n    for a in 1...x\
    \ {\n        if y % a == 0 {\n            return a - x\n        }\n    }\n   \
    \ return -1", "    if x >= y {\n        var m = x\n        x = y\n        y =\
    \ m\n    }\n    for n in 0..<Int(sqrt(Double(x)+Double(y))+1) {\n        var m\
    \ = (x*(x+1))/2\n        if x <= y {\n            if m > Double(y) {\n       \
    \         m = Double(y) - 1\n            } else {\n                m = Double(y)\
    \ + 1 - m\n            }\n        }\n        if (m+Double(n))/2 > y {\n      \
    \      break\n        }\n    }\n    if m == 0.0 {\n        m = -1\n    }\n   \
    \ return m", "    let smaller = max(x, y)\n    let greater = min(x, y)\n\n   \
    \ // If they're equal, return the smaller one\n    if smaller == greater {\n \
    \       return smaller\n    }\n\n    // If x is greater, return x if it's evenly\
    \ divisible by 2, else the smaller number\n    if x >= greater {\n        return\
    \ x % 2 == 0 ? x : smaller\n    }\n\n    // If y is greater, return y if it's\
    \ evenly divisible by 2, else the smaller number\n    if y >= greater {\n    \
    \    return y % 2 == 0 ? y : smaller\n    }\n\n    // If they're both even or\
    \ both odd, return the smaller of them\n    return smaller", "    var smallest\
    \ = x\n    var largest = y\n    if smallest < largest {\n        for _ in 1...(largest\
    \ - smallest + 1) {\n            if smallest % 2 == 0 {\n                return\
    \ smallest\n            }\n            smallest += 2\n        }\n        return\
    \ -1\n    }\n    return largest", "    let x = x - 1\n    let y = y - 1\n    if\
    \ (x < y) {\n        var x: Int = 1\n        var y: Int = 0\n        var z: Int\
    \ = 0\n        \n        while x != 0 {\n            x -= 1\n            if x\
    \ == y {\n                z = x\n                break\n            }\n      \
    \      y += 1\n        }\n        return z\n    }\n    return -1", "    var result\
    \ = -1\n\n    guard (x != 0 && y != 0) else {\n        return result\n    }\n\n\
    \    if x > y {\n        var tmp = x\n        x = y\n        y = tmp\n    }\n\n\
    \    let (maxX, maxY) = make_ranges(x: x, y: y)\n    let maxI = maxX.count\n \
    \   let maxJ = maxY.count\n\n    let evenCount = maxI.filter({ $0 % 2 == 0 }).count\n\
    \    let oddCount = maxJ.filter({ $0 % 2 == 1 }).count\n\n    if (evenCount ==\
    \ 0 && oddCount == 0) || (evenCount > 0 && oddCount == 0) {\n        result =\
    \ -1\n    } else {\n        var maxEven = maxI.maxElement()!\n        var maxOdd\
    \ = maxJ.maxElement()!\n\n        if maxEven > maxOdd {\n            maxEven =\
    \ maxOdd\n            maxOdd = maxEven\n        }\n\n        let divisor = maxEven\
    \ + (maxEven - maxOdd)\n        result = (maxEven + maxOdd - 1) / divisor\n  \
    \  }\n\n    return result", "    \n    let nums = Array<Int>()\n    \n    // fill\
    \ array with numbers\n    for i in 0 ..< y {\n        nums.append(i)\n    }\n\
    \    for i in 0 ..< (y - x) {\n        nums.append(x + i)\n    }\n    for i in\
    \ 0 ..< (y + x - y) {\n        nums.append(x - i)\n    }\n    \n    // sort by\
    \ ascending order then find biggest number\n    let result = nums.sorted(by: <)\n\
    \        .enumerated()\n        .filter { case (i, n) where n % 2 == 0 }\n   \
    \     .max(by: { $0.1 + $1.0 })\n    \n    // return -1 if there is no such number\n\
    \    return result == nil ? -1 : result!.value", "    if x == 0 || y == 0 || x\
    \ > y {\n        return -1\n    }\n    \n    var even = 0\n    var odd = 0\n \
    \   \n    while even + odd < x {\n        even += 2\n        odd += 2\n    }\n\
    \    \n    if even > x {\n        return even\n    } else {\n        return odd\n\
    \    }", "    var biggest = UInt()\n    for num in stride(from: x, to: y, by:\
    \ 1) {\n        if BigInt((num + 1) & 1) == BigInt((num + 1) >> 1) {\n       \
    \     biggest = num\n        }\n    }\n    return -1", '    return x | y >> 1',
  "    guard x >= 0 && x <= y && y >= 0 else { return -1 }\n    if x == y { return\
    \ x }\n    if x < y { return x + 1 }\n    if x <= y { return x - 1 }\n    return\
    \ -1", "    if x == y {\n        return x\n    }\n    var x: Int\n    var y: Int\n\
    \    if x < y {\n        x = y\n        y = x\n    } else {\n        x = x\n \
    \       y = y\n    }\n    var t: Int\n    var d: Int\n    for t = x; t < y; t\
    \ += 2 {\n        d = (t * t) % MOD\n        if d == 0 {\n            break\n\
    \        }\n    }\n    return t", "    if x >= y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n    }\n    var num = 0\n    var num2 = 0\n\
    \    \n    if x <= 10 {\n        for num in 0...x {\n            if num & 1 ==\
    \ 1 {\n                num2 = num + y\n                break\n            }\n\
    \        }\n    }\n    \n    else if x >= 11 {\n        for num in 1...x {\n \
    \           if num & 1 == 1 {\n                num2 = num + y\n              \
    \  break\n            }\n        }\n    }\n    \n    return num2", "    let max\
    \ = (x < y) ? x : y\n    if max % 2 == 0 {\n        return max / 2\n    } else\
    \ {\n        let left = (x % 2 == 0) ? x : y\n        let right = (y % 2 == 0)\
    \ ? y : x\n        if left == right {\n            return -1\n        }\n    \
    \    return choose_num(left, right)\n    }", "    var x = abs(x), y = abs(y)\n\
    \    var min = Int(max(x, y))\n    var max = Int(min(min+2, y))\n    var mid =\
    \ Int(min(min+2, max))\n    while (mid < min+2 && mid < max+2) {\n        if ((mid*mid)\
    \ == x) return mid\n        else if ((mid*mid) == y) return mid\n        mid =\
    \ mid+1\n    }\n    if mid == min {\n        if mid == max+1 {\n            if\
    \ mid == y-1{ return y-1 }\n            else { return -1 }\n        }\n      \
    \  return mid\n    }\n    if mid == max+1 {\n        if mid == y-1{ return -1\
    \ }\n        else { return mid }\n    }\n    if mid == max+2 {\n        if mid\
    \ == x-1{ return mid }\n        else { return mid }\n    }\n    if mid == max+3\
    \ {\n        if mid == x-1{ return x-1}\n        else { return mid }\n    }\n\
    \    if mid == max+4 {\n        if mid == x-1{ return max+1}\n        else { return\
    \ mid }\n    }\n    if mid == max+5 {\n        if mid == x-1{ return x-1}\n  \
    \      else { return min+1 }\n    }\n    if mid == max+6 {\n        if mid ==\
    \ x-1{ return x-1}\n        else { return max+1 }\n    }\n    if mid == max+7\
    \ {\n        if mid == x-1{ return max+1}\n        else { return max+1 }\n   \
    \ }\n    if mid == max+8 {\n        if mid == x-1{ return max+1}\n        else\
    \ { return min+1 }\n    }\n    if mid == max+9 {\n        if mid == x-1{ return\
    \ max+1}\n        else { return max+1 }\n    }\n    if mid == max+10 {\n     \
    \   if mid == x-1{ return max+1}\n        else { return max+1 }\n    }\n    if\
    \ mid == max+11 {\n        if mid == x-1{ return max+1}\n        else { return\
    \ max+1 }\n    }\n    if mid == max+12 {\n        if mid == x-1{ return max+1}\n\
    \        else { return max+1 }\n    }\n    if mid == max+13 {\n        if mid\
    \ == x-1{ return max+1}\n        else { return max+1 }\n    }\n    if mid == max+14\
    \ {\n        if mid == x-1{ return max+1}\n        else { return max+1 }\n   \
    \ }\n    if mid == max+15 {\n        if mid == x-1{ return max+1}\n        else\
    \ { return max+1 }\n    }\n    return -1", "    if x < y {\n        return choose_num(y,\
    \ x)\n    }\n    var max_int = x\n    for var i = 2; i < y; i++ {\n        if\
    \ max_int % i == 0 {\n            max_int = max_int / i\n        } else {\n  \
    \          break\n        }\n    }\n    if max_int == x {\n        return -1\n\
    \    }\n    return max_int", "  guard x < y else {\n    return -1\n  }\n\n  guard\
    \ x > y else {\n    return -1\n  }\n\n  var small = y\n  var big = x\n\n  // If\
    \ the number we are searching is in the range, then we'll try to find \n  // the\
    \ biggest even number in the range\n  while (big - small > 1) {\n    if is_even(big)\
    \ {\n      big += 2\n    } else {\n      big -= 1\n    }\n  }\n\n  return big"]
stop_tokens:
- "\n}"
