name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// >>> fix_spaces(text: \" Example\")\n/// \"Example\"\n/// >>>\
  \ fix_spaces(text: \" Example 1\")\n/// \"Example_1\"\n/// >>> fix_spaces(text:\
  \ \" Example 2\")\n/// \"_Example_2\"\n/// >>> fix_spaces(text: \" Example 3\")\n\
  /// \"_Example-3\"\nfunc fix_spaces(text: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ["    if text == \"\" {\n        return text\n    }\n\n    var output\
    \ = text\n\n    let spaces = text.unicodeScalars.filter({ $0.isWhitespace })\n\
    \    if spaces.count == 1 {\n        output = text\n    }\n    else {\n      \
    \  output = output.replacingOccurrences(of: \" \", with: \"_\")\n    }\n\n   \
    \ if output.hasSuffix(\" \"){\n        output = String(output.dropLast())\n  \
    \  }\n\n    if output.last! == \"-\" {\n        output = String(output.dropLast())\n\
    \    }\n\n    while output.count > 2 && output.index(of: \" \") != NSNotFound,\
    \ output.count > 2 {\n        output = output.dropFirst().replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n\n    return output", "\ttext = text.replace(\"\\\
    t\", \"_\").replace(\"  \", \"_\").trim()\n\t\n\tlet splits = text.components(separatedBy:\
    \ \" \")\n\treturn splits.count == 2 ? splits.joinWithSeparator(\"-\") : splits.joinWithSeparator(\"\
    _\")", "    // Remove all spaces\n    let without_spaces = text.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n    // Remove any extra spaces\n    let without_extra\
    \ = without_spaces.stringByReplacingOccurrencesOfString(\" \", withString: \"\
    _\")\n    // If there are any extra spaces, remove them\n    if !without_extra.isEmpty\
    \ {\n        return without_extra.stringByReplacingOccurrencesOfString(\" \",\
    \ withString: \"-\")\n    }\n    else {\n        return without_spaces\n    }",
  "    \n    // Remove leading spaces (we already did that before)\n    let trimmed\
    \ = text.trimmingCharacters(in: NSCharacterSet.whitespaces)\n\n    // If trimmed\
    \ has only one space, return it\n    if trimmed.isEmpty { return trimmed }\n \
    \   \n    // If trimmed has more than 2 spaces, change consecutive spaces to dashes\n\
    \    if trimmed.count > 2 {\n        let lastChar = trimmed.last!\n        let\
    \ lastCharIndex = trimmed.index(before: lastChar)\n        let lastCharIndex =\
    \ lastCharIndex?.advanced(by: 1)\n        let twoSpacesIndex = lastCharIndex?.advanced(by:\
    \ 2)\n        \n        let replaced = trimmed.replacingOccurrences(of: \" \"\
    , with: \"-\", options: .caseInsensitive, range: nil)\n        \n        // If\
    \ there is a case where we have more than one space between two chars, replace\
    \ all consecutives with a single -\n        let consecutives = replaced.replacingOccurrences(of:\
    \ \" \", with: \"-\", options: .regularExpression, range: nil)\n        \n   \
    \     // If there is a case where we have more than one space between 2 chars,\
    \ replace all consecutives with a single -\n        if consecutives.count > 2\
    \ {\n            return consecutives.replacingOccurrences(of: \" \", with: \"\
    -\", options: .regularExpression, range: nil)\n        } else {\n            return\
    \ consecutives\n        }\n    } else {\n        return trimmed\n    }", "   \
    \ guard text != \"\", text.count > 0 else {\n        return text\n    }\n    let\
    \ regex = \" +\"\n    let fixed = text.replacingOccurrences(of: regex, with: \"\
    _\")\n    if fixed.count > 1 {\n        let first = fixed.prefix(1)\n        let\
    \ last = fixed.suffix(text.count - 1)\n        let fixed2 = fixed.replacingOccurrences(of:\
    \ regex, with: \"-\")\n        return first + fixed2 + last\n    }\n    return\
    \ fixed", "    var text = text\n    text.unicodeScalars.filter({ $0.isWhitespace\
    \ }).forEach { \n        text = text.replacingOccurrences(of: String($0), with:\
    \ \"_\") \n    }\n    if text.unicodeScalars.count > 2 {\n        let ranges =\
    \ text.unicodeScalars.indices.filter { text.unicodeScalars[$0].isWhitespace }\n\
    \            .map { text.unicodeScalars[$0] ~= \" \" }.joined()\n        let range\
    \ = ranges.joined(separator: \" \")\n        text.unicodeScalars[range] = \"-\"\
    \n    }\n    return text", "    let chars = text.characters\n    var last = \"\
    \"\n    var spaces = 0\n    for char in chars {\n        if char == \" \" {\n\
    \            if last == \"\" {\n                spaces = spaces+1\n          \
    \  }\n            else {\n                spaces = spaces-1\n            }\n \
    \           if spaces == 0 {\n                last = char\n            }\n   \
    \         else {\n                last = \"-\"\n                spaces = 0\n \
    \           }\n        }\n        else {\n            last = char\n        }\n\
    \    }\n    return String(chars, startingAt: text.startIndex, length: text.characters.count\
    \ - text.startIndex)", "    let pattern = \"\\\\s+\";\n    return text\n     \
    \   .replacingOccurrences(of: pattern, with: \"_\")\n        .replacingOccurrences(of:\
    \ \"  +\", with: \"-\")", "\treturn text\n\t\t.replacingOccurrences(of: \" \"\
    , with: \"_\")\n\t\t.replacingOccurrences(of: \"  \", with: \"-\")", "    let\
    \ regex = NSRegularExpression(\"[\\\\s]+\")\n    var fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .MatchingElsewhere, range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    fixed = fixed.stringByReplacingOccurrencesOfString(\"-\", withString:\
    \ \" \")\n    if fixed.hasPrefix(\"_\") {\n        fixed = fixed.substringWithRange(NSTextCheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult.CheckingResult)\n\
    \    }\n    return fixed", "    var result = text\n    for c in text.unicodeScalars\
    \ {\n        if let value = c.value {\n            let isSpace = value == 0x20\n\
    \            if !isSpace {\n                if result.hasPrefix(\"_\") {\n   \
    \                 result = result.dropFirst()\n                    result = \"\
    _\" + result\n                } else {\n                    result = \"_\" + result\n\
    \                }\n            } else {\n                if result.count > 2\
    \ {\n                    let newValue = UnicodeScalar(value - 0x20)\n        \
    \            if newValue == nil {\n                        result = \"_\" + result\n\
    \                    } else {\n                        result = result + \"_\"\
    \ + String(newValue)\n                    }\n                } else {\n      \
    \              result = \"-\" + result\n                }\n            }\n   \
    \     }\n    }\n    return result", "\t\n\tlet s = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n\t\n\tlet s = s[s.count ..< s.count + 2]\n\t\t.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n\t\n\treturn s", "    var fixed_text = text\n    fixed_text\
    \ = fixed_text.replacingOccurrences(of: \" \", with: \"_\")\n    if fixed_text.count\
    \ > 2 {\n        fixed_text = fixed_text.replacingOccurrences(of: \" \", with:\
    \ \"-\")\n    }\n    return fixed_text", "    if text == \"\" {\n        return\
    \ \"\"\n    }\n    \n    var clean = text\n    var lastSpace = 0\n    \n    for\
    \ i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            if lastSpace\
    \ > 1 {\n                clean = clean[0:lastSpace-1] + clean[lastSpace+1:]\n\
    \            } else {\n                clean = clean[0:i] + \"_\" + clean[i:]\n\
    \            }\n            lastSpace = 0\n        } else {\n            lastSpace++\n\
    \        }\n    }\n    return clean", "    var output = [String]()\n    var pos\
    \ = 0\n    while pos < text.characters.count {\n        var substr = String()\n\
    \        var chars = [Character]()\n        chars.append(text[pos])\n        while\
    \ pos < text.characters.count {\n            if chars.last == ' ' {\n        \
    \        substr.append(String(chars))\n                chars.append(text[pos])\n\
    \            } else {\n                pos += 1\n                break\n     \
    \       }\n        }\n        if pos < text.characters.count {\n            var\
    \ spaces = substr.characters.count\n            if spaces > 2 {\n            \
    \    substr += \"_\"\n            } else {\n                substr += String(repeating:\
    \ \"-\", count: spaces - 1)\n            }\n        }\n        output.append(String(substr))\n\
    \        pos += 1\n    }\n    return String(output)", "    let text = text.lowercased()\n\
    \    var newText = \"\"\n    for c in text {\n        switch (c) {\n        case\
    \ \"\\t\":\n            newText += \"-\"\n        case \"\\n\":\n            newText\
    \ += \"-\"\n        default:\n            newText += c.lowercased()\n        }\n\
    \    }\n    \n    if newText.hasPrefix(\"-\") && newText.last == \"-\" {\n   \
    \     return newText\n    }\n    \n    if newText.count > 2 {\n        return\
    \ newText\n    }\n    else {\n        return newText.lowercased()\n    }", '    return
    text.stringByExpandingTildeInPath().replacingOccurrences(of: " ", with: "_")',
  "    return text\n        .replacingOccurrences(of: \" \", with: \"_\")\n      \
    \  .replacingOccurrences(of: \" {2,}\", with: \"-\")", "    return text\n    \
    \    .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \"  \", with: \"-\")",
  "    var result = text;\n    for c in result {\n        if c == ' ' {\n        \
    \    result += \"_\";\n        } else {\n            result += c;\n        }\n\
    \    }\n    if result.range(of: \" \", options: .anchored, range: nil, locale:\
    \ nil) != nil {\n        for c in self.countOccurrences(of: \" \", options: .anchored,\
    \ range: nil, locale: nil) {\n            result.replaceSubrange(c.encodedOffset..<c.encodedOffset\
    \ + self.count, with: \"-\");\n        }\n    }\n    return result;", "    var\
    \ s = text\n    var i = 0\n    \n    for c in s {\n        if c != \" \" {\n \
    \           \n            if i == 0 {\n                s = s.replace(\" \", \"\
    _\", text.startIndex, text.endIndex - text.startIndex)\n            } else {\n\
    \                s = s.replace(\" \", \"-\", text.startIndex, text.endIndex -\
    \ text.startIndex)\n            }\n            \n            i = text.endIndex\n\
    \        } else {\n            i += 1\n        }\n    }\n    \n    return s",
  "\tguard let stringRange = text.range(of: \" \") else {\n\t\treturn text\n\t}\n\t\
    let components = text.components(separatedBy: \" \").map(String.init)\n\tguard\
    \ components.count == 1 || components.count > 2 else {\n\t\treturn text\n\t}\n\
    \treturn components[0] + components.dropLast().joined(separator: \"_\")", "  \
    \  var fixed_text = \"\"\n\n    for c in text {\n        switch (c) {\n      \
    \  case \" \":\n            fixed_text += \"_\"\n        case \" \":\n       \
    \     fixed_text += \"-\"\n        default:\n            fixed_text += c\n   \
    \     }\n    }\n\n    return fixed_text", "    \n    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let count = fixed.count\n    let final = fixed + (count\
    \ > 2 ? \"-\" : \"\")\n    return final", "    // replace all spaces with underscores\n\
    \    var s = text\n    s = s.replacingOccurrences(of: \" \", with: \"_\")\n  \
    \  // if there are more than 2 consecutive spaces\n    // then replace all consecutive\
    \ spaces with -\n    if text.count - s.count > 1 {\n        var a = \"\"\n   \
    \     a = s\n        while s.range(of: \" \").location == nil {\n            s\
    \ += \"-\"\n        }\n    }\n    return s", "\tlet result = [String]()\n\ttext.characters.forEach\
    \ {\n\t\tlet str = $0 as String\n\t\tlet index = str.index(str.startIndex, offsetBy:\
    \ 1)\n\t\tif str.characters.count > 2 {\n\t\t\tif let index2 = str.index(str.startIndex,\
    \ offsetBy: 1, limitedBy: str.endIndex) {\n\t\t\t\tlet substr = str.substring(from:\
    \ index2..<index)\n\t\t\t\tresult.append((substr.characters.count == 2 ? substr.replacingOccurrences(of:\
    \ \" \", with: \"_\") : substr))\n\t\t\t} else {\n\t\t\t\tresult.append((str.characters.count\
    \ == 2 ? str.replacingOccurrences(of: \" \", with: \"_\") : str))\n\t\t\t}\n\t\
    \t} else {\n\t\t\tresult.append(str)\n\t\t}\n\t}\n\treturn result.joined()", " \
    \   if text == \"\" {\n        return \"\"\n    }\n    var result = \"\"\n   \
    \ var last_was_space = false\n    for i := 0; i < len(text); i++ {\n        c\
    \ := text[i]\n        if c == \" \" {\n            if last_was_space {\n     \
    \           result+=\"-\"\n            } else {\n                result+=\"_\"\
    \n            }\n            last_was_space = true\n        } else {\n       \
    \     last_was_space = false\n        }\n        result+=c\n    }\n    return\
    \ result", "    \n    let stringWithoutSpaces = text.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n\
    \    \n    if stringWithoutSpaces.characters.count > 2 {\n        return stringWithoutSpaces.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\", options: nil, range: NSMakeRange(0, stringWithoutSpaces.characters.count))\n\
    \    } else {\n        return text\n    }", "    text.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" +\", with: \"-\")\n    return text", "    \n    let s = text.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n    \n    let i = s.rangeOfString(\"--\")\n    \n    if i != NSNotFound\
    \ {\n        \n        let result = text.stringByReplacingCharactersInRange(range,\
    \ withString: \"-\")\n        \n        return result\n    }\n    \n    return\
    \ s", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive,\
    \ error: nil)\n    let results = regex.stringByReplacingMatchesInString(text,\
    \ options: .MatchingWithTransparentBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return results", "    var fixed = text\n    fixed\
    \ = replaceAll(fixed, \" \", \"_\")\n    if fixed.count > 1 {\n        fixed =\
    \ replaceAll(fixed, \" \", \"_\")\n    }\n    return fixed", "    let fixed =\
    \ text.stringByReplacingOccurrencesOfString(\" \", withString: \"_\", options:\
    \ NSStringCompareOptions.LiteralSearch, range: nil)\n    if fixed.rangeOfString(\"\
    \  \", options: NSStringCompareOptions.LiteralSearch, range: nil) != nil {\n \
    \       let range: NSRange = fixed.rangeOfString(\"  \", options: NSStringCompareOptions.LiteralSearch,\
    \ range: nil)!\n        fixed = fixed.stringByReplacingCharactersInRange(range,\
    \ withString: \"-\")\n    }\n    return fixed", "    var result = \"\"\n    var\
    \ prev_space = false\n    for c in text {\n        if c == ' ' && !prev_space\
    \ {\n            result = \"_\" + result\n            prev_space = true\n    \
    \    }\n        else if c != ' ' && prev_space {\n            result = \"-\" +\
    \ result\n            prev_space = false\n        }\n        result += c\n   \
    \ }\n    return result", "    let s = text\n    s.replaceOccurrences(of: \" \"\
    , with: \"_\", options: .literal, range: nil)\n    let splits = s.components(separatedBy:\
    \ \"_\")\n    var s = \"\"\n    for sp in splits {\n        if sp.count > 1 {\n\
    \            s = s + String(sp.dropLast())\n        } else {\n            s =\
    \ sp + s\n        }\n    }\n    return s", "    var fixed_text = \"\"\n    \n\
    \    for s in text.characters {\n        switch s {\n        case \" \":\n   \
    \         fixed_text += \"_\"\n        case \" \":\n            fixed_text +=\
    \ \"-\"\n        default:\n            fixed_text += String(c)\n        }\n  \
    \  }\n    \n    return fixed_text", "\treturn text\n\t\t.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n\t\t.replacingOccurrences(of: \" \", with: \"-\")\n\t\t\
    .replacingOccurrences(of: \"  \", with: \"-\")", "    \n    let re = Regex(\"\
    [ ]{2,}\")\n    let result = re.stringByReplacingMatches(in: text, options: .regularExpression,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"-\")\n    \n \
    \   return result.lowercased()", "\treturn text.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines) ",
  "\ttext = text.trimmingCharacters(in: .whitespaces)\n\tlet ranges: [Range<String.Index>]\
    \ = text.enumerated() {\n\t\tindex, char in\n\t\tif char == \" \" {\n\t\t\tranges.insert(index,\
    \ [.init(range: index, in: text)])\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\
    \t}\n\t\n\treturn text.replacingOccurrences(of: \" \", with: \"_\", options: .regularExpression,\
    \ ranges: ranges)", "    var result = \"\"\n    \n    var last: Character?\n \
    \   for (index, character) in text.characters.enumerated() {\n        switch character\
    \ {\n        case ' ':\n            if last?.isSpace == true {\n             \
    \   result += \"-\"\n            } else {\n                result += \" \"\n \
    \           }\n        case '.':\n            result += \"_\"\n        default:\n\
    \            result += String(character)\n        }\n        last = character\n\
    \    }\n\n    return result", "    var result = text\n    \n    for i in 0..<text.characters.count\
    \ {\n        var c = text.characters[i]\n        \n        // If current character\
    \ is a space, do nothing\n        if c == \" \" {\n            continue \n   \
    \     }\n        \n        // If current character is not space, append current\
    \ character to the previous string\n        if c != \" \" {\n            if i\
    \ > 0 {\n                result += \"_\"\n            }\n            result +=\
    \ \"-\"\n        }\n        \n        // Append current character to result string\n\
    \        result += String(c)\n    }\n    \n    return result", "  let spaces1\
    \ = \"(^[ \\t]*|[ \\t]*)\" // single spaces\n  let spaces2 = \"[ \\t]+\" // multiple\
    \ spaces, including between tabs\n  let spaces3 = \" +\"             // multiple\
    \ spaces, not including between tabs\n  let spaces4 = \" +\"\n  let spaces5 =\
    \ \" +\"\n  let spaces6 = \" +\"\n  let spaces7 = \" +\"\n  let spaces8 = \" +\"\
    \n  let spaces9 = \" +\"\n  let spaces10 = \" +\"\n  let spaces11 = \" +\"\n \
    \ let spaces12 = \" +\"\n\n  // If input string is all spaces\n  if text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) == \"\" {\n    return text\n  }\n\n  // If the input\
    \ string has exactly 1 space\n  guard text.rangeOfCharacter(from: spaces1.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 1 space between tabs\n  guard text.rangeOfCharacter(from: spaces2.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 2 spaces between tabs\n  guard text.rangeOfCharacter(from: spaces3.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 3 spaces between tabs\n  guard text.rangeOfCharacter(from: spaces4.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 4 spaces between tabs\n  guard text.rangeOfCharacter(from: spaces5.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 5 spaces between tabs\n  guard text.rangeOfCharacter(from: spaces6.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 6 spaces between tabs\n  guard text.rangeOfCharacter(from: spaces7.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 7 spaces between tabs\n  guard text.rangeOfCharacter(from: spaces8.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 8 spaces between tabs\n  guard text.rangeOfCharacter(from: spaces9.unicodeScalars.first!)\
    \ != nil else {\n    return text\n  }\n\n  // If the input string has more than\
    \ 9 spaces between tabs\n  guard text.rangeOfCharacter(from: spaces10.unicodeScalars.first!",
  "\tvar result = \"\"\n\tfor index, char in enumerate(text) {\n\t\tswitch char {\n\
    \t\tcase ' ':\n\t\t\tif index > 0 {\n\t\t\t\tif text[index - 1] != ' ' {\n\t\t\
    \t\t\tresult += \"_\"\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult += char\n\t\tdefault:\n\
    \t\t\tresult += char\n\t\t}\n\t}\n\t\n\t\n\tif text.count > 2 && result!=\"\"\
    \ {\n\t\tresult += \"-\"\n\t}\n\t\n\treturn result", "    var ret = text\n   \
    \ if text == \"\" {\n        return \"\"\n    }\n    if text.isEmpty {\n     \
    \   return \"\"\n    }\n    if text == \" \" {\n        return \"_\"\n    }\n\
    \    let spaceCount = text.countOfSpaces()\n    if spaceCount > 2 {\n        let\
    \ spaces = text.substringFromIndex(advance(text.startIndex, spaceCount - 1))\n\
    \        let replacement = \"_\" + spaces\n        ret = ret.replacingOccurrences(of:\
    \ spaces, with: replacement)\n    }\n    return ret", "    // First, remove all\
    \ spaces.\n    let newText = text\n        .stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \    \n    // Then, if there are more than 2 consecutive spaces, replace them\
    \ with -.\n    let range = (text as NSString).rangeOfString( \" \\\"\")\n    while\
    \ range.location != NSNotFound {\n        let startIndex = range.location\n  \
    \      let endIndex = text.rangeOfString( \" \\\"\", options: .BackwardsSearch,\
    \ range: NSMakeRange(startIndex + 1, text.length - startIndex - 1)).location\n\
    \        if endIndex == NSNotFound {\n            endIndex = text.characters.count\n\
    \        }\n        \n        let subString = (text as NSString).substringWithRange(NSMakeRange(startIndex,\
    \ endIndex - startIndex))\n        let replacedString = subString.stringByReplacingOccurrencesOfString(\
    \ \" \", withString: \"_\")\n        newText = (newText as NSString).stringByReplacingCharactersInRange(NSMakeRange(startIndex,\
    \ endIndex - startIndex), withString: replacedString)\n        \n        range\
    \ = (text as NSString).rangeOfString( \" \\\"\")\n    }\n    \n    return newText",
  "    var fixed_text = text;\n    fixed_text = fixed_text.replaceOccurrencesOfString(\"\
    \ \", withString: \"_\", options: NSStringCompareOptions.CaseInsensitive, range:\
    \ NSMakeRange(0, fixed_text.characters.count));\n    let ranges = NSMakeRange(0,\
    \ fixed_text.characters.count);\n    fixed_text = fixed_text.replaceOccurrencesOfString(\"\
    \ \", withString: \"-\", options: NSStringCompareOptions.CaseInsensitive, range:\
    \ ranges);\n    return fixed_text;", "    let components = text.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    if components.count > 1 {\n        let lastComponent\
    \ = components[components.count-1]\n        let index = components.index{$0 ==\
    \ lastComponent}\n        let before = components.prefix(from: index)\n      \
    \  let after = components.suffix(from: index)\n        result = before + lastComponent.trimmingCharacters(in:\
    \ .whitespaces) + after\n    }\n    else {\n        result = text\n    }\n   \
    \ return result.trimmingCharacters(in: .whitespaces)", "    let pattern = \"\\\
    \\s+\"\n    let regexp = try! NSRegularExpression(pattern: pattern, options: .CaseInsensitive)\n\
    \    let range = NSMakeRange(0, text.characters.count)\n    let fixedText = regexp.stringByReplacingMatchesInString(text,\
    \ options: [], range: range, withTemplate: \"_\")\n    return fixedText", "  \
    \  guard let match = text.range(of: \" \") else {\n        return text\n    }\n\
    \    var result = \"\"\n    for i in 0..<match.lowerBound {\n        result +=\
    \ \"_\"\n    }\n    let index = (text.count - match.lowerBound) - 1\n    for i\
    \ in 0..<index {\n        result += \" \"\n    }\n    result += text[index..<text.count]\n\
    \    return result", "\tlet regex = \"( )+\".into()\n\tlet fixed = text.replacingOccurrences(of:\
    \ regex, with: \"_\")\n\tlet index = fixed.index(before: fixed.endIndex, offsetBy:\
    \ -2)\n\treturn fixed[0..<index] + fixed[index..<fixed.endIndex].replacingOccurrences(of:\
    \ \" \", with: \"-\")", "    \n    let spaceIndex   = text.index(text.startIndex,\
    \ offsetBy: 0)\n    let spacesToReplace = text.length - spaceIndex - 1\n    \n\
    \    let re = NSRegularExpression(pattern: \"\\\\s+\", options: NSRegularExpression.Options())\n\
    \    let modifiedString = re.stringByReplacingMatches(in: text,\n            \
    \                                           options: NSRegularExpression.MatchingOptions(rawValue:\
    \ 0),\n                                                       range: NSMakeRange(0,\
    \ text.characters.count),\n                                                  \
    \     using: { (_, substring, _) -> String in\n        return substring\n    })\n\
    \n    if modifiedString.characters.count > spacesToReplace {\n        let lastSpaceIndex\
    \ = modifiedString.index(modifiedString.startIndex, offsetBy: spacesToReplace)\n\
    \        let secondLastSpaceIndex = modifiedString.index(modifiedString.startIndex,\
    \ offsetBy: spacesToReplace + 1, limitedBy: lastSpaceIndex)\n        return modifiedString\n\
    \    } else {\n        return modifiedString\n    }", "    \n    let space = \"\
    _\"\n    let count = 1\n    let r = \"(?<=\\s)\"\n    \n    while count < text.count\
    \ {\n        \n        let pattern = String(repeating: space, count: text.count\
    \ - count)\n        let regex = r + pattern + r\n        \n        let rep = text.range(of:\
    \ pattern)\n        \n        if let _ = rep {\n            let spaces = String(repeating:\
    \ space, count: rep.upperBound - rep.lowerBound)\n            let pattern = String(repeating:\
    \ spaces, count: count)\n            \n            text = text.replacingOccurrences(of:\
    \ pattern, to: space)\n            \n        } else {\n            \n        \
    \    text += space\n        }\n        \n        count += 1\n    }\n    \n   \
    \ return text", "    // Replace spaces with underscore\n    var fix_text = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    // Replace multiple spaces with single -\n    fix_text\
    \ = fix_text.replacingOccurrences(of: \" {2,}\", with: \"-\")\n    return fix_text",
  "\tlet trimmed = text.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \tlet lastSpaceIndex = trimmed.lastIndex(of: \" \")\n\tif lastSpaceIndex > 0 {\n\
    \t\tif lastSpaceIndex > 1 {\n\t\t\tlet firstSpaceIndex = trimmed.firstIndex(of:\
    \ \" \")\n\t\t\treturn String(trimmed[firstSpaceIndex...] + trimmed[lastSpaceIndex])\n\
    \t\t} else {\n\t\t\treturn String(trimmed[lastSpaceIndex])\n\t\t}\n\t}\n\treturn\
    \ trimmed", '    return NSString(format: "%@_%@", text.replacingOccurrences(of:
    " ", with: "_").trimmingCharacters(in: CharacterSet.whitespaces), text.replacingOccurrences(of:
    " ", with: "-").trimmingCharacters(in: CharacterSet.whitespaces))', "    let regex\
    \ = try NSRegularExpression(pattern: \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatchesInString(text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    if text == \"\" {\n        return text\n    }\n\n    var newText =\
    \ text\n\n    let spacesInText = text.countOfString(\" \")\n\n    if spacesInText\
    \ == 0 {\n        return text\n    }\n\n    if spacesInText == 1 {\n        newText\
    \ = text\n    } else {\n        let first = text.substringToIndex(text.startIndex.advancedBy(spacesInText\
    \ - 1))\n        let second = text.substringFromIndex(text.startIndex.advancedBy(spacesInText))\n\
    \n        if second == \"\" {\n            newText = first\n        } else {\n\
    \            newText = first + \"_\" + second\n        }\n    }\n\n    return\
    \ newText", '    return NSString(string: text).stringByReplacingOccurrencesOfString(
    " ", withString: "_", options: NSStringCompareOptions.LiteralSearch, range: nil)',
  "    let regex = #\"[ ]+\"#\n    let regex_1 = #\"( ){2,}\"#\n    let regex_2 =\
    \ #\"[ ]+\"#\n    let regex_3 = #\"[ ]+\"#\n    let regex_4 = #\"[ ]+\"#\n   \
    \ let regex_5 = #\"[ ]+\"#\n\n    let fixed_text = text.replacingOccurrences(of:\
    \ regex, with: \"_\").replacingOccurrences(of: regex_1, with: \"-\").replacingOccurrences(of:\
    \ regex_2, with: \"-\").replacingOccurrences(of: regex_3, with: \"-\").replacingOccurrences(of:\
    \ regex_4, with: \"-\").replacingOccurrences(of: regex_5, with: \"-\")\n    \n\
    \    if fixed_text.count(\"_\") > 2 {\n        fixed_text = fixed_text.replacingOccurrences(of:\
    \ regex_4, with: \"-\").replacingOccurrences(of: regex_5, with: \"-\")\n    }\n\
    \    \n    return fixed_text", "    if text == \"\" || text == \"\\n\" {\n   \
    \     return text\n    }\n    var result = \"\"\n    var space = \"\"\n    \n\
    \    for i in 0..<text.count {\n        let c = text[i]\n        switch c {\n\
    \            case \"\\n\": return \"\"\n            case \"\\t\": space = \" \"\
    \n            case \"\\v\": space = \" \"\n            case \"\\f\": space = \"\
    \ \"\n            case \"\\r\": space = \" \"\n            case \"\\e\": space\
    \ = \" \"\n            case \"\\u00A0\": space = \" \"\n            default:\n\
    \            if space != \"\" {\n                result += space\n           \
    \     space = \"\"\n            }\n            if c.isWhitespace() {\n       \
    \         result += c\n            } else {\n                result += c.unicodeScalars.filter\
    \ { !$0.isWhitespace() }.reduce(\"\") { $0 + $1 }\n            }\n        }\n\
    \    }\n    \n    return result", '    return text.replacingOccurrences(of: "
    ", with: "_", options: .regularExpression)', "    var fixed_text = \"\"\n\n  \
    \  for c in text {\n        if c == \" \" {\n            fixed_text += \"_\"\n\
    \        } else if c == \" \" {\n            fixed_text += \"-\"\n        } else\
    \ {\n            fixed_text += String(c)\n        }\n    }\n\n    return fixed_text",
  "    let pattern = NSRegularExpression(pattern: \"\\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive)\n\
    \    let range = (text as NSString).rangeOfString(pattern)\n\n    if let rangeOfFirst\
    \ = range {\n        let newText = NSMutableString(string: text as String)\n \
    \       newText.replaceCharactersInRange(rangeOfFirst, withString: \"_\")\n  \
    \      if newText.rangeOfString(\" \", options: NSStringCompareOptions.RegularExpressionSearch).location\
    \ == NSNotFound {\n            newText.replaceCharactersInRange(range, withString:\
    \ \"-\")\n        }\n        return newText as String\n    }\n    return text\
    \ as String", "    var buffer = StringBuilder()\n    for c in text {\n       \
    \ if c == ' ' {\n            buffer.append(\"_\")\n        } else {\n        \
    \    buffer.append(c)\n        }\n    }\n    return buffer.toString()", "\tvar\
    \ buffer = StringBuffer()\n\tvar lastWasSpace = false\n\tfor idx, c in text.characters.reversed()\
    \ {\n\t\tswitch c {\n\t\tcase ' ':\n\t\t\tif !lastWasSpace {\n\t\t\t\tlastWasSpace\
    \ = true\n\t\t\t}\n\t\t\tbreak\n\t\tcase '>':\n\t\t\tlastWasSpace = false\n\t\t\
    \tbreak\n\t\tdefault:\n\t\t\tlastWasSpace = false\n\t\t\tbuffer.append(c)\n\t\t\
    }\n\t}\n\treturn buffer.reversed().joinWithSeparator(\"_\")", "    let result\
    \ = text.trimmingCharacters(in: CharacterSet.whitespaces)\n    return result.hasPrefix(\"\
    \ \") ? result.removeFirst() : result", "  return text.fold(\"\", { result, ch\
    \ in\n    if result == \"\" && Character(ch) == \" \" {\n      return \"_\"\n\
    \    }\n    return result + String(ch)\n  })", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n\
    \    return regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions(rawValue:\
    \ 0), range: NSMakeRange(0, countElements(text)), withTemplate: \"_\")", "   \
    \ let pattern = \"\\\\s+\"\n    let replacement = \"_\"\n    return text.stringByReplacingOccurrencesOfString(pattern,\
    \ withString: replacement)", "    var text = text\n    let firstSpaceIndex = text.rangeOfCharacter(from:\
    \ CharacterSet.whitespacesAndNewlines)\n    if firstSpaceIndex != nil {\n    \
    \    let firstSpaceIndex = text.index(text.startIndex, offsetBy: firstSpaceIndex!.startIndex)\n\
    \        text = text.replacingCharacters(in: firstSpaceIndex!, with: \"_\")\n\
    \    }\n\n    let secondSpaceIndex = text.rangeOfCharacter(from: CharacterSet.whitespaces)\n\
    \    if secondSpaceIndex != nil {\n        let secondSpaceIndex = text.index(text.startIndex,\
    \ offsetBy: secondSpaceIndex!.startIndex)\n        let consecutiveSpaceIndex =\
    \ text.index(text.startIndex, offsetBy: secondSpaceIndex!.startIndex + 1)\n  \
    \      if consecutiveSpaceIndex != nil {\n            text = text.replacingCharacters(in:\
    \ consecutiveSpaceIndex!, with: \"-\")\n        } else {\n            text = text.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        }\n    }\n\n    return text", "    let new_text\
    \ = text\n        .uppercased()\n        .trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n\n    // Remove trailing\
    \ dashes if they are consecutive\n    new_text.hasPrefix(\"--\") ? new_text =\
    \ new_text.dropLast(2) : \"\"\n\n    return new_text", "    var fixedText = text\n\
    \    if text != \"\" {\n        let regex = NSRegularExpression(pattern: \" \"\
    , options: .CaseInsensitive)\n        if regex.firstMatchInString(text, options:\
    \ .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count)).rangeAtIndex(0)\
    \ == NSMakeRange(0, text.characters.count) {\n            fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"-\")\n        }\n    }\n    return fixedText", "    let fixed\
    \ = text\n        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" +\", with: \"-\")\n    return fixed", "\treturn regex.ReplaceAllString(text,\
    \ \" \")", "    var result = text\n    result.deleteCharacters(in: NSRange(location:\
    \ 0, length: result.characters.count))\n    let count = result.characters.count\n\
    \    for i in 1...count {\n        if count <= 1 {\n            break\n      \
    \  }\n        if result.characters.element(at: i) == \" \" {\n            result\
    \ += \" \"\n            count -= 1\n        } else {\n            result += String(UnicodeScalar(UInt8(i)))\n\
    \            count -= 1\n        }\n    }\n    if count > 2 {\n        result.deleteCharacters(in:\
    \ NSRange(location: 0, length: 2))\n    }\n    return result", "    var result\
    \ = \"\"\n    if text == \"\" {\n        return result\n    }\n    let space_index\
    \ = text.index(of: \" \")\n    if space_index != text.endIndex {\n        let\
    \ start_of_space_index = space_index\n        let end_of_space_index = text.index(before:\
    \ space_index, offsetBy: 1)\n        result = String(text[start_of_space_index..<end_of_space_index])\n\
    \    }\n    let consecutive_indexes = text.index(of: \" \", offsetBy: 1)..<text.index(of:\
    \ \" \", offsetBy: 2)\n    for i in 0 ..< consecutive_indexes.count {\n      \
    \  result = result.replacingOccurrences(of: \" \", with: \"-\")\n    }\n    return\
    \ result", '    return text.replacingOccurrences(of: " ", with: "_", options:
    .regularExpression)', "  let spacesCount: Int = text.characters.filter{ $0 ==\
    \ \" \" }.count\n  if spacesCount > 1 {\n    return text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .regularExpression, range: nil)\n  }\n  return\
    \ text", "    return text.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).\n\
    \        components(separatedBy: \" \").joined(separator: \"_\")", "    let stringWithSpaces\
    \ = text.trimmingCharacters(in: .whitespacesAndNewlines)\n    let splittedString\
    \ = stringWithSpaces.components(separatedBy: \" \")\n    let joined = splittedString.joined(separator:\
    \ \"_\")\n    if joined.count == 2 {\n        let consecutiveSpaces = joined.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        return consecutiveSpaces\n    }\n    return joined",
  "    var result = text\n\n    while result.hasPrefix(\" \") {\n        result =\
    \ result.remove(at: result.index(before: result.startIndex))\n    }\n\n    while\
    \ result.hasSuffix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.endIndex))\n    }\n\n    while result.hasPrefix(\" \") {\n        result\
    \ = result.remove(at: result.index(before: result.index(before: result.startIndex)))\n\
    \    }\n\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatchesInString(text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    \n    var fixedText = text\n    \n    if text == \"\" || text == \"\
    \\n\" {\n        return \"\"\n    }\n\n    if text.rangeOfCharacter(from: .whitespaces).location\
    \ == NSNotFound {\n        return text\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        let range = text.range(of: \" \", options: .backwards)\n    \
    \    \n        if range.location == NSNotFound {\n            return text\n  \
    \      }\n\n        if range.location < text.endIndex {\n            fixedText\
    \ = text.substringToIndex(range.location)\n        }\n    }\n    \n    if fixedText\
    \ == \"_\" {\n        return text\n    }\n    \n    let consecutiveSpaces = text.components(separatedBy:\
    \ .whitespaces).filter({ $0 == \" \" }).count\n    \n    if consecutiveSpaces\
    \ > 2 {\n        fixedText = text.replacingOccurrences(of: \" \", with: \"_\"\
    )\n    }\n    \n    return fixedText", "    return text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n        .flatMap { $0 == \" \" ? \"_\" : $0 }\n  \
    \      .reduce(\"\") { $0 + ($1 == \"_\" ? \"\" : \"-\") }", "    if text == \"\
    \" {\n        return \"\"\n    }\n    \n    var fixed = text\n    for c in text.unicodeScalars\
    \ {\n        if !c.isWhitespace() {\n            fixed += \"_\"\n        }\n \
    \   }\n    \n    for c in text.unicodeScalars {\n        if c.isWhitespace() {\n\
    \            fixed += \"-\"\n        }\n    }\n    \n    return fixed", "    var\
    \ result = (text as NSString).stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \    if (result == \"\") {\n        return \"\"\n    }\n    var strings = result.componentsSeparatedByString(\"\
    \ \")\n    var lastWasSpace = false\n    var currentString = \"\"\n    for index\
    \ in 0..<strings.count {\n        guard !strings[index].isEmpty else {\n     \
    \       continue\n        }\n        if lastWasSpace && index == strings.count\
    \ - 1 {\n            strings[index] = strings[index] + \"-\"\n        } else {\n\
    \            strings[index] = strings[index] + \"_\"\n        }\n        lastWasSpace\
    \ = !lastWasSpace\n        currentString += strings[index]\n    }\n    return\
    \ result", "    let result = text.trim()\n    return result.split(\" \").joinWithSeparator(\"\
    \ \")", "    let regex = NSRegularExpression(\"\\\\s+\")\n    return regex.stringByReplacingMatchesInString(text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    var result = \"\"\n    for c in text.characters {\n        if c ==\
    \ ' ' {\n            result += c\n        } else {\n            result += \"_\"\
    \n        }\n    }\n\n    // Special case if text has exactly 2 consecutive spaces:\n\
    \    if text == \" \\n\" {\n        result = \"__\"\n    }\n    return result",
  "\tlet spacedText = text\n\t\t.replacingOccurrences(of: \" \", with: \"_\")\n\t\t\
    .replacingOccurrences(of: \" \", with: \"-\")\n\treturn String(spacedText)", " \
    \   let fixed = text\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .trimmingCharacters(in:\
    \ CharacterSet(charactersIn: \" \"))\n    return fixed", "    let space_regex\
    \ = \" +\"\n    let consecutive_regex = \" {2,}\"\n    var result = text\n   \
    \ for char in space_regex.unicodeScalars {\n        result = result.replacingOccurrences(of:\
    \ char, with: \"_\")\n    }\n    if let consecutive = text.range(of: consecutive_regex)\
    \ {\n        result = result.replacingCharacters(in: consecutive, with: \"-\"\
    )\n    }\n    return result", "\tlet fixed_text = text.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\", options: .LiteralSearch, range: nil)\n\tif fixed_text.characters.count\
    \ == text.characters.count {\n\t\treturn fixed_text\n\t}\n\treturn fixed_text.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\", options: .LiteralSearch, range: nil)", "    var res =\
    \ text\n    let r = \"[ \\t]+\".unicodeScalars\n    let n = \"[ \\t]+$\".unicodeScalars\n\
    \n    do {\n        res = res.replacingOccurrences(of: r, with: \"_\")\n     \
    \   res = res.replacingOccurrences(of: n, with: \"-\")\n    } catch let error\
    \ {\n        print(error.localizedDescription)\n    }\n\n    return res", "\t\
    var newText = \"\"\n\tfor index, char in enumerate(text) {\n\t\tif char == \"\
    \ \" {\n\t\t\tif index != 0 {\n\t\t\t\tnewText += \"-\"\n\t\t\t}\n\t\t} else {\n\
    \t\t\tnewText += char\n\t\t}\n\t}\n\treturn newText", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .regularExpression)\n    if fixed.count == text.count\
    \ {\n        return fixed\n    }\n\n    var result: String\n    if fixed.count\
    \ > 2 {\n        result = fixed.replacingOccurrences(of: \" \", with: \"_\", options:\
    \ .regularExpression)\n    } else {\n        result = \"_\" + fixed\n    }\n\n\
    \    return result", "    var fixed = text.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \    fixed = fixed.stringByReplacingOccurrencesOfString(\" \", withString: \"\
    _\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n    var last\
    \ = fixed.rangeOfString(\"-\")\n    while last != nil {\n        fixed = fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n        last = fixed.rangeOfString(\"-\", options: NSStringCompareOptions.LiteralSearch,\
    \ range: nil, range: last!.rangeByAddingIndex(last!.length, offset: +1))\n   \
    \ }\n    return fixed", "    let textWithoutSpaces = text.removeAllWhitespaces()\n\
    \    let result = textWithoutSpaces.replacingOccurrences(of: \"\\\\s\", with:\
    \ \"_\")\n    if result.isEmpty {\n        return text\n    }\n    let range =\
    \ (result as NSString).range(of: \" \")\n    if range.location == 4 {\n      \
    \  result.removeSubrange(range)\n        return result + \"-\"\n    }\n    return\
    \ result", "    let trimmed = text.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let replaced = trimmed.replacingOccurrences(of: \" \", with: \"_\")\n   \
    \ if replaced.count > 2 {\n        replaced = replaced.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n    return replaced", "    var result = text\n \
    \   for index in 0..<text.characters.count {\n        let char = text.substring(from:\
    \ index)\n        if char.isWhitespace() {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n            \n            let nextIndex = index.advanced(by:\
    \ 1)\n            \n            if index != nextIndex && text.substring(from:\
    \ nextIndex).isWhitespace() {\n                result = result.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n            }\n        }\n    }\n    return result", " \
    \   let s = text.replacingOccurrences(of: \" \", with: \"_\", options: .regularExpression)\n\
    \    if s.count > 2 {\n        return s.replacingOccurrences(of: \" \", with:\
    \ \"-\", options: .regularExpression)\n    } else {\n        return s\n    }",
  "    var result = text\n    \n    guard let first = text.range(of: \" \") else {\n\
    \        return result\n    }\n    \n    guard let last = text.range(of: \" \"\
    , after: first) else {\n        return result\n    }\n    \n    if !first.isEmpty\
    \ {\n        let start = first\n        let end = last\n        \n        let\
    \ before = String(text[start..<end])\n        let after = String(text[end..<text.endIndex])\n\
    \        \n        if before.hasSuffix(\" \") {\n            result = String(text[0..<start.offsetByDistance(to:\
    \ first)])\n            result += \"_\" + String(text[end..<text.endIndex])\n\
    \        } else {\n            result = String(text[0..<start.offsetByDistance(to:\
    \ first)])\n            result += \"-\" + (String(text[end..<text.endIndex]) +\
    \ after)\n        }\n    } else {\n        result = String(text[0..<end.offsetByDistance(to:\
    \ last)])\n        result += \"-\" + (String(text[end..<text.endIndex]) + after)\n\
    \    }\n    \n    return result", "\tlet words = text.components(separatedBy:\
    \ \" \")\n\tlet space_count = words.filter{$0 == \" \"}.count\n\tlet double_space_count\
    \ = words.filter{$0 == \" \" && $1 == \" \"}.count\n\tlet combined_count = space_count\
    \ + double_space_count\n\tif combined_count > 2 {\n\t\tlet fixed_words = words.map\
    \ { $0.replacingOccurrences(of: \" \", with: \"_\") }\n\t\treturn fixed_words.joined(separator:\
    \ \" \")\n\t} else {\n\t\treturn text\n\t}", "\tlet spaces = text.unicodeScalars.filter({\
    \ $0.isSpace }).count\n\tif spaces > 1 {\n\t\treturn text.replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .literal, range: nil)\n\t}\n\treturn text", " \
    \   let regex = NSRegularExpression(pattern: \"[ ]+\", options: nil, error: nil)\n\
    \    return regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions(rawValue:\
    \ 0), range: NSMakeRange(0, countElements(text)).reversed(), withTemplate: \"\
    _\")", "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\", options:\
    \ .regularExpression)\n    var res = \"\"\n    for c in fixed.unicodeScalars {\n\
    \        let hex = String(format: \"%04x\", c.value)\n        res += String(String(c.value))\n\
    \        if !c.isWhitespace() {\n            res += \"_\"\n        }\n       \
    \ if c.value == \" \" && res.length % 2 == 0 {\n            res += \"_\"\n   \
    \     }\n    }\n    return res", "\treturn text\n\t\t.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n\t\t.replacingOccurrences(of: \" {2,}\", with: \"-\")",
  "\tvar result = \"\"\n\tvar prevChar = \"\"\n\ttext.enumerateSubstringsInRange(NSMakeRange(0,\
    \ text.count), options: NSStringEnumerationOptions()) {\n\t\t(subrange, substring,\
    \ _, _) -> Void in\n\t\tif let c = substring?.unicodeScalars.first?.value {\n\t\
    \t\tif c == 0x0020 {\n\t\t\t\tif prevChar == \" \" {\n\t\t\t\t\tresult = result\
    \ + \"-\"\n\t\t\t\t} else {\n\t\t\t\t\tresult = result + \"_\"\n\t\t\t\t}\n\t\t\
    \t} else {\n\t\t\t\tif prevChar == \" \" {\n\t\t\t\t\tresult = result + String(c)\n\
    \t\t\t\t} else {\n\t\t\t\t\tresult = result + String(c)\n\t\t\t\t}\n\t\t\t}\n\t\
    \t\tprevChar = c\n\t\t} else {\n\t\t\tresult = result + substring!\n\t\t}\n\t\
    }\n\treturn result", "    guard let trimmed = text.trimmingCharacters(in: CharacterSet.whitespaces)\
    \ else {\n        return text\n    }\n\n    // Replace all consecutive spaces\
    \ with underscores\n    let replaced = trimmed.replacingOccurrences(of: \" \"\
    , with: \"_\")\n\n    // If there are more than two consecutive spaces\n    //\
    \ then replace all these underscores with dashes\n    let dashless = replaced.replacingOccurrences(of:\
    \ \"_\", with: \"-\")\n    if dashless.count > 2 {\n        // Replace any trailing\
    \ underscores with dashes\n        let trailing = dashless.removeLast()\n    \
    \    let dashless = dashless.replacingOccurrences(of: trailing, with: \"-\")\n\
    \    }\n    return dashless", "    let chars = text.unicodeScalars\n    let counts\
    \ = chars.enumerated().map{$0.offset}\n    let spaces = counts[0..<3].count\n\
    \    let consecutives = counts[spaces...].count\n    let new_spaces = consecutives\
    \ > 2 && spaces > 1 ? consecutives.min(spaces) : spaces\n    return chars.enumerated()\n\
    \        .reduce(\"\") { text, (c, i) -> String in\n            if i == 0 || c\
    \ == \" \" {\n                return text\n            }\n            \n     \
    \       let is_consecutive = c == \" \"\n            let is_first_letter = i !=\
    \ 0\n            let is_last_letter = i == chars.count - 1\n            let replaced\
    \ = is_consecutive && is_first_letter && !is_last_letter ? \"_\" : c\n       \
    \     return text.replacingOccurrences(of: c, with: replaced)\n        }", " \
    \   var res = text\n    if text == \"\" {\n        return text\n    }\n    for\
    \ c in text.unicodeScalars {\n        if c.value == 32 {\n            if res.unicodeScalars.index(before:\
    \ c, after: c, offsetBy: 1) != nil {\n                if res.unicodeScalars.index(before:\
    \ c, after: c, offsetBy: 1) != res.unicodeScalars.index(before: c, after: c, offsetBy:\
    \ 2) {\n                    res = res.replacingOccurrences(of: \" \", with: \"\
    _\")\n                }\n            } else {\n                res = res.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n            }\n        } else {\n            res = res.replacingOccurrences(of:\
    \ c, with: \"_\")\n        }\n    }\n    if text.unicodeScalars.index(before:\
    \ text.endIndex, after: text.endIndex, offsetBy: -1) == nil {\n        res = \"\
    _\" + res\n    }\n    return res", "    guard let string = text.trimmingCharacters(in:\
    \ .whitespaces) else { return text }\n    let fixed = string.components(separatedBy:\
    \ \" \")\n        .joined(separator: \"_\")\n    if fixed.count > 2 {\n      \
    \  fixed = fixed.components(separatedBy: \" \").joined(separator: \"-\")\n   \
    \ }\n    return fixed", "    let spaces = text.replacingOccurrences(of: \" \"\
    , with: \"_\", options: .regularExpression, range: nil)\n    let trailingSpaces\
    \ = text.trimmingCharacters(in: CharacterSet(charactersIn: \"-\"))\n\n    return\
    \ trailingSpaces.count == 1 ? (trailingSpaces + spaces) : spaces", "    var replaced\
    \ = text\n    if let first_space = text.range(of: \" \") {\n        replaced =\
    \ text.replacingOccurrences(of: \" \", with: \"_\", options: .literal, range:\
    \ first_space)\n    }\n    if let last_space = text.range(of: \" \", options:\
    \ .backwards) {\n        replaced = text.replacingOccurrences(of: \" \", with:\
    \ \"_\", options: .literal, range: last_space)\n    }\n    if text.range(of: \"\
    \ \", options: .backwards)?.count == 2 {\n        replaced = text.replacingOccurrences(of:\
    \ \" \", with: \"-\", options: .literal, range: text.range(of: \" \", options:\
    \ .backwards)!)\n    }\n    return replaced", "    let regex = NSRegularExpression(\"\
    \\\\s+\")\n    let replacement = \"_\"\n    return regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0),\n            range: NSMakeRange(0,\
    \ countElements(text)), replacingOccurrencesOfRegex: NSRegularExpression(\"\\\\\
    s+\"), withTemplate: replacement)", "    let regex: NSRegularExpression = NSRegularExpression(pattern:\
    \ \" \\S+\", options: .CaseInsensitive, error: nil)!\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.LiteralSearch, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if text.characters.count > 2 && !(text.characters.count\
    \ == 2 || result.characters.count > 2) {\n        regex = NSRegularExpression(pattern:\
    \ \" \\S+\", options: .CaseInsensitive, error: nil)!\n        result = regex.stringByReplacingMatchesInString(result,\
    \ options: NSMatchingOptions.LiteralSearch, range: NSMakeRange(0, result.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return result", "    var result = text;\n \
    \   for index in 0..<text.characters.count {\n        let char = text.characters[index]\n\
    \        switch char {\n        case \" \":\n            result.replace(char,\
    \ \"_\");\n            if result.characters.count > 2 {\n                result.replace(\"\
    \ \", \"-\");\n            }\n        case \".\", \",\", \"?\", \"!\", \":\",\
    \ \";\", \"\\\"\", \"'\":\n            break;\n        default:\n            break;\n\
    \        }\n    }\n    return result", "    text = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    if text.hasSuffix(\" \")\n        && text.index(text.startIndex,\
    \ offsetBy: text.count) - text.startIndex >= 2\n    {\n        return text.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n    return text", "  let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n  return regex.stringByReplacingMatches(in: text,\
    \ options: NSRegularExpression.MatchingOptions(rawValue: 0), range: NSMakeRange(0,\
    \ text.count), withTemplate: \"_\").lowercased()", "\treturn text\n\t\t.filter{\
    \ $0 == \" \" } // replace all spaces\n\t\t.map{ String($0.unicodeScalars.dropLast())\
    \ } // remove last chars\n\t\t.map{ $0.replaceOccurrences(of: \" \", with: \"\
    _\", options: .regularExpression) } // replace consecutive spaces\n\t\t.map{ $0.capitalized\
    \ } // make everything uppercase\n\t\t.joinWithSeparator(\"_\") // join everything\
    \ with underscores", "    var result = text\n    \n    result.deleteCharacters(in:\
    \ NSRange(location: 0, length: result.length))\n    \n    let spaces = NSCharacterSet.whitespacesAndNewlines\n\
    \    var modified = result.mutableCopy() as! NSMutableString\n    \n    while\
    \ modified.rangeOfCharacter(from: spaces) != nil {\n        modified.replaceCharactersInRange(modified.rangeOfCharacter(from:\
    \ spaces), withString: \"_\")\n    }\n    \n    if modified.rangeOfCharacter(from:\
    \ spaces) != nil {\n        modified.replaceCharactersInRange(modified.rangeOfCharacter(from:\
    \ spaces), withString: \"-\")\n    }\n    \n    while modified.rangeOfCharacter(from:\
    \ spaces, options: String.CompareOptions.backwards) != nil {\n        modified.replaceCharactersInRange(modified.rangeOfCharacter(from:\
    \ spaces, options: String.CompareOptions.backwards), withString: \"-\")\n    }\n\
    \    \n    while modified.rangeOfCharacter(from: spaces, options: String.CompareOptions.backwards,\
    \ range: modified.rangeOfCharacter(from: spaces, options: String.CompareOptions.backwards).range(of:\
    \ \" \")) != nil {\n        modified.replaceCharactersInRange(modified.rangeOfCharacter(from:\
    \ spaces, options: String.CompareOptions.backwards, range: modified.rangeOfCharacter(from:\
    \ spaces, options: String.CompareOptions.backwards).range(of: \" \")), withString:\
    \ \"-\")\n    }\n    \n    while modified.rangeOfCharacter(from: spaces, options:\
    \ String.CompareOptions.backwards, range: modified.rangeOfCharacter(from: spaces,\
    \ options: String.CompareOptions.backwards).range(of: \" \"), rangeEncoding: String.Encoding.utf8)\
    \ == nil {\n        modified.replaceCharactersInRange(modified.rangeOfCharacter(from:\
    \ spaces, options: String.CompareOptions.backwards, range: modified.rangeOfCharacter(from:\
    \ spaces, options: String.CompareOptions.backwards).range(of: \" \"), rangeEncoding:\
    \ String.Encoding.utf8), withString: \"-\")\n    }\n    \n    modified = NSString(string:\
    \ modified)\n    \n    return result", "    \n    var text_ = text\n    var fixed_\
    \ = text_\n    \n    let characterSet = CharacterSet(charactersIn: \"   \")\n\
    \    fixed_ = fixed_.replacingOccurrences(of: characterSet, with: \"_\")\n   \
    \ fixed_ = fixed_.replacingOccurrences(of: \" \", with: \"-\")\n    \n    if fixed_\
    \ != text_ {\n        print(\"fix_spaces: \\(fixed_) --> \\(text_)\")\n    }\n\
    \    \n    return fixed_", "    var fixed_text = text\n    if text!.rangeOfCharacter(from:\
    \ CharacterSet.whitespaces) != nil {\n        var first_space_loc = 0\n      \
    \  var last_space_loc = 0\n        \n        for c in text {\n            if let\
    \ loc = text.index(of: c, options: .backwards) {\n                if loc != last_space_loc\
    \ {\n                    if loc == first_space_loc {\n                       \
    \ fixed_text.removeSubrange(first_space_loc, last_space_loc - first_space_loc\
    \ + 1)\n                    } else {\n                        fixed_text.removeSubrange(first_space_loc,\
    \ last_space_loc - first_space_loc + 1)\n                        fixed_text.removeSubrange(loc,\
    \ last_space_loc - loc + 1)\n                        first_space_loc = loc\n \
    \                   }\n                    last_space_loc = loc\n            \
    \    }\n            }\n        }\n        \n        if first_space_loc != last_space_loc\
    \ {\n            fixed_text.removeSubrange(first_space_loc, last_space_loc - first_space_loc\
    \ + 1)\n        }\n    }\n    \n    return fixed_text", "    \n    var result\
    \ = text\n    \n    result = result.replace(\" \", \"_\")\n    if result.hasPrefix(\"\
    _\") {\n        result = result.substring(1)\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.substring(0, result.length() - 1)\n    }\n  \
    \  \n    \n    if result.hasSuffix(\" \") {\n        result = result.substring(0,\
    \ result.length() - 1)\n    }\n    \n    if result.hasPrefix(\" \") {\n      \
    \  result = result.substring(1)\n    }\n    \n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.substring(1)\n    }\n    \n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.substring(0, result.length() - 1)\n    }\n  \
    \  \n    return result", "    let regex = try! NSRegularExpression(pattern: \"\
    \\\\s{2,}\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, count(text)), withTemplate: \"-\")\n\
    \    return fixed.capitalized", '  return text.stringByReplacingOccurrencesOfString("
    ", withString: "_", options: .CaseInsensitiveSearch, range: nil)', '    return
    text.stringByReplacingOccurrencesOfString(" ", withString: "_", options: NSCaseInsensitiveSearch,
    range: nil)', "\tvar result String = text\n\tlet pattern = \" \\S+\"\n\tlet options\
    \ = NSRegularExpressionOptions(rawValue: 0)\n\tlet range: NSRange = range(of:\
    \ pattern, options: options, range: NSMakeRange(0, text.characters.count))\n\t\
    if range.location != NSNotFound {\n\t\tlet mutableString = NSMutableString(string:\
    \ result)\n\t\tmutableString.replaceSubrange(range, with: \" _\")\n\t\tresult\
    \ = mutableString as String\n\t}\n\tif result.hasSuffix(\" \"){\n\t\tresult.removeLast()\n\
    \t}\n\treturn result", '    return text.stringByReplacingOccurrencesOfString("
    ", withString: "_", options: .LiteralSearch, range: nil)', "\tlet regex = NSRegularExpression(\"\
    \\\\s+\", options: .CaseInsensitive)\n\tlet range = (text as NSString).rangeOfString('\
    \ ', options: .LiteralSearch, range: nil, locale: nil)\n\tlet fixedText = regex.stringByReplacingMatchesInString(text,\
    \ options: .LiteralSearch, range: range, withTemplate: \"_\")\n\tvar result =\
    \ fixedText\n\tif range.location != NSNotFound && fixedText.rangeOfString(' ')\
    \ == nil && fixedText.rangeOfString('_') == nil {\n\t\tresult += \"-\"\n\t}\n\t\
    return result", "    let fixed = text.replacingOccurrences(of: \" \", with: \"\
    _\")\n    let fixed2 = fixed.components(separatedBy: \" \").joined()\n    return\
    \ fixed2.count > 2 ? \"_\" + fixed2 : \"_\" + fixed", "    let result = text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let isLong = result.hasSuffix(\" \")\n    let\
    \ firstSpace = result.index(of: \" \")\n    let lastSpace = result.index(before:\
    \ result.endIndex, offsetBy: -1)\n    if isLong || firstSpace == lastSpace {\n\
    \        let subString = result.substring(from: firstSpace ?? 0)\n        return\
    \ subString.replacingOccurrences(of: \" \", with: \"_\")\n    }\n    return result",
  "    let result = text\n        .stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \        .stringByReplacingOccurrencesOfString(\" \", withString: \"_\")\n   \
    \     .stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n    return\
    \ result", "\ttext = text.replacingOccurrences(of: \" \", with: \"_\")\n\tlet\
    \ result = text.unicodeScalars\n\t\t.flatMap { UnicodeScalar($0) }\n\t\t.map {\
    \ String($0) }\n\t\t.filter { !$0.isWhitespace }\n\t\t.joined()\n\tif result.count\
    \ > 2 {\n\t\tlet splitted = result.split(separator: \"-\")\n\t\tif splitted.count\
    \ > 2 {\n\t\t\tresult = splitted[0] + \"-\" + splitted[1]\n\t\t} else if splitted.count\
    \ == 2 {\n\t\t\tresult = splitted[0] + \"-\" + \"-\"\n\t\t}\n\t}\n\treturn result",
  "    var result = \"\"\n\n    for char in text {\n        if char == \" \" {\n \
    \           let replace = \"_\"\n            result += replace.unicodeScalars.count\n\
    \        } else {\n            result += char\n        }\n    }\n\n    return\
    \ result", '    return text.stringByReplacingOccurrencesOfString(" ", withString:
    "_", options: NSStringCompareOptions.LiteralSearch, range: nil)', "    let spaces\
    \ = [UInt32](repeating: UInt32(0), count: text.count)\n    let replacement = UnicodeScalar(\"\
    \ \").rawValue\n\n    let regex = try! NSRegularExpression(pattern: \" \\S\",\
    \ options: [])\n    \n    guard let match = regex.firstMatch(in: text, range:\
    \ NSRange(location: 0, length: text.count)) else {\n        return text\n    }\n\
    \n    let subRange = match.range(at: 1)\n    let ranges = (0 ..< subRange.location).map\
    \ { NSMakeRange(0, 1) }\n    let result = NSMutableString(string: text, length:\
    \ text.count)\n    result.replaceCharacters(in: ranges, with: replacement)\n \
    \   \n    for _ in 0 ..< subRange.location {\n        result.deleteCharacters(in:\
    \ NSMakeRange(0, 1))\n    }\n    \n    return result.stringByReplacingOccurrencesOfString(\"\
    \ \", with: \"\", options: .literal, range: subRange)", "    let replacements\
    \ = [\" \", \"-\"]\n    let regex = try! NSRegularExpression(pattern: \" +\",\
    \ options: [])\n    let fixed = regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSRange(location: 0, length: text.utf16.count), withTemplate: replacements[0])\n\
    \    if fixed.range(of: replacements[0]).location == NSNotFound {\n        return\
    \ fixed\n    }\n    let lastSpaceIndex = fixed.index(fixed.startIndex, offsetBy:\
    \ fixed.range(of: replacements[0]).location)\n    if lastSpaceIndex == NSNotFound\
    \ {\n        return fixed\n    }\n    let firstSpaceIndex = fixed.index(fixed.startIndex,\
    \ offsetBy: lastSpaceIndex)\n    let fixedRange = NSMakeRange(firstSpaceIndex,\
    \ fixed.distance(from: fixed.startIndex, to: lastSpaceIndex))\n    return fixed.substringWithRange(fixedRange)",
  '    return text.stringByReplacingOccurrencesOfString(" ", withString: "_", options:
    NSStringCompareOptions.RegularExpressionSearch, range: nil)', "    let regex =\
    \ NSRegularExpression.regularExpressionWithPattern(\"[ ]+\", options:0, error:nil)!\n\
    \    let matches = regex.matchesInString(text, options:0, range:NSMakeRange(0,\
    \ text.length))\n    if matches.count > 0 {\n        var modifiedString = text\n\
    \        for m in matches {\n            modifiedString = modifiedString.stringByReplacingOccurrencesOfString(String(m.range),\
    \ withString: \"_\", options: NSString.CompareOptions.RegularExpressionSearch,\
    \ range: nil)\n        }\n        for m in matches {\n            modifiedString\
    \ = modifiedString.stringByReplacingOccurrencesOfString(String(m.range), withString:\
    \ \"-\", options: NSString.CompareOptions.RegularExpressionSearch, range: nil)\n\
    \        }\n        return modifiedString\n    } else {\n        return text\n\
    \    }", "    let spaceRegex = CharacterSet.whitespaces\n    let replaceRegex\
    \ = CharacterSet.newlines + \"-\" + \" \"\n    \n    let fixedString = text.filter({\
    \ spaceRegex.contains($0) }).map({ $0.replacingOccurrences(of: \" \", with: \"\
    _\") }).map({ $0.replacingOccurrences(of: replaceRegex, with: \"\") })\n    \n\
    \    if fixedString.count > 2 {\n        return fixedString\n    } else {\n  \
    \      return fixedString[0]\n    }", "    return text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).\n    components(separatedBy: \" \").\n    joined(separator:\
    \ \"_\").\n    dropLast().\n    dropFirst()", "    if text == \"\" {\n       \
    \ return text\n    }\n    var text = text\n    let regex = try! NSRegularExpression(pattern:\
    \ \" {2,}\", options: [])\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, count(text)), withTemplate: \"-\")\n\
    \    \n    if result.characters.count > count(text) - 1 {\n        result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    }\n    \n    return text", "    return text.replace(\"\
    \ \", \"_\")\n        .stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"-\")", "    let spaceCount = text.countOfSpaces()\n    if spaceCount > 1 {\n\
    \        let newText = text.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"_\", options: .LiteralSearch, range: nil)\n        return newText.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\", options: .LiteralSearch, range: nil)\n    } else {\n\
    \        return text\n    }", "    let mut buffer = StringBuffer::new();\n   \
    \ for c in text.unicodeScalars.cloned() {\n        if c == Character::Space {\n\
    \            buffer.write(\"_\");\n        } else if c == Character::Newline ||\
    \ c == Character::Return {\n            buffer.write(\" \");\n        } else {\n\
    \            buffer.write(c);\n        }\n    }\n    if buffer.is_empty() {\n\
    \        return text;\n    }\n    return buffer.take_last().to_string();", " \
    \   var result = text\n    let regex = try! NSRegularExpression(pattern: \" \"\
    , options: [])\n    result = regex.stringByReplacingMatches(in: result,\n    \
    \                                          options: [],\n                    \
    \                          range: NSMakeRange(0, result.characters.count),\n \
    \                                             withTemplate: \"_\")\n    let regex\
    \ = try! NSRegularExpression(pattern: \" +\", options: [])\n    result = regex.stringByReplacingMatches(in:\
    \ result,\n                                              options: [],\n      \
    \                                        range: NSMakeRange(0, result.characters.count),\n\
    \                                              withTemplate: \"-\")\n    return\
    \ result", "    let spaces = \" \".unicodeScalars\n    let underscores = \"_\"\
    .unicodeScalars\n\n    var output = text\n    var lastSpace: Character? = nil\n\
    \n    for s in spaces {\n        if lastSpace == nil || lastSpace!.value > s.value\
    \ {\n            output = output.replacingOccurrences(of: s, with: underscores)\n\
    \            lastSpace = s\n        }\n    }\n\n    return output", "    var result\
    \ = \"\"\n    var spaceCount = 0\n    \n    for c in text {\n        if c == \"\
    \ \" {\n            spaceCount = spaceCount + 1\n        } else {\n          \
    \  if spaceCount > 1 {\n                spaceCount = spaceCount - 1\n        \
    \        let dashCount = text.length - result.characters.count - 1\n         \
    \       result = (result.characters.last != \" \") ? result + \"-\" : \"\"\n \
    \               result += String(dashCount * 2)\n            }\n            result\
    \ += String(c)\n        }\n    }\n    return result", "    var result = text\n\
    \    if !result.isEmpty {\n        let regex = \"\\\\s+\"\n        let replacement\
    \ = \" \"\n        result = result.replacingOccurrences(of: regex, with: replacement)\n\
    \    }\n    if result.hasPrefix(\"_\") {\n        let regex = \" \"\n        let\
    \ replacement = \"-\"\n        result = result.replacingOccurrences(of: regex,\
    \ with: replacement)\n    }\n    return result", '    return text.trim().replaceAll("
    ", "_")', "    // TODO: This should use unicodeScalars instead of unicodeScalarString\n\
    \    let spaces = unicodeScalar(\" \").value\n    let spaceInd = text.unicodeScalars.indexOf(spaces)\n\
    \    if spaceInd != -1 {\n        let spaceIndEnd = text.unicodeScalars.rangeOfCharacter(from:\
    \ spaces, options: .backwards).lowerBound\n        let spacesInd = text.unicodeScalars.distance(from:\
    \ text.unicodeScalars.startIndex, to: spaceIndEnd)\n        // The spaces are\
    \ consecutive.\n        if spacesInd == 2 {\n            let dash = unicodeScalar(\"\
    -\").value\n            let dashInd = text.unicodeScalars.indexOf(spaces, options:\
    \ .backwards)\n            if dashInd == -1 { return text }\n            let dashIndEnd\
    \ = text.unicodeScalars.rangeOfCharacter(from: dash, options: .backwards).lowerBound\n\
    \            let dashIndInner = text.unicodeScalars.distance(from: dashIndEnd,\
    \ to: dashInd)\n            // Remove the dash as well.\n            text.unicodeScalars[dashIndInner..<text.unicodeScalars.endIndex]\
    \ = nil\n            text.unicodeScalars[text.unicodeScalars.endIndex..<dashIndEnd]\
    \ = nil\n            // Add the dash back.\n            text.unicodeScalars[dashIndEnd..<text.unicodeScalars.endIndex]\
    \ = dash\n            return text\n        }\n    }\n    return text", "    let\
    \ pattern = \" +\"\n    let replacement = \"_\"\n    var newText = text\n    newText\
    \ = newText.replacingOccurrences(of: pattern, with: replacement)\n    newText\
    \ = newText.replacingOccurrences(of: pattern, with: replacement, options: .regularExpression)\n\
    \    if newText != text {\n        return fix_spaces(text: newText)\n    }\n \
    \   return newText", "    let regex = NSRegularExpression.escapedPattern(for:\
    \ \"\\\\s+\")\n    let result = regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.count), withTemplate: \" \")\n    let regex =\
    \ NSRegularExpression.escapedPattern(for: \"\\\\s{2,}\")\n    let result = regex.stringByReplacingMatches(in:\
    \ result, options: [], range: NSMakeRange(0, result.count), withTemplate: \"-\"\
    )\n    return result", "    let replacement = \" \".characters.map{ String($0)\
    \ }.joined().map { $0.isUppercase() ? \"_\"+$0 : $0 }\n    var string = text\n\
    \    var fixedString = \"\"\n    for char in string.characters {\n        if char\
    \ == \" \" {\n            if let index = text.index(of: char) {\n            \
    \    if index + 1 < string.characters.count {\n                    if string[index\
    \ + 1] == \" \" {\n                        fixedString += \"-\"\n            \
    \        } else {\n                        fixedString += replacement\n      \
    \              }\n                }\n            }\n        } else {\n       \
    \     fixedString += char\n        }\n    }\n    return fixedString", "    let\
    \ space_repl = \"_\"\n    let consecutive_repl = \"-\"\n    \n    var result =\
    \ \"\"\n    \n    for ch in text {\n        if ch == \" \" {\n            result\
    \ += space_repl\n        }\n        \n        if result != \"\" {\n          \
    \  if ch == \" \" && result[result.startIndex-1] == space_repl {\n           \
    \     result += \"-\"\n            } else {\n                result += consecutive_repl\n\
    \            }\n        }\n    }\n    \n    return result", "    let regex = NSRegularExpression.init(pattern:\
    \ \"\\\\s+\", options: .caseInsensitive)\n    let modifiedString = regex.stringByReplacingMatchesInString(text,\
    \ options: .MatchingAnchored, range: NSMakeRange(0, text.length), withTemplate:\
    \ \"_\")\n    if modifiedString.hasSuffix(\"_\") {\n        modifiedString = modifiedString.substringToIndex(modifiedString.length()\
    \ - 1)\n    }\n    if modifiedString.hasPrefix(\"_\") {\n        modifiedString\
    \ = modifiedString.substringFromIndex(1)\n    }\n    return modifiedString", " \
    \   text.split(separator: \" \").map {\n        if $0 == \" \" && text.index(before:\
    \ String($0), after: \" \") != nil {\n            return \"_\" + String(text.index(before:\
    \ String($0), after: \" \")!)\n        } else {\n            return String($0)\n\
    \        }\n    }.joined()", "    let fixed = text\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\", options: .regularExpression)\n    \n    return fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\", options: .regularExpression)", "    return text.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \        .replacingOccurrencesOfString(\" \", withString: \"_\")\n        .replacingOccurrencesOfString(\"\
    \ \", withString: \"-\", options: NSStringCompareOptions.RegularExpressionSearch,\
    \ range: nil)", "    if text == \"\" {\n        return text\n    }\n\n    space_regex\
    \ = \"(^| )(.+) (.+) (\\1|\\1$)\"\n    let regex = NSRegularExpression(pattern:\
    \ space_regex, options: 0, error: nil)!\n    var replaced = \"\"\n    var index\
    \ = text.startIndex\n    while regex.numberOfMatchesInString(text, options: 0)\
    \ > 0 {\n        let match = regex.rangeAtIndex(0).location\n        replaced\
    \ = text.replacingCharacters(in: NSRange(location: index, length: text.length\
    \ - index), with: text[index...match.rangeAtIndex(2)])\n        index = match.rangeAtIndex(1).location\
    \ + match.rangeAtIndex(1).length - 1\n    }\n    replaced = replaced\n       \
    \ + text[index...text.endIndex]\n        .replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    return replaced", "    let spaces = text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    guard spaces.count == text.count else { return\
    \ text }\n    if text.hasPrefix(spaces) {\n        return String(text.dropFirst())\n\
    \    }\n    return String(text.dropLast()) + \"_\" + String(text.prefix(spaces.count))",
  "    if text.hasPrefix(\" \") {\n        text = text.prefix(text.startIndex.distanceTo(text.startIndex.advancedBy(1)))\n\
    \    }\n    \n    if text.characters.count == 2 {\n        return text\n    }\n\
    \    \n    var newText = text\n    \n    guard let start = text.index(of: \" \"\
    , options: .backwards),\n        let end = text.index(of: \" \", options: .backwards,\
    \ range: start..<text.endIndex) else {\n            return newText\n    }\n  \
    \  \n    var replacedIndex = 0\n    \n    for i in start..<end {\n        guard\
    \ let _ = text.character(at: i),\n            let _ = text.character(at: i + 1)\
    \ else {\n                newText = newText.prefix(replacedIndex)\n          \
    \      break\n        }\n        \n        let char = text.character(at: i)\n\
    \        let nextChar = text.character(at: i + 1)\n        \n        switch char\
    \ {\n        case \" \":\n            newText = newText.replaceSubrange(start..<i+1,\
    \ with: \"_\")\n            replacedIndex += 1\n        case \"-\":\n        \
    \    if nextChar == \" \" {\n                newText = newText.replaceSubrange(start..<i+1,\
    \ with: \"_\")\n                replacedIndex += 1\n            } else if nextChar\
    \ == \"-\" {\n                newText = newText.replaceSubrange(start..<i+1, with:\
    \ \"_\")\n                replacedIndex += 1\n            } else {\n         \
    \       newText = newText.replaceSubrange(start..<i+1, with: \"-\")\n        \
    \        replacedIndex += 1\n            }\n        default:\n            newText\
    \ = newText.replaceSubrange(start..<i+1, with: char)\n        }\n    }\n    \n\
    \    if replacedIndex < text.count {\n        newText = newText.prefix(replacedIndex)\n\
    \    }\n    \n    return newText", "    if text == \"\" || text == \"\\n\" {\n\
    \        return \"\"\n    }\n\n    var result = text\n\n    guard let firstSpaceIndex\
    \ = result.index(of: \" \") else {\n        return result\n    }\n    var lastSpaceIndex\
    \ = firstSpaceIndex\n\n    for character in text {\n        if character == \"\
    \ \" {\n            if lastSpaceIndex != firstSpaceIndex {\n                result.replaceSubrange(lastSpaceIndex...firstSpaceIndex,\
    \ with: \"_\")\n            }\n\n            lastSpaceIndex = result.index(of:\
    \ character, in: lastSpaceIndex...firstSpaceIndex) + character.count\n       \
    \ } else {\n            lastSpaceIndex = result.index(of: character, in: lastSpaceIndex...firstSpaceIndex)\
    \ + character.count\n        }\n    }\n\n    if lastSpaceIndex != result.endIndex\
    \ {\n        result.replaceSubrange(lastSpaceIndex...result.endIndex, with: \"\
    \")\n    }\n\n    return result", "    var result = text\n\n    // Replace all\
    \ spaces with underscores\n    result = result.replacingOccurrences(of: \" \"\
    , with: \"_\")\n\n    // If text has more than 2 consecutive spaces\n    if result.hasPrefix(\"\
    \ \") {\n        // Replace all consecutive spaces with -\n        result = result.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n\n    return result", "    let trimmed = text.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let count = trimmed.count\n    if\
    \ count > 2 && count % 2 == 1 {\n        return trimmed.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    }\n    return trimmed", "    if text.hasPrefix(\" \"\
    ) {\n        let firstSpace = text.index(text.startIndex, offsetBy: 0)\n     \
    \   let lastSpace = text.index(text.endIndex, offsetBy: 0)\n        guard firstSpace\
    \ == lastSpace else {\n            return text\n        }\n        guard lastSpace\
    \ != text.endIndex else {\n            return text\n        }\n        guard lastSpace\
    \ > firstSpace else {\n            return text\n        }\n        var textWithoutSpaces\
    \ = text.replacingOccurrences(of: \" \", with: \"_\")\n        if textWithoutSpaces.count\
    \ > 2 {\n            textWithoutSpaces = textWithoutSpaces.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        }\n        return textWithoutSpaces\n    }\n  \
    \  return text", "    return text\n        .components(separatedBy: .whitespacesAndNewlines)\n\
    \        .joined(separator: \"-\")\n        .lowercased()", "    // Find out how\
    \ many spaces there are\n    let spaces = text.countOfString(\" \")\n    if spaces\
    \ == 0 {\n        return text\n    }\n    if spaces == 1 {\n        return text\n\
    \    }\n\n    // If there are more than 2 consecutive spaces\n    if spaces >\
    \ 2 {\n        // We fix the spaces like this example\n        let example = text.replacingOccurrences(of:\
    \ \" \\ \", with: \"_\")\n\n        // We insert - between consecutive spaces\
    \ like this example\n        let example2 = example.replacingOccurrences(of: \"\
    \ \\ \", with: \"-\")\n\n        // Return concatenation between all of these\
    \ examples\n        return example2\n    }\n\n    // If there is only one space\
    \ then return it\n    return text", "    let result = text\n        .stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n        .stringByReplacingOccurrencesOfString(\" \\\"\
    \", withString: \"\")\n        .stringByReplacingOccurrencesOfString(\" _\", withString:\
    \ \"-\")\n        .stringByReplacingOccurrencesOfString(\" \\\"\", withString:\
    \ \"\")\n    return result;", "    let fixed = text\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"\")\n    return fixed", "  \
    \  let fixed = text.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let count = fixed.count\n    return ((fixed != \"\") ? fixed : (\"-\" + String(count\
    \ - 2)))", "    var new_text = \"\"\n    for char in text {\n        switch char\
    \ {\n        case '_':\n            new_text += \"-\"\n        case '\\t':\n \
    \           new_text += \"\\t\"\n        default:\n            new_text += char\n\
    \        }\n    }\n    \n    new_text = new_text.trimmingCharacters(in: CharacterSet(charactersIn:\
    \ \" \"))\n    \n    if new_text.count == 0 {\n        new_text = \"_\"\n    }\n\
    \    \n    return new_text", "    var text = text\n    if text == \"\" {\n   \
    \     return \"\"\n    }\n    if text[0] == ' ' {\n        text = text.substringToIndex(text.startIndex.advancedBy(1))\n\
    \    }\n    while true {\n        var index = text.index(\n            of: \"\
    \ \",\n            in: text,\n            options: .backwardsSearch\n        )\n\
    \        if index == NSNotFound {\n            break\n        }\n        text\
    \ = text.substringToIndex(index.advancedBy(1))\n    }\n    while true {\n    \
    \    var index = text.index(\n            of: \" \",\n            in: text,\n\
    \            options: .backwardsSearch\n        )\n        if index == NSNotFound\
    \ {\n            break\n        }\n        text = text.substringToIndex(index.advancedBy(-1))\n\
    \    }\n    while true {\n        var index = text.index(\n            of: \"\
    \ \",\n            in: text,\n            options: .backwardsSearch\n        )\n\
    \        if index == NSNotFound {\n            break\n        }\n        text\
    \ = text.substringFromIndex(index.advancedBy(-1))\n    }\n    if text == \"\"\
    \ {\n        return \"\"\n    }\n    return text", "    var fixed = text\n   \
    \ if fixed == text {\n        return fixed\n    }\n\n    fixed = fixed.unicodeScalars\n\
    \        .filter() { return $0.isWhitespace }\n        .map { $0.unicodeScalars.map\
    \ { String($0) } }\n        .joined(separator: \"_\")\n    return fixed", "  \
    \  var result = \"\"\n    for c in text.unicodeScalars {\n        if c.value >\
    \ 32 { // not space\n            result += c.value\n            continue\n   \
    \     }\n        switch c.value {\n        case 32:\n            result += \"\
    -\"\n        case 32:\n            result += \" \"\n        default:\n       \
    \     result += \"_\"\n        }\n    }\n    return result", "\tlet charsToReplace\
    \ = NSCharacterSet.whitespaceAndNewlineCharacterSet()\n\tlet range: NSRange\n\t\
    let text = text.replacingOccurrences(of: \" \", with: \"_\", options: .regularExpression)\n\
    \trange = NSMakeRange(0, text.length)\n\twhile range.location != NSNotFound {\n\
    \t\tlet nextSpaceIndex = text.range(of: \" \", options: .backwards)?.lowerBound\n\
    \t\tlet startIndex = nextSpaceIndex\n\t\tlet endIndex = nextSpaceIndex\n\t\tif\
    \ endIndex != NSNotFound {\n\t\t\tendIndex = text.range(of: \" \", options: .backwards)?.upperBound\n\
    \t\t}\n\t\tlet subString = (text as NSString).substring(with: NSMakeRange(startIndex,\
    \ endIndex - startIndex))\n\t\tif subString.count > 2 {\n\t\t\ttext = (text as\
    \ NSString).replacingOccurrences(of: \" \", with: \"-\", options: .regularExpression)\n\
    \t\t}\n\t\trange = NSMakeRange(nextSpaceIndex!+1, 0)\n\t}\n\treturn text as String",
  "    let fixedText = text\n    fixedText.replaceOccurrences(of: \" \", with: \"\
    _\", options: .literal, range: nil)\n    fixedText.replacingOccurrences(of: \"\
    \ \", with: \"-\", options: .literal, range: nil)\n    return fixedText", "  return\
    \ text.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n    .components(separatedBy:\
    \ CharacterSet.whitespaces)\n    .joined(separator: \"-\")\n    .replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    if text == \"\" {\n        return text\n    }\n \
    \   let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ NSRegularExpressionOptions.CaseInsensitive, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithTransparentBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if result.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive,\
    \ error: nil)\n        result = regex.stringByReplacingMatchesInString(result,\
    \ options: NSMatchingOptions.WithTransparentBounds, range: NSMakeRange(0, result.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return result", "  return text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n        .replacingOccurrences(of: \" \", with: \"\
    _\")\n        .replacingOccurrences(of: \" \", with: \"-\")", "    return text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" {2,}\", with: \"-\"\
    )", "    var new_str = text\n    let regex = NSRegularExpression(pattern: \"\\\
    \\s+\", options: NSRegularExpression.Options.CaseInsensitive)\n    new_str = regex.stringByReplacingMatchesInString(new_str,\
    \ options: nil, range: NSMakeRange(0, new_str.characters.count), withTemplate:\
    \ \"_\")\n    let regex = NSRegularExpression(pattern: \"  \", options: NSRegularExpression.Options.CaseInsensitive)\n\
    \    new_str = regex.stringByReplacingMatchesInString(new_str, options: nil, range:\
    \ NSMakeRange(0, new_str.characters.count), withTemplate: \"-\")\n    return new_str",
  "    let res = text.trimmingCharacters(in: .whitespacesAndNewlines)\n    guard res.count\
    \ == text.count else { return res }\n    if res.hasPrefix(\" \") {\n        let\
    \ start = res.index(before: res.startIndex)\n        let end = res.index(before:\
    \ res.endIndex, offsetBy: -2)\n        res.insert(start, with: \" \")\n      \
    \  res.insert(end, with: \"-\")\n    }\n    return res", "\ttext = text.gsub(\
    \ \" \", \"_\" )\n\tlet matches = text.gsub( \"  \", \" -\" )\n\tlet firstSpaceIndex\
    \ = text.index(text.startIndex, offsetBy: 0)\n\tif text.startIndex != firstSpaceIndex\
    \ {\n\t\ttext = text.substring(to: firstSpaceIndex)\n\t}\n\treturn text", '    return
    NSString(string: text).stringByReplacingOccurrencesOfString(" ", withString: "_",
    options: NSStringCompareOptions.LiteralSearch, range: nil)', "    let replacement\
    \ = NSCharacterSet.whitespacesAndNewlines\n    let attributes = NSMutableAttributedString(string:\
    \ text)\n    attributes.enumerateAttribute(.string, in: NSRange(0..<text.count))\
    \ { \n        attribute, _, _, _ in\n        if let range = attribute.range\n\
    \        {\n            let trimmed = text.replacingOccurrences(of: \" \", with:\
    \ \"_\", options: .regularExpression)\n            attribute.replaceCharactersInRange(range,\
    \ with: trimmed)\n        }\n    }\n    return String(attributedString: attributes)",
  "    \n    let s = text\n        .characters\n        .reduce(\"\") { $0 + ($1.isWhitespace\
    \ ? \"_\" : \" \") + $1 }\n    \n    let length = s.characters.count\n    \n \
    \   return length < 2 ? s : s", "    text.split(\" \").map { $0.replaceWith(\"\
    -\") }\n        .joined()\n        .replaceAll(\" \", \"-\")", "    let result\
    \ = text.replacingOccurrences(of: \" \", with: \"_\")\n    return result.replacingOccurrences(of:\
    \ \" \", with: \"-\")", "    // Find all spaces and replace them with underscores\n\
    \    var result = text.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"_\")\n    // If there are 2 or more spaces, replace all spaces with -\n  \
    \  if result.rangeOfString(\"-\", options: .BackwardsSearch, range: nil, locale:\
    \ nil) != nil {\n        result = result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")\n    }\n    // Remove all non-alphanumeric characters\
    \ (except -, 0-9 and _)\n    // and replace spaces with _\n    result = result.stringByReplacingOccurrencesOfString(\"\
    [^0-9_\\\\-]\", withString: \"\", options: .RegularExpressionSearch, range: nil,\
    \ locale: nil)\n    // Replace multiple consecutive spaces with a single one\n\
    \    if result.rangeOfString(\"-\", options: .BackwardsSearch, range: nil, locale:\
    \ nil) != nil {\n        result = result.stringByReplacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"-\")\n    }\n    return result", "    var result = text\n\
    \    \n    var i = 0\n    while i < text.count {\n        if text[i] == \" \"\
    \ {\n            if i+1 < text.count && text[i+1] == \" \" {\n               \
    \ result += \"_\"\n                i += 2\n            } else {\n            \
    \    result += \"-\"\n                i += 1\n            }\n        } else {\n\
    \            i += 1\n        }\n    }\n    \n    return result", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\n        \"\\\\s+\",\n \
    \       options: NSRegularExpressionOptions(rawValue: 0),\n        error: nil\n\
    \    )\n    return regex.stringByReplacingMatchesInString(\n        text, \n \
    \       options: nil, \n        range: NSMakeRange(0, text.characters.count),\
    \ \n        withTemplate: \"_\"\n    )", "    var result = text\n    for c in\
    \ text.unicodeScalars {\n        let count = count(from: c, to: c)\n        if\
    \ count > 1 {\n            result = result.replacingOccurrences(of: String(repeating:\
    \ \"_\", count: count), with: \"\")\n        } else if count == 1 {\n        \
    \    result = result.replacingOccurrences(of: c, with: String(repeating: \"_\"\
    , count: 1) + String(unicodeScalars.first!))\n        }\n    }\n    return result",
  '    return text.stringByReplacingOccurrencesOfString(" ", withString: "_", options:
    NSStringCompareOptions.LiteralSearch, range: nil)', "  let words = text.split(separator:\
    \ \" \")\n  var result = \"\"\n  for word in words {\n    if word.count > 2 {\n\
    \      let components = word.components(separatedBy: \" \")\n      for component\
    \ in components {\n        if component != \" \" {\n          component += \"\
    -\"\n        }\n      }\n      result += \" \" + word\n    }\n    else {\n   \
    \   result += word\n    }\n  }\n  return result", "    var fixed = text\n    fixed\
    \ = fixed.replace(\" \", \"_\")\n    fixed = fixed.characters.filter { $0 != \"\
    _\" }.joinWithSeparator(\"\")\n    fixed = fixed.characters.filter { $0 != \"\
    _\" }.joinWithSeparator(\"\")\n    fixed = fixed.characters.filter { $0 != \"\
    _\" }.joinWithSeparator(\"-\")\n    return fixed", "    return text.trimmingCharacters(in:\
    \ .whitespaces)\n        .stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"_\")\n        .replacingOccurrencesOfString(\" -\", withString: \"-\")", " \
    \   let fixed = text.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).components(separatedBy:\
    \ \" \").joined(separator: \"_\")\n    let doubleSpaces = fixed.components(separatedBy:\
    \ \" \").count > 1\n    return doubleSpaces ? fixed.replacingOccurrences(of: \"\
    \ \", with: \"-\") : fixed"]
stop_tokens:
- "\n}"
