language: swift
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var res = 0.0\n  for num in lst {\n \
    \   res += pow(num, 2)\n  }\n  return Int(ceil(res))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpeuuvi7rv.swift:19:12: error: cannot find 'pow' in scope\n    res\
    \ += pow(num, 2)\n           ^~~\n/tmp/tmpeuuvi7rv.swift:21:14: error: cannot\
    \ find 'ceil' in scope\n  return Int(ceil(res))\n             ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let squareSum = lst.flatMap { $0 *\
    \ $0 }.reduce(0.0, +)\n    return Int(round(squareSum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpibroij99.swift:17:25: warning: 'flatMap' is deprecated: Please\
    \ use compactMap(_:) for the case where closure returns an optional value\n  \
    \  let squareSum = lst.flatMap { $0 * $0 }.reduce(0.0, +)\n                  \
    \      ^\n/tmp/tmpibroij99.swift:17:25: note: use 'compactMap(_:)' instead\n \
    \   let squareSum = lst.flatMap { $0 * $0 }.reduce(0.0, +)\n                 \
    \       ^~~~~~~\n                        compactMap\n/tmp/tmpibroij99.swift:18:16:\
    \ error: cannot find 'round' in scope\n    return Int(round(squareSum))\n    \
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  for num in lst {\n   \
    \ sum += pow(num, 2.0)\n  }\n  return Int(ceilf(Double(sum)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpo1uv5c1a.swift:19:12: error: cannot find 'pow' in scope\n    sum\
    \ += pow(num, 2.0)\n           ^~~\n/tmp/tmpo1uv5c1a.swift:21:14: error: cannot\
    \ find 'ceilf' in scope\n  return Int(ceilf(Double(sum)))\n             ^~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let n = lst.count\n    let sum = 0\n\
    \    let sq = 0\n    for i in 0..<n {\n        sq += Double(i) * Double(i)\n \
    \       sum += sq\n    }\n    return round(sum)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6eieowpb.swift:21:9: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        sq += Double(i) * Double(i)\n  \
    \      ^\n        Double( )\n/tmp/tmp6eieowpb.swift:22:13: error: left side of\
    \ mutating operator isn't mutable: 'sum' is a 'let' constant\n        sum += sq\n\
    \        ~~~ ^\n/tmp/tmp6eieowpb.swift:18:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let sum = 0\n    ^~~\n    var\n/tmp/tmp6eieowpb.swift:24:12:\
    \ error: cannot find 'round' in scope\n    return round(sum)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    for value in lst\
    \ {\n        sum += value * value\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpmutv6sif.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.roundToInt().squared().roundToInt().value\
    \ }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppvi0iq4s.swift:17:69: error: value of type 'Array<_>' has no member\
    \ 'sum'\n    return lst.map { $0.roundToInt().squared().roundToInt().value }.sum()\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmppvi0iq4s.swift:17:25:\
    \ error: value of type 'Double' has no member 'roundToInt'\n    return lst.map\
    \ { $0.roundToInt().squared().roundToInt().value }.sum()\n                   \
    \  ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0.0\n    for i in lst\
    \ {\n        let tmp = (Int(ceil(i))).squared() + i * i\n        result -= tmp\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpl5tbp_s3.swift:19:24: error: cannot find 'ceil' in scope\n    \
    \    let tmp = (Int(ceil(i))).squared() + i * i\n                       ^~~~\n\
    /tmp/tmpl5tbp_s3.swift:19:34: error: reference to member 'squared' cannot be resolved\
    \ without a contextual type\n        let tmp = (Int(ceil(i))).squared() + i *\
    \ i\n                                 ^\n/tmp/tmpl5tbp_s3.swift:22:12: error:\
    \ cannot convert return expression of type 'Double' to return type 'Int'\n   \
    \ return result\n           ^~~~~~\n           Int(  )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(round(Double(sum) * 0.5))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbb_w_5be.swift:21:16: error: cannot find 'round' in scope\n   \
    \ return Int(round(Double(sum) * 0.5))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    var i = 0\n    for\
    \ n in lst {\n        sum += ((n - Int(n)) * Int(n))\n        i = i + 1\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj2onotno.swift:20:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += ((n - Int(n)) * Int(n))\n  \
    \               ^\n                 Int( )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ Int($0 * $0) }.reduce(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpg7y1hwpq.swift:17:44: error: missing argument for parameter #2\
    \ in call\n    return lst.map{ Int($0 * $0) }.reduce(0)\n                    \
    \                       ^\n                                           , <#(Int,\
    \ Int) throws -> Int#>\nSwift.Sequence:2:28: note: 'reduce' declared here\n  \
    \  @inlinable public func reduce<Result>(_ initialResult: Result, _ nextPartialResult:\
    \ (_ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(Double(sum))) // TODO: consider\
    \ return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3xk_ectd.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp3xk_ectd.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(Double(sum))) // TODO: consider return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  for i in lst {\n    sum\
    \ += i * i\n  }\n  return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpfywc4xyw.swift:19:14: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    sum += i * i\n             ^\n        \
    \   Int( )\n/tmp/tmpfywc4xyw.swift:21:14: error: cannot find 'ceil' in scope\n\
    \  return Int(ceil(sum))\n             ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.count <= 0 {\n        return\
    \ -1\n    }\n    \n    let sqrtSum = lst.map { $0.pow $0 * $0 }.reduce(0, +)\n\
    \    \n    return lst.map { Int($0.pow $0 * $0) }.max() ?? -1 * sqrtSum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpffkl8dea.swift:21:35: error: consecutive statements on a line must\
    \ be separated by ';'\n    let sqrtSum = lst.map { $0.pow $0 * $0 }.reduce(0,\
    \ +)\n                                  ^\n                                  ;\n\
    /tmp/tmpffkl8dea.swift:23:33: error: expected ',' separator\n    return lst.map\
    \ { Int($0.pow $0 * $0) }.max() ?? -1 * sqrtSum\n                            \
    \    ^\n                               ,\n/tmp/tmpffkl8dea.swift:21:32: error:\
    \ value of type 'Double' has no member 'pow'\n    let sqrtSum = lst.map { $0.pow\
    \ $0 * $0 }.reduce(0, +)\n                            ~~ ^~~\n/tmp/tmpffkl8dea.swift:23:29:\
    \ error: value of type 'Double' has no member 'pow'\n    return lst.map { Int($0.pow\
    \ $0 * $0) }.max() ?? -1 * sqrtSum\n                         ~~ ^~~\n/tmp/tmpffkl8dea.swift:23:25:\
    \ error: missing argument label 'radix:' in call\n    return lst.map { Int($0.pow\
    \ $0 * $0) }.max() ?? -1 * sqrtSum\n                        ^\n              \
    \                  radix: \n/tmp/tmpffkl8dea.swift:23:36: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n    return lst.map {\
    \ Int($0.pow $0 * $0) }.max() ?? -1 * sqrtSum\n                              \
    \     ^\n                                Int(   )\n/tmp/tmpffkl8dea.swift:23:22:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return lst.map { Int($0.pow $0 * $0) }.max() ?? -1 * sqrtSum\n          \
    \           ^\n/tmp/tmpffkl8dea.swift:23:22: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return lst.map { Int($0.pow\
    \ $0 * $0) }.max() ?? -1 * sqrtSum\n                     ^\n                 \
    \                        ?? <#default value#>\n/tmp/tmpffkl8dea.swift:23:22: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return lst.map { Int($0.pow $0 * $0) }.max() ?? -1 * sqrtSum\n          \
    \           ^\n                                        !\n"
  stdout: ''
  timestamp: 1660009851
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.roundingMode(.ceiling)\
    \ }.reduce(0.0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1w2jdisz.swift:17:50: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return lst.map { $0.roundingMode(.ceiling)\
    \ }.reduce(0.0, +)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\n\
    \           Int(                                                )\n/tmp/tmp1w2jdisz.swift:17:25:\
    \ error: value of type 'Double' has no member 'roundingMode'\n    return lst.map\
    \ { $0.roundingMode(.ceiling) }.reduce(0.0, +)\n                     ~~ ^~~~~~~~~~~~\n\
    /tmp/tmp1w2jdisz.swift:17:39: error: cannot infer contextual base in reference\
    \ to member 'ceiling'\n    return lst.map { $0.roundingMode(.ceiling) }.reduce(0.0,\
    \ +)\n                                     ~^~~~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbm08s543.swift:17:22: error: extraneous argument label 'combine:'\
    \ in call\n    return lst.reduce(0, combine: +)\n                     ^   ~~~~~~~~~\n\
    \                         \n/tmp/tmpbm08s543.swift:17:35: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, Double) throws\
    \ -> Int'\n    return lst.reduce(0, combine: +)\n                            \
    \      ^\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result: Int = 0\n    for i in lst\
    \ {\n        result = result + Int(i * i)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpr4zlt75b/tmpr4zlt75b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf01531c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf01228b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf01228988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf012277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4zlt75b                        0x000055743b9997db <unavailable> + 6107

    5    libc.so.6                          0x00002abf0171d460 __libc_start_main +
    245

    6    tmpr4zlt75b                        0x000055743b9991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  // sum squared numbers in the array\n\
    \  var sum_squares = 0.0\n  for i in lst {\n    sum_squares += pow(i.square(),\
    \ 2.0)\n  }\n  \n  // round each element in the array to the upper int(Ceiling)\
    \ first\n  var round_to_ceiling  = 0.0\n  var round_to_ceiling_2 = 0.0\n  for\
    \ i in lst {\n    round_to_ceiling += pow(round(i.square(), 2), 2.0)\n    round_to_ceiling_2\
    \ += pow(round(i.square(), 2), 2.0)\n  }\n  \n  return sum_squares + round_to_ceiling\
    \ + round_to_ceiling_2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8wjgfnam.swift:20:20: error: cannot find 'pow' in scope\n    sum_squares\
    \ += pow(i.square(), 2.0)\n                   ^~~\n/tmp/tmp8wjgfnam.swift:20:26:\
    \ error: value of type 'Double' has no member 'square'\n    sum_squares += pow(i.square(),\
    \ 2.0)\n                       ~ ^~~~~~\n/tmp/tmp8wjgfnam.swift:27:25: error:\
    \ cannot find 'pow' in scope\n    round_to_ceiling += pow(round(i.square(), 2),\
    \ 2.0)\n                        ^~~\n/tmp/tmp8wjgfnam.swift:27:29: error: cannot\
    \ find 'round' in scope\n    round_to_ceiling += pow(round(i.square(), 2), 2.0)\n\
    \                            ^~~~~\n/tmp/tmp8wjgfnam.swift:27:37: error: value\
    \ of type 'Double' has no member 'square'\n    round_to_ceiling += pow(round(i.square(),\
    \ 2), 2.0)\n                                  ~ ^~~~~~\n/tmp/tmp8wjgfnam.swift:28:27:\
    \ error: cannot find 'pow' in scope\n    round_to_ceiling_2 += pow(round(i.square(),\
    \ 2), 2.0)\n                          ^~~\n/tmp/tmp8wjgfnam.swift:28:31: error:\
    \ cannot find 'round' in scope\n    round_to_ceiling_2 += pow(round(i.square(),\
    \ 2), 2.0)\n                              ^~~~~\n/tmp/tmp8wjgfnam.swift:28:39:\
    \ error: value of type 'Double' has no member 'square'\n    round_to_ceiling_2\
    \ += pow(round(i.square(), 2), 2.0)\n                                    ~ ^~~~~~\n\
    /tmp/tmp8wjgfnam.swift:31:41: error: cannot convert return expression of type\
    \ 'Double' to return type 'Int'\n  return sum_squares + round_to_ceiling + round_to_ceiling_2\n\
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n         Int( \
    \                                              )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.count < 1 {\n        return\
    \ 0\n    }\n    let max = lst[0]\n    var sum = 0\n    for x in lst{\n       \
    \ if x > max {\n            max = x\n        }\n    }\n    for x in lst{\n   \
    \     sum += pow(x, 2)\n    }\n    return round(sum / max)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4z4r5msa.swift:24:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = x\n            ^~~\n/tmp/tmp4z4r5msa.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = lst[0]\n    ^~~\n\
    \    var\n/tmp/tmp4z4r5msa.swift:28:16: error: cannot find 'pow' in scope\n  \
    \      sum += pow(x, 2)\n               ^~~\n/tmp/tmp4z4r5msa.swift:30:12: error:\
    \ cannot find 'round' in scope\n    return round(sum / max)\n           ^~~~~\n\
    /tmp/tmp4z4r5msa.swift:30:22: error: binary operator '/' cannot be applied to\
    \ operands of type 'Int' and 'Double'\n    return round(sum / max)\n         \
    \        ~~~ ^ ~~~\n/tmp/tmp4z4r5msa.swift:30:22: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    return round(sum / max)\n                     ^\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    for num in lst {\n\
    \        sum += (num * num)\n    }\n    return Int(ceil(Double(sum)))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm9qsrmfq.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(Double(sum)))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  let max = ceil(max(lst))\n  return lst.map\
    \ { $0 * $0 }.compactMap { ($0 * ($0 - max)) }.reduce(0, combine: +)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsn3q8mc_.swift:17:13: error: cannot find 'ceil' in scope\n  let\
    \ max = ceil(max(lst))\n            ^~~~\n/tmp/tmpsn3q8mc_.swift:17:25: error:\
    \ missing argument for parameter #2 in call\n  let max = ceil(max(lst))\n    \
    \                    ^\n                        , <#[Double]#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpsn3q8mc_.swift:18:10:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n  return lst.map\
    \ { $0 * $0 }.compactMap { ($0 * ($0 - max)) }.reduce(0, combine: +)\n       \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var total = 0\n    for x in lst {\n\
    \        total += x.pow(2)\n    }\n    return Int(ceil(total))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppamasd47.swift:19:20: error: value of type 'Double' has no member\
    \ 'pow'\n        total += x.pow(2)\n                 ~ ^~~\n/tmp/tmppamasd47.swift:21:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(total))\n          \
    \     ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += pow(x, 2)\n    }\n    return Int(round(Double(sum)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp2igge81n.swift:19:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(x, 2)\n               ^~~\n/tmp/tmp2igge81n.swift:21:16: error:\
    \ cannot find 'round' in scope\n    return Int(round(Double(sum)))\n         \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.isEmpty {\n        return 0\n\
    \    }\n    var sum = 0\n    var prev: Double = lst[0]\n    for x in lst {\n \
    \       sum += x * x\n        prev = x\n    }\n    if abs(prev) > 1E-4 {\n   \
    \     sum += prev * prev\n    }\n    return Int(ceiling(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmplm8w3jek.swift:23:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmplm8w3jek.swift:27:21: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n        sum += prev * prev\n\
    \                    ^\n               Int(       )\n/tmp/tmplm8w3jek.swift:29:16:\
    \ error: cannot find 'ceiling' in scope\n    return Int(ceiling(sum))\n      \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Int = 0\n    for d in lst\
    \ {\n        sum += (d * d)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8vkw_7c0.swift:19:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += (d * d)\n                  ^\n\
    \               Int(   )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    var sum: Double = 0.0\n    \n\
    \    for n in lst {\n        sum += n * n\n    }\n    \n    return Int(ceil(lst.map(Float64).reduce(0.0,\
    \ +)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpnmhhlg3e.swift:24:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(lst.map(Float64).reduce(0.0, +)))\n               ^~~~\n/tmp/tmpnmhhlg3e.swift:24:29:\
    \ error: cannot convert value of type 'Float64.Type' (aka 'Double.Type') to expected\
    \ argument type '(Double) throws -> Double'\n    return Int(ceil(lst.map(Float64).reduce(0.0,\
    \ +)))\n                            ^\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpiemhktwt.swift:17:25: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map { $0 * $0 }.reduce(0, +)\n\
    \                     ~~~^~~~\n                     Int(   )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum_sq = 0\n    for num in lst\
    \ {\n        sum_sq += (Int(num) * Int(num))\n    }\n    return sum_sq\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp91lhr18v/tmp91lhr18v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8b1ac6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8b17bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8b17bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8b17bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91lhr18v                        0x00005640c66a57db <unavailable> + 6107

    5    libc.so.6                          0x00002ad8b1cb2460 __libc_start_main +
    245

    6    tmp91lhr18v                        0x00005640c66a51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  for var i = 0; i < lst.count;\
    \ i++ {\n    let v = lst[i]\n    sum += v * v\n  }\n  return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmph3yv42f4.swift:18:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < lst.count; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return round(lst.map(&pow(2.0, Double(0.))).reduce(0,\
    \ +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp61br3s1y.swift:17:44: error: expected member name following '.'\n\
    \    return round(lst.map(&pow(2.0, Double(0.))).reduce(0, +))\n             \
    \                              ^\n/tmp/tmp61br3s1y.swift:17:12: error: cannot\
    \ find 'round' in scope\n    return round(lst.map(&pow(2.0, Double(0.))).reduce(0,\
    \ +))\n           ^~~~~\n/tmp/tmp61br3s1y.swift:17:27: error: cannot find 'pow'\
    \ in scope\n    return round(lst.map(&pow(2.0, Double(0.))).reduce(0, +))\n  \
    \                        ^~~\n/tmp/tmp61br3s1y.swift:17:26: error: cannot convert\
    \ value of type '_' to expected argument type '(Double) throws -> Int'\n    return\
    \ round(lst.map(&pow(2.0, Double(0.))).reduce(0, +))\n                       \
    \  ^\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.count == 0 {\n        return\
    \ 0\n    }\n    var sum: Double = 0.0\n    for i in 0..<lst.count {\n        sum\
    \ += lst[i] * lst[i]\n    }\n    return Int(round(Double(sum) * 1000))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuk_3fp78.swift:24:16: error: cannot find 'round' in scope\n   \
    \ return Int(round(Double(sum) * 1000))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    func getSquares(_ arr: [Double]) ->\
    \ [Double] {\n        var retArr: [Double] = (0..<arr.count).map { i in\n    \
    \        arr[i] * arr[i]\n        }\n        return retArr\n    }\n    func ceil(_\
    \ x: Double) -> Double {\n        return (x + x).truncatingRemainder(dividingBy:\
    \ 1.0)\n    }\n    var sqArr = getSquares(lst)\n    sqArr.forEach({\n        $0\
    \ = ceil($0)\n    })\n    let sum = sqArr.reduce(0.0, +)\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpflnqzjpo.swift:28:9: error: cannot assign to value: '$0' is immutable\n\
    \        $0 = ceil($0)\n        ^~\n/tmp/tmpflnqzjpo.swift:31:12: error: cannot\
    \ convert return expression of type 'Double' to return type 'Int'\n    return\
    \ sum\n           ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.flatMap { $0 * $0 }.sum()\
    \ // O(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp497g4pte.swift:17:36: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.flatMap { $0 * $0 }.sum() // O(n)\n           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let len = lst.count\n    if len ==\
    \ 0 {\n        return 0\n    }\n    var total = 0.0\n    var sum1 = 0.0\n    for\
    \ n in lst {\n        total += n * n\n        sum1 += n\n    }\n    let sum2 =\
    \ pow(total, .5)\n    return sum1 / pow(sum2, 0.5)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpjyol8zqh.swift:27:27: error: '.5' is not a valid floating point\
    \ literal; it must be written '0.5'\n    let sum2 = pow(total, .5)\n         \
    \                 ^~\n                          0\n/tmp/tmpjyol8zqh.swift:27:16:\
    \ error: cannot find 'pow' in scope\n    let sum2 = pow(total, .5)\n         \
    \      ^~~\n/tmp/tmpjyol8zqh.swift:28:19: error: cannot find 'pow' in scope\n\
    \    return sum1 / pow(sum2, 0.5)\n                  ^~~\n/tmp/tmpjyol8zqh.swift:28:17:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum1 / pow(sum2, 0.5)\n           ~~~~~^~~~~~~~~~~~~~~~\n        \
    \   Int(                 )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ $0 * $0 }.reduce(0,+)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9ac1tphv.swift:17:24: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map{ $0 * $0 }.reduce(0,+)\n  \
    \                  ~~~^~~~\n                    Int(   )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let nums = lst.map(Float.init)\n  \
    \  return sum_squared(nums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpykkphml9.swift:18:12: error: cannot find 'sum_squared' in scope\n\
    \    return sum_squared(nums)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ $0 * $0 }.sum()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpi7ylphp5.swift:17:31: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map{ $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for _ in lst\
    \ {\n        sum += .squared() // round each element to upper int(Ceiling) first\n\
    \    }\n    return Int(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpet_aob0z.swift:19:17: error: type 'Double' has no member 'squared'\n\
    \        sum += .squared() // round each element to upper int(Ceiling) first\n\
    \               ~^~~~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.isEmpty {\n        return 0\n\
    \    }\n    var sum = 0\n    for i in lst {\n        sum += i * i\n    }\n   \
    \ let roundedSum = Int(sum)\n    return roundedSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5rs_o_sn.swift:22:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0.0\n    for element in\
    \ lst {\n        if element > 0.0 {\n            result = (result + element) *\
    \ (element + 1.0)\n        } else {\n            result = result + element\n \
    \       }\n    }\n    return Int(round(result))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp42n0ala4.swift:25:16: error: cannot find 'round' in scope\n   \
    \ return Int(round(result))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = lst.reduce(0, +) * lst.reduce(0,\
    \ +) * lst.reduce(0, +)\n    return Int(ceil(sum / Double(lst.reduce(0, +) * lst.reduce(0,\
    \ +) * lst.reduce(0, +))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptmr4s223.swift:18:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum / Double(lst.reduce(0, +) * lst.reduce(0, +) * lst.reduce(0, +))))\n\
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.count == 0 {\n        return\
    \ 0\n    }\n\n    // Sum squares\n    var sum: Double = 0.0\n    for i in 0..<lst.count\
    \ {\n        sum += pow((lst[i] - floor(lst[i])), 2)\n    }\n\n    // Round up\n\
    \    var res = floor(sum) + 0.5\n    var sign = -1\n\n    if res < 0.0 {\n   \
    \     res = res * sign\n    }\n\n    return Int(round(res))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5ek0lc8d.swift:24:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow((lst[i] - floor(lst[i])), 2)\n               ^~~\n/tmp/tmp5ek0lc8d.swift:24:30:\
    \ error: cannot find 'floor' in scope\n        sum += pow((lst[i] - floor(lst[i])),\
    \ 2)\n                             ^~~~~\n/tmp/tmp5ek0lc8d.swift:28:15: error:\
    \ cannot find 'floor' in scope\n    var res = floor(sum) + 0.5\n             \
    \ ^~~~~\n/tmp/tmp5ek0lc8d.swift:35:16: error: cannot find 'round' in scope\n \
    \   return Int(round(res))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map { Int(ceil(Double($0)))*Int(ceil(Double($0)))\
    \ }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpf5ypas58.swift:17:24: error: cannot find 'ceil' in scope\n  return\
    \ lst.map { Int(ceil(Double($0)))*Int(ceil(Double($0))) }.sum()\n            \
    \           ^~~~\n/tmp/tmpf5ypas58.swift:17:46: error: cannot find 'ceil' in scope\n\
    \  return lst.map { Int(ceil(Double($0)))*Int(ceil(Double($0))) }.sum()\n    \
    \                                         ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  let len = lst.count\n  if len == 0 {\n\
    \    return 0\n  }\n\n  // round the numbers to ceiling first\n  var sum = 0\n\
    \  var count = 0\n  for item in lst {\n    if item > 0 {\n      sum += item\n\
    \      count++\n    }\n  }\n  guard count != len else {\n    fatalError(\"List\
    \ cannot be empty.\")\n  }\n\n  // square each number after rounding\n  var square\
    \ = pow(Double(sum), 2)\n\n  for item in lst {\n    square += pow(item, 2)\n \
    \ }\n  return square\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpopdqo3z5.swift:27:14: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n      sum += item\n             ^\n       \
    \      Int()\n/tmp/tmpopdqo3z5.swift:28:12: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n      count++\n           ^~\n/tmp/tmpopdqo3z5.swift:36:16:\
    \ error: cannot find 'pow' in scope\n  var square = pow(Double(sum), 2)\n    \
    \           ^~~\n/tmp/tmpopdqo3z5.swift:39:15: error: cannot find 'pow' in scope\n\
    \    square += pow(item, 2)\n              ^~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let n = lst.count\n    if n < 2 {\n\
    \        return lst[0]\n    }\n    var sum = 0\n    for v in lst {\n        sum\
    \ += v * v\n    }\n    return Int(ceil(sum / Double(n)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpfli4dqfv.swift:19:19: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n        return lst[0]\n               ~~~^~~\n\
    \               Int(  )\n/tmp/tmpfli4dqfv.swift:23:18: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n        sum += v * v\n   \
    \              ^\n               Int( )\n/tmp/tmpfli4dqfv.swift:25:16: error:\
    \ cannot find 'ceil' in scope\n    return Int(ceil(sum / Double(n)))\n       \
    \        ^~~~\n/tmp/tmpfli4dqfv.swift:25:25: error: binary operator '/' cannot\
    \ be applied to operands of type 'Int' and 'Double'\n    return Int(ceil(sum /\
    \ Double(n)))\n                    ~~~ ^ ~~~~~~~~~\n/tmp/tmpfli4dqfv.swift:25:25:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    return Int(ceil(sum /\
    \ Double(n)))\n                        ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for i in\
    \ lst {\n        sum += i * i\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphj06cvb7.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    for i in 0..<lst.count{\n   \
    \     let x = lst[i]\n        lst[i] = Int(ceil(x))\n    }\n    \n    var sum\
    \ = 0.0\n    for i in 0..<lst.count{\n        sum = sum + lst[i]\n    }\n    \n\
    \    return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpy_3cp3jo.swift:20:22: error: cannot find 'ceil' in scope\n    \
    \    lst[i] = Int(ceil(x))\n                     ^~~~\n/tmp/tmpy_3cp3jo.swift:20:12:\
    \ error: cannot assign through subscript: 'lst' is a 'let' constant\n        lst[i]\
    \ = Int(ceil(x))\n        ~~~^\n/tmp/tmpy_3cp3jo.swift:20:18: error: no 'init'\
    \ candidates produce the expected contextual result type 'Double'\n        lst[i]\
    \ = Int(ceil(x))\n                 ^\nSwift.Int:7:12: note: 'init(_:)' produces\
    \ 'Int', not the expected contextual result type 'Double'\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: 'init(_:)' produces 'Int', not\
    \ the expected contextual result type 'Double'\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: 'init(_:)' produces 'Int', not the expected\
    \ contextual result type 'Double'\n    public init(_ source: Double)\n       \
    \    ^\nSwift.Int:14:12: note: 'init(_:)' produces 'Int', not the expected contextual\
    \ result type 'Double'\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: 'init(_:)' produces 'Int', not the expected contextual result type 'Double'\n\
    \    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ 'init(_:)' produces 'Int', not the expected contextual result type 'Double'\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: 'init(_:)' produces 'Int?', not the expected contextual result type 'Double'\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmpy_3cp3jo.swift:28:16: error: cannot convert return expression of type\
    \ 'Double' to return type 'Int'\n    return sum * sum\n           ~~~~^~~~~\n\
    \           Int(     )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map({$0.roundToInt()}).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppxrzqzc4.swift:17:24: error: value of type 'Double' has no member\
    \ 'roundToInt'\n    return lst.map({$0.roundToInt()}).reduce(0, +)\n         \
    \           ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for i in lst\
    \ {\n        sum += i * i\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5yfyk_23.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map(Int).reduce(0) { total,\
    \ current in\n        return total + (current * current)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoyioiw0e.swift:17:20: error: cannot convert value of type 'Int.Type'\
    \ to expected argument type '(Double) throws -> Int'\n    return lst.map(Int).reduce(0)\
    \ { total, current in\n                   ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum : Int = 0\n    for number in\
    \ lst {\n        sum += Int(ceil(number * number))\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpyyizb8r4.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(number * number))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += i * i\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpx7kct1v7.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n/tmp/tmpx7kct1v7.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  if lst.isEmpty {\n    return 0\n  }\n\
    \  var sum: Double = 0\n  var cur: Double = 0\n  for v in lst {\n    cur = cur\
    \ * (v + v)\n    sum += cur\n  }\n  return Int(round(Double(sum)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptnylznw3.swift:26:14: error: cannot find 'round' in scope\n  return\
    \ Int(round(Double(sum)))\n             ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  for v in lst {\n    sum\
    \ += v * v\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_5d39b5w.swift:19:14: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    sum += v * v\n             ^\n        \
    \   Int( )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = 0\n    for (index, value)\
    \ in lst.enumerated() {\n        sum += pow(value, 2.0)\n    }\n    return Int(ceil(sum))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpvly_m9yg.swift:19:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(value, 2.0)\n               ^~~\n/tmp/tmpvly_m9yg.swift:21:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(sum))\n            \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(ceil(sum((lst)) * pow(_stdlib_Math_sqrt(sum((lst)))\
    \ + 1.0, 2.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9wgfq8r2.swift:17:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum((lst)) * pow(_stdlib_Math_sqrt(sum((lst))) + 1.0, 2.0)))\n    \
    \           ^~~~\n/tmp/tmp9wgfq8r2.swift:17:21: error: cannot find 'sum' in scope\n\
    \    return Int(ceil(sum((lst)) * pow(_stdlib_Math_sqrt(sum((lst))) + 1.0, 2.0)))\n\
    \                    ^~~\n/tmp/tmp9wgfq8r2.swift:17:34: error: cannot find 'pow'\
    \ in scope\n    return Int(ceil(sum((lst)) * pow(_stdlib_Math_sqrt(sum((lst)))\
    \ + 1.0, 2.0)))\n                                 ^~~\n/tmp/tmp9wgfq8r2.swift:17:38:\
    \ error: cannot find '_stdlib_Math_sqrt' in scope\n    return Int(ceil(sum((lst))\
    \ * pow(_stdlib_Math_sqrt(sum((lst))) + 1.0, 2.0)))\n                        \
    \             ^~~~~~~~~~~~~~~~~\n/tmp/tmp9wgfq8r2.swift:17:56: error: cannot find\
    \ 'sum' in scope\n    return Int(ceil(sum((lst)) * pow(_stdlib_Math_sqrt(sum((lst)))\
    \ + 1.0, 2.0)))\n                                                       ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum_squares(lst: lst, rounding:\
    \ RoundingMode.up)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpyx_vm5fr.swift:17:44: error: cannot find 'RoundingMode' in scope\n\
    \    return sum_squares(lst: lst, rounding: RoundingMode.up)\n               \
    \                            ^~~~~~~~~~~~\n/tmp/tmpyx_vm5fr.swift:17:57: error:\
    \ extra argument 'rounding' in call\n    return sum_squares(lst: lst, rounding:\
    \ RoundingMode.up)\n                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum(lst).squared() + Int(ceil(sum.squared()\
    \ * 0.5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpfwxdkq0y.swift:17:12: error: cannot find 'sum' in scope\n    return\
    \ sum(lst).squared() + Int(ceil(sum.squared() * 0.5))\n           ^~~\n/tmp/tmpfwxdkq0y.swift:17:37:\
    \ error: cannot find 'ceil' in scope\n    return sum(lst).squared() + Int(ceil(sum.squared()\
    \ * 0.5))\n                                    ^~~~\n/tmp/tmpfwxdkq0y.swift:17:42:\
    \ error: cannot find 'sum' in scope\n    return sum(lst).squared() + Int(ceil(sum.squared()\
    \ * 0.5))\n                                         ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Int = 0\n    for elt in lst\
    \ {\n        sum += Int(elt) * Int(elt)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpmp3arnt0/tmpmp3arnt0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc58cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc58c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc58b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmp3arnt0                        0x000056019b89b7db <unavailable> + 6107

    5    libc.so.6                          0x00002b6cfca81460 __libc_start_main +
    245

    6    tmpmp3arnt0                        0x000056019b89b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var res = 0.0\n    for v in lst {\n\
    \        res += (v * v)\n    }\n    return Int(ceil(res))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzi4ln2yd.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(res))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(map({ (x) -> Int in\n  \
    \      let i = Int(ceil(Double(x)))\n        return x*x\n    })(lst))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4kjg3jd6.swift:17:16: error: cannot find 'map' in scope\n    return\
    \ Int(map({ (x) -> Int in\n               ^~~\n/tmp/tmp4kjg3jd6.swift:18:21: error:\
    \ cannot find 'ceil' in scope\n        let i = Int(ceil(Double(x)))\n        \
    \            ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map(.ceiling).fold(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphqpko7gs.swift:17:10: error: generic parameter 'T' could not be\
    \ inferred\n  return lst.map(.ceiling).fold(0, +)\n         ^\nSwift.Collection:2:28:\
    \ note: in call to function 'map'\n    @inlinable public func map<T>(_ transform:\
    \ (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n\
    /tmp/tmphqpko7gs.swift:17:28: error: value of type 'Array<_>' has no member 'fold'\n\
    \  return lst.map(.ceiling).fold(0, +)\n         ~~~~~~~~~~~~~~~~~ ^~~~\n/tmp/tmphqpko7gs.swift:17:19:\
    \ error: type '(Double) throws -> _' has no member 'ceiling'\n  return lst.map(.ceiling).fold(0,\
    \ +)\n                 ~^~~~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map(sqrt).reduce(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpayxxxj0_.swift:17:20: error: cannot find 'sqrt' in scope\n    return\
    \ lst.map(sqrt).reduce(0, +)\n                   ^~~~\n/tmp/tmpayxxxj0_.swift:17:20:\
    \ error: converting non-escaping value to '(Double) throws -> Int' may allow it\
    \ to escape\n    return lst.map(sqrt).reduce(0, +)\n                   ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let result = 0.0\n    for x in lst\
    \ {\n        result += x.toInt() * x.toInt()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkhyxd13o.swift:19:21: error: value of type 'Double' has no member\
    \ 'toInt'\n        result += x.toInt() * x.toInt()\n                  ~ ^~~~~\n\
    /tmp/tmpkhyxd13o.swift:19:33: error: value of type 'Double' has no member 'toInt'\n\
    \        result += x.toInt() * x.toInt()\n                              ~ ^~~~~\n\
    /tmp/tmpkhyxd13o.swift:21:12: error: cannot convert return expression of type\
    \ 'Double' to return type 'Int'\n    return result\n           ^~~~~~\n      \
    \     Int(  )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let result: Int = lst.count\n    for\
    \ number in lst {\n        result += pow(number, 2)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp53lvov5x.swift:19:19: error: cannot find 'pow' in scope\n     \
    \   result += pow(number, 2)\n                  ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = lst.map { $0 * $0 }.reduce(0,\
    \ +)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6qoaofe3.swift:18:12: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum\n           ^~~\n       \
    \    Int( )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += i * i\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpx7kct1v7.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n/tmp/tmpx7kct1v7.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var res = 0.0\n  for elem in lst {\n\
    \    res = res + pow(Double(elem), 2)\n  }\n  return Int(round(Double(res)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6yihy_yv.swift:19:17: error: cannot find 'pow' in scope\n    res\
    \ = res + pow(Double(elem), 2)\n                ^~~\n/tmp/tmp6yihy_yv.swift:21:14:\
    \ error: cannot find 'round' in scope\n  return Int(round(Double(res)))\n    \
    \         ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  // your code here\n  var i = 0\n  var\
    \ sum = 0\n  while i < lst.count {\n    sum += Int(ceil(lst[i]))\n    i += 1\n\
    \  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpy2pczvh_.swift:21:16: error: cannot find 'ceil' in scope\n    sum\
    \ += Int(ceil(lst[i]))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return (lst.reduce(0, +) * lst.reduce(0.0,\
    \ +)) / (lst.reduce(0.0, +) * lst.reduce(0.0, -))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp10q38el_.swift:17:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (lst.reduce(0, +) * lst.reduce(0.0, +)) / (lst.reduce(0.0,\
    \ +) * lst.reduce(0.0, -))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009906
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.count < 1 {\n        return\
    \ 0\n    }\n    var sum: Int = 0\n    for i in 0 ..< lst.count {\n        let\
    \ tmp = i * i\n        sum += Int(tmp)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpior0q7iz/tmpior0q7iz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5acb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb5a9afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb5a9af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb5a9ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpior0q7iz                        0x000056180ccd9661 <unavailable> + 5729

    5    libc.so.6                          0x00002acb5aea4460 __libc_start_main +
    245

    6    tmpior0q7iz                        0x000056180ccd92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum_squares(lst: lst, length:\
    \ lst.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5jm2w5ta.swift:17:46: error: extra argument 'length' in call\n\
    \    return sum_squares(lst: lst, length: lst.count)\n                      ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum : Int = 0\n    for v in lst\
    \ {\n        sum += Int(pow(v, 2))\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpc4n1iaxz.swift:19:20: error: cannot find 'pow' in scope\n     \
    \   sum += Int(pow(v, 2))\n                   ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let max: Double = lst.maxElement()!\n\
    \    var sum: Double = 0\n    lst.map { sum += pow(Double($0) * $0, 2) }\n   \
    \ return Int(max * sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4skmysm7.swift:17:27: error: value of type '[Double]' has no member\
    \ 'maxElement'\n    let max: Double = lst.maxElement()!\n                    \
    \  ~~~ ^~~~~~~~~~\n/tmp/tmp4skmysm7.swift:19:22: error: cannot find 'pow' in scope\n\
    \    lst.map { sum += pow(Double($0) * $0, 2) }\n                     ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    var square = 0.0\n\
    \    for i in lst {\n        sum += i * i\n        square += i\n    }\n    return\
    \ Int(ceil(Double(square) / Double(sum)))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpfvguoe8v.swift:23:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(Double(square) / Double(sum)))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum_squares(lst: lst, roundToInt:\
    \ true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkm041rev.swift:17:46: error: extra argument 'roundToInt' in call\n\
    \    return sum_squares(lst: lst, roundToInt: true)\n                      ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var squareSum = 0\n    for i in lst\
    \ {\n        squareSum += Int(pow(i, 2.0))\n    }\n    return squareSum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6gvu0c_g.swift:19:26: error: cannot find 'pow' in scope\n     \
    \   squareSum += Int(pow(i, 2.0))\n                         ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var result = 0\n  var prevSum = Double(0)\
    \ // for calculating rounding error of previous number\n  for number in lst {\n\
    \    if number > 0 {\n      // square of current number rounded up\n      let\
    \ newSum = ceil(pow(number, 2) / prevSum)\n      result += newSum\n      prevSum\
    \ = newSum\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7ya3kj98.swift:22:20: error: cannot find 'ceil' in scope\n    \
    \  let newSum = ceil(pow(number, 2) / prevSum)\n                   ^~~~\n/tmp/tmp7ya3kj98.swift:22:25:\
    \ error: cannot find 'pow' in scope\n      let newSum = ceil(pow(number, 2) /\
    \ prevSum)\n                        ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.isEmpty {\n        return 0\n\
    \    }\n    var sq = 0.0\n    for i in 0..<lst.count {\n        sq += pow(lst[i],\
    \ 2)\n    }\n    return Int(ceil(sq))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgedtz0ci.swift:22:15: error: cannot find 'pow' in scope\n     \
    \   sq += pow(lst[i], 2)\n              ^~~\n/tmp/tmpgedtz0ci.swift:24:16: error:\
    \ cannot find 'ceil' in scope\n    return Int(ceil(sq))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let res = 0\n    for i in lst {\n \
    \       guard i > 0, let int = Int(ceil(i)) else { return res }\n        res +=\
    \ int * int\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphwq17qoc.swift:19:36: error: cannot find 'ceil' in scope\n    \
    \    guard i > 0, let int = Int(ceil(i)) else { return res }\n               \
    \                    ^~~~\n/tmp/tmphwq17qoc.swift:20:13: error: binary operator\
    \ '+=' cannot be applied to operands of type 'Int' and 'Duration'\n        res\
    \ += int * int\n        ~~~ ^  ~~~~~~~~~\n/tmp/tmphwq17qoc.swift:20:13: note:\
    \ overloads for '+=' exist with these partially matching parameter lists: (inout\
    \ ContinuousClock.Instant, Duration), (inout Duration, Duration), (inout SuspendingClock.Instant,\
    \ Duration)\n        res += int * int\n            ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  if lst.count <= 0 {\n    return 0\n \
    \ }\n  var sum = 0\n  var squareSum = lst[0]\n  for element in lst {\n    sum\
    \ += squareSum\n    squareSum += element * element\n  }\n  return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpyehbaw54.swift:23:12: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    sum += squareSum\n           ^\n      \
    \     Int(     )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum_squares(lst: lst, round_num:\
    \ Math.ceil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpky0nslm0.swift:17:45: error: cannot find 'Math' in scope\n    return\
    \ sum_squares(lst: lst, round_num: Math.ceil)\n                              \
    \              ^~~~\n/tmp/tmpky0nslm0.swift:17:50: error: extra argument 'round_num'\
    \ in call\n    return sum_squares(lst: lst, round_num: Math.ceil)\n          \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for i in lst {\n\
    \        result += pow(i, 2)\n    }\n    return Int(ceil(result + 0.5))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp1tunrcg.swift:19:19: error: cannot find 'pow' in scope\n     \
    \   result += pow(i, 2)\n                  ^~~\n/tmp/tmpp1tunrcg.swift:21:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(result + 0.5))\n   \
    \            ^~~~\n/tmp/tmpp1tunrcg.swift:21:28: error: binary operator '+' cannot\
    \ be applied to operands of type 'Int' and 'Double'\n    return Int(ceil(result\
    \ + 0.5))\n                    ~~~~~~ ^ ~~~\n/tmp/tmpp1tunrcg.swift:21:28: note:\
    \ overloads for '+' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n    return Int(ceil(result + 0.5))\n                  \
    \         ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.reduce(0, +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuakc9mn6.swift:17:26: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Double) throws -> Int'\n    return\
    \ lst.reduce(0, +)\n                         ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum(lst, sq)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5w55c0p2.swift:17:12: error: cannot find 'sum' in scope\n    return\
    \ sum(lst, sq)\n           ^~~\n/tmp/tmp5w55c0p2.swift:17:21: error: cannot find\
    \ 'sq' in scope\n    return sum(lst, sq)\n                    ^~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum_squares(ArrayOfDouble(lst))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpk4qb7uur.swift:17:24: error: cannot find 'ArrayOfDouble' in scope\n\
    \    return sum_squares(ArrayOfDouble(lst))\n                       ^~~~~~~~~~~~~\n\
    /tmp/tmpk4qb7uur.swift:17:24: error: missing argument label 'lst:' in call\n \
    \   return sum_squares(ArrayOfDouble(lst))\n                       ^\n       \
    \                lst: \n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum_sq = 0.0\n    for v in lst\
    \ {\n        sum_sq += v * v\n    }\n    return Int(ceil(sum_sq))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp2vh6_o_r.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum_sq))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    var n: Int\
    \ = 0\n    \n    for number in lst {\n        sum += pow(number, 2)\n        n++\n\
    \    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptn8evue1.swift:21:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(number, 2)\n               ^~~\n/tmp/tmptn8evue1.swift:22:10: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n        n++\n    \
    \     ^~\n/tmp/tmptn8evue1.swift:25:12: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n    return sum\n           ^~~\n    \
    \       Int( )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let mut sum = 0.0\n\n    for v in lst\
    \ {\n        sum += v * v\n    }\n\n    return round(sum)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkionrh9m.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut sum = 0.0\n\
    \            ^\n/tmp/tmpkionrh9m.swift:17:13: note: join the identifiers together\n\
    \    let mut sum = 0.0\n        ~~~~^~~\n        mutsum\n/tmp/tmpkionrh9m.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut sum = 0.0\n\
    \        ~~~~^~~\n        mutSum\n/tmp/tmpkionrh9m.swift:20:9: error: cannot find\
    \ 'sum' in scope\n        sum += v * v\n        ^~~\n/tmp/tmpkionrh9m.swift:23:12:\
    \ error: cannot find 'round' in scope\n    return round(sum)\n           ^~~~~\n\
    /tmp/tmpkionrh9m.swift:23:18: error: cannot find 'sum' in scope\n    return round(sum)\n\
    \                 ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    var i = 0\n    for\
    \ _ in lst {\n        sum += pow(Double(i), 2.0)\n        i += 1\n    }\n    return\
    \ Int(ceil(Ceil(sum)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp84atylog.swift:20:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(Double(i), 2.0)\n               ^~~\n/tmp/tmp84atylog.swift:23:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(Ceil(sum)))\n      \
    \         ^~~~\n/tmp/tmp84atylog.swift:23:21: error: cannot find 'Ceil' in scope\n\
    \    return Int(ceil(Ceil(sum)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    func round(a: Double) -> Double\
    \ {\n        \n        var rounded = Double()\n        \n        if a > 0 {\n\
    \            rounded = Int(round(Double(a)))\n        }\n        \n        return\
    \ rounded\n    }\n    \n    var sum = 0\n    \n    for a in lst {\n        let\
    \ roundA = round(a)\n        let roundedA = Int(roundA)\n        sum += roundedA\
    \ * a\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpczjuq_7l.swift:23:23: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n            rounded = Int(round(Double(a)))\n            \
    \          ^~~~~~~~~~~~~~~~~~~~~\n                      Double(              )\n\
    /tmp/tmpczjuq_7l.swift:23:33: error: missing argument label 'a:' in call\n   \
    \         rounded = Int(round(Double(a)))\n                                ^\n\
    \                                a: \n/tmp/tmpczjuq_7l.swift:32:28: error: missing\
    \ argument label 'a:' in call\n        let roundA = round(a)\n               \
    \            ^\n                           a: \n/tmp/tmpczjuq_7l.swift:34:13:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ 'Double'\n        sum += roundedA * a\n        ~~~ ^  ~~~~~~~~~~~~\n/tmp/tmpczjuq_7l.swift:34:13:\
    \ note: overloads for '+=' exist with these partially matching parameter lists:\
    \ (inout Int, Int)\n        sum += roundedA * a\n            ^\n/tmp/tmpczjuq_7l.swift:34:27:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        sum += roundedA * a\n                          ^\n                  \
    \        Int( )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceilf(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv_uqa6gg.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpv_uqa6gg.swift:21:16: error: cannot find 'ceilf'\
    \ in scope\n    return Int(ceilf(sum))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return reduce((accumulator, value)\
    \ -> (Int, Double) -> Double in\n    {\n        var accumulator_value = accumulator\n\
    \        if accumulator_value == nil {\n            accumulator_value = 0\n  \
    \      }\n        return $0 + accumulator_value * $1, accumulator_value\n    },\
    \ $0, lst)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcfzb360l.swift:17:67: error: expected ',' separator\n    return\
    \ reduce((accumulator, value) -> (Int, Double) -> Double in\n                \
    \                                                  ^\n                       \
    \                                          ,\n/tmp/tmpcfzb360l.swift:17:67: error:\
    \ expected expression in list of expressions\n    return reduce((accumulator,\
    \ value) -> (Int, Double) -> Double in\n                                     \
    \                             ^\n/tmp/tmpcfzb360l.swift:24:8: error: anonymous\
    \ closure argument not contained in a closure\n    }, $0, lst)\n       ^\n/tmp/tmpcfzb360l.swift:17:12:\
    \ error: cannot find 'reduce' in scope\n    return reduce((accumulator, value)\
    \ -> (Int, Double) -> Double in\n           ^~~~~~\n/tmp/tmpcfzb360l.swift:17:20:\
    \ error: cannot find 'accumulator' in scope\n    return reduce((accumulator, value)\
    \ -> (Int, Double) -> Double in\n                   ^~~~~~~~~~~\n/tmp/tmpcfzb360l.swift:17:33:\
    \ error: cannot find 'value' in scope\n    return reduce((accumulator, value)\
    \ -> (Int, Double) -> Double in\n                                ^~~~~\n/tmp/tmpcfzb360l.swift:17:19:\
    \ error: expected type before '->'\n    return reduce((accumulator, value) ->\
    \ (Int, Double) -> Double in\n                  ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpiemhktwt.swift:17:25: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map { $0 * $0 }.reduce(0, +)\n\
    \                     ~~~^~~~\n                     Int(   )\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  for number in lst {\n\
    \    sum += pow(Double(number), 2)\n  }\n  return Int(round(Double(sum)))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp44zt92fz.swift:19:12: error: cannot find 'pow' in scope\n    sum\
    \ += pow(Double(number), 2)\n           ^~~\n/tmp/tmp44zt92fz.swift:21:14: error:\
    \ cannot find 'round' in scope\n  return Int(round(Double(sum)))\n           \
    \  ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  let sum: Int = lst.map{ $0.squared }.sum()\n\
    \  return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsvvomww_.swift:17:30: error: value of type 'Double' has no member\
    \ 'squared'\n  let sum: Int = lst.map{ $0.squared }.sum()\n                  \
    \        ~~ ^~~~~~~\n/tmp/tmpsvvomww_.swift:17:40: error: value of type 'Array<_>'\
    \ has no member 'sum'\n  let sum: Int = lst.map{ $0.squared }.sum()\n        \
    \         ~~~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmpsvvomww_.swift:18:14: error: cannot\
    \ find 'ceil' in scope\n  return Int(ceil(sum))\n             ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum: Int = 0\n  for num in lst {\n\
    \    sum += num * num\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzgmqxp0r.swift:19:16: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    sum += num * num\n               ^\n  \
    \         Int(     )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let length = lst.count\n    var sum\
    \ = 0.0\n    for index in 0...length {\n        sum += pow(lst.index(index, offsetBy:\
    \ index).squared() - pow(index, 2.0), 0.5)\n    }\n    return Int(ceil(sum))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_0g_a0ec.swift:20:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(lst.index(index, offsetBy: index).squared() - pow(index, 2.0),\
    \ 0.5)\n               ^~~\n/tmp/tmp_0g_a0ec.swift:20:66: error: cannot find 'pow'\
    \ in scope\n        sum += pow(lst.index(index, offsetBy: index).squared() - pow(index,\
    \ 2.0), 0.5)\n                                                               \
    \  ^~~\n/tmp/tmp_0g_a0ec.swift:20:54: error: value of type 'Int' has no member\
    \ 'squared'\n        sum += pow(lst.index(index, offsetBy: index).squared() -\
    \ pow(index, 2.0), 0.5)\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmp_0g_a0ec.swift:22:16: error: cannot find 'ceil' in scope\n\
    \    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.reduce(0) { $0 + $1 * $1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzufhd24b.swift:17:14: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n  return lst.reduce(0) { $0 + $1 * $1 }\n\
    \         ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n         Int(                      \
    \    )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    guard !lst.isEmpty else {\n       \
    \ return 0\n    }\n    var total = 0\n    for num in lst {\n        total += Int(ceil(num\
    \ * num))\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbclmy71k.swift:22:22: error: cannot find 'ceil' in scope\n    \
    \    total += Int(ceil(num * num))\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n\n    for i in lst {\n\
    \        sum += i * i\n    }\n\n    return Int(ceilf(Double(sum)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuomuxcmu.swift:23:16: error: cannot find 'ceilf' in scope\n   \
    \ return Int(ceilf(Double(sum)))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Int = 0\n    for i in lst\
    \ {\n        sum += math.pow(i.rounded(), 2)\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsedfy63w.swift:19:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(i.rounded(), 2)\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let size = lst.count\n    var sum =\
    \ 0.0\n    for i in 0..<size {\n        sum += (lst[i] - Int(lst[i])) ** 2\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpb1gw9p7k.swift:20:39: error: cannot find operator '**' in scope\n\
    \        sum += (lst[i] - Int(lst[i])) ** 2\n                                \
    \      ^~\n/tmp/tmpb1gw9p7k.swift:20:26: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        sum += (lst[i] - Int(lst[i])) **\
    \ 2\n                         ^\n                         Double(    )\n/tmp/tmpb1gw9p7k.swift:22:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum\n           ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var res = 0.0\n    for v in lst {\n\
    \        res += (v * v)\n    }\n    return Int(ceil(res))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzi4ln2yd.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(res))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map({ $0 * $0 }).reduce(+)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgtrbxh3c.swift:17:41: error: missing argument for parameter #2\
    \ in call\n    return lst.map({ $0 * $0 }).reduce(+)\n                       \
    \                 ^\n                                        , <#(@escaping (Double,\
    \ Double) -> Double, Double) throws -> (Double, Double) -> Double#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  for number in lst {\n\
    \    sum += pow(number, 2)\n  }\n  return Int(round(Float(sum)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt58nqhz8.swift:19:12: error: cannot find 'pow' in scope\n    sum\
    \ += pow(number, 2)\n           ^~~\n/tmp/tmpt58nqhz8.swift:21:14: error: cannot\
    \ find 'round' in scope\n  return Int(round(Float(sum)))\n             ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Double($0).squareRoot().round()\
    \ }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpalxowmy8.swift:17:46: error: cannot convert value of type '()'\
    \ to closure result type 'Int'\n    return lst.map { Double($0).squareRoot().round()\
    \ }.reduce(0, +)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpalxowmy8.swift:17:46:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return lst.map { Double($0).squareRoot().round() }.reduce(0,\
    \ +)\n                     ~~~~~~~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = lst.reduce(0, combine: {\
    \ (sum, item) -> Int in\n        let rounded = Int(ceil(item * 1000))\n      \
    \  return sum + rounded\n    })\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8v5jj6hs.swift:18:27: error: cannot find 'ceil' in scope\n    \
    \    let rounded = Int(ceil(item * 1000))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  var lastIdx = 0\n  for\
    \ idx in lst.indices {\n    if idx > lastIdx {\n      sum += (Float(lst.list[lastIdx])\
    \ - Float(lst.list[idx]) * Float(lst.list[idx])) / Float(lst.list[idx])\n    }\n\
    \    lastIdx = idx\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsoo6tnmx.swift:21:7: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n      sum += (Float(lst.list[lastIdx]) - Float(lst.list[idx])\
    \ * Float(lst.list[idx])) / Float(lst.list[idx])\n      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009867
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var res = 0.0\n    for d in lst {\n\
    \        res += d * d\n    }\n    return Int(round(res))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaqsqbaaa.swift:21:16: error: cannot find 'round' in scope\n   \
    \ return Int(round(res))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = lst.map { return $0 * $0\
    \ }.reduce(0, +)\n    return Int(floor(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpdmd3jnhm.swift:18:16: error: cannot find 'floor' in scope\n   \
    \ return Int(floor(sum))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for v in lst {\n \
    \       sum += v * v\n    }\n    return Int(roundf(sqrt(Double(sum))))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcggb6typ.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v * v\n                 ^\n\
    \               Int( )\n/tmp/tmpcggb6typ.swift:21:16: error: cannot find 'roundf'\
    \ in scope\n    return Int(roundf(sqrt(Double(sum))))\n               ^~~~~~\n\
    /tmp/tmpcggb6typ.swift:21:23: error: cannot find 'sqrt' in scope\n    return Int(roundf(sqrt(Double(sum))))\n\
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map{ pow(Double($0), 2) }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpmud33pd5.swift:17:19: error: cannot find 'pow' in scope\n  return\
    \ lst.map{ pow(Double($0), 2) }.reduce(0, +)\n                  ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // add sum of square of elements to\
    \ result\n    var result = 0.0\n\n    // add each element to result\n    for i\
    \ in lst {\n        result += i * i\n    }\n\n    // round the result to nearest\
    \ integer\n    let rounded = Int(ceil(result))\n\n    // return rounded result\n\
    \    return rounded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8wh8roty.swift:26:23: error: cannot find 'ceil' in scope\n    let\
    \ rounded = Int(ceil(result))\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ $0.roundingModeToUp()\
    \ }.reduce(0.0, +) + 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpjwtonv19.swift:17:60: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return lst.map{ $0.roundingModeToUp()\
    \ }.reduce(0.0, +) + 0\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \           Int(                                               )\n/tmp/tmpjwtonv19.swift:17:24:\
    \ error: value of type 'Double' has no member 'roundingModeToUp'\n    return lst.map{\
    \ $0.roundingModeToUp() }.reduce(0.0, +) + 0\n                    ~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum: Double = 0\n  for i in lst {\n\
    \    let square = i * i\n    sum += Int(square)\n  }\n  return Int(sum)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzkowp3_l.swift:20:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += Int(square)\n           ^\n \
    \          Double(    )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum: Double = 0\n  for i in lst {\n\
    \    sum += i * i\n  }\n  return round(sum)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmph81u78gt.swift:21:10: error: cannot find 'round' in scope\n  return\
    \ round(sum)\n         ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = (lst.reduce(0, +))\n    let\
    \ sqrt = sqrt(Double(sum))\n    return (sqrt * sqrt).rounded(.towardZero)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpge35080a.swift:18:16: error: use of local variable 'sqrt' before\
    \ its declaration\n    let sqrt = sqrt(Double(sum))\n               ^\n/tmp/tmpge35080a.swift:18:9:\
    \ note: 'sqrt' declared here\n    let sqrt = sqrt(Double(sum))\n        ^\n/tmp/tmpge35080a.swift:19:26:\
    \ error: value of type 'Duration' has no member 'rounded'\n    return (sqrt *\
    \ sqrt).rounded(.towardZero)\n           ~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpge35080a.swift:19:35:\
    \ error: cannot infer contextual base in reference to member 'towardZero'\n  \
    \  return (sqrt * sqrt).rounded(.towardZero)\n                               \
    \  ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    var sqsum:\
    \ Double = 0.0\n\n    for x in lst {\n        sum += x\n        sqsum += x * (x\
    \ * x)\n    }\n\n    if sqsum > 0.0 {\n        return (sum + sqsum).round()\n\
    \    }\n\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpdr7s0hxu.swift:26:30: error: cannot convert return expression of\
    \ type '()' to return type 'Int'\n        return (sum + sqsum).round()\n     \
    \          ~~~~~~~~~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    var square_sum =\
    \ 0.0\n    for x in lst {\n        sum += x\n        square_sum += x * x\n   \
    \ }\n\n    return Int((sum - square_sum) / Double(Double(lst).count))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_h4jx0nf.swift:24:44: error: no exact matches in call to initializer\
    \ \n    return Int((sum - square_sum) / Double(Double(lst).count))\n         \
    \                                  ^\n/tmp/tmp_h4jx0nf.swift:24:44: note: found\
    \ candidate with type '(Builtin.FPIEEE64) -> Double'\n    return Int((sum - square_sum)\
    \ / Double(Double(lst).count))\n                                           ^\n\
    /tmp/tmp_h4jx0nf.swift:24:44: note: found candidate with type '(Substring) ->\
    \ Double?'\n    return Int((sum - square_sum) / Double(Double(lst).count))\n \
    \                                          ^\n/tmp/tmp_h4jx0nf.swift:24:44: note:\
    \ found candidate with type '(Int) -> Double'\n    return Int((sum - square_sum)\
    \ / Double(Double(lst).count))\n                                           ^\n\
    /tmp/tmp_h4jx0nf.swift:24:44: note: found candidate with type '(Float16) -> Double'\n\
    \    return Int((sum - square_sum) / Double(Double(lst).count))\n            \
    \                               ^\n/tmp/tmp_h4jx0nf.swift:24:44: note: found candidate\
    \ with type '(Float) -> Double'\n    return Int((sum - square_sum) / Double(Double(lst).count))\n\
    \                                           ^\n/tmp/tmp_h4jx0nf.swift:24:44: note:\
    \ found candidate with type '(Double) -> Double'\n    return Int((sum - square_sum)\
    \ / Double(Double(lst).count))\n                                           ^\n\
    /tmp/tmp_h4jx0nf.swift:24:44: note: found candidate with type '(Float80) -> Double'\n\
    \    return Int((sum - square_sum) / Double(Double(lst).count))\n            \
    \                               ^\n/tmp/tmp_h4jx0nf.swift:24:56: error: reference\
    \ to member 'count' cannot be resolved without a contextual type\n    return Int((sum\
    \ - square_sum) / Double(Double(lst).count))\n                               \
    \                        ^\n"
  stdout: ''
  timestamp: 1660009851
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var squares: Int = 0\n    for number\
    \ in lst {\n        squares  += number * number\n    }\n    return Int(ceil(squares))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt0yqq8iv.swift:19:28: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        squares  += number * number\n     \
    \                      ^\n                    Int(           )\n/tmp/tmpt0yqq8iv.swift:21:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(squares))\n        \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result: Int = 0\n    for i in lst\
    \ {\n        result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprzowrcep.swift:19:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        result *= i\n                  ^\n\
    \                  Int( )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    guard lst.count > 0 else { return 0\
    \ }\n    var sum = 0.0\n    \n    for i in 0..<lst.count {\n        sum += Math.pow(lst[i],\
    \ 2.0)\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuqv1we6f.swift:21:16: error: cannot find 'Math' in scope\n    \
    \    sum += Math.pow(lst[i], 2.0)\n               ^~~~\n/tmp/tmpuqv1we6f.swift:24:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum\n           ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var squares = 0.0\n  for num in lst {\n\
    \    squares += Double(num) * Double(num)\n  }\n  return round(squares).rounded()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpmvu_1lky.swift:21:10: error: cannot find 'round' in scope\n  return\
    \ round(squares).rounded()\n         ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for i in\
    \ lst {\n        sum += i * i\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphj06cvb7.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum: Double = 0.0;\n    for x in\
    \ lst {\n        sum += (Double(x) * x);\n    }\n    return Int(ceil(sum))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgzt0fjls.swift:19:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum += (Double(x) * x);\n      \
    \  ~~~ ^\n/tmp/tmpgzt0fjls.swift:17:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let sum: Double = 0.0;\n    ^~~\n    var\n/tmp/tmpgzt0fjls.swift:21:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(sum))\n            \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum: Double = 0.0\n    for val\
    \ in lst {\n        sum += val * val\n    }\n    return Int(ceil(sum))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmps90ah7sl.swift:19:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum += val * val\n        ~~~ ^\n\
    /tmp/tmps90ah7sl.swift:17:5: note: change 'let' to 'var' to make it mutable\n\
    \    let sum: Double = 0.0\n    ^~~\n    var\n/tmp/tmps90ah7sl.swift:21:16: error:\
    \ cannot find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int((lst.map({ $0.round() })).reduce({\
    \ $0 + $1 }).round())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcw86u4xp.swift:17:54: error: binary operator '+' cannot be applied\
    \ to operands of type '_' and '()'\n    return Int((lst.map({ $0.round() })).reduce({\
    \ $0 + $1 }).round())\n                                                  ~~ ^\
    \ ~~\n/tmp/tmpcw86u4xp.swift:17:49: error: missing argument for parameter 'into'\
    \ in call\n    return Int((lst.map({ $0.round() })).reduce({ $0 + $1 }).round())\n\
    \                                                ^\n                         \
    \                       into: <#_#>, \nSwift.Sequence:3:28: note: 'reduce(into:_:)'\
    \ declared here\n    @inlinable public func reduce<Result>(into initialResult:\
    \ __owned Result, _ updateAccumulatingResult: (_ partialResult: inout Result,\
    \ Self.Element) throws -> ()) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.round().toInt()\
    \ }.map { $0 * $0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpou6gdh9n.swift:17:33: error: value of tuple type '()' has no member\
    \ 'toInt'\n    return lst.map { $0.round().toInt() }.map { $0 * $0 }.sum()\n \
    \                    ~~~~~~~~~~ ^~~~~\n/tmp/tmpou6gdh9n.swift:17:59: error: reference\
    \ to member 'sum' cannot be resolved without a contextual type\n    return lst.map\
    \ { $0.round().toInt() }.map { $0 * $0 }.sum()\n                             \
    \                             ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int((sum).round())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqtibcvqi.swift:21:12: error: no exact matches in call to initializer\
    \ \n    return Int((sum).round())\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate requires that '()' conform to 'BinaryFloatingPoint' (requirement\
    \ specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source:\
    \ T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23:\
    \ note: candidate requires that '()' conform to 'BinaryInteger' (requirement specified\
    \ as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where\
    \ T : BinaryInteger\n                      ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { ($0 as? Double)?.rounded(.towardZero)\
    \ ?? 0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp69_pdb14.swift:17:67: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { ($0 as? Double)?.rounded(.towardZero) ?? 0 }.sum()\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    guard lst.count > 0 else { return 0\
    \ }\n    var sumSquares = 0\n    for i in 0 ..< lst.count {\n        let v = ceil(Float(lst[i]))\n\
    \        sumSquares += v * v\n    }\n    return sumSquares\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcx5rbzpj.swift:20:17: error: cannot find 'ceil' in scope\n    \
    \    let v = ceil(Float(lst[i]))\n                ^~~~\n/tmp/tmpcx5rbzpj.swift:21:25:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        sumSquares += v * v\n                        ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  guard lst.count > 0 else { return 0 }\n\
    \  guard lst.count <= Int.max else { return Int.max }\n\n  // sort by ceiling\n\
    \  let sortedArray = lst.sorted(by: { $0.ceil > $1.ceil })\n  var sum: Double\
    \ = 0\n\n  for value in sortedArray {\n    sum += pow(value, 2.0)\n  }\n\n  return\
    \ Int(round(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkkr6ex3c.swift:21:41: error: value of type 'Double' has no member\
    \ 'ceil'\n  let sortedArray = lst.sorted(by: { $0.ceil > $1.ceil })\n        \
    \                             ~~ ^~~~\n/tmp/tmpkkr6ex3c.swift:21:51: error: value\
    \ of type 'Double' has no member 'ceil'\n  let sortedArray = lst.sorted(by: {\
    \ $0.ceil > $1.ceil })\n                                               ~~ ^~~~\n\
    /tmp/tmpkkr6ex3c.swift:28:14: error: cannot find 'round' in scope\n  return Int(round(sum))\n\
    \             ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var res = 0.0\n    var idx = 1\n  \
    \  for n in lst {\n        res = res + n * n\n        idx = idx + (n >= 0)\n \
    \   }\n    return Int(res)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1glb_s90.swift:21:24: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        idx = idx + (n >= 0)\n            \
    \           ^\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  let size = lst.count\n  let min = lst.minElement()\n\
    \  let max = lst.maxElement()\n  var result = 0.0\n  for i in 0..<size {\n   \
    \ let num1 = Int(floor(Double(lst[i])))\n    let num2 = Int(ceil(Double(lst[i])))\n\
    \    result += pow(num1 - num2, 2)\n  }\n  return Int(floor(result + min))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp63q_gf_q.swift:18:17: error: value of type '[Double]' has no member\
    \ 'minElement'\n  let min = lst.minElement()\n            ~~~ ^~~~~~~~~~\n/tmp/tmp63q_gf_q.swift:19:17:\
    \ error: value of type '[Double]' has no member 'maxElement'\n  let max = lst.maxElement()\n\
    \            ~~~ ^~~~~~~~~~\n/tmp/tmp63q_gf_q.swift:22:20: error: cannot find\
    \ 'floor' in scope\n    let num1 = Int(floor(Double(lst[i])))\n              \
    \     ^~~~~\n/tmp/tmp63q_gf_q.swift:23:20: error: cannot find 'ceil' in scope\n\
    \    let num2 = Int(ceil(Double(lst[i])))\n                   ^~~~\n/tmp/tmp63q_gf_q.swift:24:15:\
    \ error: cannot find 'pow' in scope\n    result += pow(num1 - num2, 2)\n     \
    \         ^~~\n/tmp/tmp63q_gf_q.swift:26:14: error: cannot find 'floor' in scope\n\
    \  return Int(floor(result + min))\n             ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.reduce(0, combine: { $0\
    \ + $1 * $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpfcl4y8bt.swift:17:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return lst.reduce(0, combine: { $0 +\
    \ $1 * $1 })\n           ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          \
    \ Int(                                    )\n/tmp/tmpfcl4y8bt.swift:17:22: error:\
    \ extraneous argument label 'combine:' in call\n    return lst.reduce(0, combine:\
    \ { $0 + $1 * $1 })\n                     ^   ~~~~~~~~~\n                    \
    \     \n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var res = 0.0\n    for e in lst {\n\
    \        res = res + pow(abs(e), 2.0)\n    }\n    return Int(round(res))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkb5vq3rm.swift:19:21: error: cannot find 'pow' in scope\n     \
    \   res = res + pow(abs(e), 2.0)\n                    ^~~\n/tmp/tmpkb5vq3rm.swift:21:16:\
    \ error: cannot find 'round' in scope\n    return Int(round(res))\n          \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return reduce(0) { $0 + $1 * $1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv0x2ic1l.swift:17:12: error: cannot find 'reduce' in scope\n  \
    \  return reduce(0) { $0 + $1 * $1 }\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map({ sqrt($0) }).reduce(0.0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgj13s64v.swift:17:20: error: cannot find 'sqrt' in scope\n  return\
    \ lst.map({ sqrt($0) }).reduce(0.0, +)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += Int(i * i)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpjg6_mgy2/tmpjg6_mgy2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67fbf64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67fbc5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67fbc5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67fbc5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjg6_mgy2                        0x00005623149227db <unavailable> + 6107

    5    libc.so.6                          0x00002b67fc150460 __libc_start_main +
    245

    6    tmpjg6_mgy2                        0x00005623149221a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum() //\
    \ Slower than O(n^2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8f5t_pj2.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum() // Slower than O(n^2)\n        \
    \   ~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { Int($0 * $0) }.sum())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpf7ctp8xc.swift:17:41: error: value of type '[Int]' has no member\
    \ 'sum'\n    return Int(lst.map { Int($0 * $0) }.sum())\n               ~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sqSum = 0\n    for i in 0..<lst.count\
    \ {\n        sqSum += i * i\n    }\n    return Int(sqSum)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp3vakpebs/tmp3vakpebs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affeec10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affee907b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affee907988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affee9067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vakpebs                        0x0000563a026b1661 <unavailable> + 5729

    5    libc.so.6                          0x00002affeedfc460 __libc_start_main +
    245

    6    tmp3vakpebs                        0x0000563a026b12b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    guard lst.count > 0 else { return 0\
    \ }\n    var res = 0.0\n    for number in lst {\n        res += number * number\n\
    \    }\n    return Int(ceil(res / 2.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpi91549jf.swift:22:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(res / 2.0))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int($0) }.fold(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpxwgf1q46.swift:17:32: error: value of type '[Int]' has no member\
    \ 'fold'\n    return lst.map { Int($0) }.fold(0, +)\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for el in lst {\n\
    \        sum += (el * el)\n    }\n    return Int(math.Ceil(sum / Double(lstCount)))\
    \ + sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmps95c9x6c.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += (el * el)\n                \
    \   ^\n               Int(     )\n/tmp/tmps95c9x6c.swift:21:16: error: cannot\
    \ find 'math' in scope\n    return Int(math.Ceil(sum / Double(lstCount))) + sum\n\
    \               ^~~~\n/tmp/tmps95c9x6c.swift:21:39: error: cannot find 'lstCount'\
    \ in scope\n    return Int(math.Ceil(sum / Double(lstCount))) + sum\n        \
    \                              ^~~~~~~~\n/tmp/tmps95c9x6c.swift:21:30: error:\
    \ binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    return Int(math.Ceil(sum / Double(lstCount))) + sum\n                   \
    \      ~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmps95c9x6c.swift:21:30: note: overloads for\
    \ '/' exist with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    return Int(math.Ceil(sum / Double(lstCount))) + sum\n\
    \                             ^\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.isEmpty {\n        return 0\n\
    \    }\n\n    let upper = lst.max()!\n    var sum = 0.0\n    for i in lst {\n\
    \        sum += i * i\n    }\n    return round(sum * pow(2.0, Double(upper)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpk2ibi5g3.swift:26:12: error: cannot find 'round' in scope\n   \
    \ return round(sum * pow(2.0, Double(upper)))\n           ^~~~~\n/tmp/tmpk2ibi5g3.swift:26:24:\
    \ error: cannot find 'pow' in scope\n    return round(sum * pow(2.0, Double(upper)))\n\
    \                       ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.isEmpty() {\n        return\
    \ 0\n    }\n\n    let max = lst.max()!\n    var sum: Int = 0\n\n    for d in lst\
    \ {\n        sum += d * d\n    }\n\n    sum = Int(round(sum / max))\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwf0zvell.swift:17:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpwf0zvell.swift:25:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += d * d\n                 ^\n\
    \               Int( )\n/tmp/tmpwf0zvell.swift:28:15: error: cannot find 'round'\
    \ in scope\n    sum = Int(round(sum / max))\n              ^~~~~\n/tmp/tmpwf0zvell.swift:28:25:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    sum = Int(round(sum / max))\n                    ~~~ ^ ~~~\n/tmp/tmpwf0zvell.swift:28:25:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    sum = Int(round(sum /\
    \ max))\n                        ^\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { (value) -> Double\
    \ in\n        let result = value * value\n        return Int(ceil(Double(result)))\n\
    \    }.sum() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgw96m88v.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    return Int(ceil(Double(result)))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpju0bdhcp.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = lst[0]\n    for _ in 1...lst.count\
    \ {\n        sum += lst[_]\n    }\n    return Int(round(pow(sum, 2.0)))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaskrgknv.swift:19:20: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        sum += lst[_]\n                 \
    \  ^\n/tmp/tmpaskrgknv.swift:21:16: error: cannot find 'round' in scope\n    return\
    \ Int(round(pow(sum, 2.0)))\n               ^~~~~\n/tmp/tmpaskrgknv.swift:21:22:\
    \ error: cannot find 'pow' in scope\n    return Int(round(pow(sum, 2.0)))\n  \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.reduce(0, { $0 + pow(Double($1),\
    \ 2) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9_u57zca.swift:17:33: error: cannot find 'pow' in scope\n    return\
    \ lst.reduce(0, { $0 + pow(Double($1), 2) })\n                               \
    \ ^~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let len = lst.count\n    if len ==\
    \ 0 {\n        return 0\n    }\n    let sq = lst[0] * lst[0]\n    for i in 1..<len\
    \ {\n        sq += lst[i] * lst[i]\n    }\n    return Int(ceil(Double(sq)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu0oq11j6.swift:23:12: error: left side of mutating operator isn't\
    \ mutable: 'sq' is a 'let' constant\n        sq += lst[i] * lst[i]\n        ~~\
    \ ^\n/tmp/tmpu0oq11j6.swift:21:5: note: change 'let' to 'var' to make it mutable\n\
    \    let sq = lst[0] * lst[0]\n    ^~~\n    var\n/tmp/tmpu0oq11j6.swift:25:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(Double(sq)))\n     \
    \          ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    guard lst.count != 0 else { return\
    \ 0 }\n    var result = 0.0\n    for x in lst {\n        result = result + (x)\
    \ * (x)\n    }\n    return (Int(result))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpxd19sdej/tmpxd19sdej.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2b85a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2b829bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2b829b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2b829a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxd19sdej                        0x000055bed2c3d82b <unavailable> + 6187

    5    libc.so.6                          0x00002ad2b8790460 __libc_start_main +
    245

    6    tmpxd19sdej                        0x000055bed2c3d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009850
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map(Int.init).reduce(0)\
    \ { $0 + $1 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp1pj08y_5/tmp1pj08y_5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0d45a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0d429fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0d429f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0d429e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1pj08y_5                        0x0000562635e70501 <unavailable> + 5377

    5    libc.so.6                          0x00002ac0d4794460 __libc_start_main +
    245

    6    tmp1pj08y_5                        0x0000562635e70159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += i * i\n    }\n    return Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum)))\
    \ + Int(ceil(CGFloat(sum)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm7k0f6jb.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n/tmp/tmpm7k0f6jb.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum)))\n\
    \               ^~~~\n/tmp/tmpm7k0f6jb.swift:21:21: error: cannot find 'CGFloat'\
    \ in scope\n    return Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum)))\n\
    \                    ^~~~~~~\n/tmp/tmpm7k0f6jb.swift:21:42: error: cannot find\
    \ 'ceil' in scope\n    return Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum)))\
    \ + Int(ceil(CGFloat(sum)))\n                                         ^~~~\n/tmp/tmpm7k0f6jb.swift:21:47:\
    \ error: cannot find 'CGFloat' in scope\n    return Int(ceil(CGFloat(sum))) +\
    \ Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum)))\n                        \
    \                      ^~~~~~~\n/tmp/tmpm7k0f6jb.swift:21:68: error: cannot find\
    \ 'ceil' in scope\n    return Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum)))\
    \ + Int(ceil(CGFloat(sum)))\n                                                \
    \                   ^~~~\n/tmp/tmpm7k0f6jb.swift:21:73: error: cannot find 'CGFloat'\
    \ in scope\n    return Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum))) + Int(ceil(CGFloat(sum)))\n\
    \                                                                        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.count < 2 {\n        return\
    \ 0.0\n    }\n    var sqsum = 0\n    for i in lst {\n        sqsum += i * i\n\
    \    }\n    return Int(floor(Double(sqsum) + 0.5))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt2xgm0fw.swift:18:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n        return 0.0\n               ^~~\n\
    \               Int( )\n/tmp/tmpt2xgm0fw.swift:22:20: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n        sqsum += i * i\n \
    \                  ^\n                 Int( )\n/tmp/tmpt2xgm0fw.swift:24:16: error:\
    \ cannot find 'floor' in scope\n    return Int(floor(Double(sqsum) + 0.5))\n \
    \              ^~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.filter { $0 > 0 }.map {\
    \ pow($0, 2.0) }.sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprve2q9w5.swift:17:40: error: cannot find 'pow' in scope\n    return\
    \ lst.filter { $0 > 0 }.map { pow($0, 2.0) }.sum\n                           \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.flatMap({ Double($0).roundToInt()*Double($0).roundToInt()\
    \ }).reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpadth43ba.swift:17:83: error: extraneous argument label 'combine:'\
    \ in call\n    return lst.flatMap({ Double($0).roundToInt()*Double($0).roundToInt()\
    \ }).reduce(0, combine: +)\n                                                 \
    \                                 ^   ~~~~~~~~~\n                            \
    \                                                          \n/tmp/tmpadth43ba.swift:17:37:\
    \ error: value of type 'Double' has no member 'roundToInt'\n    return lst.flatMap({\
    \ Double($0).roundToInt()*Double($0).roundToInt() }).reduce(0, combine: +)\n \
    \                        ~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpadth43ba.swift:17:61:\
    \ error: value of type 'Double' has no member 'roundToInt'\n    return lst.flatMap({\
    \ Double($0).roundToInt()*Double($0).roundToInt() }).reduce(0, combine: +)\n \
    \                                                ~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009900
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var res = 0.0\n    for val in lst {\n\
    \        let d = ceil(val * val)\n        res += d\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm012u5l3.swift:19:17: error: cannot find 'ceil' in scope\n    \
    \    let d = ceil(val * val)\n                ^~~~\n/tmp/tmpm012u5l3.swift:22:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return res\n           ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0;\n\n    for num in lst\
    \ {\n        sum += num * num;\n    }\n\n    return Int(round(Double(sum)));\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpnnn18v4t.swift:23:16: error: cannot find 'round' in scope\n   \
    \ return Int(round(Double(sum)));\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    if lst.count > 0 {\n        return\
    \ Int(ceil(sum_squares(lst: lst.0)))\n    }\n    \n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp66bygd7f.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    return Int(ceil(sum_squares(lst: lst.0)))\n                   ^~~~\n/tmp/tmp66bygd7f.swift:19:46:\
    \ error: value of type '[Double]' has no member '0'\n        return Int(ceil(sum_squares(lst:\
    \ lst.0)))\n                                         ~~~ ^\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    var squares: Int =\
    \ 0\n    for i in 0..<lst.count {\n        sum += lst[i] * lst[i]\n        squares\
    \ += lst[i] * lst[i]\n    }\n    return Int(round(Float(squares)/Double(sum)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp65axjcrw.swift:20:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += lst[i] * lst[i]\n          \
    \            ^\n               Int(           )\n/tmp/tmp65axjcrw.swift:21:27:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        squares += lst[i] * lst[i]\n                          ^\n           \
    \        Int(           )\n/tmp/tmp65axjcrw.swift:23:16: error: cannot find 'round'\
    \ in scope\n    return Int(round(Float(squares)/Double(sum)))\n              \
    \ ^~~~~\n/tmp/tmp65axjcrw.swift:23:36: error: binary operator '/' cannot be applied\
    \ to operands of type 'Float' and 'Double'\n    return Int(round(Float(squares)/Double(sum)))\n\
    \                     ~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmp65axjcrw.swift:23:36:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Float, Float)\n    return Int(round(Float(squares)/Double(sum)))\n\
    \                                   ^\n"
  stdout: ''
  timestamp: 1660009851
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for v in lst {\n \
    \       sum += (v * v)\n    }\n    return Int(ceilf(Double(sum)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp2tj0l6p_.swift:19:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += (v * v)\n                  ^\n\
    \               Int(   )\n/tmp/tmp2tj0l6p_.swift:21:16: error: cannot find 'ceilf'\
    \ in scope\n    return Int(ceilf(Double(sum)))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    if lst.count == 0 {\n        return\
    \ 0\n    }\n\n    var sum = 0.0\n    for num in lst {\n        let f = num.truncatingRemainder(dividingBy:\
    \ 1.0)\n        sum += f * f\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpi0fbd4ww.swift:27:12: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum\n           ^~~\n       \
    \    Int( )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = lst.reduce(0, +)\n    let\
    \ sqsum = lst.map{ $0 * $0 }.reduce(0, +)\n    return sum + sqsum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpjl46n_gw.swift:19:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum + sqsum\n           ~~~~^~~~~~~\n\
    \           Int(       )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sortedLst = lst.sorted(by: <)\n\
    \    return sortedLst.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzbn_8x0k.swift:18:28: error: extraneous argument label 'combine:'\
    \ in call\n    return sortedLst.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpzbn_8x0k.swift:18:41:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, Double) throws -> Int'\n    return sortedLst.reduce(0, combine: +)\n\
    \                                        ^\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for d in lst {\n \
    \       sum += d*d\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6469hh84.swift:19:17: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += d*d\n                ^\n   \
    \            Int( )\n/tmp/tmp6469hh84.swift:21:16: error: cannot find 'ceil' in\
    \ scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum : Int = 0\n    var n = lst.count\n\
    \    for i in 0..<n {\n        sum = sum + pow(lst[i], 2.0)\n    }\n    return\
    \ Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpeqoturc9.swift:20:21: error: cannot find 'pow' in scope\n     \
    \   sum = sum + pow(lst[i], 2.0)\n                    ^~~\n/tmp/tmpeqoturc9.swift:22:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(sum))\n            \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // write your code in Swift 4.2 or\
    \ later\n    let maxIndex:Int? = lst.max() ?? 0\n    var sum:Double = 0.0\n  \
    \  for (index, element) in lst.enumerated() {\n        sum += pow(element, Double(index))\n\
    \    }\n    return sum + pow(maxIndex, Double(lst.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp2ktvwsu8.swift:18:29: error: cannot convert value of type 'Double?'\
    \ to expected argument type 'Int?'\n    let maxIndex:Int? = lst.max() ?? 0\n \
    \                           ^\n/tmp/tmp2ktvwsu8.swift:21:16: error: cannot find\
    \ 'pow' in scope\n        sum += pow(element, Double(index))\n               ^~~\n\
    /tmp/tmp2ktvwsu8.swift:23:18: error: cannot find 'pow' in scope\n    return sum\
    \ + pow(maxIndex, Double(lst.count))\n                 ^~~\n/tmp/tmp2ktvwsu8.swift:23:16:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum + pow(maxIndex, Double(lst.count))\n           ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Int(                                  )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.sum { (num) -> Double in\n\
    \        let ceiling = num.ceiling()\n        return ceiling * ceiling\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu5w_3lji.swift:17:16: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.sum { (num) -> Double in\n           ~~~ ^~~\n/tmp/tmpu5w_3lji.swift:19:24:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return ceiling * ceiling\n               ~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum_squares(lst: lst, roundToUpper:\
    \ true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgea51nye.swift:17:48: error: extra argument 'roundToUpper' in call\n\
    \    return sum_squares(lst: lst, roundToUpper: true)\n                      ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum_ = 0\n    for x in lst {\n\
    \        sum_ += x * x\n    }\n    return Int(ceil(sum_))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpugogt48j.swift:19:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum_ += x * x\n                  ^\n\
    \                Int( )\n/tmp/tmpugogt48j.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum_))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Int = 0\n    for d in lst\
    \ {\n        sum += d * d\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpntdc45wh.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += d * d\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  var sumSq = 0\n  for v\
    \ in lst {\n    sum += v\n    sumSq += v * v\n  }\n  return Int(round(sumSq /\
    \ Float(countElements(lst))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp0465obwx.swift:20:12: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    sum += v\n           ^\n           Int(\
    \ )\n/tmp/tmp0465obwx.swift:21:16: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    sumSq += v * v\n               ^\n    \
    \         Int( )\n/tmp/tmp0465obwx.swift:23:14: error: cannot find 'round' in\
    \ scope\n  return Int(round(sumSq / Float(countElements(lst))))\n            \
    \ ^~~~~\n/tmp/tmp0465obwx.swift:23:34: error: cannot find 'countElements' in scope\n\
    \  return Int(round(sumSq / Float(countElements(lst))))\n                    \
    \             ^~~~~~~~~~~~~\n/tmp/tmp0465obwx.swift:23:26: error: binary operator\
    \ '/' cannot be applied to operands of type 'Int' and 'Float'\n  return Int(round(sumSq\
    \ / Float(countElements(lst))))\n                   ~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0465obwx.swift:23:26: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Float, Float), (Int, Int)\n  return Int(round(sumSq\
    \ / Float(countElements(lst))))\n                         ^\n"
  stdout: ''
  timestamp: 1660009851
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var result = 0.0\n  for value in lst\
    \ {\n    result += value * value\n  }\n  return Int(result)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpz8gdxgvm/tmpz8gdxgvm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba08071bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba080412b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba080412988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0804117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz8gdxgvm                        0x0000557e6cdc67db <unavailable> + 6107

    5    libc.so.6                          0x00002ba080907460 __libc_start_main +
    245

    6    tmpz8gdxgvm                        0x0000557e6cdc61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += i * i\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpx7kct1v7.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n/tmp/tmpx7kct1v7.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for i in 0..<lst.count\
    \ {\n        result = (result + pow(Double(i), 2.0)).round()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpmd3d7pzx.swift:19:28: error: cannot find 'pow' in scope\n     \
    \   result = (result + pow(Double(i), 2.0)).round()\n                        \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var total = 0\n    for num in lst {\n\
    \        total += num * num\n    }\n    return Int(ceil(total))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpex7pxkjo.swift:19:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        total += num * num\n              \
    \       ^\n                 Int(     )\n/tmp/tmpex7pxkjo.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(total))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return sum_squares(lst: lst, length:\
    \ lst.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5r54jzmw.swift:17:44: error: extra argument 'length' in call\n\
    \  return sum_squares(lst: lst, length: lst.count)\n                    ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp14znxqvj.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp14znxqvj.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.powi(2) }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7ey3xlky.swift:17:35: error: value of type 'Array<_>' has no member\
    \ 'sum'\n    return lst.map { $0.powi(2) }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmp7ey3xlky.swift:17:25: error: value of type 'Double' has no member\
    \ 'powi'\n    return lst.map { $0.powi(2) }.sum()\n                     ~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    guard lst.count > 0 else { return 0\
    \ }\n    var sum = 0\n    for i in 0..<lst.count {\n        sum += pow(Double(lst.i)!,\
    \ 2)\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5akrt6dk.swift:20:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(Double(lst.i)!, 2)\n               ^~~\n/tmp/tmp5akrt6dk.swift:20:31:\
    \ error: value of type '[Double]' has no member 'i'\n        sum += pow(Double(lst.i)!,\
    \ 2)\n                          ~~~ ^\n/tmp/tmp5akrt6dk.swift:22:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  if lst.count == 0 {\n    return 0\n \
    \ }\n  return Int(sqrt(Double(sum(lst.map { $0 * $0 }))))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmph1i7zw0y.swift:20:14: error: cannot find 'sqrt' in scope\n  return\
    \ Int(sqrt(Double(sum(lst.map { $0 * $0 }))))\n             ^~~~\n/tmp/tmph1i7zw0y.swift:20:26:\
    \ error: cannot find 'sum' in scope\n  return Int(sqrt(Double(sum(lst.map { $0\
    \ * $0 }))))\n                         ^~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return sum_squares(lst: lst, rounding:\
    \ ceil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6zeft4iw.swift:17:44: error: cannot find 'ceil' in scope\n    return\
    \ sum_squares(lst: lst, rounding: ceil)\n                                    \
    \       ^~~~\n/tmp/tmp6zeft4iw.swift:17:44: error: extra argument 'rounding' in\
    \ call\n    return sum_squares(lst: lst, rounding: ceil)\n                   \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    guard lst.count > 0 else { return 0\
    \ }\n    var sum = 0\n    lst.sortInPlace()\n    for i in 0..<lst.count {\n  \
    \      let x = round(Double(lst[i]))\n        sum += x * (x * x)\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpji6_x79z.swift:19:9: error: value of type '[Double]' has no member\
    \ 'sortInPlace'\n    lst.sortInPlace()\n    ~~~ ^~~~~~~~~~~\n/tmp/tmpji6_x79z.swift:21:17:\
    \ error: cannot find 'round' in scope\n        let x = round(Double(lst[i]))\n\
    \                ^~~~~\n/tmp/tmpji6_x79z.swift:22:23: error: cannot convert value\
    \ of type 'Duration' to expected argument type 'Int'\n        sum += x * (x *\
    \ x)\n                      ^\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  let sum = lst.reduce(0, {$0 + $1})\n\
    \  return Int(round(sum * sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppvuhwz5m.swift:18:14: error: cannot find 'round' in scope\n  return\
    \ Int(round(sum * sum))\n             ^~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpju0bdhcp.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return (lst.map { Int(pow(Double($0),\
    \ 2)) }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4elng8n_.swift:17:27: error: cannot find 'pow' in scope\n    return\
    \ (lst.map { Int(pow(Double($0), 2)) }).reduce(0, +)\n                       \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0.0\n  for num in lst {\n \
    \   sum += num * num\n  }\n  return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmped3min96.swift:21:14: error: cannot find 'ceil' in scope\n  return\
    \ Int(ceil(sum))\n             ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map(Float64).reduce(0.0).rounded(.up).map(Float64).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7eyie5t6.swift:17:16: error: no exact matches in call to instance\
    \ method 'map'\n    return lst.map(Float64).reduce(0.0).rounded(.up).map(Float64).reduce(0,\
    \ +)\n               ^\n/tmp/tmp7eyie5t6.swift:17:16: note: found candidate with\
    \ type '((Double) throws -> _) throws -> Array<_>'\n    return lst.map(Float64).reduce(0.0).rounded(.up).map(Float64).reduce(0,\
    \ +)\n               ^\n/tmp/tmp7eyie5t6.swift:17:39: error: missing argument\
    \ for parameter #2 in call\n    return lst.map(Float64).reduce(0.0).rounded(.up).map(Float64).reduce(0,\
    \ +)\n                                      ^\n                              \
    \        , <#(Double, _) throws -> Double#>\nSwift.Sequence:2:28: note: 'reduce'\
    \ declared here\n    @inlinable public func reduce<Result>(_ initialResult: Result,\
    \ _ nextPartialResult: (_ partialResult: Result, Self.Element) throws -> Result)\
    \ rethrows -> Result\n                           ^\n/tmp/tmp7eyie5t6.swift:17:54:\
    \ error: value of type 'Double' has no member 'map'\n    return lst.map(Float64).reduce(0.0).rounded(.up).map(Float64).reduce(0,\
    \ +)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += i * i\n    }\n    return Int(round(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpszun0fek.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n/tmp/tmpszun0fek.swift:21:16: error: cannot find 'round'\
    \ in scope\n    return Int(round(sum))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum: Double = 0.0\n  for num in lst\
    \ {\n    sum += pow(num, 2)\n  }\n  return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprfbv9t3_.swift:19:12: error: cannot find 'pow' in scope\n    sum\
    \ += pow(num, 2)\n           ^~~\n/tmp/tmprfbv9t3_.swift:21:14: error: cannot\
    \ find 'ceil' in scope\n  return Int(ceil(sum))\n             ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = lst.map { $0 * $0 }\n   \
    \ return sum.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9sm775sb.swift:18:26: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Double) throws -> Int'\n    return\
    \ sum.reduce(0, +)\n                         ^\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // Write your code here\n    let sum\
    \ = 0\n    for n in lst {\n        sum += n * n\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpvroix34y.swift:20:9: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        sum += n * n\n        ^\n      \
    \  Double( )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map({$0 * $0}).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp707k138m.swift:17:24: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map({$0 * $0}).reduce(0, +)\n \
    \                   ~~~^~~~\n                    Int(   )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.filter { $0 * $0 }.map {\
    \ $0.roundToInt().pow(2) }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpim9_0j03.swift:17:28: error: cannot convert value of type 'Double'\
    \ to closure result type 'Bool'\n    return lst.filter { $0 * $0 }.map { $0.roundToInt().pow(2)\
    \ }.sum()\n                        ~~~^~~~\n/tmp/tmpim9_0j03.swift:17:66: error:\
    \ value of type 'Array<_>' has no member 'sum'\n    return lst.filter { $0 * $0\
    \ }.map { $0.roundToInt().pow(2) }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpim9_0j03.swift:17:44: error: value of type 'Double' has no member\
    \ 'roundToInt'\n    return lst.filter { $0 * $0 }.map { $0.roundToInt().pow(2)\
    \ }.sum()\n                                        ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    for x in lst {\n\
    \        sum += (x + x) / 2.0\n    }\n    return Int(Double(sum))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpudskug5m/tmpudskug5m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cf487ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cf4571b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cf4571988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cf45707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudskug5m                        0x000055c222cd05a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b7cf4a66460 __libc_start_main +
    245

    6    tmpudskug5m                        0x000055c222cd01f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += pow(i, 2)\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_rvoz2iu.swift:19:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(i, 2)\n               ^~~\n/tmp/tmp_rvoz2iu.swift:21:16: error:\
    \ cannot find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    let sum = lst.reduce(0, {$0 +\
    \ $1})\n    return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpy35srbnj.swift:19:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum * sum\n           ~~~~^~~~~\n\
    \           Int(     )\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for i in lst\
    \ {\n        sum += pow(i, 2)\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptww1cza1.swift:19:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(i, 2)\n               ^~~\n/tmp/tmptww1cza1.swift:21:16: error:\
    \ cannot find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009850
