language: swift
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var uniques: [Int] = []\n  for uniqueInt in l {\n    if !contains(uniques,\
    \ uniqueInt) {\n      uniques.append(uniqueInt)\n    }\n  }\n  return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpcz0oqe04.swift:8:9: error: cannot find 'contains' in scope\n  \
    \  if !contains(uniques, uniqueInt) {\n        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var res: [Int] = []\n    for el in l {\n        if res.contains(el)\
    \ {\n            continue\n        }\n        res.append(el)\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmps57fhohu/tmps57fhohu.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5caf83ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5caf535b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5caf535988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5caf5347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps57fhohu                        0x00005596beea1645 <unavailable> + 5701

    5    libc.so.6                          0x00002b5cafa2a460 __libc_start_main +
    245

    6    tmps57fhohu                        0x00005596beea11f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = Set<Int>()\n    for x in l {\n        if !result.contains(x)\
    \ {\n            result.insert(x)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var indexSet = Set()\n    var result = [Int]()\n    for x in\
    \ l {\n        if !indexSet.contains(x) {\n            indexSet.add(x)\n     \
    \       result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpq0uwmlic.swift:6:20: error: generic parameter 'Element' could not\
    \ be inferred\n    var indexSet = Set()\n                   ^\n/tmp/tmpq0uwmlic.swift:6:20:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var indexSet\
    \ = Set()\n                   ^\n                      <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for val in l {\n        if !contains(&result,\
    \ val) { result = result + [val] }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp11_t1qov.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, val) { result = result + [val] }\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for a in l {\n        if !result.contains(a)\
    \ {\n            result.append(a)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp95r4lstl/tmp95r4lstl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13888eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13885e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13885e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13885e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95r4lstl                        0x00005560b0488695 <unavailable> + 5781

    5    libc.so.6                          0x00002b1388ad6460 __libc_start_main +
    245

    6    tmp95r4lstl                        0x00005560b0488249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var a = l\n    for x in a {\n        if a.contains(x) {\n  \
    \          a = a.filter {$0 != x}\n        } else {\n            a.append(x)\n\
    \        }\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmprsyph6zn/tmprsyph6zn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5284b46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b528483db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b528483d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b528483c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprsyph6zn                        0x000056315d759705 <unavailable> + 5893

    5    libc.so.6                          0x00002b5284d32460 __libc_start_main +
    245

    6    tmprsyph6zn                        0x000056315d7592b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for e in l {\n        if !contains(&result,\
    \ e) {\n            result.append(e)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpi_0yvvrt.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, e) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniques = [Int]()\n    for n in l {\n        if uniques.contains(n)\
    \ {\n            continue\n        }\n        uniques.append(n)\n    }\n    return\
    \ uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpy2ty0b9f/tmpy2ty0b9f.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabc8714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabc840bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabc840b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabc840a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2ty0b9f                        0x00005586afa4d695 <unavailable> + 5781

    5    libc.so.6                          0x00002aabc8900460 __libc_start_main +
    245

    6    tmpy2ty0b9f                        0x00005586afa4d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var result = [Int]()\n  for item in l {\n    if !contains(&result,\
    \ item) {\n      append(&result, item)\n    }\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpwe7wuwni.swift:8:9: error: cannot find 'contains' in scope\n  \
    \  if !contains(&result, item) {\n        ^~~~~~~~\n/tmp/tmpwe7wuwni.swift:9:7:\
    \ error: cannot find 'append' in scope\n      append(&result, item)\n      ^~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.filter { !contains(l, $0) }.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpxylxwwxk.swift:6:24: error: cannot find 'contains' in scope\n \
    \   return l.filter { !contains(l, $0) }.sorted()\n                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for number in l {\n        if !contains(result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpceuu0dgt.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    \n    var result: [Int] = []\n    \n    for number in l {\n\
    \        if !contains(&result, number) {\n            result.append(number)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7rt_hl3g.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var i = 0\n    var unique = [Int]()\n    for el in l {\n   \
    \     while i < l.count && el == l[i] {\n            i += 1\n        }\n     \
    \   if i == 0 {\n            unique.append(el)\n        } else {\n           \
    \ while i < l.count && el == l[i] {\n                i += 1\n            }\n \
    \           unique.append(el)\n        }\n    }\n    return unique\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpa3iy5b6t/tmpa3iy5b6t.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b548bb3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b548b831b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b548b831988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b548b8307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3iy5b6t                        0x000056006f8676e5 <unavailable> + 5861

    5    libc.so.6                          0x00002b548bd26460 __libc_start_main +
    245

    6    tmpa3iy5b6t                        0x000056006f867299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniqueArray = [Int]()\n    for ele in l {\n        if uniqueArray.contains(ele)\
    \ {\n            continue\n        } else {\n            uniqueArray.append(ele)\n\
    \        }\n    }\n    return uniqueArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpklvkvyqx/tmpklvkvyqx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b5e2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b5b23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b5b23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b5b227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklvkvyqx                        0x000055e97f348695 <unavailable> + 5781

    5    libc.so.6                          0x00002b31b6018460 __libc_start_main +
    245

    6    tmpklvkvyqx                        0x000055e97f348249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let set = NSSet(array: l)\n    return Array(set.allObjects)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7t_rxwyj.swift:6:15: error: cannot find 'NSSet' in scope\n    let\
    \ set = NSSet(array: l)\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let s = Set(l)\n    return Array(s)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: Exception
  stderr: 'tmpcn2klfl6/tmpcn2klfl6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2de67a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2de6497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2de6497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2de64967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcn2klfl6                        0x000056247fb12575 <unavailable> + 5493

    5    libc.so.6                          0x00002b2de698c460 __libc_start_main +
    245

    6    tmpcn2klfl6                        0x000056247fb12129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted().map { l[$0] }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba47ed51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba47ea48561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba47ea48286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba47ea4813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba47ea47bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba47e847e83 <unavailable> + 188035

    6    tmpila4alw0                        0x00005602b30277f0 <unavailable> + 6128

    7    tmpila4alw0                        0x00005602b3027dbf <unavailable> + 7615

    8    libswiftCore.so                    0x00002ba47ea30820 Collection.map<A>(_:)
    + 426

    9    tmpila4alw0                        0x00005602b302778b <unavailable> + 6027

    10   tmpila4alw0                        0x00005602b30275a5 <unavailable> + 5541

    11   libc.so.6                          0x00002ba47ef3d460 __libc_start_main +
    245

    12   tmpila4alw0                        0x00005602b3027259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var result = Set()\n  for el in l {\n    result.insert(el)\n \
    \ }\n  return result.sorted().array()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6n5g7ok5.swift:6:16: error: generic parameter 'Element' could not\
    \ be inferred\n  var result = Set()\n               ^\n/tmp/tmp6n5g7ok5.swift:6:16:\
    \ note: explicitly specify the generic arguments to fix this issue\n  var result\
    \ = Set()\n               ^\n                  <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var i = 0\n    var out = [Int]()\n    for el in l {\n      \
    \  if !contains(out, el) {\n            out.append(el)\n            i += 1\n \
    \       }\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpcech6we6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(out, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for i in l {\n        if !contains(&res,\
    \ i) {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpqjo_md3s.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&res, i) {\n            ^~~~~~~~\n/tmp/tmpqjo_md3s.swift:9:19:\
    \ error: cannot find 'append' in scope\n            res = append(res, i)\n   \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let set: Set<Int> = Set()\n    var result: [Int] = []\n    for\
    \ x in l {\n        if !set.contains(x) {\n            result.append(x)\n    \
    \        set.insert(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpif927xx4.swift:11:17: error: cannot use mutating member on immutable\
    \ value: 'set' is a 'let' constant\n            set.insert(x)\n            ~~~\
    \ ^\n/tmp/tmpif927xx4.swift:6:5: note: change 'let' to 'var' to make it mutable\n\
    \    let set: Set<Int> = Set()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let set: Set<Int> = Set(l)\n    return Array(set)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp49wxn8sm/tmp49wxn8sm.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20816bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20813b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20813b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20813b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49wxn8sm                        0x000055c644e5e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b20818aa460 __libc_start_main +
    245

    6    tmp49wxn8sm                        0x000055c644e5e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for el in l {\n        if !contains(res,\
    \ el) {\n            res.append(el)\n        }\n    }\n    return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp2w1ik8ff.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(res, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = Set()\n    var result: [Int] = []\n    for elt in\
    \ l {\n        if !seen.contains(elt) {\n            seen.insert(elt)\n      \
    \      result.append(elt)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpop0_a8mx.swift:6:16: error: generic parameter 'Element' could not\
    \ be inferred\n    var seen = Set()\n               ^\n/tmp/tmpop0_a8mx.swift:6:16:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var seen\
    \ = Set()\n               ^\n                  <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    \n    for element in l {\n     \
    \   if !contains(result, element) {\n            result.append(element)\n    \
    \    }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmph5_wnj6y.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for x in\
    \ l {\n        if !set.isEmpty {\n            set.insert(x)\n            continue\n\
    \        }\n        result.insert(x)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp38izu0gr.swift:13:24: error: missing argument for parameter 'at'\
    \ in call\n        result.insert(x)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp2b3g8b2v/tmp2b3g8b2v.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b2450c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2147b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2147988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b21467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b3g8b2v                        0x000055e5329ac575 <unavailable> + 5493

    5    libc.so.6                          0x00002af1b263c460 __libc_start_main +
    245

    6    tmp2b3g8b2v                        0x000055e5329ac129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    return l.filter { set.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpaamtkja6/tmpaamtkja6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0221673c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b022136ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b022136a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02213697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaamtkja6                        0x000055d42b3ba5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b022185f460 __libc_start_main +
    245

    6    tmpaamtkja6                        0x000055d42b3ba199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in l {\n        if result.contains(value)\
    \ {\n            continue\n        }\n        result.append(value)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpkvpfj_cx/tmpkvpfj_cx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3712cabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37129a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37129a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37129a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpfj_cx                        0x000055f82585f645 <unavailable> + 5701

    5    libc.so.6                          0x00002b3712e97460 __libc_start_main +
    245

    6    tmpkvpfj_cx                        0x000055f82585f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(&result,\
    \ &x) {\n            result = append(result, x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpygj_x3l6.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, &x) {\n            ^~~~~~~~\n/tmp/tmpygj_x3l6.swift:8:31:\
    \ error: cannot pass immutable value as inout argument: 'x' is a 'let' constant\n\
    \        if !contains(&result, &x) {\n                              ^~\n/tmp/tmpygj_x3l6.swift:9:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, x)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    if l == nil {\n        return []\n    }\n    \n    let dict\
    \ = Dictionary<Int, Bool>()\n    var uniq = [Int]()\n    for v in l {\n      \
    \  if let key = dict.objectForKey(v) {\n            uniq.append(v)\n        }\
    \ else {\n            dict[v] = true\n        }\n    }\n    \n    return uniq\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpltd317rj.swift:6:10: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns false\n    if l == nil {\n       ~ ^  ~~~\n\
    /tmp/tmpltd317rj.swift:13:27: error: value of type '[Int : Bool]' has no member\
    \ 'objectForKey'\n        if let key = dict.objectForKey(v) {\n              \
    \       ~~~~ ^~~~~~~~~~~~\n/tmp/tmpltd317rj.swift:16:17: error: cannot assign\
    \ through subscript: 'dict' is a 'let' constant\n            dict[v] = true\n\
    \            ~~~~^\n/tmp/tmpltd317rj.swift:10:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let dict = Dictionary<Int, Bool>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !result.contains(x)\
    \ {\n            result.append(x)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpar69bluf/tmpar69bluf.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50e8177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50e7e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50e7e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50e7e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpar69bluf                        0x0000560dfb151645 <unavailable> + 5701

    5    libc.so.6                          0x00002b50e8363460 __libc_start_main +
    245

    6    tmpar69bluf                        0x0000560dfb1511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let resultSet = NSMutableSet(array: l)\n    return Array(resultSet.allObjects)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpvuqx52qv.swift:6:21: error: cannot find 'NSMutableSet' in scope\n\
    \    let resultSet = NSMutableSet(array: l)\n                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return uniquify(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp4dnxdavz.swift:6:12: error: cannot find 'uniquify' in scope\n \
    \   return uniquify(l)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let count = l.count\n    var unique = [Int]()\n    for idx in\
    \ 0..<count {\n        if unique.contains(l[idx]) {\n            continue\n  \
    \      }\n        unique.append(l[idx])\n    }\n    return unique\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpykc8r23x/tmpykc8r23x.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b635a145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6359e3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6359e3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6359e3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpykc8r23x                        0x000055e2a1108765 <unavailable> + 5989

    5    libc.so.6                          0x00002b635a331460 __libc_start_main +
    245

    6    tmpykc8r23x                        0x000055e2a1108319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    for x in l {\n        if !seen.contains(x)\
    \ {\n            seen.append(x)\n        }\n    }\n    return seen\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp75gv8_h_/tmp75gv8_h_.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02c911ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02c8e11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02c8e11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02c8e107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75gv8_h_                        0x00005648b619a695 <unavailable> + 5781

    5    libc.so.6                          0x00002b02c9306460 __libc_start_main +
    245

    6    tmp75gv8_h_                        0x00005648b619a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var unique = [Int]()\n    for el in l {\n        if !contains(unique,\
    \ el) {\n            unique.append(el)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpykd0z9on.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    l.sort()\n    var result = [Int]()\n    for i : Int in l.indices\
    \ {\n        if !contains(&result, i) {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpe8fidz_x.swift:6:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpe8fidz_x.swift:9:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(&result, i) {\n\
    \            ^~~~~~~~\n/tmp/tmpe8fidz_x.swift:10:22: error: cannot find 'append'\
    \ in scope\n            result = append(result, i)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !result.contains(x)\
    \ {\n            result.append(x)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpzc_gk8bd/tmpzc_gk8bd.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1d3e3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1d3b33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1d3b33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1d3b327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzc_gk8bd                        0x000055e14cf47695 <unavailable> + 5781

    5    libc.so.6                          0x00002ae1d4028460 __libc_start_main +
    245

    6    tmpzc_gk8bd                        0x000055e14cf47249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = [0]\n    var result = [Int]()\n    for e in\
    \ l {\n        if seen[0] != e {\n            seen = [e]\n            result =\
    \ [e]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp57kwsnh1/tmp57kwsnh1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4109288c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4108f7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4108f7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4108f7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57kwsnh1                        0x0000555b848e4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b4109474460 __libc_start_main +
    245

    6    tmp57kwsnh1                        0x0000555b848e41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var seen = [Bool]()\n    for val in\
    \ l {\n        if seen[val] {\n            continue\n        } else {\n      \
    \      seen[val] = true\n            result.append(val)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9730eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac972de5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac972de5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac972de513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac972de4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac972dce48a <unavailable> + 1340554

    6    tmpkr927khz                        0x000055992a0de8b2 <unavailable> + 6322

    7    tmpkr927khz                        0x000055992a0de655 <unavailable> + 5717

    8    libc.so.6                          0x00002ac9732da460 __libc_start_main +
    245

    9    tmpkr927khz                        0x000055992a0de309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    l.sort()\n    var u: [Int] = []\n    for x in l {\n        if\
    \ !contains(u, x) {\n            u.append(x)\n        }\n    }\n    return u\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_kq2f15c.swift:6:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp_kq2f15c.swift:9:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(u, x) {\n     \
    \       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    return filter(l, { i in\n        if\
    \ seen.contains(i) {\n            return false\n        }\n        seen.append(i)\n\
    \        return true\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmppn7uux8v.swift:7:12: error: cannot find 'filter' in scope\n   \
    \ return filter(l, { i in\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let result: [Int] = []\n    let set = Set<Int>()\n    l.forEach\
    \ { n in\n        if set.contains(n) {\n            set.insert(n)\n        } else\
    \ {\n            append(n, &result)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmph5oqk8lc.swift:12:13: error: cannot find 'append' in scope\n  \
    \          append(n, &result)\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var prev: Int = l[0]\n    for i in\
    \ l {\n        if i == prev {\n            continue\n        }\n        prev =\
    \ i\n        result.append(i)\n    }\n    return result.sort()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp9g3sn4pr.swift:15:19: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return result.sort()\n           ~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp0armkd9_.swift:6:14: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return l.sort()\n           ~~^~~~~~\n\
    /tmp/tmp0armkd9_.swift:6:14: error: cannot use mutating member on immutable value:\
    \ 'l' is a 'let' constant\n    return l.sort()\n           ~ ^\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen:[Int] = Array(count: l.count, repeatedValue: -1)\n\
    \    var filtered:[Int] = Array(count: l.count, repeatedValue: -1)\n    for x\
    \ in l {\n        if seen[x] != -1 {\n            filtered[seen[x]] = x\n    \
    \    } else {\n            seen[x] = l.count\n            filtered[l.count] =\
    \ x\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp2fx4j2if.swift:6:59: error: extra argument 'repeatedValue' in call\n\
    \    var seen:[Int] = Array(count: l.count, repeatedValue: -1)\n             \
    \             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/tmp/tmp2fx4j2if.swift:6:28:\
    \ error: missing argument for parameter 'repeating' in call\n    var seen:[Int]\
    \ = Array(count: l.count, repeatedValue: -1)\n                           ^\n \
    \                          repeating: <#Int#>, \nSwift.Array:4:23: note: 'init(repeating:count:)'\
    \ declared here\n    @inlinable public init(repeating repeatedValue: Element,\
    \ count: Int)\n                      ^\n/tmp/tmp2fx4j2if.swift:7:63: error: extra\
    \ argument 'repeatedValue' in call\n    var filtered:[Int] = Array(count: l.count,\
    \ repeatedValue: -1)\n                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    /tmp/tmp2fx4j2if.swift:7:32: error: missing argument for parameter 'repeating'\
    \ in call\n    var filtered:[Int] = Array(count: l.count, repeatedValue: -1)\n\
    \                               ^\n                               repeating: <#Int#>,\
    \ \nSwift.Array:4:23: note: 'init(repeating:count:)' declared here\n    @inlinable\
    \ public init(repeating repeatedValue: Element, count: Int)\n                \
    \      ^\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var i = 0\n    var arr: [Int] = []\n    while i < l.count {\n\
    \        if arr != nil && arr!.contains(l[i]) {\n            i += 1\n        }\
    \ else {\n            arr.append(l[i])\n        }\n    }\n    return arr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp9kvk3ii0.swift:9:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        if arr != nil && arr!.contains(l[i]) {\n             \
    \            ~~~^\n                            \n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    l.sort()\n    var result = l\n    for i = 1; i < l.count; i++\
    \ {\n        if l[i-1] != l[i] {\n            result.removeAtIndex(i)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpk2lqthnu.swift:8:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 1; i < l.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpk2lqthnu.swift:6:7: error: cannot use mutating member on immutable value:\
    \ 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var output = [Int]()\n    for num in l {\n        if output.contains(num)\
    \ {\n            continue\n        } else {\n            output.append(num)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpogi8js6j/tmpogi8js6j.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65c1497c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65c118eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65c118e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65c118d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogi8js6j                        0x000055ff11522695 <unavailable> + 5781

    5    libc.so.6                          0x00002b65c1683460 __libc_start_main +
    245

    6    tmpogi8js6j                        0x000055ff11522249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if result.contains(x)\
    \ {\n            continue\n        }\n        result.append(x)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpj438y90b/tmpj438y90b.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5060ba5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b506089cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b506089c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b506089b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj438y90b                        0x0000558f8a926695 <unavailable> + 5781

    5    libc.so.6                          0x00002b5060d91460 __libc_start_main +
    245

    6    tmpj438y90b                        0x0000558f8a926249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniqueValues: [Int] = []\n    for value in l {\n       \
    \ if !contains(uniqueValues, value) {\n            uniqueValues.append(value)\n\
    \        }\n    }\n    return uniqueValues\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpg0oc1h56.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(uniqueValues, value) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in l {\n        if result.contains(element)\
    \ {\n            continue\n        }\n        result.append(element)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp4jjnwsr5/tmp4jjnwsr5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01f2cf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01f29e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01f29e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01f29e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jjnwsr5                        0x000055d61e68b695 <unavailable> + 5781

    5    libc.so.6                          0x00002b01f2edc460 __libc_start_main +
    245

    6    tmp4jjnwsr5                        0x000055d61e68b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var result = [Int]()\n  result = Array(Set(result))\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpak5a8pnk/tmpak5a8pnk.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07512cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0750fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0750fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0750fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpak5a8pnk                        0x0000557b2b30f5c5 <unavailable> + 5573

    5    libc.so.6                          0x00002b07514b9460 __libc_start_main +
    245

    6    tmpak5a8pnk                        0x0000557b2b30f179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = []\n    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(seen, x) {\n            seen = append(seen, x)\n \
    \           result = append(result, x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp5_qb5a9p.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n/tmp/tmp5_qb5a9p.swift:10:20:\
    \ error: cannot find 'append' in scope\n            seen = append(seen, x)\n \
    \                  ^~~~~~\n/tmp/tmp5_qb5a9p.swift:11:22: error: cannot find 'append'\
    \ in scope\n            result = append(result, x)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return l.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmppjycr386.swift:6:12: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n  return l.sort()\n         ~~^~~~~~\n/tmp/tmppjycr386.swift:6:12:\
    \ error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n\
    \  return l.sort()\n         ~ ^\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    return l.filter { set.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpaamtkja6/tmpaamtkja6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0221673c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b022136ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b022136a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02213697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaamtkja6                        0x000055d42b3ba5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b022185f460 __libc_start_main +
    245

    6    tmpaamtkja6                        0x000055d42b3ba199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniquified: [Int] = []\n    var index: Int = 0\n    for\
    \ el in l {\n        if !uniquified.contains(el) {\n            uniquified.append(el)\n\
    \        }\n    }\n    return uniquified\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpsmcb1ijq/tmpsmcb1ijq.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07f3165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07f2e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07f2e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07f2e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsmcb1ijq                        0x000056073587e645 <unavailable> + 5701

    5    libc.so.6                          0x00002b07f3351460 __libc_start_main +
    245

    6    tmpsmcb1ijq                        0x000056073587e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for element in l {\n        guard\
    \ !contains(result, element) else {\n            continue\n        }\n       \
    \ result.append(element)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpzo4jk_1z.swift:8:16: error: cannot find 'contains' in scope\n \
    \       guard !contains(result, element) else {\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7q_9ir3p.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if !contains(&result,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp0xkffyv7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let dict = Dictionary(uniquesOfUnsorted(l))\n    var array =\
    \ [Int]()\n    for (key, value) in dict {\n        array.append(value)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpcm_tjgtc.swift:6:27: error: cannot find 'uniquesOfUnsorted' in\
    \ scope\n    let dict = Dictionary(uniquesOfUnsorted(l))\n                   \
    \       ^~~~~~~~~~~~~~~~~\n/tmp/tmpcm_tjgtc.swift:6:16: error: no exact matches\
    \ in call to initializer \n    let dict = Dictionary(uniquesOfUnsorted(l))\n \
    \              ^\n/tmp/tmpcm_tjgtc.swift:6:16: note: found candidate with type\
    \ '(Int) -> Dictionary<_, _>'\n    let dict = Dictionary(uniquesOfUnsorted(l))\n\
    \               ^\n/tmp/tmpcm_tjgtc.swift:6:16: note: found candidate with type\
    \ '(any Decoder) throws -> Dictionary<_, _>'\n    let dict = Dictionary(uniquesOfUnsorted(l))\n\
    \               ^\n/tmp/tmpcm_tjgtc.swift:6:16: note: found candidate with type\
    \ '((_, _)...) -> Dictionary<_, _>'\n    let dict = Dictionary(uniquesOfUnsorted(l))\n\
    \               ^\n/tmp/tmpcm_tjgtc.swift:6:16: error: generic parameter 'Key'\
    \ could not be inferred\n    let dict = Dictionary(uniquesOfUnsorted(l))\n   \
    \            ^\n/tmp/tmpcm_tjgtc.swift:6:16: note: explicitly specify the generic\
    \ arguments to fix this issue\n    let dict = Dictionary(uniquesOfUnsorted(l))\n\
    \               ^\n                         <<#Key: Hashable#>, Any>\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var seen: [Int] = [0]\n    for x\
    \ in l {\n        if seen[seen[0]] == 0 {\n            seen[seen[0]] = x\n   \
    \         result += [seen[0]]\n        } else {\n            guard x != seen[seen[0]]\
    \ else { return result }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adeb60d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adeb5dcf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adeb5dcf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adeb5dcf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adeb5dcebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adeb5bcee83 <unavailable> + 188035

    6    tmp68aaubpe                        0x000055be851de812 <unavailable> + 6162

    7    tmp68aaubpe                        0x000055be851de585 <unavailable> + 5509

    8    libc.so.6                          0x00002adeb62c4460 __libc_start_main +
    245

    9    tmp68aaubpe                        0x000055be851de239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var last: Int?\n    for element in\
    \ l {\n        if !result.contains(element) {\n            result.append(element)\n\
    \        }\n        last?.isEqualTo(element)?.ifPresent() {\n            result.remove(last!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmprf6lnxec.swift:13:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(last!)\n                   ^\n/tmp/tmprf6lnxec.swift:13:20:\
    \ note: found candidate with type '(Int) -> Int'\n            result.remove(last!)\n\
    \                   ^\n/tmp/tmprf6lnxec.swift:12:15: error: value of type 'Int'\
    \ has no member 'isEqualTo'\n        last?.isEqualTo(element)?.ifPresent() {\n\
    \        ~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let seen = Set<Int>()\n    return l.filter{ seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkrz1ghg0.swift:7:27: error: cannot use mutating member on immutable\
    \ value: 'seen' is a 'let' constant\n    return l.filter{ seen.insert($0).inserted\
    \ }\n                     ~~~~ ^\n/tmp/tmpkrz1ghg0.swift:6:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let seen = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if result.contains(i)\
    \ {\n            continue\n        }\n        result.append(i)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpj7_hhqf0/tmpj7_hhqf0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22e91c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22e8ebab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22e8eba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22e8eb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7_hhqf0                        0x000055609bd8d695 <unavailable> + 5781

    5    libc.so.6                          0x00002b22e93af460 __libc_start_main +
    245

    6    tmpj7_hhqf0                        0x000055609bd8d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return l.sorted().reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpvmuh5qvd/tmpvmuh5qvd.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf64deac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf64ae1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf64ae1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf64ae07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmuh5qvd                        0x000055ba59dbc525 <unavailable> + 5413

    5    libc.so.6                          0x00002aaf64fd6460 __libc_start_main +
    245

    6    tmpvmuh5qvd                        0x000055ba59dbc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let seen = Set<Int>()\n    var result = [Int]()\n    for e in\
    \ l {\n        if seen.contains(e) {\n            continue\n        }\n      \
    \  seen.insert(e)\n        result.append(e)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7rxd68do.swift:12:14: error: cannot use mutating member on immutable\
    \ value: 'seen' is a 'let' constant\n        seen.insert(e)\n        ~~~~ ^\n\
    /tmp/tmp7rxd68do.swift:6:5: note: change 'let' to 'var' to make it mutable\n \
    \   let seen = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniqueArray = [Int]()\n    \n    for obj in l {\n      \
    \  if !uniqueArray.contains(obj) {\n            uniqueArray.append(obj)\n    \
    \    }\n    }\n    \n    return uniqueArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp4c9eygww/tmp4c9eygww.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba37c34fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba37c046b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba37c046988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba37c0457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c9eygww                        0x000056551b6b5695 <unavailable> + 5781

    5    libc.so.6                          0x00002ba37c53b460 __libc_start_main +
    245

    6    tmp4c9eygww                        0x000056551b6b5249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var result = [Int]()\n  var lastValue = l[0]\n  for element in\
    \ l {\n    if element != lastValue {\n      result.insert(element)\n    }\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmplbb1xjfh.swift:10:28: error: missing argument for parameter 'at'\
    \ in call\n      result.insert(element)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp0armkd9_.swift:6:14: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return l.sort()\n           ~~^~~~~~\n\
    /tmp/tmp0armkd9_.swift:6:14: error: cannot use mutating member on immutable value:\
    \ 'l' is a 'let' constant\n    return l.sort()\n           ~ ^\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set: [Int] = []\n    for el in l {\n        if !contains(set,\
    \ el) {\n            set += [el]\n        }\n    }\n    return set\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpwkicm_5c.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(set, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var unique = [Int]()\n    for value\
    \ in l {\n        if !contains(seen, value) {\n            append(seen, value)\n\
    \            append(unique, value)\n        }\n    }\n    return unique\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpglr8e4a8.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, value) {\n            ^~~~~~~~\n/tmp/tmpglr8e4a8.swift:10:13:\
    \ error: cannot find 'append' in scope\n            append(seen, value)\n    \
    \        ^~~~~~\n/tmp/tmpglr8e4a8.swift:11:13: error: cannot find 'append' in\
    \ scope\n            append(unique, value)\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return sort(sort(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmptzf3b14j.swift:6:12: error: cannot find 'sort' in scope\n    return\
    \ sort(sort(l))\n           ^~~~\n/tmp/tmptzf3b14j.swift:6:17: error: cannot find\
    \ 'sort' in scope\n    return sort(sort(l))\n                ^~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in l {\n        if !result.contains(value)\
    \ {\n            result.append(value)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpfgzqkb12/tmpfgzqkb12.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5c00b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5bfdb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5bfdb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5bfdaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfgzqkb12                        0x0000560deb5f7695 <unavailable> + 5781

    5    libc.so.6                          0x00002ab5c02a5460 __libc_start_main +
    245

    6    tmpfgzqkb12                        0x0000560deb5f7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = [0]\n    var result: [Int] = []\n    for v\
    \ in l {\n        if seen[v] == 1 {\n            continue\n        }\n       \
    \ result.append(v)\n        seen[v] = 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc595bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc592b6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc592b6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc592b613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc592b5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc590b5e83 <unavailable> + 188035

    6    tmppllswgc8                        0x000055cc922367fd <unavailable> + 6141

    7    tmppllswgc8                        0x000055cc92236585 <unavailable> + 5509

    8    libc.so.6                          0x00002abc597ab460 __libc_start_main +
    245

    9    tmppllswgc8                        0x000055cc92236239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.filter{ $0 != l.first }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: Exception
  stderr: 'tmpyxuzshcm/tmpyxuzshcm.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1124877c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b112456eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b112456e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b112456d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxuzshcm                        0x000055bbff80f585 <unavailable> + 5509

    5    libc.so.6                          0x00002b1124a63460 __libc_start_main +
    245

    6    tmpyxuzshcm                        0x000055bbff80f139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for a in l {\n        if !contains(result,\
    \ a) {\n            result.append(a)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpk4nvlfl0.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, a) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if !contains(result,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmprjge47hv.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in l {\n        if !result.contains(element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpxn05waeb/tmpxn05waeb.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f55c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f55949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f55949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f559487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxn05waeb                        0x000055c3d1f56695 <unavailable> + 5781

    5    libc.so.6                          0x00002b7f55e3e460 __libc_start_main +
    245

    6    tmpxn05waeb                        0x000055c3d1f56249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = []\n    return l.filter { !seen.contains($0)\
    \ }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpimd5balp/tmpimd5balp.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad995065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad994d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad994d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad994d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpimd5balp                        0x0000555915b715e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ad995251460 __libc_start_main +
    245

    6    tmpimd5balp                        0x0000555915b71199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniq = Set<Int>()\n    for v in l {\n        if !uniq.contains(v)\
    \ {\n            uniq.insert(v)\n        }\n    }\n    return uniq.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013821
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let seen = Set<Int>()\n    return l.filter() { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp48fvng86.swift:7:30: error: cannot use mutating member on immutable\
    \ value: 'seen' is a 'let' constant\n    return l.filter() { seen.insert($0).inserted\
    \ }\n                        ~~~~ ^\n/tmp/tmp48fvng86.swift:6:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let seen = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = Array(0..<l.count).map\
    \ { _ in l[0] }\n    for idx in 0..<result.count {\n        if idx != 0 && result[idx]\
    \ == result[idx-1] {\n            result.removeAtIndex(idx)\n        } else {\n\
    \            seen.remove(result[idx])\n            result[idx] = l[idx]\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp9qlhq9m0.swift:10:20: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            result.removeAtIndex(idx)\n            ~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmp9qlhq9m0.swift:12:18: error: no exact matches in call to instance method\
    \ 'remove'\n            seen.remove(result[idx])\n                 ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var seen = [Int]()\n    for x in l\
    \ {\n        if !seen.contains(x) {\n            result.append(x)\n          \
    \  seen.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: Exception
  stderr: 'tmpavkotlim/tmpavkotlim.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1beb676c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1beb36db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1beb36d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1beb36c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavkotlim                        0x00005639e7dc8695 <unavailable> + 5781

    5    libc.so.6                          0x00002b1beb862460 __libc_start_main +
    245

    6    tmpavkotlim                        0x00005639e7dc8249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n\n    for x in\
    \ l {\n        if !contains(seen, x) {\n            seen.append(x)\n         \
    \   result.append(x)\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6bd14g5u.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var l1 = l\n    var l2 = []\n    for i in l1 {\n        if !inArray(l2,\
    \ i) {\n            l2.append(i)\n        }\n    }\n    return l2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpw3gfkku2.swift:7:14: error: empty collection literal requires an\
    \ explicit type\n    var l2 = []\n             ^~\n/tmp/tmpw3gfkku2.swift:9:13:\
    \ error: cannot find 'inArray' in scope\n        if !inArray(l2, i) {\n      \
    \      ^~~~~~~\n/tmp/tmpw3gfkku2.swift:13:12: error: cannot convert return expression\
    \ of type '[Any]' to return type '[Int]'\n    return l2\n           ^\n/tmp/tmpw3gfkku2.swift:13:12:\
    \ note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected\
    \ to be equal\n    return l2\n           ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = []\n    return seen.filter({ seen.contains($0)\
    \ }).sorted() + l.filter() {\n        if !seen.contains($0) {\n            seen.append($0)\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpbhnfbcuw/tmpbhnfbcuw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b19bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b198d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b198d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b198d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhnfbcuw                        0x000055a7f1e396a5 <unavailable> + 5797

    5    libc.so.6                          0x00002b2b19dc9460 __libc_start_main +
    245

    6    tmpbhnfbcuw                        0x000055a7f1e39259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let seen = Set()\n    var uniques = [Int]()\n    for x in l\
    \ {\n        if !seen.contains(x) {\n            uniques.append(x)\n         \
    \   seen.add(x)\n        }\n    }\n    return uniques\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpt46a8l3m.swift:6:16: error: generic parameter 'Element' could not\
    \ be inferred\n    let seen = Set()\n               ^\n/tmp/tmpt46a8l3m.swift:6:16:\
    \ note: explicitly specify the generic arguments to fix this issue\n    let seen\
    \ = Set()\n               ^\n                  <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for e in l {\n        if !contains(&result,\
    \ e) {\n            result.append(e)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpi_0yvvrt.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, e) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result: [Int] = []\n    for item\
    \ in l {\n        if seen.contains(item) {\n            continue\n        }\n\
    \        seen.append(item)\n        result.append(item)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmprym6yblf/tmprym6yblf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5786bdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57868d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57868d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57868d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprym6yblf                        0x00005560cda19695 <unavailable> + 5781

    5    libc.so.6                          0x00002b5786dc6460 __libc_start_main +
    245

    6    tmprym6yblf                        0x00005560cda19249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniques: [Int] = []\n    for e in l {\n        if !contains(uniques,\
    \ e) {\n            uniques.append(e)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_cf3p_d8.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(uniques, e) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let set = Set<Int>()\n    for element in l {\n        set.insert(element)\n\
    \    }\n    return Array(set)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp4ak5iodz.swift:8:13: error: cannot use mutating member on immutable\
    \ value: 'set' is a 'let' constant\n        set.insert(element)\n        ~~~ ^\n\
    /tmp/tmp4ak5iodz.swift:6:5: note: change 'let' to 'var' to make it mutable\n \
    \   let set = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for v in l {\n        if !contains(result,\
    \ v) {\n            result.append(v)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp2fljo3hb.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, v) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = []\n    var result: [Int] = []\n    for el\
    \ in l {\n        if !contains(seen, el) {\n            seen.insert(el)\n    \
    \        result.append(el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp8t9x7pf4.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, el) {\n            ^~~~~~~~\n/tmp/tmp8t9x7pf4.swift:10:27:\
    \ error: missing argument for parameter 'at' in call\n            seen.insert(el)\n\
    \                          ^\n                          , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var seen: Set<Int> = []\n    for\
    \ x in l {\n        if !seen.contains(x) {\n            seen.add(x)\n        \
    \    result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6bdxmwc7.swift:10:18: error: value of type 'Set<Int>' has no member\
    \ 'add'\n            seen.add(x)\n            ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    return l.filter({\n        if seen.contains($0)\
    \ {\n            return false\n        }\n        seen.append($0)\n        return\
    \ true\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp02144319/tmp02144319.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c6e9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c6b92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c6b92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c6b917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02144319                        0x000055c5341f45f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b56c7087460 __libc_start_main +
    245

    6    tmp02144319                        0x000055c5341f41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var u: Set<Int> = []\n    for x in l {\n        if u.contains(x)\
    \ {\n            continue\n        }\n        u.insert(x)\n    }\n    return u.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniqueSet = Set()\n    var result = [Int]()\n    for element\
    \ in l {\n        if !uniqueSet.contains(element) {\n            uniqueSet.insert(element)\n\
    \            result.append(element)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpe4ixrrgm.swift:6:21: error: generic parameter 'Element' could not\
    \ be inferred\n    var uniqueSet = Set()\n                    ^\n/tmp/tmpe4ixrrgm.swift:6:21:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var uniqueSet\
    \ = Set()\n                    ^\n                       <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        guard !contains(&result,\
    \ x) else {\n            continue\n        }\n        result.append(x)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmplgf8f70n.swift:8:16: error: cannot find 'contains' in scope\n \
    \       guard !contains(&result, x) else {\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let uniques = Set<Int>()\n    var uniqueArray = [Int]()\n\n\
    \    for a in l {\n        if !uniques.contains(a) {\n            uniques.add(a)\n\
    \            uniqueArray.append(a)\n        }\n    }\n\n    return uniqueArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmparamrys8.swift:11:21: error: value of type 'Set<Int>' has no member\
    \ 'add'\n            uniques.add(a)\n            ~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for v in l\
    \ {\n        if !seen.contains(v) {\n            seen.insert(v)\n            result.append(v)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpewws09jd.swift:10:26: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(v)\n                         ^\n          \
    \               , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniques = [Int]()\n    for x in l {\n        if !uniques.contains(x)\
    \ {\n            uniques.append(x)\n        }\n    }\n    return uniques\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp6go6x1ps/tmp6go6x1ps.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb028fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6baff86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6baff86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6baff857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6go6x1ps                        0x0000564f7f10b695 <unavailable> + 5781

    5    libc.so.6                          0x00002b6bb047b460 __libc_start_main +
    245

    6    tmp6go6x1ps                        0x0000564f7f10b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpd9ie3onk.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let l = Array(l)\n    var seen = Set<Int>()\n    var result\
    \ = Array<Int>()\n\n    for v in l {\n        if !seen.contains(v) {\n       \
    \     seen.insert(v)\n            result.append(v)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in l {\n        if !contains(&result,\
    \ num) {\n            append(result, num)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmrmosyz0.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, num) {\n            ^~~~~~~~\n/tmp/tmpmrmosyz0.swift:9:13:\
    \ error: cannot find 'append' in scope\n            append(result, num)\n    \
    \        ^~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var indexSet = [Int]()\n    for element in l {\n        if indexSet.contains(element)\
    \ {\n            continue\n        } else {\n            indexSet.append(element)\n\
    \        }\n    }\n    return indexSet\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmprnbttdi0/tmprnbttdi0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe4dde3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4dadab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4dada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4dad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnbttdi0                        0x000055661c6b7695 <unavailable> + 5781

    5    libc.so.6                          0x00002afe4dfcf460 __libc_start_main +
    245

    6    tmprnbttdi0                        0x000055661c6b7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if !contains(result,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpd27avs69.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in l {\n        if result.contains(value)\
    \ {\n            continue\n        }\n        result.append(value)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp7ltwjf0u/tmp7ltwjf0u.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad90dda7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad90da9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad90da9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad90da9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ltwjf0u                        0x000055da1710a695 <unavailable> + 5781

    5    libc.so.6                          0x00002ad90df93460 __libc_start_main +
    245

    6    tmp7ltwjf0u                        0x000055da1710a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let resultSet = NSMutableOrderedSet()\n    for value in l {\n\
    \        resultSet.insert(value)\n    }\n    let array: [Int] = [resultSet.array]\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_vww4mfb.swift:6:21: error: cannot find 'NSMutableOrderedSet' in\
    \ scope\n    let resultSet = NSMutableOrderedSet()\n                    ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Bool](count: l.count, repeatedValue: false)\n  \
    \  var result = [Int](count: l.count, repeatedValue: 0)\n    for var i = 0; i\
    \ < l.count; i++ {\n        if seen[i] == true {\n            continue\n     \
    \   }\n        seen[i] = true\n        result[result.count-1] = l[i]\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpiyc2pw0f.swift:8:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < l.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiyc2pw0f.swift:6:16: error: no exact matches in call to initializer \n\
    \    var seen = [Bool](count: l.count, repeatedValue: false)\n               ^\n\
    /tmp/tmpiyc2pw0f.swift:6:16: note: candidate has partially matching parameter\
    \ list (repeating: Bool, count: Int)\n    var seen = [Bool](count: l.count, repeatedValue:\
    \ false)\n               ^\n/tmp/tmpiyc2pw0f.swift:6:16: note: candidate has partially\
    \ matching parameter list (repeating: Bool, count: Int)\n    var seen = [Bool](count:\
    \ l.count, repeatedValue: false)\n               ^\n/tmp/tmpiyc2pw0f.swift:7:18:\
    \ error: no exact matches in call to initializer \n    var result = [Int](count:\
    \ l.count, repeatedValue: 0)\n                 ^\n/tmp/tmpiyc2pw0f.swift:7:18:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var result = [Int](count: l.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpiyc2pw0f.swift:7:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: l.count,\
    \ repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var unique = [Int]()\n    var i = -1\n    for e in l {\n   \
    \     if !contains(e, &unique) {\n            unique.append(e)\n        }\n  \
    \  }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmppqpke0he.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(e, &unique) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var i = -1\n    var l = len(l)\n    var ls = []\n    for v in\
    \ l {\n        i += 1\n        if ls[i] == v {\n            continue\n       \
    \ } else {\n            ls[i] = v\n        }\n        ls.sort(&naturalSort(&i))\n\
    \    }\n    return ls\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpk2hyo_0o.swift:7:13: error: cannot find 'len' in scope\n    var\
    \ l = len(l)\n            ^~~\n/tmp/tmpk2hyo_0o.swift:8:14: error: empty collection\
    \ literal requires an explicit type\n    var ls = []\n             ^~\n/tmp/tmpk2hyo_0o.swift:18:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[Int]'\n\
    \    return ls\n           ^\n/tmp/tmpk2hyo_0o.swift:18:12: note: arguments to\
    \ generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n   \
    \ return ls\n           ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let map: Dictionary<Int,Int> = Dictionary(unique: l)\n    return\
    \ Array(map.values)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpw5fctebv.swift:6:55: error: argument passed to call that takes\
    \ no arguments\n    let map: Dictionary<Int,Int> = Dictionary(unique: l)\n   \
    \                                          ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in l {\n        if !contains(&result,\
    \ value) {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpofey6bbq.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, value) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    l.forEach {\n        if !contains(result)\
    \ {$0 = $0}\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrtx4edi.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result) {$0 = $0}\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let set = Set<Int>()\n    for element in l {\n        guard\
    \ !set.isDisjoint(with: element) else {\n            return nil\n        }\n \
    \       set.insert(element)\n    }\n    return set.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmplb09dnn7.swift:8:37: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Set<Int>'\n        guard !set.isDisjoint(with: element)\
    \ else {\n                                    ^\n/tmp/tmplb09dnn7.swift:9:20:\
    \ error: 'nil' is incompatible with return type '[Int]'\n            return nil\n\
    \                   ^\n/tmp/tmplb09dnn7.swift:11:13: error: cannot use mutating\
    \ member on immutable value: 'set' is a 'let' constant\n        set.insert(element)\n\
    \        ~~~ ^\n/tmp/tmplb09dnn7.swift:6:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let set = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var unique: [Int] = []\n    for elt in l {\n        if !contains(unique,\
    \ elt) {\n            unique.append(elt)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp0b9wqmvt.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, elt) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let result = Array(Set(l))\n    return result as! [Int]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp5isb311l/tmp5isb311l.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3a7900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3a75f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3a75f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3a75f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5isb311l                        0x00005637337bb575 <unavailable> + 5493

    5    libc.so.6                          0x00002ad3a7aec460 __libc_start_main +
    245

    6    tmp5isb311l                        0x00005637337bb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniques = [Int]()\n    for v in l {\n        if !contains(uniques,\
    \ v) {\n            uniques.append(v)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpstxcnofv.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(uniques, v) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return sort(unique(sorting(l)))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmplij5s9uw.swift:6:10: error: cannot find 'sort' in scope\n  return\
    \ sort(unique(sorting(l)))\n         ^~~~\n/tmp/tmplij5s9uw.swift:6:22: error:\
    \ cannot find 'sorting' in scope\n  return sort(unique(sorting(l)))\n        \
    \             ^~~~~~~\n/tmp/tmplij5s9uw.swift:6:22: error: missing argument label\
    \ 'l:' in call\n  return sort(unique(sorting(l)))\n                     ^\n  \
    \                   l: \n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var n = 0\n  var h = 1\n  var m = 0\n  for k in l {\n    if k\
    \ == 0 || k == 1 {\n      continue\n    }\n    if n%2==0 {\n      if k > h {\n\
    \        h = k\n      }\n    } else {\n      if k < m {\n        m = k\n     \
    \ }\n    }\n    n = n+1\n  }\n  var k2 = h\n  var l2 = m\n  var m = n2\n  var\
    \ n = l2\n  var h = n2\n  var l = []\n  for k in l2 {\n    if k == 0 || k == 1\
    \ {\n      continue\n    }\n    if n%2==0 {\n      if k2 > h {\n        h = k2\n\
    \      }\n    } else {\n      if k < m {\n        m = k\n      }\n    }\n    n\
    \ = n+1\n    l.append(k)\n  }\n  return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpi0vx9e1x.swift:26:11: error: cannot find 'n2' in scope\n  var m\
    \ = n2\n          ^~\n/tmp/tmpi0vx9e1x.swift:27:7: error: invalid redeclaration\
    \ of 'n'\n  var n = l2\n      ^\n/tmp/tmpi0vx9e1x.swift:6:7: note: 'n' previously\
    \ declared here\n  var n = 0\n      ^\n/tmp/tmpi0vx9e1x.swift:28:11: error: cannot\
    \ find 'n2' in scope\n  var h = n2\n          ^~\n/tmp/tmpi0vx9e1x.swift:29:11:\
    \ error: empty collection literal requires an explicit type\n  var l = []\n  \
    \        ^~\n/tmp/tmpi0vx9e1x.swift:30:12: error: for-in loop requires 'Int' to\
    \ conform to 'Sequence'\n  for k in l2 {\n           ^~\n/tmp/tmpi0vx9e1x.swift:46:10:\
    \ error: cannot convert return expression of type '[Any]' to return type '[Int]'\n\
    \  return l\n         ^\n/tmp/tmpi0vx9e1x.swift:46:10: note: arguments to generic\
    \ parameter 'Element' ('Any' and 'Int') are expected to be equal\n  return l\n\
    \         ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = Set()\n    for el in l {\n        if result.contains(el)\
    \ {\n            continue\n        }\n        result.insert(el)\n    }\n    return\
    \ Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6zr4bhn_.swift:6:18: error: generic parameter 'Element' could not\
    \ be inferred\n    var result = Set()\n                 ^\n/tmp/tmp6zr4bhn_.swift:6:18:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var result\
    \ = Set()\n                 ^\n                    <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp0armkd9_.swift:6:14: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return l.sort()\n           ~~^~~~~~\n\
    /tmp/tmp0armkd9_.swift:6:14: error: cannot use mutating member on immutable value:\
    \ 'l' is a 'let' constant\n    return l.sort()\n           ~ ^\n"
  stdout: ''
  timestamp: 1660013820
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    for x in l {\n        if !set.isEmpty()\
    \ {\n            if x == set.removeFirst() {\n                continue\n     \
    \       }\n        } else {\n            set.add(x)\n        }\n    }\n    return\
    \ Array(set.sorted())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpgsjsjrae.swift:8:17: error: cannot call value of non-function type\
    \ 'Bool'\n        if !set.isEmpty() {\n                ^      ~~\n           \
    \            \n/tmp/tmpgsjsjrae.swift:13:17: error: value of type 'Set<Int>' has\
    \ no member 'add'\n            set.add(x)\n            ~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    return l.filter { seen.contains($0)\
    \ || seen.insert($0).inserted }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp841_2gxe.swift:7:58: error: missing argument for parameter 'at'\
    \ in call\n    return l.filter { seen.contains($0) || seen.insert($0).inserted\
    \ }\n                                                         ^\n            \
    \                                             , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n/tmp/tmp841_2gxe.swift:7:60: error: value of tuple type '()' has no member\
    \ 'inserted'\n    return l.filter { seen.contains($0) || seen.insert($0).inserted\
    \ }\n                                           ~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return l.sorted(by: >).reduce(into: [Int](), { $0[$1] = $0[$1]\
    \ || $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpr7m8v77h.swift:6:66: error: cannot assign value of type 'Bool'\
    \ to subscript of type 'Int'\n  return l.sorted(by: >).reduce(into: [Int](), {\
    \ $0[$1] = $0[$1] || $1 })\n                                                 \
    \         ~~~~~~~^~~~~\n/tmp/tmpr7m8v77h.swift:6:69: error: type 'Int' cannot\
    \ be used as a boolean; test for '!= 0' instead\n  return l.sorted(by: >).reduce(into:\
    \ [Int](), { $0[$1] = $0[$1] || $1 })\n                                      \
    \                              ^\n                                           \
    \                         (  != 0)\n/tmp/tmpr7m8v77h.swift:6:61: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n  return l.sorted(by:\
    \ >).reduce(into: [Int](), { $0[$1] = $0[$1] || $1 })\n                      \
    \                                      ^\n                                   \
    \                       (      != 0)\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniques: [Int] = []\n    var curr = -1\n    for i in l {\n\
    \        if i == curr {\n            continue\n        } else {\n            curr\
    \ = i\n            uniques.append(i)\n        }\n    }\n    return uniques\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmprwui7gzd/tmprwui7gzd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88a782ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88a7521b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88a7521988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88a75207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwui7gzd                        0x000055fcb66145d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b88a7a16460 __libc_start_main +
    245

    6    tmprwui7gzd                        0x000055fcb6614189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.sorted().filter{ !contains(l, $0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpw31nxe9_.swift:6:32: error: cannot find 'contains' in scope\n \
    \   return l.sorted().filter{ !contains(l, $0) }\n                           \
    \    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var count = 0\n    for value in l\
    \ {\n        if !contains(result, value) {\n            result[count] = value\n\
    \            count += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpysgqd75x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, value) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    return l.filter({ set.insert($0).inserted\
    \ }).sorted(by: { $0 > $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp40yk3o0q/tmp40yk3o0q.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3120bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af311db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af311db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af311db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40yk3o0q                        0x0000560a3fed0655 <unavailable> + 5717

    5    libc.so.6                          0x00002af3122a8460 __libc_start_main +
    245

    6    tmp40yk3o0q                        0x0000560a3fed0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphiiua5j6/tmphiiua5j6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6037570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6037267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6037267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60372667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphiiua5j6                        0x0000556cbd6ec645 <unavailable> + 5701

    5    libc.so.6                          0x00002b603775c460 __libc_start_main +
    245

    6    tmphiiua5j6                        0x0000556cbd6ec1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var res = Set()\n    var tmp: Int\n    for tmp in l {\n    \
    \    if !res.contains(tmp) {\n            res.insert(tmp)\n        }\n    }\n\
    \    var result: [Int] = []\n    var idx: Int = 0\n    while idx < res.count {\n\
    \        result.append(res.removeFirst())\n        idx += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6b_9livm.swift:6:15: error: generic parameter 'Element' could not\
    \ be inferred\n    var res = Set()\n              ^\n/tmp/tmp6b_9livm.swift:6:15:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var res\
    \ = Set()\n              ^\n                 <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var i = 0\n  var ret: [Int] = []\n  for val in l {\n    if let\
    \ index = ret.index(of: val) {\n      ret.remove(at: index)\n    } else {\n  \
    \    ret.append(val)\n    }\n  }\n  return ret\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpk0_hp_jd/tmpk0_hp_jd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af757a53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af75774ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af75774a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7577497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0_hp_jd                        0x0000563f20d766a5 <unavailable> + 5797

    5    libc.so.6                          0x00002af757c3f460 __libc_start_main +
    245

    6    tmpk0_hp_jd                        0x0000563f20d76259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpv8vu6d6k.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let set = Set()\n    for element in l {\n        if !set.contains(element)\
    \ {\n            set.insert(element)\n        }\n    }\n    return Array(set)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpyy286_we.swift:6:15: error: generic parameter 'Element' could not\
    \ be inferred\n    let set = Set()\n              ^\n/tmp/tmpyy286_we.swift:6:15:\
    \ note: explicitly specify the generic arguments to fix this issue\n    let set\
    \ = Set()\n              ^\n                 <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var a = Array(l)\n    a.sort()\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: Exception
  stderr: 'tmpb46urcu4/tmpb46urcu4.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2625484c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b262517bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b262517b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b262517a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb46urcu4                        0x000055de1995a5a5 <unavailable> + 5541

    5    libc.so.6                          0x00002b2625670460 __libc_start_main +
    245

    6    tmpb46urcu4                        0x000055de1995a159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !seen.contains(x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp1oy4p3gp/tmp1oy4p3gp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e4808bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e47d82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e47d82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e47d817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1oy4p3gp                        0x0000555c6caab695 <unavailable> + 5781

    5    libc.so.6                          0x00002b0e48277460 __libc_start_main +
    245

    6    tmp1oy4p3gp                        0x0000555c6caab249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniq = HashSet()\n    for num in l {\n        uniq.insert(num)\n\
    \    }\n    return Array(uniq)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmbvbo6ud.swift:6:16: error: cannot find 'HashSet' in scope\n  \
    \  var uniq = HashSet()\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var unique = [Int]()\n    var i = 0\n    for x in l {\n    \
    \    if !unique.contains(x) {\n            unique.append(x)\n        }\n    }\n\
    \    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpzjoucjfm/tmpzjoucjfm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab524a5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab524756b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab524756988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5247557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjoucjfm                        0x0000561c58804695 <unavailable> + 5781

    5    libc.so.6                          0x00002ab524c4b460 __libc_start_main +
    245

    6    tmpzjoucjfm                        0x0000561c58804249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = Array(count: l.count, repeatedValue: -1)\n\
    \    return l.filter { element in\n        let index = seen.index(of: element)\n\
    \        if index == -1 { seen.insert(element, at: 0) } else {\n            seen.removeAtIndex(index)\n\
    \        }\n        return seen.count > 1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphtxad_as.swift:6:60: error: extra argument 'repeatedValue' in call\n\
    \    var seen: [Int] = Array(count: l.count, repeatedValue: -1)\n            \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/tmp/tmphtxad_as.swift:6:29:\
    \ error: missing argument for parameter 'repeating' in call\n    var seen: [Int]\
    \ = Array(count: l.count, repeatedValue: -1)\n                            ^\n\
    \                            repeating: <#Int#>, \nSwift.Array:4:23: note: 'init(repeating:count:)'\
    \ declared here\n    @inlinable public init(repeating repeatedValue: Element,\
    \ count: Int)\n                      ^\n/tmp/tmphtxad_as.swift:10:18: error: value\
    \ of type '[Int]' has no member 'removeAtIndex'\n            seen.removeAtIndex(index)\n\
    \            ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    l.sort()\n    var result = [Int]()\n    for x in l {\n     \
    \   if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpecrjl46c.swift:6:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpecrjl46c.swift:9:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, x) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if result.contains(i)\
    \ {\n            continue\n        }\n        result.append(i)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpj7_hhqf0/tmpj7_hhqf0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22e91c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22e8ebab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22e8eba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22e8eb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7_hhqf0                        0x000055609bd8d695 <unavailable> + 5781

    5    libc.so.6                          0x00002b22e93af460 __libc_start_main +
    245

    6    tmpj7_hhqf0                        0x000055609bd8d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var index = 0\n    for element in\
    \ l {\n        if let index = result.index(of: element) {\n            result.insert(element,\
    \ at: index)\n        } else {\n            result.append(element)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp01qvb4n0/tmp01qvb4n0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2011a99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2011790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2011790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201178f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01qvb4n0                        0x000055a4c51586a5 <unavailable> + 5797

    5    libc.so.6                          0x00002b2011c85460 __libc_start_main +
    245

    6    tmp01qvb4n0                        0x000055a4c5158259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var set: [Int] = []\n    for x in\
    \ l {\n        if !set.contains(x) {\n            set.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp381yem3r/tmp381yem3r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e34679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e34679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e346787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp381yem3r                        0x000055a81dece645 <unavailable> + 5701

    5    libc.so.6                          0x00002b6e34b6e460 __libc_start_main +
    245

    6    tmp381yem3r                        0x000055a81dece1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    l.sort()\n    var seen = [Int]()\n    var r = Int()\n    for\
    \ v in l {\n        if seen[v] == nil {\n            seen[v] = true\n        \
    \    r += 1\n        }\n    }\n    return Array(repeating:r, count:l)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpdldc1i0g.swift:6:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpdldc1i0g.swift:10:20:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ false\n        if seen[v] == nil {\n           ~~~~~~~ ^  ~~~\n/tmp/tmpdldc1i0g.swift:11:23:\
    \ error: cannot assign value of type 'Bool' to subscript of type 'Int'\n     \
    \       seen[v] = true\n                      ^~~~\n/tmp/tmpdldc1i0g.swift:15:37:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return Array(repeating:r, count:l)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Bool](count: l.count, repeatedValue: false)\n  \
    \  return l.filter { seen.contains($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp15xcrciw.swift:6:16: error: no exact matches in call to initializer\
    \ \n    var seen = [Bool](count: l.count, repeatedValue: false)\n            \
    \   ^\n/tmp/tmp15xcrciw.swift:6:16: note: candidate has partially matching parameter\
    \ list (repeating: Bool, count: Int)\n    var seen = [Bool](count: l.count, repeatedValue:\
    \ false)\n               ^\n/tmp/tmp15xcrciw.swift:6:16: note: candidate has partially\
    \ matching parameter list (repeating: Bool, count: Int)\n    var seen = [Bool](count:\
    \ l.count, repeatedValue: false)\n               ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniq = Set<Int>()\n    for x in l {\n        uniq.insert(x)\n\
    \    }\n    return uniq.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmptzsfgqfs.swift:10:17: error: value of type 'Set<Int>' has no member\
    \ 'sort'\n    return uniq.sort()\n           ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int]()\n    return uniqueFilter(l, isEqualTo: &seen)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp2__s42fj.swift:6:20: error: unexpected initializer in pattern;\
    \ did you mean to use '='?\n    var seen: [Int]()\n            ~ ~~~~~^~\n   \
    \          =\n/tmp/tmp2__s42fj.swift:7:12: error: cannot find 'uniqueFilter' in\
    \ scope\n    return uniqueFilter(l, isEqualTo: &seen)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let seen = Set()\n    var uniques = [Int]()\n    for x in l\
    \ {\n        if !seen.contains(x) {\n            uniques.append(x)\n         \
    \   seen.insert(x)\n        }\n    }\n    return uniques\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp8vnhu5i2.swift:6:16: error: generic parameter 'Element' could not\
    \ be inferred\n    let seen = Set()\n               ^\n/tmp/tmp8vnhu5i2.swift:6:16:\
    \ note: explicitly specify the generic arguments to fix this issue\n    let seen\
    \ = Set()\n               ^\n                  <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let dict = NSDictionary()\n    let res = Array(dict.object(forKey:\
    \ l))! as [Int]\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpwtur8zne.swift:6:16: error: cannot find 'NSDictionary' in scope\n\
    \    let dict = NSDictionary()\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    if l == nil || l.isEmpty { return [] }\n    let l = l.sorted()\n\
    \    var r = [Int]()\n    var u = [Int]()\n    for i in 0..<l.count {\n      \
    \  if u.contains(l[i]) {\n            continue\n        } else {\n           \
    \ u ~= l[i]\n            r ~= l[i]\n        }\n    }\n    return r\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmph3cfrwm_.swift:6:10: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns false\n    if l == nil || l.isEmpty { return\
    \ [] }\n       ~ ^  ~~~\n/tmp/tmph3cfrwm_.swift:14:19: error: cannot convert value\
    \ of type 'Int' to expected argument type '[Int]'\n            u ~= l[i]\n   \
    \               ^\n/tmp/tmph3cfrwm_.swift:15:19: error: cannot convert value of\
    \ type 'Int' to expected argument type '[Int]'\n            r ~= l[i]\n      \
    \            ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return uniqueSort(l, cmp: IntCompare())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj6jcvcve.swift:6:12: error: cannot find 'uniqueSort' in scope\n\
    \    return uniqueSort(l, cmp: IntCompare())\n           ^~~~~~~~~~\n/tmp/tmpj6jcvcve.swift:6:31:\
    \ error: cannot find 'IntCompare' in scope\n    return uniqueSort(l, cmp: IntCompare())\n\
    \                              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var i = 0\n    var result = [Int]()\n    while i < l.count {\n\
    \        if result.contains(l[i]) {\n            result.remove(l[i])\n       \
    \ } else {\n            result.append(l[i])\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpl6j7j6w5.swift:10:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(l[i])\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = []\n    var result: [Int] = []\n    for ele\
    \ in l {\n        if !contains(seen, ele) {\n            append(result, ele)\n\
    \            append(seen, ele)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphujsts43.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, ele) {\n            ^~~~~~~~\n/tmp/tmphujsts43.swift:10:13:\
    \ error: cannot find 'append' in scope\n            append(result, ele)\n    \
    \        ^~~~~~\n/tmp/tmphujsts43.swift:11:13: error: cannot find 'append' in\
    \ scope\n            append(seen, ele)\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for item in\
    \ l {\n        if !seen.contains(item) {\n            seen.append(item)\n    \
    \        result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp25476o2y/tmp25476o2y.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe4f0c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe4edbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe4edba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe4edb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp25476o2y                        0x0000559f1a772695 <unavailable> + 5781

    5    libc.so.6                          0x00002abe4f2af460 __libc_start_main +
    245

    6    tmp25476o2y                        0x0000559f1a772249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var index = 0\n    for el in l {\n\
    \        if result.count < index {\n            result.append(el)\n        } else\
    \ {\n            while result.count > index {\n                if result[index]\
    \ == el {\n                    result.remove(at: index)\n                } else\
    \ {\n                    index += 1\n                }\n            }\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpoeqq6xv3/tmpoeqq6xv3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1211626c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121131db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121131d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121131c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoeqq6xv3                        0x00005609a44946e5 <unavailable> + 5861

    5    libc.so.6                          0x00002b1211812460 __libc_start_main +
    245

    6    tmpoeqq6xv3                        0x00005609a4494299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x)\
    \ {\n            u.append(x)\n        }\n    }\n    return u\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: Exception
  stderr: 'tmpxu3we_w6/tmpxu3we_w6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a5e7bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a5e4b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a5e4b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a5e4b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxu3we_w6                        0x0000563873582695 <unavailable> + 5781

    5    libc.so.6                          0x00002b7a5e9ab460 __libc_start_main +
    245

    6    tmpxu3we_w6                        0x0000563873582249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in l {\n        if !contains(result,\
    \ num) {\n            result.append(num)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpu149jhd_.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, num) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if result.contains(x)\
    \ {\n            continue\n        }\n        result.append(x)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpj438y90b/tmpj438y90b.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5060ba5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b506089cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b506089c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b506089b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj438y90b                        0x0000558f8a926695 <unavailable> + 5781

    5    libc.so.6                          0x00002b5060d91460 __libc_start_main +
    245

    6    tmpj438y90b                        0x0000558f8a926249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp2b3g8b2v/tmp2b3g8b2v.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b2450c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2147b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2147988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b21467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b3g8b2v                        0x000055e5329ac575 <unavailable> + 5493

    5    libc.so.6                          0x00002af1b263c460 __libc_start_main +
    245

    6    tmp2b3g8b2v                        0x000055e5329ac129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpd9ie3onk.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for v in l {\n        if result.contains(v)\
    \ == false {\n            result.append(v)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpygluqoim/tmpygluqoim.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b971480ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9714501b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9714501988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97145007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygluqoim                        0x00005565a840a695 <unavailable> + 5781

    5    libc.so.6                          0x00002b97149f6460 __libc_start_main +
    245

    6    tmpygluqoim                        0x00005565a840a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var output = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if !output.contains(value) {\n            output.append(value)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpfg0pdky5/tmpfg0pdky5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefdf187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefdee7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefdee7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefdee7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfg0pdky5                        0x0000563295ae5745 <unavailable> + 5957

    5    libc.so.6                          0x00002aefdf373460 __libc_start_main +
    245

    6    tmpfg0pdky5                        0x0000563295ae52f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var h: [Int] = []\n    for v in l {\n        if !contains(h,\
    \ v) {\n            append(h, v)\n        }\n    }\n    return h\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmprvr9hsmy.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(h, v) {\n            ^~~~~~~~\n/tmp/tmprvr9hsmy.swift:9:13:\
    \ error: cannot find 'append' in scope\n            append(h, v)\n           \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var l = l as! [Int]\n    var u = [Int]()\n\n    for v in l {\n\
    \        if !u.contains(v) {\n            u.append(v)\n        }\n    }\n\n  \
    \  return u\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpy2y701gf/tmpy2y701gf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dfaea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dfab99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dfab99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dfab987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2y701gf                        0x0000557fb083f695 <unavailable> + 5781

    5    libc.so.6                          0x00002b8dfb08e460 __libc_start_main +
    245

    6    tmpy2y701gf                        0x0000557fb083f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var seen: [Int] = Array(repeating: 0, count: l.count)\n  return\
    \ l.filter { e in\n    if seen[e] == 0 {\n      seen[e] = 1\n      return true\n\
    \    }\n    return false\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b798e12dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798de24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b798de24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b798de2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b798de23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b798dc23e83 <unavailable> + 188035

    6    tmp914k5fun                        0x000055b85a541775 <unavailable> + 6005

    7    tmp914k5fun                        0x000055b85a541bd0 <unavailable> + 7120

    8    libswiftCore.so                    0x00002b798de216e0 _ArrayProtocol.filter(_:)
    + 518

    9    tmp914k5fun                        0x000055b85a5416ef <unavailable> + 5871

    10   tmp914k5fun                        0x000055b85a541555 <unavailable> + 5461

    11   libc.so.6                          0x00002b798e319460 __libc_start_main +
    245

    12   tmp914k5fun                        0x000055b85a541209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for elem in l {\n        if !contains(&result,\
    \ elem) {\n            result.append(elem)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpku8y83d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, elem) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var a = Array(l)\n  a.sortInPlace()\n  var result = Array(a)\n\
    \  for i = 2; i < a.count; i++ {\n    if a[i] != a[i-1] {\n      result.removeAtIndex(i)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpsj89sn4n.swift:9:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 2; i < a.count; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsj89sn4n.swift:7:5: error: value of type '[Int]' has no member 'sortInPlace'\n\
    \  a.sortInPlace()\n  ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var out = ArraySlice(l)\n    for v in\
    \ out {\n        if !contains(seen, v) {\n            append(seen, v)\n      \
    \  }\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmam0vw3w.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, v) {\n            ^~~~~~~~\n/tmp/tmpmam0vw3w.swift:10:13:\
    \ error: cannot find 'append' in scope\n            append(seen, v)\n        \
    \    ^~~~~~\n/tmp/tmpmam0vw3w.swift:13:12: error: cannot convert return expression\
    \ of type 'ArraySlice<Int>' to return type '[Int]'\n    return out\n         \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return removeDuplicates(uniqueInPlace(l))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpv3hnordf.swift:6:12: error: cannot find 'removeDuplicates' in scope\n\
    \    return removeDuplicates(uniqueInPlace(l))\n           ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpv3hnordf.swift:6:29: error: cannot find 'uniqueInPlace' in scope\n   \
    \ return removeDuplicates(uniqueInPlace(l))\n                            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.sorted().reduce([]) { a, x in\n        if let index\
    \ = a.index(of: x) {\n            a.insert(index, at: 0)\n        }\n        a\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmposmaymyt.swift:8:15: error: cannot use mutating member on immutable\
    \ value: 'a' is a 'let' constant\n            a.insert(index, at: 0)\n       \
    \     ~ ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var last = l[0]\n    for e in l\
    \ {\n        if e != last {\n            last = e\n            result.append(e)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpt5oyukvr/tmpt5oyukvr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b393ea62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393e759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b393e759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b393e7587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oyukvr                        0x000055cf26eb4635 <unavailable> + 5685

    5    libc.so.6                          0x00002b393ec4e460 __libc_start_main +
    245

    6    tmpt5oyukvr                        0x000055cf26eb41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniqueArray = [Int]()\n    for element in l {\n        if\
    \ !uniqueArray.contains(element) {\n            uniqueArray.append(element)\n\
    \        }\n    }\n    return uniqueArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp2xysabuo/tmp2xysabuo.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b527a2f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5279fecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5279fec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5279feb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xysabuo                        0x00005589301fb695 <unavailable> + 5781

    5    libc.so.6                          0x00002b527a4e1460 __libc_start_main +
    245

    6    tmp2xysabuo                        0x00005589301fb249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for v in l {\n        if !contains(&result,\
    \ v) {\n            result.append(v)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpvyoi9z2y.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, v) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for el in l {\n        if result.contains(el)\
    \ {\n            continue\n        }\n        result.append(el)\n    }\n    return\
    \ Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpk0t8h0_a/tmpk0t8h0_a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3694604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36942fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36942fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36942fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0t8h0_a                        0x000055cfa86fe705 <unavailable> + 5893

    5    libc.so.6                          0x00002b36947f0460 __libc_start_main +
    245

    6    tmpk0t8h0_a                        0x000055cfa86fe2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = []\n    var result: [Int] = []\n    for x\
    \ in l {\n        if !contains(seen, x) {\n            seen = append(seen, x)\n\
    \            result = append(result, x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpi1c3cgo5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n/tmp/tmpi1c3cgo5.swift:10:20:\
    \ error: cannot find 'append' in scope\n            seen = append(seen, x)\n \
    \                  ^~~~~~\n/tmp/tmpi1c3cgo5.swift:11:22: error: cannot find 'append'\
    \ in scope\n            result = append(result, x)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in l {\n        if !result.contains(value)\
    \ {\n            result.append(value)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpfgzqkb12/tmpfgzqkb12.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5c00b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5bfdb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5bfdb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5bfdaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfgzqkb12                        0x0000560deb5f7695 <unavailable> + 5781

    5    libc.so.6                          0x00002ab5c02a5460 __libc_start_main +
    245

    6    tmpfgzqkb12                        0x0000560deb5f7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var i = 0\n    var result = [Int]()\n\n    while i < l.count\
    \ {\n        if !contains(&result, l[i]) {\n            result.append(l[i])\n\
    \        }\n        i += 1\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp94g8ajoz.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(&result, l[i]) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniques = [Int]()\n    for v in l {\n        if !uniques.contains(v)\
    \ {\n            uniques.append(v)\n        }\n    }\n    return uniques\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp3cxux4ps/tmp3cxux4ps.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b565af74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b565ac6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b565ac6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b565ac6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3cxux4ps                        0x0000555d22112695 <unavailable> + 5781

    5    libc.so.6                          0x00002b565b160460 __libc_start_main +
    245

    6    tmp3cxux4ps                        0x0000555d22112249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in l {\n        if !contains(result,\
    \ value) {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpko47c6l4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, value) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in l {\n        if !contains(&result,\
    \ value) {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpofey6bbq.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, value) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var a = Array(l)\n    if a.isEmpty {\n        return a\n   \
    \ }\n    return a.unique()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp8n7jffc7.swift:10:14: error: value of type '[Int]' has no member\
    \ 'unique'\n    return a.unique()\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in l {\n        if !contains(&result,\
    \ value) {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpprmqiz1z.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, value) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
