language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    var prev = \"\"\n\n    for item in lst {\n        if\
    \ prev != \"\" && prev == item {\n            continue\n        }\n\n        if\
    \ prev != \"\" && item.length == prev.length {\n            res[res.index(prev)]\
    \ = prev\n            prev = item\n            continue\n        }\n\n       \
    \ if prev != \"\" {\n            res[res.index(prev)] = prev\n        }\n\n  \
    \      prev = item\n    }\n\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmps5t77dk1.swift:26:31: error: value of type 'String' has no member\
    \ 'length'\n        if prev != \"\" && item.length == prev.length {\n        \
    \                 ~~~~ ^~~~~~\n/tmp/tmps5t77dk1.swift:26:46: error: value of type\
    \ 'String' has no member 'length'\n        if prev != \"\" && item.length == prev.length\
    \ {\n                                        ~~~~ ^~~~~~\n/tmp/tmps5t77dk1.swift:27:21:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    res[res.index(prev)] = prev\n                    ^\n/tmp/tmps5t77dk1.swift:27:21:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            res[res.index(prev)] = prev\n                    ^\n    \
    \                            ?? <#default value#>\n/tmp/tmps5t77dk1.swift:27:21:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            res[res.index(prev)] = prev\n                    ^\n    \
    \                           !\n/tmp/tmps5t77dk1.swift:27:27: error: missing argument\
    \ label 'of:' in call\n            res[res.index(prev)] = prev\n             \
    \             ^\n                          of: \n/tmp/tmps5t77dk1.swift:33:21:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    res[res.index(prev)] = prev\n                    ^\n/tmp/tmps5t77dk1.swift:33:21:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            res[res.index(prev)] = prev\n                    ^\n    \
    \                            ?? <#default value#>\n/tmp/tmps5t77dk1.swift:33:21:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            res[res.index(prev)] = prev\n                    ^\n    \
    \                           !\n/tmp/tmps5t77dk1.swift:33:27: error: missing argument\
    \ label 'of:' in call\n            res[res.index(prev)] = prev\n             \
    \             ^\n            "
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ result = lst.sorted { s1, s2 in\n        if s1 == \"\" {\n            return\
    \ s2 == \"\" ? 0 : -1\n        }\n        \n        if s2 == \"\" {\n        \
    \    return s1 == \"a\" || s1 == \"e\" || s1 == \"i\" || s1 == \"o\" || s1 ==\
    \ \"u\" ? 0 : -1\n        }\n        \n        return s1.count < s2.count ? -1\
    \ : s1.count > s2.count ? 1 : s1.compare(s2) == .orderedAscending ? -1 : 1 \n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpn0kgkp1i.swift:18:22: error: type of expression is ambiguous without\
    \ more context\n    let result = lst.sorted { s1, s2 in\n                 ~~~~^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n\tsort.Sort(func(a,\
    \ b int) bool {\n\t\treturn len(lst[a]) < len(lst[b]) || len(lst[a]) == len(lst[b])\
    \ && strings.ToUpper(lst[a]) < strings.ToUpper(lst[b])\n\t})\n\tvar res: [String]\
    \ = []\n\tfor _, s := range lst {\n\t\tif len(res) == 0 || len(res[len(res)-1])\
    \ != len(s) {\n\t\t\tres = append(res, s)\n\t\t}\n\t}\n\tsort.Sort(func(a, b int)\
    \ bool {\n\t\treturn strings.ToUpper(res[a]) < strings.ToUpper(res[b])\n\t})\n\
    \treturn res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp445b1i22.swift:18:12: error: expected expression in list of expressions\n\
    \        sort.Sort(func(a, b int) bool {\n                  ^\n/tmp/tmp445b1i22.swift:18:16:\
    \ error: expected identifier in function declaration\n        sort.Sort(func(a,\
    \ b int) bool {\n                      ^\n/tmp/tmp445b1i22.swift:22:7: error:\
    \ expected 'in' after for-each pattern\n        for _, s := range lst {\n    \
    \         ^\n/tmp/tmp445b1i22.swift:22:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, s := range lst {\n             ^\n/tmp/tmp445b1i22.swift:18:2:\
    \ error: cannot find 'sort' in scope\n        sort.Sort(func(a, b int) bool {\n\
    \        ^~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Your code here\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpzbb13wly/tmpzbb13wly.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bea5b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bea2aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bea2ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bea2ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbb13wly                        0x0000559ee603d546 <unavailable> + 5446

    5    libc.so.6                          0x00002b2bea7a3460 __libc_start_main +
    245

    6    tmpzbb13wly                        0x0000559ee603d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ arr: [(String, Int)] = lst.sorted{ $0.1 < $1.1 }.map { [ ($0.0.sorted(), $0.1),\
    \ ($1.sorted(), $1.1) ] }\n    return arr.compactMap { $0.0[0] }.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpg3o2qks0.swift:18:47: error: value of type 'String' has no member\
    \ '1'\n    let arr: [(String, Int)] = lst.sorted{ $0.1 < $1.1 }.map { [ ($0.0.sorted(),\
    \ $0.1), ($1.sorted(), $1.1) ] }\n                                           ~~\
    \ ^\n/tmp/tmpg3o2qks0.swift:18:54: error: value of type 'String' has no member\
    \ '1'\n    let arr: [(String, Int)] = lst.sorted{ $0.1 < $1.1 }.map { [ ($0.0.sorted(),\
    \ $0.1), ($1.sorted(), $1.1) ] }\n                                           \
    \       ~~ ^\n/tmp/tmpg3o2qks0.swift:18:62: error: contextual closure type '(String)\
    \ throws -> (String, Int)' expects 1 argument, but 2 were used in closure body\n\
    \    let arr: [(String, Int)] = lst.sorted{ $0.1 < $1.1 }.map { [ ($0.0.sorted(),\
    \ $0.1), ($1.sorted(), $1.1) ] }\n                                           \
    \                  ^\n/tmp/tmpg3o2qks0.swift:18:64: error: cannot convert value\
    \ of type '[Any]' to closure result type '(String, Int)'\n    let arr: [(String,\
    \ Int)] = lst.sorted{ $0.1 < $1.1 }.map { [ ($0.0.sorted(), $0.1), ($1.sorted(),\
    \ $1.1) ] }\n                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpg3o2qks0.swift:18:70: error: value of type 'String' has no member '0'\n\
    \    let arr: [(String, Int)] = lst.sorted{ $0.1 < $1.1 }.map { [ ($0.0.sorted(),\
    \ $0.1), ($1.sorted(), $1.1) ] }\n                                           \
    \                       ~~ ^\n/tmp/tmpg3o2qks0.swift:18:85: error: value of type\
    \ 'String' has no member '1'\n    let arr: [(String, Int)] = lst.sorted{ $0.1\
    \ < $1.1 }.map { [ ($0.0.sorted(), $0.1), ($1.sorted(), $1.1) ] }\n          \
    \                                                                       ~~ ^\n\
    /tmp/tmpg3o2qks0.swift:19:33: error: cannot convert value of type 'Character'\
    \ to closure result type 'String?'\n    return arr.compactMap { $0.0[0] }.sorted()\n\
    \                            ~~~~^~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.sorted == false {\n        let sorted_list = lst\n        sorted_list.sort\
    \ { (a, b) -> Bool in\n            let aLength: Int = a.count\n            let\
    \ bLength: Int = b.count\n            if aLength == bLength {\n              \
    \  return a < b\n            }\n            return aLength > bLength\n       \
    \ }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7j4vmz7o.swift:18:19: error: binary operator '==' cannot be applied\
    \ to operands of type '() -> [String]' and 'Bool'\n    if lst.sorted == false\
    \ {\n       ~~~~~~~~~~ ^  ~~~~~\n/tmp/tmp7j4vmz7o.swift:18:19: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Bool, Bool)\n\
    \    if lst.sorted == false {\n                  ^\n/tmp/tmp7j4vmz7o.swift:20:21:\
    \ error: cannot use mutating member on immutable value: 'sorted_list' is a 'let'\
    \ constant\n        sorted_list.sort { (a, b) -> Bool in\n        ~~~~~~~~~~~\
    \ ^\n/tmp/tmp7j4vmz7o.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let sorted_list = lst\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ sort and remove duplicates\n    var set = Set<String>()\n    for string in lst\
    \ {\n        set.insert(string)\n    }\n    let sorted = Array(set)\n    return\
    \ sorted.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxtm7jxq4/tmpxtm7jxq4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc06fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc06cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc06ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc06ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxtm7jxq4                        0x000055af1cb82906 <unavailable> + 6406

    5    libc.so.6                          0x00002abc071c1460 __libc_start_main +
    245

    6    tmpxtm7jxq4                        0x000055af1cb82489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: { $0.length < $1.length })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfa_kczyz.swift:18:32: error: value of type 'String' has no member\
    \ 'length'\n    return lst.sorted(by: { $0.length < $1.length })\n           \
    \                 ~~ ^~~~~~\n/tmp/tmpfa_kczyz.swift:18:44: error: value of type\
    \ 'String' has no member 'length'\n    return lst.sorted(by: { $0.length < $1.length\
    \ })\n                                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ finalResult = [String]()\n    var finalSum =  0.0\n    for word in lst {\n \
    \       finalSum += word.characters.count\n    }\n    for word in lst {\n    \
    \    if word.characters.count % 2 == 1 {\n            let newWord = word.substringToIndex(advance(word.startIndex,\
    \ 1))\n            finalResult.append(newWord)\n        }\n    }\n    for word\
    \ in lst {\n        if word.characters.count > finalSum {\n            finalResult\
    \ = finalResult.sorted()\n            finalSum += word.characters.count\n    \
    \    }\n    }\n    return finalResult\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp381rnkl3.swift:21:37: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        finalSum += word.characters.count\n\
    \                                    ^\n                    Double(          \
    \    )\n/tmp/tmp381rnkl3.swift:24:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp381rnkl3.swift:25:49:\
    \ error: cannot find 'advance' in scope\n            let newWord = word.substringToIndex(advance(word.startIndex,\
    \ 1))\n                                                ^~~~~~~\n/tmp/tmp381rnkl3.swift:25:32:\
    \ error: value of type 'String' has no member 'substringToIndex'\n           \
    \ let newWord = word.substringToIndex(advance(word.startIndex, 1))\n         \
    \                 ~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp381rnkl3.swift:30:34: error:\
    \ binary operator '>' cannot be applied to operands of type 'Int' and 'Double'\n\
    \        if word.characters.count > finalSum {\n           ~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~\n/tmp/tmp381rnkl3.swift:30:34: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n        if word.characters.count\
    \ > finalSum {\n                                 ^\n/tmp/tmp381rnkl3.swift:32:41:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \            finalSum += word.characters.count\n                             \
    \           ^\n                        Double(              )\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp89flilxw/tmp89flilxw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af997e7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af997b73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af997b73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af997b727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89flilxw                        0x00005636b84cf546 <unavailable> + 5446

    5    libc.so.6                          0x00002af998068460 __libc_start_main +
    245

    6    tmp89flilxw                        0x00005636b84cf0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ sorted(lst, { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp79lybk3y.swift:18:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(lst, { $0.characters.count > $1.characters.count })\n       \
    \    ^~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    \n    if lst.count == 0 {\n        return result\n\
    \    }\n\n    for index in 0..<lst.count {\n        let word = lst[index]\n  \
    \      \n        if word.count % 2 == 1 {\n            // odd\n            \n\
    \            if result.count == 0 {\n                result.append(word)\n   \
    \         } else {\n                if word.count > result[result.count - 1].count\
    \ {\n                    result.append(word)\n                }\n            }\n\
    \        } else {\n            // even\n            \n            if result.count\
    \ != 0 {\n                if word.count > result[result.count - 1].count {\n \
    \                   result.append(word)\n                } else {\n          \
    \          var current = result[result.count - 1]\n                    \n    \
    \                if current.count == word.count {\n                        current.append(word)\n\
    \                    } else {\n                        if current.count > word.count\
    \ {\n                            current.append(word)\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmptaoaxtnh/tmptaoaxtnh.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b223f882c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b223f579b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b223f579988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b223f5787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptaoaxtnh                        0x000055b40e85f876 <unavailable> + 6262

    5    libc.so.6                          0x00002b223fa6e460 __libc_start_main +
    245

    6    tmptaoaxtnh                        0x000055b40e85f3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    var word: String = String()\n    let len = lst.count\n\
    \n    for i in 0 ..< len {\n        word = lst[i]\n        if word.characters.count\
    \ % 2 != 0 {\n            result.append(word)\n        }\n    }\n\n    let sortedResult\
    \ = result.sorted(by: { x, y in x.characters.count < y.characters.count })\n \
    \   return sortedResult\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpe0lk_qdg.swift:24:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 != 0 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpe0lk_qdg.swift:29:54:\
    \ error: 'characters' is unavailable: Please use String directly\n    let sortedResult\
    \ = result.sorted(by: { x, y in x.characters.count < y.characters.count })\n \
    \                                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpe0lk_qdg.swift:29:75: error: 'characters'\
    \ is unavailable: Please use String directly\n    let sortedResult = result.sorted(by:\
    \ { x, y in x.characters.count < y.characters.count })\n                     \
    \                                                     ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    var result = [String]()\n    \n    for word1 in lst {\n        var word2:\
    \ String = \"\"\n        for word2 in lst {\n            if word1 == word2 {\n\
    \                continue\n            }\n            if word1.characters.count\
    \ < word2.characters.count {\n                word2 = word1\n            } else\
    \ {\n                result.append(word2)\n                word1 = word2\n   \
    \             word2 = \"\"\n            }\n        }\n        result.append(word1)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmprqeutf9p.swift:27:22: error: 'characters' is unavailable: Please\
    \ use String directly\n            if word1.characters.count < word2.characters.count\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmprqeutf9p.swift:27:47: error: 'characters' is unavailable:\
    \ Please use String directly\n            if word1.characters.count < word2.characters.count\
    \ {\n                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmprqeutf9p.swift:28:17: error: cannot assign\
    \ to value: 'word2' is a 'let' constant\n                word2 = word1\n     \
    \           ^~~~~\n/tmp/tmprqeutf9p.swift:31:17: error: cannot assign to value:\
    \ 'word1' is a 'let' constant\n                word1 = word2\n               \
    \ ^~~~~\n/tmp/tmprqeutf9p.swift:32:17: error: cannot assign to value: 'word2'\
    \ is a 'let' constant\n                word2 = \"\"\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted = [String]()\n    for word in lst {\n        if sorted.count > 0 {\n\
    \            if let firstIndex = sorted.firstIndex(where: {$0 == word}) {\n  \
    \              sorted.removeSubrange(firstIndex, firstIndex.advanced(by: 1))\n\
    \            } else {\n                sorted.append(word)\n            }\n  \
    \      } else {\n            sorted.append(word)\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpmepiu2ze.swift:22:62: error: extra argument in call\n         \
    \       sorted.removeSubrange(firstIndex, firstIndex.advanced(by: 1))\n      \
    \                               ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpmepiu2ze.swift:22:39:\
    \ error: cannot convert value of type 'Array<String>.Index' (aka 'Int') to expected\
    \ argument type 'Range<Array<String>.Index>' (aka 'Range<Int>')\n            \
    \    sorted.removeSubrange(firstIndex, firstIndex.advanced(by: 1))\n         \
    \                             ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: {$0.count < $1.count }) + lst.sorted(by: { $0.count < $1.count\
    \ }) + lst.sorted(by: {$0.count > $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpuac426qe/tmpuac426qe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a48feac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a48ce1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a48ce1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a48ce07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuac426qe                        0x00005634e0bdc666 <unavailable> + 5734

    5    libc.so.6                          0x00002b2a491d6460 __libc_start_main +
    245

    6    tmpuac426qe                        0x00005634e0bdc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr = [String]()\n    let l = lst.count\n    for element in lst {\n        if\
    \ arr.count < l {\n            arr.append(element)\n        }\n        else {\n\
    \            let temp = arr.remove(at: arr.index(of: element))\n            if\
    \ temp != element {\n                arr.append(element)\n            }\n    \
    \    }\n    }\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgk1i0p8f.swift:25:43: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            let temp = arr.remove(at: arr.index(of: element))\n\
    \                                          ^\n/tmp/tmpgk1i0p8f.swift:25:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            let temp = arr.remove(at: arr.index(of: element))\n             \
    \                             ^\n                                            \
    \                 ?? <#default value#>\n/tmp/tmpgk1i0p8f.swift:25:43: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    let temp = arr.remove(at: arr.index(of: element))\n                     \
    \                     ^\n                                                    \
    \        !\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ res = [String]()\n    let dict = NSMutableDictionary(objects: lst, forKeys:\
    \ lst)\n    let sorted = dict.sortedArrayUsingComparator({\n        (a, obj) ->\
    \ Bool in\n        if a.count < obj.count {\n            return true\n       \
    \ }\n        if a.count == obj.count {\n            return a.localizedStandardCompare(obj)\
    \ == .OrderedAscending\n        }\n        return false\n    })\n\n    for i in\
    \ 0 ..< sorted.count {\n        res.append(sorted[i])\n    }\n\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7azrddaf.swift:19:16: error: cannot find 'NSMutableDictionary'\
    \ in scope\n    let dict = NSMutableDictionary(objects: lst, forKeys: lst)\n \
    \              ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n\n    for str in lst {\n        var newstr = str\n    \
    \    var count = 0\n        for index in newstr.indices {\n            if newstr[index]\
    \ != str[index] {\n                count = count + 1\n            } else {\n \
    \               count = 1\n            }\n        }\n\n        if count == 0 {\n\
    \            result.append(str)\n        }\n\n        if count > 1 {\n       \
    \     var newstr2 = newstr\n            newstr = str\n            newstr2 = newstr2.prefix(2)\n\
    \            newstr = newstr2.suffix(2)\n            newstr = newstr + newstr\n\
    \        }\n    }\n\n    let sorted = result.sorted(by: <)\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpchakpdln.swift:38:31: error: no 'prefix' candidates produce the\
    \ expected contextual result type 'String'\n            newstr2 = newstr2.prefix(2)\n\
    \                              ^\nSwift.Sequence:7:40: note: 'prefix' produces\
    \ 'PrefixSequence<String>', not the expected contextual result type 'String'\n\
    \    @inlinable public __consuming func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n\
    \                                       ^\nSwift.Collection:6:40: note: 'prefix'\
    \ produces 'String.SubSequence' (aka 'Substring'), not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func prefix(_ maxLength:\
    \ Int) -> Self.SubSequence\n                                       ^\n/tmp/tmpchakpdln.swift:39:30:\
    \ error: no 'suffix' candidates produce the expected contextual result type 'String'\n\
    \            newstr = newstr2.suffix(2)\n                             ^\nSwift.Sequence:3:40:\
    \ note: 'suffix' produces '[String.Element]' (aka 'Array<Character>'), not the\
    \ expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func suffix(_ maxLength: Int) -> [Self.Element]\n                          \
    \             ^\nSwift.Collection:8:40: note: 'suffix' produces 'String.SubSequence'\
    \ (aka 'Substring'), not the expected contextual result type 'String'\n    @inlinable\
    \ public __consuming func suffix(_ maxLength: Int) -> Self.SubSequence\n     \
    \                                  ^\nSwift.BidirectionalCollection:3:40: note:\
    \ 'suffix' produces 'String.SubSequence' (aka 'Substring'), not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func suffix(_ maxLength:\
    \ Int) -> Self.SubSequence\n                                       ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ len = lst.map({ $0.characters.count }).max()\n    return lst.sort().map({ $0.characters.count\
    \ < len ? ($0 + $1).sorted()\n                                           : $0\
    \ + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2yr42kb0.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = lst.map({ $0.characters.count }).max()\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2yr42kb0.swift:19:51: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n    return lst.sort().map({\
    \ $0.characters.count < len ? ($0 + $1).sorted()\n                           \
    \                       ^\n/tmp/tmp2yr42kb0.swift:18:9: note: short-circuit using\
    \ 'guard' to exit this function early if the optional value contains 'nil'\n \
    \   let len = lst.map({ $0.characters.count }).max()\n        ^\n    guard   \
    \                                         else { return <#default value#> }\n\
    /tmp/tmp2yr42kb0.swift:18:48: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    let len = lst.map({ $0.characters.count\
    \ }).max()\n                                               ^\n               \
    \                                      ?? <#default value#>\n/tmp/tmp2yr42kb0.swift:18:48:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let len = lst.map({ $0.characters.count }).max()\n              \
    \                                 ^\n                                        \
    \            !\n/tmp/tmp2yr42kb0.swift:19:51: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return lst.sort().map({\
    \ $0.characters.count < len ? ($0 + $1).sorted()\n                           \
    \                       ^\n                                                  \
    \    ?? <#default value#>\n/tmp/tmp2yr42kb0.swift:19:51: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    return lst.sort().map({\
    \ $0.characters.count < len ? ($0 + $1).sorted()\n                           \
    \                       ^\n                                                  \
    \   !\n/tmp/tmp2yr42kb0.swift:19:23: error: value "
  stdout: ''
  timestamp: 1659980055
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ list = lst\n    var sortedList = [String]()\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    for _ in lst {\n        if i == 0 {\n            sortedList.append(list[k])\n\
    \            k += 1\n        } else {\n            if list[i].characters.count\
    \ < list[k].characters.count {\n                sortedList.append(list[k])\n \
    \               k += 1\n            } else {\n                sortedList.append(list[i])\n\
    \                i += 1\n                j += 1\n            }\n        }\n  \
    \  }\n    sortedList.append(list[i:])\n    return sortedList\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplpby9fpu.swift:38:30: error: expected expression in list of expressions\n\
    \    sortedList.append(list[i:])\n                             ^\n/tmp/tmplpby9fpu.swift:28:24:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if list[i].characters.count < list[k].characters.count {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplpby9fpu.swift:28:51:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if list[i].characters.count < list[k].characters.count {\n                 \
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplpby9fpu.swift:38:30: error: missing argument for parameter\
    \ #1 in call\n    sortedList.append(list[i:])\n                             ^\n\
    \                             <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)'\
    \ declared here\n    @inlinable public subscript(index: Int) -> Element { get\
    \ set }\n                      ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ dict = Dictionary(uniqueKeysWithValues: lst.map{\n        (word, idx: Int) in\
    \ (word, idx)\n    })\n    let sorted = lst.sorted{\n        (word1: String, idx1:\
    \ Int), (word2: String, idx2: Int) -> Bool in\n        if word1 == word2 {\n \
    \           return idx1 < idx2\n        } else {\n            return word1.characters.count\
    \ < word2.characters.count\n        }\n    }\n    var result: [String] = []\n\
    \    for (_, value) in dict.enumerated() {\n        if value == 0 {\n        \
    \    result.append(sorted[value])\n        } else {\n            if result[-1]\
    \ == sorted[value] {\n                result.append(sorted[value])\n         \
    \   } else {\n                result.append(sorted[value])\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeb1goaft.swift:22:35: error: consecutive statements on a line must\
    \ be separated by ';'\n        (word1: String, idx1: Int), (word2: String, idx2:\
    \ Int) -> Bool in\n                                  ^\n                     \
    \             ;\n/tmp/tmpeb1goaft.swift:22:35: error: expected expression\n  \
    \      (word1: String, idx1: Int), (word2: String, idx2: Int) -> Bool in\n   \
    \                               ^\n/tmp/tmpeb1goaft.swift:19:9: error: contextual\
    \ closure type '(String) throws -> (String, Int)' expects 1 argument, but 2 were\
    \ used in closure body\n        (word, idx: Int) in (word, idx)\n        ^\n/tmp/tmpeb1goaft.swift:23:12:\
    \ error: cannot find 'word1' in scope\n        if word1 == word2 {\n         \
    \  ^~~~~\n/tmp/tmpeb1goaft.swift:23:21: error: cannot find 'word2' in scope\n\
    \        if word1 == word2 {\n                    ^~~~~\n/tmp/tmpeb1goaft.swift:24:20:\
    \ error: cannot find 'idx1' in scope\n            return idx1 < idx2\n       \
    \            ^~~~\n/tmp/tmpeb1goaft.swift:24:27: error: cannot find 'idx2' in\
    \ scope\n            return idx1 < idx2\n                          ^~~~\n/tmp/tmpeb1goaft.swift:26:20:\
    \ error: cannot find 'word1' in scope\n            return word1.characters.count\
    \ < word2.characters.count\n                   ^~~~~\n/tmp/tmpeb1goaft.swift:26:45:\
    \ error: cannot find 'word2' in scope\n            return word1.characters.count\
    \ < word2.characters.count\n                                            ^~~~~\n\
    /tmp/tmpeb1goaft.swift:30:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, value) in dict.enumerated() {\n    ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ sorted_list_sum_impl(lst, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpzgasqi5b.swift:18:12: error: cannot find 'sorted_list_sum_impl'\
    \ in scope\n    return sorted_list_sum_impl(lst, \"\")\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ new_lst = lst.map { word -> String in\n        let len = word.characters.count\n\
    \        if len % 2 == 1 {\n            return word\n        }\n        return\
    \ String(word.characters.dropLast())\n    }\n    return sorted(new_lst)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7by_9gqz.swift:19:24: error: 'characters' is unavailable: Please\
    \ use String directly\n        let len = word.characters.count\n             \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp7by_9gqz.swift:23:28: error: 'characters' is unavailable: Please use String\
    \ directly\n        return String(word.characters.dropLast())\n              \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7by_9gqz.swift:25:12: error: cannot find 'sorted' in scope\n    return\
    \ sorted(new_lst)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr = lst\n    for i in 1..<arr.count {\n        let a = arr[i-1]\n        let\
    \ b = arr[i]\n        if b.count < a.count {\n            arr.removeAtIndex(i)\n\
    \            arr.removeAtIndex(i - 1)\n        } else {\n            arr.removeAtIndex(i)\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqvaz0mof.swift:23:17: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n            arr.removeAtIndex(i)\n            ~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpqvaz0mof.swift:24:17: error: value of type '[String]' has no member 'removeAtIndex'\n\
    \            arr.removeAtIndex(i - 1)\n            ~~~ ^~~~~~~~~~~~~\n/tmp/tmpqvaz0mof.swift:26:17:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            arr.removeAtIndex(i)\n\
    \            ~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst == nil || lst.isEmpty {\n        return []\n    }\n    var new_list = lst\n\
    \    new_list = removeOddStrings(lst: new_list)\n    new_list = sortArrayByLength(new_list)\n\
    \    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmppxktu5p4.swift:18:12: warning: comparing non-optional value of\
    \ type '[String]' to 'nil' always returns false\n    if lst == nil || lst.isEmpty\
    \ {\n       ~~~ ^  ~~~\n/tmp/tmppxktu5p4.swift:22:16: error: cannot find 'removeOddStrings'\
    \ in scope\n    new_list = removeOddStrings(lst: new_list)\n               ^~~~~~~~~~~~~~~~\n\
    /tmp/tmppxktu5p4.swift:23:16: error: cannot find 'sortArrayByLength' in scope\n\
    \    new_list = sortArrayByLength(new_list)\n               ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ write your code here\n    \n    let sortedArr = lst.sorted()\n    \n    return\
    \ sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpd4e24sw5/tmpd4e24sw5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71ec8e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71ec5d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71ec5d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71ec5d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4e24sw5                        0x000055bb1d33f5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b71ecacd460 __libc_start_main +
    245

    6    tmpd4e24sw5                        0x000055bb1d33f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if word.length%2 == 1 {\n\
    \            res = append(res, word)\n        }\n    }\n    return res.sorted(by:\
    \ { x, y in\n        guard let xlen = x.length, let ylen = y.length else {\n \
    \           return false\n        }\n        if xlen < ylen {\n            return\
    \ true\n        } else if xlen > ylen {\n            return false\n        } else\
    \ {\n            return x < y\n        }\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpj2s9zmwz.swift:20:17: error: value of type 'String' has no member\
    \ 'length'\n        if word.length%2 == 1 {\n           ~~~~ ^~~~~~\n/tmp/tmpj2s9zmwz.swift:21:19:\
    \ error: cannot find 'append' in scope\n            res = append(res, word)\n\
    \                  ^~~~~~\n/tmp/tmpj2s9zmwz.swift:25:28: error: value of type\
    \ 'String' has no member 'length'\n        guard let xlen = x.length, let ylen\
    \ = y.length else {\n                         ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    var result: [String] = []\n    \n    for str in lst {\n        if str.isEmpty\
    \ {\n            continue\n        }\n        \n        let count = str.count\n\
    \        if count % 2 == 1 {\n            result.append(str)\n        }\n    }\n\
    \    \n    for str in result {\n        str.swap(&result)\n    }\n    \n    result.sort(by:\
    \ { (a: String, b: String) -> Bool in\n        \n        let aLength: Int = a.count\n\
    \        let bLength: Int = b.count\n        \n        if aLength > bLength {\n\
    \            return true\n        }\n        \n        if aLength < bLength {\n\
    \            return false\n        }\n        \n        if aLength == bLength\
    \ {\n            return a.localizedCaseInsensitiveCompare(b) == .orderedAscending\n\
    \        }\n        \n        return a.localizedCaseInsensitiveCompare(b) == .orderedDescending\n\
    \    })\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp042hdkpj.swift:33:13: error: value of type 'String' has no member\
    \ 'swap'\n        str.swap(&result)\n        ~~~ ^~~~\n/tmp/tmp042hdkpj.swift:50:22:\
    \ error: value of type 'String' has no member 'localizedCaseInsensitiveCompare'\n\
    \            return a.localizedCaseInsensitiveCompare(b) == .orderedAscending\n\
    \                   ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Your code goes here\n    if lst.isEmpty{\n        return []\n    }\n    var\
    \ uniqueStrings = [String]()\n    var stringLengthDict = [Int:Int]()\n    var\
    \ sortedLst = lst.sorted()\n    sortedLst.forEach { (word) in\n        if let\
    \ count = stringLengthDict[word.count]{\n            if count != word.count{\n\
    \                stringLengthDict[word.count] = count\n            }\n       \
    \ }else{\n            stringLengthDict[word.count] = word.count\n        }\n \
    \       if !uniqueStrings.contains(word){\n            uniqueStrings.append(word)\n\
    \        }\n    }\n    var result: [String] = []\n    for uniqueString in uniqueStrings{\n\
    \        if let stringLength = (uniqueString.count * sortedLst.count)\n      \
    \      in stringLengthDict{\n            result.append(uniqueString.suffix(stringLength))\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgsbyrlws.swift:39:69: error: expected '{' after 'if' condition\n\
    \        if let stringLength = (uniqueString.count * sortedLst.count)\n      \
    \                                                              ^\n/tmp/tmpgsbyrlws.swift:39:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        if let stringLength = (uniqueString.count * sortedLst.count)\n      \
    \     ^                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgsbyrlws.swift:24:9:\
    \ warning: variable 'sortedLst' was never mutated; consider changing to 'let'\
    \ constant\n    var sortedLst = lst.sorted()\n    ~~~ ^\n    let\n/tmp/tmpgsbyrlws.swift:37:9:\
    \ warning: variable 'result' was never mutated; consider changing to 'let' constant\n\
    \    var result: [String] = []\n    ~~~ ^\n    let\n/tmp/tmpgsbyrlws.swift:39:16:\
    \ warning: value 'stringLength' was defined but never used; consider replacing\
    \ with boolean test\n        if let stringLength = (uniqueString.count * sortedLst.count)\n\
    \           ~~~~^~~~~~~~~~~~~~~\n                                            \
    \                         != nil\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ output: [String] = []\n    var keys: [String] = []\n    let maxKey = lst[0].count\n\
    \    for key in lst {\n        if key.count > maxKey {\n            continue\n\
    \        }\n        keys.append(key)\n    }\n    for k in keys {\n        for\
    \ j in 0..<k.count {\n            for i in  0..<k.count {\n                if\
    \ j == i {\n                    continue\n                }\n                if\
    \ k[j] < k[i] {\n                    output.append(k[j])\n                   \
    \ k[j] = \"\"\n                    k[i] = \"\"\n                    break\n  \
    \              }\n            }\n        }\n    }\n    for l in output {\n   \
    \     if l! != \"\" {\n            output.removeAll()\n        }\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0x5dyv4k.swift:33:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ k[j] < k[i] {\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp0x5dyv4k.swift:33:27: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if k[j] < k[i] {\n                          ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0x5dyv4k.swift:34:36:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                    output.append(k[j])\n                                   ^\n\
    /tmp/tmp0x5dyv4k.swift:35:22: error: cannot assign through subscript: subscript\
    \ is get-only\n                    k[j] = \"\"\n                    ~^~~\n/tmp/tmp0x5dyv4k.swift:35:28:\
    \ error: cannot assign value of type 'String' to subscript of type 'Character'\n\
    \                    k[j] = \"\"\n                           ^~\n/tmp/tmp0x5dyv4k.swift:36:22:\
    \ error: cannot assign through subscript: subscript is get-only\n            \
    \        k[i] = \"\"\n                    ~^~~\n/tmp/tmp0x5dyv4k.swift:36:28:\
    \ error: cannot assign value of type 'String' to subscript of type 'Character'\n\
    \                    k[i] = \"\"\n                           ^~\n/tmp/tmp0x5dyv4k.swift:43:13:\
    \ error: cannot force unwrap value of non-optional type 'String'\n        if l!\
    \ != \"\" {\n           ~^\n            \n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n\treturn\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpb3p14xbx/tmpb3p14xbx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd5cf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd59e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd59e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd59e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3p14xbx                        0x0000557ada4bf546 <unavailable> + 5446

    5    libc.so.6                          0x00002b6bd5edd460 __libc_start_main +
    245

    6    tmpb3p14xbx                        0x0000557ada4bf0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sort{ $0.characters.count < $1.characters.count }.sorted{ $0.characters.count\
    \ <= $1.characters.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpp8k4apun.swift:18:66: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return lst.sort{ $0.characters.count < $1.characters.count }.sorted{\
    \ $0.characters.count <= $1.characters.count }\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    for _i in 0..<res.count {\n        let maxi = Int(max(1, res[_i].characters.count))\n\
    \        let mini = Int(min(res[_i].characters.count, maxi + 1))\n        if maxi\
    \ == mini {\n            res[_i] = res[_i].stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n\
    \            continue\n        }\n        \n        if res[_i].characters.count\
    \ == maxi {\n            let maxIndex = Int(max(1, res[_i].characters.count))\n\
    \            let midIndex = maxIndex - mini\n            if midIndex % 2 == 0\
    \ {\n                let index = maxIndex - 1\n                res[maxIndex] =\
    \ res[index].stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n\
    \            }\n        }\n        \n        if res[_i].characters.count < mini\
    \ {\n            let maxIndex = Int(max(1, res[_i].characters.count))\n      \
    \      if maxIndex == mini {\n                let minIndex = Int(min(res[_i].characters.count,\
    \ maxi + 1))\n                res[maxIndex] = res[minIndex].stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n\
    \            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2pmlv2tg.swift:20:39: error: 'characters' is unavailable: Please\
    \ use String directly\n        let maxi = Int(max(1, res[_i].characters.count))\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2pmlv2tg.swift:21:36: error: 'characters' is unavailable:\
    \ Please use String directly\n        let mini = Int(min(res[_i].characters.count,\
    \ maxi + 1))\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2pmlv2tg.swift:23:63: error: cannot find\
    \ 'NSCharacterSet' in scope\n            res[_i] = res[_i].stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n\
    \                                                              ^~~~~~~~~~~~~~\n\
    /tmp/tmp2pmlv2tg.swift:23:31: error: value of type 'String' has no member 'stringByTrimmingCharactersInSet'\n\
    \            res[_i] = res[_i].stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n\
    \                      ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2pmlv2tg.swift:27:20:\
    \ error: 'characters' is unavailable: Please use String directly\n        if res[_i].characters.count\
    \ == maxi {\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2pmlv2tg.swift:28:47: error: 'characters' is unavailable:\
    \ Please use String directly\n            let maxIndex = Int(max(1, res[_i].characters.count))\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2pmlv2tg.swift:32:76: error: cannot find\
    \ 'NSCharacterSet' in scope\n                res[maxIndex] = res[index].stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n\
    \                               "
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sortedSet = Set(lst)\n    let res = sortedSet.filter{_ != \"\"}.sorted()\n \
    \   return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbs7db55d.swift:19:32: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n    let res = sortedSet.filter{_ != \"\"\
    }.sorted()\n                               ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    var len = res.count\n    for i in 0..<len {\n        let index\
    \ = i\n        let first = res[i]\n        let second = res[index - 1]\n     \
    \   if first.characters.count == second.characters.count {\n            res[i]\
    \ = second.characters + first\n            res[index - 1] = first\n        }\n\
    \        if first.characters.count < second.characters.count {\n            res[i]\
    \ = first.characters\n            res[index] = second.characters\n        }\n\
    \    }\n    return res.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpmx0pxamm.swift:24:18: error: 'characters' is unavailable: Please\
    \ use String directly\n        if first.characters.count == second.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmx0pxamm.swift:24:45: error: 'characters' is unavailable: Please\
    \ use String directly\n        if first.characters.count == second.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmx0pxamm.swift:25:29: error: 'characters'\
    \ is unavailable: Please use String directly\n            res[i] = second.characters\
    \ + first\n                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmx0pxamm.swift:28:18: error: 'characters' is unavailable:\
    \ Please use String directly\n        if first.characters.count < second.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmx0pxamm.swift:28:44: error: 'characters' is unavailable: Please\
    \ use String directly\n        if first.characters.count < second.characters.count\
    \ {\n                                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmx0pxamm.swift:29:28: error: 'characters'\
    \ is unavailable: Please use String directly\n            res[i] = first.characters\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmx0pxamm.swift:30:33: error: 'characters' is unavailable:\
    \ Please use String directly\n            res[index] = second.characters\n   \
    \      "
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        let length = word?.characters.count\n\
    \        if length != nil {\n            if result.contains(word!) && result.remove(word!)\
    \ {\n            } else {\n                result.append(word!)\n            }\n\
    \        }\n    }\n    result.sortInPlace({$0 > $1})\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2lo21yv0.swift:20:26: error: cannot use optional chaining on non-optional\
    \ value of type 'String'\n        let length = word?.characters.count\n      \
    \               ~~~~^\n                         \n/tmp/tmp2lo21yv0.swift:22:36:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \ if result.contains(word!) && result.remove(word!) {\n                      \
    \         ~~~~^\n                                   \n/tmp/tmp2lo21yv0.swift:22:49:\
    \ error: cannot convert value of type 'String' to expected argument type 'Bool'\n\
    \            if result.contains(word!) && result.remove(word!) {\n           \
    \                                     ^\n/tmp/tmp2lo21yv0.swift:22:56: error:\
    \ missing argument label 'at:' in call\n            if result.contains(word!)\
    \ && result.remove(word!) {\n                                                \
    \       ^\n                                                       at: \n/tmp/tmp2lo21yv0.swift:22:60:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \            if result.contains(word!) && result.remove(word!) {\n           \
    \                                                ^\n/tmp/tmp2lo21yv0.swift:22:60:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \ if result.contains(word!) && result.remove(word!) {\n                      \
    \                                 ~~~~^\n                                    \
    \                       \n/tmp/tmp2lo21yv0.swift:24:35: error: cannot force unwrap\
    \ value of non-optional type 'String'\n                result.append(word!)\n\
    \                              ~~~~^\n                                  \n/tmp/tmp2lo21yv0.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({$0\
    \ > $1})\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.isEmpty() {\n        return lst\n    }\n    \n    // Count the length of\
    \ each word\n    var lstWithLengths = lst.map{(str) -> [Int: Int] in \n      \
    \  return str.characters.reduce{\n            ($0[$1], $1 + 1)\n        }\n  \
    \  }\n    \n    // Sort by length of each word\n    lstWithLengths.sort{(str1,\
    \ str2) -> Bool in\n        str1.1 > str2.1\n    }\n    \n    // Create a new\
    \ array by filtering and mapping from lstWithLengths\n    let lstSorted = lstWithLengths.filter{(str1,\
    \ str2) in\n        str1.1 == str2.1\n    }.map{(str1, str2) in\n        str2\n\
    \    }\n    \n    // Sort alphabetically by word\n    lstSorted.sort{$0.0 < $1.0}\n\
    \    \n    // Return the array\n    return lstSorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpldpzv0_n.swift:18:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpldpzv0_n.swift:25:16: error: no exact matches in call to subscript\
    \ \n            ($0[$1], $1 + 1)\n               ^\n/tmp/tmpldpzv0_n.swift:25:16:\
    \ note: candidate expects value of type 'Dictionary<Int, Int>.Index' for parameter\
    \ #1 (got '(inout [Int : Int], String.Element) -> ()' (aka '(inout Dictionary<Int,\
    \ Int>, Character) -> ()'))\n            ($0[$1], $1 + 1)\n               ^\n\
    /tmp/tmpldpzv0_n.swift:25:16: note: candidate expects value of type 'Int' for\
    \ parameter #1 (got '(inout [Int : Int], String.Element) -> ()' (aka '(inout Dictionary<Int,\
    \ Int>, Character) -> ()'))\n            ($0[$1], $1 + 1)\n               ^\n\
    /tmp/tmpldpzv0_n.swift:25:16: note: candidate expects value of type 'Range<Dictionary<Int,\
    \ Int>.Index>' for parameter #1 (got '(inout [Int : Int], String.Element) -> ()'\
    \ (aka '(inout Dictionary<Int, Int>, Character) -> ()'))\n            ($0[$1],\
    \ $1 + 1)\n               ^\n/tmp/tmpldpzv0_n.swift:25:16: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got '(inout [Int :\
    \ Int], String.Element) -> ()' (aka '(inout Dictionary<Int, Int>, Character) ->\
    \ ()'))\n            ($0[$1], $1 + 1)\n               ^\n/tmp/tmpldpzv0_n.swift:24:37:\
    \ error: missing argument for parameter 'into' in call\n        return str.characters.reduce{\n\
    \                                    ^\n                                    (into:\
    \ <#[Int : Int]#>)\nSwift.Sequence:3:28: note: 'reduce(into:_:)' declared here\n\
    \    @inlinable public func reduce<Result>(into initialResult: __owned Result,\
    \ _ updateAccumulatingResult: (_ partialResult: inout Result, Self.Element) throws\
    \ -> ()) rethrows -> Result\n                           ^\n/tmp/tmpldpzv0_n.swift:25:22:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n            ($0[$1], $1 + 1)\n                     ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    let words_to_remove = lst.filter { (str: String) -> Bool in\n        str.characters.count\
    \ == str.length\n    }\n    \n    let sorted_by_length =  words_to_remove.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n    \n    var sorted_list =\
    \ sorted_by_length\n    \n    for str in sorted_by_length {\n        if sorted_list.contains(str)\
    \ {\n            sorted_list.removeAll()\n            break\n        }\n    }\n\
    \    \n    return sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp523d_1no.swift:20:37: error: value of type 'String' has no member\
    \ 'length'\n        str.characters.count == str.length\n                     \
    \           ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sortInPlace({ $0.count > $1.count }).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbguyj8v2.swift:18:16: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    return lst.sortInPlace({ $0.count > $1.count }).sorted()\n\
    \           ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.count > 1 {\n        return lst\n    } else {\n        return []\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpozeq4ftl/tmpozeq4ftl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38706d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38703cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38703ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38703c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozeq4ftl                        0x000056406ad7e5a6 <unavailable> + 5542

    5    libc.so.6                          0x00002b38708bf460 __libc_start_main +
    245

    6    tmpozeq4ftl                        0x000056406ad7e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted_list = lst\n    sorted_list = sort_list_by_length(sorted_list)\n    sorted_list\
    \ = sort_list_alphabetically(sorted_list)\n    return sorted_list\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpgubct28j.swift:19:19: error: cannot find 'sort_list_by_length'\
    \ in scope\n    sorted_list = sort_list_by_length(sorted_list)\n             \
    \     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpgubct28j.swift:20:19: error: cannot find 'sort_list_alphabetically'\
    \ in scope\n    sorted_list = sort_list_alphabetically(sorted_list)\n        \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n\tvar sorted_list\
    \ = lst[:]\n\tvar sorted_slice = sorted_list[:]\n\tsorted_slice = sort_list(lst)\n\
    \tsort_list(sorted_slice)\n\treturn sorted_slice\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmptiky77sh.swift:18:24: error: expected expression in list of expressions\n\
    \        var sorted_list = lst[:]\n                              ^\n/tmp/tmptiky77sh.swift:19:33:\
    \ error: expected expression in list of expressions\n        var sorted_slice\
    \ = sorted_list[:]\n                                       ^\n/tmp/tmptiky77sh.swift:18:25:\
    \ error: missing argument for parameter #1 in call\n        var sorted_list =\
    \ lst[:]\n                               ^\n                               <#Int#>\n\
    Swift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public\
    \ subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmptiky77sh.swift:20:17:\
    \ error: cannot find 'sort_list' in scope\n        sorted_slice = sort_list(lst)\n\
    \                       ^~~~~~~~~\n/tmp/tmptiky77sh.swift:21:2: error: cannot\
    \ find 'sort_list' in scope\n        sort_list(sorted_slice)\n        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        var newArr = result\n     \
    \   for j in newArr {\n            if i.count == j.count {\n                if\
    \ i.0 < j.0{\n                    newArr = newArr.sorted { $0 < $1 }\n       \
    \         }else{\n                    newArr = newArr.sorted { $1 < $0 }\n   \
    \             }\n            }\n        }\n        result = result + [String]()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp990h490l.swift:23:22: error: value of type 'String' has no member\
    \ '0'\n                if i.0 < j.0{\n                   ~ ^\n/tmp/tmp990h490l.swift:23:28:\
    \ error: value of type 'String' has no member '0'\n                if i.0 < j.0{\n\
    \                         ~ ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.count == 0 {\n        return []\n    }\n    var result = lst\n    let len\
    \ = lst.count\n    for index in 0..<(len - 1) {\n        if result[index].count\
    \ > 1 {\n            let first = result[index].first!\n            if let index\
    \ = result.index(of: first) {\n                result.removeAtIndex(index)\n \
    \               result.insert(first, atIndex: index)\n            }\n        }\n\
    \    }\n    result.sort { (s1, s2) -> Bool in\n        let s1 = s1.characters.split(separator:\
    \ \"\").map(String.init)\n        let s2 = s2.characters.split(separator: \"\"\
    ).map(String.init)\n        let l = min(s1!.count, s2!.count)\n        return\
    \ (s1!.count < s2!.count) || (s1!.count == s2!.count && s1!.last! < s2!.last!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7qxztae9.swift:26:45: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n            if let index\
    \ = result.index(of: first) {\n                                            ^\n\
    /tmp/tmp7qxztae9.swift:27:24: error: value of type '[String]' has no member 'removeAtIndex'\n\
    \                result.removeAtIndex(index)\n                ~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmp7qxztae9.swift:28:24: error: no exact matches in call to instance method\
    \ 'insert'\n                result.insert(first, atIndex: index)\n           \
    \            ^\n/tmp/tmp7qxztae9.swift:28:24: note: found candidate with type\
    \ '(__owned String, Int) -> ()'\n                result.insert(first, atIndex:\
    \ index)\n                       ^\n/tmp/tmp7qxztae9.swift:35:23: error: cannot\
    \ force unwrap value of non-optional type '[String]'\n        let l = min(s1!.count,\
    \ s2!.count)\n                    ~~^\n                      \n/tmp/tmp7qxztae9.swift:35:34:\
    \ error: cannot force unwrap value of non-optional type '[String]'\n        let\
    \ l = min(s1!.count, s2!.count)\n                               ~~^\n        \
    \                         \n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst\n        .sorted(by: { $0.count > $1.count })\n        .sorted(by:\
    \ { $0.isEmpty })\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd7d62jnl.swift:20:21: error: contextual closure type '(String,\
    \ String) throws -> Bool' expects 2 arguments, but 1 was used in closure body\n\
    \        .sorted(by: { $0.isEmpty })\n                    ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Your code here\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpiapvy2sx/tmpiapvy2sx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45a18d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45a15cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45a15ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45a15c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiapvy2sx                        0x000055ffddc7a5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b45a1abf460 __libc_start_main +
    245

    6    tmpiapvy2sx                        0x000055ffddc7a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  return\
    \ lst.sorted(by: { (first: String, _) -> Bool in\n    guard let first = first.first(where:\
    \ { (c: Character) -> Bool in\n      return Character.isWhitespace(c)\n    })\
    \ else {\n      return true\n    }\n    return first.length == first.length\n\
    \  })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpcnivzei8.swift:20:14: error: instance member 'isWhitespace' cannot\
    \ be used on type 'Character'; did you mean to use a value of this type instead?\n\
    \      return Character.isWhitespace(c)\n             ^~~~~~~~~\n/tmp/tmpcnivzei8.swift:20:24:\
    \ error: cannot call value of non-function type 'Bool'\n      return Character.isWhitespace(c)\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted(by: { $0.count > $1.count })\n    let filtered = sorted.filter\
    \ { $0.count % 2 == 1 }\n    return sorted.sorted { $0.count < $1.count }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_rv7btsn/tmp_rv7btsn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b737b21dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b737af14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b737af14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b737af137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rv7btsn                        0x000055bb5867d766 <unavailable> + 5990

    5    libc.so.6                          0x00002b737b409460 __libc_start_main +
    245

    6    tmp_rv7btsn                        0x000055bb5867d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ sort by length\n    lst.sort {\n        ($0.count < $1.count) ? -1 : 1\n   \
    \ }\n\n    // filter out odd-length words\n    lst = lst.filter {\n        ($0.count\
    \ % 2 != 0)\n    }\n\n    // sort by length\n    lst.sort {\n        ($0.count\
    \ < $1.count) ? -1 : 1\n    }\n\n    // sort by contents\n    lst.sort {\n   \
    \     ($0 < $1) && ($1 < $0) ? 0 : 1\n    }\n\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpayt296ef.swift:19:9: error: type of expression is ambiguous without\
    \ more context\n    lst.sort {\n    ~~~~^~~~~~\n/tmp/tmpayt296ef.swift:24:5: error:\
    \ cannot assign to value: 'lst' is a 'let' constant\n    lst = lst.filter {\n\
    \    ^~~\n/tmp/tmpayt296ef.swift:29:9: error: type of expression is ambiguous\
    \ without more context\n    lst.sort {\n    ~~~~^~~~~~\n/tmp/tmpayt296ef.swift:34:9:\
    \ error: type of expression is ambiguous without more context\n    lst.sort {\n\
    \    ~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.count > 1 {\n        var res = [String]()\n        var count = 0\n     \
    \   for str in lst {\n            if str.isEmpty {\n                continue\n\
    \            }\n            count = count + 1\n            if count % 2 != 0 {\n\
    \                continue\n            }\n            res = append(res, str)\n\
    \        }\n        sortByLength(res, lst)\n    }\n    return lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpb0ike4t7.swift:29:19: error: cannot find 'append' in scope\n  \
    \          res = append(res, str)\n                  ^~~~~~\n/tmp/tmpb0ike4t7.swift:31:9:\
    \ error: cannot find 'sortByLength' in scope\n        sortByLength(res, lst)\n\
    \        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    var newArr = Array(lst)\n    var arrLength = newArr.count\n    \n    let\
    \ sortedArray = NSMutableArray(capacity: arrLength)\n    \n    // loop through\
    \ the array, checking lengths and adding words to sorted array\n    for i in 0..<arrLength\
    \ {\n        let length = newArr[i].characters.count\n        let indexToRemove\
    \ = sortedArray.index(of: newArr[i])\n        \n        // if the word already\
    \ is in the sorted array, skip it\n        if indexToRemove != nil {\n       \
    \     newArr.remove(at: indexToRemove!)\n            continue\n        }\n   \
    \     \n        // if the word isn't long enough to remove it yet, skip it\n \
    \       if length <= 1 {\n            newArr.remove(at: i)\n            continue\n\
    \        }\n        \n        // if the word does have enough letters, add it\
    \ to sorted array\n        sortedArray.add(newArr[i])\n    }\n    \n    return\
    \ sortedArray.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpd57sly6y.swift:22:23: error: cannot find 'NSMutableArray' in scope\n\
    \    let sortedArray = NSMutableArray(capacity: arrLength)\n                 \
    \     ^~~~~~~~~~~~~~\n/tmp/tmpd57sly6y.swift:26:32: error: 'characters' is unavailable:\
    \ Please use String directly\n        let length = newArr[i].characters.count\n\
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO: replace with map function when Swift 5\n    var res: [String] = []\n \
    \   var i = 0\n    for s in lst {\n        let len = s.count\n        if len %\
    \ 2 != 0 && i < res.count {\n            let r = s.split(separator: \" \")\n \
    \           let l1 = res[i].split(separator: \" \")\n            if l1.count ==\
    \ 1 {\n                r.removeLast()\n                l1.removeLast()\n     \
    \       }\n            let l2 = res[i].split(separator: \" \")\n            let\
    \ l3 = res[i].split(separator: \" \")\n            if l2.count == 1 {\n      \
    \          r.removeLast()\n                l2.removeLast()\n            }\n  \
    \          if l3.count == 1 {\n                r.removeLast()\n              \
    \  l3.removeLast()\n            }\n            let t = l1.count\n            let\
    \ d = l2.count\n            let e = l3.count\n            if t < d {\n       \
    \         if t < e {\n                    res[i] = l1.joinWithSeparator(\" \"\
    )\n                } else {\n                    res[i] = l3.joinWithSeparator(\"\
    \ \")\n                }\n            } else {\n                if d < e {\n \
    \                   res[i] = l2.joinWithSeparator(\" \")\n                } else\
    \ {\n                    res[i] = l3.joinWithSeparator(\" \")\n              \
    \  }\n            }\n        } else {\n            if i < res.count {\n      \
    \          res[i] = s.split(separator: \" \")\n            }\n        }\n    \
    \    i += 1\n    }\n    return res.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu84ffdne.swift:27:19: error: cannot use mutating member on immutable\
    \ value: 'r' is a 'let' constant\n                r.removeLast()\n           \
    \     ~ ^\n/tmp/tmpu84ffdne.swift:24:13: note: change 'let' to 'var' to make it\
    \ mutable\n            let r = s.split(separator: \" \")\n            ^~~\n  \
    \          var\n/tmp/tmpu84ffdne.swift:28:20: error: cannot use mutating member\
    \ on immutable value: 'l1' is a 'let' constant\n                l1.removeLast()\n\
    \                ~~ ^\n/tmp/tmpu84ffdne.swift:25:13: note: change 'let' to 'var'\
    \ to make it mutable\n            let l1 = res[i].split(separator: \" \")\n  \
    \          ^~~\n            var\n/tmp/tmpu84ffdne.swift:33:19: error: cannot use\
    \ mutating member on immutable value: 'r' is a 'let' constant\n              \
    \  r.removeLast()\n                ~ ^\n/tmp/tmpu84ffdne.swift:24:13: note: change\
    \ 'let' to 'var' to make it mutable\n            let r = s.split(separator: \"\
    \ \")\n            ^~~\n            var\n/tmp/tmpu84ffdne.swift:34:20: error:\
    \ cannot use mutating member on immutable value: 'l2' is a 'let' constant\n  \
    \              l2.removeLast()\n                ~~ ^\n/tmp/tmpu84ffdne.swift:30:13:\
    \ note: change 'let' to 'var' to make it mutable\n            let l2 = res[i].split(separator:\
    \ \" \")\n            ^~~\n            var\n/tmp/tmpu84ffdne.swift:37:19: error:\
    \ cannot use mutating member on immutable value: 'r' is a 'let' constant\n   \
    \             r.removeLast()\n                ~ ^\n/tmp/tmpu84ffdne.swift:24:13:\
    \ note: change 'let' to 'var' to make it mutable\n            let r = s.split(separator:\
    \ \" \")\n            ^~~\n            var\n/tmp/tmpu84ffdne.swift:38:20: error:\
    \ cannot use mutating member on immutable value: 'l3' is a 'let' constant\n  \
    \              l3.removeLast()\n                ~~ ^\n/tmp/tmpu84ffdne.swift:31:13:\
    \ note: change 'let' to 'var' to make it mutable\n            let l3 = res[i].split(separator:\
    \ \" \")\n            ^~~\n            var\n/tmp/tmpu84ffdne.swift:45:33: error:\
    \ value of type '[String.SubSequence]' (aka 'Array<Substring>') has no member\
    \ 'joinWithSeparator'\n                "
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.reduce([]) { (res, item) -> [String] in\n        let newItem = item.split(separator:\
    \ \" \").count\n        let alreadyInArray = res.map { $0.split(separator: \"\
    \ \").count }.contains(newItem)\n        let isOddLength = newItem % 2 != 0\n\
    \        var finalArray = res\n        if alreadyInArray || !isOddLength {\n \
    \           if !alreadyInArray {\n                finalArray.append(item)\n  \
    \          }\n            if isOddLength {\n                finalArray.append(newItem)\n\
    \            }\n        }\n        return finalArray\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpubi26if2.swift:28:35: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n                finalArray.append(newItem)\n\
    \                                  ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newArray: [String] = []\n    for index in 0...lst.count {\n        let word\
    \ = lst[index]\n        let wordLength = word.characters.count\n        let stringIndex\
    \ = newArray.index(of: word) + index\n        let wordIndex = newArray.index(of:\
    \ word)\n        if wordIndex == nil && stringIndex == index {\n            newArray.append(word)\n\
    \        }\n        if wordIndex == nil && stringIndex == index+1 {\n        \
    \    newArray.append(word)\n        } else {\n            newArray[stringIndex]\
    \ = word\n        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9ev8t247.swift:21:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp9ev8t247.swift:22:36: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n        let stringIndex = newArray.index(of: word) + index\n  \
    \                                 ^\n/tmp/tmp9ev8t247.swift:22:36: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let stringIndex = newArray.index(of: word) + index\n                   \
    \                ^\n                          (                        ?? <#default\
    \ value#>)\n/tmp/tmp9ev8t247.swift:22:36: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        let stringIndex = newArray.index(of:\
    \ word) + index\n                                   ^\n                      \
    \                            !\n/tmp/tmp9ev8t247.swift:23:34: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n        let wordIndex = newArray.index(of:\
    \ word)\n                                 ^\n/tmp/tmp9ev8t247.swift:23:34: note:\
    \ use 'firstIndex(of:)' instead\n        let wordIndex = newArray.index(of: word)\n\
    \                                 ^~~~~\n                                 firstIndex\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO: Replace the following code with your implementation.\n    var result =\
    \ lst[:]\n    for index in 0 ..< result.count {\n        let word = result[index]\n\
    \        if word.characters.count == 1 {\n            result.remove(at: index)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6fnxji60.swift:19:22: error: expected expression in list of expressions\n\
    \    var result = lst[:]\n                     ^\n/tmp/tmp6fnxji60.swift:19:23:\
    \ error: missing argument for parameter #1 in call\n    var result = lst[:]\n\
    \                      ^\n                      <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr = lst\n    arr.sort()\n\n    for x in arr {\n        if x.count % 2 != 0\
    \ {\n            arr.remove(x)\n        }\n    }\n\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpmt49jcjx.swift:23:17: error: no exact matches in call to instance\
    \ method 'remove'\n            arr.remove(x)\n                ^\n/tmp/tmpmt49jcjx.swift:23:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            arr.remove(x)\n                ^\n/tmp/tmpmt49jcjx.swift:23:17: note:\
    \ candidate expects value of type 'Array<String>.Index' (aka 'Int') for parameter\
    \ #1 (got 'String')\n            arr.remove(x)\n                ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sortedWords = [String]()\n    for word in lst {\n        sortedWords = append(sortedWords,\
    \ word)\n    }\n\n    let uniqueWords = Set(sortedWords)\n\n    sortedWords =\
    \ uniqueWords.sorted()\n\n    return sortedWords\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmprwg0jxpx.swift:20:23: error: cannot find 'append' in scope\n  \
    \      sortedWords = append(sortedWords, word)\n                      ^~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted = [String]()\n    for str in lst {\n        sorted = sorted.filter{$0\
    \ != str}.sorted { a, b -> Bool in\n            return a.count < b.count\n   \
    \     }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9aqiygpq/tmp9aqiygpq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f64f9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f64c91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f64c91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f64c907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9aqiygpq                        0x000055e1d47258e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b0f65186460 __libc_start_main +
    245

    6    tmp9aqiygpq                        0x000055e1d4725469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    if lst.count == 0 {\n        return []\n    }\n    \n    var res = lst\n\
    \    \n    for s in lst {\n        if res == lst {\n            res = nil\n  \
    \      }\n    }\n    \n    if let r = res {\n        for s in res {\n        \
    \    if s.characters.count % 2 != 0 {\n                res = res.filter({ $0 !=\
    \ s })\n            }\n        }\n    }\n    \n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_2hnnox8.swift:27:19: error: 'nil' cannot be assigned to type '[String]'\n\
    \            res = nil\n                  ^\n/tmp/tmp_2hnnox8.swift:33:18: error:\
    \ 'characters' is unavailable: Please use String directly\n            if s.characters.count\
    \ % 2 != 0 {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_2hnnox8.swift:31:8: error: initializer for conditional\
    \ binding must have Optional type, not '[String]'\n    if let r = res {\n    \
    \   ^       ~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted(by: { (word1, word2) -> Bool in\n        if word1.count\
    \ == word2.count {\n            return word1 < word2\n        }\n        return\
    \ word1.count < word2.count\n    })\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurpzawa6/tmpurpzawa6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d33254c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d32f4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d32f4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d32f4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurpzawa6                        0x000055c7c60f8666 <unavailable> + 5734

    5    libc.so.6                          0x00002b2d33440460 __libc_start_main +
    245

    6    tmpurpzawa6                        0x000055c7c60f81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp89flilxw/tmp89flilxw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af997e7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af997b73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af997b73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af997b727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89flilxw                        0x00005636b84cf546 <unavailable> + 5446

    5    libc.so.6                          0x00002af998068460 __libc_start_main +
    245

    6    tmp89flilxw                        0x00005636b84cf0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [0]\n\n    for value in lst {\n        if result[0] < value.count {\n\
    \            result[0] += value.count\n        } else {\n            result[0]\
    \ += value.count\n            result.sort()\n        }\n    }\n\n    return result.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbvrgslmh/tmpbvrgslmh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f9c70ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f9c401b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f9c401988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f9c4007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvrgslmh                        0x000055a09cb959f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b8f9c8f6460 __libc_start_main +
    245

    6    tmpbvrgslmh                        0x000055a09cb95579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.insert(word, at: result.index(of: word))\n  \
    \      }\n    }\n    return result.sorted { $0.characters.count < $1.characters.count\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4b5vv4bq.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4b5vv4bq.swift:21:44:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n/tmp/tmp4b5vv4bq.swift:21:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result.insert(word,\
    \ at: result.index(of: word))\n                                           ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmp4b5vv4bq.swift:21:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: result.index(of:\
    \ word))\n                                           ^\n                     \
    \                                     !\n/tmp/tmp4b5vv4bq.swift:24:31: error:\
    \ 'characters' is unavailable: Please use String directly\n    return result.sorted\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4b5vv4bq.swift:24:53:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted_lst = lst.sorted(by: { a, b -> Bool in\n        let aStr = a.split(separator:\
    \ \"\").sorted().joined(separator: \"\")\n        let bStr = b.split(separator:\
    \ \"\").sorted().joined(separator: \"\")\n        return aStr.count == bStr.count\n\
    \    })\n    return sorted_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgarrdf4e/tmpgarrdf4e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b032dd66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b032da5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b032da5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b032da5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgarrdf4e                        0x000055ffc65698d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b032df52460 __libc_start_main +
    245

    6    tmpgarrdf4e                        0x000055ffc6569459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ tempArr = [String]()\n    var res = [String]()\n\n    for word in lst {\n  \
    \      if word.characters.count == 0 {\n            continue\n        }\n    \
    \    if word.characters.count % 2 == 1 {\n            tempArr.append(word)\n \
    \           continue\n        }\n        if !contains(tempArr, word) {\n     \
    \       tempArr.append(word)\n        }\n    }\n    for word in tempArr {\n  \
    \      if !contains(res, word) {\n            res.append(word)\n        }\n  \
    \  }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpy4e54z9y.swift:22:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count == 0 {\n             \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpy4e54z9y.swift:25:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ % 2 == 1 {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy4e54z9y.swift:29:13: error: cannot find 'contains'\
    \ in scope\n        if !contains(tempArr, word) {\n            ^~~~~~~~\n/tmp/tmpy4e54z9y.swift:34:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(res, word) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ i = 0\n    var sum = 0\n    var temp = [String]()\n    var sortedArr = [String]()\n\
    \    for el in lst {\n        if i % 2 == 0 {\n            sum += el.characters.count\n\
    \            temp.append(el)\n        } else {\n            if sum > 0 {\n   \
    \             sortedArr.append(String(sum))\n                sortedArr.append(String(el.characters.count))\n\
    \                sum = 0\n            }\n        }\n        i += 1\n    }\n  \
    \  sortedArr.append(String(sum))\n    sortedArr.append(String(el.characters.count))\n\
    \    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdu4y58dr.swift:24:23: error: 'characters' is unavailable: Please\
    \ use String directly\n            sum += el.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdu4y58dr.swift:29:44:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     sortedArr.append(String(el.characters.count))\n                        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpdu4y58dr.swift:36:29: error: cannot find 'el' in scope\n    sortedArr.append(String(el.characters.count))\n\
    \                            ^~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    lst\
    \ = lst.sorted(by: >)\n    \n    var tempStrings = lst\n    var tempString = \"\
    \"\n    \n    var sum = 0\n    var sums = [Int]()\n    for element in tempStrings\
    \ {\n        sum += element.characters.count\n        sums.append(sum)\n     \
    \   tempString += element\n    }\n    \n    var result = Array(count: tempStrings.count,\
    \ repeatedValue: \"\")\n    for element in sums {\n        \n        var index\
    \ = tempStrings.firstIndex(of: tempString!, options: .literal, range: nil)\n \
    \       result[index] = String(sum)\n        tempStrings.remove(at: index)\n \
    \       sum -= Int(element)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmprn6u41yr.swift:18:5: error: cannot assign to value: 'lst' is a\
    \ 'let' constant\n    lst = lst.sorted(by: >)\n    ^~~\n/tmp/tmprn6u41yr.swift:26:24:\
    \ error: 'characters' is unavailable: Please use String directly\n        sum\
    \ += element.characters.count\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmprn6u41yr.swift:31:18: error: no exact\
    \ matches in call to initializer \n    var result = Array(count: tempStrings.count,\
    \ repeatedValue: \"\")\n                 ^\n/tmp/tmprn6u41yr.swift:31:18: note:\
    \ candidate has partially matching parameter list (repeating: _, count: Int)\n\
    \    var result = Array(count: tempStrings.count, repeatedValue: \"\")\n     \
    \            ^\n/tmp/tmprn6u41yr.swift:31:18: note: candidate has partially matching\
    \ parameter list (repeating: _, count: Int)\n    var result = Array(count: tempStrings.count,\
    \ repeatedValue: \"\")\n                 ^\n/tmp/tmprn6u41yr.swift:34:43: error:\
    \ extra arguments at positions #2, #3 in call\n        var index = tempStrings.firstIndex(of:\
    \ tempString!, options: .literal, range: nil)\n                              \
    \            ^\nSwift.Collection:2:28: note: 'firstIndex(of:)' declared here\n\
    \    @inlinable public func firstIndex(of element: Self.Element) -> Self.Index?\n\
    \                           ^\n/tmp/tmprn6u41yr.swift:34:58: error: cannot force\
    \ unwrap value of non-optional type 'String'\n        var index = tempStrings.firstIndex(of:\
    \ tempString!, options: .literal, range: nil)\n                              \
    \                 ~~~~~~~~~~^\n                                              \
    \           \n/tmp/tmprn6u41yr.swift:34:71: error: cannot infer contextual base\
    \ in reference to member 'literal'\n        var index = tempStrings.firstIndex(of:\
    \ tempString!, options: .literal, range: nil)\n                              \
    \                                       ~^~~~~~~\n/tmp/tmprn6u41yr.swift:34:87:\
    \ error: 'nil' requires a contextual type\n        var index = tempStrings.firstIndex(of:"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  return\
    \ sorted_list_sum(lst, 0, lst)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxq8tt1qq.swift:18:25: error: extra arguments at positions #2, #3\
    \ in call\n  return sorted_list_sum(lst, 0, lst)\n                        ^\n\
    /tmp/tmpxq8tt1qq.swift:17:6: note: 'sorted_list_sum(lst:)' declared here\nfunc\
    \ sorted_list_sum(lst: [String]) -> [String] {\n     ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ strs = lst\n    let sorted = strs.sorted { $0.utf8.count > $1.utf8.count }\n\
    \    return sorted.sorted { $0.utf8.count < $1.utf8.count }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmphytg2jlc/tmphytg2jlc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b956bd1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b956ba14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b956ba14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b956ba137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphytg2jlc                        0x000056536ebb9676 <unavailable> + 5750

    5    libc.so.6                          0x00002b956bf09460 __libc_start_main +
    245

    6    tmphytg2jlc                        0x000056536ebb91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lstCopy = lst\n    lstCopy = lstCopy.sorted(by: {\n        let w1Len = Int($0)\n\
    \        let w2Len = Int($1)\n        if (w1Len < w2Len) {\n            return\
    \ true\n        } else if (w1Len > w2Len) {\n            return false\n      \
    \  } else {\n            return $0 < $1\n        }\n    })\n    return lstCopy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpain2dg2c.swift:22:13: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if (w1Len < w2Len) {\n      \
    \      ^\n/tmp/tmpain2dg2c.swift:22:13: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n        if (w1Len < w2Len) {\n\
    \            ^\n                  ?? <#default value#>\n/tmp/tmpain2dg2c.swift:22:13:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if (w1Len < w2Len) {\n            ^\n                 !\n/tmp/tmpain2dg2c.swift:22:21:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        if (w1Len < w2Len) {\n                    ^\n/tmp/tmpain2dg2c.swift:22:21:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if (w1Len < w2Len) {\n                    ^\n               \
    \           ?? <#default value#>\n/tmp/tmpain2dg2c.swift:22:21: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        if\
    \ (w1Len < w2Len) {\n                    ^\n                         !\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    guard\
    \ lst.count > 0 else { return [] }\n    var sortedLst = lst\n    if lst.count\
    \ > 1 {\n        for i in 0 ..< lst.count {\n            let prevWord = sortedLst[i]\n\
    \            if prevWord.count < sortedLst[i - 1].count {\n                let\
    \ tempLst = sortedLst\n                tempLst.swapAt(i, i - 1)\n            \
    \    sortedLst = tempLst\n                break\n            }\n        }\n  \
    \  }\n    guard let lastWord = sortedLst[lst.count - 1] else {\n        return\
    \ sortedLst\n    }\n    guard lastWord.count >= 2 else {\n        return sortedLst\n\
    \    }\n    guard lastWord.count % 2 == 0 else {\n        return sortedLst\n \
    \   }\n    var sortedLastWord = lastWord\n    var i = lst.count - 1\n    for j\
    \ in 0 ..< sortedLst.count {\n        guard i > 0\n            || (sortedLst[j].count\
    \ > sortedLastWord.count && j == i - 1) else {\n            return sortedLst\n\
    \        }\n        sortedLastWord.swapAt(i, j)\n        i -= 1\n    }\n    return\
    \ sortedLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqy6f5hg1.swift:25:25: error: cannot use mutating member on immutable\
    \ value: 'tempLst' is a 'let' constant\n                tempLst.swapAt(i, i -\
    \ 1)\n                ~~~~~~~ ^\n/tmp/tmpqy6f5hg1.swift:24:17: note: change 'let'\
    \ to 'var' to make it mutable\n                let tempLst = sortedLst\n     \
    \           ^~~\n                var\n/tmp/tmpqy6f5hg1.swift:31:11: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n    guard let\
    \ lastWord = sortedLst[lst.count - 1] else {\n          ^              ~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqy6f5hg1.swift:47:24: error: value of type 'String' has no member 'swapAt'\n\
    \        sortedLastWord.swapAt(i, j)\n        ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Fill in your code here.\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpg1o6tlz_/tmpg1o6tlz_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b618037fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6180076b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6180076988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61800757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg1o6tlz_                        0x000055d8e5ba1546 <unavailable> + 5446

    5    libc.so.6                          0x00002b618056b460 __libc_start_main +
    245

    6    tmpg1o6tlz_                        0x000055d8e5ba10c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        result.append(word)\n    }\n   \
    \ result = result.sorted(by: { (word1, word2) -> Bool in\n        let length1\
    \ = word1.characters.count\n        let length2 = word2.characters.count\n   \
    \     return length1 < length2\n    })\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnl9k_8mw.swift:26:29: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length1 = word1.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpnl9k_8mw.swift:27:29: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length2 = word2.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sort { $0.length < $1.length }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnldmhqtm.swift:18:16: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return lst.sort { $0.length < $1.length\
    \ }\n           ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnldmhqtm.swift:18:16:\
    \ error: cannot use mutating member on immutable value: 'lst' is a 'let' constant\n\
    \    return lst.sort { $0.length < $1.length }\n           ~~~ ^\n/tmp/tmpnldmhqtm.swift:18:26:\
    \ error: value of type 'String' has no member 'length'\n    return lst.sort {\
    \ $0.length < $1.length }\n                      ~~ ^~~~~~\n/tmp/tmpnldmhqtm.swift:18:38:\
    \ error: value of type 'String' has no member 'length'\n    return lst.sort {\
    \ $0.length < $1.length }\n                                  ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    // Write code here\n    \n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp7hu8aiq2/tmp7hu8aiq2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c6c817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c6c50eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c6c50e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c6c50d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hu8aiq2                        0x0000557f8ae9e546 <unavailable> + 5446

    5    libc.so.6                          0x00002b1c6ca03460 __libc_start_main +
    245

    6    tmp7hu8aiq2                        0x0000557f8ae9e0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ a = [String]()\n    for item in lst {\n        if a.filter({ $0.isEqual(item)\
    \ }).count < 2 {\n            a += item\n        }\n    }\n    return a.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjael0gs0.swift:20:26: error: value of type 'String' has no member\
    \ 'isEqual'\n        if a.filter({ $0.isEqual(item) }).count < 2 {\n         \
    \             ~~ ^~~~~~~\n/tmp/tmpjael0gs0.swift:21:15: error: operator function\
    \ '+=' requires the types 'String' and 'String.Element' (aka 'Character') be equivalent\n\
    \            a += item\n              ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n/tmp/tmpjael0gs0.swift:24:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    return a.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjael0gs0.swift:24:52: error: 'characters'\
    \ is unavailable: Please use String directly\n    return a.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                                                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  let sorted\
    \ = lst.sorted(by: { $0.length > $1.length })\n  return sorted.sorted(by: { $0.count\
    \ < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2dq8fqs_.swift:18:36: error: value of type 'String' has no member\
    \ 'length'\n  let sorted = lst.sorted(by: { $0.length > $1.length })\n       \
    \                         ~~ ^~~~~~\n/tmp/tmp2dq8fqs_.swift:18:48: error: value\
    \ of type 'String' has no member 'length'\n  let sorted = lst.sorted(by: { $0.length\
    \ > $1.length })\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ words = [String]()\n    for word in lst {\n        if !words.contains(word)\
    \ {\n            words.append(word)\n        } else {\n            words.remove(word)\n\
    \        }\n    }\n    return words.sorted(by: {\n        return ($0.count < $1.count)\
    \ ? true : $0.count > $1.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_m8sczcw.swift:21:19: error: cannot use mutating member on immutable\
    \ value: 'words' is a 'let' constant\n            words.append(word)\n       \
    \     ~~~~~ ^\n/tmp/tmp_m8sczcw.swift:18:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let words = [String]()\n    ^~~\n    var\n/tmp/tmp_m8sczcw.swift:23:19:\
    \ error: no exact matches in call to instance method 'remove'\n            words.remove(word)\n\
    \                  ^\n/tmp/tmp_m8sczcw.swift:23:19: note: found candidate with\
    \ type '(Int) -> String'\n            words.remove(word)\n                  ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sum = 0\n    for s in lst {\n        sum += s.length\n    }\n    var res: [String]\
    \ = []\n    var newArr = [String]()\n    for s in lst {\n        if sum % 2 !=\
    \ 0 {\n            newArr.append(s)\n        }\n        sum += s.length\n    }\n\
    \    for s in newArr {\n        res.append(s)\n    }\n    res.sort()\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplfja33f5.swift:20:18: error: value of type 'String' has no member\
    \ 'length'\n        sum += s.length\n               ~ ^~~~~~\n/tmp/tmplfja33f5.swift:28:18:\
    \ error: value of type 'String' has no member 'length'\n        sum += s.length\n\
    \               ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    let sorting = result.sorted(by: { $0.count > $1.count })\n\
    \    let sorted = sorting.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5htj7l22.swift:20:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let sorted = sorting.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5htj7l22.swift:20:64:\
    \ error: 'characters' is unavailable: Please use String directly\n    let sorted\
    \ = sorting.sorted(by: { $0.characters.count > $1.characters.count })\n      \
    \                                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5htj7l22.swift:18:9: warning: variable\
    \ 'result' was never mutated; consider changing to 'let' constant\n    var result\
    \ = lst\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sum = 0\n    var even = false\n    var result = [String]()\n    for s in lst\
    \ {\n        sum += s.count\n        if sum > 1 && !even {\n            if sum\
    \ == 2 {\n                result.append(s)\n            } else {\n           \
    \     result.append(s + String(sum - 1))\n            }\n            sum = sum\
    \ - 1\n            even = true\n        } else {\n            result.append(s)\n\
    \            even = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpalgnwcba/tmpalgnwcba.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b06cc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b069b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b069b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b069b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpalgnwcba                        0x000055585dedb8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b1b06eac460 __libc_start_main +
    245

    6    tmpalgnwcba                        0x000055585dedb449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newLst = lst\n    var newLstSorted = []\n    for x in newLst {\n        var\
    \ newLstSorted = []\n        var newLstSorted = x\n        for y in newLst {\n\
    \            if x.count == y.count {\n                if x.characters[x.count-1]\
    \ > y.characters[y.count-1] {\n                    newLstSorted += y\n       \
    \         }\n                if x.characters[x.count-1] < y.characters[y.count-1]\
    \ {\n                    newLstSorted += x\n                }\n            } else\
    \ {\n                newLstSorted += y\n            }\n        }\n        newLstSorted\
    \ += x\n        newLstSorted.sort()\n        newLstSorted = append(newLstSorted,\
    \ \"\")\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted\
    \ = append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted, \"\
    \")\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted =\
    \ append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted, \"\"\
    )\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted,\
    \ \"\")\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted\
    \ = append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted, \"\
    \")\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted =\
    \ append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted, \"\"\
    )\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted,\
    \ \"\")\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted\
    \ = append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted, \"\
    \")\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted =\
    \ append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted, \"\"\
    )\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted,\
    \ \"\")\n        newLstSorted = append(newLstSorted, \"\")\n        newLstSorted\
    \ = append(newLstSorted, \"\")\n        newLstSorted = append(newLstSorted, \"\
    \")\n        newLstSorted = append(newLstSorted, \"\")\n        new\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpje1d2mg4.swift:88:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpje1d2mg4.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpje1d2mg4.swift:19:24:\
    \ error: empty collection literal requires an explicit type\n    var newLstSorted\
    \ = []\n                       ^~\n/tmp/tmpje1d2mg4.swift:21:28: error: empty\
    \ collection literal requires an explicit type\n        var newLstSorted = []\n\
    \                           ^~\n/tmp/tmpje1d2mg4.swift:22:13: error: invalid redeclaration\
    \ of 'newLstSorted'\n        var newLstSorted = x\n            ^\n/tmp/tmpje1d2mg4.swift:21:13:\
    \ note: 'newLstSorted' previously declared here\n        var newLstSorted = []\n\
    \            ^\n/tmp/tmpje1d2mg4.swift:25:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if x.characters[x.count-1] > y.characters[y.count-1] {\n             \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpje1d2mg4.swift:25:22: error: 'characters' is\
    \ unavailable: Please use String directly\n                if x.characters[x.count-1]\
    \ > y.characters[y.count-1] {\n                     ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpje1d2mg4.swift:25:46: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if x.characters[x.count-1] > y.characters[y.count-1] {\n    \
    \                                         ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ results = [String]()\n    let sortedSet = Set<String>()\n    for string in lst\
    \ {\n        if let word = string as? String {\n            sortedSet.add(word)\n\
    \        }\n    }\n    let sortedArray = sortedSet.sorted()\n    for string in\
    \ sortedArray {\n        results.append(string)\n    }\n    return results\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsrh2wfwb.swift:21:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let word = string as? String {\n      \
    \                       ^\n/tmp/tmpsrh2wfwb.swift:22:23: error: value of type\
    \ 'Set<String>' has no member 'add'\n            sortedSet.add(word)\n       \
    \     ~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO: Use map to sort and get sum\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7kl61vqp/tmp7kl61vqp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a50604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a502fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a502fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a502fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kl61vqp                        0x0000563dde8d5546 <unavailable> + 5446

    5    libc.so.6                          0x00002b9a507f0460 __libc_start_main +
    245

    6    tmp7kl61vqp                        0x0000563dde8d50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr = [String]()\n    for str in lst {\n        if arr.contains(str) {\n   \
    \         continue\n        }\n        let splits = str.components(separatedBy:\
    \ \" \")\n        arr = append(arr, splits[0])\n    }\n    arr.sort()\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp751ea6o0.swift:23:26: error: value of type 'String' has no member\
    \ 'components'\n        let splits = str.components(separatedBy: \" \")\n    \
    \                 ~~~ ^~~~~~~~~~\n/tmp/tmp751ea6o0.swift:24:15: error: cannot\
    \ find 'append' in scope\n        arr = append(arr, splits[0])\n             \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr = [String]()\n    var dup = false\n    for word in lst {\n        for _\
    \ in lst {\n            if word == lst {\n                dup = true\n       \
    \         break\n            }\n            arr.append(word)\n        }\n    }\n\
    \    if dup {\n        arr = arr\n    } else {\n        arr.sort()\n    }\n  \
    \  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqnmjguyp.swift:22:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and '[String]'\n            if word == lst {\n\
    \               ~~~~ ^  ~~~\n/tmp/tmpqnmjguyp.swift:22:21: note: overloads for\
    \ '==' exist with these partially matching parameter lists: (String, String)\n\
    \            if word == lst {\n                    ^\n/tmp/tmpqnmjguyp.swift:30:13:\
    \ error: assigning a variable to itself\n        arr = arr\n        ~~~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Write your code here\n    let result = lst\n    for str in result {\n      \
    \  if str.count % 2 == 1 {\n            result.remove(str) \n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp88tf6lfv.swift:22:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(str) \n                   ^\n/tmp/tmp88tf6lfv.swift:22:20:\
    \ note: found candidate with type '(Int) -> String'\n            result.remove(str)\
    \ \n                   ^\n/tmp/tmp88tf6lfv.swift:25:12: error: cannot use mutating\
    \ member on immutable value: 'result' is a 'let' constant\n    result.sort()\n\
    \    ~~~~~~ ^\n/tmp/tmp88tf6lfv.swift:19:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = lst\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    let sorted = lst.sorted(by: { l1, l2 -> Bool in\n        \n        if l1.count\
    \ < l2.count {\n            return false\n        }\n        \n        return\
    \ true\n    })\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl4o3af2h/tmpl4o3af2h.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b7db86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b7d87db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b7d87d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b7d87c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4o3af2h                        0x0000556bb13a8606 <unavailable> + 5638

    5    libc.so.6                          0x00002b3b7dd72460 __libc_start_main +
    245

    6    tmpl4o3af2h                        0x0000556bb13a8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        let length = word.count\n\
    \        if length % 2 == 1 {\n            result.append(word)\n        } else\
    \ {\n            for _ in 0...word.count / 2 {\n                result.removeLast()\n\
    \            }\n            result.append(word)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b5776634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b577632b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b577632b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b577632b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b577632abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b577642cc1d <unavailable> + 2489373

    6    tmpfyieo317                        0x0000563b62e90c23 <unavailable> + 11299

    7    tmpfyieo317                        0x0000563b62e8f96d <unavailable> + 6509

    8    libc.so.6                          0x00002b5776820460 __libc_start_main +
    245

    9    tmpfyieo317                        0x0000563b62e8f5e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ sort_by_index(lst, count_func(lst, count_func))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0yawd5na.swift:18:12: error: cannot find 'sort_by_index' in scope\n\
    \    return sort_by_index(lst, count_func(lst, count_func))\n           ^~~~~~~~~~~~~\n\
    /tmp/tmp0yawd5na.swift:18:31: error: cannot find 'count_func' in scope\n    return\
    \ sort_by_index(lst, count_func(lst, count_func))\n                          \
    \    ^~~~~~~~~~\n/tmp/tmp0yawd5na.swift:18:47: error: cannot find 'count_func'\
    \ in scope\n    return sort_by_index(lst, count_func(lst, count_func))\n     \
    \                                         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp89flilxw/tmp89flilxw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af997e7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af997b73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af997b73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af997b727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89flilxw                        0x00005636b84cf546 <unavailable> + 5446

    5    libc.so.6                          0x00002af998068460 __libc_start_main +
    245

    6    tmp89flilxw                        0x00005636b84cf0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ len = lst.map { strlen }.max\n    var lstNew: [String] = []\n    for str in\
    \ lst {\n        let newStr = str.characters.filter { $0 % 2 == 1 }\n        lstNew.append(newStr.joined(separator:\
    \ \"\"))\n    }\n    lstNew.sortInPlace()\n    return lstNew\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpd1h44nef.swift:18:25: error: cannot find 'strlen' in scope\n  \
    \  let len = lst.map { strlen }.max\n                        ^~~~~~\n/tmp/tmpd1h44nef.swift:21:46:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n        let newStr = str.characters.filter { $0 % 2 ==\
    \ 1 }\n                                             ^\n/tmp/tmpd1h44nef.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    lstNew.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.count == 0 {\n        return lst\n    }\n    var sortedArr: [String] = []\n\
    \    var counter = 0\n    for str in lst {\n        counter += 1\n        if counter\
    \ % 2 == 0 {\n            sortedArr = append(sortedArr, str)\n        }\n    }\n\
    \    return sortedArr.sorted(by: str.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp63t3p0o.swift:26:25: error: cannot find 'append' in scope\n  \
    \          sortedArr = append(sortedArr, str)\n                        ^~~~~~\n\
    /tmp/tmpp63t3p0o.swift:29:33: error: cannot find 'str' in scope\n    return sortedArr.sorted(by:\
    \ str.count)\n                                ^~~\n/tmp/tmpp63t3p0o.swift:29:37:\
    \ error: converting non-escaping value to '(String, String) throws -> Bool' may\
    \ allow it to escape\n    return sortedArr.sorted(by: str.count)\n           \
    \                         ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    var sorted = lst\n    \n    for val in sorted {\n        let str = String(val)\n\
    \        if str.count == 0 {\n            sorted.remove(at: sorted.index(of: val))\n\
    \        } else if str.count % 2 == 1 {\n            sorted.remove(at: sorted.index(of:\
    \ val))\n        } else {\n            sorted.remove(at: sorted.index(of: val))\n\
    \            sorted.append(str)\n        }\n    }\n    \n    return sorted\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplofmj3re.swift:24:38: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            sorted.remove(at: sorted.index(of: val))\n        \
    \                             ^\n/tmp/tmplofmj3re.swift:24:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         sorted.remove(at: sorted.index(of: val))\n                         \
    \            ^\n                                                    ?? <#default\
    \ value#>\n/tmp/tmplofmj3re.swift:24:38: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            sorted.remove(at:\
    \ sorted.index(of: val))\n                                     ^\n           \
    \                                        !\n/tmp/tmplofmj3re.swift:26:38: error:\
    \ value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be\
    \ unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n           \
    \ sorted.remove(at: sorted.index(of: val))\n                                 \
    \    ^\n/tmp/tmplofmj3re.swift:26:38: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            sorted.remove(at: sorted.index(of:\
    \ val))\n                                     ^\n                            \
    \                        ?? <#default value#>\n/tmp/tmplofmj3re.swift:26:38: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            sorted.remove(at: sorted.index(of: val))\n                      \
    \               ^\n                                                   !\n/tmp/tmplofmj3re.swift:28:38:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    sorted.remove(at: sorted.index(of: val))\n                              \
    \       ^\n/tmp/tmplofmj3re.swift:28:38: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            sorted.remove(at:\
    \ sorted.index(of:"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sum = 0\n    var newArray = [String]()\n    var newDict = [String: Int]()\n\
    \    for s in lst {\n        if let i = newDict[s] {\n            newArray.append(s)\n\
    \        } else {\n            sum += s.characters.count\n            newDict[s]\
    \ = sum\n            newArray.append(s)\n        }\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpebgxp4xq.swift:25:22: error: 'characters' is unavailable: Please\
    \ use String directly\n            sum += s.characters.count\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpebgxp4xq.swift:22:16:\
    \ warning: value 'i' was defined but never used; consider replacing with boolean\
    \ test\n        if let i = newDict[s] {\n           ~~~~^~~~\n               \
    \               != nil\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp89flilxw/tmp89flilxw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af997e7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af997b73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af997b73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af997b727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89flilxw                        0x00005636b84cf546 <unavailable> + 5446

    5    libc.so.6                          0x00002af998068460 __libc_start_main +
    245

    6    tmp89flilxw                        0x00005636b84cf0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.reduce(into: [String]()) { (res, elem) in\n        var sum = 0\n       \
    \ var current = \"\"\n        for ch in elem {\n            sum += Int(ch)\n \
    \           current = ch\n        }\n        res[sum] += current\n        return\
    \ res\n    }.map { $0.sorted() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmptte4txzx.swift:22:20: error: no exact matches in call to initializer\
    \ \n            sum += Int(ch)\n                   ^\n/tmp/tmptte4txzx.swift:22:20:\
    \ note: found candidate with type '(Float16) -> Int'\n            sum += Int(ch)\n\
    \                   ^\n/tmp/tmptte4txzx.swift:22:20: note: found candidate with\
    \ type '(Float) -> Int'\n            sum += Int(ch)\n                   ^\n/tmp/tmptte4txzx.swift:22:20:\
    \ note: found candidate with type '(Double) -> Int'\n            sum += Int(ch)\n\
    \                   ^\n/tmp/tmptte4txzx.swift:22:20: note: found candidate with\
    \ type '(Float80) -> Int'\n            sum += Int(ch)\n                   ^\n\
    /tmp/tmptte4txzx.swift:22:20: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n            sum += Int(ch)\n                   ^\n/tmp/tmptte4txzx.swift:22:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n            sum +=\
    \ Int(ch)\n                   ^\n/tmp/tmptte4txzx.swift:27:16: error: cannot convert\
    \ value of type '[String.Element]' (aka 'Array<Character>') to closure result\
    \ type 'String'\n    }.map { $0.sorted() }\n            ~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n\treturn\
    \ lst.reduce([String](), { (acc, e) in\n\t\tif acc.count > 0 {\n\t\t\tacc.last!.append(e)\n\
    \t\t} else {\n\t\t\tacc.append(e)\n\t\t}\n\t\tacc.count += 1 // this is just to\
    \ keep track of the number of words we read\n\n\t\tif acc.count > 1 {\n\t\t\t\
    if acc.last!.count < acc.count {\n\t\t\t\treturn acc\n\t\t\t}\n\n\t\t\tacc.last\
    \ = acc.last!\n\t\t} else {\n\t\t\tif acc.last!.count > acc.count {\n\t\t\t\t\
    return acc\n\t\t\t}\n\t\t\tacc.last!.append(e) // append the new word at the end\n\
    \t\t}\n\n\t\treturn acc\n\t}).last // return at the end\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnw20o16g.swift:20:14: error: cannot use mutating member on immutable\
    \ value: 'last' is a get-only property\n                        acc.last!.append(e)\n\
    \                        ~~~~~~~~  ^\n/tmp/tmpnw20o16g.swift:40:5: error: cannot\
    \ convert return expression of type 'String?' to return type '[String]'\n    \
    \    }).last // return at the end\n~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ sort(lst, byLength)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5e_wli6f.swift:18:12: error: cannot find 'sort' in scope\n    return\
    \ sort(lst, byLength)\n           ^~~~\n/tmp/tmp5e_wli6f.swift:18:22: error: cannot\
    \ find 'byLength' in scope\n    return sort(lst, byLength)\n                 \
    \    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    var sortedArray = [String]()\n    \n    for str in lst {\n        if str.isEmpty\
    \ {\n            continue\n        }\n        if sortedArray.contains(str) {\n\
    \            sortedArray.remove(str) //remove duplicate\n        } else {\n  \
    \          sortedArray.append(str)\n        }\n    }\n    \n    sortedArray.sort\
    \ {\n        return $0.count > $1.count }\n    \n    return sortedArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjg1h8k2p.swift:26:25: error: no exact matches in call to instance\
    \ method 'remove'\n            sortedArray.remove(str) //remove duplicate\n  \
    \                      ^\n/tmp/tmpjg1h8k2p.swift:26:25: note: candidate expects\
    \ value of type 'Int' for parameter #1 (got 'String')\n            sortedArray.remove(str)\
    \ //remove duplicate\n                        ^\n/tmp/tmpjg1h8k2p.swift:26:25:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            sortedArray.remove(str) //remove duplicate\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ sorted_list_sum2(lst, 0, len(lst))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzxsjoqpg.swift:18:12: error: cannot find 'sorted_list_sum2' in\
    \ scope\n    return sorted_list_sum2(lst, 0, len(lst))\n           ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpzxsjoqpg.swift:18:37: error: cannot find 'len' in scope\n    return sorted_list_sum2(lst,\
    \ 0, len(lst))\n                                    ^~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.isEmpty {\n        return nil\n    }\n    var res = [String]()\n    var\
    \ temp = lst[0]\n    var cur = 0\n    for w in lst {\n        if cur+w.count >\
    \ temp.count {\n            res.append(temp)\n            temp = w\n         \
    \   cur = w.count\n        } else {\n            temp = temp + w + \"0\"\n   \
    \         cur += w.count\n        }\n    }\n    res.append(temp)\n    return res.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpngou71vu.swift:19:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp89flilxw/tmp89flilxw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af997e7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af997b73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af997b73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af997b727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89flilxw                        0x00005636b84cf546 <unavailable> + 5446

    5    libc.so.6                          0x00002af998068460 __libc_start_main +
    245

    6    tmp89flilxw                        0x00005636b84cf0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst == nil || len(lst) < 1 {\n        return []\n    }\n    var sorted = lst\n\
    \    var last = \"\"\n    var isDup = false.\n\n    for i := 0; i < len(sorted);\
    \ i++ {\n        if sorted[i].length == last.length {\n            isDup = true\
    \ // check for duplicates\n            break // exit for loop\n        }\n   \
    \     last = sorted[i].length\n    }\n\n    if isDup {\n        // remove duplicates\n\
    \        var newSorted = [][String]()\n        for i := 0; i < len(sorted); i++\
    \ {\n            if sorted[i].length != last.length {\n                sorted\
    \ = append(newSorted, sorted[i])\n            }\n        }\n    } else {\n   \
    \     sorted = sort.Sort(func(i, j int) bool {\n            return sorted[i].length\
    \ > sorted[j].length\n        })\n    }\n\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2jt30mjb.swift:23:22: error: expected member name following '.'\n\
    \    var isDup = false.\n                     ^\n/tmp/tmp2jt30mjb.swift:25:12:\
    \ error: expected type\n    for i := 0; i < len(sorted); i++ {\n           ^\n\
    \            <#type#>\n/tmp/tmp2jt30mjb.swift:25:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(sorted); i++ {\n           ^\n/tmp/tmp2jt30mjb.swift:25:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(sorted);\
    \ i++ {\n           ^\n/tmp/tmp2jt30mjb.swift:36:16: error: expected type\n  \
    \      for i := 0; i < len(sorted); i++ {\n               ^\n                <#type#>\n\
    /tmp/tmp2jt30mjb.swift:36:16: error: expected 'in' after for-each pattern\n  \
    \      for i := 0; i < len(sorted); i++ {\n               ^\n/tmp/tmp2jt30mjb.swift:36:16:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < len(sorted); i++ {\n               ^\n/tmp/tmp2jt30mjb.swift:42:28: error:\
    \ expected expression in list of expressions\n        sorted = sort.Sort(func(i,\
    \ j int) bool {\n                           ^\n/tmp/tmp2jt30mjb.swift:42:32: error:\
    \ expected identifier in function declaration\n        sorted = sort.Sort(func(i,\
    \ j int) bool {\n                               ^\n/tmp/tmp2jt30mjb.swift:18:22:\
    \ error: cannot find 'len' in scope\n    if lst == nil || len(lst) < 1 {\n   \
    \                  ^~~\n/tmp/tmp2jt30mjb.swift:35:27: error: no exact matches\
    \ in call to subscript \n        var newSorted = [][String]()\n              \
    \            ^\n/tmp/tmp2jt30mjb.swift:35:27: note: found candidate with type\
    \ '(Int) -> Any'\n        var newSorted = [][String]()\n                     \
    \     ^\n/tmp/tmp2jt30mjb.swift:35:27: note: found candidate with type '(Range<Int>)\
    \ -> ArraySlice<Any>'\n        var newSorted = [][String]()\n                \
    \          ^\n/tmp/tmp2jt30mjb.swift:35:27: note: found candidate with type '(String.Type)\
    \ -> ArraySlice<Any>'\n        var newSorted = [][String]()\n                \
    \          ^\n/tmp/tmp2jt30mjb.swift:35:27: note: found candidate with type '((UnboundedRang"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  return\
    \ sort_by_len(lst) { x, y in\n    if x.count > y.count {\n      true\n    } else\
    \ {\n      false\n    }\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpp2v63fq2.swift:18:10: error: cannot find 'sort_by_len' in scope\n\
    \  return sort_by_len(lst) { x, y in\n         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newArray = [String]()\n\n    for s in lst {\n        var sum = 0\n        for\
    \ _ in s.unicodeScalars {\n            sum += utf8.RuneCountInString(unicodeScalars[_])\n\
    \        }\n        if sum % 2 != 0 {\n            newArray.append(s)\n      \
    \  }\n    }\n    return newArray.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmparph_tlm.swift:23:20: error: cannot find 'utf8' in scope\n    \
    \        sum += utf8.RuneCountInString(unicodeScalars[_])\n                  \
    \ ^~~~\n/tmp/tmparph_tlm.swift:23:43: error: cannot find 'unicodeScalars' in scope\n\
    \            sum += utf8.RuneCountInString(unicodeScalars[_])\n              \
    \                            ^~~~~~~~~~~~~~\n/tmp/tmparph_tlm.swift:23:58: error:\
    \ '_' can only appear in a pattern or on the left side of an assignment\n    \
    \        sum += utf8.RuneCountInString(unicodeScalars[_])\n                  \
    \                                       ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.count == 0 {\n        return nil\n    }\n\n    var result = lst\n    let\
    \ l = lst[0]\n    for i in 1..<lst.count {\n        if result[i-1].characters.count\
    \ == l[i-1].characters.count {\n            result[i-1] += l[i]\n        } else\
    \ {\n            result = result.sorted()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpic40mrzm.swift:19:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmpic40mrzm.swift:25:45:\
    \ error: no exact matches in call to subscript \n        if result[i-1].characters.count\
    \ == l[i-1].characters.count {\n                                            ^\n\
    Swift.String:3:12: note: candidate expects value of type 'Range<String.Index>'\
    \ for parameter #1 (got 'Int')\n    public subscript(r: Range<String.Index>) ->\
    \ Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n/tmp/tmpic40mrzm.swift:26:29: error: no exact matches\
    \ in call to subscript \n            result[i-1] += l[i]\n                   \
    \         ^\nSwift.String:3:12: note: candidate expects value of type 'Range<String.Index>'\
    \ for parameter #1 (got 'Int')\n    public subscript(r: Range<String.Index>) ->\
    \ Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ sorted(lst, by: { $0.length > $1.length })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwahuz1em.swift:18:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(lst, by: { $0.length > $1.length })\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ s = \"\"\n    for elem in lst {\n        s += elem\n    }\n    let wordArray\
    \ = s.split(separator: \" \").map(String.init)\n    let words = wordArray.sorted(by:\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    \    return words.flatMap({ $0 }).sorted(by: { (word1, word2) -> Bool in\n   \
    \     return word1 < word2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp6tra_h5p/tmp6tra_h5p.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b739dfb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b739dcafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b739dcaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b739dcae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6tra_h5p                        0x00005561d9444b06 <unavailable> + 6918

    5    libc.so.6                          0x00002b739e1a4460 __libc_start_main +
    245

    6    tmp6tra_h5p                        0x00005561d9444689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  var result\
    \ = lst[:]\n  for index in 0..<result.count {\n    var word = result[index]\n\
    \    index = index + 1\n    if index == result.count {\n      continue\n    }\n\
    \    for index in 0..<result.count {\n      if index == index+1 {\n        continue\n\
    \      }\n      if result[index].characters.count == word.characters.count {\n\
    \        result[index] = word\n        break\n      }\n    }\n  }\n  return result.sorted\
    \ { $0.characters.count > $1.characters.count }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmphytsdh9v.swift:18:20: error: expected expression in list of expressions\n\
    \  var result = lst[:]\n                   ^\n/tmp/tmphytsdh9v.swift:18:21: error:\
    \ missing argument for parameter #1 in call\n  var result = lst[:]\n         \
    \           ^\n                    <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)'\
    \ declared here\n    @inlinable public subscript(index: Int) -> Element { get\
    \ set }\n                      ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sortedSet = lst.sorted { $0.count > $1.count }\n    let res = sortedSet.map\
    \ { word in lst.filter { word != $0 }.sorted { $0 < $1 } }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4av8_9dk.swift:20:12: error: cannot convert return expression of\
    \ type '[[String]]' to return type '[String]'\n    return res\n           ^\n\
    /tmp/tmp4av8_9dk.swift:20:12: note: arguments to generic parameter 'Element' ('[String]'\
    \ and 'String') are expected to be equal\n    return res\n           ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ set = Set<String>()\n    let sorted = Set(lst).sorted { $0.count < $1.count\
    \ }\n    var result = sorted\n    for word in sorted {\n        if set.contains(word)\
    \ {\n            sorted.remove(word)\n        } else {\n            set.insert(word)\n\
    \        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwjkji7f7.swift:23:20: error: no exact matches in call to instance\
    \ method 'remove'\n            sorted.remove(word)\n                   ^\n/tmp/tmpwjkji7f7.swift:23:20:\
    \ note: found candidate with type '(Int) -> String'\n            sorted.remove(word)\n\
    \                   ^\n/tmp/tmpwjkji7f7.swift:25:17: error: cannot use mutating\
    \ member on immutable value: 'set' is a 'let' constant\n            set.insert(word)\n\
    \            ~~~ ^\n/tmp/tmpwjkji7f7.swift:18:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let set = Set<String>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr: [String] = []\n    for element in lst {\n        if arr.count < 1 || element.count\
    \ != arr[0].count {\n            arr.append(element)\n        } else {\n     \
    \       arr[0] = element\n        }\n    }\n    return arr.sorted(by: {$0.count\
    \ < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxisvb8lq/tmpxisvb8lq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadbbaf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadbb7eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadbb7ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadbb7ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxisvb8lq                        0x000055e92f53a8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aadbbce3460 __libc_start_main +
    245

    6    tmpxisvb8lq                        0x000055e92f53a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  var sorted:\
    \ [[String]] = []\n  var j = 0\n  for i = 0; i < lst.count; i++) {\n    if j <\
    \ lst.count {\n      sorted.append([])\n    }\n    if i >= lst.count {\n     \
    \ continue\n    }\n    let str = lst[i]\n    let length = str.length\n    if length%2\
    \ == 1 {\n      sorted[j] = sorted[j] + [str]\n      j += 1\n    }\n  }\n  return\
    \ sorted.sorted(by: { $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqtsd4ox4.swift:20:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 0; i < lst.count; i++) {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqtsd4ox4.swift:34:17: error: cannot convert return expression of type\
    \ '[[String]]' to return type '[String]'\n  return sorted.sorted(by: { $0.count\
    \ < $1.count })\n                ^\n/tmp/tmpqtsd4ox4.swift:34:17: note: arguments\
    \ to generic parameter 'Element' ('[String]' and 'String') are expected to be\
    \ equal\n  return sorted.sorted(by: { $0.count < $1.count })\n               \
    \ ^\n/tmp/tmpqtsd4ox4.swift:27:19: error: cannot find 'i' in scope\n    let str\
    \ = lst[i]\n                  ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Complete the function here.\n    var sum = 0\n    for elem in lst {\n      \
    \  sum += elem.length\n    }\n    var newArray: [String] = []\n    for elem in\
    \ lst {\n        if elem.length != sum {\n            newArray.append(elem)\n\
    \        }\n    }\n    newArray.sort()\n    return newArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpw29hv8hp.swift:21:21: error: value of type 'String' has no member\
    \ 'length'\n        sum += elem.length\n               ~~~~ ^~~~~~\n/tmp/tmpw29hv8hp.swift:25:17:\
    \ error: value of type 'String' has no member 'length'\n        if elem.length\
    \ != sum {\n           ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ set = Set()\n    for x in lst {\n        if set.contains(x) {\n            return\
    \ lst\n        } else {\n            set.add(x)\n        }\n    }\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpodu4nlzd.swift:18:15: error: generic parameter 'Element' could\
    \ not be inferred\n    let set = Set()\n              ^\n/tmp/tmpodu4nlzd.swift:18:15:\
    \ note: explicitly specify the generic arguments to fix this issue\n    let set\
    \ = Set()\n              ^\n                 <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ res = [String]()\n    var i = 0\n    for el in lst {\n        if i % 2 == 0\
    \ {\n            res.append(el)\n        } else {\n            while i < lst.count\
    \ && lst[i].characters.count < el.characters.count {\n                i += 1\n\
    \            }\n            if i != lst.count {\n                res.insert(el,\
    \ at: i)\n            } else {\n                res.insert(el, at: 0)\n      \
    \      }\n        }\n        i += 1\n    }\n    return res.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplj9b3arm.swift:22:17: error: cannot use mutating member on immutable\
    \ value: 'res' is a 'let' constant\n            res.append(el)\n            ~~~\
    \ ^\n/tmp/tmplj9b3arm.swift:18:5: note: change 'let' to 'var' to make it mutable\n\
    \    let res = [String]()\n    ^~~\n    var\n/tmp/tmplj9b3arm.swift:24:43: error:\
    \ 'characters' is unavailable: Please use String directly\n            while i\
    \ < lst.count && lst[i].characters.count < el.characters.count {\n           \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplj9b3arm.swift:24:65: error: 'characters' is unavailable:\
    \ Please use String directly\n            while i < lst.count && lst[i].characters.count\
    \ < el.characters.count {\n                                                  \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmplj9b3arm.swift:28:21: error: cannot use mutating member on immutable\
    \ value: 'res' is a 'let' constant\n                res.insert(el, at: i)\n  \
    \              ~~~ ^\n/tmp/tmplj9b3arm.swift:18:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let res = [String]()\n    ^~~\n    var\n/tmp/tmplj9b3arm.swift:30:21:\
    \ error: cannot use mutating member on immutable value: 'res' is a 'let' constant\n\
    \                res.insert(el, at: 0)\n                ~~~ ^\n/tmp/tmplj9b3arm.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = [String]()\n \
    \   ^~~\n    var\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ output = [String]()\n    var total = 0\n    for s in lst {\n        if s.count\
    \ % 2 == 0 {\n            output += s\n        }\n    }\n    sort.SliceByString(output,\
    \ func(i, j int) bool {\n        if total%2 == 0 {\n            return s[i].count\
    \ > s[j].count\n        } else {\n            return s[i].count < s[j].count\n\
    \        }\n    })\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp__hczgqc.swift:25:32: error: expected expression in list of expressions\n\
    \    sort.SliceByString(output, func(i, j int) bool {\n                      \
    \         ^\n/tmp/tmp__hczgqc.swift:25:36: error: expected identifier in function\
    \ declaration\n    sort.SliceByString(output, func(i, j int) bool {\n        \
    \                           ^\n/tmp/tmp__hczgqc.swift:22:20: error: operator function\
    \ '+=' requires the types 'String' and 'String.Element' (aka 'Character') be equivalent\n\
    \            output += s\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n/tmp/tmp__hczgqc.swift:25:5: error: cannot find\
    \ 'sort' in scope\n    sort.SliceByString(output, func(i, j int) bool {\n    ^~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted = [String]()\n    for word in lst {\n        sorted.append(word)\n  \
    \  }\n    sorted.sort()\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpq8orzwhr/tmpq8orzwhr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5f6d20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5f6a17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5f6a17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5f6a167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8orzwhr                        0x0000561af51e7886 <unavailable> + 6278

    5    libc.so.6                          0x00002ac5f6f0c460 __libc_start_main +
    245

    6    tmpq8orzwhr                        0x0000561af51e7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ counts = [Int]()\n    var result: [String] = []\n    for s in lst {\n      \
    \  let c = counts[s.count]\n        if c == 0 {\n            result.append(s)\n\
    \        } else if c != 1 {\n            result.sortInPlace()\n        }\n   \
    \     counts[s.count]++\n    }\n    return result.sortInPlace()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8b6ejf4e.swift:25:20: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n            result.sortInPlace()\n            ~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmp8b6ejf4e.swift:27:24: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        counts[s.count]++\n                       ^~\n/tmp/tmp8b6ejf4e.swift:29:19:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    return result.sortInPlace()\n\
    \           ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newArray: [String] = []\n    var newLength = 0\n    for word in lst {\n    \
    \    if word.characters.count % 2 != 0 {\n            newArray.append(word)\n\
    \        } else {\n            newLength += word.characters.count\n        }\n\
    \    }\n    var sortedArray: [String] = []\n    for word in newArray {\n     \
    \   if word.characters.count >= newLength {\n            sortedArray.append(word)\n\
    \        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmptjh42lm_.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 != 0 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptjh42lm_.swift:24:31:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ newLength += word.characters.count\n                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptjh42lm_.swift:29:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ >= newLength {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    for index in lst.indices {\n        let str = lst[index]\n  \
    \      let size = str.characters.count\n        if size % 2 == 1 {\n         \
    \   let index = lst.index(of: str)\n            if index != lst.startIndex {\n\
    \                lst.remove(at: index)\n            }\n        }\n    }\n    return\
    \ res.sorted(by: { $0.characters.count < $1.characters.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpzn768lqc.swift:21:24: error: 'characters' is unavailable: Please\
    \ use String directly\n        let size = str.characters.count\n             \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpzn768lqc.swift:23:29: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n            let index = lst.index(of: str)\n            \
    \                ^\n/tmp/tmpzn768lqc.swift:23:29: note: use 'firstIndex(of:)'\
    \ instead\n            let index = lst.index(of: str)\n                      \
    \      ^~~~~\n                            firstIndex\n/tmp/tmpzn768lqc.swift:25:21:\
    \ error: no exact matches in call to instance method 'remove'\n              \
    \  lst.remove(at: index)\n                    ^\n/tmp/tmpzn768lqc.swift:25:21:\
    \ note: found candidate with type '(Int) -> String'\n                lst.remove(at:\
    \ index)\n                    ^\n/tmp/tmpzn768lqc.swift:29:32: error: 'characters'\
    \ is unavailable: Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzn768lqc.swift:29:54: error: 'characters'\
    \ is unavailable: Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                                                 \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  \n  return\
    \ lst.reduce(into: [String]()) { result, word in\n    var currentWordIndex = 0\n\
    \    while currentWordIndex < result.count {\n      let currentWord = result[(currentWordIndex\
    \ + 1)]\n      guard word.length <= currentWord.length else { continue }\n   \
    \   \n      if word.length > currentWord.length {\n        // if current word\
    \ is longer, append current word to result\n        result[currentWordIndex] =\
    \ word\n        currentWordIndex += 1\n      } else if word.length == currentWord.length\
    \ {\n        // if current word is same length, compare the letters\n        if\
    \ word[currentWordIndex] < currentWord[currentWordIndex] {\n          result.remove(at:\
    \ currentWordIndex)\n          result[currentWordIndex] = word\n          currentWordIndex\
    \ += 1\n        } else if word[currentWordIndex] > currentWord[currentWordIndex]\
    \ {\n          result.remove(at: currentWordIndex)\n          result[(currentWordIndex\
    \ + 1)] = word\n          currentWordIndex += 1\n        } else {\n          result.remove(at:\
    \ currentWordIndex)\n          result[currentWordIndex] = word\n          currentWordIndex\
    \ += 1\n          break\n        }\n      } else {\n        result.remove(at:\
    \ currentWordIndex)\n        break\n      }\n    }\n    \n    guard result.count\
    \ > currentWordIndex else {\n      result.insert(word, at: currentWordIndex)\n\
    \      currentWordIndex += 1\n    }\n    \n    guard result.count > currentWordIndex\
    \ else { return }\n    \n    if result.count <= currentWordIndex { result.append(word)\
    \ }\n  }\n  \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpadzoi7kf.swift:23:18: error: value of type 'String' has no member\
    \ 'length'\n      guard word.length <= currentWord.length else { continue }\n\
    \            ~~~~ ^~~~~~\n/tmp/tmpadzoi7kf.swift:23:40: error: value of type 'String'\
    \ has no member 'length'\n      guard word.length <= currentWord.length else {\
    \ continue }\n                           ~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newlst = [String]()\n    for str in lst {\n        for (i, s) in enumerate(newlst)\
    \ {\n            if str.characters.count < newlst[i].characters.count {\n    \
    \            newlst[i] = s\n            }\n        }\n        newlst.append(str)\n\
    \    }\n    for str in newlst {\n        if str.characters.count % 2 == 1 {\n\
    \            newlst.remove(str) // remove odd-length strings\n        }\n    }\n\
    \    newlst.sortInPlace()\n    return newlst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5iowgtbf.swift:20:23: error: cannot find 'enumerate' in scope\n\
    \        for (i, s) in enumerate(newlst) {\n                      ^~~~~~~~~\n\
    /tmp/tmp5iowgtbf.swift:28:16: error: 'characters' is unavailable: Please use String\
    \ directly\n        if str.characters.count % 2 == 1 {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5iowgtbf.swift:29:20:\
    \ error: no exact matches in call to instance method 'remove'\n            newlst.remove(str)\
    \ // remove odd-length strings\n                   ^\n/tmp/tmp5iowgtbf.swift:29:20:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            newlst.remove(str) // remove odd-length strings\n               \
    \    ^\n/tmp/tmp5iowgtbf.swift:29:20: note: candidate expects value of type 'Array<String>.Index'\
    \ (aka 'Int') for parameter #1 (got 'String')\n            newlst.remove(str)\
    \ // remove odd-length strings\n                   ^\n/tmp/tmp5iowgtbf.swift:32:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    newlst.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ len = lst.count\n    var res = \"\"\n    for str in lst {\n        if str.characters.count\
    \ % 2 == 1 {\n            let temp = str\n            if str.characters.count\
    \ > res {\n                res = str.characters.count\n            }\n       \
    \ }\n    }\n    var lst2 = []\n    for i in 0..<res {\n        let str1 = str.prefix(2)\n\
    \        let str2 = str.suffix(2)\n        if str1 > str2 {\n            let temp\
    \ = str1\n            str1 = str2\n            str2 = temp\n        }\n      \
    \  lst2.append(str1)\n    }\n    return lst2.sorted(by: { (s1, s2) -> Bool in\n\
    \        return s1 > s2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0z5rn2gm.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        if str.characters.count % 2 == 1 {\n          \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp0z5rn2gm.swift:23:37:\
    \ error: binary operator '>' cannot be applied to operands of type 'Int' and 'String'\n\
    \            if str.characters.count > res {\n               ~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~\n/tmp/tmp0z5rn2gm.swift:23:37: note: overloads for '>' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            if str.characters.count\
    \ > res {\n                                    ^\n/tmp/tmp0z5rn2gm.swift:24:38:\
    \ error: cannot assign value of type 'Int' to type 'String'\n                res\
    \ = str.characters.count\n                      ~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp0z5rn2gm.swift:28:16:\
    \ error: empty collection literal requires an explicit type\n    var lst2 = []\n\
    \               ^~\n/tmp/tmp0z5rn2gm.swift:29:18: error: cannot convert value\
    \ of type 'String' to expected argument type 'Int'\n    for i in 0..<res {\n \
    \                ^\n/tmp/tmp0z5rn2gm.swift:40:19: error: binary operator '>' cannot\
    \ be applied to two 'Any' operands\n        return s1 > s2\n               ~~\
    \ ^ ~~\n/tmp/tmp0z5rn2gm.swift:40:19: note: overloads for '>' exist with these\
    \ partially matching parameter lists: ((), ()), (Int, Int), (Int16, Int16), (Int32,\
    \ Int32), (Int64, Int64), (Int8, Int8), (TaskPriority, TaskPriority), (UInt, UInt),\
    \ (UInt16, UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8)\n     \
    \   return s1 > s2\n                  ^\n/tmp/tmp0z5rn2gm.swift:39:17: error:\
    \ cannot convert return expression of type '[Any]' to return type '[String]'\n\
    \    return lst2.sorted(by: { (s1, s2) -> Bool in\n                ^\n/tmp/tmp0z5rn2gm.swift:39:17:\
    \ note: arguments to generic parameter 'Element' ('Any' and 'String') are expected\
    \ to be equal\n    return lst2.sorted(by: { (s1, s2) -> Bool in\n            \
    \    ^\n/tmp/tmp0z5rn2gm.swift:30:20: error: cannot find 'st"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.length > 1 {\n \
    \           result.append(word)\n        }\n    }\n    for word in result {\n\
    \        for other in result {\n            if word != other {\n             \
    \   if word.length < other.length {\n                    result.remove(word)\n\
    \                } else {\n                    result.remove(other)\n        \
    \        }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp54hkoij1.swift:20:17: error: value of type 'String' has no member\
    \ 'length'\n        if word.length > 1 {\n           ~~~~ ^~~~~~\n/tmp/tmp54hkoij1.swift:27:25:\
    \ error: value of type 'String' has no member 'length'\n                if word.length\
    \ < other.length {\n                   ~~~~ ^~~~~~\n/tmp/tmp54hkoij1.swift:27:40:\
    \ error: value of type 'String' has no member 'length'\n                if word.length\
    \ < other.length {\n                                 ~~~~~ ^~~~~~\n/tmp/tmp54hkoij1.swift:28:28:\
    \ error: no exact matches in call to instance method 'remove'\n              \
    \      result.remove(word)\n                           ^\n/tmp/tmp54hkoij1.swift:28:28:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \                    result.remove(word)\n                           ^\n/tmp/tmp54hkoij1.swift:28:28:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n                    result.remove(word)\n     \
    \                      ^\n/tmp/tmp54hkoij1.swift:30:28: error: no exact matches\
    \ in call to instance method 'remove'\n                    result.remove(other)\n\
    \                           ^\n/tmp/tmp54hkoij1.swift:30:28: note: candidate expects\
    \ value of type 'Int' for parameter #1 (got 'String')\n                    result.remove(other)\n\
    \                           ^\n/tmp/tmp54hkoij1.swift:30:28: note: candidate expects\
    \ value of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \                    result.remove(other)\n                           ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted { (word1: String, word2: String) in\n        return word1.characters.count\
    \ == word2.characters.count ? word1.characters.compare(word2.characters) : word1.characters.count\
    \ < word2.characters.count ? -1 : 1;\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfzak7i64.swift:19:84: error: value of type 'String' has no member\
    \ 'compare'\n        return word1.characters.count == word2.characters.count ?\
    \ word1.characters.compare(word2.characters) : word1.characters.count < word2.characters.count\
    \ ? -1 : 1;\n                                                                \
    \  ~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.count == 0 {\n        return []\n    }\n\n    var sortedStrings: [String]\
    \ = []\n    for i in 0..<lst.count {\n        if sortedStrings.count == i {\n\
    \            if sortedStrings[i].count < lst[i].count {\n                sortedStrings.append(lst[i])\n\
    \            } else {\n                sortedStrings.append(sortedStrings[i])\n\
    \            }\n        } else {\n            if sortedStrings.count == i {\n\
    \                sortedStrings.append(sortedStrings[i])\n            } else {\n\
    \                if sortedStrings[i].count < lst[i].count {\n                \
    \    sortedStrings.insert(i, lst[i])\n                } else {\n             \
    \       sortedStrings.insert(i, sortedStrings[i])\n                    sortedStrings.append(lst[i])\n\
    \                }\n            }\n        }\n    }\n\n    return sortedStrings\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpq7qzg02p.swift:35:41: error: missing argument labels 'contentsOf:at:'\
    \ in call\n                    sortedStrings.insert(i, lst[i])\n             \
    \                           ^\n                                         contentsOf:\
    \  at: \n/tmp/tmpq7qzg02p.swift:35:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'Array<String>.Index' (aka 'Int')\n              \
    \      sortedStrings.insert(i, lst[i])\n                                     \
    \          ^\n/tmp/tmpq7qzg02p.swift:35:21: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n                    sortedStrings.insert(i,\
    \ lst[i])\n                    ^\nSwift.RangeReplaceableCollection:7:37: note:\
    \ where 'C' = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf\
    \ newElements: __owned C, at i: Self.Index) where C : Collection, Self.Element\
    \ == C.Element\n                                    ^\n/tmp/tmpq7qzg02p.swift:37:21:\
    \ error: instance method 'insert(contentsOf:at:)' requires that 'Int' conform\
    \ to 'Collection'\n                    sortedStrings.insert(i, sortedStrings[i])\n\
    \                    ^\nSwift.RangeReplaceableCollection:7:37: note: where 'C'\
    \ = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf newElements:\
    \ __owned C, at i: Self.Index) where C : Collection, Self.Element == C.Element\n\
    \                                    ^\n/tmp/tmpq7qzg02p.swift:37:41: error: missing\
    \ argument labels 'contentsOf:at:' in call\n                    sortedStrings.insert(i,\
    \ sortedStrings[i])\n                                        ^\n             \
    \                            contentsOf:  at: \n/tmp/tmpq7qzg02p.swift:37:58:\
    \ error: cannot convert value of type 'String' to expected argument type 'Array<String>.Index'\
    \ (aka 'Int')\n                    sortedStrings.insert(i, sortedStrings[i])\n\
    \                                                         ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ copy = lst\n    copy.sort { (a, b) -> Bool in\n        guard let a = a.count\
    \ else {\n            return false\n        }\n        guard let b = b.count else\
    \ {\n            return false\n        }\n        return a.compare(b) == .orderedAscending\n\
    \    }\n    return copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnm82_cne.swift:26:18: error: value of type 'Int' has no member\
    \ 'compare'\n        return a.compare(b) == .orderedAscending\n              \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sortedList = [String]()\n    var sortedArray = [String]()\n    guard let myList\
    \ = lst else {\n        return sortedArray\n    }\n    guard !myList.isEmpty else\
    \ {\n        return sortedArray\n    }\n    let mySet = Set(myList)\n    mySet.forEach\
    \ {\n        sortedList.append($0)\n    }\n    sortedArray.sortInPlace({ (l1,\
    \ l2) -> Bool in\n        return l1.length < l2.length\n    })\n    sortedArray.sortInPlace({\
    \ (l1, l2) -> Bool in\n        return l1 < l2\n    })\n    return sortedList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqljfuuq8.swift:20:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String]'\n    guard let myList = lst else {\n\
    \          ^            ~~~\n/tmp/tmpqljfuuq8.swift:30:17: error: value of type\
    \ '[String]' has no member 'sortInPlace'\n    sortedArray.sortInPlace({ (l1, l2)\
    \ -> Bool in\n    ~~~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpqljfuuq8.swift:33:17: error:\
    \ value of type '[String]' has no member 'sortInPlace'\n    sortedArray.sortInPlace({\
    \ (l1, l2) -> Bool in\n    ~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Write your code here.\n    var arr:[String] = []\n    for word in lst {\n  \
    \      if arr == [] {\n            arr = word\n        } else {\n            if\
    \ word.count > arr[0].count {\n                arr = word\n            }\n   \
    \     }\n    }\n    var new_arr:[String] = []\n    for word in arr {\n       \
    \ if word.count % 2 == 1 {\n            new_arr.append(word)\n        }\n    }\n\
    \    new_arr.sort()\n    return new_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9cr5ddyx.swift:22:19: error: cannot assign value of type 'String'\
    \ to type '[String]'\n            arr = word\n                  ^~~~\n/tmp/tmp9cr5ddyx.swift:25:23:\
    \ error: cannot assign value of type 'String' to type '[String]'\n           \
    \     arr = word\n                      ^~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ sorted(lst, compareByLength())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsrwizgmj.swift:18:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(lst, compareByLength())\n           ^~~~~~\n/tmp/tmpsrwizgmj.swift:18:24:\
    \ error: cannot find 'compareByLength' in scope\n    return sorted(lst, compareByLength())\n\
    \                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ summedList = lst\n    summedList.sort(by: { $0.count < $1.count })\n    summedList.sort(by:\
    \ { $0.count > $1.count })\n    summedList.sort { $0 < $1 }\n    return summedList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpssyflggl/tmpssyflggl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b150146bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1501162b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1501162988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15011617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpssyflggl                        0x0000555713b46676 <unavailable> + 5750

    5    libc.so.6                          0x00002b1501657460 __libc_start_main +
    245

    6    tmpssyflggl                        0x0000555713b461f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lstSorted = [String]()\n    var count = [Int]()\n    for word in lst {\n   \
    \     lstSorted.append(word)\n        count[word] = count.index(word)! + 1\n \
    \   }\n    var i = 0\n    while i < count.count {\n        if count[i] % 2 ==\
    \ 0 {\n            for word in lstSorted {\n                if count[i] == count[word]\
    \ {\n                    lstSorted.remove(word)\n                }\n         \
    \   }\n        }\n        i += 1\n    }\n    lstSorted.sortInPlace()\n    return\
    \ lstSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp6x9wt9a7.swift:22:29: error: no exact matches in call to instance\
    \ method 'index'\n        count[word] = count.index(word)! + 1\n             \
    \               ^\n/tmp/tmp6x9wt9a7.swift:22:29: note: candidate expects value\
    \ of type '(Int) throws -> Bool' for parameter #1 (got 'String')\n        count[word]\
    \ = count.index(word)! + 1\n                            ^\n/tmp/tmp6x9wt9a7.swift:22:29:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \        count[word] = count.index(word)! + 1\n                            ^\n\
    /tmp/tmp6x9wt9a7.swift:22:15: error: cannot convert value of type 'String' to\
    \ expected argument type 'Int'\n        count[word] = count.index(word)! + 1\n\
    \              ^\n/tmp/tmp6x9wt9a7.swift:28:38: error: cannot convert value of\
    \ type 'String' to expected argument type 'Int'\n                if count[i] ==\
    \ count[word] {\n                                     ^\n/tmp/tmp6x9wt9a7.swift:29:31:\
    \ error: no exact matches in call to instance method 'remove'\n              \
    \      lstSorted.remove(word)\n                              ^\n/tmp/tmp6x9wt9a7.swift:29:31:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \                    lstSorted.remove(word)\n                              ^\n\
    /tmp/tmp6x9wt9a7.swift:29:31: note: candidate expects value of type 'Array<String>.Index'\
    \ (aka 'Int') for parameter #1 (got 'String')\n                    lstSorted.remove(word)\n\
    \                              ^\n/tmp/tmp6x9wt9a7.swift:35:15: error: value of\
    \ type '[String]' has no member 'sortInPlace'\n    lstSorted.sortInPlace()\n \
    \   ~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var newLst = [String]()\n    var i = 0\n    for word\
    \ in lst {\n        newLst.append(\"\\(word) \")\n        i += 1\n    }\n    for\
    \ word in newLst {\n        var temp = word.characters.count\n        for a in\
    \ 0..<i {\n            if word.characters.count > newLst[a].characters.count {\n\
    \                temp = newLst[a].characters.count\n            }\n          \
    \  if word.characters.count == newLst[a].characters.count {\n                if\
    \ word.characters.lowercased() > newLst[a].characters.lowercased() {\n       \
    \             temp = newLst[a].characters.lowercased()\n                }\n  \
    \          }\n        }\n        newLst.append(word)\n        result.append(String(temp))\n\
    \    }\n    newLst.sort(by: {$0.characters.count > $1.characters.count})\n   \
    \ newLst.sort(by: {$0.characters.lowercased() > $1.characters.lowercased()})\n\
    \    return newLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7txrs_ml.swift:26:25: error: 'characters' is unavailable: Please\
    \ use String directly\n        var temp = word.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp7txrs_ml.swift:28:21: error: 'characters' is unavailable: Please use String\
    \ directly\n            if word.characters.count > newLst[a].characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp7txrs_ml.swift:28:50: error: 'characters' is unavailable:\
    \ Please use String directly\n            if word.characters.count > newLst[a].characters.count\
    \ {\n                                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7txrs_ml.swift:29:34: error: 'characters'\
    \ is unavailable: Please use String directly\n                temp = newLst[a].characters.count\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7txrs_ml.swift:31:21: error: 'characters' is unavailable:\
    \ Please use String directly\n            if word.characters.count == newLst[a].characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp7txrs_ml.swift:31:51: error: 'characters' is unavailable:\
    \ Please use String directly\n            if word.characters.count == newLst[a].characters.count\
    \ {\n                                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7txrs_ml.swift:32:25: error: 'characters'\
    \ is unavailable: Please use String directly\n  "
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    let letters = Set(lst)\n    for s in lst {\n      \
    \  if letters.contains(s) {\n            result.append(s)\n        }\n    }\n\
    \    result.sort(by: {\n        (a, b) -> Bool in\n        if a.characters.count\
    \ == b.characters.count {\n            return a < b\n        }\n        return\
    \ a.characters.count < b.characters.count\n    })\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpanmbd7fg.swift:27:14: error: 'characters' is unavailable: Please\
    \ use String directly\n        if a.characters.count == b.characters.count {\n\
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpanmbd7fg.swift:27:36: error: 'characters' is unavailable: Please\
    \ use String directly\n        if a.characters.count == b.characters.count {\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpanmbd7fg.swift:30:18: error: 'characters' is unavailable:\
    \ Please use String directly\n        return a.characters.count < b.characters.count\n\
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpanmbd7fg.swift:30:39: error: 'characters' is unavailable: Please\
    \ use String directly\n        return a.characters.count < b.characters.count\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ sort the list by length, and sort it by alphabetically\n    let sortedList =\
    \ lst.sorted(by: { word1, word2 in word1.count < word2.count })\n    return sortedList.sorted(by:\
    \ { word1, word2 in word1 < word2 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpu555_5cm/tmpu555_5cm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af785d52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af785a49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af785a49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af785a487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu555_5cm                        0x0000558e78b89666 <unavailable> + 5734

    5    libc.so.6                          0x00002af785f3e460 __libc_start_main +
    245

    6    tmpu555_5cm                        0x0000558e78b891e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n\n    func even(_ items: [String]) -> Bool {\n      \
    \  return items.filter({ $0.characters.count % 2 == 0 }).count == 0\n    }\n\n\
    \    func evenSorted(_ items: [String]) -> [String] {\n        return items.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n    }\n\n    func merge(_ left:\
    \ [String], _ right: [String]) -> [String] {\n        return left + right\n  \
    \  }\n\n    func mergeSort(_ items: [String]) -> [String] {\n        if items.count\
    \ <= 1 {\n            return items\n        }\n\n        let middle = items.count\
    \ / 2\n        let left = items.firstIndex(of: items[middle])!\n        let right\
    \ = items.lastIndex(of: items[middle])!\n\n        guard left < right else {\n\
    \            return items\n        }\n\n        let mergedItems = mergeSort(Array(items[..<right]))\n\
    \        let mergedLeft = mergeSort(Array(items[left..<middle]))\n        let\
    \ mergedRight = mergeSort(Array(items[right..<]))\n\n        return merge(mergedItems,\
    \ mergedLeft) + merge(mergedRight, mergedItems)\n    }\n\n    let mergedItems\
    \ = mergeSort(lst)\n\n    for item in mergedItems {\n        if even(item) {\n\
    \            result.append(item)\n        }\n    }\n\n    return evenSorted(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp21owdud1.swift:21:34: error: 'characters' is unavailable: Please\
    \ use String directly\n        return items.filter({ $0.characters.count % 2 ==\
    \ 0 }).count == 0\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp21owdud1.swift:25:38: error: 'characters'\
    \ is unavailable: Please use String directly\n        return items.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp21owdud1.swift:25:60: error: 'characters' is unavailable: Please use String\
    \ directly\n        return items.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n                                                           ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp21owdud1.swift:47:54:\
    \ error: '..<' is not a postfix unary operator\n        let mergedRight = mergeSort(Array(items[right..<]))\n\
    \                                                     ^\n/tmp/tmp21owdud1.swift:55:17:\
    \ error: cannot convert value of type 'String' to expected argument type '[String]'\n\
    \        if even(item) {\n                ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ newArray = lst.sorted()\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp1_cbmuz0/tmp1_cbmuz0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80e2cb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80e29aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80e29ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80e29ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_cbmuz0                        0x000055c9620d95e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b80e2ea3460 __libc_start_main +
    245

    6    tmp1_cbmuz0                        0x000055c9620d9169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    // Sort list alphabetically\n    let sorted = lst.sorted()\n\n    // Remove\
    \ odd strings\n    var oddStrings = [String]()\n    sorted.enumerated().forEach{\n\
    \        let index = $0.0\n        if index % 2 != 0{\n            oddStrings.append(sorted.remove(at:\
    \ index))\n        }\n    }\n    \n    // Sort list\n    let sortedList = oddStrings\
    \ + sorted\n\n    // Return sorted list\n    return sortedList\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2ue8oq8x.swift:27:38: error: cannot use mutating member on immutable\
    \ value: 'sorted' is a 'let' constant\n            oddStrings.append(sorted.remove(at:\
    \ index))\n                              ~~~~~~ ^\n/tmp/tmp2ue8oq8x.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sorted = lst.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  var res\
    \ = [String]()\n  for word in lst {\n    if word.characters.count % 2 == 1 {\n\
    \      res.append(word)\n    }\n  }\n  return res.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpus5ku0hu.swift:20:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if word.characters.count % 2 == 1 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ n = lst.count\n    var result = Array(0..n).map { _ in \"\" }\n    for x in\
    \ lst {\n        guard result.count > x else { return result }\n        result[x]\
    \ = result[x] + x\n    }\n    var newresult = [String]()\n    for x in result\
    \ {\n        newresult.append(x)\n    }\n    return newresult\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2aasq3wh.swift:19:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    var result = Array(0..n).map { _ in \"\" }\n      \
    \                  ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr: [String] = []\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 != 0 {\n            arr.append(word)\n        }\n    }\n    for word in\
    \ arr {\n        i = i + 1\n    }\n    return arr.sorted(by: >)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpr47rzqhk.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 != 0 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpr47rzqhk.swift:25:9:\
    \ warning: immutable value 'word' was never used; consider replacing with '_'\
    \ or removing it\n    for word in arr {\n        ^~~~\n        _\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ words = [String]()\n    for s in lst {\n        let str = s.toInt()!\n     \
    \   if words[str] == nil {\n            words[str] = str\n        } else {\n \
    \           words[str] = str + words[str]\n        }\n    }\n    return Array(words).sorted(by:\
    \ >)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4mrz254_.swift:20:21: error: value of type 'String' has no member\
    \ 'toInt'\n        let str = s.toInt()!\n                  ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newArr: [String] = []\n    for word in lst {\n        if word.count % 2 == 1\
    \ {\n            newArr.append(word)\n        } else {\n            newArr = newArr.sorted\
    \ { (str1, str2) -> Bool in\n                return str1.count > str2.count\n\
    \            }\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp998s_60g/tmp998s_60g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4add677c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4add36eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4add36e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4add36d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp998s_60g                        0x000055d2dcbfb866 <unavailable> + 6246

    5    libc.so.6                          0x00002b4add863460 __libc_start_main +
    245

    6    tmp998s_60g                        0x000055d2dcbfb3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newlst = [String]()\n    for i := 0; i < lst.count; i++ {\n        for j :=\
    \ i + 1; j <= lst.count; j++ {\n            if lst[i].characters.count == lst[j].characters.count\
    \ {\n                if lst[i].characters.count > lst[j].characters.count {\n\
    \                    newlst = append(newlst, lst[j])\n                } else {\n\
    \                    newlst = append(newlst, lst[i])\n                }\n    \
    \        } else {\n                if lst[i].characters.count < lst[j].characters.count\
    \ {\n                    newlst = append(newlst, lst[i])\n                } else\
    \ {\n                    newlst = append(newlst, lst[j])\n                }\n\
    \            }\n        }\n    }\n    return newlst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpaw9nkd4j.swift:19:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpaw9nkd4j.swift:19:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmpaw9nkd4j.swift:19:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < lst.count; i++ {\n       \
    \    ^\n/tmp/tmpaw9nkd4j.swift:20:16: error: expected type\n        for j := i\
    \ + 1; j <= lst.count; j++ {\n               ^\n                <#type#>\n/tmp/tmpaw9nkd4j.swift:20:16:\
    \ error: expected 'in' after for-each pattern\n        for j := i + 1; j <= lst.count;\
    \ j++ {\n               ^\n/tmp/tmpaw9nkd4j.swift:20:16: error: expected Sequence\
    \ expression for for-each loop\n        for j := i + 1; j <= lst.count; j++ {\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ new_lst = lst.sorted{\n        guard $0.count > $1.count else {\n          \
    \  return true\n        }\n        return $0.count < $1.count\n    }\n    return\
    \ new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgkan8m5x/tmpgkan8m5x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1306550c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1306247b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1306247988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13062467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgkan8m5x                        0x000055cb51158606 <unavailable> + 5638

    5    libc.so.6                          0x00002b130673c460 __libc_start_main +
    245

    6    tmpgkan8m5x                        0x000055cb51158189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sort({ $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5sh0wq22.swift:18:21: error: missing argument label 'by:' in call\n\
    \    return lst.sort({ $0.count < $1.count })\n                    ^\n       \
    \             by: \n/tmp/tmp5sh0wq22.swift:18:16: error: cannot convert return\
    \ expression of type '()' to return type '[String]'\n    return lst.sort({ $0.count\
    \ < $1.count })\n           ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5sh0wq22.swift:18:16:\
    \ error: cannot use mutating member on immutable value: 'lst' is a 'let' constant\n\
    \    return lst.sort({ $0.count < $1.count })\n           ~~~ ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ unique = lst.filter { (val) -> (Bool) in\n        return !array.contains(val)\n\
    \    }\n    return unique.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzai3ju_k.swift:19:17: error: cannot find 'array' in scope\n   \
    \     return !array.contains(val)\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Your code here\n    return sorted(lst, by: { $0.count > $0.count })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpm8k074kp.swift:19:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(lst, by: { $0.count > $0.count })\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ arr =  lst.sorted(by: {\n        (word1: String, (word2: String) -> Bool) in\n\
    \        return word1.length < word2.length\n    })\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp9pv22boe.swift:19:26: error: function types cannot have argument\
    \ labels; use '_' before 'word2'\n        (word1: String, (word2: String) -> Bool)\
    \ in\n                         ^\n                         _ \n/tmp/tmp9pv22boe.swift:19:25:\
    \ warning: unnamed parameters must be written with the empty name '_'\n      \
    \  (word1: String, (word2: String) -> Bool) in\n                        ^\n  \
    \                      _: \n/tmp/tmp9pv22boe.swift:20:31: error: cannot find 'word2'\
    \ in scope\n        return word1.length < word2.length\n                     \
    \         ^~~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    \n    for s in lst {\n        if result.count == 0\
    \ {\n            result.append(s)\n        } else {\n            guard result.last\
    \ != s else {\n                result.insert(s, at: 0)\n                continue\n\
    \            }\n            let lastIndex = result.index(result.startIndex, offsetBy:\
    \ -1)\n            if lastIndex == result.count {\n                result.append(s)\n\
    \            } else {\n                let lastWord = result[lastIndex]\n    \
    \            if lastWord.count == s.count {\n                    result.remove(at:\
    \ lastIndex+1)\n                    result.insert(s, at: 0)\n                }\
    \ else {\n                    result.insert(s, at: lastIndex)\n              \
    \  }\n            }\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9b38ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c9b085561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c9b085286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c9b08513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c9b084bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c9ae84fc3 <unavailable> + 188355

    6    tmp18f5b431                        0x000056423ab4de25 <unavailable> + 11813

    7    tmp18f5b431                        0x000056423ab4ca5d <unavailable> + 6749

    8    libc.so.6                          0x00002b6c9b57a460 __libc_start_main +
    245

    9    tmp18f5b431                        0x000056423ab4c6d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: { ($0.characters.count < $1.characters.count) ? true : ($0.characters.count\
    \ > $1.characters.count) ? false : (($0.characters.count == $1.characters.count)\
    \ ? $0 < $1 : $0 > $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmprv4vs8rt.swift:18:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    return lst.sorted(by: { ($0.characters.count < $1.characters.count)\
    \ ? true : ($0.characters.count > $1.characters.count) ? false : (($0.characters.count\
    \ == $1.characters.count) ? $0 < $1 : $0 > $1) })\n                          \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprv4vs8rt.swift:18:55:\
    \ error: 'characters' is unavailable: Please use String directly\n    return lst.sorted(by:\
    \ { ($0.characters.count < $1.characters.count) ? true : ($0.characters.count\
    \ > $1.characters.count) ? false : (($0.characters.count == $1.characters.count)\
    \ ? $0 < $1 : $0 > $1) })\n                                                  \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprv4vs8rt.swift:18:86:\
    \ error: 'characters' is unavailable: Please use String directly\n    return lst.sorted(by:\
    \ { ($0.characters.count < $1.characters.count) ? true : ($0.characters.count\
    \ > $1.characters.count) ? false : (($0.characters.count == $1.characters.count)\
    \ ? $0 < $1 : $0 > $1) })\n                                                  \
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprv4vs8rt.swift:18:108: error: 'characters' is unavailable:\
    \ Please use String directly\n    return lst.sorted(by: { ($0.characters.count\
    \ < $1.characters.count) ? true : ($0.characters.count > $1.characters.count)\
    \ ? false : (($0.characters.count == $1.characters.count) ? $0 < $1 : $0 > $1)\
    \ })\n                                                                       \
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprv4vs8rt.swif"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        var newWords = word\n  \
    \      var count = 0\n        for char in newWords {\n            if char != \"\
    \ \" {\n                count++\n            }\n        }\n        if count %\
    \ 2 != 0 {\n            result.append(newWords)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpu7mwxyah.swift:24:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                count++\n                     ^~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ res = [String]()\n    let swift_list = lst.sort()\n    for word in swift_list\
    \ {\n        if res.count > 0 {\n            if res.count != word.count {\n  \
    \              res = res.sort()\n                res.append(word)\n          \
    \  } else {\n                if res[0] != word {\n                    res = res.sort()\n\
    \                    res.append(word)\n                }\n            }\n    \
    \    } else {\n            if word.count != 0 {\n                res.append(word)\n\
    \            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpen80b7qp.swift:19:26: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n    let swift_list = lst.sort()\n        \
    \             ~~~ ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.reduce([]) { $0 + [String($1.sorted())] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpbupku5ok/tmpbupku5ok.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e5bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e58cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e58cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e58cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbupku5ok                        0x000055c7eed7e756 <unavailable> + 5974

    5    libc.so.6                          0x00002b83e5dc2460 __libc_start_main +
    245

    6    tmpbupku5ok                        0x000055c7eed7e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ sort(lst, true, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpar9gqe7o.swift:18:12: error: cannot find 'sort' in scope\n    return\
    \ sort(lst, true, true)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted = [String]()\n    for i in lst {\n        for j in lst {\n          \
    \  if i != j {\n                if i.count < j.count {\n                    sorted\
    \ = sorted + [j]\n                } else {\n                    sorted = sorted\
    \ + [i]\n                }\n            }\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmps2r28k8y/tmps2r28k8y.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b974978fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9749486b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9749486988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97494857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2r28k8y                        0x00005605afe0c806 <unavailable> + 6150

    5    libc.so.6                          0x00002b974997b460 __libc_start_main +
    245

    6    tmps2r28k8y                        0x00005605afe0c389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp89flilxw/tmp89flilxw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af997e7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af997b73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af997b73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af997b727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89flilxw                        0x00005636b84cf546 <unavailable> + 5446

    5    libc.so.6                          0x00002af998068460 __libc_start_main +
    245

    6    tmp89flilxw                        0x00005636b84cf0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980049
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for str in lst {\n        if res.isEmpty {\n       \
    \     res.append(str)\n        } else {\n            if str.count < res[res.count-1].count\
    \ {\n                res.insert(res.count-1, str)\n            } else {\n    \
    \            res.insert(res.count, str)\n            }\n        }\n    }\n   \
    \ return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbzw7eiik.swift:24:27: error: missing argument labels 'contentsOf:at:'\
    \ in call\n                res.insert(res.count-1, str)\n                    \
    \      ^\n                           contentsOf:  at: \n/tmp/tmpbzw7eiik.swift:26:27:\
    \ error: missing argument labels 'contentsOf:at:' in call\n                res.insert(res.count,\
    \ str)\n                          ^\n                           contentsOf:  at:\
    \ \n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = ListNode<String>()\n    result.next = sorted_list_sum(lst, 0, result)\n\
    \    return result.next.data\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpe5dl3npt.swift:18:18: error: cannot find 'ListNode' in scope\n\
    \    var result = ListNode<String>()\n                 ^~~~~~~~\n/tmp/tmpe5dl3npt.swift:19:34:\
    \ error: extra arguments at positions #2, #3 in call\n    result.next = sorted_list_sum(lst,\
    \ 0, result)\n                                 ^\n/tmp/tmpe5dl3npt.swift:17:6:\
    \ note: 'sorted_list_sum(lst:)' declared here\nfunc sorted_list_sum(lst: [String])\
    \ -> [String] {\n     ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ strings: [String] = []\n\n    for str in lst {\n        if strings.count > 0\
    \ {\n            if str.length == strings[strings.count - 1].length {\n      \
    \          strings[strings.count - 1] += str\n            } else {\n         \
    \       strings.append(str)\n            }\n        } else {\n            strings.append(str)\n\
    \        }\n    }\n\n    strings.sort { (lhs, rhs) -> Bool in\n        if lhs.count\
    \ > rhs.count {\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvsjenc48.swift:22:20: error: value of type 'String' has no member\
    \ 'length'\n            if str.length == strings[strings.count - 1].length {\n\
    \               ~~~ ^~~~~~\n/tmp/tmpvsjenc48.swift:22:57: error: value of type\
    \ 'String' has no member 'length'\n            if str.length == strings[strings.count\
    \ - 1].length {\n                             ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sort { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjh5xh4be.swift:18:16: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return lst.sort { $0.count < $1.count\
    \ }\n           ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjh5xh4be.swift:18:16:\
    \ error: cannot use mutating member on immutable value: 'lst' is a 'let' constant\n\
    \    return lst.sort { $0.count < $1.count }\n           ~~~ ^\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted: [String] = []\n    for elem in lst {\n        for idx in range(len(sorted))\
    \ {\n            let word = sorted[idx]\n            guard word != elem && word.characters.count\
    \ > elem.characters.count else { continue }\n            if word < elem {\n  \
    \              sorted.insert(word, at: idx)\n                break\n         \
    \   }\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu220nu26.swift:20:20: error: cannot find 'range' in scope\n   \
    \     for idx in range(len(sorted)) {\n                   ^~~~~\n/tmp/tmpu220nu26.swift:20:26:\
    \ error: cannot find 'len' in scope\n        for idx in range(len(sorted)) {\n\
    \                         ^~~\n"
  stdout: ''
  timestamp: 1659980050
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst: [String] = []\n    for elem in lst {\n        if elem.count % 2 ==\
    \ 1 {\n            new_lst.insert(elem, at: new_lst.endIndex)\n        }\n   \
    \ }\n    new_lst.sortInPlace(by: { a, b in a.count < b.count })\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpv2l3lo1k.swift:24:13: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    new_lst.sortInPlace(by: { a, b in a.count < b.count })\n\
    \    ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ dict = Dictionary<Int, Int>()\n    for word in lst {\n        if let count =\
    \ dict[word.characters.count] {\n            dict[count] = count + 1\n       \
    \ } else {\n            dict[word.characters.count] = 1\n        }\n    }\n  \
    \  let result = Array(dict.sorted(by: {$0.1 < $1.1}).map { (key, value) in key\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpyr2hr352.swift:20:34: error: 'characters' is unavailable: Please\
    \ use String directly\n        if let count = dict[word.characters.count] {\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyr2hr352.swift:21:17: error: cannot assign through\
    \ subscript: 'dict' is a 'let' constant\n            dict[count] = count + 1\n\
    \            ~~~~^\n/tmp/tmpyr2hr352.swift:18:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let dict = Dictionary<Int, Int>()\n    ^~~\n    var\n/tmp/tmpyr2hr352.swift:23:17:\
    \ error: cannot assign through subscript: 'dict' is a 'let' constant\n       \
    \     dict[word.characters.count] = 1\n            ~~~~^\n/tmp/tmpyr2hr352.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let dict = Dictionary<Int,\
    \ Int>()\n    ^~~\n    var\n/tmp/tmpyr2hr352.swift:27:12: error: cannot convert\
    \ return expression of type '[Int]' to return type '[String]'\n    return result\n\
    \           ^\n/tmp/tmpyr2hr352.swift:27:12: note: arguments to generic parameter\
    \ 'Element' ('Int' and 'String') are expected to be equal\n    return result\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ new_lst = lst.map { (a) -> (a) in\n        return a.count > 1 ? a : a.lowercased()\n\
    \    }.sorted(by: { (a, b) -> Bool in\n        a.count > b.count ?\n         \
    \   true :\n            a.count < b.count ?\n                true :\n        \
    \        a.lowercased() < b.lowercased()\n    })\n    return new_lst\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpt8a522ll.swift:18:37: error: cannot find type 'a' in scope\n  \
    \  let new_lst = lst.map { (a) -> (a) in\n                                   \
    \ ^\n"
  stdout: ''
  timestamp: 1659980075
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = [String]()\n    for str in lst {\n        let str = str.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if str.isEmpty {\n           \
    \ continue\n        }\n        if let index = res.index(where: { $0.hasPrefix(str)\
    \ }) {\n            res[index] = \"$0\"\n        } else {\n            res.append(str)\n\
    \        }\n    }\n    res.sort { s1, s2 in\n        let s1 = s1.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        let s2 = s2.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        return s1.length == s2.length\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpitlnik8t.swift:20:46: error: cannot find 'CharacterSet' in scope\n\
    \        let str = str.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \                                             ^~~~~~~~~~~~\n/tmp/tmpitlnik8t.swift:20:23:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n        let\
    \ str = str.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n    \
    \              ~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpitlnik8t.swift:31:44: error: cannot\
    \ find 'CharacterSet' in scope\n        let s1 = s1.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \                                           ^~~~~~~~~~~~\n/tmp/tmpitlnik8t.swift:32:44:\
    \ error: cannot find 'CharacterSet' in scope\n        let s2 = s2.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n\treturn\
    \ (lst\n\t\t.SortByDescending { $0.length } // descending order\n\t\t.SortByDescending\
    \ { $0.compare($1, options: .caseInsensitive) == ComparisonResult.orderedAscending\
    \ } // descending order again but ascending on the sorted values\n\t\t.SortByDescending\
    \ { $0.compare($1, options: .numeric) == ComparisonResult.orderedAscending } //\
    \ ascending order again but ascending on the sorted values\n\t\t.map{$0}) // map\
    \ to a new array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpit2l6ooo.swift:20:68: error: cannot find 'ComparisonResult' in\
    \ scope\n                .SortByDescending { $0.compare($1, options: .caseInsensitive)\
    \ == ComparisonResult.orderedAscending } // descending order again but ascending\
    \ on the sorted values\n                                                     \
    \                            ^~~~~~~~~~~~~~~~\n/tmp/tmpit2l6ooo.swift:21:60: error:\
    \ cannot find 'ComparisonResult' in scope\n                .SortByDescending {\
    \ $0.compare($1, options: .numeric) == ComparisonResult.orderedAscending } //\
    \ ascending order again but ascending on the sorted values\n                 \
    \                                                        ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    return lst.sorted() { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwbw0bh68/tmpwbw0bh68.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8331d5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8331a56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8331a56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8331a557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbw0bh68                        0x0000562d4db27606 <unavailable> + 5638

    5    libc.so.6                          0x00002b8331f4b460 __libc_start_main +
    245

    6    tmpwbw0bh68                        0x0000562d4db27189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ sort by length\n    lst.sortInPlace((a, b) -> a.count < b.count ? -1 : 1)\n\n\
    \    // delete odd lengthed strings\n    var result = [String]()\n    for i in\
    \ 0..<lst.count {\n        if i % 2 == 1 {\n            result.append(lst[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm7f0k6u1.swift:19:22: error: cannot find 'a' in scope\n    lst.sortInPlace((a,\
    \ b) -> a.count < b.count ? -1 : 1)\n                     ^\n/tmp/tmpm7f0k6u1.swift:19:25:\
    \ error: cannot find 'b' in scope\n    lst.sortInPlace((a, b) -> a.count < b.count\
    \ ? -1 : 1)\n                        ^\n/tmp/tmpm7f0k6u1.swift:19:31: error: cannot\
    \ find 'a' in scope\n    lst.sortInPlace((a, b) -> a.count < b.count ? -1 : 1)\n\
    \                              ^\n/tmp/tmpm7f0k6u1.swift:19:41: error: cannot\
    \ find 'b' in scope\n    lst.sortInPlace((a, b) -> a.count < b.count ? -1 : 1)\n\
    \                                        ^\n/tmp/tmpm7f0k6u1.swift:19:21: error:\
    \ expected type before '->'\n    lst.sortInPlace((a, b) -> a.count < b.count ?\
    \ -1 : 1)\n                    ^\n/tmp/tmpm7f0k6u1.swift:19:49: error: expected\
    \ type after '->'\n    lst.sortInPlace((a, b) -> a.count < b.count ? -1 : 1)\n\
    \                                                ^\n/tmp/tmpm7f0k6u1.swift:19:9:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    lst.sortInPlace((a,\
    \ b) -> a.count < b.count ? -1 : 1)\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ write your code here\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpzbjv9nay/tmpzbjv9nay.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48fc9f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48fc6f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48fc6f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48fc6ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbjv9nay                        0x000055d176a42546 <unavailable> + 5446

    5    libc.so.6                          0x00002b48fcbe5460 __libc_start_main +
    245

    6    tmpzbjv9nay                        0x000055d176a420c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: { (i1, i2) -> Bool in\n        return i1.count < i2.count\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbx0e577w/tmpbx0e577w.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08be571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08be268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08be268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08be2677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbx0e577w                        0x000055de0af09606 <unavailable> + 5638

    5    libc.so.6                          0x00002b08be75d460 __libc_start_main +
    245

    6    tmpbx0e577w                        0x000055de0af09189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted() { str1, str2 in\n        let length1 = str1.count\n        let\
    \ length2 = str2.count\n        return length1 > length2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpodd8wwzy/tmpodd8wwzy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b184a5fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b184a2f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b184a2f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b184a2f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodd8wwzy                        0x000055a97fbff606 <unavailable> + 5638

    5    libc.so.6                          0x00002b184a7e9460 __libc_start_main +
    245

    6    tmpodd8wwzy                        0x000055a97fbff189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var hash = [String:Int]()\n    for el in lst {\n  \
    \      if !hash.keys.contains(el) {\n            result.append(el)\n         \
    \   hash[el] = 1\n        } else {\n            hash[el] = hash[el] + 1\n    \
    \    }\n    }\n    for el in hash.keys {\n        if hash[el] % 2 == 1 {\n   \
    \         result.append(el)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpo77w829b.swift:25:28: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            hash[el] = hash[el] + 1\n\
    \                           ^\n/tmp/tmpo77w829b.swift:25:28: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   hash[el] = hash[el] + 1\n                           ^\n                  \
    \     (        ?? <#default value#>)\n/tmp/tmpo77w829b.swift:25:28: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    hash[el] = hash[el] + 1\n                           ^\n                 \
    \              !\n/tmp/tmpo77w829b.swift:29:16: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n        if hash[el] % 2 ==\
    \ 1 {\n               ^\n/tmp/tmpo77w829b.swift:29:16: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        if hash[el]\
    \ % 2 == 1 {\n               ^\n           (        ?? <#default value#>)\n/tmp/tmpo77w829b.swift:29:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if hash[el] % 2 == 1 {\n               ^\n                  \
    \ !\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word : String in lst {\n        if let _ = result.index(where:\
    \ { $0 == word }) {\n            continue\n        }\n        result.append(word)\n\
    \    }\n    result.sort { $0.length < $1.length }\n    result.sort { $0 < $1 }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjt5f2k36.swift:20:27: warning: 'index(where:)' is deprecated: renamed\
    \ to 'firstIndex(where:)'\n        if let _ = result.index(where: { $0 == word\
    \ }) {\n                          ^\n/tmp/tmpjt5f2k36.swift:20:27: note: use 'firstIndex(where:)'\
    \ instead\n        if let _ = result.index(where: { $0 == word }) {\n        \
    \                  ^~~~~\n                          firstIndex\n/tmp/tmpjt5f2k36.swift:25:22:\
    \ error: value of type 'String' has no member 'length'\n    result.sort { $0.length\
    \ < $1.length }\n                  ~~ ^~~~~~\n/tmp/tmpjt5f2k36.swift:25:34: error:\
    \ value of type 'String' has no member 'length'\n    result.sort { $0.length <\
    \ $1.length }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ temp: [String] = []\n    for s in lst {\n        if s.count % 2 != 0 {\n   \
    \         temp.append(s)\n        }\n    }\n    temp.sortInPlace()\n    return\
    \ temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0ke7qrft.swift:24:10: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    temp.sortInPlace()\n    ~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted { $0.characters.count > $1.characters.count }\n    var res\
    \ = lst\n    for i in sorted.indices {\n        let n = sorted[i]\n        let\
    \ index = lst.index(of: n)\n        lst.remove(at: index)\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpecy1yqc8.swift:18:34: error: 'characters' is unavailable: Please\
    \ use String directly\n    let sorted = lst.sorted { $0.characters.count > $1.characters.count\
    \ }\n                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpecy1yqc8.swift:18:56: error: 'characters' is unavailable:\
    \ Please use String directly\n    let sorted = lst.sorted { $0.characters.count\
    \ > $1.characters.count }\n                                                  \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpecy1yqc8.swift:22:25:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = lst.index(of: n)\n                        ^\n/tmp/tmpecy1yqc8.swift:22:25:\
    \ note: use 'firstIndex(of:)' instead\n        let index = lst.index(of: n)\n\
    \                        ^~~~~\n                        firstIndex\n/tmp/tmpecy1yqc8.swift:23:13:\
    \ error: no exact matches in call to instance method 'remove'\n        lst.remove(at:\
    \ index)\n            ^\n/tmp/tmpecy1yqc8.swift:23:13: note: found candidate with\
    \ type '(Int) -> String'\n        lst.remove(at: index)\n            ^\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Your code here\n    var result = [String]()\n    for word in lst {\n       \
    \ if word.characters.count % 2 != 0 {\n            result.append(word)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2hiar3if.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 != 0 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newArr: [String] = []\n    var uniqueArr = Set<String>()\n    var words: [String]\n\
    \    for word in lst {\n        if uniqueArr.contains(word) {\n            newArr.append(word)\n\
    \        } else {\n            uniqueArr.insert(word)\n            newArr.append(word)\n\
    \        }\n    }\n    newArr = newArr.sorted(by: { (s1: String, s2: String) ->\
    \ Bool in\n        return s1.count < s2.count\n    })\n    return newArr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf8slnczt/tmpf8slnczt.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6663b18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b666380fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b666380f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b666380e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8slnczt                        0x0000564fea7f1926 <unavailable> + 6438

    5    libc.so.6                          0x00002b6663d04460 __libc_start_main +
    245

    6    tmpf8slnczt                        0x0000564fea7f14a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted: [String] = []\n    for word in lst {\n        if sorted.contains(word){\
    \ continue }\n        sorted.append(word)\n    }\n    sorted.sort(){\n       \
    \ guard let wordLength = $0.characters.count else {return true}\n        guard\
    \ let wordLength = $1.characters.count else {return false}\n        return wordLength\
    \ < wordLength\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp57u9jx5h.swift:24:15: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n        guard let wordLength = $0.characters.count\
    \ else {return true}\n              ^                ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp57u9jx5h.swift:25:15:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        guard let wordLength = $1.characters.count else {return false}\n    \
    \          ^                ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp57u9jx5h.swift:24:35:\
    \ error: 'characters' is unavailable: Please use String directly\n        guard\
    \ let wordLength = $0.characters.count else {return true}\n                  \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp57u9jx5h.swift:25:35: error: 'characters' is unavailable: Please\
    \ use String directly\n        guard let wordLength = $1.characters.count else\
    \ {return false}\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp57u9jx5h.swift:24:19: warning: value\
    \ 'wordLength' was defined but never used; consider replacing with boolean test\n\
    \        guard let wordLength = $0.characters.count else {return true}\n     \
    \         ~~~~^~~~~~~~~~~~~\n                                                \
    \   != nil\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: { (a,b) -> Bool in\n        return a.characters.count > b.characters.count\n\
    \            || a.characters.count == b.characters.count\n            && a < b\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpci1sjz52.swift:19:18: error: 'characters' is unavailable: Please\
    \ use String directly\n        return a.characters.count > b.characters.count\n\
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpci1sjz52.swift:19:39: error: 'characters' is unavailable: Please\
    \ use String directly\n        return a.characters.count > b.characters.count\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpci1sjz52.swift:20:18: error: 'characters' is unavailable:\
    \ Please use String directly\n            || a.characters.count == b.characters.count\n\
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpci1sjz52.swift:20:40: error: 'characters' is unavailable: Please\
    \ use String directly\n            || a.characters.count == b.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if result.count < 2 {\
    \ // If we have not seen this item before\n            result.append(item)\n \
    \       } else if result.last == item { // If we have seen this item before\n\
    \            result.remove(at: result.index(before: result.last)) // Remove the\
    \ last element\n            result.last = \"\" // Reset the last element\n   \
    \     } else {\n            if item.count > result.last!.count { // If the word\
    \ has an even length, append to the result list\n                result.append(item)\n\
    \            } else { // If not, remove the last item and add the current one\
    \ to the result list\n                result.remove(at: result.index(before: result.last))\n\
    \                result.append(item)\n            }\n        }\n    }\n    result.sort()\
    \ // Sort the final array by length of the strings\n    return result // Return\
    \ the sorted array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp16f4r7c3.swift:23:59: error: cannot convert value of type 'String?'\
    \ to expected argument type 'Int'\n            result.remove(at: result.index(before:\
    \ result.last)) // Remove the last element\n                                 \
    \                         ^\n/tmp/tmp16f4r7c3.swift:24:20: error: cannot assign\
    \ to property: 'last' is a get-only property\n            result.last = \"\" //\
    \ Reset the last element\n            ~~~~~~~^~~~\n/tmp/tmp16f4r7c3.swift:29:63:\
    \ error: cannot convert value of type 'String?' to expected argument type 'Int'\n\
    \                result.remove(at: result.index(before: result.last))\n      \
    \                                                        ^\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    for index in 0..<res.count {\n        for element in res[..<index]\
    \ {\n            for words in res[..<index] {\n                if element.count\
    \ != words.count {\n                    res[index] = res[..<index]\n         \
    \           break\n                }\n            }\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpezxk1gd_.swift:23:37: error: cannot assign value of type 'ArraySlice<String>'\
    \ to subscript of type 'String'\n                    res[index] = res[..<index]\n\
    \                                 ~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n\tvar result\
    \ = \"\"\n\tvar sorted_lst = [String]()\n\tvar duplicates = []\n\tfor el in lst\
    \ {\n\t\tif len(el) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif result.isEmpty() {\n\
    \t\t\tresult = el\n\t\t\tcontinue\n\t\t}\n\t\tdup = len(duplicates)\n\t\tif dup\
    \ == 0 {\n\t\t\tsorted_lst.append(el)\n\t\t\tcontinue\n\t\t}\n\t\tif dup > 0 {\n\
    \t\t\tduplicates = append(duplicates, el)\n\t\t\tcontinue\n\t\t}\n\t\tlet cmp\
    \ = el.compare(result)\n\t\tswitch cmp {\n\t\tcase .orderedAscending:\n\t\t\t\
    sorted_lst.append(el)\n\t\tcase .orderedSame:\n\t\t\tduplicates = append(duplicates,\
    \ el)\n\t\tdefault:\n\t\t\tsorted_lst.insert(sorted_lst.end(), el)\n\t\t}\n\t\
    }\n\tresult = \"\"\n\tfor el in sorted_lst {\n\t\tresult += el\n\t}\n\treturn\
    \ result.characters.filter({ !$0.isWhitespace }).sorted(by: <)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp9mpgsp1a.swift:20:19: error: empty collection literal requires\
    \ an explicit type\n        var duplicates = []\n                         ^~\n\
    /tmp/tmp9mpgsp1a.swift:22:6: error: cannot find 'len' in scope\n             \
    \   if len(el) == 0 {\n                   ^~~\n/tmp/tmp9mpgsp1a.swift:25:13: error:\
    \ cannot call value of non-function type 'Bool'\n                if result.isEmpty()\
    \ {\n                          ^      ~~\n                                 \n\
    /tmp/tmp9mpgsp1a.swift:29:3: error: cannot find 'dup' in scope\n             \
    \   dup = len(duplicates)\n                ^~~\n/tmp/tmp9mpgsp1a.swift:29:9: error:\
    \ cannot find 'len' in scope\n                dup = len(duplicates)\n        \
    \              ^~~\n/tmp/tmp9mpgsp1a.swift:30:6: error: cannot find 'dup' in scope\n\
    \                if dup == 0 {\n                   ^~~\n/tmp/tmp9mpgsp1a.swift:34:6:\
    \ error: cannot find 'dup' in scope\n                if dup > 0 {\n          \
    \         ^~~\n/tmp/tmp9mpgsp1a.swift:35:17: error: cannot find 'append' in scope\n\
    \                        duplicates = append(duplicates, el)\n               \
    \                      ^~~~~~\n/tmp/tmp9mpgsp1a.swift:38:16: error: value of type\
    \ 'String' has no member 'compare'\n                let cmp = el.compare(result)\n\
    \                          ~~ ^~~~~~~\n/tmp/tmp9mpgsp1a.swift:43:17: error: cannot\
    \ find 'append' in scope\n                        duplicates = append(duplicates,\
    \ el)\n                                     ^~~~~~\n/tmp/tmp9mpgsp1a.swift:45:15:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \          sorted_lst.insert(sorted_lst.end(), el)\n                         \
    \          ^\n/tmp/tmp9mpgsp1a.swift:45:15: note: found candidate with type '(__owned\
    \ String, Int) -> ()'\n                        sorted_lst.insert(sorted_lst.end(),\
    \ el)\n                                   ^\n/tmp/tmp9mpgsp1a.swift:45:33: error:\
    \ value of type '[String]' has no member 'end'\n                        sorted_lst.insert(sorted_lst.end(),\
    \ el)\n                                          ~~~~~~~~~~ ^~~\n/tmp/tmp9mpgsp1a.sw"
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ Your code here\n    \n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpvyh7ps9s/tmpvyh7ps9s.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add5a918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add5a60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add5a60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add5a60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvyh7ps9s                        0x0000559e97da9546 <unavailable> + 5446

    5    libc.so.6                          0x00002add5ab04460 __libc_start_main +
    245

    6    tmpvyh7ps9s                        0x0000559e97da90c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: { (s1, s2) in\n        let n1 = s1.count\n        let n2 = s2.count\n\
    \        let max = n1 > n2 ? n1 : n2\n        let min = n1 < n2 ? n1 : n2\n  \
    \      return min < max\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpged7kbwo/tmpged7kbwo.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb9a9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb9794b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb9794988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb97937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpged7kbwo                        0x000055b6e3af0606 <unavailable> + 5638

    5    libc.so.6                          0x00002b4eb9c89460 __libc_start_main +
    245

    6    tmpged7kbwo                        0x000055b6e3af0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.isEmpty {\n      \
    \      res = append(res, word)\n            continue\n        }\n        var curWord\
    \ = word\n        if word.count > res[0].count {\n            res = append(res,\
    \ curWord)\n        } else {\n            res = append(res, word)\n        }\n\
    \    }\n    if res.isEmpty {\n        return []\n    }\n    res[0].count = res[0].count\
    \ + 1\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpf0vg75cw.swift:21:19: error: cannot find 'append' in scope\n  \
    \          res = append(res, word)\n                  ^~~~~~\n/tmp/tmpf0vg75cw.swift:26:19:\
    \ error: cannot find 'append' in scope\n            res = append(res, curWord)\n\
    \                  ^~~~~~\n/tmp/tmpf0vg75cw.swift:28:19: error: cannot find 'append'\
    \ in scope\n            res = append(res, word)\n                  ^~~~~~\n/tmp/tmpf0vg75cw.swift:34:12:\
    \ error: cannot assign to property: 'count' is a get-only property\n    res[0].count\
    \ = res[0].count + 1\n    ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: { $0.count > $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpic_xvr75/tmpic_xvr75.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ec724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ec41bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ec41b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ec41a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic_xvr75                        0x000055f2173ef606 <unavailable> + 5638

    5    libc.so.6                          0x00002ad3ec910460 __libc_start_main +
    245

    6    tmpic_xvr75                        0x000055f2173ef189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ output: [String] = []\n    var maxLen = lst[0].count\n    for word in lst {\n\
    \        if word.count > maxLen {\n            maxLen = word.count\n        }\n\
    \    }\n    for word in lst {\n        if word.count == maxLen {\n           \
    \ output += word\n        }\n    }\n    for word in lst {\n        if word.count\
    \ != maxLen {\n            output += word\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp69_orlw5.swift:27:20: error: operator function '+=' requires the\
    \ types 'String' and 'String.Element' (aka 'Character') be equivalent\n      \
    \      output += word\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n/tmp/tmp69_orlw5.swift:32:20: error: operator function\
    \ '+=' requires the types 'String' and 'String.Element' (aka 'Character') be equivalent\n\
    \            output += word\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ i = 0\n    var newArr = [String]()\n\n    for word in lst {\n        if i >=\
    \ newArr.count {\n            newArr.append(word)\n        } else {\n        \
    \    if word.characters.count < newArr[i].characters.count {\n               \
    \ newArr.append(word)\n            } else if word.characters.count == newArr[i].characters.count\
    \ {\n                if word.characters.lowercased() < newArr[i].characters.lowercased()\
    \ {\n                    newArr.append(word)\n                }\n            }\n\
    \        }\n        i += 1\n    }\n\n    newArr.sort()\n\n    return newArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpoaasm5fn.swift:25:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if word.characters.count < newArr[i].characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpoaasm5fn.swift:25:50: error: 'characters' is unavailable:\
    \ Please use String directly\n            if word.characters.count < newArr[i].characters.count\
    \ {\n                                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoaasm5fn.swift:27:28: error: 'characters'\
    \ is unavailable: Please use String directly\n            } else if word.characters.count\
    \ == newArr[i].characters.count {\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoaasm5fn.swift:27:58: error: 'characters'\
    \ is unavailable: Please use String directly\n            } else if word.characters.count\
    \ == newArr[i].characters.count {\n                                          \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpoaasm5fn.swift:28:25: error: 'characters' is unavailable: Please\
    \ use String directly\n                if word.characters.lowercased() < newArr[i].characters.lowercased()\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoaasm5fn.swift:28:61: error: 'characters' is unavailable:\
    \ Please use String directly\n                if word.characters.lowercased()\
    \ < newArr[i].characters.lowercased() {\n                                    \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var charact"
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted{ $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpk20awvm5/tmpk20awvm5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00d7df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00d7aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00d7aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00d7aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk20awvm5                        0x0000555ec832a606 <unavailable> + 5638

    5    libc.so.6                          0x00002b00d7fe2460 __libc_start_main +
    245

    6    tmpk20awvm5                        0x0000555ec832a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst: [String] = []\n    \n    for word in lst {\n        if word.count %\
    \ 2 != 0 {\n            new_lst.append(word)\n        } else {\n            \n\
    \        }\n    }\n    \n    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpk0dk2foq/tmpk0dk2foq.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ec4df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ec4aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ec4aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ec4aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0dk2foq                        0x000055e2d43ef7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b3ec4fe4460 __libc_start_main +
    245

    6    tmpk0dk2foq                        0x000055e2d43ef379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    \n    let arr = lst\n    \n    for i in 0..<arr.count {\n        \n     \
    \   arr.remove(at: i)\n        \n    }\n    \n    return arr\n    \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpner0za9x.swift:24:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.remove(at: i)\n        ~~~ ^\n\
    /tmp/tmpner0za9x.swift:20:5: note: change 'let' to 'var' to make it mutable\n\
    \    let arr = lst\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    if\
    \ lst.count == 0 {\n        return []\n    }\n\n    var result = [String]()\n\
    \    var currentTotal = 0\n    var currentLength = 0\n    for index in 0..<lst.count\
    \ {\n        currentLength = lst[index].count\n        currentTotal += currentLength\n\
    \        if currentLength != 0 {\n            result.append(lst[index])\n    \
    \    }\n    }\n\n    var currentIndex = 0\n    for index in 0..<result.count {\n\
    \        if currentIndex == lst.count {\n            break\n        }\n      \
    \  if result[index].count != currentLength {\n            result[index] = lst[currentIndex]\n\
    \            currentIndex++\n        }\n    }\n    if currentIndex != 0 {\n  \
    \      for index in 0..<(currentIndex - 1) {\n            result.append(lst[index])\n\
    \        }\n    }\n\n    result.sortInPlace()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsym8wvyq.swift:40:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            currentIndex++\n                        ^~\n\
    /tmp/tmpsym8wvyq.swift:49:12: error: value of type '[String]' has no member 'sortInPlace'\n\
    \    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sums = [0]\n    var res = [:]\n    for word in lst {\n        sums[0]++\n  \
    \      if sums[0] == 1 {\n            sums[0] = 0\n            sums.append(0)\n\
    \            res[sums[1]] = word\n        } else if sums[sums[0]-1]+1 == word.length\
    \ {\n            sums[0]--\n            sums[sums[0]] = 1\n            res[sums[1]]\
    \ = word\n        } else {\n            sums[0]++\n            sums[sums[0]-1]++\n\
    \            res[sums[1]] = word\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0m6ao6to.swift:19:15: error: empty collection literal requires\
    \ an explicit type\n    var res = [:]\n              ^~~\n/tmp/tmp0m6ao6to.swift:21:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        sums[0]++\n\
    \               ^~\n/tmp/tmp0m6ao6to.swift:26:45: error: value of type 'String'\
    \ has no member 'length'\n        } else if sums[sums[0]-1]+1 == word.length {\n\
    \                                       ~~~~ ^~~~~~\n/tmp/tmp0m6ao6to.swift:27:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  sums[0]--\n                   ^~\n/tmp/tmp0m6ao6to.swift:31:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            sums[0]++\n \
    \                  ^~\n/tmp/tmp0m6ao6to.swift:32:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            sums[sums[0]-1]++\n       \
    \                    ^~\n/tmp/tmp0m6ao6to.swift:36:12: error: cannot convert return\
    \ expression of type '[AnyHashable : Any]' to return type '[String]'\n    return\
    \ res\n           ^~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sortInPlace()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnv7saa67.swift:18:16: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    return lst.sortInPlace()\n           ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        for j in lst {\n          \
    \  if i != j {\n                if i.characters.count == j.characters.count {\n\
    \                    if i.characters.count > 1 {\n                        if j.characters.count\
    \ > 1 {\n                            if i.characters.count < j.characters.count\
    \ {\n                                result.insert(i, at: 0)\n               \
    \                 result.insert(j, at: 0)\n                                break\n\
    \                            } else {\n                                result.insert(j,\
    \ at: 0)\n                                break\n                            }\n\
    \                        } else {\n                            result.insert(i,\
    \ at: 0)\n                            break\n                        }\n     \
    \               } else {\n                        result.insert(i, at: 0)\n  \
    \                      break\n                    }\n                } else {\n\
    \                    result.insert(i, at: 0)\n                    break\n    \
    \            }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpikbm2lb1.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n                if i.characters.count == j.characters.count\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpikbm2lb1.swift:22:44: error: 'characters' is unavailable:\
    \ Please use String directly\n                if i.characters.count == j.characters.count\
    \ {\n                                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpikbm2lb1.swift:23:26: error: 'characters'\
    \ is unavailable: Please use String directly\n                    if i.characters.count\
    \ > 1 {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpikbm2lb1.swift:24:30: error: 'characters' is unavailable:\
    \ Please use String directly\n                        if j.characters.count >\
    \ 1 {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpikbm2lb1.swift:25:34: error: 'characters' is unavailable:\
    \ Please use String directly\n                            if i.characters.count\
    \ < j.characters.count {\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpikbm2lb1.swift:25:55: error: 'characters'\
    \ is unavailable: Please use String directly\n                            if i.characters.count\
    \ < j.characters.count {\n                                                   \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659980051
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    let sortedLst = (lst.sorted())\n    var newLst: [String] = []\n    \n   \
    \ for str in sortedLst {\n        if (newLst.count != 0) || (newLst.last != str)\
    \ {\n            newLst.append(str)\n        }\n    }\n    \n    return (newLst.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbewoa36y/tmpbewoa36y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae234c62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae234959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae234959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2349587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbewoa36y                        0x000056395048d956 <unavailable> + 6486

    5    libc.so.6                          0x00002ae234e4e460 __libc_start_main +
    245

    6    tmpbewoa36y                        0x000056395048d4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659980051
