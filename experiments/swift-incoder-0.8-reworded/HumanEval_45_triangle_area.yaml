name: HumanEval_45_triangle_area
language: swift
prompt: "\n/// Given length of a side and high return area for a triangle.\n/// >>>\
  \ triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
  \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
completions: ['    return 0.45 * a * h', '    return a * h / 4.0', "    let l = (a\
    \ + h) / 2\n    return (l * l) / (4 * h * a)", '  return Double(sqrt((sqr(a) +
    sqr(h))) / 2)', "    let area = Double(a * h * h / 6.0)\n    return area", '  return
    Double((a + h) / 2)', '    return triangle_area(Double(a), Double(h))', '    return
    h * (h + a - 1) / (2.0 * a)', '    return Double(a * h) / 3', "    let a = Double(a)\n\
    \    let h = Double(h)\n    let s = 2.0 * a * (h + h + h)\n    let mu = sqrt(s)\
    \ / 2.0\n    return (2.0 * (h * h + h * s - a * a) * (mu + mu - 2.0 * mu)) / Double(6)",
  '    return pow(Double(a) / pow(2.0, Double(h)), 2.0)', "\treturn (3. * a * h) /\
    \ 6", "    let b2 = a*a*h\n    let c2 = (b2 - math.square(a))/2\n    return math.sqrt(c2+b2)",
  '    return Double(a) / Double(h)', '    return sqrt(pow(a, 2) + pow(h - a, 2))',
  '    return sqrt(Double(a) * Double(h) / Double(2))', "    let base: Double = 2.0\n\
    \    return Double(base)*(h/2.0)*(h/2.0)", "    let (ax, ay) = (1.0, 0.0)\n  \
    \  let (bx, by) = (0.0, 1.0)\n    let (cx, cy) = (0.0, 0.0)\n    let d1: Double\n\
    \    let d2: Double\n    let d3: Double\n    let d4: Double\n    let area: Double\n\
    \    d1 = (bx - ax) * (h - by)\n    d2 = (cx - bx) * (h - by)\n    d3 = (cx -\
    \ ax) * (ay - by)\n    d4 = (ax - cx) * (ay - by)\n    area = d1 + d2 + d3 + d4\n\
    \    return area / 2.0 / abs(a) * sign(a)", "    let area = a * h\n    return\
    \ Double(area) / Double(a) * Double(h) / Double(a)", '    return 4.0 * a * (h
    / 2)', '    return 2.0 * ((h / a) - a)', "    var area = Double(0)\n    for i\
    \ in 0..<h {\n        area += pow(a, i) / 2\n    }\n    return area", '    return
    triangle_length_helper(a, b, h) * triangle_area_helper(a, b, h) / a', "    var\
    \ res = Double(0)\n    var x = a\n    var y = h\n    var z = ((x * x) + (y * y))\
    \ * ((x > 0) * 2 - 1)\n    var area = Double(abs(z))\n    var pi = 3.14159265358979323\n\
    \n    while z > 0 {\n        x -= 1\n        y -= 1\n        z = ((x * x) + (y\
    \ * y)) * ((x > 0) * 2 - 1)\n        res += area\n    }\n\n    return res / pi",
  "    var area_square = Double(h*h*h) / 2\n    for _ in 0 ..< a {\n        area_square\
    \ += Double(h*h)\n    }\n    return area_square / 4", '    return Double(a) *
    0.5 * Double(h) / 2', "    let w = 2.0 * a * a\n    let h = 2.0 * h * a\n    return\
    \ (w * h) / Double(h)", "    let length = hypot(a, h)\n    let area = length *\
    \ (length + a + h) - length * length\n    return area / (length * length)", '    return
    sqrt(pow(a, 2) + pow(h,2))', "    func squareOfSide(_ side: Double) -> Double\
    \ {\n        return side * side\n    }\n\n    func area(_ side1: Double, _ side2:\
    \ Double) -> Double {\n        return squareOfSide(side1) * squareOfSide(side2)\
    \ - squareOfSide(side1 + side2) - squareOfSide(side2 - side1)\n    }\n\n    return\
    \ (area(a, a) + area(a, h) - area(a + h, a) - area(a + h, h)) / 2", '    return
    sqrt(pow(h, 2) + pow(a, 2) - pow(a, 2) * pow((h + a) / 2, 2))', "  let b: Double\
    \ = pow(a, Double(2))\n  let c: Double = pow(h, Double(2))\n  let area: Double\
    \ = pow(b + c, Double(0.5))\n  return area", "\tswitch {\n\tcase a <= h:\n\t\t\
    return 0\n\tcase h == a:\n\t\treturn 1\n\tdefault:\n\t\treturn Double(a) * triangle_area(a\
    \ - h, h) + triangle_area(a - h, a - h)\n\t}", '    return pow(Double(a)/3., Double(h)/3.)',
  '    return ((pow(Double(a), 2) + pow(Double(h), 2)) / 2) * (pow(Double(h), 2))',
  '    return sqrt((h * h) - (a * a))', '    return a * (a + h) * (h + 1)', '    return
    abs((a * b - c * d) / (h * w))', '  return Double(a * a * h / (2 * h))', '  return
    (a * (h - a) * .15) // 0.06', '  return Double(h) * Double(a) / 2', "    let base\
    \ = sqrt(pow(a, 2) - pow(h * h, 2))\n    let a = pow(a, 2)\n    let h = pow(h\
    \ * h, 2)\n    return base + 0.5 * a / h", '    return a * (h / 2)', '    return
    (a + h) * 0.5', '    return sqrt(pow(a, 2) * (2 * h + h) * h / (h + h))', "  \
    \  guard a >= 0 && h > 0 else {\n        return Double.nan\n    }\n\n    var sum\
    \ = 0\n    var i = 0\n    for _ in 0 ..< h {\n        sum += a * triangle_side(a:\
    \ a, i: i + 1)\n        i += 1\n    }\n\n    return sum", "    guard a > 0 &&\
    \ h > 0 else {\n        return Double.infinity\n    }\n    let area = h * a *\
    \ (h + 1)\n    return area", "    let b1: Double = 2.0 / a\n    let b2: Double\
    \ = 1.0 / a\n    let a1: Double = 1.0 / h\n    return b1 * h * (a1 + b2) * h",
  "    let a: Double = a * sqrt(3)\n    let h: Double = h * sqrt(3)\n    return (a+h)\
    \ * (a-h) * h / 2", '    return Double(h * a) / 2', "    switch h {\n    case\
    \ 2:\n        return 2 * Triangle(a, b).area()\n    case 3:\n        return Triangle(a,\
    \ b, c).area()\n    default:\n        return 0.0\n    }", '    return a * (h /
    2)', '  return Double(sqrt(Double(a) * Double(h) / 2))', '    return math.sqrt(Double(a)
    * Double(h) / Double(2))', '    return a / sqrt(pow(a, 2.0) + pow(h - a, 2.0))',
  "  let w = a * h\n  return w * w", "  let a = a / h\n  let h2 = h / 2\n  let h4\
    \ = h / 4\n  let h8 = h / 8\n  return a * (h2 + h4 + h8) - h2 * sqrt(Double(a)\
    \ * h2 * h4 / 6)", '    return Double(round((a * h) / 2))', "    let length =\
    \ h * 0.5\n    return (a * a) * (length + h) - (a * a) * length", "    var area\
    \ = Double(0)\n    for _ in 0..<h {\n        area += Double(a) / Double(h)\n \
    \       a -= 1.0;\n    }\n    return area", "    var area = Double(0)\n\n    for\
    \ i in 0..<h {\n        let p = i * a / h\n        area += p * (1 - p)\n    }\n\
    \n    return area", '    return a * Math.sqrt((3 * a * h) / 2)', "    let area\
    \ = a * h / 2\n    return area", "    switch a {\n    case 5: // square\n    \
    \    if h > 0 {\n            return 4.0 - ((h - 4.0) * (h - 4.0)) / (2.0 * a)\n\
    \        } else {\n            return 4.0 * a * (4.0 - a)\n        }\n    case\
    \ 3: // triangle\n        if h > 0 {\n            return 2.0 * a * (h + 1.0) /\
    \ (2.0 * h * a)\n        } else {\n            return 2.0 * a * a\n        }\n\
    \    case 4: // pentagon\n        if h > 0 {\n            return 2.0 * a * (h\
    \ - 2.0) / h\n        } else {\n            return 2.0 * a * a\n        }\n  \
    \  case 6: // hexagon\n        if h > 0 {\n            return 2.0 * a * (h - 4.0)\
    \ / h\n        } else {\n            return 2.0 * a * a\n        }\n    case 9:\
    \ // heptagon\n        if h > 0 {\n            return 2.0 * a * (h - 3.0) / h\n\
    \        } else {\n            return 2.0 * a * a\n        }\n    case 12: //\
    \ octagon\n        if h > 0 {\n            return 2.0 * a * (h - 5.0) / h\n  \
    \      } else {\n            return 2.0 * a * a\n        }\n    default:\n   \
    \     fatalError(\"Invalid side length: \\(a)\")\n    }", '    return Double(sqrt(pow(a,
    2) * pow((h / 3), 2)))', '  return 0.7234 * tan(deg2rad(90 + h / 2) * 0.6)', '    return
    0.5 * (a.square() + h.square())', '    return sqrt(pow(triangleHeight(a), 2) +
    pow(triangleWidth(a), 2) * h / 3)', '    return (-a / 2) * h', "    let area_tri\
    \ = (3. * h) / (3. * 3. * a)\n    return area_tri", '    return 3.141592653589793
    * Double(a) / Double(h)', '  return (4. * a * a) / h / (3. * a)', '    return
    (a * h) / 2.0', "    let s = 0.5 * (h * (h - a))\n    return s", '    return Double(sqrt(Double(a
    * a + h * h)) / (2.0 * a))', "    var result: Double = 0.0\n    var a: Double\
    \ = Double(a)\n    var h: Double = Double(h)\n    var i: Double\n    var j: Double\n\
    \    var k: Double\n    for i = 0; i <= a; i++ {\n        result += (i / a) *\
    \ (h / a)\n    }\n    for j = 0; j <= h; j++ {\n        result += ((h - j) / h)\
    \ * (a / h)\n    }\n    for i = 0; i <= a; i++ {\n        for j = 0; j <= h; j++\
    \ {\n            k = (i + j) / 2\n            result += (i / ((a * h) / 2)) *\
    \ (j / ((2 * h) / 2)) * (k / ((a * h) / 4))\n        }\n    }\n    return result",
  '    return (a * (a + h) - Triangle.side(a, b, h) * Triangle.side(b, a, h)) / 2',
  '    return (1.0 - cos(M_PI * a / h)) / (2.0 * M_PI)', "    var a = a\n    var h\
    \ = h\n\n    var area = Double()\n    if a == 0.0 {\n        return Double()\n\
    \    }\n\n    let side = Double(h) / 2\n    if h == 0 {\n        area = Double(a)\n\
    \    } else {\n        var temp = 0\n        let lower = (a * (h - side)) / h\n\
    \        let upper = ((a * (h - side))) / h\n\n        if h == 1 {\n         \
    \   area = Double(a) * Double(a)\n        }\n\n        if lower >= upper {\n \
    \           temp = Double(a)\n            area = temp * temp\n        } else {\n\
    \            temp = Double(lower)\n            area = (a * temp + Double(upper))\n\
    \        }\n    }\n    return area", '  return sqrt(Double(pow(a, 2) + pow(h,
    2) - Double(a * h)))', "    let a1 = (a * 0.5) / h\n    return ((sqrt(a1 * a1\
    \ + a1 * a1) + ((a1 * h) / 2) - a1) * 0.5) * 0.5", "    let area = Double(h) *\
    \ Double(a) / Double(2.0 * Double(2.0))\n    return area", "    let b = Double(h\
    \ / 2)\n    let c = Double(a * a - b * b) / 2\n    let s = c * c + b * b\n   \
    \ return s * 0.5", '    return 0.5 * sqrt(sqr(a) * sqr(h))', '    return sqrt(pow(h,
    2) * pow(2 * a, 3) - pow(h, 2))', '    return (1 + sqrt(Double(a * a + h * h)))
    / 2', '    return (sqrt(2.0 * a * h) + 1.0)', '    return (pow(Double(a), 2) +
    pow(Double(h), 2)) / 2', "    var area = 0.0\n    for i in 0..<h {\n        area\
    \ += (a * (h - i) * (h - i)) / 2\n    }\n    return area", '    return a * h *
    h / 3.0', "    let area = a * (h / 2)\n    return Double(area)", '    return Double(a
    * h / Double(2 * a + b))', '    return a * (h / 2)', '    return a * (b - a +
    h * (b + h) / 2) / (2 * (b - h))', '    return (a - h) * 0.5', "    guard a >=\
    \ 0 && h >= 0 else {\n        return 0\n    }\n\n    let area = a * h * 0.5\n\
    \    return area - Double(area / h)", '  return ((1 / 3) * pow((a / 3), 2)) +
    ((1 / 3) * pow((h / 3), 2))', '    return math.sqrt(pow(a / 2, 2) + pow(h / 2,
    2))', '    return a * h', '    return (a * h) / 2', '    return (pow(a, 2) + pow(h,
    2)) / 2', "    // area of triangle with given length and high return area\n  \
    \  return Double(a + h) * (h / 2)", '    return a * h / 2', '    return (a*a +
    h*h) / (2*a*h)', "    let area_tri = Double(h) * Double(a) / 2\n    return area_tri",
  '    return Double((h * 3.0) * (a / 2.0))', "    let area = a * (h / 2)\n    return\
    \ area", '    return (4.0 * pow(a, 2.0) + pow(a, 2.0) + 2.0 * a) * (1.0 / 3.0)
    * pow(h, 0.25)', "    let a2 = a * a\n    let h2 = h * h\n    let a2h = a2 + h2\n\
    \    return (sqrt(a2h * a2h + h2 * h2) - a) / 2", "    let area = a * (a + h)\
    \ / 2\n    return area", '    return h * pow(abs(pow(a, 2) - 1), 1.0 / 2.0)',
  '    return Double(a * (h - a) * (2 / (h + a) - sqrt(Double(h + a + 1) * h + a +
    1)))', '    return (a * h) / (4 * a)', "    var length = a * math.sqrt(3)\n  \
    \  length = length * length / 6\n    return length * h / 3", '    return Double(a
    * h) / Double(2.0)', '    return 0.5 * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132',
  "    let l = (h - a) / 2\n    return sqrt(l * l + ((a - h) / 2) * h)", '  return
    sqrt(Double(a * a * h * h + h * h - a * a))', '    return a * (sqrt(1 - pow((a
    / h), 2)) / 2.0)', "    // TODO: use an algorithm that uses area formula from\
    \ https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Triangle#Length_of_the_triangle\n\
    \    // http://mathworld.wolfram.com/Triangle.html\n    let d = (3.0 - 2.0 * a\
    \ + 3.0 * b + 4.0 * c) / 6.0\n    return sqrt(d * d + h * h)", "    let length\
    \ = (h * h) + (a * a) - (h * h)\n    return length / 2", '    return Double(a
    * h / 2)', '    return sqrt(pow(a, 2.0) + pow(h / 2.0, 2.0))', "    var area =\
    \ 0.0\n\n    for i in 0..<h {\n        for j in 0..<h {\n            area += pow(a\
    \ * pow((i + j) / 2, 2), (1.0/2.0))\n        }\n    }\n\n    return area / 2.0",
  "    return Double(abs(h * 0.5)) * (\n        0.8660254037844387 * pow(abs(a), 3)\
    \ - (abs(a) * sqrt(pow(abs(a), 3) + pow(abs(h), 2))))", '  return a*h/2', '    return
    (Double(a) * Double(h)) / (2.0 * Double(a) * Double(h - a)) * 0.5', '    return
    Double(sqrt(pow(a, 2) + pow(h, 2) - 4 * pow(a, 2) * h))', '    return (-h) * (a
    + h) / (2.0 * h)', '    return pow((a + b + c) / 2.0 - a, 2) * h + (pow((a + b)
    / 2.0 - a, 2) * h / 2.0 - b) * h + ((pow((a + b + c) / 2.0 - a, 2) * h / 2.0 -
    b) * h / 2.0 - c) * h / (a + b + c + 1)', '    return pow(Double(a) / Double(h),
    .5)', "    let tw = pow(a, 2.0)\n    let th = pow(a, 2.0) * pow((h / 2.0), 2.0)\n\
    \    return sqrt(tw + th)", '    return (Double(a) / sqrt(Double(h)))', "    let\
    \ area = a * (h / 2.0)\n    return Double(area)", '    return sqrt(pow(h, 2) /
    pow(a, 2))', '    return ((h * (h - 1) + a * a) / 2)', '    return (Double(sqrt(pow(Double(a)
    / Double(h), 2)) + 1) / (2.0 * Double(a))', "    let area: (Double, Double) =\
    \ ((Double(a) / 2) * sin(Double(h / 2) * 2 * M_PI), (Double(a) / 2) * cos(Double(h\
    \ / 2) * 2 * M_PI))\n    return area.0", '    return ((a / 2.0) * h) * Double.pi',
  '    return Double(a) / Double(h)', '    return a * h / 2', "    let area = a *\
    \ h * 0.5\n    return area", '    return Double(h * 0.5 * a)', '    return sqrt(pow(a,
    2) + pow(h, 2))', "    let w = h * math.sqrt(3)\n    return w * sqrt(a * a + h\
    \ * h - w * w) / 2", '    return (a + h) * (h - a) / (2 * a)', "    var area =\
    \ a * (h / 2)\n    if area < 1 {\n        area = area - 1\n    }\n    return area\
    \ / 2", '    return h * sqrt(a * a + 4 * h * h)', '    return pow(Double(a) *
    pow(2.0, Double(h) - 1) * 0.5, Double(1/2))', '    return Double(a * h / 2)',
  '  return Double(math.pow(math.tan(math.radians(a)/2.0),h))', "    let a = (a *\
    \ pi) / 180.0\n    let h = (a * pi) / 180.0\n    let a = (a * pi) / 180.0\n  \
    \  let h = (a * pi) / 180.0\n    return (pow(a, 2) * pow((1 + h), 2)) / 2", '    return
    Double(sqrt(pow(triangle_side_distance(a, b), 2) + pow(triangle_side_distance(b,
    a), 2)))', '  return sqrt(Double(a) * Double(h) / 2)', "    let length = sqrt(a\
    \ * a + h * h) - Double(h) / 2\n    return length / 2", '    return Double(sqrt(a
    * a + h * h))', '    return sqrt(pow(a * h / 2, 2) + pow(a * h / 2, 2))', '    return
    abs((a / h) ** 2)', "    let c = a * h\n    let s = (a + b + c) / 2\n    return\
    \ s * (s - a) * (s - b) * (s - c)", '    return (Double(h) * Double(a)) / 2',
  '    return ((a / h) + 1) * Double(h)', '    return pow(Double(a) * Double(h) /
    3, 1 / 3)', '    return sqrt(Double(a*a - h*h))', "    let area = Double(pow(a,\
    \ 2) * h) / 2\n    return area", '    return (-b + sqrt(Double(a * a * h + b *
    b - h * a * h))) / (2.0 * a)', '    return a / 2.0 * std::sqrt((b + h * h - a
    * a) / 4.0)', '    return Double(a * h / 3.0)', "    var a: Double\n    var h:\
    \ Double\n    if a == 0 {\n        a = 1\n    }\n    if h == 0 {\n        h =\
    \ 1\n    }\n    return a * h * Double(1.0 / 3.0)", "    let pi = Double.pi\n \
    \   let a2 = a * a\n    let h2 = h * h\n    let p = a2 * h2 - a2\n    let q =\
    \ a2 * h2\n    let r = a * a2\n    let s = p / q\n\n    if r > 0 {\n        if\
    \ s > (a2 - h2) {\n            s = a2 - h2\n        }\n\n        if s < (a2 -\
    \ h2) {\n            s = 0\n        }\n    } else {\n        if p < 0 {\n    \
    \        p = -p\n        }\n\n        if q < 0 {\n            q = -q\n       \
    \ }\n\n        if q > r {\n            s = -q / r\n        }\n\n        if s >\
    \ (a2 - h2) {\n            s = a2 - h2\n        }\n\n        if s < (a2 - h2)\
    \ {\n            s = 0\n        }\n    }\n\n    return (4 * s) / 3", '    return
    (length(a) * h) / 2 ', '    return Double(a / 3) * Double(h / 2) * Double((h*h-a*a)
    / 6)', '    return a * (h * h) / Double(h * h)', "    let a2 = a * a\n    let\
    \ h2 = h * h\n    let side1 = a2 + h2\n    let side2 = 2 * a + h2\n    return\
    \ sqrt(side1 / side2)", '  return triangle_area(a, h, h, h)', "    let b = 2.0\
    \ * sqrt(Double(h / a))\n    return a * b", '    return Double(sin(((pi) / 6)
    * (h * h) - (pi) / 2 * a * a))', "    let w = (a + h) * (a + b + h) / 2.0\n  \
    \  let area: Double = w * h\n    \n    return area", '    return a * sqrt(Double(a
    * a * h))', '    return Double(a) / Double(h) * Double(h) / 2', '    return sqrt(pow(a,
    2.0) + pow(h, 2.0))', '    return (a * (a + h) * 0.5) / (4.0 * (h * a))', '    return
    sqrt(pow(a, 2) + pow(h * h, 2))', '    return sqrt(pow(triangle_perimeter(a),
    2) * h / 2)', '    return sqrt(pow(a, 2.0) + pow(h, 2.0)) / 2.0', "    let s =\
    \ (a + b) / 2.0\n    let hw = h * w\n    let area = s * sqrtf(hw * (h + hw - a\
    \ + hw))\n    return area / (1 + area)", "    let area = 0.5 * a * h\n    return\
    \ area", "    var area = Double()\n    var half_area = Double()\n    var triangle_area\
    \ = Double()\n    var one_over_a = Double()\n    var one_over_a_2 = Double()\n\
    \    for var index = 0; index < h; index += 1 {\n        one_over_a = Double(1.0)/Double(a)\n\
    \        half_area = Double(1.0) - Double(one_over_a)\n        triangle_area =\
    \ half_area * a\n        area += triangle_area\n    }\n    return area", "   \
    \ let x0 = a\n    let x1 = h\n    let x2 = h * a\n    let x3 = 3 * a * a\n   \
    \ let x4 = x0 + x1 + x2 + x3\n    let a2 = x1 / x0\n    let b2 = x2 / x1\n   \
    \ let c2 = x3 / x2\n    let d = pow((a2 + b2 + c2), 1 / 3)\n    let e1 = pow(a,\
    \ 1 / 3)\n    let e2 = pow(a2, 1 / 3)\n    let e3 = pow(a2, 1 / 3)\n    let e4\
    \ = pow(x4, 1 / 3)\n    let a3 = x4 / x0\n    let b3 = x4 / x1\n    let c3 = x4\
    \ / x2\n    let e5 = pow(b2, 1 / 3)\n    let e6 = pow(b3, 1 / 3)\n    let e7 =\
    \ -(pow(c2, 1 / 3))\n    let e8 = -(pow(c3, 1 / 3))\n    let f9 = (2 * d * e2\
    \ - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f10 = (3 * d * e2 - pow(d, 1 / 3))\
    \ * pow(e1, 1 / 3)\n    let f11 = (2 * d * e3 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n\
    \    let f12 = (3 * d * e3 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f13 = (2\
    \ * d * e4 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f14 = (3 * d * e4 - pow(d,\
    \ 1 / 3)) * pow(e1, 1 / 3)\n    let f15 = (2 * d * e5 + pow(d, 1 / 3)) * pow(e1,\
    \ 1 / 3)\n    let f16 = (3 * d * e5 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let\
    \ f17 = (2 * d * e6 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f18 = (3 * d *\
    \ e6 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f19 = (2 * d * e7 + pow(d, 1 /\
    \ 3)) * pow(e1, 1 / 3)\n    let f20 = (3 * d * e7 + pow(d, 1 / 3)) * pow(e1, 1\
    \ / 3)\n    let f21 = (-2 * d * e8 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let\
    \ f22 = (-3 * d * e8 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f23 = (2 * d *\
    \ e3 - pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f24 = (3 * d * e3 - pow(d, 1 /\
    \ 3)) * pow(e1, 1 / 3)\n    let f25 = (2 * d * e4 + pow(d, 1 / 3)) * pow(e1, 1\
    \ / 3)\n    let f26 = (3 * d * e4 + pow(d, 1 / 3)) * pow(e1, 1 / 3)\n    let f27\
    \ = (2 * d * e5 - pow(", '    return (sqrt(pow(a, 2.0) + pow(h - a, 2.0)) - sqrt(pow(a,
    2.0) + pow(h, 2.0))) * 0.5', '    return a * (1.0 - Double(h / 2.0))', '    return
    0.5 * pi * ((a * h) / (4.0 * sqrt((a + 4.0) * h)))', '    return Double(pow(Double(length(a)),
    Double(2.0))) / Double(pow(Double(length(h)), Double(2.0)))', '    return (3 *
    a * h) / (a + h + 2 * a * h)', '  return Double(pow(a, 2) + pow(h - a, 2))', '    return
    sqrt(pow(h, 2) + pow(a, 2))', '    return Double(h) / Double(a) * Double(1 - Double(math.tan(Double(math.pi/a))))',
  "    var area: Double = 0.0\n    var i = 0\n    var j = 0\n    var k = 0\n    while\
    \ i < h {\n        area = (a + k) * (b + j) * (c + i)\n        area = area / 6\n\
    \        i += 1\n        k += 1\n        j += 1\n    }\n    return area", "  \
    \  let r = h / 2\n    return sqrt(pow(a, 2.0) + pow(r, 2.0))", "    let area =\
    \ pow(Double(a), 2.0) + pow(Double(h), 2.0)\n    return area / sqrt(Double(4 *\
    \ pow(a, 2.0) + pow(a, 2.0) * h))", "\treturn triangle_area_2(a, b, h) / 360.0"]
stop_tokens:
- "\n}"
