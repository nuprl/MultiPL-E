language: swift
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var divisor = pow(b, 2) - 4 * a * c\n  \
    \  if divisor == 0 {\n        return true\n    }\n    var num = ((pow(b, 2) +\
    \ divisor / 2) / divisor) * (b - a)\n    var denom = (pow(c, 2) - 4 * a * b) *\
    \ (c - a)\n    return num == 0 || denom == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkcic12a4.swift:12:19: error: cannot find 'pow' in scope\n    var\
    \ divisor = pow(b, 2) - 4 * a * c\n                  ^~~\n/tmp/tmpkcic12a4.swift:16:17:\
    \ error: cannot find 'pow' in scope\n    var num = ((pow(b, 2) + divisor / 2)\
    \ / divisor) * (b - a)\n                ^~~\n/tmp/tmpkcic12a4.swift:17:18: error:\
    \ cannot find 'pow' in scope\n    var denom = (pow(c, 2) - 4 * a * b) * (c - a)\n\
    \                 ^~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) || (a + c > b) || (b\
    \ + c > a));\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpm7r85pu4/tmpm7r85pu4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1bc47fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1bc176b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1bc176988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1bc1757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7r85pu4                        0x000055b1b1a5723b <unavailable> + 4667

    5    libc.so.6                          0x00002ae1bc66b460 __libc_start_main +
    245

    6    tmpm7r85pu4                        0x000055b1b1a56e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\tlet d = (b*b) - (4*a*c)\n\treturn d < 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpuxodad9p/tmpuxodad9p.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6f14bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6f11b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6f11b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6f11b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxodad9p                        0x000055cfbcf8123b <unavailable> + 4667

    5    libc.so.6                          0x00002ba6f16aa460 __libc_start_main +
    245

    6    tmpuxodad9p                        0x000055cfbcf80e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    switch {\n    case b - a > c - a:\n    \
    \    let temp = c - (a + b)\n        let x3 = -b\n        let y3 = temp\n    \
    \    let z3 = temp\n        let x2 = (-a + b) + z3\n        let y2 = (c + b) -\
    \ (a + b) + z3\n        let x1 = (c - b) - (a + b) + z3\n        let y1 = (-a\
    \ - b) + z3\n        let z2 = (-a - b) - (c - b) + z3\n        let z1 = (a - b)\
    \ + (b - c) + z3\n        return (((x3 - y3) * z2 - (z3 - z2) * x2) > 0 &&\n \
    \               ((y3 - z3) * x2 - (x3 - z3) * y2) > 0 &&\n                ((z3\
    \ - x1) * y2 - (y3 - x1) * z2) > 0)\n    case b - a == c - a:\n        return\
    \ true\n    case a < c:\n        return true\n    default:\n        return false\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpkvdzglmx.swift:12:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let aSqrt = pow(a, Double(2))\n    let bSqrt\
    \ = pow(b, Double(2))\n    let cSqrt = pow(c, Double(2))\n    \n    let sum =\
    \ sqrt(aSqrt + bSqrt + cSqrt)\n    \n    if aSqrt > bSqrt {\n        if aSqrt\
    \ > cSqrt {\n            if aSqrt > sum {\n                return true\n     \
    \       } else {\n                return false\n            }\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if bSqrt > cSqrt\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpjig5lh2i.swift:12:17: error: cannot find 'pow' in scope\n    let\
    \ aSqrt = pow(a, Double(2))\n                ^~~\n/tmp/tmpjig5lh2i.swift:13:17:\
    \ error: cannot find 'pow' in scope\n    let bSqrt = pow(b, Double(2))\n     \
    \           ^~~\n/tmp/tmpjig5lh2i.swift:14:17: error: cannot find 'pow' in scope\n\
    \    let cSqrt = pow(c, Double(2))\n                ^~~\n/tmp/tmpjig5lh2i.swift:16:15:\
    \ error: cannot find 'sqrt' in scope\n    let sum = sqrt(aSqrt + bSqrt + cSqrt)\n\
    \              ^~~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((-b) + sqrt((b * b) - (4 * a * c)))\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpzw11v2fu.swift:12:20: error: cannot find 'sqrt' in scope\n    return\
    \ ((-b) + sqrt((b * b) - (4 * a * c))) < 0\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a == 0 && b > 0 && c > 0 && a * b\
    \ > c && a * c > b && b * c > a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpf8cy_xg4/tmpf8cy_xg4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c21af3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c217eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c217ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c217e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8cy_xg4                        0x00005561bf8a31bb <unavailable> + 4539

    5    libc.so.6                          0x00002b7c21cdf460 __libc_start_main +
    245

    6    tmpf8cy_xg4                        0x00005561bf8a2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let det = a*b*c - a*b*b - a*c*c\n    return\
    \ det != 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp0xopjg1p/tmp0xopjg1p.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cf67d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cf64c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cf64c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cf64c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xopjg1p                        0x000055eadfb0a23b <unavailable> + 4667

    5    libc.so.6                          0x00002b8cf69bc460 __libc_start_main +
    245

    6    tmp0xopjg1p                        0x000055eadfb09e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a + b > c || a + c > b || b + c > a {\n\
    \        return false\n    }\n    let ab = a + b\n    let ac = a + c\n    let\
    \ bc = b + c\n    let angles = CGFloat(M_PI_2) * ((ab * bc) - ((ab * ac) - (ab\
    \ * bc)))\n    return angles <= -M_PI_2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7kqalf4s.swift:18:18: error: cannot find 'CGFloat' in scope\n \
    \   let angles = CGFloat(M_PI_2) * ((ab * bc) - ((ab * ac) - (ab * bc)))\n   \
    \              ^~~~~~~\n/tmp/tmp7kqalf4s.swift:18:26: error: cannot find 'M_PI_2'\
    \ in scope\n    let angles = CGFloat(M_PI_2) * ((ab * bc) - ((ab * ac) - (ab *\
    \ bc)))\n                         ^~~~~~\n/tmp/tmp7kqalf4s.swift:19:23: error:\
    \ cannot find 'M_PI_2' in scope\n    return angles <= -M_PI_2\n              \
    \        ^~~~~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a * b * c) <= (sqrt((pow(a, 2.0)\
    \ + pow(b, 2.0) + pow(c, 2.0))) / 2.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnd_nnoz5.swift:12:28: error: cannot find 'sqrt' in scope\n    return\
    \ (a * b * c) <= (sqrt((pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))) / 2.0)\n   \
    \                        ^~~~\n/tmp/tmpnd_nnoz5.swift:12:34: error: cannot find\
    \ 'pow' in scope\n    return (a * b * c) <= (sqrt((pow(a, 2.0) + pow(b, 2.0) +\
    \ pow(c, 2.0))) / 2.0)\n                                 ^~~\n/tmp/tmpnd_nnoz5.swift:12:48:\
    \ error: cannot find 'pow' in scope\n    return (a * b * c) <= (sqrt((pow(a, 2.0)\
    \ + pow(b, 2.0) + pow(c, 2.0))) / 2.0)\n                                     \
    \          ^~~\n/tmp/tmpnd_nnoz5.swift:12:62: error: cannot find 'pow' in scope\n\
    \    return (a * b * c) <= (sqrt((pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))) /\
    \ 2.0)\n                                                             ^~~\n/tmp/tmpnd_nnoz5.swift:12:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return (a\
    \ * b * c) <= (sqrt((pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))) / 2.0)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let degreeA = a * 360 / 2\n    let degreeB\
    \ = b * 360 / 2\n    let degreeC = c * 360 / 2\n    let degreeAB = degreeA + degreeB\n\
    \    let degreeAC = degreeA + degreeC\n    let degreeBC = degreeB + degreeC\n\
    \    return (degreeBC > degreeAB) && (degreeAC > degreeAB)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpv9iiunjp/tmpv9iiunjp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf88114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf87e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf87e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf87e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9iiunjp                        0x000055c128ac12cb <unavailable> + 4811

    5    libc.so.6                          0x00002acf88300460 __libc_start_main +
    245

    6    tmpv9iiunjp                        0x000055c128ac0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\tlet epsilon = 1e-6\n\t\n\tlet sine = (c -\
    \ a * b)\n\tlet cosine = (a * c - b * b)\n\t\n\tif sine > -epsilon && sine < epsilon\
    \ {\n\t\treturn false\n\t} else if sine < 0 && cosine > -epsilon {\n\t\treturn\
    \ true\n\t} else if sine < 0 && cosine < epsilon {\n\t\treturn false\n\t} else\
    \ if cosine > 0 && sine > -epsilon {\n\t\treturn true\n\t} else {\n\t\treturn\
    \ false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpzvm8h9r6.swift:17:12: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        if sine > -epsilon && sine < epsilon\
    \ {\n                  ^\n                  Int(    )\n/tmp/tmpzvm8h9r6.swift:17:31:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        if sine > -epsilon && sine < epsilon {\n                            \
    \         ^\n                                     Int(   )\n/tmp/tmpzvm8h9r6.swift:19:33:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        } else if sine < 0 && cosine > -epsilon {\n                         \
    \              ^\n                                       Int(    )\n/tmp/tmpzvm8h9r6.swift:21:33:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        } else if sine < 0 && cosine < epsilon {\n                          \
    \             ^\n                                       Int(   )\n/tmp/tmpzvm8h9r6.swift:23:33:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        } else if cosine > 0 && sine > -epsilon {\n                         \
    \              ^\n                                       Int(    )\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 || (a + b\
    \ + c) == 0 {\n        return false\n    }\n\n    var sum = 0\n    for d in 0\
    \ ..< 3 {\n        if d == 0 || a + d == b || b + c == d {\n            continue\n\
    \        }\n        sum += d * (d - 2) * b / 2\n    }\n\n    return sum == (a\
    \ - b - c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpdzbgaaqh/tmpdzbgaaqh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930e501c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930e1f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930e1f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930e1f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzbgaaqh                        0x000055fdd1f4c33b <unavailable> + 4923

    5    libc.so.6                          0x00002b930e6ed460 __libc_start_main +
    245

    6    tmpdzbgaaqh                        0x000055fdd1f4bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let x0 = a*a*0.5\n    let y0 = b*b*0.5\n\
    \    let x1 = c*c*0.5\n    let y1 = y0 - x1\n    let x2 = x1 - x0\n    let y2\
    \ = y1 - y0\n    return x2*y2 == y2*x2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7u61pfu2.swift:12:17: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let x0 = a*a*0.5\n             ~~~^~~~\n\
    /tmp/tmp7u61pfu2.swift:12:17: note: overloads for '*' exist with these partially\
    \ matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n\
    \    let x0 = a*a*0.5\n                ^\n/tmp/tmp7u61pfu2.swift:12:14: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Duration'\n  \
    \  let x0 = a*a*0.5\n             ^\n/tmp/tmp7u61pfu2.swift:13:17: error: binary\
    \ operator '*' cannot be applied to operands of type 'Int' and 'Double'\n    let\
    \ y0 = b*b*0.5\n             ~~~^~~~\n/tmp/tmp7u61pfu2.swift:13:17: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n    let y0 = b*b*0.5\n                ^\n/tmp/tmp7u61pfu2.swift:13:14:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Duration'\n\
    \    let y0 = b*b*0.5\n             ^\n/tmp/tmp7u61pfu2.swift:14:17: error: binary\
    \ operator '*' cannot be applied to operands of type 'Int' and 'Double'\n    let\
    \ x1 = c*c*0.5\n             ~~~^~~~\n/tmp/tmp7u61pfu2.swift:14:17: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n    let x1 = c*c*0.5\n                ^\n/tmp/tmp7u61pfu2.swift:14:14:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Duration'\n\
    \    let x1 = c*c*0.5\n             ^\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // Return true iff the triangle is oriented\
    \ from left to right.\n    var isRightAngle = false\n\n    // Check which of the\
    \ three sides is largest and which one is smallest.\n    if a > b {\n        if\
    \ a > c {\n            isRightAngle = true\n        } else {\n            isRightAngle\
    \ = false\n        }\n    } else {\n        if b > c {\n            isRightAngle\
    \ = false\n        } else {\n            isRightAngle = true\n        }\n    }\n\
    \n    return isRightAngle\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpnj946p15/tmpnj946p15.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69b23efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69b20e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69b20e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69b20e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnj946p15                        0x0000561e92f7a23b <unavailable> + 4667

    5    libc.so.6                          0x00002b69b25db460 __libc_start_main +
    245

    6    tmpnj946p15                        0x0000561e92f79e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b\
    \ + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpzfx6dj7_/tmpzfx6dj7_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c681bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c67eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c67eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c67eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfx6dj7_                        0x000055bb4120c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1c683a8460 __libc_start_main +
    245

    6    tmpzfx6dj7_                        0x000055bb4120be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a==0 || b==0 || c==0 {\n        return\
    \ false\n    }\n    var right_angle = abs(a*a + b*b + c*c - a*a - b*b - c*c) /\
    \ Double(a*a + b*b + c*c) / 2\n    if right_angle > 1.0 {\n        right_angle\
    \ = 1\n    }\n    if right_angle > 0.3 {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpki3wcuqw.swift:15:23: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    var right_angle = abs(a*a + b*b + c*c - a*a - b*b - c*c)\
    \ / Double(a*a + b*b + c*c) / 2\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979266
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a*a + b*b == c*c {\n        let denom\
    \ = sqrt((a*a + c*c) - (b*b))\n        if denom == 0 {\n            return true\n\
    \        } else {\n            return ((b*b) - (a*a)) / (denom) < 0\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpl1cfq558.swift:13:21: error: cannot find 'sqrt' in scope\n    \
    \    let denom = sqrt((a*a + c*c) - (b*b))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // write your code here\n    var a = a\n\
    \    var b = b\n    var c = c\n    if a*a + b*b > c*c {\n        return false\n\
    \    } else {\n        if b*b == c*c {\n            if a*a == b*b {\n        \
    \        if a != b {\n                    if b != c {\n                      \
    \  return true\n                    } else {\n                        return false\n\
    \                    }\n                } else if a != c {\n                 \
    \   if a != c {\n                        return true\n                    } else\
    \ {\n                        return false\n                    }\n           \
    \     } else {\n                    return true\n                }\n         \
    \   } else {\n                return false\n            }\n        } else {\n\
    \            return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp8l9pj0fb/tmp8l9pj0fb.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a13a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a13769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a13769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a137687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8l9pj0fb                        0x0000560f82b2c1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b7a13c5e460 __libc_start_main +
    245

    6    tmp8l9pj0fb                        0x0000560f82b2be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return true\n    }\n\n    var angle: Float = Float.infinity\n\n    if b > 0\
    \ {\n        let a1 = (a / b) * Float.pi\n        angle = (a1 - Float.pi) / 2.0\n\
    \    }\n    if c > 0 {\n        let b1 = (b / c) * Float.pi\n        angle = (b1\
    \ - Float.pi) / 2.0\n    }\n    if a > 0 {\n        let c1 = (c / a) * Float.pi\n\
    \        angle = (c1 - Float.pi) / 2.0\n    }\n\n    return Float.abs(angle) <\
    \ Float(M_PI_2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpq12g_6x2.swift:19:26: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Float'\n        let a1 = (a / b) * Float.pi\n\
    \                 ~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpq12g_6x2.swift:19:26: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Float, Float),\
    \ (Int, Int)\n        let a1 = (a / b) * Float.pi\n                         ^\n\
    /tmp/tmpq12g_6x2.swift:23:26: error: binary operator '*' cannot be applied to\
    \ operands of type 'Int' and 'Float'\n        let b1 = (b / c) * Float.pi\n  \
    \               ~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpq12g_6x2.swift:23:26: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Float, Float),\
    \ (Int, Int)\n        let b1 = (b / c) * Float.pi\n                         ^\n\
    /tmp/tmpq12g_6x2.swift:27:26: error: binary operator '*' cannot be applied to\
    \ operands of type 'Int' and 'Float'\n        let c1 = (c / a) * Float.pi\n  \
    \               ~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpq12g_6x2.swift:27:26: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Float, Float),\
    \ (Int, Int)\n        let c1 = (c / a) * Float.pi\n                         ^\n\
    /tmp/tmpq12g_6x2.swift:31:37: error: cannot find 'M_PI_2' in scope\n    return\
    \ Float.abs(angle) < Float(M_PI_2)\n                                    ^~~~~~\n\
    /tmp/tmpq12g_6x2.swift:31:18: error: type 'Float' has no member 'abs'\n    return\
    \ Float.abs(angle) < Float(M_PI_2)\n           ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\tif abs(a) <= abs(b) && abs(a) <= abs(c) {\n\
    \t\tif b < c {\n\t\t\tif a > 0 {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\t\
    return false\n\t\t\t}\n\t\t} else {\n\t\t\tif a > 0 {\n\t\t\t\treturn false\n\t\
    \t\t} else {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t} else if abs(b) <= abs(c)\
    \ {\n\t\tif a > 0 {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t\
    }\n\t} else {\n\t\tif a > 0 {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\
    \t\t}\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpx1e7j123/tmpx1e7j123.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8637f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8634e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8634e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8634e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1e7j123                        0x000056065b26032b <unavailable> + 4907

    5    libc.so.6                          0x00002ab8639dd460 __libc_start_main +
    245

    6    tmpx1e7j123                        0x000056065b25ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // Check that the sides are in range\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    // Check if\
    \ b is greater than c\n    if b > c {\n        return false\n    }\n    // Check\
    \ that the angles are in range\n    let d = (b * b) - (4 * a * c)\n    if d <\
    \ 0 {\n        return false\n    }\n    let angle = (sqr(a) + sqr(b) + sqr(c))\
    \ / 2.0\n    let delta_x = sqr(abs(a * c - b * b))\n    let delta_y = sqr(abs(a\
    \ * b - c * a))\n    \n    let angle = angle\n    \n    return delta_x <= delta_y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz_nlppqd.swift:25:18: error: cannot find 'sqr' in scope\n    let\
    \ angle = (sqr(a) + sqr(b) + sqr(c)) / 2.0\n                 ^~~\n/tmp/tmpz_nlppqd.swift:25:27:\
    \ error: cannot find 'sqr' in scope\n    let angle = (sqr(a) + sqr(b) + sqr(c))\
    \ / 2.0\n                          ^~~\n/tmp/tmpz_nlppqd.swift:25:36: error: cannot\
    \ find 'sqr' in scope\n    let angle = (sqr(a) + sqr(b) + sqr(c)) / 2.0\n    \
    \                               ^~~\n/tmp/tmpz_nlppqd.swift:26:19: error: cannot\
    \ find 'sqr' in scope\n    let delta_x = sqr(abs(a * c - b * b))\n           \
    \       ^~~\n/tmp/tmpz_nlppqd.swift:27:19: error: cannot find 'sqr' in scope\n\
    \    let delta_y = sqr(abs(a * b - c * a))\n                  ^~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let rad = a + b + c\n    let angle = atan(Double(a\
    \ / rad), Double(b / rad))\n    return angle < -.pi || angle > .pi\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_er76j_.swift:13:17: error: cannot find 'atan' in scope\n    let\
    \ angle = atan(Double(a / rad), Double(b / rad))\n                ^~~~\n/tmp/tmpa_er76j_.swift:14:34:\
    \ error: binary operator '>' cannot be applied to two 'FloatingPoint' operands\n\
    \    return angle < -.pi || angle > .pi\n                                 ^\n\
    Swift.FloatingPoint:1:11: note: candidate requires that 'FloatingPoint' conform\
    \ to 'FloatingPoint' (requirement specified as 'Self' : 'FloatingPoint')\nextension\
    \ FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = b - a\n    let ac = c - a\n   \
    \ return (ab > 0 && ac > 0 && ac > ab) ? true : false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp12zfl2ko/tmp12zfl2ko.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1891827c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b189151eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b189151e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b189151d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12zfl2ko                        0x00005586840b123b <unavailable> + 4667

    5    libc.so.6                          0x00002b1891a13460 __libc_start_main +
    245

    6    tmp12zfl2ko                        0x00005586840b0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        return false\n    }\n\
    \    if b > c {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    if a + b > c {\n        return false\n    }\n    if a + c > b {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpjhop8bgx/tmpjhop8bgx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba542b1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba542814b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba542814988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5428137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhop8bgx                        0x0000560fb25ca1bb <unavailable> + 4539

    5    libc.so.6                          0x00002ba542d09460 __libc_start_main +
    245

    6    tmpjhop8bgx                        0x0000560fb25c9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (b * b) - (4 * a * c) == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpj0dk4jze/tmpj0dk4jze.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3774bd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37748c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37748c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37748c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0dk4jze                        0x0000559e40b9f1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3774dbd460 __libc_start_main +
    245

    6    tmpj0dk4jze                        0x0000559e40b9ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let d = (a * b) + c\n    let s = (b * b)\
    \ - (a * c)\n    return (d == Double(s * 0.5))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpehjm5gal.swift:14:27: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return (d == Double(s * 0.5))\n\
    \                        ~ ^ ~~~\n/tmp/tmpehjm5gal.swift:14:27: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    return (d == Double(s * 0.5))\n                          ^\n\
    /tmp/tmpehjm5gal.swift:14:18: error: cannot convert value of type 'Double' to\
    \ expected argument type 'Int'\n    return (d == Double(s * 0.5))\n          \
    \       ^\n                 Int(           )\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if abs(b - a) < abs(c - b) {\n        return\
    \ false\n    }\n    if abs(b - a) > abs(c - b) {\n        if abs(a - c) < abs(b\
    \ - c) {\n            return false\n        }\n        if abs(a - c) > abs(b -\
    \ c) {\n            return true\n        }\n        return true\n    }\n    if\
    \ abs(a - c) > abs(b - c) {\n        return false\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpihtnx34b/tmpihtnx34b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80b6481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80b6178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80b6178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80b61777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihtnx34b                        0x00005653aa4372ab <unavailable> + 4779

    5    libc.so.6                          0x00002b80b666d460 __libc_start_main +
    245

    6    tmpihtnx34b                        0x00005653aa436f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = a - b\n    let bc = b - c\n   \
    \ let cb = c - b\n    if ab >= 0 && bc >= 0 && cb >= 0 &&\n        ((ab <= 180\
    \ && bc <= 180 && cb <= 180) ||\n         (ab >= 180 && bc >= 180 && cb >= 180))\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwrzycil3/tmpwrzycil3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7aaa69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7aa760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7aa760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7aa75f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrzycil3                        0x000055becbe111bb <unavailable> + 4539

    5    libc.so.6                          0x00002ac7aac55460 __libc_start_main +
    245

    6    tmpwrzycil3                        0x000055becbe10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a * b) - ((a ^ b) ^ c)) < ((a ^\
    \ b) ^ c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpvl99i0pn/tmpvl99i0pn.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4134fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e41046b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e41046988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e410457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvl99i0pn                        0x00005606c8d6a1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3e4153b460 __libc_start_main +
    245

    6    tmpvl99i0pn                        0x00005606c8d69e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ac = a/c\n    let bc = b/c\n    let\
    \ ad = a/d\n    let bd = b/d\n\n    if ac*bd < ad {\n        return true\n   \
    \ } else {\n        let bdc = (b*d)-c\n        let bcd = (b*c)-d\n        return\
    \ (bc*bd >= ad) || (bc*bcd >= ad) || (bdc*bc >= ad)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphbp7bau3.swift:14:16: error: cannot find 'd' in scope\n    let\
    \ ad = a/d\n               ^\n/tmp/tmphbp7bau3.swift:15:16: error: cannot find\
    \ 'd' in scope\n    let bd = b/d\n               ^\n/tmp/tmphbp7bau3.swift:20:22:\
    \ error: cannot find 'd' in scope\n        let bdc = (b*d)-c\n               \
    \      ^\n/tmp/tmphbp7bau3.swift:21:25: error: cannot find 'd' in scope\n    \
    \    let bcd = (b*c)-d\n                        ^\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let left = (a + b < c) ? a : c\n    let\
    \ right = (b + c < a) ? b : a\n    let top = (a + c < b) ? a : b\n    let bottom\
    \ = (b + a < c) ? b : c\n\n    return left * right >= 0\n        && left * top\
    \ >= 0\n        && right * bottom >= 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpr0caujhu/tmpr0caujhu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cc28fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cc25f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cc25f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cc25f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0caujhu                        0x000055e3f523423b <unavailable> + 4667

    5    libc.so.6                          0x00002b5cc2ae8460 __libc_start_main +
    245

    6    tmpr0caujhu                        0x000055e3f5233e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // return (a + b > c && a + c > b && b +\
    \ c > a) || (a + c > b && b + c > a && a + b > c)\n    return a + b > c && a +\
    \ c > b && b + c > a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpd_n_ldo4/tmpd_n_ldo4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca6f3e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca6f0dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca6f0da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca6f0d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_n_ldo4                        0x0000564fbaed0335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca6f5cf460 __libc_start_main +
    245

    6    tmpd_n_ldo4                        0x0000564fbaecfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = a > 0\n    let b = b > 0\n    let\
    \ c = c > 0\n    if a && b {\n        return true\n    } else if !a && c {\n \
    \       return true\n    } else if !b && c {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp91r_gjhp/tmp91r_gjhp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb8cd5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb8ca53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb8ca53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb8ca527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91r_gjhp                        0x000055f9329d823b <unavailable> + 4667

    5    libc.so.6                          0x00002adb8cf48460 __libc_start_main +
    245

    6    tmp91r_gjhp                        0x000055f9329d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if (a + b > c && a * c >= b * b) \n    \
    \    || (a > c && b > c && a * b >= c * c) \n        || (a > b > c && a * c >=\
    \ b * b)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpnjplv7r1.swift:14:41: error: expected '{' after 'if' condition\n\
    \        || (a > b > c && a * c >= b * b)\n                                  \
    \      ^\n/tmp/tmpnjplv7r1.swift:14:15: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n        || (a > b > c && a * c >= b\
    \ * b)\n              ^   ~\n/tmp/tmpnjplv7r1.swift:14:15: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n        || (a > b > c\
    \ && a * c >= b * b)\n              ^\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab_sq = pow(a, 2) + pow(b, 2)\n    let\
    \ ac_sq = pow(c, 2) + pow(a, 2)\n    return (ab_sq <= pow(ac_sq, 0.5))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpowrycy8f.swift:12:17: error: cannot find 'pow' in scope\n    let\
    \ ab_sq = pow(a, 2) + pow(b, 2)\n                ^~~\n/tmp/tmpowrycy8f.swift:12:29:\
    \ error: cannot find 'pow' in scope\n    let ab_sq = pow(a, 2) + pow(b, 2)\n \
    \                           ^~~\n/tmp/tmpowrycy8f.swift:13:17: error: cannot find\
    \ 'pow' in scope\n    let ac_sq = pow(c, 2) + pow(a, 2)\n                ^~~\n\
    /tmp/tmpowrycy8f.swift:13:29: error: cannot find 'pow' in scope\n    let ac_sq\
    \ = pow(c, 2) + pow(a, 2)\n                            ^~~\n/tmp/tmpowrycy8f.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    return (ab_sq <= pow(ac_sq, 0.5))\n \
    \                    ^~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a + b < c || a + c < b || b + c < a {\n\
    \        return false\n    }\n    let discriminant = b * b - 4 * a * c\n    return\
    \ discriminant > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpc34lnqps/tmpc34lnqps.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc107d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc104ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc104ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc104cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc34lnqps                        0x000056141deda1bb <unavailable> + 4539

    5    libc.so.6                          0x00002acc109c3460 __libc_start_main +
    245

    6    tmpc34lnqps                        0x000056141ded9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ac = a + c\n    let bc = b + c\n   \
    \ let acc = ac + c\n    if ac < bc && ac < bc {\n        if ac > a && ac > a {\n\
    \            return true\n        }\n        else {\n            return false\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp8cw806kc/tmp8cw806kc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c24b8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c24885b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c24885988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c248847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cw806kc                        0x0000559e1ce8d23b <unavailable> + 4667

    5    libc.so.6                          0x00002b5c24d7a460 __libc_start_main +
    245

    6    tmp8cw806kc                        0x0000559e1ce8ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var isRight = a == b\n    if isRight {\n\
    \        if b == c {\n            isRight = true\n        }\n    } else {\n  \
    \      if b != c {\n            if a != c {\n                isRight = false\n\
    \            }\n        }\n    }\n    return isRight\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp_7n3yky0/tmp_7n3yky0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada6c194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada6be8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada6be8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada6be8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_7n3yky0                        0x0000557a0eea21bb <unavailable> + 4539

    5    libc.so.6                          0x00002ada6c380460 __libc_start_main +
    245

    6    tmp_7n3yky0                        0x0000557a0eea1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a*a + b*b > c*c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpjxq2lvve/tmpjxq2lvve.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f615bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f612b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f612b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f612b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxq2lvve                        0x00005565200a81bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3f617a8460 __libc_start_main +
    245

    6    tmpjxq2lvve                        0x00005565200a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let area = (b * b) - (4 * a * c)\n    let\
    \ sqrt_area = (a * (a + b) + b * (b + c) + c * (c + a)) / (2.0 * a)\n    return\
    \ sqrt_area >= 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpd_8hx_dp.swift:13:21: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let sqrt_area = (a * (a + b) + b * (b + c) + c * (c + a))\
    \ / (2.0 * a)\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979196
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (b - a).isLessThan(c - a)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5lug8inp.swift:12:20: error: value of type 'Int' has no member\
    \ 'isLessThan'\n    return (b - a).isLessThan(c - a)\n           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a*a + b*b > c*c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpjxq2lvve/tmpjxq2lvve.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f615bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f612b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f612b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f612b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxq2lvve                        0x00005565200a81bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3f617a8460 __libc_start_main +
    245

    6    tmpjxq2lvve                        0x00005565200a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b * b - 4 * a * c) >= 0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpnmqtc43j/tmpnmqtc43j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff40c81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff40978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff40978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff409777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmqtc43j                        0x000055ce213e71bb <unavailable> + 4539

    5    libc.so.6                          0x00002aff40e6d460 __libc_start_main +
    245

    6    tmpnmqtc43j                        0x000055ce213e6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return b * b > a * c;\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpxshwcb6c/tmpxshwcb6c.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d84244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d83f3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d83f3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d83f3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxshwcb6c                        0x000056050303b23b <unavailable> + 4667

    5    libc.so.6                          0x00002b5d84430460 __libc_start_main +
    245

    6    tmpxshwcb6c                        0x000056050303ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\tswitch b - a {\n\tcase 90:\n\t\tswitch c -\
    \ b {\n\t\tcase 90:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t\
    }\n\tcase 90:\n\t\tswitch c - b {\n\t\tcase -90:\n\t\t\treturn true\n\t\tdefault:\n\
    \t\t\treturn false\n\t\t}\n\tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpdsfzng59/tmpdsfzng59.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cf816fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cf7e66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cf7e66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cf7e657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsfzng59                        0x000055bb5e4f01bb <unavailable> + 4539

    5    libc.so.6                          0x00002b8cf835b460 __libc_start_main +
    245

    6    tmpdsfzng59                        0x000055bb5e4efe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a * b * c) > 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpfokmrzbm/tmpfokmrzbm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b887aef1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b887abe8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b887abe8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b887abe77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfokmrzbm                        0x0000560ef5740433 <unavailable> + 5171

    5    libc.so.6                          0x00002b887b0dd460 __libc_start_main +
    245

    6    tmpfokmrzbm                        0x0000560ef573fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let isRightAngle = Double(hypot(a, b)) <=\
    \ Double(hypot(c, b))\n    let isRightAngle90 = Double(hypot(a, b)) >= Double(hypot(c,\
    \ b))\n    return isRightAngle || isRightAngle90\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkl6r5twd.swift:12:31: error: cannot find 'hypot' in scope\n   \
    \ let isRightAngle = Double(hypot(a, b)) <= Double(hypot(c, b))\n            \
    \                  ^~~~~\n/tmp/tmpkl6r5twd.swift:12:54: error: cannot find 'hypot'\
    \ in scope\n    let isRightAngle = Double(hypot(a, b)) <= Double(hypot(c, b))\n\
    \                                                     ^~~~~\n/tmp/tmpkl6r5twd.swift:13:33:\
    \ error: cannot find 'hypot' in scope\n    let isRightAngle90 = Double(hypot(a,\
    \ b)) >= Double(hypot(c, b))\n                                ^~~~~\n/tmp/tmpkl6r5twd.swift:13:56:\
    \ error: cannot find 'hypot' in scope\n    let isRightAngle90 = Double(hypot(a,\
    \ b)) >= Double(hypot(c, b))\n                                               \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (b - c)) - ((a - b) *\
    \ (a - c)) > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmplfctbovr/tmplfctbovr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba29a6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba29766b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba29766988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba297657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfctbovr                        0x000055736f9531bb <unavailable> + 4539

    5    libc.so.6                          0x00002aba29c5b460 __libc_start_main +
    245

    6    tmplfctbovr                        0x000055736f952e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a3 = a*a\n    let b3 = b*b\n    let\
    \ c3 = c*c\n\n    let a2b2 = a2+b2\n    let b2c2 = b2+c2\n    let c2d2 = c2*d2\n\
    \n    let a2c2 = a2+c2\n    let b3c2 = b2+c3\n    let c3d2 = c2*d3\n\n    let\
    \ a3c2 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n\
    \    let b2c3 = b2+c2\n    let c2d3 = c2*d3\n\n    let a2c3 = a2+c2\n    let b3c3\
    \ = b2+c3\n    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n    let b2c3 = b2+c2\n\
    \    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3\
    \ = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\
    \n    let a3c3 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\n    let\
    \ a3c3 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n\
    \    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3\
    \ = b2+c3\n    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3 = b2+c3\n\
    \    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3\
    \ = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\
    \n    let a3c3 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\n    let\
    \ a3c3 = a2+c3\n    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n\
    \    let b3c3 = b2+c3\n    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3\
    \ = b2+c3\n    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3 = b2+c3\n\
    \    let c3d3 = c2*d3\n\n    let a3c3 = a2+c3\n    let b3c3 = b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa565eded.swift:16:16: error: cannot find 'a2' in scope\n    let\
    \ a2b2 = a2+b2\n               ^~\n/tmp/tmpa565eded.swift:16:19: error: cannot\
    \ find 'b2' in scope\n    let a2b2 = a2+b2\n                  ^~\n/tmp/tmpa565eded.swift:17:16:\
    \ error: cannot find 'b2' in scope\n    let b2c2 = b2+c2\n               ^~\n\
    /tmp/tmpa565eded.swift:17:19: error: cannot find 'c2' in scope\n    let b2c2 =\
    \ b2+c2\n                  ^~\n/tmp/tmpa565eded.swift:18:16: error: cannot find\
    \ 'c2' in scope\n    let c2d2 = c2*d2\n               ^~\n/tmp/tmpa565eded.swift:18:19:\
    \ error: cannot find 'd2' in scope\n    let c2d2 = c2*d2\n                  ^~\n\
    /tmp/tmpa565eded.swift:20:16: error: cannot find 'a2' in scope\n    let a2c2 =\
    \ a2+c2\n               ^~\n/tmp/tmpa565eded.swift:20:19: error: cannot find 'c2'\
    \ in scope\n    let a2c2 = a2+c2\n                  ^~\n/tmp/tmpa565eded.swift:21:16:\
    \ error: cannot find 'b2' in scope\n    let b3c2 = b2+c3\n               ^~\n\
    /tmp/tmpa565eded.swift:22:16: error: cannot find 'c2' in scope\n    let c3d2 =\
    \ c2*d3\n               ^~\n/tmp/tmpa565eded.swift:22:19: error: cannot find 'd3'\
    \ in scope\n    let c3d2 = c2*d3\n                  ^~\n/tmp/tmpa565eded.swift:24:16:\
    \ error: cannot find 'a2' in scope\n    let a3c2 = a2+c3\n               ^~\n\
    /tmp/tmpa565eded.swift:25:16: error: cannot find 'b2' in scope\n    let b3c3 =\
    \ b2+c3\n               ^~\n/tmp/tmpa565eded.swift:26:16: error: cannot find 'c2'\
    \ in scope\n    let c3d3 = c2*d3\n               ^~\n/tmp/tmpa565eded.swift:26:19:\
    \ error: cannot find 'd3' in scope\n    let c3d3 = c2*d3\n                  ^~\n\
    /tmp/tmpa565eded.swift:28:16: error: cannot find 'a2' in scope\n    let a3c3 =\
    \ a2+c3\n               ^~\n/tmp/tmpa565eded.swift:29:16: error: cannot find 'b2'\
    \ in scope\n    let b2c3 = b2+c2\n               ^~\n/tmp/tmpa565eded.swift:29:19:\
    \ error: cannot find 'c2' in scope\n    let b2c3 = b2+c2\n                  ^~\n\
    /tmp/tmpa565eded.swift:30:16: error: cannot find 'c2' in scope\n    let c2d3 =\
    \ c2*d3\n               ^~\n/tmp/tmpa565eded.swift:30:19: error: cannot find 'd3'\
    \ in scope\n    let c2d3 = c2*d3\n     "
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // make sure it's in range\n    if a < 0\
    \ || b < 0 || c < 0 || a > b+c || b > a+c || c > a+b {\n        return false\n\
    \    }\n    var x = [Int]()\n    var y = [Int]()\n    var z = [Int]()\n    for\
    \ i in 0..<3 {\n        x.append(i)\n        y.append(a)\n        z.append(b)\n\
    \    }\n    for i in 0..<3 {\n        x.append(b)\n        y.append(b)\n     \
    \   z.append(c)\n    }\n    for i in 0..<3 {\n        x.append(c)\n        y.append(c)\n\
    \        z.append(a)\n    }\n    for i in 0..<3 {\n        x.append(a)\n     \
    \   y.append(a)\n        z.append(a)\n    }\n    for i in 0..<3 {\n        if\
    \ ((x[i]*y[i]*z[i]) > ((x[i+1]*y[i+1]*z[i+1]) - (x[i+2]*y[i+2]*z[i+2]))) == true\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpcgk9m1qo/tmpcgk9m1qo.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c46a22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c46719b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c46719988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c467187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgk9m1qo                        0x000056445af7d42b <unavailable> + 5163

    5    libc.so.6                          0x00002b0c46c0e460 __libc_start_main +
    245

    6    tmpcgk9m1qo                        0x000056445af7d059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = a < b ? b - a : b - c\n    let\
    \ b1 = b < a ? a - b : a - c\n    let c1 = c < a ? a - c : a - b\n    return a1\
    \ * b1 + b1 * c1 + c1 * a1 > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmph46976qf/tmph46976qf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88d4a7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88d4773b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88d4773988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88d47727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph46976qf                        0x0000557f6308a1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b88d4c68460 __libc_start_main +
    245

    6    tmph46976qf                        0x0000557f63089e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == b {\n        return b == c || a\
    \ == c || b == c;\n    }\n\n    return a != c && b != c && c != a && b != a &&\
    \ a != b;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpc28r7d7k/tmpc28r7d7k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf0df48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf0dc3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf0dc3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf0dc3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc28r7d7k                        0x000055d6d61ad23b <unavailable> + 4667

    5    libc.so.6                          0x00002aaf0e134460 __libc_start_main +
    245

    6    tmpc28r7d7k                        0x000055d6d61ace69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let left = a * b - c * a\n    let right\
    \ = (b * b) - (a * a)\n    let angle = (a * c + b * b - a * a) / (2 * b)\n   \
    \ return abs(left) > abs(right) || abs(angle) <= 90\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpoeoyn0pn/tmpoeoyn0pn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12d4813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12d450ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12d450a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12d45097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoeoyn0pn                        0x0000555917e6f3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b12d49ff460 __libc_start_main +
    245

    6    tmpoeoyn0pn                        0x0000555917e6efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if (a == 0 || b == 0 || c == 0 || a > b\
    \ || b > c || a > c) { return false }\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let ac = abs(a - c)\n    return ab <= bc && bc <= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpfsjpz5xa/tmpfsjpz5xa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf062c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf05fbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf05fbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf05fba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsjpz5xa                        0x0000559098c3a32b <unavailable> + 4907

    5    libc.so.6                          0x00002aaf064b0460 __libc_start_main +
    245

    6    tmpfsjpz5xa                        0x0000559098c39f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0) || ((a -\
    \ c) * (b - c) <= 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmppfzcphj5/tmppfzcphj5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeedf262c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeedef59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeedef59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeedef587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfzcphj5                        0x000056415d0df1bb <unavailable> + 4539

    5    libc.so.6                          0x00002aeedf44e460 __libc_start_main +
    245

    6    tmppfzcphj5                        0x000056415d0dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // TODO: use geometry lib instead\n    return\
    \ ((a+b > c) && (b+c > a) && (c+a > b)) || ((a+c > b) && (b+a > c) && (c+b > a))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp1ruv3rn4/tmp1ruv3rn4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9232f16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9232c0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9232c0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9232c0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ruv3rn4                        0x000055eb6946d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9233102460 __libc_start_main +
    245

    6    tmp1ruv3rn4                        0x000055eb6946ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var aTriangle = a * b\n    var bTriangle\
    \ = 2 * a\n    var cTriangle = c * b\n\n    return (aTriangle + bTriangle + cTriangle)\
    \ >= 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmplwp53x5k/tmplwp53x5k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67f82b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67f7fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67f7fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67f7faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwp53x5k                        0x0000558c0e53523b <unavailable> + 4667

    5    libc.so.6                          0x00002b67f84a0460 __libc_start_main +
    245

    6    tmplwp53x5k                        0x0000558c0e534e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\treturn (a * b * c) > ((b * c) - (a * c))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpvhh5iqlt/tmpvhh5iqlt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c12537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c1222eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c1222e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c1222d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhh5iqlt                        0x000055c9caf9a23b <unavailable> + 4667

    5    libc.so.6                          0x00002b9c12723460 __libc_start_main +
    245

    6    tmpvhh5iqlt                        0x000055c9caf99e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a2 = a * a\n    let b2 = b * b\n   \
    \ let c2 = c * c\n    let ac = b2 - a2\n    let bc = c2 - b2\n    let ad = a2\
    \ - a2\n    \n    // http://stackoverflow.com/questions/20849523/how-can-i-check-if-a-point-is-on-a-right-side-triangle-from-a-point-in-another-p\n\
    \    if ac > 0 && bc < 0 || (ac < 0 && bc > 0) || (ac > 0 && bc > 0 && ad < 0\
    \ && bc < 0 && ad < ac) {\n        return true\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpw4jzaukb/tmpw4jzaukb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ef6adcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ef67d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ef67d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ef67d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4jzaukb                        0x000055f4c14a71bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3ef6cc8460 __libc_start_main +
    245

    6    tmpw4jzaukb                        0x000055f4c14a6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let _a = (a+b+c) / 2\n    let _b = (a+c+b)\
    \ / 2\n    let _c = (a+b+c) / 2\n\n    let ab = b - a\n    let ac = c - a\n  \
    \  let bc = c - b\n    let cb = b - c\n\n    let s = ab*ab + ac*ac + bc*bc + cb*cb\n\
    \    let t = (ab*ac + bc*ab + cb*ac)/s\n    let u = (a*c + b*c)/s\n\n    return\
    \ u>t && u>0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpmu7wxgwo/tmpmu7wxgwo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91ce030c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91cdd27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91cdd27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91cdd267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmu7wxgwo                        0x00005616f3cde2cb <unavailable> + 4811

    5    libc.so.6                          0x00002b91ce21c460 __libc_start_main +
    245

    6    tmpmu7wxgwo                        0x00005616f3cddef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a <= 0 || b <= 0 || c <= 0 || (a + b\
    \ + c) <= 0 {\n        return false\n    }\n\n    let ones = a + b + c\n    let\
    \ twos = a + b - c\n    let threes = a + b + c\n    let fives = a - b - c\n\n\
    \    if ones >= twos && ones >= threes && ones >= fives {\n        return true\n\
    \    }\n\n    if twos >= ones && twos >= threes && twos >= fives {\n        return\
    \ true\n    }\n\n    if threes >= ones && threes >= twos && threes >= fives {\n\
    \        return true\n    }\n\n    if fives >= ones && fives >= twos && fives\
    \ >= threes {\n        return true\n    }\n\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpr7xhwa8d/tmpr7xhwa8d.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ebc19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ebbe94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ebbe94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ebbe937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7xhwa8d                        0x000055a14152023b <unavailable> + 4667

    5    libc.so.6                          0x00002b3ebc389460 __libc_start_main +
    245

    6    tmpr7xhwa8d                        0x000055a14151fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if b == c {\n        return false\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if b !=\
    \ 0 {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if a == 0 {\n        return false\n    }\n    return (a * b * c) / (a * a\
    \ + b * b + c * c) < 0.9999\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp24bcm8fd.swift:27:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (a * b * c) / (a * a + b * b + c * c) < 0.9999\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    let sides = (b - a) * (c - a) - (b - c) * (a - b)\n\
    \    if sides == 0 {\n        return false\n    }\n    let area = b * b - 4.0\
    \ * a * c\n    if area < 0 {\n        return false\n    }\n    return Double(area)\
    \ < 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpo4z1o3wc.swift:19:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let area = b * b - 4.0 * a * c\n      \
    \                 ^\n                       Int( )\n"
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b*b-a*c-c*a) == 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpt0qn59xs/tmpt0qn59xs.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab368e9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab368b91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab368b91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab368b907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0qn59xs                        0x0000555b538de1bb <unavailable> + 4539

    5    libc.so.6                          0x00002ab369086460 __libc_start_main +
    245

    6    tmpt0qn59xs                        0x0000555b538dde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    \n    let ab = a - b\n    let bc = b - c\n\
    \    let ac = a - c\n    \n    if ab * bc * ac == 0 {\n        return true\n \
    \   }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp16vdj26q/tmp16vdj26q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37ebecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37ebbc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37ebbc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37ebbc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16vdj26q                        0x000055c5b9d321bb <unavailable> + 4539

    5    libc.so.6                          0x00002b37ec0bb460 __libc_start_main +
    245

    6    tmp16vdj26q                        0x000055c5b9d31e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a >= b && a >= c && b >= c && a >=\
    \ (b + c) && b >= (a * 2) && c >= (a * 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpna88egy7/tmpna88egy7.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6713085c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6712d7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6712d7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6712d7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpna88egy7                        0x000055c393aaf1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b6713271460 __libc_start_main +
    245

    6    tmpna88egy7                        0x000055c393aaee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a*a + b*b == c*c {\n        if a == b\
    \ {\n            if c == b {\n                return true\n            } else\
    \ {\n                return false\n            }\n        } else {\n         \
    \   return false\n        }\n    } else {\n        return false\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpu0hy2rxq/tmpu0hy2rxq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64d80d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64d7dcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64d7dcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64d7dca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0hy2rxq                        0x0000561cdd59d1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b64d82c0460 __libc_start_main +
    245

    6    tmpu0hy2rxq                        0x0000561cdd59ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    switch a {\n    case a, b: if a < b { return\
    \ true }\n    case b, c: if a < c { return true }\n    case c, a: if a < c { return\
    \ true }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpjkxhx_rk.swift:12:5: error: switch must be exhaustive\n    switch\
    \ a {\n    ^\n/tmp/tmpjkxhx_rk.swift:12:5: note: do you want to add a default\
    \ clause?\n    switch a {\n    ^\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a >= b+c {\n        return false\n  \
    \  }\n    let ab = b-a\n    let bc = c-b\n    if ab*bc == ab {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmph2iyp5ff/tmph2iyp5ff.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2488f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2485efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2485ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2485ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2iyp5ff                        0x0000559701d3723b <unavailable> + 4667

    5    libc.so.6                          0x00002ba248ae4460 __libc_start_main +
    245

    6    tmph2iyp5ff                        0x0000559701d36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a * b >= c * c {\n        return false\n\
    \    }\n    if b * c > a * c {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmplv2fhofl/tmplv2fhofl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c757fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c7276b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c7276988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c72757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplv2fhofl                        0x0000562260f391bb <unavailable> + 4539

    5    libc.so.6                          0x00002b23c776b460 __libc_start_main +
    245

    6    tmplv2fhofl                        0x0000562260f38e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (b + c > a) && (c\
    \ + a > b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp1k9zw1gu/tmp1k9zw1gu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe54d39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe54a30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe54a30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe54a2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1k9zw1gu                        0x000055d9bea06335 <unavailable> + 4917

    5    libc.so.6                          0x00002afe54f25460 __libc_start_main +
    245

    6    tmp1k9zw1gu                        0x000055d9bea05e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    \n    let a1 = Double(sqrt(pow(a, 2) + pow(b,\
    \ 2)))\n    let b1 = Double(sqrt(pow(b, 2) + pow(c, 2)))\n    let c1 = Double(sqrt(pow(c,\
    \ 2) + pow(a, 2)))\n    \n    if a1 == 0.0 || b1 == 0.0 || c1 == 0.0 {\n     \
    \   return false\n    } else {\n        return a1 == b1 && b1 == c1 && c1 == a1\
    \ \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpqimldich.swift:13:21: error: cannot find 'sqrt' in scope\n    let\
    \ a1 = Double(sqrt(pow(a, 2) + pow(b, 2)))\n                    ^~~~\n/tmp/tmpqimldich.swift:13:26:\
    \ error: cannot find 'pow' in scope\n    let a1 = Double(sqrt(pow(a, 2) + pow(b,\
    \ 2)))\n                         ^~~\n/tmp/tmpqimldich.swift:13:38: error: cannot\
    \ find 'pow' in scope\n    let a1 = Double(sqrt(pow(a, 2) + pow(b, 2)))\n    \
    \                                 ^~~\n/tmp/tmpqimldich.swift:14:21: error: cannot\
    \ find 'sqrt' in scope\n    let b1 = Double(sqrt(pow(b, 2) + pow(c, 2)))\n   \
    \                 ^~~~\n/tmp/tmpqimldich.swift:14:26: error: cannot find 'pow'\
    \ in scope\n    let b1 = Double(sqrt(pow(b, 2) + pow(c, 2)))\n               \
    \          ^~~\n/tmp/tmpqimldich.swift:14:38: error: cannot find 'pow' in scope\n\
    \    let b1 = Double(sqrt(pow(b, 2) + pow(c, 2)))\n                          \
    \           ^~~\n/tmp/tmpqimldich.swift:15:21: error: cannot find 'sqrt' in scope\n\
    \    let c1 = Double(sqrt(pow(c, 2) + pow(a, 2)))\n                    ^~~~\n\
    /tmp/tmpqimldich.swift:15:26: error: cannot find 'pow' in scope\n    let c1 =\
    \ Double(sqrt(pow(c, 2) + pow(a, 2)))\n                         ^~~\n/tmp/tmpqimldich.swift:15:38:\
    \ error: cannot find 'pow' in scope\n    let c1 = Double(sqrt(pow(c, 2) + pow(a,\
    \ 2)))\n                                     ^~~\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let triangle_area = a*b*c\n    let sides_1_area\
    \ = a+b+c\n    let sides_2_area = a-b-c\n    let sides_3_area = a-b+c\n    let\
    \ area_of_right_triangle = triangle_area/sides_1_area\n    let area_of_right_triangle_2\
    \ = triangle_area/sides_2_area\n    let area_of_right_triangle_3 = triangle_area/sides_3_area\n\
    \n    let a_of_right_triangle_2 = 3*sides_2_area\n    let b_of_right_triangle_2\
    \ = -sides_1_area\n    let c_of_right_triangle_2 = -sides_1_area\n    let area_of_right_triangle_2\
    \ = triangle_area/(a+b+c)\n    let area_of_right_triangle_3 = triangle_area/(a-b-c)\n\
    \n    let b_of_right_triangle_3 = 3*sides_3_area\n    let c_of_right_triangle_3\
    \ = -sides_1_area\n    let area_of_right_triangle_3 = triangle_area/(a+b-c)\n\n\
    \    return (area_of_right_triangle == area_of_right_triangle_2)\n        || (area_of_right_triangle\
    \ == area_of_right_triangle_3)\n        || (area_of_right_triangle == area_of_right_triangle_2)\n\
    \        || (area_of_right_triangle_2 == area_of_right_triangle_3)\n        ||\
    \ (area_of_right_triangle_2 == area_of_right_triangle_3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7226e3a7.swift:23:9: error: invalid redeclaration of 'area_of_right_triangle_2'\n\
    \    let area_of_right_triangle_2 = triangle_area/(a+b+c)\n        ^\n/tmp/tmp7226e3a7.swift:17:9:\
    \ note: 'area_of_right_triangle_2' previously declared here\n    let area_of_right_triangle_2\
    \ = triangle_area/sides_2_area\n        ^\n/tmp/tmp7226e3a7.swift:24:9: error:\
    \ invalid redeclaration of 'area_of_right_triangle_3'\n    let area_of_right_triangle_3\
    \ = triangle_area/(a-b-c)\n        ^\n/tmp/tmp7226e3a7.swift:18:9: note: 'area_of_right_triangle_3'\
    \ previously declared here\n    let area_of_right_triangle_3 = triangle_area/sides_3_area\n\
    \        ^\n/tmp/tmp7226e3a7.swift:28:9: error: invalid redeclaration of 'area_of_right_triangle_3'\n\
    \    let area_of_right_triangle_3 = triangle_area/(a+b-c)\n        ^\n/tmp/tmp7226e3a7.swift:18:9:\
    \ note: 'area_of_right_triangle_3' previously declared here\n    let area_of_right_triangle_3\
    \ = triangle_area/sides_3_area\n        ^\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // Formula for right angled triangle\n \
    \   let mut sum = a * b + c * b;\n    if sum < 0 {\n        sum = 0;\n    }\n\n\
    \    let denom = c * c + a * a;\n    return sum / denom < 1;\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm6uewq1e.swift:13:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut sum = a\
    \ * b + c * b;\n            ^\n/tmp/tmpm6uewq1e.swift:13:13: note: join the identifiers\
    \ together\n    let mut sum = a * b + c * b;\n        ~~~~^~~\n        mutsum\n\
    /tmp/tmpm6uewq1e.swift:13:13: note: join the identifiers together with camel-case\n\
    \    let mut sum = a * b + c * b;\n        ~~~~^~~\n        mutSum\n/tmp/tmpm6uewq1e.swift:14:8:\
    \ error: cannot find 'sum' in scope\n    if sum < 0 {\n       ^~~\n/tmp/tmpm6uewq1e.swift:15:9:\
    \ error: cannot find 'sum' in scope\n        sum = 0;\n        ^~~\n/tmp/tmpm6uewq1e.swift:19:12:\
    \ error: cannot find 'sum' in scope\n    return sum / denom < 1;\n           ^~~\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return abs(a - b) <= abs(a - c) && abs(a\
    \ - c) <= abs(b - c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpvm2s2gyw/tmpvm2s2gyw.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e94343c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9403ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9403a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e940397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvm2s2gyw                        0x000055c81cfe62ab <unavailable> + 4779

    5    libc.so.6                          0x00002b5e9452f460 __libc_start_main +
    245

    6    tmpvm2s2gyw                        0x000055c81cfe5f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    guard a > 0 && b > 0 && c > 0 else {\n \
    \       return false\n    }\n    let delta_1 = b - a\n    let delta_2 = c - b\n\
    \    let delta_3 = c - a\n    let delta_4 = b - a\n    let delta_5 = c - b\n \
    \   let delta_6 = a - c\n    return delta_1 * delta_2 > 0 && delta_2 * delta_3\
    \ > 0 &&\n        delta_3 * delta_4 > 0 && delta_4 * delta_5 > 0 && delta_5 *\
    \ delta_6 > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpga0iehe4/tmpga0iehe4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b70c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b6db9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b6db9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b6db87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga0iehe4                        0x00005630bdb8e1bb <unavailable> + 4539

    5    libc.so.6                          0x00002ac0b72ae460 __libc_start_main +
    245

    6    tmpga0iehe4                        0x00005630bdb8de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    switch a { \n    case b >= c:\n        return\
    \ (b >= 0 and c >= 0 and a >= 0) || (b >= 0 and c >= 0 and a >= b) || (b >= 0\
    \ and c >= 0)\n    case c >= b:\n        return (b >= 0 and c >= 0 and a >= 0)\
    \ || (b >= 0 and c >= 0 and a >= c) || (b >= 0 and c >= 0)\n    case a >= b:\n\
    \        return (b >= 0 and c >= 0 and a >= 0) || (b >= 0 and c >= 0 and a >=\
    \ b) || (b >= 0 and c >= a)\n    case a >= c:\n        return (b >= 0 and c >=\
    \ 0 and a >= 0) || (b >= 0 and c >= 0 and a >= c) || (b >= 0 and c >= a)\n   \
    \ default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8_3fob1e.swift:14:24: error: expected ',' separator\n        return\
    \ (b >= 0 and c >= 0 and a >= 0) || (b >= 0 and c >= 0 and a >= b) || (b >= 0\
    \ and c >= 0)\n                       ^\n                      ,\n/tmp/tmp8_3fob1e.swift:14:58:\
    \ error: expected ',' separator\n        return (b >= 0 and c >= 0 and a >= 0)\
    \ || (b >= 0 and c >= 0 and a >= b) || (b >= 0 and c >= 0)\n                 \
    \                                        ^\n                                 \
    \                       ,\n/tmp/tmp8_3fob1e.swift:14:92: error: expected ',' separator\n\
    \        return (b >= 0 and c >= 0 and a >= 0) || (b >= 0 and c >= 0 and a >=\
    \ b) || (b >= 0 and c >= 0)\n                                                \
    \                                           ^\n                              \
    \                                                            ,\n/tmp/tmp8_3fob1e.swift:16:24:\
    \ error: expected ',' separator\n        return (b >= 0 and c >= 0 and a >= 0)\
    \ || (b >= 0 and c >= 0 and a >= c) || (b >= 0 and c >= 0)\n                 \
    \      ^\n                      ,\n/tmp/tmp8_3fob1e.swift:16:58: error: expected\
    \ ',' separator\n        return (b >= 0 and c >= 0 and a >= 0) || (b >= 0 and\
    \ c >= 0 and a >= c) || (b >= 0 and c >= 0)\n                                \
    \                         ^\n                                                \
    \        ,\n/tmp/tmp8_3fob1e.swift:16:92: error: expected ',' separator\n    \
    \    return (b >= 0 and c >= 0 and a >= 0) || (b >= 0 and c >= 0 and a >= c) ||\
    \ (b >= 0 and c >= 0)\n                                                      \
    \                                     ^\n                                    \
    \                                                      ,\n/tmp/tmp8_3fob1e.swift:18:24:\
    \ error: expected ',' separator\n        return (b >= 0 and c >= 0 and a >= 0)\
    \ || (b >= 0 and c >= 0 and a >= b) || (b >= 0 and c >= a)\n                 \
    \      ^\n                      ,\n/tmp/tmp8_3fob1e.swift:18:58: error: expected\
    \ ',' separator\n        return (b >= 0 and c >= 0 and a >= 0) || (b >= 0 and\
    \ c >= 0 and a >= b) || (b >= 0 and c"
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = a*b\n    let ac = a*c\n    let\
    \ bc = b*c\n    let acb = ac + bc\n    let bca = bc + ac\n    let cab = ab + bc\n\
    \    let det = ab*cab - acb\n    \n    return (det - (acb*cab)) / cab == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp55_hockn/tmp55_hockn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86496abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86493a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86493a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86493a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55_hockn                        0x00005581a2bfa24b <unavailable> + 4683

    5    libc.so.6                          0x00002b8649897460 __libc_start_main +
    245

    6    tmp55_hockn                        0x00005581a2bf9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        a,b = b,a\n    }\n \
    \   if a > c {\n        a,c = c,a\n    }\n    if b > c {\n        b,c = c,b\n\
    \    }\n    if a == 0 || b == 0 || c == 0 {\n        return true\n    }\n\n  \
    \  let denom = a + b + c\n\n    return denom == a || (denom == (b+c) && (b ==\
    \ 0 || a == c || c == a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpjcgxm042.swift:13:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        a,b = b,a\n         ^\n         ;\n/tmp/tmpjcgxm042.swift:13:10:\
    \ error: expected expression\n        a,b = b,a\n         ^\n/tmp/tmpjcgxm042.swift:16:10:\
    \ error: consecutive statements on a line must be separated by ';'\n        a,c\
    \ = c,a\n         ^\n         ;\n/tmp/tmpjcgxm042.swift:16:10: error: expected\
    \ expression\n        a,c = c,a\n         ^\n/tmp/tmpjcgxm042.swift:19:10: error:\
    \ consecutive statements on a line must be separated by ';'\n        b,c = c,b\n\
    \         ^\n         ;\n/tmp/tmpjcgxm042.swift:19:10: error: expected expression\n\
    \        b,c = c,b\n         ^\n/tmp/tmpjcgxm042.swift:13:9: warning: expression\
    \ of type 'Int' is unused\n        a,b = b,a\n        ^\n/tmp/tmpjcgxm042.swift:16:9:\
    \ warning: expression of type 'Int' is unused\n        a,c = c,a\n        ^\n\
    /tmp/tmpjcgxm042.swift:19:9: warning: expression of type 'Int' is unused\n   \
    \     b,c = c,b\n        ^\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var sum: Int = 0\n\n    for i in 0..<3 {\n\
    \        sum += (a * i) + (b * i) + (c * i)\n    }\n\n    if sum % 2 != 0 {\n\
    \        return false\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpn65fkr2q/tmpn65fkr2q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0da8933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0da862ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0da862a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0da86297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn65fkr2q                        0x00005611d39eb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b0da8b1f460 __libc_start_main +
    245

    6    tmpn65fkr2q                        0x00005611d39eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let x3 = b * b\n    let y3 = c * c\n   \
    \ let x12 = x3 + a * a + b * b\n    let y12 = y3 + c * c + a * a\n    let x123\
    \ = x12 + y12\n    let y123 = y12 + x12\n    let x132 = x12 + y12\n    let y132\
    \ = y12 + x12\n    let x231 = x3 + a * a + c * c\n    let y231 = y3 + b * b +\
    \ c * b\n    let x232 = x231 + y231\n    let y232 = y231 + x232\n    let x233\
    \ = x231 + y231\n    let y233 = y231 + x232\n    let x1234 = x232 + y232\n   \
    \ let y1234 = y232 + x1234\n    let x12343 = x233 + y233\n    let y12343 = y233\
    \ + x12343\n    \n    return (abs(x3 - x12) < EPS) && (abs(y3 - y12) < EPS) &&\
    \ (abs(x3 - x123) < (abs(y3 - y123) * EPS))\n        && (abs(y3 - y123) < EPS)\
    \ && (abs(x3 - x132) < EPS) && (abs(y3 - y132) < EPS)\n        && (abs(x3 - x231)\
    \ < EPS) && (abs(y3 - y231) < EPS) && (abs(x3 - x232) < EPS)\n        && (abs(y3\
    \ - y232) < EPS) && (abs(x3 - x132) < EPS) && (abs(y3 - y132) < EPS)\n       \
    \ && (abs(x3 - x233) < EPS) && (abs(y3 - y233) < EPS) && (abs(x3 - x1234) < EPS)\n\
    \        && (abs(y3 - y1234) < EPS) && (abs(x3 - x12343) < EPS) && (abs(y3 - y12343)\
    \ < EPS)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp2jr_excv.swift:31:29: error: cannot find 'EPS' in scope\n    return\
    \ (abs(x3 - x12) < EPS) && (abs(y3 - y12) < EPS) && (abs(x3 - x123) < (abs(y3\
    \ - y123) * EPS))\n                            ^~~\n/tmp/tmp2jr_excv.swift:31:54:\
    \ error: cannot find 'EPS' in scope\n    return (abs(x3 - x12) < EPS) && (abs(y3\
    \ - y12) < EPS) && (abs(x3 - x123) < (abs(y3 - y123) * EPS))\n               \
    \                                      ^~~\n/tmp/tmp2jr_excv.swift:31:98: error:\
    \ cannot find 'EPS' in scope\n    return (abs(x3 - x12) < EPS) && (abs(y3 - y12)\
    \ < EPS) && (abs(x3 - x123) < (abs(y3 - y123) * EPS))\n                      \
    \                                                                           ^~~\n\
    /tmp/tmp2jr_excv.swift:32:30: error: cannot find 'EPS' in scope\n        && (abs(y3\
    \ - y123) < EPS) && (abs(x3 - x132) < EPS) && (abs(y3 - y132) < EPS)\n       \
    \                      ^~~\n/tmp/tmp2jr_excv.swift:32:56: error: cannot find 'EPS'\
    \ in scope\n        && (abs(y3 - y123) < EPS) && (abs(x3 - x132) < EPS) && (abs(y3\
    \ - y132) < EPS)\n                                                       ^~~\n\
    /tmp/tmp2jr_excv.swift:32:82: error: cannot find 'EPS' in scope\n        && (abs(y3\
    \ - y123) < EPS) && (abs(x3 - x132) < EPS) && (abs(y3 - y132) < EPS)\n       \
    \                                                                          ^~~\n\
    /tmp/tmp2jr_excv.swift:33:30: error: cannot find 'EPS' in scope\n        && (abs(x3\
    \ - x231) < EPS) && (abs(y3 - y231) < EPS) && (abs(x3 - x232) < EPS)\n       \
    \                      ^~~\n/tmp/tmp2jr_excv.swift:33:56: error: cannot find 'EPS'\
    \ in scope\n        && (abs(x3 - x231) < EPS) && (abs(y3 - y231) < EPS) && (abs(x3\
    \ - x232) < EPS)\n                                                       ^~~\n\
    /tmp/tmp2jr_excv.swift:33:82: error: cannot find 'EPS' in scope\n        && (abs(x3\
    \ - x231) < EPS) && (abs(y3 - y231) < EPS) && (abs(x3 - x232) < EPS)\n       \
    \                                                                          ^~~\n\
    /tmp/tmp2jr_excv.swift:34:30: error: cannot find 'EPS' in scope\n        && (abs(y3\
    \ - y232) < EPS) && (a"
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let x1 = a\n    let x2 = b\n    let x3 =\
    \ c\n    let x1x2 = x1 + x2\n    let x1x3 = x1 + x3\n    let x2x3 = x2 + x3\n\
    \    return (x1x2 > x1x3) || (x1x3 > x2x3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3rddsiui/tmp3rddsiui.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e4b596c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4b28db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4b28d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e4b28c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rddsiui                        0x000055b272f351bb <unavailable> + 4539

    5    libc.so.6                          0x00002b5e4b782460 __libc_start_main +
    245

    6    tmp3rddsiui                        0x000055b272f34e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ac = a - c\n    let bc = b - c\n   \
    \ \n    let det = ac * bc - (a + b) * bc\n    \n    return det >= 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpe8tv1cz8/tmpe8tv1cz8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fb3863c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fb355ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fb355a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fb35597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tv1cz8                        0x000055df98e6723b <unavailable> + 4667

    5    libc.so.6                          0x00002b0fb3a4f460 __libc_start_main +
    245

    6    tmpe8tv1cz8                        0x000055df98e66e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if abs(a) < abs(b) && abs(a) < abs(c) {\
    \ return true }\n    else if abs(b) < abs(c) { return true }\n    else { return\
    \ false }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp3i3p56k9/tmp3i3p56k9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade9ab75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade9a86cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade9a86c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade9a86b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3i3p56k9                        0x000055c871f2432b <unavailable> + 4907

    5    libc.so.6                          0x00002ade9ad61460 __libc_start_main +
    245

    6    tmp3i3p56k9                        0x000055c871f23f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    switch {\n    case a * b > c:\n        return\
    \ false\n    case a * c > b:\n        return true\n    case b * c > a:\n     \
    \   return false\n    default:\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzarrrwo_.swift:12:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = a % 180\n    let a2 = a1 % 180\n\
    \    let a3 = a2 % 180\n    let b1 = b % 180\n    let b2 = b1 % 180\n    let b3\
    \ = b2 % 180\n    let c1 = c % 180\n    let c2 = c1 % 180\n    let c3 = c2 % 180\n\
    \    let x = c1 * b2 - c2 * b1\n    let y = c2 * b3 - c1 * b3\n    let z = c1\
    \ * b1 - c2 * b2\n    \n    if a1 == a2 || b1 == b2 || c1 == c2 {\n        return\
    \ true\n    }\n    \n    // if x == 0 and y == 0 and z == 0:\n    //     return\
    \ true\n    \n    // if a1 == a3 || b1 == b3 || c1 == c3 {\n    //     return\
    \ true\n    // }\n    \n    if x == 0 && y == 0 && z == 0 {\n        return true\n\
    \    }\n    \n    if x <= 0 && y >= 0 && z >= 0 {\n        return true\n    }\n\
    \    \n    if x >= 0 && y >= 0 && z <= 0 {\n        return true\n    }\n    \n\
    \    if x <= 0 && y <= 0 && z >= 0 {\n        return true\n    }\n    \n    if\
    \ x <= 0 && y <= 0 && z <= 0 {\n        return true\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpr_ilxnfp/tmpr_ilxnfp.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2c94b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2c91b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2c91b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2c91af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_ilxnfp                        0x00005558e58f22cb <unavailable> + 4811

    5    libc.so.6                          0x00002ba2c96a5460 __libc_start_main +
    245

    6    tmpr_ilxnfp                        0x00005558e58f1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (b - a) * (b - a) + (c - a) * (c\
    \ - a) <= 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp47wbju78/tmp47wbju78.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86c4261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86c3f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86c3f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86c3f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47wbju78                        0x0000555b167a01bb <unavailable> + 4539

    5    libc.so.6                          0x00002b86c444d460 __libc_start_main +
    245

    6    tmp47wbju78                        0x0000555b1679fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (-b - sqrt(a*a + 4*b*c - a*b)) /\
    \ (2*a) < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpjre_2k7e.swift:12:18: error: cannot find 'sqrt' in scope\n    return\
    \ (-b - sqrt(a*a + 4*b*c - a*b)) / (2*a) < 0\n                 ^~~~\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a == b || a == c || b == c || (a\
    \ <= b && b <= c && c <= a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpvg3qva_i/tmpvg3qva_i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b485fa77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b485f76eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b485f76e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b485f76d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg3qva_i                        0x000055c00b34d1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b485fc63460 __libc_start_main +
    245

    6    tmpvg3qva_i                        0x000055c00b34ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a*a + b*b == c*c {\n        return true\n\
    \    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp1n73srer/tmp1n73srer.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ababefdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ababecd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ababecd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ababecd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1n73srer                        0x000055f3e076d2b9 <unavailable> + 4793

    5    libc.so.6                          0x00002ababf1c6460 __libc_start_main +
    245

    6    tmp1n73srer                        0x000055f3e076ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\treturn (a >= b) && (b >= c) && (a <= c)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpfgh_g906/tmpfgh_g906.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e8f3a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e8f09fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e8f09f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e8f09e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfgh_g906                        0x000056522b0981bb <unavailable> + 4539

    5    libc.so.6                          0x00002b1e8f594460 __libc_start_main +
    245

    6    tmpfgh_g906                        0x000056522b097e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b + c) == (sqrt((a * a) + (b\
    \ * b) + (c * c))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpim5h0g8l.swift:12:29: error: cannot find 'sqrt' in scope\n    return\
    \ ((a + b + c) == (sqrt((a * a) + (b * b) + (c * c))))\n                     \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    \n    // Get sides\n    var sa = abs(a),\
    \ sb = abs(b), sc = abs(c)\n    if sb > sa {\n        sa, sb = sb, sa\n    }\n\
    \    if sc > sb {\n        sc, sb = sb, sc\n    }\n    \n    // If equal then\
    \ triangle is equilateral\n    if sc == sb {\n        return true\n    }\n   \
    \ \n    // If equal then triangle is isosceles \n    if sc == sa {\n        return\
    \ false\n    }\n    \n    // If equal then triangle is scalene\n    if sb == sa\
    \ {\n        return false\n    }\n    \n    // If equal then triangle is right\n\
    \    if sb == sc {\n        return true\n    }\n    \n    // If equal then triangle\
    \ is left\n    if sc == sb {\n        return false\n    }\n    \n    // If equal\
    \ then triangle is right\n    if sc == sa {\n        return false\n    }\n   \
    \ \n    // If equal then triangle is left\n    if sb == sc {\n        return true\n\
    \    }\n    \n    // Return false\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9n32mje7.swift:16:11: error: consecutive statements on a line must\
    \ be separated by ';'\n        sa, sb = sb, sa\n          ^\n          ;\n/tmp/tmp9n32mje7.swift:16:11:\
    \ error: expected expression\n        sa, sb = sb, sa\n          ^\n/tmp/tmp9n32mje7.swift:19:11:\
    \ error: consecutive statements on a line must be separated by ';'\n        sc,\
    \ sb = sb, sc\n          ^\n          ;\n/tmp/tmp9n32mje7.swift:19:11: error:\
    \ expected expression\n        sc, sb = sb, sc\n          ^\n/tmp/tmp9n32mje7.swift:16:9:\
    \ warning: variable is unused\n        sa, sb = sb, sa\n        ^~\n/tmp/tmp9n32mje7.swift:19:9:\
    \ warning: variable is unused\n        sc, sb = sb, sc\n        ^~\n/tmp/tmp9n32mje7.swift:14:9:\
    \ warning: variable 'sa' was never mutated; consider changing to 'let' constant\n\
    \    var sa = abs(a), sb = abs(b), sc = abs(c)\n        ^\n/tmp/tmp9n32mje7.swift:14:22:\
    \ warning: variable 'sb' was never mutated; consider changing to 'let' constant\n\
    \    var sa = abs(a), sb = abs(b), sc = abs(c)\n                     ^\n/tmp/tmp9n32mje7.swift:14:35:\
    \ warning: variable 'sc' was never mutated; consider changing to 'let' constant\n\
    \    var sa = abs(a), sb = abs(b), sc = abs(c)\n                             \
    \     ^\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  return a + b > c && a + c > b && b + c > a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpqvitv_9c/tmpqvitv_9c.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac799983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac79967ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac79967a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7996797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvitv_9c                        0x0000558e943b6335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac799b6f460 __libc_start_main +
    245

    6    tmpqvitv_9c                        0x0000558e943b5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let isRightAngle = false\n    if a == b\
    \ {\n        return a == c\n    } else if b == c {\n        return a == b\n  \
    \  } else if a == c {\n        return isRightAngle\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpu3h3gi62/tmpu3h3gi62.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad763450c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad763147b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad763147988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7631467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3h3gi62                        0x000055fde3dd61bb <unavailable> + 4539

    5    libc.so.6                          0x00002ad76363c460 __libc_start_main +
    245

    6    tmpu3h3gi62                        0x000055fde3dd5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (-b - sqrt(Double(b * b - 4 * a *\
    \ c))) / a > Double.greatestFiniteMagnitude\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkb6wr2r1.swift:12:18: error: cannot find 'sqrt' in scope\n    return\
    \ (-b - sqrt(Double(b * b - 4 * a * c))) / a > Double.greatestFiniteMagnitude\n\
    \                 ^~~~\n/tmp/tmpkb6wr2r1.swift:12:12: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    return (-b - sqrt(Double(b * b - 4 * a *\
    \ c))) / a > Double.greatestFiniteMagnitude\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979164
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\treturn (a + b > c) && (b + c > a) && (c +\
    \ a > b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpz_gwpe3t/tmpz_gwpe3t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ad4adbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ad47d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ad47d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ad47d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_gwpe3t                        0x00005555cee42335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4ad4cc7460 __libc_start_main +
    245

    6    tmpz_gwpe3t                        0x00005555cee41e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let _a = abs(a)\n    let _b = abs(b)\n \
    \   let _c = abs(c)\n\n    if _c > _a + _b {\n        return false\n    }\n\n\
    \    let a1 = _a / _c\n    let b1 = _b / _c\n    let c1 = _c / _c\n\n    let a2\
    \ = _c / a1\n    let b2 = _b / a1\n    let c2 = _c / b1 \n\n    return a1 + b2\
    \ > c1 && b1 + c2 > a1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14137: Fatal error: Division by zero

    Current stack trace:

    0    libswiftCore.so                    0x00002b9873bfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98738f4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b98738f4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b98738f413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b98738f3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptj4d9pyo                        0x000055c243ac9e60 <unavailable> + 7776

    6    tmptj4d9pyo                        0x000055c243ac92d5 <unavailable> + 4821

    7    libc.so.6                          0x00002b9873de9460 __libc_start_main +
    245

    8    tmptj4d9pyo                        0x000055c243ac8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979145
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 {\n        return b == 0 && c\
    \ == 0 || b == 0 && c == -1\n    } else if a == -1 {\n        return b == 0 &&\
    \ c == -1 || b == 0 && c == 0 || b == 0 && c == 1 || b == 0 && c == -1\n    }\
    \ else {\n        return (b == 0 && c == -1 && a > 0 || b == 0 && c == 1 && a\
    \ < 0) || \n               (b == 0 && c == -1 && a < 0) || \n               (b\
    \ == 0 && c == 1 && a > 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp6lq8naln/tmp6lq8naln.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1df86ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1df565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1df565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1df5647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6lq8naln                        0x000055d03ede61bb <unavailable> + 4539

    5    libc.so.6                          0x00002ac1dfa5a460 __libc_start_main +
    245

    6    tmp6lq8naln                        0x000055d03ede5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return is_right_angle(a, b, c) || is_right_angle(b,\
    \ a, c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpql6hinif.swift:12:12: error: cannot find 'is_right_angle' in scope\n\
    \    return is_right_angle(a, b, c) || is_right_angle(b, a, c)\n           ^~~~~~~~~~~~~~\n\
    /tmp/tmpql6hinif.swift:12:39: error: cannot find 'is_right_angle' in scope\n \
    \   return is_right_angle(a, b, c) || is_right_angle(b, a, c)\n              \
    \                        ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = sqrt(pow(a, 2.0) + pow(b, 2.0))\n\
    \    let bc = sqrt(pow(b, 2.0) + pow(c, 2.0))\n    return (((b * b) - (4.0 * ab\
    \ * bc)) < 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp1f4d7cnc.swift:12:14: error: cannot find 'sqrt' in scope\n    let\
    \ ab = sqrt(pow(a, 2.0) + pow(b, 2.0))\n             ^~~~\n/tmp/tmp1f4d7cnc.swift:12:19:\
    \ error: cannot find 'pow' in scope\n    let ab = sqrt(pow(a, 2.0) + pow(b, 2.0))\n\
    \                  ^~~\n/tmp/tmp1f4d7cnc.swift:12:33: error: cannot find 'pow'\
    \ in scope\n    let ab = sqrt(pow(a, 2.0) + pow(b, 2.0))\n                   \
    \             ^~~\n/tmp/tmp1f4d7cnc.swift:13:14: error: cannot find 'sqrt' in\
    \ scope\n    let bc = sqrt(pow(b, 2.0) + pow(c, 2.0))\n             ^~~~\n/tmp/tmp1f4d7cnc.swift:13:19:\
    \ error: cannot find 'pow' in scope\n    let bc = sqrt(pow(b, 2.0) + pow(c, 2.0))\n\
    \                  ^~~\n/tmp/tmp1f4d7cnc.swift:13:33: error: cannot find 'pow'\
    \ in scope\n    let bc = sqrt(pow(b, 2.0) + pow(c, 2.0))\n                   \
    \             ^~~\n/tmp/tmp1f4d7cnc.swift:14:12: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    return (((b * b) - (4.0 * ab * bc)) < 0.0)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979171
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var sum = (a + b + c) / 2.0\n    return\
    \ sum != (b * b + c * c - a * a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpk2wjcxsp.swift:12:27: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    var sum = (a + b + c) / 2.0\n  \
    \            ~~~~~~~~~~~ ^ ~~~\n/tmp/tmpk2wjcxsp.swift:12:27: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n    var sum = (a + b + c) / 2.0\n          \
    \                ^\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return b > c && a > b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmppfmdp_b7/tmppfmdp_b7.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b383ad4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383aa44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b383aa44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b383aa437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfmdp_b7                        0x000055e7e55721bb <unavailable> + 4539

    5    libc.so.6                          0x00002b383af39460 __libc_start_main +
    245

    6    tmppfmdp_b7                        0x000055e7e5571e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 || (b == c\
    \ && a != b) return false\n    if b != c {\n        let t = (b - c) / a\n    \
    \    let p = (a + b) / 2.0\n        return t >= p && t <= (p - 1.0)\n    } else\
    \ {\n        return a == c\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_soqqbth.swift:12:57: error: expected '{' after 'if' condition\n\
    \    if a == 0 || b == 0 || c == 0 || (b == c && a != b) return false\n      \
    \                                                  ^\n/tmp/tmp_soqqbth.swift:15:25:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \        let p = (a + b) / 2.0\n                ~~~~~~~ ^ ~~~\n/tmp/tmp_soqqbth.swift:15:25:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n        let p = (a + b) /\
    \ 2.0\n                        ^\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return b == a && c == a && a >= 0 && b >=\
    \ 0 && c >= 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmppptqral_/tmppptqral_.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab959e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab959b2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab959b2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab959b2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppptqral_                        0x000055a5377141bb <unavailable> + 4539

    5    libc.so.6                          0x00002ab95a021460 __libc_start_main +
    245

    6    tmppptqral_                        0x000055a537713e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b*b - a*c) >= 0) && ((abs(b)*abs(b)\
    \ - abs(a)*abs(c)) >= 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpjltc795u/tmpjltc795u.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3958d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3958a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3958a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3958a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjltc795u                        0x000055c04b75332b <unavailable> + 4907

    5    libc.so.6                          0x00002b3958f22460 __libc_start_main +
    245

    6    tmpjltc795u                        0x000055c04b752f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a == b) || (a == c) || (b == c)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpyfhe5irw/tmpyfhe5irw.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0333689c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0333380b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0333380988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b033337f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfhe5irw                        0x00005621bd4951bb <unavailable> + 4539

    5    libc.so.6                          0x00002b0333875460 __libc_start_main +
    245

    6    tmpyfhe5irw                        0x00005621bd494e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\tif ((a*a + b*b == c*c) && (b != c) && (b !=\
    \ a)) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp2vhq7iio/tmp2vhq7iio.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ac806ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ac7d61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ac7d61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ac7d607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vhq7iio                        0x0000558c4a3ca2b9 <unavailable> + 4793

    5    libc.so.6                          0x00002b2ac8256460 __libc_start_main +
    245

    6    tmp2vhq7iio                        0x0000558c4a3c9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return b == c && b == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmprx2p4r08/tmprx2p4r08.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94e44cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94e41c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94e41c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94e41c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprx2p4r08                        0x000055cf67bfe1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b94e46bb460 __libc_start_main +
    245

    6    tmprx2p4r08                        0x000055cf67bfde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  let one_to_two = (a * a + b * b == c * c)\
    \ ? true : false\n  let two_to_three = (a * b + b * c == c * a) ? true : false\n\
    \  let three_to_one = (a * b + c * c == a * b) ? true : false\n  return one_to_two\
    \ || two_to_three || three_to_one\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmprmyojv4u/tmprmyojv4u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57d41c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57d3eb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57d3eb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57d3eb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmyojv4u                        0x00005584445e52b9 <unavailable> + 4793

    5    libc.so.6                          0x00002b57d43ac460 __libc_start_main +
    245

    6    tmprmyojv4u                        0x00005584445e4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a2 = a*a\n    let b2 = b*b\n    let\
    \ c2 = c*c\n    \n    if a2 < b2+c2 {\n        return true\n    }\n    \n    let\
    \ c3 = c-b\n    \n    let b3 = b*b\n    let a3 = a*a\n    \n    if a3 < b2+c3\
    \ {\n        return true\n    }\n    \n    let a4 = a^b\n    let b4 = b^c\n  \
    \  let c4 = c^a\n    \n    if b4 < c4 || b2 < c2-a3 || a2 < c2-b3 {\n        return\
    \ true\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp5i1rgia0/tmp5i1rgia0.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23001f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22ffeebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22ffeeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22ffeea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5i1rgia0                        0x0000560d1a5a223b <unavailable> + 4667

    5    libc.so.6                          0x00002b23003e0460 __libc_start_main +
    245

    6    tmp5i1rgia0                        0x0000560d1a5a1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (b**2 - a**2 == c**2) || (c != 0\
    \ && a == c && (b != c && b > a)) || (c != 0 && a == c && b != c && b > a)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmploaze_wx.swift:12:14: error: cannot find operator '**' in scope\n\
    \    return (b**2 - a**2 == c**2) || (c != 0 && a == c && (b != c && b > a)) ||\
    \ (c != 0 && a == c && b != c && b > a)\n             ^~\n/tmp/tmploaze_wx.swift:12:21:\
    \ error: cannot find operator '**' in scope\n    return (b**2 - a**2 == c**2)\
    \ || (c != 0 && a == c && (b != c && b > a)) || (c != 0 && a == c && b != c &&\
    \ b > a)\n                    ^~\n/tmp/tmploaze_wx.swift:12:29: error: cannot\
    \ find operator '**' in scope\n    return (b**2 - a**2 == c**2) || (c != 0 &&\
    \ a == c && (b != c && b > a)) || (c != 0 && a == c && b != c && b > a)\n    \
    \                        ^~\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a == b || a == c || b == c\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp8107_2eb/tmp8107_2eb.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79704aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79701a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79701a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79701a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8107_2eb                        0x000055af88eff1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b7970696460 __libc_start_main +
    245

    6    tmp8107_2eb                        0x000055af88efee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let angle1: Double = degrees(degrees: sqrt((a\
    \ * a + b * b + c * c - a * b - a * c - b * c) / 2.0))\n    let angle2: Double\
    \ = degrees(degrees: sqrt((a * a + b * b + c * c - a * b - a * c - b * c) / 2.0))\n\
    \    if angle1 < 90 || angle2 < 90 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnhr7ukda.swift:12:26: error: cannot find 'degrees' in scope\n \
    \   let angle1: Double = degrees(degrees: sqrt((a * a + b * b + c * c - a * b\
    \ - a * c - b * c) / 2.0))\n                         ^~~~~~~\n/tmp/tmpnhr7ukda.swift:12:43:\
    \ error: cannot find 'sqrt' in scope\n    let angle1: Double = degrees(degrees:\
    \ sqrt((a * a + b * b + c * c - a * b - a * c - b * c) / 2.0))\n             \
    \                             ^~~~\n/tmp/tmpnhr7ukda.swift:12:26: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n    let angle1: Double = degrees(degrees:\
    \ sqrt((a * a + b * b + c * c - a * b - a * c - b * c) / 2.0))\n             \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhr7ukda.swift:13:26: error: cannot find 'degrees' in scope\n    let angle2:\
    \ Double = degrees(degrees: sqrt((a * a + b * b + c * c - a * b - a * c - b *\
    \ c) / 2.0))\n                         ^~~~~~~\n/tmp/tmpnhr7ukda.swift:13:43:\
    \ error: cannot find 'sqrt' in scope\n    let angle2: Double = degrees(degrees:\
    \ sqrt((a * a + b * b + c * c - a * b - a * c - b * c) / 2.0))\n             \
    \                             ^~~~\n/tmp/tmpnhr7ukda.swift:13:26: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n    let angle2: Double = degrees(degrees:\
    \ sqrt((a * a + b * b + c * c - a * b - a * c - b * c) / 2.0))\n             \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a != b && b != c && c != a && a ==\
    \ b + c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpk7ajb0bc/tmpk7ajb0bc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b2dc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b2ab7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b2ab7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b2ab67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7ajb0bc                        0x000055bbc35a91bb <unavailable> + 4539

    5    libc.so.6                          0x00002b38b2fac460 __libc_start_main +
    245

    6    tmpk7ajb0bc                        0x000055bbc35a8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var a = a, b\n    var b = c, c\n    var\
    \ isTriangle = true\n    \n    if a > b {\n        (a, b) = (b, a)\n    }\n  \
    \  if b > c {\n        (b, c) =(c, b)\n    }\n    \n    if a < 0 {\n        isTriangle\
    \ = false\n        a *= -1\n        b *= -1\n    }\n    if b < 0 {\n        isTriangle\
    \ = false\n        b *= -1\n        c *= -1\n    }\n    \n    if a > b+c {\n \
    \       isTriangle = false\n    }\n    \n    if a > b {\n        if b > c {\n\
    \            (b, c) =(c, b)\n        }\n        \n        let angle = b\n    \
    \    \n        var isOdd = true\n        if angle % 2 != 0 {\n            isOdd\
    \ = false\n        }\n        \n        let c = Double(angle) / 2.0\n        \n\
    \        let d = (b * c - a * b)\n        let f = (c * c + a * a - b * b) / (2.0\
    \ * d)\n        \n        if f > 0.0 {\n            isTriangle = false\n     \
    \   }\n        \n        if isOdd {\n            isTriangle = (f > 0.0)\n    \
    \    }\n    }\n    \n    return isTriangle\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9wy3djvx.swift:20:16: error: '=' must have consistent whitespace\
    \ on both sides\n        (b, c) =(c, b)\n               ^\n                 \n\
    /tmp/tmp9wy3djvx.swift:40:20: error: '=' must have consistent whitespace on both\
    \ sides\n            (b, c) =(c, b)\n                   ^\n                  \
    \   \n/tmp/tmp9wy3djvx.swift:12:16: error: type annotation missing in pattern\n\
    \    var a = a, b\n               ^\n/tmp/tmp9wy3djvx.swift:13:16: error: type\
    \ annotation missing in pattern\n    var b = c, c\n               ^\n/tmp/tmp9wy3djvx.swift:52:22:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        let d = (b * c - a * b)\n                     ^\n                   \
    \  Int( )\n/tmp/tmp9wy3djvx.swift:53:17: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        let f = (c * c + a * a - b * b) / (2.0 * d)\n     \
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979229
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    switch b {\n    case a + c:\n        return\
    \ false\n    case a - c:\n        return true\n    case a + b:\n        return\
    \ true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmppddcviua/tmppddcviua.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b107b994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b107b68bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b107b68b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b107b68a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppddcviua                        0x00005602a0e741bb <unavailable> + 4539

    5    libc.so.6                          0x00002b107bb80460 __libc_start_main +
    245

    6    tmppddcviua                        0x00005602a0e73e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  return  ((a > b) && (b > c) && (c > a)) ||\
    \ ((a < b) && (b < c) && (c < a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpmh082n9r/tmpmh082n9r.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40d21a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40d1e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40d1e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40d1e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmh082n9r                        0x000056472251e1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b40d238f460 __libc_start_main +
    245

    6    tmpmh082n9r                        0x000056472251de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  if ((a - b) * (c - b) == (b - a) * (c - b))\
    \ {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpz438bg2t/tmpz438bg2t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8705431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8705128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8705128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87051277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz438bg2t                        0x00005612ce9511bb <unavailable> + 4539

    5    libc.so.6                          0x00002b870561d460 __libc_start_main +
    245

    6    tmpz438bg2t                        0x00005612ce950e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let l1 = (a*a + b*b + c*c)/2\n    let l2\
    \ = (a*a - b*b - c*c)/2\n    \n    return l2 > 0 && l1 < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3r374nii/tmp3r374nii.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fa248ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fa2185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fa2185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fa21847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3r374nii                        0x000056046c95a24b <unavailable> + 4683

    5    libc.so.6                          0x00002b6fa267a460 __libc_start_main +
    245

    6    tmp3r374nii                        0x000056046c959ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var a_b = a * b\n    var c_b = c * b\n \
    \   var ab_sum = a_b + c_b\n    var ab_ab = ab_sum - a_b - c_b\n    if ab_ab <\
    \ 0 {\n        return false\n    }\n    var ac_b = c_b - a_b\n    var ab_ac =\
    \ ab_sum - ac_b\n    var ab_ab_ac = ab_ab - ab_ac\n    if ab_ac > 0 {\n      \
    \  if ab_ab_ac > 0 {\n            return false\n        } else {\n           \
    \ if ab_ab < 0) {\n                return true\n            }\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp8ajqclj4.swift:26:25: error: expected '{' after 'if' condition\n\
    \            if ab_ab < 0) {\n                        ^\n/tmp/tmp8ajqclj4.swift:12:9:\
    \ warning: variable 'a_b' was never mutated; consider changing to 'let' constant\n\
    \    var a_b = a * b\n    ~~~ ^\n    let\n/tmp/tmp8ajqclj4.swift:13:9: warning:\
    \ variable 'c_b' was never mutated; consider changing to 'let' constant\n    var\
    \ c_b = c * b\n    ~~~ ^\n    let\n/tmp/tmp8ajqclj4.swift:14:9: warning: variable\
    \ 'ab_sum' was never mutated; consider changing to 'let' constant\n    var ab_sum\
    \ = a_b + c_b\n    ~~~ ^\n    let\n/tmp/tmp8ajqclj4.swift:15:9: warning: variable\
    \ 'ab_ab' was never mutated; consider changing to 'let' constant\n    var ab_ab\
    \ = ab_sum - a_b - c_b\n    ~~~ ^\n    let\n/tmp/tmp8ajqclj4.swift:19:9: warning:\
    \ variable 'ac_b' was never mutated; consider changing to 'let' constant\n   \
    \ var ac_b = c_b - a_b\n    ~~~ ^\n    let\n/tmp/tmp8ajqclj4.swift:20:9: warning:\
    \ variable 'ab_ac' was never mutated; consider changing to 'let' constant\n  \
    \  var ab_ac = ab_sum - ac_b\n    ~~~ ^\n    let\n/tmp/tmp8ajqclj4.swift:21:9:\
    \ warning: variable 'ab_ab_ac' was never mutated; consider changing to 'let' constant\n\
    \    var ab_ab_ac = ab_ab - ab_ac\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let side1 = abs(a - b) > abs(a - c)\n  \
    \  let side2 = abs(b - c) > abs(a - c)\n    let side3 = abs(a - c) > abs(b - c)\n\
    \    if side1 &&\n        side2 &&\n        side3 {\n        return true\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp__cnt95l/tmp__cnt95l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf982ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf97fd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf97fd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf97fd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__cnt95l                        0x0000564a8166b2ab <unavailable> + 4779

    5    libc.so.6                          0x00002abf984c9460 __libc_start_main +
    245

    6    tmp__cnt95l                        0x0000564a8166af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        let tmp = a \n     \
    \   a = b \n        b = tmp \n    }\n    \n    if a > c {\n        let tmp = a\
    \ \n        a = c \n        c = tmp \n    }\n    \n    if b > c {\n        let\
    \ tmp = b \n        b = c \n        c = tmp \n    }\n    \n    return (b - c)\
    \ * (b + c) > a * b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpmqc3j34q.swift:14:9: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n        a = b \n        ^\n/tmp/tmpmqc3j34q.swift:15:9: error: cannot\
    \ assign to value: 'b' is a 'let' constant\n        b = tmp \n        ^\n/tmp/tmpmqc3j34q.swift:20:9:\
    \ error: cannot assign to value: 'a' is a 'let' constant\n        a = c \n   \
    \     ^\n/tmp/tmpmqc3j34q.swift:21:9: error: cannot assign to value: 'c' is a\
    \ 'let' constant\n        c = tmp \n        ^\n/tmp/tmpmqc3j34q.swift:26:9: error:\
    \ cannot assign to value: 'b' is a 'let' constant\n        b = c \n        ^\n\
    /tmp/tmpmqc3j34q.swift:27:9: error: cannot assign to value: 'c' is a 'let' constant\n\
    \        c = tmp \n        ^\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // Return true if the sides are angled right\n\
    \    return abs(b - a) == abs(c - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpdtm1f483/tmpdtm1f483.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b688cfbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b688ccb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b688ccb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b688ccb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdtm1f483                        0x0000563b2f3ac2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b688d1a6460 __libc_start_main +
    245

    6    tmpdtm1f483                        0x0000563b2f3abf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return b * b - 4 * a * c >= 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp58f58tx_/tmp58f58tx_.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf4a184c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf49e7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf49e7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf49e7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp58f58tx_                        0x000055ee3aca41bb <unavailable> + 4539

    5    libc.so.6                          0x00002abf4a370460 __libc_start_main +
    245

    6    tmp58f58tx_                        0x000055ee3aca3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a*a + b*b == c*c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpbphhiij9/tmpbphhiij9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68a5401c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68a50f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68a50f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68a50f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbphhiij9                        0x000055f6a72d82b9 <unavailable> + 4793

    5    libc.so.6                          0x00002b68a55ed460 __libc_start_main +
    245

    6    tmpbphhiij9                        0x000055f6a72d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978985
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // write your code in Swift 4.2 or later\n\
    \    let a = a / 2\n    let b = b / 2\n    let c = c / 2\n    let det = a*b*c\
    \ - b*b*c + a*b*c + a*b - b * b - a * b - b * a\n    return (det >= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp54jo5u5l/tmp54jo5u5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f6e922c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f6e619b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f6e619988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f6e6187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54jo5u5l                        0x000055809a3e324b <unavailable> + 4683

    5    libc.so.6                          0x00002b6f6eb0e460 __libc_start_main +
    245

    6    tmp54jo5u5l                        0x000055809a3e2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (b - a) * (b - c) <= 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpcandrlyw/tmpcandrlyw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e8a9b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e8a6a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e8a6a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e8a6a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcandrlyw                        0x000055a420c2123b <unavailable> + 4667

    5    libc.so.6                          0x00002b8e8ab9d460 __libc_start_main +
    245

    6    tmpcandrlyw                        0x000055a420c20e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let oneOverBase = b * b - 4 * a * c\n  \
    \  if oneOverBase < 0 {\n        return false\n    }\n    let x = (-b - sqrt(oneOverBase))\
    \ / a\n    let y = (-b + sqrt(oneOverBase)) / a\n    return x == 0 && y == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmwuvmzng.swift:16:19: error: cannot find 'sqrt' in scope\n    let\
    \ x = (-b - sqrt(oneOverBase)) / a\n                  ^~~~\n/tmp/tmpmwuvmzng.swift:17:19:\
    \ error: cannot find 'sqrt' in scope\n    let y = (-b + sqrt(oneOverBase)) / a\n\
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a >= b) && (a >= c) && (b >= c))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpdkyp_9tz/tmpdkyp_9tz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ef239ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ef2091b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ef2091988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ef20907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkyp_9tz                        0x000055fc5161f1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b4ef2586460 __libc_start_main +
    245

    6    tmpdkyp_9tz                        0x000055fc5161ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    guard a >= b, b >= c, c >= a else {\n  \
    \      print(\"Error: invalid input, a, b, c should be integer\")\n        return\
    \ false\n    }\n\n    let delta = b - a\n    let delta_2 = b - c\n    let delta_3\
    \ = c - a\n    let delta_4 = delta_2 + delta_3\n    let delta_5 = delta_3 - delta_2\n\
    \n    let x = (a + c) / 2\n    let y = (b + d) / 2\n    let z = (c + a) / 2\n\n\
    \    guard x != 0 && y != 0 && z != 0 else {\n        print(\"Error: invalid input,\
    \ a, b, c should be integer\")\n        return false\n    }\n\n    return (delta_5\
    \ * x + delta_2) * z >= 0 &&\n            (delta_3 * y + delta) * z >= 0 &&\n\
    \            (delta_2 * z + delta_4) * x >= 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsvzdl2fp.swift:24:18: error: cannot find 'd' in scope\n    let\
    \ y = (b + d) / 2\n                 ^\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  return ((a + b > c) && (a + c > b) && (b +\
    \ c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmph8gk7956/tmph8gk7956.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7d061ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7d0311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7d0311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7d03107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph8gk7956                        0x000055f1371ae335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac7d0806460 __libc_start_main +
    245

    6    tmph8gk7956                        0x000055f1371ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (sqrt(pow(a, 2) + pow(b, 2)))\n\
    \    let a2 = sqrt(pow(a, 2) + pow(c, 2))\n    let b1 = sqrt(pow(b, 2) + pow(c,\
    \ 2))\n    let b2 = sqrt(pow(b, 2) + pow(a, 2))\n    \n    let result = a1 ==\
    \ a2 && b1 == b2\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm2hiid8p.swift:12:15: error: cannot find 'sqrt' in scope\n    let\
    \ a1 = (sqrt(pow(a, 2) + pow(b, 2)))\n              ^~~~\n/tmp/tmpm2hiid8p.swift:12:20:\
    \ error: cannot find 'pow' in scope\n    let a1 = (sqrt(pow(a, 2) + pow(b, 2)))\n\
    \                   ^~~\n/tmp/tmpm2hiid8p.swift:12:32: error: cannot find 'pow'\
    \ in scope\n    let a1 = (sqrt(pow(a, 2) + pow(b, 2)))\n                     \
    \          ^~~\n/tmp/tmpm2hiid8p.swift:13:14: error: cannot find 'sqrt' in scope\n\
    \    let a2 = sqrt(pow(a, 2) + pow(c, 2))\n             ^~~~\n/tmp/tmpm2hiid8p.swift:13:19:\
    \ error: cannot find 'pow' in scope\n    let a2 = sqrt(pow(a, 2) + pow(c, 2))\n\
    \                  ^~~\n/tmp/tmpm2hiid8p.swift:13:31: error: cannot find 'pow'\
    \ in scope\n    let a2 = sqrt(pow(a, 2) + pow(c, 2))\n                       \
    \       ^~~\n/tmp/tmpm2hiid8p.swift:14:14: error: cannot find 'sqrt' in scope\n\
    \    let b1 = sqrt(pow(b, 2) + pow(c, 2))\n             ^~~~\n/tmp/tmpm2hiid8p.swift:14:19:\
    \ error: cannot find 'pow' in scope\n    let b1 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                  ^~~\n/tmp/tmpm2hiid8p.swift:14:31: error: cannot find 'pow'\
    \ in scope\n    let b1 = sqrt(pow(b, 2) + pow(c, 2))\n                       \
    \       ^~~\n/tmp/tmpm2hiid8p.swift:15:14: error: cannot find 'sqrt' in scope\n\
    \    let b2 = sqrt(pow(b, 2) + pow(a, 2))\n             ^~~~\n/tmp/tmpm2hiid8p.swift:15:19:\
    \ error: cannot find 'pow' in scope\n    let b2 = sqrt(pow(b, 2) + pow(a, 2))\n\
    \                  ^~~\n/tmp/tmpm2hiid8p.swift:15:31: error: cannot find 'pow'\
    \ in scope\n    let b2 = sqrt(pow(b, 2) + pow(a, 2))\n                       \
    \       ^~~\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (abs(a-b) > abs(a-c)) || (abs(a-c)\
    \ > abs(b-c))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpmy6y56pt/tmpmy6y56pt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930f892c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930f589b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930f589988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930f5887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmy6y56pt                        0x000055bf4f18932b <unavailable> + 4907

    5    libc.so.6                          0x00002b930fa7e460 __libc_start_main +
    245

    6    tmpmy6y56pt                        0x000055bf4f188f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // If the sides are equal, they form a right-angled\
    \ triangle \n    // with one angle\n    if (a == 0 && b == c || a == c && b ==\
    \ 0 || a == b && b == c){\n        return true\n    }\n    \n    // If all sides\
    \ are equal, they form a right-angled triangle with two angles\n    if (a == b){\n\
    \        return true\n    }\n    \n    // If all sides are equal, they form a\
    \ right-angled triangle with three angles\n    if (a == c || b == c || c == b){\n\
    \        return true\n    }\n    \n    // If all sides are equal, they form a\
    \ right-angled triangle with four angles\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpd4eir471/tmpd4eir471.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5db8bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5db5b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5db5b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5db5b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4eir471                        0x00005635dcb2a1bb <unavailable> + 4539

    5    libc.so.6                          0x00002af5dbaa6460 __libc_start_main +
    245

    6    tmpd4eir471                        0x00005635dcb29e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  switch {\n  case a + b > c || a + c > b ||\
    \ b + c > a:\n    return false\n  default:\n    return true\n  }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph1oi1udj.swift:12:10: error: expected expression in 'switch' statement\n\
    \  switch {\n         ^\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a + b > c && b + c > a && c + a >\
    \ b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b:\
    \ 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpii1utkqq/tmpii1utkqq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c57446c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c5713db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c5713d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c5713c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii1utkqq                        0x000055d65330b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1c57632460 __libc_start_main +
    245

    6    tmpii1utkqq                        0x000055d65330ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // TODO: Use a data structure to accelerate\
    \ this code\n    let x = (a*a - b*b)/Double(2.0*a*b)\n    let y = (b*c - a*a)/Double(2.0*b*c)\n\
    \    let z = (a*b - b*a)/Double(2.0*a*b)\n    let mag = sqrt(x*x + y*y + z*z)\n\
    \    return mag == (a+b+c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmph7un8hzu.swift:13:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let x = (a*a - b*b)/Double(2.0*a*b)\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph7un8hzu.swift:14:13: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let y = (b*c - a*a)/Double(2.0*b*c)\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph7un8hzu.swift:15:13: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let z = (a*b - b*a)/Double(2.0*a*b)\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph7un8hzu.swift:16:15: error: cannot find 'sqrt' in scope\n    let mag\
    \ = sqrt(x*x + y*y + z*z)\n              ^~~~\n"
  stdout: ''
  timestamp: 1659979256
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    guard a > 0 && b > 0 && c > 0 else {\n \
    \       return false\n    }\n    let aSquared = pow(a, 2)\n    let bSquared =\
    \ pow(b, 2)\n    let cSquared = pow(c, 2)\n    let discriminant = aSquared - bSquared\
    \ - cSquared\n    return (discriminant > 0) && (abs(sqrt(discriminant)) < Float.greatestFiniteMagnitude)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp842guy99.swift:15:20: error: cannot find 'pow' in scope\n    let\
    \ aSquared = pow(a, 2)\n                   ^~~\n/tmp/tmp842guy99.swift:16:20:\
    \ error: cannot find 'pow' in scope\n    let bSquared = pow(b, 2)\n          \
    \         ^~~\n/tmp/tmp842guy99.swift:17:20: error: cannot find 'pow' in scope\n\
    \    let cSquared = pow(c, 2)\n                   ^~~\n/tmp/tmp842guy99.swift:19:39:\
    \ error: cannot find 'sqrt' in scope\n    return (discriminant > 0) && (abs(sqrt(discriminant))\
    \ < Float.greatestFiniteMagnitude)\n                                      ^~~~\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a > 0 && b > 0 && c > 0 &&\n    \
    \    (b * b) - (4 * a * c) < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp6gqlrf36/tmp6gqlrf36.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc51c21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc51918b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc51918988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc519177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6gqlrf36                        0x00005587b828523b <unavailable> + 4667

    5    libc.so.6                          0x00002afc51e0d460 __libc_start_main +
    245

    6    tmp6gqlrf36                        0x00005587b8284e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    \n    let d = (b * b) - (4 * a * c)\n  \
    \  if (d == 0) {\n        return false\n    }\n    let x = (-b + sqrt(d))/(2 *\
    \ a)\n    let y = (-b - sqrt(d))/(2 * a)\n    return (x >= 0 && x <= 1) && (y\
    \ >= 0 && y <= 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpk9vpr6ee.swift:17:19: error: cannot find 'sqrt' in scope\n    let\
    \ x = (-b + sqrt(d))/(2 * a)\n                  ^~~~\n/tmp/tmpk9vpr6ee.swift:18:19:\
    \ error: cannot find 'sqrt' in scope\n    let y = (-b - sqrt(d))/(2 * a)\n   \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return sqrt(pow(a, 2) + pow(b, 2)) == pow(c,\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b:\
    \ 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpwymmzh63.swift:12:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(b, 2)) == pow(c, 2)\n           ^~~~\n/tmp/tmpwymmzh63.swift:12:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(b, 2)) ==\
    \ pow(c, 2)\n                ^~~\n/tmp/tmpwymmzh63.swift:12:29: error: cannot\
    \ find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(b, 2)) == pow(c, 2)\n \
    \                           ^~~\n/tmp/tmpwymmzh63.swift:12:43: error: cannot find\
    \ 'pow' in scope\n    return sqrt(pow(a, 2) + pow(b, 2)) == pow(c, 2)\n      \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - c) * (a - b)) < ((a * a - b\
    \ * b - c) * (a - b - c) * (b - c))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpiz0atitn/tmpiz0atitn.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6090b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae608da8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae608da8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae608da77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiz0atitn                        0x000055da8f1761bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae60929d460 __libc_start_main +
    245

    6    tmpiz0atitn                        0x000055da8f175e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a >= b + c && b >= a + c && c >=\
    \ a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpjx8_rjmt/tmpjx8_rjmt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a8c70fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a8c406b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a8c406988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a8c4057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjx8_rjmt                        0x000055997c6781bb <unavailable> + 4539

    5    libc.so.6                          0x00002b2a8c8fb460 __libc_start_main +
    245

    6    tmpjx8_rjmt                        0x000055997c677e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    \n    let is_right_angle = a * b > 0\n \
    \   let is_right_angle_or_90 = a * b + c > 0\n    return is_right_angle && is_right_angle_or_90\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpo5jbthz6/tmpo5jbthz6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad81392dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad813624b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad813624988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8136237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5jbthz6                        0x00005603b4f3a23b <unavailable> + 4667

    5    libc.so.6                          0x00002ad813b19460 __libc_start_main +
    245

    6    tmpo5jbthz6                        0x00005603b4f39e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = b - a\n    let b1 = c - b\n   \
    \ let c1 = a - c\n    return a1 * b1 + b1 * c1 == c1 * a1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp4jnyfyrb/tmp4jnyfyrb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49252b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4924fa8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4924fa8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4924fa77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jnyfyrb                        0x0000560eacb841bb <unavailable> + 4539

    5    libc.so.6                          0x00002b492549d460 __libc_start_main +
    245

    6    tmp4jnyfyrb                        0x0000560eacb83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        print(\"\
    ERROR: Cannot calculate right angle triangle\")\n        return false\n    }\n\
    \    let a2 = a * a\n    let b2 = b * b\n    let c2 = c * c\n    let ac = (a2\
    \ + c2 - b2) / (2.0 * c)\n    let bc = (a2 - ac) / b\n    let ca = (a2 + b2 -\
    \ c2) / (2.0 * b)\n    let ans = (bbRootTrial(a, b, c) == ac && ccRootTrial(a,\
    \ b, c) == bc && abRootTrial(a, b, c) == ca)\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1pkdv6_4.swift:19:32: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let ac = (a2 + c2 - b2) / (2.0 * c)\n \
    \                              ^\n                               Int( )\n/tmp/tmp1pkdv6_4.swift:21:32:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    let ca = (a2 + b2 - c2) / (2.0 * b)\n                               ^\n \
    \                              Int( )\n/tmp/tmp1pkdv6_4.swift:22:16: error: cannot\
    \ find 'bbRootTrial' in scope\n    let ans = (bbRootTrial(a, b, c) == ac && ccRootTrial(a,\
    \ b, c) == bc && abRootTrial(a, b, c) == ca)\n               ^~~~~~~~~~~\n/tmp/tmp1pkdv6_4.swift:22:46:\
    \ error: cannot find 'ccRootTrial' in scope\n    let ans = (bbRootTrial(a, b,\
    \ c) == ac && ccRootTrial(a, b, c) == bc && abRootTrial(a, b, c) == ca)\n    \
    \                                         ^~~~~~~~~~~\n/tmp/tmp1pkdv6_4.swift:22:76:\
    \ error: cannot find 'abRootTrial' in scope\n    let ans = (bbRootTrial(a, b,\
    \ c) == ac && ccRootTrial(a, b, c) == bc && abRootTrial(a, b, c) == ca)\n    \
    \                                                                       ^~~~~~~~~~~\n\
    /tmp/tmp1pkdv6_4.swift:22:15: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let ans = (bbRootTrial(a, b, c) == ac && ccRootTrial(a,\
    \ b, c) == bc && abRootTrial(a, b, c) == ca)\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979156
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ac = a\n    let bc = b\n    let cc =\
    \ c\n    return (ac > 0 && bc == cc || bc == ac && cc == ac || cc == bc && ac\
    \ == bc) || cc == bc && ac == bc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmprdo6czj_/tmprdo6czj_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31ae7e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31ae4d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31ae4d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31ae4d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdo6czj_                        0x0000558d0226b1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b31ae9ce460 __libc_start_main +
    245

    6    tmprdo6czj_                        0x0000558d0226ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a + b > c || b + c > a || c + a\
    \ > b) ? false : true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpi7gwymvy/tmpi7gwymvy.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51d1421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51d1118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51d1118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51d11177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7gwymvy                        0x00005555da13f1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b51d160d460 __libc_start_main +
    245

    6    tmpi7gwymvy                        0x00005555da13ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979146
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a + b > c || b + c > a || c + a\
    \ > b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmplk30vtzk/tmplk30vtzk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e1f832c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e1f529b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e1f529988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e1f5287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplk30vtzk                        0x0000556e9659823b <unavailable> + 4667

    5    libc.so.6                          0x00002b8e1fa1e460 __libc_start_main +
    245

    6    tmplk30vtzk                        0x0000556e96597e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let b2 = b*b\n    let c2 = c*c\n    let\
    \ a2 = a*a\n    let ac2 = a2+c2\n    let bc2 = b2+c2\n    if b2 > a2 && c2 > ac2\
    \ {\n        return true\n    }\n    if b2 > a2 && c2 < ac2 {\n        return\
    \ false\n    }\n    if b2 < a2 && c2 < ac2 {\n        return false\n    }\n  \
    \  if b2 < a2 && c2 > ac2 {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp8awkog2i/tmp8awkog2i.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f9b7adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f9b4a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f9b4a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f9b4a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8awkog2i                        0x00005555dcec71bb <unavailable> + 4539

    5    libc.so.6                          0x00002b5f9b999460 __libc_start_main +
    245

    6    tmp8awkog2i                        0x00005555dcec6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == b {\n        return a == c\n   \
    \ }\n    if b == c {\n        return a == b\n    }\n    return a * b == c * a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpj0oyf11j/tmpj0oyf11j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ed0839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ed0530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ed0530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ed052f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0oyf11j                        0x0000562c2bcd91bb <unavailable> + 4539

    5    libc.so.6                          0x00002b5ed0a25460 __libc_start_main +
    245

    6    tmpj0oyf11j                        0x0000562c2bcd8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    switch {\n    case a <= 0 || b <= 0 || c\
    \ <= 0 :\n        return false\n    case a == b && a == c :\n        return true\n\
    \    case a == b :\n        return true\n    case a == c :\n        return true\n\
    \    case b == c :\n        return true\n    case a == 0 || b == 0 || c == 0:\n\
    \        return false\n    default:\n        return (a+b >= c) && (a+c >= b) &&\
    \ (b+c >= a)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp0mmkf4l4.swift:12:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = a - b\n    let b = b - c\n    let\
    \ c = c - a\n\n    let ab = a + b\n    let ac = a + c\n    let bc = b + c\n\n\
    \    if ab < ac &&\n        ab < bc &&\n        ab >= 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpy9z2fnzm/tmpy9z2fnzm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba80d1bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba80ceb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba80ceb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba80ceb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9z2fnzm                        0x0000559d3905a1bb <unavailable> + 4539

    5    libc.so.6                          0x00002ba80d3a7460 __libc_start_main +
    245

    6    tmpy9z2fnzm                        0x0000559d39059e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let abs = abs(a)\n    let ac = abs(c)\n\
    \    let bc = abs(b)\n    \n    if abs >= bc {\n        return false\n    }\n\
    \    if abs >= ac {\n        return true\n    }\n    \n    if a > 0 && b > 0 &&\
    \ c > 0 {\n        return false\n    }\n    \n    if a < 0 && b < 0 && c < 0 {\n\
    \        return true\n    }\n    \n    if a == 0 && b == 0 && c == 0 {\n     \
    \   return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbp9ayc3a.swift:13:14: error: cannot call value of non-function\
    \ type 'Int'\n    let ac = abs(c)\n             ^\n/tmp/tmpbp9ayc3a.swift:14:14:\
    \ error: cannot call value of non-function type 'Int'\n    let bc = abs(b)\n \
    \            ^\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var sum: Int = 0\n    var x: Double\n  \
    \  var y: Double\n    var z: Double\n    x = abs((a * b) + (b * c) + (c * a))\n\
    \    y = abs((a * c) - (b * a))\n    z = abs((a * b) - (c * a))\n    return x\
    \ * x + y * y + z * z < 0.0001\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ejy3kal.swift:16:5: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    x = abs((a * b) + (b * c) + (c * a))\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2ejy3kal.swift:17:9: error: cannot assign value of type 'Int' to type\
    \ 'Double'\n    y = abs((a * c) - (b * a))\n        ^~~~~~~~~~~~~~~~~~~~~~\n \
    \       Double(               )\n/tmp/tmp2ejy3kal.swift:18:9: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n    z = abs((a * b) - (c * a))\n     \
    \   ^~~~~~~~~~~~~~~~~~~~~~\n        Double(               )\n"
  stdout: ''
  timestamp: 1659979180
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    guard b >= a && c >= a && c >= b && b >=\
    \ c else { return false }\n    guard a >= c && b >= c else { return false }\n\
    \    let p = a + b + c\n    let q1 = p*(p-a)*(a-c)\n    let q2 = p*(p-b)*(b-c)\n\
    \    let q3 = p*(p-c)*(c-a)\n    let q4 = q3 + q1\n    return q4 > 0 ? true :\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpetrmtvhj/tmpetrmtvhj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2202a18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b220270fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b220270f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b220270e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetrmtvhj                        0x0000562fff3331bb <unavailable> + 4539

    5    libc.so.6                          0x00002b2202c04460 __libc_start_main +
    245

    6    tmpetrmtvhj                        0x0000562fff332e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let det = (a * b) - (c * b)\n    let ac\
    \ = a / c\n    let bc = b / c\n    return (det >= 0) && (ac >= 0) && (bc >= 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzf5p__qc/tmpzf5p__qc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38f9dfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38f9af5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38f9af5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38f9af47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzf5p__qc                        0x000055e464b0b24b <unavailable> + 4683

    5    libc.so.6                          0x00002b38f9fea460 __libc_start_main +
    245

    6    tmpzf5p__qc                        0x000055e464b0aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a * b) >= (c * a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp0m2_y3cu/tmp0m2_y3cu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2c6c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2c3bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2c3ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2c3b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0m2_y3cu                        0x00005606a73471bb <unavailable> + 4539

    5    libc.so.6                          0x00002b7a2c8af460 __libc_start_main +
    245

    6    tmp0m2_y3cu                        0x00005606a7346e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  return ((a + b > c) && (a * b > c) && (a *\
    \ c > b))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpnduiw3ad/tmpnduiw3ad.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeed6592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeed6289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeed6289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeed62887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnduiw3ad                        0x000055fb78a9f335 <unavailable> + 4917

    5    libc.so.6                          0x00002aeed677e460 __libc_start_main +
    245

    6    tmpnduiw3ad                        0x000055fb78a9ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    var ab = a - b\n    var bc = b - c\n   \
    \ var ac = a - c\n\n    var aa = ab*bc + ac*ca\n    var bb = ab*ca - ac*bc\n \
    \   var cc = ab*ca + ac*bb\n\n    if aa > 0 && bb > 0 && cc > 0 {\n        if\
    \ bb > aa && cc > bb {\n            return true\n        } else {\n          \
    \  return false\n        }\n    } else {\n        return false\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6jbe0ntx.swift:16:25: error: cannot find 'ca' in scope\n    var\
    \ aa = ab*bc + ac*ca\n                        ^~\n/tmp/tmp6jbe0ntx.swift:17:17:\
    \ error: cannot find 'ca' in scope\n    var bb = ab*ca - ac*bc\n             \
    \   ^~\n/tmp/tmp6jbe0ntx.swift:18:17: error: cannot find 'ca' in scope\n    var\
    \ cc = ab*ca + ac*bb\n                ^~\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (b - a) * (b - a) + (c - b) * (c\
    \ - b) <= 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp9574jqbk/tmp9574jqbk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af95988bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af959582b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af959582988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9595817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9574jqbk                        0x000056116e95d1bb <unavailable> + 4539

    5    libc.so.6                          0x00002af959a77460 __libc_start_main +
    245

    6    tmp9574jqbk                        0x000056116e95ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let is_right_angle = ( (a - c) * (b - a)\
    \ * (c - a) <= 0 )\n    return is_right_angle\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpy7jz3kzr/tmpy7jz3kzr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae374a00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3746f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3746f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3746f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7jz3kzr                        0x00005602e540c23b <unavailable> + 4667

    5    libc.so.6                          0x00002ae374bec460 __libc_start_main +
    245

    6    tmpy7jz3kzr                        0x00005602e540be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return a == c || a == b || b == c || b ==\
    \ a || a == b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpb2jy198b/tmpb2jy198b.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a9e15bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a9de52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a9de52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a9de517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2jy198b                        0x000055f1253451bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3a9e347460 __libc_start_main +
    245

    6    tmpb2jy198b                        0x000055f125344e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) == (c-a) * (b\
    \ - a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmptua71uxo/tmptua71uxo.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f7457ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f74275b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f74275988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f742747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptua71uxo                        0x0000564bde02c1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b9f7476a460 __libc_start_main +
    245

    6    tmptua71uxo                        0x0000564bde02be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (((b - a) * (b - c)) - ((c - a) *\
    \ (c - b)) - ((b - a) * (a - b)) < 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp88yjmp32/tmp88yjmp32.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d05643c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d0533ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d0533a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d053397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp88yjmp32                        0x000055afc03d023b <unavailable> + 4667

    5    libc.so.6                          0x00002b1d0582f460 __libc_start_main +
    245

    6    tmp88yjmp32                        0x000055afc03cfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a >= 0 && b >= 0 && c >= 0 && b >= c\
    \ {\n        let area = a * b * c\n        let b2 = b * b\n        let c2 = c\
    \ * c\n        let ac = a * c\n        let sqrtA = sqrt(pow(a, 2) + pow(b, 2))\n\
    \        let sqrtB = sqrt(pow(a, 2) + pow(c, 2))\n        \n        var aVal =\
    \ a / sqrtA\n        var bVal = -b / sqrtB\n        var cVal = sqrt(pow(b, 2)\
    \ + (c2 - ac) * (c2 - ac))\n        var p1 = sqrt(pow(b2, 2) - 4 * a * b * cVal)\n\
    \        var p2 = sqrt(pow(b2, 2) - 4 * (ac + b2) * cVal)\n        \n        if\
    \ aVal > 0 && bVal < 0 && cVal < 0 {\n            if p1 > p2 {\n             \
    \   return true\n            } else {\n                return false\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoao3ewer.swift:17:21: error: cannot find 'sqrt' in scope\n    \
    \    let sqrtA = sqrt(pow(a, 2) + pow(b, 2))\n                    ^~~~\n/tmp/tmpoao3ewer.swift:17:26:\
    \ error: cannot find 'pow' in scope\n        let sqrtA = sqrt(pow(a, 2) + pow(b,\
    \ 2))\n                         ^~~\n/tmp/tmpoao3ewer.swift:17:38: error: cannot\
    \ find 'pow' in scope\n        let sqrtA = sqrt(pow(a, 2) + pow(b, 2))\n     \
    \                                ^~~\n/tmp/tmpoao3ewer.swift:18:21: error: cannot\
    \ find 'sqrt' in scope\n        let sqrtB = sqrt(pow(a, 2) + pow(c, 2))\n    \
    \                ^~~~\n/tmp/tmpoao3ewer.swift:18:26: error: cannot find 'pow'\
    \ in scope\n        let sqrtB = sqrt(pow(a, 2) + pow(c, 2))\n                \
    \         ^~~\n/tmp/tmpoao3ewer.swift:18:38: error: cannot find 'pow' in scope\n\
    \        let sqrtB = sqrt(pow(a, 2) + pow(c, 2))\n                           \
    \          ^~~\n/tmp/tmpoao3ewer.swift:22:20: error: cannot find 'sqrt' in scope\n\
    \        var cVal = sqrt(pow(b, 2) + (c2 - ac) * (c2 - ac))\n                \
    \   ^~~~\n/tmp/tmpoao3ewer.swift:22:25: error: cannot find 'pow' in scope\n  \
    \      var cVal = sqrt(pow(b, 2) + (c2 - ac) * (c2 - ac))\n                  \
    \      ^~~\n/tmp/tmpoao3ewer.swift:23:18: error: cannot find 'sqrt' in scope\n\
    \        var p1 = sqrt(pow(b2, 2) - 4 * a * b * cVal)\n                 ^~~~\n\
    /tmp/tmpoao3ewer.swift:23:23: error: cannot find 'pow' in scope\n        var p1\
    \ = sqrt(pow(b2, 2) - 4 * a * b * cVal)\n                      ^~~\n/tmp/tmpoao3ewer.swift:24:18:\
    \ error: cannot find 'sqrt' in scope\n        var p2 = sqrt(pow(b2, 2) - 4 * (ac\
    \ + b2) * cVal)\n                 ^~~~\n/tmp/tmpoao3ewer.swift:24:23: error: cannot\
    \ find 'pow' in scope\n        var p2 = sqrt(pow(b2, 2) - 4 * (ac + b2) * cVal)\n\
    \                      ^~~\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  switch {\n  case a+b > c && a+c > b && b+c\
    \ > a :\n    return true\n  default:\n    return false\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprmufq8tm.swift:12:10: error: expected expression in 'switch' statement\n\
    \  switch {\n         ^\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 { return false }\n    if b ==\
    \ 0 { return false }\n    if c == 0 { return false }\n    if a > b + c { return\
    \ false }\n    if a > c { return false }\n    if b > c + a { return false }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp9ls7lhql/tmp9ls7lhql.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac8cf5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac8cc51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac8cc51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac8cc507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ls7lhql                        0x000055e14977e23b <unavailable> + 4667

    5    libc.so.6                          0x00002aac8d146460 __libc_start_main +
    245

    6    tmp9ls7lhql                        0x000055e14977de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a*a - b*b) == (c*c - a*a)) || (((b*b\
    \ - a*a) == (c*c - b*b)) || ((c*c - a*a) == (b*b - a*a))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9pcbkcic.swift:13:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp9pcbkcic.swift:12:44: note: to match this opening '('\n    return ((a*a\
    \ - b*b) == (c*c - a*a)) || (((b*b - a*a) == (c*c - b*b)) || ((c*c - a*a) == (b*b\
    \ - a*a))\n                                           ^\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // write your code in Swift 2.3\n    let\
    \ lengthA = abs(a)\n    let lengthB = abs(b)\n    let lengthC = abs(c)\n    if\
    \ lengthB == lengthC {\n        return false\n    } else if lengthC == lengthA\
    \ {\n        return true\n    } else {\n        return (lengthB >= lengthA) &&\
    \ (lengthB >= lengthC)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpg8c6kjv0/tmpg8c6kjv0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1b4542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1b4239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1b4239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1b42387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8c6kjv0                        0x000055e5da3262ab <unavailable> + 4779

    5    libc.so.6                          0x00002ba1b472e460 __libc_start_main +
    245

    6    tmpg8c6kjv0                        0x000055e5da325f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    \n    var angle: Double\n    \n    if a\
    \ >= b {\n        return a >= c\n    } else {\n        if c >= b {\n         \
    \   return c >= a\n        } else {\n            angle = (a - b - c) / Double(a\
    \ * b)\n            if angle > 90.0 {\n                return angle < 180.0\n\
    \            } else {\n                return angle <= 90.0\n            }\n \
    \       }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpx3ji77ht.swift:21:28: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n            angle = (a - b - c) / Double(a\
    \ * b)\n                           ^\n                    Double(    )\n"
  stdout: ''
  timestamp: 1659979149
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    guard a >= 0, b >= 0, c >= 0 else {\n  \
    \      print(\"The given sides should not all be less than or equal to zero.\"\
    )\n        return false\n    }\n    if b == 0 {\n        return false\n    }\n\
    \    if a == c || a == b {\n        return true\n    }\n    var l = (b - a)\n\
    \    var m = (c - a)\n    var n = (c - b)\n    var t = (a - b)\n    return m.abs()\
    \ + n.abs() + l.abs() + t.abs() == 9\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi186qt9s.swift:26:14: error: value of type 'Int' has no member\
    \ 'abs'\n    return m.abs() + n.abs() + l.abs() + t.abs() == 9\n           ~ ^~~\n\
    /tmp/tmpi186qt9s.swift:26:24: error: value of type 'Int' has no member 'abs'\n\
    \    return m.abs() + n.abs() + l.abs() + t.abs() == 9\n                     ~\
    \ ^~~\n/tmp/tmpi186qt9s.swift:26:34: error: value of type 'Int' has no member\
    \ 'abs'\n    return m.abs() + n.abs() + l.abs() + t.abs() == 9\n             \
    \                  ~ ^~~\n/tmp/tmpi186qt9s.swift:26:44: error: value of type 'Int'\
    \ has no member 'abs'\n    return m.abs() + n.abs() + l.abs() + t.abs() == 9\n\
    \                                         ~ ^~~\n"
  stdout: ''
  timestamp: 1659979154
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return math.abs((b-a)*(c-b))/(math.sqrt((b-a)*(c-b))*math.sqrt((c-a)*(c-b)))\
    \ <= 1.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpyzqkr262.swift:12:12: error: cannot find 'math' in scope\n    return\
    \ math.abs((b-a)*(c-b))/(math.sqrt((b-a)*(c-b))*math.sqrt((c-a)*(c-b))) <= 1.0\n\
    \           ^~~~\n/tmp/tmpyzqkr262.swift:12:35: error: cannot find 'math' in scope\n\
    \    return math.abs((b-a)*(c-b))/(math.sqrt((b-a)*(c-b))*math.sqrt((c-a)*(c-b)))\
    \ <= 1.0\n                                  ^~~~\n/tmp/tmpyzqkr262.swift:12:58:\
    \ error: cannot find 'math' in scope\n    return math.abs((b-a)*(c-b))/(math.sqrt((b-a)*(c-b))*math.sqrt((c-a)*(c-b)))\
    \ <= 1.0\n                                                         ^~~~\n"
  stdout: ''
  timestamp: 1659979148
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    \n    return (-b + sqrt(sq(b) - 4 * a *\
    \ c)) < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp0vjktbtz.swift:13:18: error: cannot find 'sqrt' in scope\n    return\
    \ (-b + sqrt(sq(b) - 4 * a * c)) < 0\n                 ^~~~\n/tmp/tmp0vjktbtz.swift:13:23:\
    \ error: cannot find 'sq' in scope\n    return (-b + sqrt(sq(b) - 4 * a * c))\
    \ < 0\n                      ^~\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b * b) - (4 * a * c)) < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp148t2wwf/tmp148t2wwf.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b73252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b72f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b72f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b72f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp148t2wwf                        0x000055f13e8a723b <unavailable> + 4667

    5    libc.so.6                          0x00002b6b7343e460 __libc_start_main +
    245

    6    tmp148t2wwf                        0x000055f13e8a6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b\
    \ + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpzfx6dj7_/tmpzfx6dj7_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c681bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c67eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c67eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c67eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfx6dj7_                        0x000055bb4120c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1c683a8460 __libc_start_main +
    245

    6    tmpzfx6dj7_                        0x000055bb4120be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ac = a - c\n    let bc = b - c\n   \
    \ return abs(ac) > abs(bc) || bc > ac\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpr08m57gj/tmpr08m57gj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b871cfa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871cc9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b871cc9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b871cc9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr08m57gj                        0x000055e1a5fef32b <unavailable> + 4907

    5    libc.so.6                          0x00002b871d192460 __libc_start_main +
    245

    6    tmpr08m57gj                        0x000055e1a5feef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a*a + b*b == c*c {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp44huaysa/tmp44huaysa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d23c77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d2396eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d2396e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d2396d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44huaysa                        0x000055b522c1a2b9 <unavailable> + 4793

    5    libc.so.6                          0x00002b7d23e63460 __libc_start_main +
    245

    6    tmp44huaysa                        0x000055b522c19e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let degrees = Angle(a: a, b: b, c: c)\n\
    \    return degrees.right == true || degrees.right == false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxzbr3668.swift:12:19: error: cannot find 'Angle' in scope\n   \
    \ let degrees = Angle(a: a, b: b, c: c)\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab: Int = abs(a - b)\n    let ac: Int\
    \ = abs(a - c)\n    let bc: Int = abs(b - c)\n    return (ab == ac) || (ab ==\
    \ bc)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpxy78rqe9/tmpxy78rqe9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf327e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf324d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf324d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf324d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxy78rqe9                        0x0000559511bb132b <unavailable> + 4907

    5    libc.so.6                          0x00002aaf329ce460 __libc_start_main +
    245

    6    tmpxy78rqe9                        0x0000559511bb0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    guard a >= 0, b >= 0, c >= 0, a + b + c\
    \ > 0, a >= b, a >= c, b >= c, a > b, b > c else {\n        return false\n   \
    \ }\n\n    let a2 = abs(a)\n    let b2 = abs(b)\n    let c2 = abs(c)\n    let\
    \ ab = abs(a+b)\n    let ac = abs(a+c)\n    let bc = abs(b+c)\n\n    guard ab\
    \ >= ac, bc >= ab, c2 >= b2 else {\n        return false\n    }\n\n    if b2 >\
    \ a2 || c2 > b2 {\n        return false\n    }\n\n    if a < b {\n        if c\
    \ < a {\n            return true\n        }\n    }\n\n    if b < c {\n       \
    \ if a < c {\n            return true\n        }\n    }\n\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpyf1m273i/tmpyf1m273i.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af079f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af079c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af079c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af079c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyf1m273i                        0x0000559e4ca862ab <unavailable> + 4779

    5    libc.so.6                          0x00002af07a150460 __libc_start_main +
    245

    6    tmpyf1m273i                        0x0000559e4ca85f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    switch {\n    case b < a && b < c:\n   \
    \     return false\n    case c < a && c < b:\n        return false\n    case b\
    \ == a * a && c == b*b: return true\n    case a == c || b == c || c == a: // special\
    \ case: a = c or b = c or c = a\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph0a37z9b.swift:12:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    \n    return ((a - b) * (c - b)) > 0 &&\
    \ ((b - a) * (c - b)) > 0 && ((b - a) * (a - b)) > 0\n    \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpgz7t_88c/tmpgz7t_88c.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb70955c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb7064cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb7064c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb7064b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz7t_88c                        0x0000558c83dee1bb <unavailable> + 4539

    5    libc.so.6                          0x00002abb70b41460 __libc_start_main +
    245

    6    tmpgz7t_88c                        0x0000558c83dede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    // TODO: Write a description of this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpiud_qnla/tmpiud_qnla.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b697e90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b697e601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b697e601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b697e6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiud_qnla                        0x00005567245531bb <unavailable> + 4539

    5    libc.so.6                          0x00002b697eaf6460 __libc_start_main +
    245

    6    tmpiud_qnla                        0x0000556724552e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\tlet a = Double(a)\n\tlet b = Double(b)\n\t\
    let c = Double(c)\n\n\tlet d = b*b - 4*a*c\n\tif d < 0 {\n\t\treturn false\n\t\
    }\n\n\tif d > 0 {\n\t\tlet root: Double = sqrt(d)\n\t\tlet rad = atan(b/a)\n\t\
    \tif rad < 0 {\n\t\t\trad += 2 * Double.pi\n\t\t}\n\t\treturn rad < root\n\t}\n\
    \n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpds2mivq6.swift:22:22: error: cannot find 'sqrt' in scope\n    \
    \            let root: Double = sqrt(d)\n                                   ^~~~\n\
    /tmp/tmpds2mivq6.swift:23:13: error: cannot find 'atan' in scope\n           \
    \     let rad = atan(b/a)\n                          ^~~~\n"
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let dx = Double(b) - Double(a)\n    let\
    \ dy = Double(c) - Double(a)\n    let dz = Double(c) - Double(b)\n    return (dx\
    \ * dx + dz * dz) > (dy * dy)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpgy7ttlyo/tmpgy7ttlyo.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc49901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc495f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc495f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc495f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgy7ttlyo                        0x000055b41b5c11bb <unavailable> + 4539

    5    libc.so.6                          0x00002adc49aed460 __libc_start_main +
    245

    6    tmpgy7ttlyo                        0x000055b41b5c0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let EPSILON = 2.0 * sqrt(a * a + b * b +\
    \ c * c)\n    return (b * b - a * c) >= EPSILON && (2.0 * b * c - a * a) >= EPSILON\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1f0r95z9.swift:12:25: error: cannot find 'sqrt' in scope\n    let\
    \ EPSILON = 2.0 * sqrt(a * a + b * b + c * c)\n                        ^~~~\n\
    /tmp/tmp1f0r95z9.swift:13:12: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (b * b - a * c) >= EPSILON && (2.0 * b * c - a *\
    \ a) >= EPSILON\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979240
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return abs(a - b) > abs(a - c) && abs(a\
    \ - c) > abs(b - c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpbvc3vq_o/tmpbvc3vq_o.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0fd21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0fa18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf0fa18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf0fa177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvc3vq_o                        0x000055e8e07fa2ab <unavailable> + 4779

    5    libc.so.6                          0x00002abf0ff0d460 __libc_start_main +
    245

    6    tmpbvc3vq_o                        0x000055e8e07f9f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a\
    \ - c)\n    let bc = abs(b - c)\n    return (ab >= ab) && (ac >= ac) && (bc >=\
    \ bc)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpa7j7wbqv/tmpa7j7wbqv.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6aa0c3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6aa0934b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6aa0934988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6aa09337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7j7wbqv                        0x000055b75a57b32b <unavailable> + 4907

    5    libc.so.6                          0x00002b6aa0e29460 __libc_start_main +
    245

    6    tmpa7j7wbqv                        0x000055b75a57af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    guard a >= 0, b >= 0, c >= 0 else {\n  \
    \      return false\n    }\n    if a + b > c {\n        return false\n    }\n\
    \    if a + c > b {\n        return false\n    }\n    if b + c > a {\n       \
    \ return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp9pj21de7/tmp9pj21de7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2ae03fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2add36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2add36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2add357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9pj21de7                        0x000055be168211bb <unavailable> + 4539

    5    libc.so.6                          0x00002af2ae22b460 __libc_start_main +
    245

    6    tmp9pj21de7                        0x000055be16820e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n  return (b - a) * (b - a) + (c - a) * (c -\
    \ a) <= 0;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpp0j6xoy9/tmpp0j6xoy9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ac244fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ac2146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ac2146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ac21457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0j6xoy9                        0x0000560846dee1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b1ac263b460 __libc_start_main +
    245

    6    tmpp0j6xoy9                        0x0000560846dede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    // if three sides are equal, right angle triangle\
    \ is possible\n    if a == b {\n        return a == c\n    }\n    // if three\
    \ sides are equal, right angle triangle is possible\n    if a == c {\n       \
    \ return b == c\n    }\n    // if three sides are equal, right angle triangle\
    \ is possible\n    if b == c {\n        return true\n    }\n    // if three sides\
    \ are equal, right angle triangle is possible\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3315d6cs/tmp3315d6cs.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b945c112c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b945be09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b945be09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b945be087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3315d6cs                        0x000055bfe892c1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b945c2fe460 __libc_start_main +
    245

    6    tmp3315d6cs                        0x000055bfe892be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b*b - a*c) < (a*a + b*b)) && !((b*b\
    \ + a*a - c*c) < (a*a + b*b + c*c))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpvfri4n72/tmpvfri4n72.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e135ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e1055b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e1055988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e10547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfri4n72                        0x0000562a29de81bb <unavailable> + 4539

    5    libc.so.6                          0x00002b26e154a460 __libc_start_main +
    245

    6    tmpvfri4n72                        0x0000562a29de7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 && b == 0 && c == 0 {\n      \
    \  return true\n    }\n\n    // if three sides are parallel return false\n   \
    \ let p = ((b*b) - (4*a*c))\n    if p < 0 {\n        return false\n    }\n\n \
    \   // if two sides same return true\n    let q = (a*a) + (b*b) + (c*c)\n    if\
    \ q == 0 {\n        return true\n    }\n\n    // if two sides are same return\
    \ true\n    let r = sqrt(Double(p) / q)\n    if r >= Double(M_PI) {\n        return\
    \ false\n    }\n\n    // if two sides are same return true\n    let s = (a*a)\
    \ + (b*b) - (c*c)\n    if s <= 0 {\n        return false\n    }\n\n    // if two\
    \ sides are same return true\n    let t = (b*b) - (4*a*c)\n    if t <= 0 {\n \
    \       return false\n    }\n\n    // if two sides are same return true\n    let\
    \ u = sqrt(Double(t) / s)\n    return (u < Double(M_PI_2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu_0rx8ms.swift:29:13: error: cannot find 'sqrt' in scope\n    let\
    \ r = sqrt(Double(p) / q)\n            ^~~~\n/tmp/tmpu_0rx8ms.swift:29:28: error:\
    \ binary operator '/' cannot be applied to operands of type 'Double' and 'Int'\n\
    \    let r = sqrt(Double(p) / q)\n                 ~~~~~~~~~ ^ ~\n/tmp/tmpu_0rx8ms.swift:29:28:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    let r = sqrt(Double(p) / q)\n            \
    \               ^\n/tmp/tmpu_0rx8ms.swift:30:20: error: cannot find 'M_PI' in\
    \ scope\n    if r >= Double(M_PI) {\n                   ^~~~\n/tmp/tmpu_0rx8ms.swift:47:13:\
    \ error: cannot find 'sqrt' in scope\n    let u = sqrt(Double(t) / s)\n      \
    \      ^~~~\n/tmp/tmpu_0rx8ms.swift:47:28: error: binary operator '/' cannot be\
    \ applied to operands of type 'Double' and 'Int'\n    let u = sqrt(Double(t) /\
    \ s)\n                 ~~~~~~~~~ ^ ~\n/tmp/tmpu_0rx8ms.swift:47:28: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    let u = sqrt(Double(t) / s)\n                           ^\n\
    /tmp/tmpu_0rx8ms.swift:48:24: error: cannot find 'M_PI_2' in scope\n    return\
    \ (u < Double(M_PI_2))\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659979148
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b\
    \ + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpzfx6dj7_/tmpzfx6dj7_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c681bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c67eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c67eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c67eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfx6dj7_                        0x000055bb4120c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1c683a8460 __libc_start_main +
    245

    6    tmpzfx6dj7_                        0x000055bb4120be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979144
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    guard a > 0 && b > 0 && c > 0 else {\n \
    \       return false\n    }\n    guard b > a && c > a && a > c else {\n      \
    \  return false\n    }\n    guard a > b && b > c && c > a else {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp0z1e3tyb/tmp0z1e3tyb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77e2613c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77e230ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77e230a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77e23097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0z1e3tyb                        0x0000563016f681bb <unavailable> + 4539

    5    libc.so.6                          0x00002b77e27ff460 __libc_start_main +
    245

    6    tmp0z1e3tyb                        0x0000563016f67e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979148
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\treturn (b ** 2 + c ** 2) <= (a ** 2 + b **\
    \ 2 + c ** 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp5s34lvdf.swift:12:12: error: cannot find operator '**' in scope\n\
    \        return (b ** 2 + c ** 2) <= (a ** 2 + b ** 2 + c ** 2)\n            \
    \      ^~\n/tmp/tmp5s34lvdf.swift:12:21: error: cannot find operator '**' in scope\n\
    \        return (b ** 2 + c ** 2) <= (a ** 2 + b ** 2 + c ** 2)\n            \
    \               ^~\n/tmp/tmp5s34lvdf.swift:12:33: error: cannot find operator\
    \ '**' in scope\n        return (b ** 2 + c ** 2) <= (a ** 2 + b ** 2 + c ** 2)\n\
    \                                       ^~\n/tmp/tmp5s34lvdf.swift:12:42: error:\
    \ cannot find operator '**' in scope\n        return (b ** 2 + c ** 2) <= (a **\
    \ 2 + b ** 2 + c ** 2)\n                                                ^~\n/tmp/tmp5s34lvdf.swift:12:51:\
    \ error: cannot find operator '**' in scope\n        return (b ** 2 + c ** 2)\
    \ <= (a ** 2 + b ** 2 + c ** 2)\n                                            \
    \             ^~\n"
  stdout: ''
  timestamp: 1659979148
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n/// sides form a right-angled triangle, false otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n\tif b > c {\n\t\tif b >= a {\n\t\t\treturn\
    \ false\n\t\t}\n\t\treturn true\n\t} else if c > b {\n\t\tif c >= a {\n\t\t\t\
    return true\n\t\t}\n\t\treturn false\n\t}\n\n\t// if a = b, c = d, or a = c, c\
    \ = d, or a = 3, b = d, or a = d, b = c\n\tif a == b {\n\t\tif c == d {\n\t\t\t\
    return true\n\t\t}\n\t\tif c == a {\n\t\t\treturn false\n\t\t}\n\t\tif a == c\
    \ {\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t} else if a == c {\n\t\tif\
    \ b == d {\n\t\t\treturn true\n\t\t}\n\t\tif b == a {\n\t\t\treturn false\n\t\t\
    }\n\t\tif a == b {\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\n\tlet a1\
    \ = sqrt(a * a + b * b - c * c)\n\tlet a2 = sqrt(a * a + c * c - b * b)\n\tlet\
    \ b1 = sqrt(b * b + c * c - a * a)\n\tlet b2 = sqrt(b * b + a * a - c * c)\n\n\
    \tif a1 * b2 - b1 * a2 >= 0 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b:\
    \ 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmperketauo.swift:26:11: error: cannot find 'd' in scope\n       \
    \         if c == d {\n                        ^\n/tmp/tmperketauo.swift:37:11:\
    \ error: cannot find 'd' in scope\n                if b == d {\n             \
    \           ^\n/tmp/tmperketauo.swift:49:11: error: cannot find 'sqrt' in scope\n\
    \        let a1 = sqrt(a * a + b * b - c * c)\n                 ^~~~\n/tmp/tmperketauo.swift:50:11:\
    \ error: cannot find 'sqrt' in scope\n        let a2 = sqrt(a * a + c * c - b\
    \ * b)\n                 ^~~~\n/tmp/tmperketauo.swift:51:11: error: cannot find\
    \ 'sqrt' in scope\n        let b1 = sqrt(b * b + c * c - a * a)\n            \
    \     ^~~~\n/tmp/tmperketauo.swift:52:11: error: cannot find 'sqrt' in scope\n\
    \        let b2 = sqrt(b * b + a * a - c * c)\n                 ^~~~\n"
  stdout: ''
  timestamp: 1659979148
