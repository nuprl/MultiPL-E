language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last = 0\n    for num in x {\n        if num != last {\n            result.append(num)\n\
    \        }\n        last = num\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmphow1kpjm/tmphow1kpjm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49947dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49944d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49944d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49944d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphow1kpjm                        0x000055f59187068c <unavailable> + 5772

    5    libc.so.6                          0x00002b49949c7460 __libc_start_main +
    245

    6    tmphow1kpjm                        0x000055f591870289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { Int(String($0)) % 2 == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppafd9y4h.swift:11:23: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return x.filter { Int(String($0))\
    \ % 2 == 1 }\n                      ^\n/tmp/tmppafd9y4h.swift:11:23: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ return x.filter { Int(String($0)) % 2 == 1 }\n                      ^\n    \
    \                  (               ?? <#default value#>)\n/tmp/tmppafd9y4h.swift:11:23:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return x.filter { Int(String($0)) % 2 == 1 }\n                  \
    \    ^\n                                     !\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = [Int]()\n\
    \    \n    // remove even digits\n    for d in x.filter({ $0 % 2 == 0 }) {\n \
    \       ans.append(d)\n    }\n    \n    // sort and remove duplicates\n    ans.sort({\
    \ $0 < $1 })\n    ans = ans.filter({ !ans.contains($0) })\n    \n    return ans\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxb1u8mf7.swift:19:14: error: missing argument label 'by:' in call\n\
    \    ans.sort({ $0 < $1 })\n             ^\n             by: \n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var a = x.sorted\
    \ { $0 < $1 }\n    var unique = [Int]()\n    for _ in 0..<x.count {\n        if\
    \ unique.contains(a[$0]) {\n            break\n        }\n        if a[$0] % 2\
    \ == 0 {\n            unique.append(a[$0])\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnful8vif.swift:14:30: error: anonymous closure argument not contained\
    \ in a closure\n        if unique.contains(a[$0]) {\n                        \
    \     ^\n/tmp/tmpnful8vif.swift:17:14: error: anonymous closure argument not contained\
    \ in a closure\n        if a[$0] % 2 == 0 {\n             ^\n/tmp/tmpnful8vif.swift:18:29:\
    \ error: anonymous closure argument not contained in a closure\n            unique.append(a[$0])\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let y = [Int]()\n\
    \    \n    for i in x {\n        if !contains(y, i) {\n            y.append(i)\n\
    \        }\n    }\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyol1ce2u.swift:14:13: error: cannot find 'contains' in scope\n\
    \        if !contains(y, i) {\n            ^~~~~~~~\n/tmp/tmpyol1ce2u.swift:15:15:\
    \ error: cannot use mutating member on immutable value: 'y' is a 'let' constant\n\
    \            y.append(i)\n            ~ ^\n/tmp/tmpyol1ce2u.swift:11:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let y = [Int]()\n    ^~~\n   \
    \ var\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var tmp = [Int]()\n\
    \    \n    for i in x {\n        let index = 0\n        \n        while index\
    \ < x.count && x[index] % i == 0 {\n            index += 1\n        }\n      \
    \  \n        tmp.append(i)\n    }\n    \n    return tmp\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8i883yif.swift:17:19: error: left side of mutating operator isn't\
    \ mutable: 'index' is a 'let' constant\n            index += 1\n            ~~~~~\
    \ ^\n/tmp/tmp8i883yif.swift:14:9: note: change 'let' to 'var' to make it mutable\n\
    \        let index = 0\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    \n    for num in x {\n        if num % 2 == 0 && result.count < 3\
    \ {\n            result.append(num)\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8cg0wmjs/tmp8cg0wmjs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba46d327c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba46d01eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba46d01e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba46d01d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cg0wmjs                        0x0000564e24f4167c <unavailable> + 5756

    5    libc.so.6                          0x00002ba46d513460 __libc_start_main +
    245

    6    tmp8cg0wmjs                        0x0000564e24f41279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    \n    for num in x {\n        if num != 0 && (num % 10).isMultiple(2) {\n\
    \            result.append((num % 10).toInt())\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpfhb4iqph.swift:14:46: error: missing argument label 'of:' in call\n\
    \        if num != 0 && (num % 10).isMultiple(2) {\n                         \
    \                    ^\n                                             of: \n/tmp/tmpfhb4iqph.swift:15:38:\
    \ error: value of type 'Int' has no member 'toInt'\n            result.append((num\
    \ % 10).toInt())\n                          ~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var ret =\
    \ [Int]()\n    \n    for var i=0; i<x.count; i++ {\n        var cnt = 0\n    \
    \    for j=i; j<x.count; j++ {\n            if x.[j] % 10 == 0 {\n           \
    \     cnt++\n            }\n        }\n        if cnt == 0 {\n            ret.append(x.[i])\n\
    \        }\n    }\n    \n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz3fuygfy.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i=0; i<x.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz3fuygfy.swift:16:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for j=i; j<x.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz3fuygfy.swift:17:18: error: expected member name following '.'\n    \
    \        if x.[j] % 10 == 0 {\n                 ^\n/tmp/tmpz3fuygfy.swift:22:26:\
    \ error: expected member name following '.'\n            ret.append(x.[i])\n \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let sorted = x.sorted(by:\
    \ { $0 < $1 })\n    return sorted.filter { Int(String($0)) %2 == 0 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpivd7nouo.swift:12:43: error: consecutive statements on a line must\
    \ be separated by ';'\n    return sorted.filter { Int(String($0)) %2 == 0 }\n\
    \                                          ^\n                               \
    \           ;\n/tmp/tmpivd7nouo.swift:12:44: error: '%' is not a prefix unary\
    \ operator\n    return sorted.filter { Int(String($0)) %2 == 0 }\n           \
    \                                ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{\
    \ $0 % 2 != 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvu1zy4c4/tmpvu1zy4c4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763e6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5763b64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5763b64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5763b637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu1zy4c4                        0x0000560ac26476d4 <unavailable> + 5844

    5    libc.so.6                          0x00002b5764059460 __libc_start_main +
    245

    6    tmpvu1zy4c4                        0x0000560ac26471c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var j = 0\n    for i in x {\n        if i == 0 { continue }\n    \
    \    if i / 2 % 10 != 0 {\n            result[j] = i\n            j += 1\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f6c4b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f6c1ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8f6c1ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8f6c1ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8f6c1abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8f6bfab7ec <unavailable> + 186348

    6    tmpkww7odrg                        0x0000557bc9a5cc74 <unavailable> + 7284

    7    tmpkww7odrg                        0x0000557bc9a5c54c <unavailable> + 5452

    8    libc.so.6                          0x00002b8f6c6a1460 __libc_start_main +
    245

    9    tmpkww7odrg                        0x0000557bc9a5c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    let evenDigit\
    \ = x.filter { $0 % 2 == 0 }\n    var allOddDigit = x.filter { $0 % 2 != 0 }\n\
    \    \n    if evenDigit.count > 1 {\n        allOddDigit = allOddDigit.filter\
    \ { $0 % 2 != 0 }\n    }\n    \n    var result: [Int] = []\n    \n    var index\
    \ = 0\n    var num: Int = 0\n    while index < x.count {\n        \n        if\
    \ index == 0 {\n            num = x[index]\n        } else {\n            num\
    \ = allOddDigit[index] - allOddDigit[index - 1]\n        }\n        \n       \
    \ if num == 0 {\n            result.append(num)\n        }\n        \n       \
    \ index++\n        \n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpi8nocy6p.swift:35:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let digits = x.map{String($0).last!}\n\
    \    let uniqueDigits = Array(Set(digits).sorted(by: <))\n    return uniqueDigits\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkd_8sxr_.swift:13:12: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type '[Int]'\n  \
    \  return uniqueDigits\n           ^\n/tmp/tmpkd_8sxr_.swift:13:12: note: arguments\
    \ to generic parameter 'Element' ('String.Element' (aka 'Character') and 'Int')\
    \ are expected to be equal\n    return uniqueDigits\n           ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var res =\
    \ []\n    for i in x {\n        let num = i.digits\n        let digits = num.filter\
    \ { $0 % 2 == 0 }\n        if !digits.isEmpty {\n            res.append(i)\n \
    \       }\n    }\n    \n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpb2p9xaep.swift:12:15: error: empty collection literal requires\
    \ an explicit type\n    var res = []\n              ^~\n/tmp/tmpb2p9xaep.swift:14:21:\
    \ error: value of type 'Int' has no member 'digits'\n        let num = i.digits\n\
    \                  ~ ^~~~~~\n/tmp/tmpb2p9xaep.swift:21:12: error: cannot convert\
    \ return expression of type '[Any]' to return type '[Int]'\n    return res\n \
    \          ^\n/tmp/tmpb2p9xaep.swift:21:12: note: arguments to generic parameter\
    \ 'Element' ('Any' and 'Int') are expected to be equal\n    return res\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = x.count - 1\n    \n    while i >= 0 {\n        if x[i].isMultiple(of:\
    \ 2) {\n            result.append(x[i])\n        }\n        i -= 1\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpclskkzai/tmpclskkzai.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22e18eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22e15e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22e15e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22e15e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpclskkzai                        0x0000561852a9e62c <unavailable> + 5676

    5    libc.so.6                          0x00002b22e1ad6460 __libc_start_main +
    245

    6    tmpclskkzai                        0x0000561852a9e229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var arr: [Int] =\
    \ []\n    \n    for i in x {\n        let digit = String(i).first!\n        if\
    \ digit == \"0\" && arr.count > 0 {\n            arr.removeFirst()\n        }\
    \ else if digit == \"0\" {\n            arr.append(i)\n        } else {\n    \
    \        arr.append(i)\n        }\n    }\n    \n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkodd6p2o/tmpkodd6p2o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b795b78bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b795b482b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b795b482988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b795b4817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkodd6p2o                        0x0000563a6fe2f9ac <unavailable> + 6572

    5    libc.so.6                          0x00002b795b977460 __libc_start_main +
    245

    6    tmpkodd6p2o                        0x0000563a6fe2f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var counter = [Int]()\n\
    \    var result = [Int]()\n    for i in 0..<x.count {\n        if counter.contains(x[i])\
    \ { continue }\n        counter.append(x[i])\n        result.append(x[i])\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsiy0vmor/tmpsiy0vmor.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7987a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac798498b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac798498988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7984977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsiy0vmor                        0x0000564aac57371c <unavailable> + 5916

    5    libc.so.6                          0x00002ac79898d460 __libc_start_main +
    245

    6    tmpsiy0vmor                        0x0000564aac573319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var arr: [Int] =\
    \ [x]\n    var arr2 = []\n\n    for n in arr {\n        guard n > 0 else {\n \
    \           continue\n        }\n\n        if n % 2 == 0 {\n            arr2.append(n)\n\
    \        }\n    }\n\n    return arr2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplkz8mgc3.swift:11:23: error: cannot convert value of type '[Int]'\
    \ to expected element type 'Int'\n    var arr: [Int] = [x]\n                 \
    \     ^\n/tmp/tmplkz8mgc3.swift:12:16: error: empty collection literal requires\
    \ an explicit type\n    var arr2 = []\n               ^~\n/tmp/tmplkz8mgc3.swift:24:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[Int]'\n\
    \    return arr2\n           ^\n/tmp/tmplkz8mgc3.swift:24:12: note: arguments\
    \ to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n\
    \    return arr2\n           ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  var y = [Int]()\n\
    \  \n  for y in x {\n    if let lastDigit = y - lastDigit(x) {\n      continue\n\
    \    }\n    \n    y.append(y)\n  }\n  \n  return y\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpr5br3m5e.swift:14:28: error: cannot find 'lastDigit' in scope\n\
    \    if let lastDigit = y - lastDigit(x) {\n                           ^~~~~~~~~\n\
    /tmp/tmpr5br3m5e.swift:18:7: error: value of type 'Int' has no member 'append'\n\
    \    y.append(y)\n    ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        let digit = num % 10\n        if digit == 0 {\n \
    \           continue\n        }\n        let index = result.index(of: digit)\n\
    \        if index != nil {\n            result.remove(at: index!)\n        } else\
    \ {\n            result.append(digit)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptcd2sexr/tmptcd2sexr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2404bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2401b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2401b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2401b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcd2sexr                        0x0000555d1e1e473c <unavailable> + 5948

    5    libc.so.6                          0x00002ab2406a9460 __libc_start_main +
    245

    6    tmptcd2sexr                        0x0000555d1e1e4339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var a = x.sort()\n\
    \    var result = [Int]()\n    \n    for i in 0..<a.count-2 {\n        if a[(i\
    \ + 2)]%2 != 0 {\n            result.append(a[i])\n        }\n    }\n    \n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4l7rpj18.swift:11:15: error: cannot use mutating member on immutable\
    \ value: 'x' is a 'let' constant\n    var a = x.sort()\n            ~ ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var temp = 0\n    var index = 0\n    for number in x {\n        if number\
    \ % 2 == 0 {\n            temp += 1\n        } else {\n            while (temp\
    \ > 0 && number % 10 == temp % 10) {\n                temp -= 10\n           \
    \ }\n            result.append(number - temp)\n            temp = number / 10\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpu6o_2kcp/tmpu6o_2kcp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accec43bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accec132b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accec132988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accec1317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu6o_2kcp                        0x00005616c122d67c <unavailable> + 5756

    5    libc.so.6                          0x00002accec627460 __libc_start_main +
    245

    6    tmpu6o_2kcp                        0x00005616c122d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    // Create\
    \ a set to hold the result and remove all the even digit\n    var evenDigitSet\
    \ = Set<Int>()\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      evenDigitSet.insert(element)\n        } else {\n            // remove the\
    \ even digit\n            evenDigitSet.insert(element % 10)\n        }\n    }\n\
    \n    // Create a set to hold the result and remove all the odd digit\n    var\
    \ oddDigitSet = Set<Int>()\n    for element in x {\n        if element % 2 !=\
    \ 0 {\n            oddDigitSet.insert(element)\n        } else {\n           \
    \ // remove the odd digit\n            oddDigitSet.insert(element % 10)\n    \
    \    }\n    }\n\n    // Combine the both sets to form a new array \n    var resultSet\
    \ = Set<Int>()\n    for element in evenDigitSet {\n        if !oddDigitSet.contains(element)\
    \ {\n            resultSet.insert(element)\n        }\n    }\n\n    return resultSet\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpo09atdwk.swift:42:12: error: cannot convert return expression of\
    \ type 'Set<Int>' to return type '[Int]'\n    return resultSet\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ret: [Int] =\
    \ [x]\n    var found: Bool = false\n    for y in x {\n        if found {\n   \
    \         if y % 2 == 0 {\n                ret.removeLast()\n            } else\
    \ {\n                ret.append(y)\n            }\n        } else {\n        \
    \    if y % 2 != 0 {\n                ret.removeLast()\n                ret.append(y)\n\
    \            } else {\n                found = true\n            }\n        }\n\
    \    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpm22qxozw.swift:11:23: error: cannot convert value of type '[Int]'\
    \ to expected element type 'Int'\n    var ret: [Int] = [x]\n                 \
    \     ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var new_x = [Int]()\n\
    \    for i in x {\n        if i % 2 != 0 {\n            new_x.append(i)\n    \
    \    }\n    }\n    return new_x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp2ywg29d0/tmp2ywg29d0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab493bdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4938d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4938d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4938d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ywg29d0                        0x0000560c5f17667c <unavailable> + 5756

    5    libc.so.6                          0x00002ab493dc8460 __libc_start_main +
    245

    6    tmp2ywg29d0                        0x0000560c5f176279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var arr: [Int] =\
    \ []\n    for el in x {\n        let digit = Int(String(el))\n        if digit!%2\
    \ == 0 {\n            arr.append(el)\n        }\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpd1irnzvp/tmpd1irnzvp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868737dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8687074b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8687074988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86870737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1irnzvp                        0x000055e137aa57ac <unavailable> + 6060

    5    libc.so.6                          0x00002b8687569460 __libc_start_main +
    245

    6    tmpd1irnzvp                        0x000055e137aa53a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = make([Int](),\
    \ maxLen(x))\n    for element in x {\n        let len = count(element: element,\
    \ max: 10)\n        if len == 0 {\n            append(res: &res, value: element)\n\
    \        } else {\n            for index in 0..len {\n                if element\
    \ % 10 != 0 {\n                    append(res: &res, value: element)\n       \
    \             break\n                }\n                element = element / 10\n\
    \            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpa76kqwot.swift:11:15: error: cannot find 'make' in scope\n    var\
    \ res = make([Int](), maxLen(x))\n              ^~~~\n/tmp/tmpa76kqwot.swift:11:29:\
    \ error: cannot find 'maxLen' in scope\n    var res = make([Int](), maxLen(x))\n\
    \                            ^~~~~~\n/tmp/tmpa76kqwot.swift:13:19: error: cannot\
    \ find 'count' in scope\n        let len = count(element: element, max: 10)\n\
    \                  ^~~~~\n/tmp/tmpa76kqwot.swift:15:13: error: cannot find 'append'\
    \ in scope\n            append(res: &res, value: element)\n            ^~~~~~\n\
    /tmp/tmpa76kqwot.swift:17:27: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n            for index in 0..len {\n                          ^~\n\
    \                          ...\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let len = x.count\n\
    \    var res = Array(0..<len).map({ Int(\"\\(x.first! * 10 % 10) % 10\") })\n\
    \    var flag = false\n    for i in 0..<len {\n        if res[i] == 0 && !flag\
    \ {\n            res[i] = 1\n            flag = true\n        } else if res[i]\
    \ != 0 && !flag {\n            flag = true\n        }\n    }\n    return res.filter\
    \ { $0 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpc006fv_l.swift:12:21: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var res = Array(0..<len).map({ Int(\"\\(x.first! * 10 % 10) % 10\"\
    ) })\n                    ^\n                    arrayLiteral: \n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    var evenDigits = [Int]()\n    for d in x {\n        if d % 2 == 0 {\n   \
    \         evenDigits.append(d)\n        } else {\n            for e in evenDigits\
    \ {\n                if e % 2 == 0 {\n                    e = e / 2\n        \
    \            res.append(e)\n                    break\n                } else\
    \ {\n                    e = 1\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpphng8gk7.swift:19:21: error: cannot assign to value: 'e' is a 'let'\
    \ constant\n                    e = e / 2\n                    ^\n/tmp/tmpphng8gk7.swift:23:21:\
    \ error: cannot assign to value: 'e' is a 'let' constant\n                   \
    \ e = 1\n                    ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res: [Int] =\
    \ []\n    x.sort {$0 % 10 > $1 % 10}\n    x.forEach {\n        if $0 % 2 == 0\
    \ {\n            res.append($0)\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp02c5014p.swift:12:7: error: cannot use mutating member on immutable\
    \ value: 'x' is a 'let' constant\n    x.sort {$0 % 10 > $1 % 10}\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for num in x {\n        var strNum = String(num)\n        for char in strNum\
    \ {\n            if char.isDigit() && char.isASCII() {\n                if !result.contains(Int(char))\
    \ {\n                    result.insert(Int(char))\n                }\n       \
    \     }\n        }\n    }\n    var resultArray = [Int]()\n    for num in result\
    \ {\n        resultArray.append(num)\n    }\n    return Array(resultArray)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvkkqj40o.swift:15:21: error: value of type 'Character' has no member\
    \ 'isDigit'\n            if char.isDigit() && char.isASCII() {\n             \
    \  ~~~~ ^~~~~~~\n/tmp/tmpvkkqj40o.swift:15:39: error: cannot call value of non-function\
    \ type 'Bool'\n            if char.isDigit() && char.isASCII() {\n           \
    \                           ^      ~~\n                                      \
    \       \n/tmp/tmpvkkqj40o.swift:16:37: error: no exact matches in call to initializer\
    \ \n                if !result.contains(Int(char)) {\n                       \
    \             ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpvkkqj40o.swift:17:35:\
    \ error: no exact matches in call to initializer \n                    result.insert(Int(char))\n\
    \                                  ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \         "
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  var result = [Int]()\n\
    \  var i = 0\n  for elem in x {\n    if elem % 2 == 0 {\n      result.insert(elem,\
    \ at: i)\n    }\n    i += 1\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab34024dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ff44561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab33ff44286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab33ff4413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab33ff43bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab33ff2d196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002ab33ff31020 Array.insert(_:at:)
    + 80

    7    tmpf5_pe369                        0x000055bb65240beb <unavailable> + 7147

    8    tmpf5_pe369                        0x000055bb6524059c <unavailable> + 5532

    9    libc.so.6                          0x00002ab340439460 __libc_start_main +
    245

    10   tmpf5_pe369                        0x000055bb65240279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let result = [Int]()\n\
    \    for d in x {\n        if d % 2 == 0 {\n            continue\n        }\n\
    \        if result.contains(d) {\n            continue\n        }\n        result.append(d)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1ac7icq4.swift:19:16: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n        result.append(d)\n        ~~~~~~\
    \ ^\n/tmp/tmp1ac7icq4.swift:11:5: note: change 'let' to 'var' to make it mutable\n\
    \    let result = [Int]()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let res = [Int]()\n\
    \    for n in x {\n        res.contains(Int(String(n.toInt().digits)))\n     \
    \       ? res[res.index(of: Int(String(n.toInt().digits)))] = n\n            :\
    \ res.append(n)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3mvxtzcf.swift:13:35: error: value of type 'Int' has no member\
    \ 'toInt'\n        res.contains(Int(String(n.toInt().digits)))\n             \
    \                   ~ ^~~~~\n/tmp/tmp3mvxtzcf.swift:14:46: error: value of type\
    \ 'Int' has no member 'toInt'\n            ? res[res.index(of: Int(String(n.toInt().digits)))]\
    \ = n\n                                           ~ ^~~~~\n/tmp/tmp3mvxtzcf.swift:13:22:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        res.contains(Int(String(n.toInt().digits)))\n                     ^\n\
    /tmp/tmp3mvxtzcf.swift:13:22: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        res.contains(Int(String(n.toInt().digits)))\n\
    \                     ^\n                                                   ??\
    \ <#default value#>\n/tmp/tmp3mvxtzcf.swift:13:22: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        res.contains(Int(String(n.toInt().digits)))\n\
    \                     ^\n                                                  !\n\
    /tmp/tmp3mvxtzcf.swift:14:33: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n            ? res[res.index(of: Int(String(n.toInt().digits)))]\
    \ = n\n                                ^\n/tmp/tmp3mvxtzcf.swift:14:33: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            ? res[res.index(of: Int(String(n.toInt().digits)))] = n\n       \
    \                         ^\n                                                \
    \              ?? <#default value#>\n/tmp/tmp3mvxtzcf.swift:14:33: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    ? res[res.index(of: Int(String(n.toInt().digits)))] = n\n               \
    \                 ^\n                                                        \
    \     !\n/tmp/tmp3mvxtzcf.swift:14:23: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            ? res[res.inde"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var digits = Set<Int>()\n\
    \    var result: [Int] = []\n    for x in x {\n        if !digits.contains(x %\
    \ 10) {\n            result.append(x % 10)\n            digits.insert(x % 10)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxkvj125y/tmpxkvj125y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1accd97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acca8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acca8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acca8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkvj125y                        0x0000561722b1977c <unavailable> + 6012

    5    libc.so.6                          0x00002b1accf83460 __libc_start_main +
    245

    6    tmpxkvj125y                        0x0000561722b19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let res = x.filter({\
    \ $0 % 10 != 0 })\n    if res.isEmpty {\n        return res\n    }\n\n    return\
    \ res.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6gx1dmlr/tmp6gx1dmlr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c65ec1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c65bb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c65bb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c65bb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6gx1dmlr                        0x0000555af0f2866c <unavailable> + 5740

    5    libc.so.6                          0x00002b1c660ad460 __libc_start_main +
    245

    6    tmp6gx1dmlr                        0x0000555af0f28269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var output = [Int]()\n\
    \    for ele in x {\n        if let i = Int(ceil(log10(ele))) where i > 0{\n \
    \           if ele % 10 == 0 && ele != 0{\n                output = append(output,\
    \ ele)\n            }\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphxt7qlxw.swift:13:42: error: expected ',' joining parts of a multi-clause\
    \ condition\n        if let i = Int(ceil(log10(ele))) where i > 0{\n         \
    \                               ~^~~~~\n                                     \
    \   ,\n/tmp/tmphxt7qlxw.swift:13:24: error: cannot find 'ceil' in scope\n    \
    \    if let i = Int(ceil(log10(ele))) where i > 0{\n                       ^~~~\n\
    /tmp/tmphxt7qlxw.swift:13:29: error: cannot find 'log10' in scope\n        if\
    \ let i = Int(ceil(log10(ele))) where i > 0{\n                            ^~~~~\n\
    /tmp/tmphxt7qlxw.swift:15:26: error: cannot find 'append' in scope\n         \
    \       output = append(output, ele)\n                         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    // Write your\
    \ code here\n    var result = [Int]()\n    var count = 0\n    \n    for i in x\
    \ {\n        if i % 2 == 0 {\n            result.append(i)\n            count\
    \ = count + 1\n        }\n    }\n    \n    if count == x.count {\n        result.append(x.last!)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqrneoy4_/tmpqrneoy4_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae19926ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae198f61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae198f61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae198f607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrneoy4_                        0x000055b5bb0ca77c <unavailable> + 6012

    5    libc.so.6                          0x00002ae199456460 __libc_start_main +
    245

    6    tmpqrneoy4_                        0x000055b5bb0ca379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\
    \ x in x % 10 != 0 }).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjndvhkaj/tmpjndvhkaj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae399433c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae39912ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae39912a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3991297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjndvhkaj                        0x0000564fcd1225cc <unavailable> + 5580

    5    libc.so.6                          0x00002ae39961f460 __libc_start_main +
    245

    6    tmpjndvhkaj                        0x0000564fcd1221c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var temp: Int = Int()\n    var first: Bool = false\n    for i in x {\n  \
    \      if i % 2 != 0 {\n            first = i\n        } else {\n            temp\
    \ = first\n            if temp % 10 == i {\n                first = Int()\n  \
    \          } else {\n                result.append(temp)\n                first\
    \ = i\n            }\n        }\n    }\n    if !first {\n        result.append(first)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvm1gd4mt.swift:16:21: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n            first = i\n                    ^\n    \
    \                ( != 0)\n/tmp/tmpvm1gd4mt.swift:18:20: error: cannot assign value\
    \ of type 'Bool' to type 'Int'\n            temp = first\n                   ^~~~~\n\
    /tmp/tmpvm1gd4mt.swift:20:25: error: type 'Int' cannot be used as a boolean; test\
    \ for '!= 0' instead\n                first = Int()\n                        ^\n\
    \                        (     != 0)\n/tmp/tmpvm1gd4mt.swift:23:25: error: type\
    \ 'Int' cannot be used as a boolean; test for '!= 0' instead\n               \
    \ first = i\n                        ^\n                        ( != 0)\n/tmp/tmpvm1gd4mt.swift:28:23:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \        result.append(first)\n                      ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniques = [Int]()\n\
    \    var result = [Int]()\n    for i in x {\n        if let digit = i % 10 {\n\
    \            if !uniques.contains(digit) {\n                uniques.append(digit)\n\
    \            }\n        } else {\n            if !result.contains(i) {\n     \
    \           result.append(i)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1n2xi_tb.swift:14:12: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n        if let digit = i % 10 {\n      \
    \     ^           ~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var j = 0\n    for i in x {\n        while j < len(result) && result[j] ==\
    \ i % 10 {\n            j += 1\n        }\n        if j == len(result) {\n   \
    \         result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwf4ykjt0.swift:14:19: error: cannot find 'len' in scope\n     \
    \   while j < len(result) && result[j] == i % 10 {\n                  ^~~\n/tmp/tmpwf4ykjt0.swift:17:17:\
    \ error: cannot find 'len' in scope\n        if j == len(result) {\n         \
    \       ^~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    \n    if x.isEmpty() {\n        return result\n    }\n    \n    for\
    \ i in x {\n        for j in x {\n            if i != j && i % j == 0 {\n    \
    \            result.append(j)\n            }\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxe35d5ey.swift:13:10: error: cannot call value of non-function\
    \ type 'Bool'\n    if x.isEmpty() {\n         ^      ~~\n                \n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return unique_digits(x,\
    \ 0, length: x.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxn2_pc6_.swift:11:25: error: extra arguments at positions #2, #3\
    \ in call\n    return unique_digits(x, 0, length: x.count)\n                 \
    \       ^\n/tmp/tmpxn2_pc6_.swift:10:6: note: 'unique_digits(x:)' declared here\n\
    func unique_digits(x: [Int]) -> [Int] {\n     ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n.isOdd() {\n            for digit in n.digits.reverse()\
    \ {\n                if digit % 2 == 1 {\n                    result.append(digit)\n\
    \                    break\n                }\n            }\n        } else {\n\
    \            result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpg5utlzu4.swift:13:14: error: value of type 'Int' has no member\
    \ 'isOdd'\n        if n.isOdd() {\n           ~ ^~~~~\n/tmp/tmpg5utlzu4.swift:14:28:\
    \ error: value of type 'Int' has no member 'digits'\n            for digit in\
    \ n.digits.reverse() {\n                         ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    guard x.count >\
    \ 0 else { return [] }\n    var index = 0\n    var res = []\n    while index <\
    \ x.count {\n        var isOdd = false\n        let x = x[index]\n        let\
    \ str = String(format: \"%03d\", x)\n        for digit in str {\n            if\
    \ Int(digit) % 2 == 0 {\n                isOdd = true\n            }\n       \
    \ }\n        if isOdd {\n            res.append(x)\n        } else {\n       \
    \     index += 1\n        }\n    }\n    \n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpeqdoax7h.swift:13:15: error: empty collection literal requires\
    \ an explicit type\n    var res = []\n              ^~\n/tmp/tmpeqdoax7h.swift:17:25:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        let str = String(format: \"%03d\", x)\n                        ^~~~~~~\n\
    \                         repeating       count: \n/tmp/tmpeqdoax7h.swift:30:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[Int]'\n\
    \    return res\n           ^\n/tmp/tmpeqdoax7h.swift:30:12: note: arguments to\
    \ generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n   \
    \ return res\n           ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var digits: [Int]\
    \ = []\n    var index = 0\n    var digit = x.first!\n    repeat{\n        if x.index(before:\
    \ &digit, equalTo: digit) != nil {\n            let index = x.index(before: &digit,\
    \ equalTo: digit)\n            digits[index] = digit\n        }else if index !=\
    \ 0 {\n            digits.append(digit)\n        }\n        digit = x.next!\n\
    \    }while( x.next() != nil )\n    digits.reverse()\n    return digits\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0367dch_.swift:15:14: error: no exact matches in call to instance\
    \ method 'index'\n        if x.index(before: &digit, equalTo: digit) != nil {\n\
    \             ^\n/tmp/tmp0367dch_.swift:15:14: note: candidate has partially matching\
    \ parameter list (before: Int)\n        if x.index(before: &digit, equalTo: digit)\
    \ != nil {\n             ^\n/tmp/tmp0367dch_.swift:15:14: note: candidate has\
    \ partially matching parameter list (before: Array<Int>.Index)\n        if x.index(before:\
    \ &digit, equalTo: digit) != nil {\n             ^\n/tmp/tmp0367dch_.swift:16:27:\
    \ error: no exact matches in call to instance method 'index'\n            let\
    \ index = x.index(before: &digit, equalTo: digit)\n                          ^\n\
    /tmp/tmp0367dch_.swift:16:27: note: candidate has partially matching parameter\
    \ list (before: Int)\n            let index = x.index(before: &digit, equalTo:\
    \ digit)\n                          ^\n/tmp/tmp0367dch_.swift:16:27: note: candidate\
    \ has partially matching parameter list (before: Array<Int>.Index)\n         \
    \   let index = x.index(before: &digit, equalTo: digit)\n                    \
    \      ^\n/tmp/tmp0367dch_.swift:21:19: error: value of type '[Int]' has no member\
    \ 'next'\n        digit = x.next!\n                ~ ^~~~\n/tmp/tmp0367dch_.swift:22:15:\
    \ error: value of type '[Int]' has no member 'next'\n    }while( x.next() != nil\
    \ )\n            ~ ^~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var evenDigits :\
    \ [Int]\n    var unevenDigits : [Int]\n    \n    for i in x {\n        if i %\
    \ 2 == 0 {\n            evenDigits.append(i)\n        } else {\n            unevenDigits.append(i)\n\
    \        }\n    }\n    \n    return evenDigits\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwgt5xbft.swift:16:24: error: variable 'evenDigits' passed by reference\
    \ before being initialized\n            evenDigits.append(i)\n               \
    \        ^\n/tmp/tmpwgt5xbft.swift:11:9: note: variable defined here\n    var\
    \ evenDigits : [Int]\n        ^\n/tmp/tmpwgt5xbft.swift:22:12: error: variable\
    \ 'evenDigits' used before being initialized\n    return evenDigits\n        \
    \   ^\n/tmp/tmpwgt5xbft.swift:11:9: note: variable defined here\n    var evenDigits\
    \ : [Int]\n        ^\n/tmp/tmpwgt5xbft.swift:18:26: error: variable 'unevenDigits'\
    \ passed by reference before being initialized\n            unevenDigits.append(i)\n\
    \                         ^\n/tmp/tmpwgt5xbft.swift:12:9: note: variable defined\
    \ here\n    var unevenDigits : [Int]\n        ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var seen: [Int] = []\n    var number: Int = 0\n    for d in x {\n\
    \        number += d\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmps0zqwinw.swift:18:31: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(number)\n                              ^\n\
    \                              , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var results = [Int]()\n\
    \    \n    for n in x {\n        if n % 2 != 0 {\n            results.append(n)\n\
    \        }\n    }\n    \n    return results\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_ltz4jmr/tmp_ltz4jmr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91e19b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91e16afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91e16af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91e16ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ltz4jmr                        0x000055d83719d67c <unavailable> + 5756

    5    libc.so.6                          0x00002b91e1ba4460 __libc_start_main +
    245

    6    tmp_ltz4jmr                        0x000055d83719d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res: [Int] =\
    \ []\n    var i = 0\n    while i < x.count {\n        if i % 2 == 0 {\n      \
    \      res.append(x[i])\n        }\n        i += 1\n    }\n    \n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz8usykms/tmpz8usykms.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab902d69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab902a60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab902a60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab902a5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz8usykms                        0x000055f10c02256c <unavailable> + 5484

    5    libc.so.6                          0x00002ab902f55460 __libc_start_main +
    245

    6    tmpz8usykms                        0x000055f10c022169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var result:\
    \ [Int] = []\n    var isEven: [Int] = [Int]()\n    \n    for i in x {\n      \
    \  if isEven.contains(i) {\n        } else {\n            isEven.append(i)\n \
    \           result.append(i)\n        }\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp070up5ke/tmp070up5ke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6727bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f66f72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f66f72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f66f717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp070up5ke                        0x000055f27f5cb64c <unavailable> + 5708

    5    libc.so.6                          0x00002b9f67467460 __libc_start_main +
    245

    6    tmp070up5ke                        0x000055f27f5cb249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        guard n % 10 == 0 else { continue }\n\
    \        result.append(n)\n        i += 1\n    }\n    for i in 0 ..< result.count\
    \ {\n        if i == 0 || result[i - 1] > result[i] {\n            result.remove(at:\
    \ i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjp47tr8u/tmpjp47tr8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c7874bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c78442b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c78442988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c784417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjp47tr8u                        0x000055c8a92c187c <unavailable> + 6268

    5    libc.so.6                          0x00002b4c78937460 __libc_start_main +
    245

    6    tmpjp47tr8u                        0x000055c8a92c1479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array(0..<x.count).filter{\
    \ x in\n        let digit = x%10\n        return digit == 0\n    }.sorted()\n\
    \    if result.count == 0 {\n        return result\n    }\n    for x in result\
    \ {\n        if !x.isMultiple(of: 2) { result.remove(x); break }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpw_8s4hmr.swift:19:42: error: no exact matches in call to instance\
    \ method 'remove'\n        if !x.isMultiple(of: 2) { result.remove(x); break }\n\
    \                                         ^\nSwift.Array:10:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at index: Int) -> Element\n                           \
    \         ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var evenDigitsList\
    \ = Set<Int>()\n    var evenDigitsArray = Array<Int>()\n    for i in x {\n   \
    \     if i.isMultiple(2) {\n            evenDigitsArray.append(i)\n        } else\
    \ {\n            if let v = evenDigitsList.member(i) {\n                evenDigitsArray.removeAll(where:\
    \ { $0 == v })\n            } else {\n                evenDigitsArray.append(i)\n\
    \            }\n        }\n    }\n    return evenDigitsArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgslmqhgi.swift:14:14: error: no exact matches in call to instance\
    \ method 'isMultiple'\n        if i.isMultiple(2) {\n             ^\nSwift.SignedInteger:6:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(of:)')\n   \
    \ @inlinable public func isMultiple(of other: Self) -> Bool\n                \
    \           ^\nSwift.BinaryInteger:7:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(of:)')\n    @inlinable public func isMultiple(of\
    \ other: Self) -> Bool\n                           ^\n/tmp/tmpgslmqhgi.swift:17:39:\
    \ error: value of type 'Set<Int>' has no member 'member'\n            if let v\
    \ = evenDigitsList.member(i) {\n                       ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i % 2 != 0 {\n            result.append(i)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp2_r7q9tc/tmp2_r7q9tc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad1ea9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad1ba0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad1ba0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad1b9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_r7q9tc                        0x0000558a375e167c <unavailable> + 5756

    5    libc.so.6                          0x00002adad2095460 __libc_start_main +
    245

    6    tmp2_r7q9tc                        0x0000558a375e1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result : [Int]\
    \ = []\n    var count = 0\n    \n    for n in x {\n        if n % 10 == 0 {\n\
    \            count += 1\n        }\n    }\n\n    if count == 0 {\n        return\
    \ result\n    }\n\n    for n in x {\n        if n % 10 != 0 {\n            result.append(n)\n\
    \        }\n    }\n\n    result.sortInPlace()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpj86nepj9.swift:30:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array()\n\
    \    for i in x {\n        let digit = i % 10\n        if result .contains(digit)\
    \ {\n            continue\n        }\n        result.append(i)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_g8u7bgi.swift:11:18: error: generic parameter 'Element' could\
    \ not be inferred\n    var result = Array()\n                 ^\n/tmp/tmp_g8u7bgi.swift:11:18:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var result\
    \ = Array()\n                 ^\n                      <Any>\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var x0 = x.map\
    \ { $0 }\n    x0.sortInPlace()\n    var result = x0\n    var seen = Set<Int>()\n\
    \    \n    for _ in 0..<x.count {\n        if seen.contains(x0.last!) {\n    \
    \        break\n        }\n        else {\n            seen.add(x0.last!)\n  \
    \          guard let last = x0.last else {\n                break\n          \
    \  }\n            if let lastDigit = Int(last) else {\n                break\n\
    \            }\n            if lastDigit % 2 == 0 {\n                result.removeLast()\n\
    \            }\n            else {\n                result.append(last)\n    \
    \        }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjcuyu29r.swift:26:42: error: unexpected 'else' immediately following\
    \ 'if' condition\n            if let lastDigit = Int(last) else {\n          \
    \                               ^\n/tmp/tmpjcuyu29r.swift:26:42: note: remove\
    \ 'else' to execute the braced block of statements when the condition is true\n\
    \            if let lastDigit = Int(last) else {\n                           \
    \              ^~~~~\n                                         \n/tmp/tmpjcuyu29r.swift:13:8:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n    x0.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n/tmp/tmpjcuyu29r.swift:22:18: error: value of type 'Set<Int>'\
    \ has no member 'add'\n            seen.add(x0.last!)\n            ~~~~ ^~~\n\
    /tmp/tmpjcuyu29r.swift:26:16: error: initializer for conditional binding must\
    \ have Optional type, not 'Int'\n            if let lastDigit = Int(last) else\
    \ {\n               ^               ~~~~~~~~~\n/tmp/tmpjcuyu29r.swift:29:16: error:\
    \ cannot find 'lastDigit' in scope\n            if lastDigit % 2 == 0 {\n    \
    \           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array<Int>(repeating:\
    \ 0, count: x.count)\n    for i in 0 ..< x.count {\n        let current = x[i]\n\
    \        if current % 2 == 0 {\n            continue\n        }\n        var index\
    \ = 0\n        while index < result.count {\n            let item = result[index]\n\
    \            if item == current {\n                break\n            }\n    \
    \        index += 1\n        }\n        \n        // found a duplicate\n     \
    \   if index >= result.count {\n            result.append(current)\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvhje8j6o/tmpvhje8j6o.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42369aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42366a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42366a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42366a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhje8j6o                        0x000055ab209516cc <unavailable> + 5836

    5    libc.so.6                          0x00002b4236b96460 __libc_start_main +
    245

    6    tmpvhje8j6o                        0x000055ab209512c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    if x.isEmpty { return\
    \ [] }\n    var ans = [Int]()\n    for n in x {\n        var isEven = false\n\
    \        if n % 10 == 0 {\n            isEven = true\n            n = n%10\n \
    \       }\n        for _ in ans.indices {\n            if n % 2 == 0 {\n     \
    \           isEven = true\n                break\n            }\n            n\
    \ /= 10\n        }\n        if isEven { ans.append(n) }\n    }\n    return ans\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp817qtgyf.swift:17:13: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n            n = n%10\n            ^\n/tmp/tmp817qtgyf.swift:24:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 10\n            ~ ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let arr: [Int] =\
    \ x.filter{$0 % 2 != 0}.sorted()\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnitqhv_h/tmpnitqhv_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b648ec08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b648e8ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b648e8ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b648e8fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnitqhv_h                        0x00005608a55026d4 <unavailable> + 5844

    5    libc.so.6                          0x00002b648edf4460 __libc_start_main +
    245

    6    tmpnitqhv_h                        0x00005608a55021c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    // your code\
    \ here\n    \n    return x.filter { $0 % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpe98guqkk/tmpe98guqkk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48d72cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48d6fc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48d6fc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48d6fc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe98guqkk                        0x000055f54c85552c <unavailable> + 5420

    5    libc.so.6                          0x00002b48d74bb460 __libc_start_main +
    245

    6    tmpe98guqkk                        0x000055f54c855129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var i = 0\n    var\
    \ ans = [Int]()\n    \n    for _ in 0..<x.count {\n        \n        if ((i %\
    \ 2) == 0) {\n            ans.append(x[i])\n        }\n        i += 1\n    }\n\
    \    \n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp7hdw81ug/tmp7hdw81ug.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf050cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf04dc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf04dc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf04dc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hdw81ug                        0x0000558094f686bc <unavailable> + 5820

    5    libc.so.6                          0x00002acf052bb460 __libc_start_main +
    245

    6    tmp7hdw81ug                        0x0000558094f682b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var ans =\
    \ [Int]()\n    \n    for i in 0..<x.count {\n        if i % 2 == 0 {\n       \
    \     for j in ans.indices{\n                if x[i] == x[j]{\n              \
    \      ans.removeAtIndex(i)\n                    break\n                }\n  \
    \          }\n        } else {\n            ans.append(x[i])\n        }\n    }\n\
    \    \n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4jr9nh47.swift:18:25: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n                    ans.removeAtIndex(i)\n                \
    \    ~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res: [Int] =\
    \ []\n    var digits: [String] = []\n    \n    for n in x {\n        if let str\
    \ = n.description {\n            digits.append(str)\n        }\n    }\n    \n\
    \    for digit in digits {\n        if digit.hasPrefix(\"0\") {\n            continue\n\
    \        }\n        \n        let idx = digits.index(of: digit)!\n        res.append(x[idx])\n\
    \    }\n    \n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpg8q4vkd9.swift:15:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let str = n.description {\n\
    \           ^         ~~~~~~~~~~~~~\n/tmp/tmpg8q4vkd9.swift:25:26: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n        let idx = digits.index(of:\
    \ digit)!\n                         ^\n/tmp/tmpg8q4vkd9.swift:25:26: note: use\
    \ 'firstIndex(of:)' instead\n        let idx = digits.index(of: digit)!\n    \
    \                     ^~~~~\n                         firstIndex\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0 % 10 == 0 }.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgd__5hyp/tmpgd__5hyp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b277a77ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b277a475b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b277a475988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b277a4747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgd__5hyp                        0x000055d7023c659c <unavailable> + 5532

    5    libc.so.6                          0x00002b277a96a460 __libc_start_main +
    245

    6    tmpgd__5hyp                        0x000055d7023c6199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        let reversedDigits = reverseDigits(n: n)\n        var\
    \ evenDigit = false\n        for digit in reversedDigits {\n            if digit\
    \ % 2 != 0 {\n                evenDigit = true\n                break\n      \
    \      }\n        }\n        if !evenDigit {\n            result.append(n)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpah5bkmo6.swift:13:30: error: cannot find 'reverseDigits' in scope\n\
    \        let reversedDigits = reverseDigits(n: n)\n                          \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array<Int>()\n\
    \    x.sorted(by: { (lhs, rhs) -> Bool in\n        return lhs.isMultiple(of: rhs)\
    \ && !lhs.isMultiple(of: rhs.quotient())\n    }).forEach {\n        if result.contains($0.quotient())\
    \ {\n            return\n        }\n        guard $0.isMultiple(of: 2) else {\
    \ return }\n        result.append($0)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjpi9lj0h.swift:13:67: error: value of type 'Int' has no member\
    \ 'quotient'\n        return lhs.isMultiple(of: rhs) && !lhs.isMultiple(of: rhs.quotient())\n\
    \                                                              ~~~ ^~~~~~~~\n\
    /tmp/tmpjpi9lj0h.swift:15:31: error: value of type 'Int' has no member 'quotient'\n\
    \        if result.contains($0.quotient()) {\n                           ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var j = 0\n    for i in x {\n        for j in 0 ..< result.count {\n    \
    \        let y = i + result[j]\n            if y % 2 == 0 && y != 0 {\n      \
    \          result.insert(i, at: j)\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppnpgm88_/tmppnpgm88_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30fd42cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30fd123b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30fd123988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30fd1227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnpgm88_                        0x0000555f8dac181c <unavailable> + 6172

    5    libc.so.6                          0x00002b30fd618460 __libc_start_main +
    245

    6    tmppnpgm88_                        0x0000555f8dac1419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ret = [Int]()\n\
    \    \n    for i in x {\n        let str = String(i)\n        let nums = str.unicodeScalars\n\
    \        \n        for j in nums {\n            if String(j).utf16.first % 2 ==\
    \ 0 {\n                break\n            }\n        }\n        \n        ret.append(i)\n\
    \    }\n    \n    return ret.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpso7sv5m8.swift:18:32: error: value of optional type 'UTF16.CodeUnit?'\
    \ (aka 'Optional<UInt16>') must be unwrapped to a value of type 'UTF16.CodeUnit'\
    \ (aka 'UInt16')\n            if String(j).utf16.first % 2 == 0 {\n          \
    \                     ^\n/tmp/tmpso7sv5m8.swift:18:32: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            if\
    \ String(j).utf16.first % 2 == 0 {\n                               ^\n       \
    \        (                     ?? <#default value#>)\n/tmp/tmpso7sv5m8.swift:18:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if String(j).utf16.first % 2 == 0 {\n                   \
    \            ^\n                                    !\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var result:\
    \ [Int] = []\n    \n    for val in x {\n        let digits = Array(String(val).prefix(2))\n\
    \        if digits.count < 2 {\n            result.append(val)\n        } else\
    \ {\n            if digits.contains(where: { $0 % 2 == 0 }) {\n              \
    \  result.append(val)\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmxkbshar.swift:19:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if digits.contains(where: { $0\
    \ % 2 == 0 }) {\n                                        ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniques = [Int]()\n\
    \    for i in x {\n        guard i % 2 != 0 else {\n            uniques.append(i)\n\
    \        }\n    }\n    return uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpj30_7vs4.swift:15:9: error: 'guard' body must not fall through,\
    \ consider using a 'return' or 'throw' to exit the scope\n        }\n        ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    var result2 = Set<Int>()\n    var result3 = Set<Int>()\n    for n in x {\n\
    \        let stringToConvert = n.description\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \".\", with: \"\")\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let intValueFromString = Int(stringToConvert)\n\
    \        if intValueFromString.isMultiple(of: 2) {\n            if result.contains(intValueFromString)\
    \ {\n                result2.insert(intValueFromString)\n            } else {\n\
    \                result.insert(intValueFromString)\n                result2.insert(intValueFromString)\n\
    \            }\n        }\n    }\n    for n in x {\n        let stringToConvert\
    \ = n.description\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \".\", with: \"\")\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let intValueFromString = Int(stringToConvert)\n\
    \        if intValueFromString.isMultiple(of: 3) {\n            if result2.contains(intValueFromString)\
    \ {\n                result3.insert(intValueFromString)\n            } else {\n\
    \                result2.insert(intValueFromString)\n                result3.insert(intValueFromString)\n\
    \            }\n        }\n    }\n    var sortedArray = [Int]()\n    sortedArray\
    \ = result.sorted(by: <)\n    sortedArray = sortedArray.sorted(by: <)\n    sortedArray\
    \ = sortedArray.sorted(by: <)\n    sortedArray = sortedArray.sorted(by: <)\n \
    \   sortedArray = result2.sorted(by: <)\n    sortedArray = sortedArray.sorted(by:\
    \ <)\n    sortedArray = sortedArray.sorted(by: <)\n    sortedArray = sortedArray.sorted(by:\
    \ <)\n    sortedArray = sortedArray.sorted(by: <)\n    sortedArray = result3.sorted(by:\
    \ <)\n    sortedArray = sortedArray.sorted(by: <)\n    sortedArray = sortedArray.sorted(by:\
    \ <)\n    sortedArray = sortedArray.sorted(by: <)\n    return sortedArray\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpsjjnwnhr.swift:16:47: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \".\", with: \"\")\n                              ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsjjnwnhr.swift:31:47: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        let stringToConvert = stringToConvert.replacingOccurrences(of: \".\"\
    , with: \"\")\n                              ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = Set<Int>()\n\
    \    var res2 = Set<Int>()\n    \n    for num in x {\n        for num2 in x {\n\
    \            if num2 == num {\n                continue\n            }\n     \
    \       if num2 % num == 0 {\n                if !res.contains(num2) {\n     \
    \               res.insert(num2)\n                }\n                if !res2.contains(num)\
    \ {\n                    res2.insert(num)\n                }\n            }\n\
    \        }\n    }\n    return res2.subtracting(res)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwu6xu3yq.swift:29:17: error: cannot convert return expression of\
    \ type 'Set<Int>' to return type '[Int]'\n    return res2.subtracting(res)\n \
    \          ~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for val in x {\n        var flag = false\n        for val2 in result\
    \ {\n            if val2 % 2 == 0 {\n                flag = true\n           \
    \     break\n            }\n        }\n        if !flag {\n            result.append(val)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplsqj_syk/tmplsqj_syk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c977dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c974d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c974d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c974d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsqj_syk                        0x0000564994a5b6cc <unavailable> + 5836

    5    libc.so.6                          0x00002b1c979ca460 __libc_start_main +
    245

    6    tmplsqj_syk                        0x0000564994a5b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueDigit:\
    \ [Int] = []\n    for i in x {\n        var index = 0\n        var isEvenDigit\
    \ = false\n        \n        for j in uniqueDigit {\n            if i == j {\n\
    \                isEvenDigit = true\n                break\n            } else\
    \ if i == j % 10 {\n                index = index + 1\n            }\n       \
    \ }\n        \n        if isEvenDigit == false {\n            uniqueDigit.insert(i,\
    \ at: index)\n        }\n    }\n    \n    return uniqueDigit.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpepk8lk5l/tmpepk8lk5l.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a670a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a66d9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a66d9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a66d997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepk8lk5l                        0x000055b4ead0b6cc <unavailable> + 5836

    5    libc.so.6                          0x00002b9a6728f460 __libc_start_main +
    245

    6    tmpepk8lk5l                        0x000055b4ead0b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let copy = x.sorted()\n\
    \    return copy.filter({ $0 % 2 == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfzi3iu7w/tmpfzi3iu7w.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad28b3bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad28b0b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad28b0b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad28b0b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzi3iu7w                        0x000055fb5949e5cc <unavailable> + 5580

    5    libc.so.6                          0x00002ad28b5a8460 __libc_start_main +
    245

    6    tmpfzi3iu7w                        0x000055fb5949e1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var evenDigit\
    \ = [Int]()\n    var i = 0\n    \n    while i < x.count {\n        var index =\
    \ x[i].roundedInt() / 10\n        if evenDigit.contains(index) {\n           \
    \ continue\n        } else {\n            evenDigit.insert(index, at: 0)\n   \
    \     }\n        i += 1\n    }\n    \n    return evenDigit\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpbvay2lb6.swift:16:26: error: value of type 'Int' has no member\
    \ 'roundedInt'\n        var index = x[i].roundedInt() / 10\n                 \
    \   ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ret: [Int] =\
    \ []\n    var i = 0\n    var j = 0\n    while i < x.count {\n        j = 0\n \
    \       while j < x.count && x[i] == x[j] {\n            j++\n        }\n    \
    \    if j == x.count {\n            ret.append(x[i])\n        }\n        if x[i]\
    \ % 2 == 0 {\n            i += 1\n        } else {\n            i += 1\n     \
    \   }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdyliamgm.swift:17:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            j++\n             ^~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var tmp: [Int] =\
    \ []\n    var sum: Int = 0\n    for i in x {\n        sum += Int(i)\n        tmp.append(sum)\n\
    \    }\n    tmp.sort(by: {$0 < $1})\n    return tmp\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8h1iad51/tmp8h1iad51.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3807c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3804c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3804c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3804bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8h1iad51                        0x000055b30cdf974c <unavailable> + 5964

    5    libc.so.6                          0x00002ad3809b5460 __libc_start_main +
    245

    6    tmp8h1iad51                        0x000055b30cdf9349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        let remainder = i % 10\n        if remainder\
    \ % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result.sorted(by:\
    \ { $0 < $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdo5ocqtl/tmpdo5ocqtl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fce3cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fce0c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fce0c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fce0c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo5ocqtl                        0x000055f21d7db7a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6fce5b7460 __libc_start_main +
    245

    6    tmpdo5ocqtl                        0x000055f21d7db299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.sorted(by:\
    \ >)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppa3fqwk3/tmppa3fqwk3.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0005deac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0005ae1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0005ae1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0005ae07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppa3fqwk3                        0x0000564ee8c5743c <unavailable> + 5180

    5    libc.so.6                          0x00002b0005fd6460 __libc_start_main +
    245

    6    tmppa3fqwk3                        0x0000564ee8c57039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var result:\
    \ [Int] = []\n    \n    for number in x {\n        let digitsCount = Int(log10(Double(number)))\
    \ + 1\n        var digitSet: [Int] = []\n        \n        for index in 0 ..<\
    \ digitsCount {\n            let digit = number % 10\n            if digitSet.contains(digit)\
    \ {\n                continue\n            } else {\n                digitSet.append(digit)\n\
    \            }\n        }\n        \n        if digitSet.count > 0 {\n       \
    \     result = result + [number]\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpp5geo9lx.swift:15:31: error: cannot find 'log10' in scope\n   \
    \     let digitsCount = Int(log10(Double(number))) + 1\n                     \
    \         ^~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = [0]\n\
    \    for i in x {\n        if ans.contains(i / 10) {\n            continue\n \
    \       }\n        ans.insert(i / 10)\n    }\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppowjc0fq.swift:16:26: error: missing argument for parameter 'at'\
    \ in call\n        ans.insert(i / 10)\n                         ^\n          \
    \               , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var numbers = x\n\
    \    numbers = numbers.filter({ x -> Int in\n        return x.isMultiple(of: 0)\n\
    \    })\n    return numbers.sorted(by: { a, b in\n        if a < b {\n       \
    \     return true\n        }\n        return false\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpbtpv0jvb.swift:12:37: error: declared closure result 'Int' is incompatible\
    \ with return type 'Bool'\n    numbers = numbers.filter({ x -> Int in\n      \
    \                              ^~~\n                                    Bool\n\
    /tmp/tmpbtpv0jvb.swift:12:37: error: declared closure result 'Int' is incompatible\
    \ with contextual type 'Bool'\n    numbers = numbers.filter({ x -> Int in\n  \
    \                                  ^~~\n                                    Bool\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // write your code\
    \ in Swift 4.2 or later\n    var result = x.filter({ $0 % 10 != 0 }).sorted()\n\
    \    let length = x.count\n    for i in 0..<length {\n        if result[i] ==\
    \ x[i] {\n            result.remove(at: i)\n            x.remove(at: i)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0ks68lnd.swift:17:15: error: cannot use mutating member on immutable\
    \ value: 'x' is a 'let' constant\n            x.remove(at: i)\n            ~ ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique = [Int]()\n\
    \    \n    for i in x {\n        let digit = String(i).characters(separatedBy:\
    \ CharacterSet.decimalDigits.inverted).joined()\n        \n        if unique.contains(digit)\
    \ == false {\n            unique.append(digit)\n        }\n    }\n    \n    return\
    \ unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmptwopx3nn.swift:14:55: error: cannot find 'CharacterSet' in scope\n\
    \        let digit = String(i).characters(separatedBy: CharacterSet.decimalDigits.inverted).joined()\n\
    \                                                      ^~~~~~~~~~~~\n/tmp/tmptwopx3nn.swift:14:31:\
    \ error: cannot call value of non-function type 'String'\n        let digit =\
    \ String(i).characters(separatedBy: CharacterSet.decimalDigits.inverted).joined()\n\
    \                              ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var n = x.count\n    for i in 0...n {\n        let s = x.filter { $0 % i\
    \ == 0 }\n        if s.count != n {\n            result = result.appendContentsOf(s.sorted(by:\
    \ >))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3rc6uspb.swift:16:29: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n            result = result.appendContentsOf(s.sorted(by:\
    \ >))\n                     ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = [0]\n    for e in x {\n        if result.contains(e) == false {\n        \
    \    result.append(e)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppnlk36qk/tmppnlk36qk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ee0929c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ee0620b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ee0620988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ee061f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnlk36qk                        0x000055addd60a5fc <unavailable> + 5628

    5    libc.so.6                          0x00002b5ee0b15460 __libc_start_main +
    245

    6    tmppnlk36qk                        0x000055addd60a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var output = [Int]()\n\
    \    var dig = x[0].digits\n    for i in x {\n        guard dig.contains(&i) else\
    \ {\n            dig.append(i)\n            output.append(i)\n        }\n    }\n\
    \    output.reverse()\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprmd6xqnz.swift:12:20: error: value of type 'Int' has no member\
    \ 'digits'\n    var dig = x[0].digits\n              ~~~~ ^~~~~~\n/tmp/tmprmd6xqnz.swift:14:28:\
    \ error: cannot pass immutable value as inout argument: 'i' is a 'let' constant\n\
    \        guard dig.contains(&i) else {\n                           ^~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for x in x {\n        if x % 2 == 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvgiexkbv/tmpvgiexkbv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ebcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45e8c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45e8c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45e8c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgiexkbv                        0x00005567a87e662c <unavailable> + 5676

    5    libc.so.6                          0x00002ab45edb7460 __libc_start_main +
    245

    6    tmpvgiexkbv                        0x00005567a87e6229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    let count\
    \ = x.count\n    \n    // use unsorted array as buffer\n    var buffer: [Int]\
    \ = [0] * count\n    \n    var index = 0\n    \n    while index < count {\n  \
    \      buffer[index] = x[index]\n        index += 1\n    }\n    \n    // sort\
    \ the buffer\n    buffer.sort()\n    \n    var result: [Int] = []\n    \n    for\
    \ _ in 0..<buffer.count {\n        \n        var index = -1\n        \n      \
    \  if buffer[index] % 2 == 0 {\n            \n            let lastIndex = index\n\
    \            \n            // find out the index of digit that hasn't any even\n\
    \            do {\n                \n                index = (lastIndex + 1) %\
    \ buffer.count\n                \n            } while buffer[index] % 2 == 0\n\
    \            \n            if lastIndex != index {\n                \n       \
    \         result.insert(buffer[index], at: 0)\n                \n            \
    \    buffer[index] = 0\n            }\n            \n        }\n        \n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8h6xttn3.swift:38:13: error: 'do-while' statement is not allowed\n\
    \            do {\n            ^\n/tmp/tmp8h6xttn3.swift:38:13: note: did you\
    \ mean 'repeat-while' statement?\n            do {\n            ^~\n         \
    \   repeat\n/tmp/tmp8h6xttn3.swift:38:13: note: did you mean separate 'do' and\
    \ 'while' statements?\n            do {\n            ^\n/tmp/tmp8h6xttn3.swift:15:29:\
    \ error: cannot convert value of type 'Int' to specified type '[Int]'\n    var\
    \ buffer: [Int] = [0] * count\n                        ~~~~^~~~~~~\n/tmp/tmp8h6xttn3.swift:15:25:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    var buffer: [Int] = [0] * count\n                        ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  var newArray = [0]\n\
    \  for x in x {\n    if newArray.contains(Int(x)/10) {\n      continue\n    }\n\
    \    newArray.append(x)\n  }\n  return newArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp498xedd8/tmp498xedd8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a22ee2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a22bd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a22bd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a22bd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp498xedd8                        0x00005585aa6cc7cc <unavailable> + 6092

    5    libc.so.6                          0x00002b0a230ce460 __libc_start_main +
    245

    6    tmp498xedd8                        0x00005585aa6cc3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    \n    if x.count <= 0 {\n        return res\n    }\n\n    var x = x[0]\n\
    \    var idx = 1\n    \n    while idx < x.count {\n        if x.isMultiple(Int(x.floor()\
    \ + idx / 2)) {\n            x.subtract(Int(x.floor() + idx / 2))\n          \
    \  res.append(self[idx])\n        }\n        idx += 1\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgww9dxy2.swift:20:19: error: value of type 'Int' has no member\
    \ 'count'\n    while idx < x.count {\n                ~ ^~~~~\n/tmp/tmpgww9dxy2.swift:21:14:\
    \ error: no exact matches in call to instance method 'isMultiple'\n        if\
    \ x.isMultiple(Int(x.floor() + idx / 2)) {\n             ^\n/tmp/tmpgww9dxy2.swift:21:14:\
    \ note: found candidate with type '(Int) -> Bool'\n        if x.isMultiple(Int(x.floor()\
    \ + idx / 2)) {\n             ^\n/tmp/tmpgww9dxy2.swift:21:31: error: value of\
    \ type 'Int' has no member 'floor'\n        if x.isMultiple(Int(x.floor() + idx\
    \ / 2)) {\n                            ~ ^~~~~\n/tmp/tmpgww9dxy2.swift:22:15:\
    \ error: value of type 'Int' has no member 'subtract'\n            x.subtract(Int(x.floor()\
    \ + idx / 2))\n            ~ ^~~~~~~~\n/tmp/tmpgww9dxy2.swift:22:30: error: value\
    \ of type 'Int' has no member 'floor'\n            x.subtract(Int(x.floor() +\
    \ idx / 2))\n                           ~ ^~~~~\n/tmp/tmpgww9dxy2.swift:23:24:\
    \ error: cannot find 'self' in scope; did you mean to use it in a type or extension\
    \ context?\n            res.append(self[idx])\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var unique_digits\
    \ = [Int]()\n    var index = 0\n    \n    for number in x {\n        if number\
    \ % 2 == 0 {\n            unique_digits.append(number)\n        } else {\n   \
    \         while index < unique_digits.count && unique_digits[index] != number\
    \ {\n                index += 1\n            }\n            unique_digits.insert(index,\
    \ number)\n        }\n    }\n    \n    return unique_digits\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjcqtqrrj.swift:22:27: error: no exact matches in call to instance\
    \ method 'insert'\n            unique_digits.insert(index, number)\n         \
    \                 ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var newSet = [Int]()\n\
    \    for el in x {\n        if isEven(el) {\n            newSet.append(el)\n \
    \       }\n    }\n    return newSet\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9k7q6r3b.swift:13:12: error: cannot find 'isEven' in scope\n  \
    \      if isEven(el) {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique: [Int]\
    \ = []\n    let n = x.count\n    for i in 0..<n {\n        let k = x[i]\n    \
    \    if (k % 2 == 0) {\n            let j = (k / 2)\n            while (j < n)\
    \ {\n                let tmp = x[j]\n                if (tmp == k) {\n       \
    \             j++\n                }\n                else if tmp % 2 != 0 {\n\
    \                    break\n                }\n                else {\n      \
    \              unique.append(k)\n                }\n            }\n        }\n\
    \    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9c6gnffk.swift:20:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                    j++\n                     ^~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array()\n\
    \    \n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    \n    if result.isEmpty {\n        result.append(0)\n \
    \   }\n    \n    result.sort()\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpum85nh8s.swift:11:18: error: generic parameter 'Element' could\
    \ not be inferred\n    var result = Array()\n                 ^\n/tmp/tmpum85nh8s.swift:11:18:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var result\
    \ = Array()\n                 ^\n                      <Any>\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = Set<Int>()\n\
    \    for v in x {\n        if !res.contains(v) {\n            res.insert(v)\n\
    \        }\n    }\n    return res.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp7kfhskn2/tmp7kfhskn2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd21b32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd21829b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd21829988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd218287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kfhskn2                        0x00005581dcebe76c <unavailable> + 5996

    5    libc.so.6                          0x00002acd21d1e460 __libc_start_main +
    245

    6    tmp7kfhskn2                        0x00005581dcebe369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    let n = x.count\n\
    \    let resultSet: [Int] = x.filter{ $0 % 10 != 0 }.sorted()\n    \n    for i\
    \ in 0..<n {\n        if resultSet[i] == 0 {\n            resultSet.remove(at:\
    \ i)\n        }\n    }\n    return resultSet\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp7p6rh4pj.swift:17:23: error: cannot use mutating member on immutable\
    \ value: 'resultSet' is a 'let' constant\n            resultSet.remove(at: i)\n\
    \            ~~~~~~~~~ ^\n/tmp/tmp7p6rh4pj.swift:13:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let resultSet: [Int] = x.filter{ $0 % 10 != 0 }.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let result = Set<Int>()\n\
    \    var resultSorted = [Int]()\n    \n    for i in x {\n        if result.contains(i)\
    \ {\n            continue\n        } else {\n            result.insert(i)\n  \
    \          resultSorted += [i]\n        }\n    }\n    \n    return resultSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprepyl9z6.swift:18:20: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n            result.insert(i)\n        \
    \    ~~~~~~ ^\n/tmp/tmprepyl9z6.swift:11:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = x\n  \
    \  var count = 0\n    for num in res {\n        if num % 2 == 0 {\n          \
    \  count++\n        }\n    }\n    var a = [Int]()\n    for num in res {\n    \
    \    if num % 2 == 0 {\n            a += num\n        }\n    }\n    a = sorted(a)\n\
    \    for i in 0..<count {\n        if a[i] == a[i+1] {\n            a.removeAtIndex(i+1)\n\
    \        }\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphf_gepqc.swift:15:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            count++\n                 ^~\n/tmp/tmphf_gepqc.swift:21:18:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Array<Int>'\n\
    \            a += num\n                 ^\n/tmp/tmphf_gepqc.swift:24:9: error:\
    \ cannot find 'sorted' in scope\n    a = sorted(a)\n        ^~~~~~\n/tmp/tmphf_gepqc.swift:27:15:\
    \ error: value of type '[Int]' has no member 'removeAtIndex'\n            a.removeAtIndex(i+1)\n\
    \            ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var returnArr: [Int]\
    \ = []\n    for i in x {\n        if i % 2 != 0 {\n            returnArr.append(i)\n\
    \        }\n    }\n    return returnArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp2nefyz4/tmpp2nefyz4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b745d338c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b745d02fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b745d02f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b745d02e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2nefyz4                        0x0000563790b0f62c <unavailable> + 5676

    5    libc.so.6                          0x00002b745d524460 __libc_start_main +
    245

    6    tmpp2nefyz4                        0x0000563790b0f229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var cnt = 0\n    for x in x {\n        if x.isMultiple(2) {\n    \
    \        if result.contains(x) {\n                continue\n            } else\
    \ {\n                result.append(x)\n            }\n        } else {\n     \
    \       cnt += 1\n        }\n    }\n    return result \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpa9iabp1g.swift:14:14: error: no exact matches in call to instance\
    \ method 'isMultiple'\n        if x.isMultiple(2) {\n             ^\nSwift.SignedInteger:6:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(of:)')\n   \
    \ @inlinable public func isMultiple(of other: Self) -> Bool\n                \
    \           ^\nSwift.BinaryInteger:7:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(of:)')\n    @inlinable public func isMultiple(of\
    \ other: Self) -> Bool\n                           ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    // Your code\
    \ here\n    var result = [0]\n    x.filter { (item) -> Bool in\n        if item\
    \ % 2 == 0 {\n            return false\n        } else {\n            result[0]++\n\
    \            return true\n        }\n    }\n    return result.map { $0*10 }\n\
    \    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33,\
    \ 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) ==\
    \ [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpatq90_hh.swift:18:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            result[0]++\n                     ^~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    \n    for num in x {\n        let digits = num / 10\n        let remainder\
    \ = num % 10\n        \n        if !result.contains(digits) && !result.contains(remainder)\
    \ {\n            result.insert(digits)\n            result.insert(remainder)\n\
    \        }\n    }\n    \n    return result.sorted().map { $0 * 10 + $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmrgou6q2.swift:23:32: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    return result.sorted().map\
    \ { $0 * 10 + $1 }\n                               ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = [Int]()\n\
    \    var i = x.count\n    var j = 0\n    var k = 0\n\n    while i >= 0 {\n   \
    \     if j >= i {\n            ans.append(x[i])\n        }\n        if j == i\
    \ {\n            j++\n        }\n        if x[i]%2 == 0 {\n            i = i-1\n\
    \        } else {\n            j = j+1\n        }\n    }\n    return ans\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdgxguc01.swift:21:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            j++\n             ^~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var i = 0\n    var\
    \ result = [Int]()\n    for element in x {\n        var element = element % 10\n\
    \        i += 1\n        if element == 0 {\n            continue\n        }\n\
    \        while i > 0 && x[i-1] / 10 == element {\n            element /= 10\n\
    \            i -= 1\n        }\n        if element != 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpttjw60x3/tmpttjw60x3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b65d2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b65a22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b65a22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b65a217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttjw60x3                        0x000055820c99a6cc <unavailable> + 5836

    5    libc.so.6                          0x00002b1b65f17460 __libc_start_main +
    245

    6    tmpttjw60x3                        0x000055820c99a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Int()\n\
    \    let n = x.count\n    var i = n - 1\n    while i >= 0 {\n        let r = x\
    \ / 10\n        if r != 0 {\n            if x % 10 == 0 {\n                result.appendContentsOf(x)\n\
    \                x -= r\n            } else {\n                x -= r\n      \
    \      }\n            i -= 1\n        } else {\n            i -= 1\n        }\n\
    \    }\n    if x > 0 && x % 10 == 0 {\n        result.appendContentsOf(x)\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpablq1w78.swift:15:19: error: binary operator '/' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n        let r = x / 10\n            \
    \    ~ ^ ~~\n/tmp/tmpablq1w78.swift:15:19: note: overloads for '/' exist with\
    \ these partially matching parameter lists: (Int, Int)\n        let r = x / 10\n\
    \                  ^\n/tmp/tmpablq1w78.swift:17:16: error: cannot convert value\
    \ of type '[Int]' to expected argument type 'Int'\n            if x % 10 == 0\
    \ {\n               ^\n/tmp/tmpablq1w78.swift:18:24: error: value of type 'Int'\
    \ has no member 'appendContentsOf'\n                result.appendContentsOf(x)\n\
    \                ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpablq1w78.swift:19:19: error:\
    \ binary operator '-=' cannot be applied to operands of type '[Int]' and 'Duration'\n\
    \                x -= r\n                ~ ^  ~\n/tmp/tmpablq1w78.swift:19:19:\
    \ note: overloads for '-=' exist with these partially matching parameter lists:\
    \ (inout ContinuousClock.Instant, Duration), (inout Double, Double), (inout Duration,\
    \ Duration), (inout Float, Float), (inout Float16, Float16), (inout Float80, Float80),\
    \ (inout Int, Int), (inout Int16, Int16), (inout Int32, Int32), (inout Int64,\
    \ Int64), (inout Int8, Int8), (inout SuspendingClock.Instant, Duration), (inout\
    \ UInt, UInt), (inout UInt16, UInt16), (inout UInt32, UInt32), (inout UInt64,\
    \ UInt64), (inout UInt8, UInt8)\n                x -= r\n                  ^\n\
    /tmp/tmpablq1w78.swift:21:19: error: binary operator '-=' cannot be applied to\
    \ operands of type '[Int]' and 'Duration'\n                x -= r\n          \
    \      ~ ^  ~\n/tmp/tmpablq1w78.swift:21:19: note: overloads for '-=' exist with\
    \ these partially matching parameter lists: (inout ContinuousClock.Instant, Duration),\
    \ (inout Double, Double), (inout Duration, Duration), (inout Float, Float), (inout\
    \ Float16, Float16), (inout Float80, Float80), (inout Int, Int), (inout Int16,\
    \ Int16), (inout Int32, Int32), (inout Int64, Int64), (inout Int8, Int8), (inout\
    \ SuspendingClock.Instant, Duration), (inout UInt, UInt), (inout UInt16, UInt16),\
    \ (inout UInt32, UInt32), ("
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    for element in x {\n        for _ in 0..<element.truncatingRemainder(10).truncatingRemainder(10)\
    \ {\n            if res.contains(element) {\n                continue\n      \
    \      }\n            res.append(element)\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81275dhh.swift:13:30: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        for _ in 0..<element.truncatingRemainder(10).truncatingRemainder(10)\
    \ {\n                     ~~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res: [Int] =\
    \ []\n    var arr = [Int]()\n\n    for n in x {\n        let str = n.description\n\
    \        let n = Int(str)\n        if n % 10 == 0 && arr.count <= 5 {\n      \
    \      arr.append(n)\n        }\n    }\n\n    if arr.count > 5 {\n        for\
    \ n in arr {\n            let str = n.description\n            let n = Int(str)\n\
    \            if n % 2 != 0 {\n                res.append(n)\n            }\n \
    \       }\n    } else {\n        return res\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyu1q_zuf.swift:17:12: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if n % 10 == 0 && arr.count <=\
    \ 5 {\n           ^\n/tmp/tmpyu1q_zuf.swift:17:12: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        if n % 10\
    \ == 0 && arr.count <= 5 {\n           ^\n           ( ?? <#default value#>)\n\
    /tmp/tmpyu1q_zuf.swift:17:12: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if n % 10 == 0 && arr.count <=\
    \ 5 {\n           ^\n            !\n/tmp/tmpyu1q_zuf.swift:18:24: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \     arr.append(n)\n                       ^\n/tmp/tmpyu1q_zuf.swift:18:24: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            arr.append(n)\n                       ^\n                       \
    \  ?? <#default value#>\n/tmp/tmpyu1q_zuf.swift:18:24: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            arr.append(n)\n\
    \                       ^\n                        !\n/tmp/tmpyu1q_zuf.swift:26:16:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            if n % 2 != 0 {\n               ^\n/tmp/tmpyu1q_zuf.swift:26:16:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            if n % 2 != 0 {\n               ^\n               ( ?? <#default\
    \ value#>)\n/tmp/tmpyu1q_zuf.swift:26:16: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            if n % 2 != 0 {\n\
    \               ^\n                !\n/tmp/tmpyu1q_zuf.swift:27:28: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \         res.append(n)\n                           ^\n/tmp/tmpyu1q_zuf.swift:27:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                res.append(n)\n                           ^\n       \
    \                      ?? <#default value"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var xCopy = x.sorted()\n    for d in xCopy {\n        if d.isMultiple(of:\
    \ 2) {\n            if !contains(&result, d) {\n                result.append(d)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvzx9sr7x.swift:15:17: error: cannot find 'contains' in scope\n\
    \            if !contains(&result, d) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    \n    for i in x {\n        if let digit = i % 10 {\n            if let idx\
    \ = find(res, &(digit)) {\n                res[idx] = digit\n            }\n \
    \           else {\n                append(res, digit)\n            }\n      \
    \  }\n    }\n    \n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmngssf5f.swift:15:26: error: cannot find 'find' in scope\n    \
    \        if let idx = find(res, &(digit)) {\n                         ^~~~\n/tmp/tmpmngssf5f.swift:15:36:\
    \ error: cannot pass immutable value as inout argument: 'digit' is a 'let' constant\n\
    \            if let idx = find(res, &(digit)) {\n                            \
    \       ^ ~~~~~\n/tmp/tmpmngssf5f.swift:19:17: error: cannot find 'append' in\
    \ scope\n                append(res, digit)\n                ^~~~~~\n/tmp/tmpmngssf5f.swift:14:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        if let digit = i % 10 {\n           ^           ~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var set = Set<Int>()\n\
    \    for n in x {\n        if n % 10 == 0 {\n            set.remove(n)\n     \
    \   } else {\n            set.insert(n)\n        }\n    }\n    return Array(set).sorted(by:\
    \ { $0 < $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsodzttpf/tmpsodzttpf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb02dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb02accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb02acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb02acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsodzttpf                        0x000056457601383c <unavailable> + 6204

    5    libc.so.6                          0x00002aeb02fc1460 __libc_start_main +
    245

    6    tmpsodzttpf                        0x0000564576013439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    if x.isEmpty { return\
    \ [] }\n\n    var result: [Int] = []\n    var i = 0\n    var found = true\n\n\
    \    for element in x {\n        if element % 2 == 0 { \n            found = false\n\
    \        } else {\n            result.append(element)\n        }\n    }\n\n  \
    \  if !found { return result }\n\n    for element in x {\n        if element %\
    \ 2 != 0 { \n            result.append(element)\n        }\n    }\n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9plmrhcm/tmp9plmrhcm.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac35f104c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35edfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35edfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35edfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9plmrhcm                        0x000055ae65e4467c <unavailable> + 5756

    5    libc.so.6                          0x00002ac35f2f0460 __libc_start_main +
    245

    6    tmp9plmrhcm                        0x000055ae65e44279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array(0..<x.count).filter({\
    \ $0 % 2 == 0 }).sorted()\n    return result.map { x[$0] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpo9afoe_i/tmpo9afoe_i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8079f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8076f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8076f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8076ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9afoe_i                        0x000055bd4c9ca85c <unavailable> + 6236

    5    libc.so.6                          0x00002ad807be5460 __libc_start_main +
    245

    6    tmpo9afoe_i                        0x000055bd4c9ca459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var new_set = Set<Int>()\n\
    \    for x in x {\n        if x % 2 != 0 {\n            new_set.insert(x)\n  \
    \      }\n    }\n    return new_set.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsztkcbba/tmpsztkcbba.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28a882dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28a8524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28a8524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28a85237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsztkcbba                        0x0000559c965e377c <unavailable> + 6012

    5    libc.so.6                          0x00002b28a8a19460 __libc_start_main +
    245

    6    tmpsztkcbba                        0x0000559c965e3379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let sortedArray\
    \ = x.sorted()\n    return sortedArray.filter({ $0 % 2 == 0 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9ylb9thi/tmp9ylb9thi.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4d721ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4d6f11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4d6f11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4d6f107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ylb9thi                        0x000055f76c9675cc <unavailable> + 5580

    5    libc.so.6                          0x00002ba4d7406460 __libc_start_main +
    245

    6    tmp9ylb9thi                        0x000055f76c9671c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = Set()\n\
    \    for num in x {\n        if let even = num % 2 == 0 {\n            if !ans.contains(num)\
    \ {\n                ans.insert(num)\n            }\n        }\n    }\n    return\
    \ Array(ans.allObjects)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp7wfkyvle.swift:11:15: error: generic parameter 'Element' could\
    \ not be inferred\n    var ans = Set()\n              ^\n/tmp/tmp7wfkyvle.swift:11:15:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var ans\
    \ = Set()\n              ^\n                 <<#Element: Hashable#>>\n/tmp/tmp7wfkyvle.swift:13:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Bool'\n\
    \        if let even = num % 2 == 0 {\n           ^          ~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let set = Set<Int>()\n\
    \    let sortedArray = x.sorted { $0 % 10 }\n\n    for elem in sortedArray {\n\
    \        let digit = elem % 10\n        if set.contains(digit) {\n           \
    \ continue\n        }\n        set.insert(digit)\n    }\n    return set.sorted\
    \ { $0 % 10 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp7dm4zrer.swift:12:32: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    let\
    \ sortedArray = x.sorted { $0 % 10 }\n                               ^\n/tmp/tmp7dm4zrer.swift:12:37:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \  let sortedArray = x.sorted { $0 % 10 }\n                                 ~~~^~~~\n\
    /tmp/tmp7dm4zrer.swift:21:23: error: contextual closure type '(Int, Int) throws\
    \ -> Bool' expects 2 arguments, but 1 was used in closure body\n    return set.sorted\
    \ { $0 % 10 }\n                      ^\n/tmp/tmp7dm4zrer.swift:21:28: error: cannot\
    \ convert value of type 'Int' to closure result type 'Bool'\n    return set.sorted\
    \ { $0 % 10 }\n                        ~~~^~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var indexSet = [Int]()\n\
    \    for n in x {\n        if n != 0 && n % 2 == 0 {\n            indexSet.append(n)\n\
    \        }\n    }\n    return indexSet\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpt4soie8m/tmpt4soie8m.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f0ebe9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f0e8e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f0e8e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f0e8df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4soie8m                        0x000055597226067c <unavailable> + 5756

    5    libc.so.6                          0x00002b1f0edd5460 __libc_start_main +
    245

    6    tmpt4soie8m                        0x0000555972260279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.reduce((acc,\
    \ n) -> [Int]() where acc.contains(n/10) && acc.last!%10 == 0, [])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpr7nj7zvr.swift:11:41: error: expected ',' separator\n    return\
    \ x.reduce((acc, n) -> [Int]() where acc.contains(n/10) && acc.last!%10 == 0,\
    \ [])\n                                        ^\n                           \
    \            ,\n/tmp/tmpr7nj7zvr.swift:11:41: error: expected expression in list\
    \ of expressions\n    return x.reduce((acc, n) -> [Int]() where acc.contains(n/10)\
    \ && acc.last!%10 == 0, [])\n                                        ^\n/tmp/tmpr7nj7zvr.swift:11:22:\
    \ error: cannot find 'acc' in scope\n    return x.reduce((acc, n) -> [Int]() where\
    \ acc.contains(n/10) && acc.last!%10 == 0, [])\n                     ^~~\n/tmp/tmpr7nj7zvr.swift:11:27:\
    \ error: cannot find 'n' in scope\n    return x.reduce((acc, n) -> [Int]() where\
    \ acc.contains(n/10) && acc.last!%10 == 0, [])\n                          ^\n\
    /tmp/tmpr7nj7zvr.swift:11:21: error: expected type before '->'\n    return x.reduce((acc,\
    \ n) -> [Int]() where acc.contains(n/10) && acc.last!%10 == 0, [])\n         \
    \           ^\n/tmp/tmpr7nj7zvr.swift:11:33: error: expected type after '->'\n\
    \    return x.reduce((acc, n) -> [Int]() where acc.contains(n/10) && acc.last!%10\
    \ == 0, [])\n                                ^\n/tmp/tmpr7nj7zvr.swift:11:14:\
    \ error: cannot convert return expression of type '_.Type' to return type '[Int]'\n\
    \    return x.reduce((acc, n) -> [Int]() where acc.contains(n/10) && acc.last!%10\
    \ == 0, [])\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7nj7zvr.swift:11:88: error: cannot convert value of type '[Any]' to expected\
    \ argument type '(_.Type, Int) throws -> _.Type'\n    return x.reduce((acc, n)\
    \ -> [Int]() where acc.contains(n/10) && acc.last!%10 == 0, [])\n            \
    \                                                                           ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueArray\
    \ = [Int]()\n    for num in x {\n        if num != 0 {\n            guard let\
    \ digit = String(num, radix: 10) else {\n                continue\n          \
    \  }\n            if uniqueArray.contains(digit) == false {\n                uniqueArray.append(digit)\n\
    \            }\n        }\n    }\n    return uniqueArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9zy5tzry.swift:14:19: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n            guard let digit = String(num,\
    \ radix: 10) else {\n                  ^           ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9zy5tzry.swift:17:16:\
    \ error: instance method 'contains' requires the types 'Int' and 'String.Element'\
    \ (aka 'Character') be equivalent\n            if uniqueArray.contains(digit)\
    \ == false {\n               ^\n_StringProcessing.Collection:3:17: note: where\
    \ 'Self.Element' = 'Int', 'C.Element' = 'String.Element' (aka 'Character')\n \
    \   public func contains<C>(_ other: C) -> Bool where C : Collection, Self.Element\
    \ == C.Element\n                ^\n/tmp/tmp9zy5tzry.swift:18:29: error: no exact\
    \ matches in call to instance method 'append'\n                uniqueArray.append(digit)\n\
    \                            ^\nSwift.Array:6:37: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Self.Element)\n                          \
    \          ^\n/tmp/tmp9zy5tzry.swift:18:29: note: found candidate with type '(__owned\
    \ String) -> ()'\n                uniqueArray.append(digit)\n                \
    \            ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpuybbbsv1/tmpuybbbsv1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08d276c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08cf6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08cf6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08cf6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuybbbsv1                        0x0000560ee50d079c <unavailable> + 6044

    5    libc.so.6                          0x00002ac08d462460 __libc_start_main +
    245

    6    tmpuybbbsv1                        0x0000560ee50d0399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = Array(0..<x.count).map\
    \ { $0 * $0.reciprocal().toInt() }\n    ans.sort(by: { a, b in\n        let diff\
    \ = a%10 - b%10\n        if diff != 0 {\n            return diff < 0 ? -1 : 1\n\
    \        }\n        return 0\n    })\n    \n    return ans.filter { x in\n   \
    \     x.isMultiple(by: 2).count == 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9hk9tcgu.swift:11:48: error: value of type 'Int' has no member\
    \ 'reciprocal'\n    var ans = Array(0..<x.count).map { $0 * $0.reciprocal().toInt()\
    \ }\n                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var output = [Int]()\n\
    \    for x in x {\n        var flag = false\n        for x in output {\n     \
    \       if x == (x % 10) {\n                flag = true\n                break\n\
    \            }\n        }\n        if !flag {\n            output.append(x)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpe0zi1gvw/tmpe0zi1gvw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6125d45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6125a3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6125a3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6125a3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0zi1gvw                        0x000055c608abb67c <unavailable> + 5756

    5    libc.so.6                          0x00002b6125f31460 __libc_start_main +
    245

    6    tmpe0zi1gvw                        0x000055c608abb279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = Set<Int>()\n\
    \    for num in x {\n        guard num > 0 else {\n            continue\n    \
    \    }\n        var digits = String(num, radix: 0).characters\n        let digitCount\
    \ = digits.count\n        for i in 0..<digitCount {\n            let digit = digits[i]\n\
    \            if digits.contains(String(digit, radix: 0)) {\n                res\
    \ = res.union(Set(Set(digit)))\n            }\n        }\n    }\n    return res.sorted(by:\
    \ { $0 > $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5nki0n5e.swift:16:44: error: 'characters' is unavailable: Please\
    \ use String directly\n        var digits = String(num, radix: 0).characters\n\
    \                                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp5nki0n5e.swift:19:25: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            let digit = digits[i]\n                        ^~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5nki0n5e.swift:20:32:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'Character' conform\
    \ to 'BinaryInteger'\n            if digits.contains(String(digit, radix: 0))\
    \ {\n                               ^\nSwift.String:2:12: note: where 'T' = 'Character'\n\
    \    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where\
    \ T : BinaryInteger\n           ^\n/tmp/tmp5nki0n5e.swift:21:37: error: no exact\
    \ matches in call to initializer \n                res = res.union(Set(Set(digit)))\n\
    \                                    ^\nSwift.Set:14:23: note: candidate requires\
    \ that 'Character' conform to 'Sequence' (requirement specified as 'Source' :\
    \ 'Sequence')\n    @inlinable public init<Source>(_ sequence: __owned Source)\
    \ where Element == Source.Element, Source : Sequence\n                      ^\n\
    Swift.SetAlgebra:2:23: note: candidate requires that 'Character' conform to 'Sequence'\
    \ (requirement specified as 'S' : 'Sequence')\n    @inlinable public init<S>(_\
    \ sequence: __owned S) where S : Sequence, Self.Element == S.Element\n       \
    \               ^\n/tmp/tmp5nki0n5e.swift:21:37: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'Character')\n                res = res.union(Set(Set(digit)))\n\
    \                                    ^\n/tmp/tmp5nki0n5e.swift:21:37: note: candidate\
    \ expects value of type 'any Decoder' for parameter #1 (got 'Ch"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        var index = result.count - 1\n        while index >\
    \ -1 && n % result[index] == 0 {\n            result.removeAtIndex(index)\n  \
    \          index -= 1\n        }\n        result.append(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpw4dfj8gd.swift:15:20: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            result.removeAtIndex(index)\n            ~~~~~~\
    \ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique:[Int]\
    \ = []\n    var even:[Int] = []\n    for el in x {\n        if el%2 == 0 {\n \
    \           even.append(el)\n        } else {\n            unique.append(el)\n\
    \        }\n    }\n    for i in 0..<even.count {\n        if even.contains(i)\
    \ {\n            unique.remove(i)\n        }\n    }\n    return unique\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjdztgcah.swift:22:20: error: no exact matches in call to instance\
    \ method 'remove'\n            unique.remove(i)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    for i in x {\n        for _ in 1..<i {\n            let i = i / 10\n    \
    \        if res.contains(i) {\n                return res\n            }\n   \
    \         else  {\n                res.append(i)\n            }\n        }\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpk8k37j7n/tmpk8k37j7n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad47de3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad47db35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad47db35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad47db347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8k37j7n                        0x00005592143617dc <unavailable> + 6108

    5    libc.so.6                          0x00002ad47e02a460 __libc_start_main +
    245

    6    tmpk8k37j7n                        0x00005592143613d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res: [Int] =\
    \ []\n    var even = [Bool]()\n    var count = 0\n    \n    for i in x {\n   \
    \     count += 1\n        if even {\n            if i%2 == 0 {\n             \
    \   res.append(i)\n            }\n        } else {\n            if count%2 ==\
    \ 0 {\n                res.append(i)\n            }\n        }\n        if i%2\
    \ != 0 {\n            even.append(false)\n        } else {\n            even.append(true)\n\
    \        }\n    }\n    \n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0w4scehn.swift:17:12: error: cannot convert value of type '[Bool]'\
    \ to expected condition type 'Bool'\n        if even {\n           ^~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    let x0 = x[0]\
    \ \n    \n    let indexSet = Set<Int>()\n    let result = Array(0..<x.count).filter\
    \ {\n        if let index = x.index(of: $0) {\n            guard index < x0 else\
    \ { return false }\n            return !indexSet.contains(index)\n        }\n\
    \        return true\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyg_eawwe/tmpyg_eawwe.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4492186c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4491e7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4491e7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4491e7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyg_eawwe                        0x00005598bf0f189c <unavailable> + 6300

    5    libc.so.6                          0x00002b4492372460 __libc_start_main +
    245

    6    tmpyg_eawwe                        0x00005598bf0f1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var results\
    \ = [Int]()\n    var evenDigits = Set<Int>()\n    \n    for i in x {\n       \
    \ if i.isMultiple(2) {\n            evenDigits.insert(i)\n        }\n    }\n \
    \   \n    for i in x {\n        if !evenDigits.contains(i) {\n            results.append(i)\n\
    \        }\n    }\n    \n    return results\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpe3apsqkn.swift:16:14: error: no exact matches in call to instance\
    \ method 'isMultiple'\n        if i.isMultiple(2) {\n             ^\nSwift.SignedInteger:6:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(of:)')\n   \
    \ @inlinable public func isMultiple(of other: Self) -> Bool\n                \
    \           ^\nSwift.BinaryInteger:7:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(of:)')\n    @inlinable public func isMultiple(of\
    \ other: Self) -> Bool\n                           ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    var res = [Int]()\n    var count = 0\n    for num in x {\n        if count\
    \ > 0 {\n            if num % 10 == 0 {\n                res.insert(num)\n   \
    \         }\n        } else {\n            count += 1\n        }\n    }\n    var\
    \ index = 0\n    for num in x {\n        if count > 0 {\n            if num %\
    \ 10 == 0 {\n                res.insert(num)\n                result.insert(num)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpsp59emv9.swift:17:31: error: missing argument for parameter 'at'\
    \ in call\n                res.insert(num)\n                              ^\n\
    \                              , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n/tmp/tmpsp59emv9.swift:27:31:\
    \ error: missing argument for parameter 'at' in call\n                res.insert(num)\n\
    \                              ^\n                              , at: <#Int#>\n\
    Swift.Array:11:37: note: 'insert(_:at:)' declared here\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\n/tmp/tmpsp59emv9.swift:32:12: error: cannot convert\
    \ return expression of type 'Set<Int>' to return type '[Int]'\n    return result\n\
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique = [Int]()\n\
    \    var result = x\n    for i in x {\n        let x = String(abs(i))\n      \
    \  if unique.contains(x) {\n            continue\n        }\n        let index\
    \ = unique.index(of: x)\n        if index != nil, index < result.count {\n   \
    \         result[index] = x\n        } else {\n            unique.append(x)\n\
    \        }\n    }\n    if result.count != unique.count {\n        return result\n\
    \    } else {\n        return unique\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0yy2kd_p.swift:15:12: error: instance method 'contains' requires\
    \ the types 'Int' and 'String.Element' (aka 'Character') be equivalent\n     \
    \   if unique.contains(x) {\n           ^\n_StringProcessing.Collection:3:17:\
    \ note: where 'Self.Element' = 'Int', 'C.Element' = 'String.Element' (aka 'Character')\n\
    \    public func contains<C>(_ other: C) -> Bool where C : Collection, Self.Element\
    \ == C.Element\n                ^\n/tmp/tmp0yy2kd_p.swift:18:38: error: cannot\
    \ convert value of type 'String' to expected argument type 'Int'\n        let\
    \ index = unique.index(of: x)\n                                     ^\n/tmp/tmp0yy2kd_p.swift:20:29:\
    \ error: no 'x' candidates produce the expected contextual result type 'Int'\n\
    \            result[index] = x\n                            ^\n/tmp/tmp0yy2kd_p.swift:14:13:\
    \ note: 'x' produces 'String', not the expected contextual result type 'Int'\n\
    \        let x = String(abs(i))\n            ^\n/tmp/tmp0yy2kd_p.swift:14:13:\
    \ note: 'x' produces 'String', not the expected contextual result type 'ArraySlice<Int>'\n\
    \        let x = String(abs(i))\n            ^\n/tmp/tmp0yy2kd_p.swift:22:20:\
    \ error: no exact matches in call to instance method 'append'\n            unique.append(x)\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'Int' for parameter #1 (got 'String')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp0yy2kd_p.swift:22:20: note: found\
    \ candidate with type '(__owned String) -> ()'\n            unique.append(x)\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var sorted = x.sorted()\n\
    \    var result: [Int] = []\n    \n    for idx in 0..<sorted.count {\n       \
    \ if idx % 2 == 0 {\n            let value = sorted[idx]\n            if value\
    \ % 2 != 0 {\n                result.append(value)\n            }\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0s0y6q12/tmp0s0y6q12.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3daa8b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3daa5a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3daa5a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3daa5a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0s0y6q12                        0x0000559ce76756fc <unavailable> + 5884

    5    libc.so.6                          0x00002b3daaa9c460 __libc_start_main +
    245

    6    tmp0s0y6q12                        0x0000559ce76752f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let digits = x.map\
    \ { String($0) }\n    let even = digits.filter{ $0.contains(\"2\") }\n    let\
    \ sorted = even.sorted { $0.compare($1) == .orderedAscending }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3r92nhn8.swift:13:35: error: value of type 'String' has no member\
    \ 'compare'\n    let sorted = even.sorted { $0.compare($1) == .orderedAscending\
    \ }\n                               ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = x.filter{$0%10\
    \ != 0}\n    guard !res.isEmpty else { return [] }\n    var i = 0\n    while i\
    \ < x.count && x[i] == res[0] {\n        res.remove(at: 0)\n        i += 1\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4s8om4x4/tmp4s8om4x4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6f141fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6f1116b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6f1116988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6f11157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4s8om4x4                        0x00005589dcee46bc <unavailable> + 5820

    5    libc.so.6                          0x00002ab6f160b460 __libc_start_main +
    245

    6    tmp4s8om4x4                        0x00005589dcee42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    guard x.count >\
    \ 0 else { return [] }\n    var digits: [Int] = []\n    var index = 0\n    var\
    \ dig = -1\n    var num = \"\"\n    var evenDigit = false\n    for n in x {\n\
    \        num = String(UInt32(n))\n        if num.characters.count > 1 { // if\
    \ there is a single digit number, \n                                       //\
    \ we will not check other digit.\n            digits.append(num)\n        }\n\
    \        else { // if there is no single digit number, \n                 // we\
    \ will check if this digit, if odd, is even \n            num = \"\"\n       \
    \     for d in digits { // check if this digit is odd\n                if String(UInt32(d)).characters.count\
    \ == 1 {\n                    num += String(UInt32(d))\n                }\n  \
    \          }\n            if UInt32(num) % 2 == 0 {\n                evenDigit\
    \ = true\n            }\n            else {\n                evenDigit = false\n\
    \                index = index + 1\n                digits.append(num)\n     \
    \       }\n        }\n    }\n    var result = [Int]()\n    for d in digits {\n\
    \        if UInt32(num) % 2 == 0 {\n            if evenDigit == true {\n     \
    \           index = index + 1\n            }\n            if UInt32(num) > UInt32(result[index])\
    \ {\n                result.append(UInt32(d))\n            }\n        }\n    }\n\
    \    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpb7fhzme2.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        if num.characters.count > 1 { // if there is a\
    \ single digit number, \n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb7fhzme2.swift:21:20: error: no exact matches in call\
    \ to instance method 'append'\n            digits.append(num)\n              \
    \     ^\nSwift.Array:6:37: note: candidate expects value of type 'Int' for parameter\
    \ #1 (got 'String')\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpb7fhzme2.swift:21:20: note: found\
    \ candidate with type '(__owned String) -> ()'\n            digits.append(num)\n\
    \                   ^\n/tmp/tmpb7fhzme2.swift:27:38: error: 'characters' is unavailable:\
    \ Please use String directly\n                if String(UInt32(d)).characters.count\
    \ == 1 {\n                                     ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpb7fhzme2.swift:31:16: error: value of\
    \ optional type 'UInt32?' must be unwrapped to a value of type 'UInt32'\n    \
    \        if UInt32(num) % 2 == 0 {\n               ^\n/tmp/tmpb7fhzme2.swift:31:16:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            if UInt32(num) % 2 == 0 {\n               ^\n           \
    \    (           ?? <#default value#>)\n/tmp/tmpb7fhzme2.swift:31:16: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    if UInt32(num) % 2 == 0 {\n               ^\n                          !\n\
    /tmp/tmpb7fhzme2.swift:37:24: error: no exact matches in call to instance method\
    \ 'appe"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    let resultset = Set<Int>()\n\n    for i in x {\n        let x = String(i)\n\
    \        let index = x.index{$0.isDigit}\n\n        if let _ = index {\n     \
    \       if !resultset.contains(x) {\n                result.append(i)\n      \
    \          resultset.add(x)\n            }\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpifw3ruts.swift:16:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isDigit'\n        let index = x.index{$0.isDigit}\n\
    \                            ~~ ^~~~~~~\n/tmp/tmpifw3ruts.swift:19:17: error:\
    \ instance method 'contains' requires the types 'Int' and 'String.Element' (aka\
    \ 'Character') be equivalent\n            if !resultset.contains(x) {\n      \
    \          ^\n_StringProcessing.Collection:3:17: note: where 'Self.Element' =\
    \ 'Int', 'C.Element' = 'String.Element' (aka 'Character')\n    public func contains<C>(_\
    \ other: C) -> Bool where C : Collection, Self.Element == C.Element\n        \
    \        ^\n/tmp/tmpifw3ruts.swift:21:27: error: value of type 'Set<Int>' has\
    \ no member 'add'\n                resultset.add(x)\n                ~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var xs = Array(x)\n\
    \    xs.sort()\n    var res: [Int] = []\n    \n    for i in xs {\n        let\
    \ isEven = i % 2 == 0\n        if !isEven {\n            res = append(res, i)\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp64ibt555.swift:18:19: error: cannot find 'append' in scope\n  \
    \          res = append(res, i)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        for digits in 0 ..< num.truncatingRemainder(dividingBy:\
    \ 10) {\n            if num.truncatingRemainder(dividingBy: 10) == 0 {\n     \
    \           result.append(digits)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5pk9u2kk.swift:13:33: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        for digits in 0 ..< num.truncatingRemainder(dividingBy:\
    \ 10) {\n                            ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    \n    for i in x {\n        var j = 0\n        while j < result.count &&\
    \ result[j] != i {\n            j += 1\n        }\n        if j == result.count\
    \ {\n            result.append(i)\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpc946zngo/tmpc946zngo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b097394bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0973642b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0973642988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09736417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc946zngo                        0x0000558ce0b1169c <unavailable> + 5788

    5    libc.so.6                          0x00002b0973b37460 __libc_start_main +
    245

    6    tmpc946zngo                        0x0000558ce0b11299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var output = [Int]()\n\
    \    \n    for n in x {\n        let d = n % 10\n        if d == 0 && output.contains(d)\
    \ {\n            // Duplicate is found\n            continue\n        }\n    \
    \    output.append(d)\n    }\n    \n    return output\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmps2dgwhqm/tmps2dgwhqm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b258a572c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b258a269b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b258a269988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b258a2687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2dgwhqm                        0x0000564c7a6e46ec <unavailable> + 5868

    5    libc.so.6                          0x00002b258a75e460 __libc_start_main +
    245

    6    tmps2dgwhqm                        0x0000564c7a6e42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // write your code\
    \ here\n    var result = Set<Int>()\n    var i = x.count\n    while i {\n    \
    \    i -= 1\n        if result.contains((x[i])%10) { return }\n        result.add((x[i])%10)\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3z8hvm6i.swift:14:11: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    while i {\n          ^\n          ( != 0)\n/tmp/tmp3z8hvm6i.swift:16:41:\
    \ error: non-void function should return a value\n        if result.contains((x[i])%10)\
    \ { return }\n                                        ^\n/tmp/tmp3z8hvm6i.swift:17:16:\
    \ error: value of type 'Set<Int>' has no member 'add'\n        result.add((x[i])%10)\n\
    \        ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        var resultIndex = 0\n        for char in String(number)\
    \ {\n            if Int(String(char).dropFirst())%2 != 0 {\n                result[resultIndex]\
    \ = number\n                resultIndex += 1\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpp4e3wx1c.swift:15:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            if Int(String(char).dropFirst())%2\
    \ != 0 {\n               ^\n/tmp/tmpp4e3wx1c.swift:15:16: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   if Int(String(char).dropFirst())%2 != 0 {\n               ^\n            \
    \   (                             ?? <#default value#>)\n/tmp/tmpp4e3wx1c.swift:15:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if Int(String(char).dropFirst())%2 != 0 {\n             \
    \  ^\n                                            !\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    \n    x.forEach({ number in\n        \n        let reversedNumber = Array(String(number).reversed())\n\
    \        \n        reversedNumber.forEach({ digit in\n            \n         \
    \   if digit % 2 != 0 {\n                \n                if result.contains(digit)\
    \ {\n                    result.remove(at: result.index(of: digit))\n        \
    \        } else {\n                    result.append(digit)\n                }\n\
    \            }\n        })\n    })\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprui9kmt3.swift:19:16: error: cannot convert value of type 'ReversedCollection<String>.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n            if digit % 2\
    \ != 0 {\n               ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array(0..<x.count)\n\
    \    for index in result {\n        if index == 0 || x[index % 10] % 2 != 0 {\n\
    \            result.remove(at: index)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad90f521c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad90f218561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad90f218286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad90f21813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad90f217bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ad90f205018 <unavailable> + 1355800

    6    tmpijv8ylu0                        0x0000558009a7ef4c <unavailable> + 8012

    7    tmpijv8ylu0                        0x0000558009a7e72c <unavailable> + 5932

    8    libc.so.6                          0x00002ad90f70d460 __libc_start_main +
    245

    9    tmpijv8ylu0                        0x0000558009a7e409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    let count = x.count\n    for i in 0..<count {\n        let a = x[i]\n   \
    \     if a % 2 == 0 {\n            continue\n        }\n        for j in i..<count\
    \ {\n            let b = x[j]\n            if a < b {\n                break\n\
    \            }\n            if a > b {\n                break\n            }\n\
    \            if a % 2 == 0 && b % 2 == 0 {\n                continue\n       \
    \     }\n            result.insert(a, at: j)\n            break\n        }\n \
    \   }\n    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb870bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb86db1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeb86db1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeb86db113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeb86db0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aeb86d9a196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002aeb86d9e020 Array.insert(_:at:)
    + 80

    7    tmpot5oadu_                        0x000055b1005490d2 <unavailable> + 8402

    8    tmpot5oadu_                        0x000055b1005486ac <unavailable> + 5804

    9    libc.so.6                          0x00002aeb872a6460 __libc_start_main +
    245

    10   tmpot5oadu_                        0x000055b100548389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var unique\
    \ = [Int]()\n    for i in x {\n        if unique.contains(i / 10) {\n        \
    \    continue\n        }\n        unique.append(i)\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp15807_tu/tmp15807_tu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1cdbe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1cd8d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1cd8d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1cd8d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15807_tu                        0x00005583b6ce96ec <unavailable> + 5868

    5    libc.so.6                          0x00002ae1cddcc460 __libc_start_main +
    245

    6    tmp15807_tu                        0x00005583b6ce92e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var digits = Set<Int>()\n\
    \    x.forEach {\n        guard !digits.contains($0/10) else { return }\n    \
    \    digits.insert($0/10)\n    }\n    return x.filter{$0 % 10 == 0}\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0dy7zcdc/tmp0dy7zcdc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378b12dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378ae24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378ae24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378ae237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0dy7zcdc                        0x000055eace1c36dc <unavailable> + 5852

    5    libc.so.6                          0x00002b378b319460 __libc_start_main +
    245

    6    tmp0dy7zcdc                        0x000055eace1c32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let map = Map()\n\
    \    let result = [Int]()\n    for num in x {\n        if map.get(num) == nil\
    \ {\n            result.append(num)\n            map.insert(num, num.digit)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp42bcsmip.swift:11:15: error: cannot find 'Map' in scope\n    let\
    \ map = Map()\n              ^~~\n/tmp/tmp42bcsmip.swift:15:20: error: cannot\
    \ use mutating member on immutable value: 'result' is a 'let' constant\n     \
    \       result.append(num)\n            ~~~~~~ ^\n/tmp/tmp42bcsmip.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [Int]()\n \
    \   ^~~\n    var\n/tmp/tmp42bcsmip.swift:16:33: error: value of type 'Int' has\
    \ no member 'digit'\n            map.insert(num, num.digit)\n                \
    \            ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = [Int]()\n\
    \    for i in x {\n        let digit = String(i).first!\n        ans.append(Int(digit))\n\
    \    }\n    return ans.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3lp20655.swift:14:20: error: no exact matches in call to initializer\
    \ \n        ans.append(Int(digit))\n                   ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = []\n \
    \   \n    for i in x {\n        if i.isEven {\n            ans.append(i)\n   \
    \     }\n    }\n    \n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp24j8va9a.swift:11:15: error: empty collection literal requires\
    \ an explicit type\n    var ans = []\n              ^~\n/tmp/tmp24j8va9a.swift:14:14:\
    \ error: value of type 'Int' has no member 'isEven'\n        if i.isEven {\n \
    \          ~ ^~~~~~\n/tmp/tmp24j8va9a.swift:19:12: error: cannot convert return\
    \ expression of type '[Any]' to return type '[Int]'\n    return ans\n        \
    \   ^\n/tmp/tmp24j8va9a.swift:19:12: note: arguments to generic parameter 'Element'\
    \ ('Any' and 'Int') are expected to be equal\n    return ans\n           ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let result = x.filter{\
    \ $0 % 2 != 0 }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpysk1lq_f/tmpysk1lq_f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbc0fbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbc0cb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbc0cb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbc0cb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysk1lq_f                        0x000055f77c58652c <unavailable> + 5420

    5    libc.so.6                          0x00002afbc11a9460 __libc_start_main +
    245

    6    tmpysk1lq_f                        0x000055f77c586129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var evenDigitsArray\
    \ = [Int]()\n    \n    for element in x {\n        if element % 2 == 0 {\n   \
    \         evenDigitsArray.append(element)\n        }\n    }\n    \n    return\
    \ evenDigitsArray.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpukx2uioa/tmpukx2uioa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae93883cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae938533b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae938533988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9385327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukx2uioa                        0x00005595fa7be71c <unavailable> + 5916

    5    libc.so.6                          0x00002ae938a28460 __libc_start_main +
    245

    6    tmpukx2uioa                        0x00005595fa7be319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if num / 10%2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp2gcdfg0_/tmp2gcdfg0_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64f3bb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64f38b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64f38b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64f38af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gcdfg0_                        0x000055a6745ed74c <unavailable> + 5964

    5    libc.so.6                          0x00002b64f3da5460 __libc_start_main +
    245

    6    tmp2gcdfg0_                        0x000055a6745ed349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    for v in x {\n        let d = String(v)\n        res.append(Int(d.unicodeScalars.filter{\
    \ $0.isDigit }).sorted()[0])\n    }\n    return res.sorted(by: { $0 < $1 })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8x1__yj5.swift:14:52: error: value of type 'Unicode.Scalar' has\
    \ no member 'isDigit'\n        res.append(Int(d.unicodeScalars.filter{ $0.isDigit\
    \ }).sorted()[0])\n                                                ~~ ^~~~~~~\n\
    /tmp/tmp8x1__yj5.swift:14:63: error: value of type 'Int' has no member 'sorted'\n\
    \        res.append(Int(d.unicodeScalars.filter{ $0.isDigit }).sorted()[0])\n\
    \                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmp8x1__yj5.swift:14:20:\
    \ error: initializer 'init(_:)' requires that 'String.UnicodeScalarView' conform\
    \ to 'BinaryInteger'\n        res.append(Int(d.unicodeScalars.filter{ $0.isDigit\
    \ }).sorted()[0])\n                   ^\nSwift.SignedInteger:2:23: note: where\
    \ 'T' = 'String.UnicodeScalarView'\n    @inlinable public init<T>(_ source: T)\
    \ where T : BinaryInteger\n                      ^\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{\
    \ $0 % 2 != 0 }.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4mij896r/tmp4mij896r.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a8d57ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a8d275b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a8d275988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a8d2747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mij896r                        0x000055cddfb766a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b8a8d76a460 __libc_start_main +
    245

    6    tmp4mij896r                        0x000055cddfb76199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y = [Int]()\n\
    \    for xNum in x {\n        if xNum % 2 == 0 {\n            if !y.contains(xNum)\
    \ {\n                y.append(xNum)\n            }\n        }\n    }\n    return\
    \ y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpv05l40lk/tmpv05l40lk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b538a09ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5389d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5389d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5389d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv05l40lk                        0x000055fd882a86ec <unavailable> + 5868

    5    libc.so.6                          0x00002b538a28a460 __libc_start_main +
    245

    6    tmpv05l40lk                        0x000055fd882a82e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var result\
    \ = [Int]()\n    var tmp = [Int]()\n    \n    for i in x {\n        if tmp.isEmpty\
    \ {\n            tmp.append(i)\n        } else {\n            if i % 2 != 0 {\n\
    \                result.append(i)\n                tmp.removeAll()\n         \
    \   } else {\n                tmp.append(i)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxtckbtj4/tmpxtckbtj4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ecc52bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ecc222b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ecc222988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ecc2217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxtckbtj4                        0x0000565482dd77bc <unavailable> + 6076

    5    libc.so.6                          0x00002b6ecc717460 __libc_start_main +
    245

    6    tmpxtckbtj4                        0x0000565482dd73b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return unique_digits(x:\
    \ x, result: [Int]())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphrelpskn.swift:11:40: error: extra argument 'result' in call\n\
    \    return unique_digits(x: x, result: [Int]())\n                        ~~~~~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        let numDigits = Int(log10($0.description) + 1)\n        let str =\
    \ $0.description\n        return Int(str[str.startIndex...].dropFirst(numDigits))%2\
    \ == 0\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyy4_scl8.swift:12:29: error: cannot find 'log10' in scope\n   \
    \     let numDigits = Int(log10($0.description) + 1)\n                       \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    if x.count > 0 {\n\
    \        let n = x.first!.count\n        var arr: [Int] = [] // to keep track\
    \ of duplicates\n        for c in x {\n            let i = Int(Int(c) * 0.10)\
    \ // extract each digit from integer\n            if i % 2 == 0 {\n          \
    \      arr.append(i)\n            }\n        }\n        arr.sort()\n        var\
    \ result: [Int] = []\n        for i in arr {\n            if !result.contains(i)\
    \ {\n                result.append(i)\n            }\n        }\n        return\
    \ result\n    } else {\n        return []\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpewe3dndq.swift:12:26: error: value of type 'Int' has no member\
    \ 'count'\n        let n = x.first!.count\n                ~~~~~~~~ ^~~~~\n/tmp/tmpewe3dndq.swift:15:32:\
    \ error: binary operator '*' cannot be applied to operands of type 'Int' and 'Double'\n\
    \            let i = Int(Int(c) * 0.10) // extract each digit from integer\n \
    \                       ~~~~~~ ^ ~~~~\n/tmp/tmpewe3dndq.swift:15:32: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n            let i = Int(Int(c) * 0.10) // extract each digit from\
    \ integer\n                               ^\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = Set<Int>()\n\
    \    for n in x {\n        let str = n.toString(radix: 10)\n        res.formUnion(str)\n\
    \    }\n    return res.array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp28leo4zf.swift:13:21: error: value of type 'Int' has no member\
    \ 'toString'\n        let str = n.toString(radix: 10)\n                  ~ ^~~~~~~~\n\
    /tmp/tmp28leo4zf.swift:16:16: error: value of type 'Set<Int>' has no member 'array'\n\
    \    return res.array\n           ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var counter = Set<Int>()\n    for num in x {\n        if let _ = counter.contains(num)\
    \ {\n            result.append(num)\n        } else {\n            counter.insert(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmd1yf6s3.swift:14:12: error: initializer for conditional binding\
    \ must have Optional type, not 'Bool'\n        if let _ = counter.contains(num)\
    \ {\n           ^       ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var temp = [Int]()\n\
    \    \n    for i in x {\n        if let _ = temp.index(of: i) {\n            continue\n\
    \        }\n        \n        temp.append(i)\n    }\n    \n    return temp\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyzzzdtx8/tmpyzzzdtx8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc8f2b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc8efabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc8efab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc8efaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzzzdtx8                        0x000055a39b54b65c <unavailable> + 5724

    5    libc.so.6                          0x00002acc8f4a0460 __libc_start_main +
    245

    6    tmpyzzzdtx8                        0x000055a39b54b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = [Int]()\n\
    \    for digit in x {\n        if Int(digit) % 2 != 0 {\n            ans.append(digit)\n\
    \        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpw9r4qbd4/tmpw9r4qbd4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33d57ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af33d271b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af33d271988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af33d2707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9r4qbd4                        0x000055e07167a7bc <unavailable> + 6076

    5    libc.so.6                          0x00002af33d766460 __libc_start_main +
    245

    6    tmpw9r4qbd4                        0x000055e07167a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var ans = [Int]()\n\
    \    let max = x.max() % 10\n    for d in x{\n        var hasOddDigit = false\n\
    \        for num in ans {\n            if num == d {\n                hasOddDigit\
    \ = true\n                break\n            }\n        }\n        if hasOddDigit\
    \ {\n            continue\n        }\n        ans.append(d)\n    }\n    return\
    \ ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33,\
    \ 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) ==\
    \ [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp565k7eob.swift:12:17: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let max = x.max() % 10\n        \
    \        ^\n/tmp/tmp565k7eob.swift:12:17: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    let max = x.max() % 10\n\
    \                ^\n              (       ?? <#default value#>)\n/tmp/tmp565k7eob.swift:12:17:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let max = x.max() % 10\n                ^\n                     !\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    \n    for i in x {\n        for j in x {\n            if i != j {\n     \
    \           if Int(i % j) == 0 {\n                    result.append(i)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpju8kfwc6/tmpju8kfwc6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29c1df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29c1aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29c1aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29c1ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpju8kfwc6                        0x000055ea3cce17bc <unavailable> + 6076

    5    libc.so.6                          0x00002b29c1fdf460 __libc_start_main +
    245

    6    tmpju8kfwc6                        0x000055ea3cce13b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var numbers = [Int]()\n\
    \    for number in x {\n        if let remainder = number % 10, !contains(numbers,\
    \ remainder) {\n            numbers.append(number)\n        }\n    }\n    return\
    \ numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpc57ox5eg.swift:13:42: error: cannot find 'contains' in scope\n\
    \        if let remainder = number % 10, !contains(numbers, remainder) {\n   \
    \                                      ^~~~~~~~\n/tmp/tmpc57ox5eg.swift:13:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        if let remainder = number % 10, !contains(numbers, remainder) {\n   \
    \        ^               ~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for element in x {\n        if element % 2 == 0 {\n            continue\n\
    \        }\n        let index = result.index(of: element)\n        if index !=\
    \ nil {\n            result.remove(at: index!)\n        }\n        result.append(element)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp84mvwmfy/tmp84mvwmfy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c724ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c721e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c721e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c721e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84mvwmfy                        0x0000557a7c7fc6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b2c726d7460 __libc_start_main +
    245

    6    tmp84mvwmfy                        0x0000557a7c7fc2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y = [Int]()\n\
    \    for i in x {\n        for j in y {\n            if i % j == 0 {\n       \
    \         continue // j has already found a non even digit\n            }\n  \
    \      }\n        y.append(i)\n    }\n    return y\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpasozqa0o/tmpasozqa0o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b011e992c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b011e689b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b011e689988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b011e6887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasozqa0o                        0x000055ac73a6967c <unavailable> + 5756

    5    libc.so.6                          0x00002b011eb7e460 __libc_start_main +
    245

    6    tmpasozqa0o                        0x000055ac73a69279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var digits = Set<Int>()\n\
    \    var result = Array<Int>()\n    for i in x {\n        if digits.contains(Int(i\
    \ % 10)) {\n            continue\n        }\n        digits.insert(Int(i % 10))\n\
    \        result.append(i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4zx5jlns/tmp4zx5jlns.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b957cf83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b957cc7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b957cc7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b957cc797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4zx5jlns                        0x000056072fb7e90c <unavailable> + 6412

    5    libc.so.6                          0x00002b957d16f460 __libc_start_main +
    245

    6    tmp4zx5jlns                        0x000056072fb7e509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\
    \ $0 % 10 == 0 }).sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8mf8ha_5/tmp8mf8ha_5.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7debf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7de8f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7de8f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7de8ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mf8ha_5                        0x0000563af2f4859c <unavailable> + 5532

    5    libc.so.6                          0x00002ba7dede5460 __libc_start_main +
    245

    6    tmp8mf8ha_5                        0x0000563af2f48199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.reduce([])\
    \ { (acc, e) in\n        if let x = acc.first, x.isOdd && x.digit != e.digit {\n\
    \            acc.append(e)\n        }\n        return acc\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgr5zscv0.swift:12:33: error: value of type 'Int' has no member\
    \ 'isOdd'\n        if let x = acc.first, x.isOdd && x.digit != e.digit {\n   \
    \                           ~ ^~~~~\n/tmp/tmpgr5zscv0.swift:12:44: error: value\
    \ of type 'Int' has no member 'digit'\n        if let x = acc.first, x.isOdd &&\
    \ x.digit != e.digit {\n                                         ~ ^~~~~\n/tmp/tmpgr5zscv0.swift:12:55:\
    \ error: value of type 'Int' has no member 'digit'\n        if let x = acc.first,\
    \ x.isOdd && x.digit != e.digit {\n                                          \
    \          ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var result\
    \ = Array(x)\n    \n    for i in x.indices {\n        \n        if Int(x[i]) %\
    \ 2 == 0 {\n            \n            result.removeAtIndex(i)\n        }\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_1293ho_.swift:18:20: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            result.removeAtIndex(i)\n            ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = x.slice()\n\
    \    var count = [Int]()\n    for i in result {\n        if !contains(count, $0)\
    \ {\n            append(count, $0)\n        }\n    }\n    let copy = result\n\
    \    return copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpcqkv2b44.swift:14:29: error: anonymous closure argument not contained\
    \ in a closure\n        if !contains(count, $0) {\n                          \
    \  ^\n/tmp/tmpcqkv2b44.swift:15:27: error: anonymous closure argument not contained\
    \ in a closure\n            append(count, $0)\n                          ^\n/tmp/tmpcqkv2b44.swift:11:20:\
    \ error: value of type '[Int]' has no member 'slice'\n    var result = x.slice()\n\
    \                 ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array<Int>()\n\
    \    var nums = [Int]()\n    for element in x {\n        if element % 2 != 0 {\n\
    \            nums.append(element)\n        }\n    }\n    for element in nums {\n\
    \        let newElement = element % 10\n        if newElement == 0 {\n       \
    \     continue\n        }\n        result.append (element)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbio9nn2o/tmpbio9nn2o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48c949ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48c9195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48c9195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48c91947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbio9nn2o                        0x000055f68071767c <unavailable> + 5756

    5    libc.so.6                          0x00002b48c968a460 __libc_start_main +
    245

    6    tmpbio9nn2o                        0x000055f680717279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let result = [Int]()\n\
    \    var i = x.startIndex\n    \n    while i != x.endIndex {\n        if !result.contains(x[i])\
    \ {\n            result.append(x[i])\n            i += 1;\n        }\n       \
    \ \n        if i == x.endIndex {\n            break\n        }\n        \n   \
    \     if x[i] % 2 == 0 {\n            var j = i + 1;\n            \n         \
    \   while j < x.endIndex {\n                if x[j] % 2 != 0 {\n             \
    \       break;\n                }\n                j += 1;\n            }\n  \
    \          \n            var k = 0;\n            \n            while k < j {\n\
    \                result.append(x[k])\n                k += 1;\n            }\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprwtapoib.swift:16:20: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n            result.append(x[i])\n     \
    \       ~~~~~~ ^\n/tmp/tmprwtapoib.swift:11:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let result = [Int]()\n    ^~~\n    var\n/tmp/tmprwtapoib.swift:37:24:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \                result.append(x[k])\n                ~~~~~~ ^\n/tmp/tmprwtapoib.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [Int]()\n \
    \   ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return unique_digits(x,\
    \ 0, x.count-1, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpj9mofjlv.swift:11:25: error: extra arguments at positions #2, #3,\
    \ #4 in call\n    return unique_digits(x, 0, x.count-1, 0)\n                 \
    \       ^\n/tmp/tmpj9mofjlv.swift:10:6: note: 'unique_digits(x:)' declared here\n\
    func unique_digits(x: [Int]) -> [Int] {\n     ^\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var newArr = x\n\
    \    \n    for i in newArr {\n        if i % 2 != 0 {\n            newArr = newArr.filter{\
    \ $0 != i }\n        }\n    }\n    \n    return newArr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptcm9yz2z/tmptcm9yz2z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cd90cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cd8dc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cd8dc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cd8dc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcm9yz2z                        0x000055d0f4adf69c <unavailable> + 5788

    5    libc.so.6                          0x00002b0cd92bb460 __libc_start_main +
    245

    6    tmptcm9yz2z                        0x000055d0f4adf299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique = [Int]()\n\
    \    for n in x {\n        guard !unique.contains(n) else { continue }\n     \
    \   guard n % 2 == 0 else { continue }\n        unique.append(n)\n    }\n    return\
    \ unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpw7lwxzlv/tmpw7lwxzlv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b512220bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5121f02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5121f02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5121f017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7lwxzlv                        0x00005577fb0e86ec <unavailable> + 5868

    5    libc.so.6                          0x00002b51223f7460 __libc_start_main +
    245

    6    tmpw7lwxzlv                        0x00005577fb0e82e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let result = x.filter\
    \ { (x) -> Bool in\n        let digits = String(format: \"%0*d\", 0, x)\n    \
    \    let digitStr = digits.split(separator: \"-\")\n        let evenDigits = digitStr[1].split(separator:\
    \ \"\")\n        return (digits.isEmpty == true && evenDigits.count == 1) || (digits.isEmpty\
    \ == false && evenDigits.count > 1)\n    }\n    return result.sorted(by: { (x,\
    \ _) -> Bool in\n        x < x\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplyjex26s.swift:12:28: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        let digits = String(format:\
    \ \"%0*d\", 0, x)\n                           ^~~~~~~~~\n                    \
    \                        radix:  uppercase: \n/tmp/tmplyjex26s.swift:12:48: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n        let\
    \ digits = String(format: \"%0*d\", 0, x)\n                                  \
    \             ^\n                                               ( != 0)\n/tmp/tmplyjex26s.swift:12:22:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'String' conform\
    \ to 'BinaryInteger'\n        let digits = String(format: \"%0*d\", 0, x)\n  \
    \                   ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public\
    \ init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var min: Int = 0\n    var max: Int = x.count - 1\n    while min <=\
    \ max {\n        let mid = (min + max) / 2\n        let index = find(x, mid)\n\
    \        if index == -1 {\n            max = mid - 1\n        } else {\n     \
    \       if x[mid] % 2 == 0 {\n                result.append(mid)\n           \
    \ } else {\n                min = mid + 1\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxc0te0v8.swift:16:21: error: cannot find 'find' in scope\n    \
    \    let index = find(x, mid)\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var uniqueArray\
    \ = [Int]()\n    var remainderArray = [Int]()\n    \n    // Get remainder of each\
    \ number \n    for i in x {\n        let remainder = i % 10\n        remainderArray.append(remainder)\n\
    \    }\n    \n    // Get unique number from remainder array \n    var uniqueArrayIndex\
    \ = 0\n    while (remainderArray.count > 0) {\n        if remainderArray[uniqueArrayIndex]\
    \ == 0 {\n            uniqueArray.append(x[i])\n            uniqueArrayIndex =\
    \ uniqueArrayIndex + 1\n        }\n        else {\n            remainderArray[uniqueArrayIndex]\
    \ = 0\n        }\n    }\n    \n    return uniqueArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphdixrc0g.swift:25:34: error: cannot find 'i' in scope\n       \
    \     uniqueArray.append(x[i])\n                                 ^\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: -1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        var num1 = num\n        var num2 = 1\n        var\
    \ num3 = 1\n        var foundOne = false\n        while num2 <= 10 {\n       \
    \     if num2 == num1 {\n                foundOne = true\n            } else if\
    \ num % num2 == 0 {\n                num3 += 1\n            } else {\n       \
    \         num1 /= num2\n                num2 /= 10\n                num3 = 0\n\
    \            }\n            if !foundOne {\n                result += [num]\n\
    \            }\n        }\n    }\n    return result.sorted(by: { $0 > $1 })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    x.forEach { x in\n        if let even = x % 10, even != 0 {\n           \
    \ result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpj3wa0qj9.swift:13:12: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n        if let even = x % 10, even != 0\
    \ {\n           ^          ~~~~~~\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var tmp = [Int]()\n\
    \    for v in x {\n        tmp.append (v)\n    }\n    tmp.sort {$0.pow 2 > $1.pow\
    \ 2}\n    return tmp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgly5sb_z.swift:15:21: error: consecutive statements on a line must\
    \ be separated by ';'\n    tmp.sort {$0.pow 2 > $1.pow 2}\n                  \
    \  ^\n                    ;\n/tmp/tmpgly5sb_z.swift:15:32: error: consecutive\
    \ statements on a line must be separated by ';'\n    tmp.sort {$0.pow 2 > $1.pow\
    \ 2}\n                               ^\n                               ;\n/tmp/tmpgly5sb_z.swift:15:18:\
    \ error: value of type 'Int' has no member 'pow'\n    tmp.sort {$0.pow 2 > $1.pow\
    \ 2}\n              ~~ ^~~\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i % 2 != 0 {\n            result.append(i)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp2_r7q9tc/tmp2_r7q9tc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad1ea9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad1ba0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad1ba0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad1b9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_r7q9tc                        0x0000558a375e167c <unavailable> + 5756

    5    libc.so.6                          0x00002adad2095460 __libc_start_main +
    245

    6    tmp2_r7q9tc                        0x0000558a375e1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var even: Set<Int>\
    \ = []\n    var odd: Set<Int> = []\n    \n    for element in x {\n        if element\
    \ % 2 == 0 {\n            even.insert(element)\n        } else {\n           \
    \ odd.insert(element)\n        }\n    }\n    \n    even.subtractAll(&odd)\n  \
    \  return even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpix1ml29w.swift:22:10: error: value of type 'Set<Int>' has no member\
    \ 'subtractAll'\n    even.subtractAll(&odd)\n    ~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    x.sort{$0%$0 < 1}\n\
    \    var result = [Int]()\n    for ele in x {\n        var flag = false\n    \
    \    for _ in result {\n            if ele%_ == 0 {\n                flag = true\n\
    \            }\n        }\n        if !flag {\n            result.append(ele)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpt4l3sdus.swift:11:11: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    x.sort{$0%$0\
    \ < 1}\n          ^\n/tmp/tmpt4l3sdus.swift:11:7: error: cannot use mutating member\
    \ on immutable value: 'x' is a 'let' constant\n    x.sort{$0%$0 < 1}\n    ~ ^\n\
    /tmp/tmpt4l3sdus.swift:16:20: error: '_' can only appear in a pattern or on the\
    \ left side of an assignment\n            if ele%_ == 0 {\n                  \
    \ ^\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Array<T>()\n\
    \    for v in x {\n        if String(v).characters.isEmpty {\n            continue\n\
    \        }\n        let str = String(v)\n        let arr = str.characters.map({\
    \ $0 - 48 }).sorted()\n        var idx = 1\n        for i in arr {\n         \
    \   if i / 10 != idx {\n                result.append(v)\n                break\n\
    \            } else {\n                idx += 1\n            }\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqhusp4rw.swift:11:24: error: cannot find type 'T' in scope\n  \
    \  var result = Array<T>()\n                       ^\n/tmp/tmpqhusp4rw.swift:13:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        if String(v).characters.isEmpty\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpqhusp4rw.swift:17:40: error: cannot convert value of type\
    \ 'String.Element' (aka 'Character') to expected argument type 'Int'\n       \
    \ let arr = str.characters.map({ $0 - 48 }).sorted()\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // TODO: do it in\
    \ linear time\n    var unique_digit = [Int]()\n    \n    for y in x {\n      \
    \  guard y % 2 == 0 else { continue }\n        \n        for _ in unique_digit\
    \ {\n            if y == _ {\n                break\n            }\n        }\n\
    \        unique_digit.append(y)\n    }\n    \n    return unique_digit\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4h0n82n4.swift:18:21: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            if y == _ {\n               \
    \     ^\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.remove(n)\n   \
    \     }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbd91m9z_/tmpbd91m9z_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea0f578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea0f26fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea0f26f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea0f26e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbd91m9z_                        0x0000561f4fa3178c <unavailable> + 6028

    5    libc.so.6                          0x00002aea0f764460 __libc_start_main +
    245

    6    tmpbd91m9z_                        0x0000561f4fa31389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    \n    for element in x {\n        if let value = element % 10 {\n       \
    \     if !contains(&value, &result) {\n                result.append(value)\n\
    \            }\n        } else {\n            break\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpo4hxo1u2.swift:15:17: error: cannot find 'contains' in scope\n\
    \            if !contains(&value, &result) {\n                ^~~~~~~~\n/tmp/tmpo4hxo1u2.swift:15:26:\
    \ error: cannot pass immutable value as inout argument: 'value' is a 'let' constant\n\
    \            if !contains(&value, &result) {\n                         ^~~~~~\n\
    /tmp/tmpo4hxo1u2.swift:14:12: error: initializer for conditional binding must\
    \ have Optional type, not 'Int'\n        if let value = element % 10 {\n     \
    \      ^           ~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    \n    var result\
    \ = [Int]()\n    \n    for i in x {\n        \n        for _ in 0..<Int(Int(Int(i)\
    \ / 10)) {\n            \n            if i > 0 {\n                \n         \
    \       if i % 10 == 0 {\n                    \n                    result.append(i)\n\
    \                    \n                }\n                \n                i\
    \ += 10\n                \n            }\n            \n        }\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpi8efecxi.swift:26:19: error: left side of mutating operator isn't\
    \ mutable: 'i' is a 'let' constant\n                i += 10\n                ~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    if x.isEmpty { return\
    \ [] }\n    var ret = x.filter { $0 % 2 != 0 }\n    if ret.isEmpty {\n       \
    \ return ret\n    }\n    var i = ret[0]\n    var index = 0\n    while i < x {\n\
    \        if i == x {\n            break\n        }\n        var j = x\n      \
    \  while (j > i) {\n            if i % j == 0 {\n                ret.remove(at:\
    \ index)\n                x -= 1\n                break\n            }\n     \
    \       j /= 10\n        }\n        i += 1\n        index += 1\n    }\n    return\
    \ ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33,\
    \ 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) ==\
    \ [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpe0om2t_l.swift:18:15: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n    while i < x {\n              ^\n/tmp/tmpe0om2t_l.swift:19:14:\
    \ error: binary operator '==' cannot be applied to operands of type 'Int' and\
    \ '[Int]'\n        if i == x {\n           ~ ^  ~\n/tmp/tmpe0om2t_l.swift:19:14:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Int, Int)\n        if i == x {\n             ^\n/tmp/tmpe0om2t_l.swift:23:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        while (j > i) {\n               ^\n/tmp/tmpe0om2t_l.swift:24:20: error:\
    \ cannot convert value of type '[Int]' to expected argument type 'Int'\n     \
    \       if i % j == 0 {\n                   ^\n/tmp/tmpe0om2t_l.swift:26:17: error:\
    \ cannot convert value of type '[Int]' to expected argument type 'Int'\n     \
    \           x -= 1\n                ^\n/tmp/tmpe0om2t_l.swift:29:15: error: binary\
    \ operator '/=' cannot be applied to operands of type '[Int]' and 'Int'\n    \
    \        j /= 10\n              ^\nSwift.DurationProtocol:2:17: note: candidate\
    \ requires that '[Int]' conform to 'DurationProtocol' (requirement specified as\
    \ 'Self' : 'DurationProtocol')\npublic protocol DurationProtocol : AdditiveArithmetic,\
    \ Comparable, Sendable {\n                ^\n"
  stdout: ''
  timestamp: 1659978631
