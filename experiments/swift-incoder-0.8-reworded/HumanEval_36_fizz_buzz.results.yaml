language: swift
name: HumanEval_36_fizz_buzz
results:
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var result = 0\n    for number in 0..<n {\n        if number\
    \ % 11 == 0 || number % 13 == 0 {\n            result += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpwqcb68l9/tmpwqcb68l9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af742467c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af74215eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af74215e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af74215d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwqcb68l9                        0x0000560662061338 <unavailable> + 4920

    5    libc.so.6                          0x00002af742653460 __libc_start_main +
    245

    6    tmpwqcb68l9                        0x0000560662060fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n >= 0 else {\n        return 0\n    }\n    var numFizz\
    \ = 0, numBuzz = 0\n    for n in stride(from: n, through: 1, by: -1) { // from\
    \ to minus 1 stepping by -1\n        switch n {\n        case 11:\n          \
    \  numBuzz += 1\n        case 13:\n            numFizz += 2\n        default:\n\
    \            break\n        }\n    }\n    return numFizz + numBuzz\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp8ew280ef/tmp8ew280ef.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ec1c8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ec1984b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ec1984988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ec19837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ew280ef                        0x00005594df65d3e8 <unavailable> + 5096

    5    libc.so.6                          0x00002b1ec1e79460 __libc_start_main +
    245

    6    tmp8ew280ef                        0x00005594df65d099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var i: Int\n    if n%11 == 0 {\n        i = 1\n    } else\
    \ if n%13 == 0 {\n        i = 2\n    } else {\n        i = 0\n    }\n\n    return\
    \ fizz_buzz_seq(n.bit_length(), i)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp9its1nyw.swift:19:12: error: cannot find 'fizz_buzz_seq' in scope\n\
    \    return fizz_buzz_seq(n.bit_length(), i)\n           ^~~~~~~~~~~~~\n/tmp/tmp9its1nyw.swift:19:28:\
    \ error: value of type 'Int' has no member 'bit_length'\n    return fizz_buzz_seq(n.bit_length(),\
    \ i)\n                         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var i = 0\n    var count = 0\n    for _ in 0 ..< n {\n  \
    \      if i % 11 == 0 && i % 13 == 0 {\n            count += 1\n        }\n  \
    \      i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmpqfvpxeof/tmpqfvpxeof.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b251fc49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b251f940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b251f940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b251f93f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfvpxeof                        0x00005620428a7338 <unavailable> + 4920

    5    libc.so.6                          0x00002b251fe35460 __libc_start_main +
    245

    6    tmpqfvpxeof                        0x00005620428a6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tguard n > 0 else {\n\t\treturn 0\n\t}\n\treturn ceil(log2(n))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp0nszcsff.swift:13:9: error: cannot find 'ceil' in scope\n     \
    \   return ceil(log2(n))\n               ^~~~\n/tmp/tmp0nszcsff.swift:13:14: error:\
    \ cannot find 'log2' in scope\n        return ceil(log2(n))\n                \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    for num in stride(from: n, through: 0,\
    \ by: 10) {\n        guard num % 11 == 0 || num % 13 == 0 else {\n           \
    \ continue\n        }\n        count += 1\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpkixxhdoq/tmpkixxhdoq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8510d64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8510a5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8510a5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8510a5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkixxhdoq                        0x000055a2113214f3 <unavailable> + 5363

    5    libc.so.6                          0x00002b8510f50460 __libc_start_main +
    245

    6    tmpkixxhdoq                        0x000055a211321129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n / 11 == 0 || n / 13 == 0 {\n        return\
    \ 0\n    }\n    return n - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpo_jre53d/tmpo_jre53d.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b317f48ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b317f185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b317f185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b317f1847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo_jre53d                        0x000055cba5770248 <unavailable> + 4680

    5    libc.so.6                          0x00002b317f67a460 __libc_start_main +
    245

    6    tmpo_jre53d                        0x000055cba576fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 { return 0 }\n    var a = UInt8(n) // cast to UInt8\
    \ to avoid overflow\n    var b = (a % 11 == 0 ? 0 : 11) // modulo 11 to check\
    \ for 0 or 12\n    var c = a % 13 == 0 ? 0 : 13 // modulo 13 to check for 0 or\
    \ 14\n    var count = (b == 0 || c == 0) ? 0 : 2 // if 0, return 0, otherwise\
    \ count\n    for _ in 0 ..< n { // loop through the digits\n        a = a / 10\n\
    \        b = (a % 11 == 0 ? 0 : 11) // modulo 11 to check for 0 or 12\n      \
    \  c = (a % 13 == 0 ? 0 : 13) // modulo 13 to check for 0 or 14\n        count\
    \ = count + (b == 0 || c == 0) ? 0 : 2 // if 0, return 0, otherwise count\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp64unvf3z.swift:19:33: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        count = count + (b == 0 || c == 0)\
    \ ? 0 : 2 // if 0, return 0, otherwise count\n                               \
    \ ^\n/tmp/tmp64unvf3z.swift:19:23: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        count = count + (b == 0 || c == 0) ? 0 : 2\
    \ // if 0, return 0, otherwise count\n                      ^\n              \
    \  ((                        ) != 0)\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    while n > 0 {\n        let remainder =\
    \ n % 11\n        if remainder == 7 {\n            count += 1\n        }\n   \
    \     n /= 11\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpdazacnt_.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 11\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n\
    \    var result: Int = 0\n    if n % 7 == 0 {\n        result = 1\n    }\n   \
    \ if n < 5 {\n        result += 1\n    }\n    if n > 15 {\n        result += 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp63dv7_e9/tmp63dv7_e9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d97da9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d97aa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d97aa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d97a9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63dv7_e9                        0x000055bb1e815248 <unavailable> + 4680

    5    libc.so.6                          0x00002b4d97f95460 __libc_start_main +
    245

    6    tmp63dv7_e9                        0x000055bb1e814ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var nStr = String(n)\n    var divisible = 0\n    var times\
    \ = 0\n    for i in  nStr {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     divisible += 1\n            if divisible == 2 {\n                times +=\
    \ 1\n            }\n        }\n    }\n    return times\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpbgnaeruq.swift:14:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \          ^\n/tmp/tmpbgnaeruq.swift:14:27: error: cannot convert value of type\
    \ 'Character' to expected argument type 'Int'\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n                          ^\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return fizz_buzz_digits(n: n, digits: [0..6])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpaxci2f0t.swift:10:12: error: cannot find 'fizz_buzz_digits' in\
    \ scope\n    return fizz_buzz_digits(n: n, digits: [0..6])\n           ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxci2f0t.swift:10:45: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n    return fizz_buzz_digits(n: n, digits: [0..6])\n           \
    \                                 ^~\n                                       \
    \     ...\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var n = n\n    var fizz = 0\n    var buzz = 0\n\n    while\
    \ n > 0 {\n        switch n % 10 {\n        case 7, 8:\n            buzz += 0\n\
    \        case 9, 10:\n            buzz += 1\n        case 11:\n            fizz\
    \ += 1\n        default:\n            fizz = 0\n            buzz = 0\n       \
    \ }\n        n = n / 10\n    }\n\n    return fizz + buzz\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmphzk51lmm/tmphzk51lmm.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9245a36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b924572db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b924572d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b924572c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzk51lmm                        0x000055e29a18d2c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b9245c22460 __libc_start_main +
    245

    6    tmphzk51lmm                        0x000055e29a18cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\treturn fizzbuzz(n, true)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp8m_i9ibq.swift:10:9: error: cannot find 'fizzbuzz' in scope\n \
    \       return fizzbuzz(n, true)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  var count = 0\n  for number in stride(from: n, through: 1,\
    \ by: 1) {\n    if number % 11 == 0 || number % 13 == 0 {\n      count += 1\n\
    \    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2hkhyr81/tmp2hkhyr81.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd107fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd0d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd0d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd0d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hkhyr81                        0x000055f996ea94f3 <unavailable> + 5363

    5    libc.so.6                          0x00002aebd126b460 __libc_start_main +
    245

    6    tmp2hkhyr81                        0x000055f996ea9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  if n > 1000 {\n    return 0\n  }\n  if n % 10 == 0 {\n    return\
    \ 0\n  }\n  if n % 11 == 0 || n % 13 == 0 {\n    return 1\n  }\n  return fizz_buzz(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpgdhxisqd.swift:19:20: error: missing argument label 'n:' in call\n\
    \  return fizz_buzz(n - 1)\n                   ^\n                   n: \n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    for x in 1...n {\n        if x%11 == 0\
    \ || x%13 == 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmptpaps_jn/tmptpaps_jn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adef29bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adef26b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adef26b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adef26b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptpaps_jn                        0x0000563c7219a338 <unavailable> + 4920

    5    libc.so.6                          0x00002adef2baa460 __libc_start_main +
    245

    6    tmptpaps_jn                        0x0000563c72199fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  if n % 11 == 0 || n % 13 == 0 {\n    return 0\n  }\n  return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
    \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp824ic26n/tmp824ic26n.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8f3e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8f0e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8f0e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8f0df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp824ic26n                        0x000055d031364248 <unavailable> + 4680

    5    libc.so.6                          0x00002aec8f5d5460 __libc_start_main +
    245

    6    tmp824ic26n                        0x000055d031363ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\
    \n    if n >= 100 && n <= 999 {\n        return Int(n / 100).fizz_buzz() + 1\n\
    \    }\n\n    if n >= 1000 && n <= 9999 {\n        return Int(n / 1000).fizz_buzz()\
    \ + 1\n    }\n\n    if n >= 10000 && n <= 99999 {\n        return Int(n / 10000).fizz_buzz()\
    \ + 1\n    }\n\n    if n >= 100000 && n <= 999999 {\n        return Int(n / 100000).fizz_buzz()\
    \ + 1\n    }\n\n    return Int(n / 1000000).fizz_buzz() + 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpah20fmx1.swift:15:29: error: value of type 'Int' has no member\
    \ 'fizz_buzz'\n        return Int(n / 100).fizz_buzz() + 1\n               ~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpah20fmx1.swift:19:30: error: value of type 'Int' has no member\
    \ 'fizz_buzz'\n        return Int(n / 1000).fizz_buzz() + 1\n               ~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpah20fmx1.swift:23:31: error: value of type 'Int' has no member\
    \ 'fizz_buzz'\n        return Int(n / 10000).fizz_buzz() + 1\n               ~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpah20fmx1.swift:27:32: error: value of type 'Int' has no member\
    \ 'fizz_buzz'\n        return Int(n / 100000).fizz_buzz() + 1\n              \
    \ ~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpah20fmx1.swift:30:29: error: value of type\
    \ 'Int' has no member 'fizz_buzz'\n    return Int(n / 1000000).fizz_buzz() + 1\n\
    \           ~~~~~~~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n {\n    case 0...9:\n        return Int(n % 11 ==\
    \ 0)\n    case 10...99:\n        return Int(n % 13 == 0)\n    case 100...999:\n\
    \        return Int(n % 11 == 0 && n % 13 == 0)\n    case 1000...9999:\n     \
    \   return Int(n % 13 == 0 && n % 11 == 0)\n    case 10000...99999:\n        return\
    \ Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0)\n    case 100000...999999:\n\
    \        return Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 ==\
    \ 0)\n    case 1000000...999999:\n        return Int(n % 13 == 0 && n % 11 ==\
    \ 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0)\n    case 100000000...99999999:\n\
    \        return Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 ==\
    \ 0 && n % 10000 == 0 && n % 100000 == 0)\n    case 10000000000...999999999999:\n\
    \        return Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 ==\
    \ 0 && n % 10000 == 0 && n % 100000 == 0 && n % 1000000 == 0)\n    case 100000000000...9999999999999999:\n\
    \        return Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 ==\
    \ 0 && n % 10000 == 0 && n % 100000 == 0 && n % 1000000 == 0 && n % 100000000\
    \ == 0)\n    case 10000000000000...9999999999999999999:\n        return Int(n\
    \ % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0\
    \ && n % 100000 == 0 && n % 1000000 == 0 && n % 100000000 == 0 && n % 1000000000\
    \ == 0)\n    case 1000000000000000...9999999999999999999999:\n        return Int(n\
    \ % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0\
    \ && n % 100000 == 0 && n % 1000000 == 0 && n % 100000000 == 0 && n % 1000000000\
    \ == 0 && n % 10000000000 == 0)\n    case 100000000000000000...99999999999999999:\n\
    \        return Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 ==\
    \ 0 && n % 10000 == 0 && n % 100000 == 0 && n % 1000000 == 0 && n % 100000000\
    \ == 0 && n % 1000000000 == 0 && n % 10000000000 == 0 && n % 1000000000000 ==\
    \ 0)\n    case 1000000000000000000:\n        return Int(n % 13 == 0 && n % 11\
    \ == 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0 && n % 100000 == 0 &&\
    \ n % 1000000 == 0 && n % 100000000 == 0 && n % 1000000000 == 0 && n % 10000000000\
    \ == 0 && n % 1000000000000 == 0 && n % 100000000000000 == 0)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpcqh6rr_w.swift:12:16: error: no exact matches in call to initializer\
    \ \n        return Int(n % 11 == 0)\n               ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'Bool')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Bool')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Bool')\n    public init(_ source: Double)\n         \
    \  ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Bool')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Bool')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Bool')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpcqh6rr_w.swift:14:16:\
    \ error: no exact matches in call to initializer \n        return Int(n % 13 ==\
    \ 0)\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Bool')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Bool')\n    public init(_ source: Float)\n          \
    \ ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Bool')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Bool')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Bool')\n    public\
    \ init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'Bool')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpcqh6rr_w.swift:16:16: error:\
    \ no exact matches in"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let mut count = 3\n    let remainder = n % 11;\n    if remainder\
    \ == 0 || remainder == 3 {\n        count += 2\n    }\n    let remainder2 = n\
    \ % 13;\n    if remainder2 == 0 || remainder2 == 3 {\n        count += 2\n   \
    \ }\n    return count;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpd3vdvhan.swift:10:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut count =\
    \ 3\n            ^\n/tmp/tmpd3vdvhan.swift:10:13: note: join the identifiers together\n\
    \    let mut count = 3\n        ~~~~^~~~~\n        mutcount\n/tmp/tmpd3vdvhan.swift:10:13:\
    \ note: join the identifiers together with camel-case\n    let mut count = 3\n\
    \        ~~~~^~~~~\n        mutCount\n/tmp/tmpd3vdvhan.swift:13:9: error: cannot\
    \ find 'count' in scope\n        count += 2\n        ^~~~~\n/tmp/tmpd3vdvhan.swift:17:9:\
    \ error: cannot find 'count' in scope\n        count += 2\n        ^~~~~\n/tmp/tmpd3vdvhan.swift:19:12:\
    \ error: cannot find 'count' in scope\n    return count;\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let n = abs(n)\n    switch n {\n    case 0:\n        return\
    \ 0\n    case 11...50:\n        return 1\n    case 50...100:\n        return 2\n\
    \    case 100...200:\n        return 3\n    case 200...300:\n        return 4\n\
    \    case 300...400:\n        return 5\n    case 400...500:\n        return 6\n\
    \    case 500...600:\n        return 7\n    case 600...700:\n        return 8\n\
    \    case 700...800:\n        return 9\n    case 800...900:\n        return 10\n\
    \    case 900...1000:\n        return 11\n    default:\n        return n\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
    \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpxwdkhegp/tmpxwdkhegp.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a507ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a4d71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55a4d71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55a4d707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxwdkhegp                        0x000055f1d2e12338 <unavailable> + 4920

    5    libc.so.6                          0x00002b55a5266460 __libc_start_main +
    245

    6    tmpxwdkhegp                        0x000055f1d2e11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp0co1qqjp/tmp0co1qqjp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a5f2c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a5efbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a5efbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a5efbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0co1qqjp                        0x000055aa4e7f02c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b8a5f4b4460 __libc_start_main +
    245

    6    tmp0co1qqjp                        0x000055aa4e7efef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var ret: Int = 0\n    while n > 0 {\n        if n % 11 ==\
    \ 0 || n % 13 == 0 {\n            ret += 1\n        }\n        n /= 10\n    }\n\
    \    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp90qzotae.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var total: Int = 0\n    for _ in 1...n {\n        if n %\
    \ 11 == 0 || n % 13 == 0 {\n            total += 1\n        }\n        n /= 10\n\
    \    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp0nupv8ai.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 { return 0 }\n    if n % 13 == 0 { return\
    \ 2 }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp4xv9mlk0/tmp4xv9mlk0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a3c529c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a3c220b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a3c220988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a3c21f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4xv9mlk0                        0x000055b41a263248 <unavailable> + 4680

    5    libc.so.6                          0x00002b1a3c715460 __libc_start_main +
    245

    6    tmp4xv9mlk0                        0x000055b41a262ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let numbers = (0..<n).filter({ $0 % 11 == 0 || $0 % 13 ==\
    \ 0 }).count\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp_1m9z65c/tmp_1m9z65c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f12399c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f12090b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f12090988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f1208f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1m9z65c                        0x0000564699fc93d8 <unavailable> + 5080

    5    libc.so.6                          0x00002b7f12585460 __libc_start_main +
    245

    6    tmp_1m9z65c                        0x0000564699fc9089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n < 10 {\n        return n\n    }\n    if n % 11 == 0\
    \ || n % 13 == 0 {\n        return n\n    }\n    let result = fizz_buzz(n / 10)\
    \ + n % 10\n    if result == 7 { // 7 is a digit that repeats itself more than\
    \ twice in any number divisible by 11 or 13\n        return fizz_buzz(n / 10)\
    \ + n % 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmptiuz_sdk.swift:16:28: error: missing argument label 'n:' in call\n\
    \    let result = fizz_buzz(n / 10) + n % 10\n                           ^\n \
    \                          n: \n/tmp/tmptiuz_sdk.swift:18:26: error: missing argument\
    \ label 'n:' in call\n        return fizz_buzz(n / 10) + n % 10\n            \
    \             ^\n                         n: \n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let divisibleBy11Or13 = 11...13\n    var count: Int = 0\n\
    \    for num in 0..<n {\n        if num % divisibleBy11Or13 == 0 { count += 1\
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpzmtqb45r.swift:13:18: error: cannot convert value of type 'ClosedRange<Int>'\
    \ to expected argument type 'Int'\n        if num % divisibleBy11Or13 == 0 { count\
    \ += 1 }\n                 ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tvar count : Int = 0\n\trepeat {\n\t\tswitch n & 0b11 {\n\t\t\
    case 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &=\
    \ 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11:\
    \ n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\
    \t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\
    \t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\
    \t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n\
    \ &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\
    \tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\
    \t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11\
    \ {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase\
    \ 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\t\
    case 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &=\
    \ 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11:\
    \ n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\
    \t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\
    \t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\
    \t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n\
    \ &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\
    \tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\
    \t\tcase 0b01: n &= 0b01111111\n\t\tdefault: \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp7c3ic6ha.swift:76:3: error: 'default' label in a 'switch' must\
    \ have at least one executable statement\n                default: \n        \
    \        ^~~~~~~~\n                         break\n/tmp/tmp7c3ic6ha.swift:99:37:\
    \ error: expected '}' at end of brace statement\nassert(fizz_buzz(n: 100000) ==\
    \ 8026)\n                                    ^\n/tmp/tmp7c3ic6ha.swift:11:9: note:\
    \ to match this opening '{'\n        repeat {\n               ^\n/tmp/tmp7c3ic6ha.swift:99:36:\
    \ error: expected 'while' after body of 'repeat' statement\nassert(fizz_buzz(n:\
    \ 100000) == 8026)\n                                   ^\n/tmp/tmp7c3ic6ha.swift:99:37:\
    \ error: expected '}' at end of brace statement\nassert(fizz_buzz(n: 100000) ==\
    \ 8026)\n                                    ^\n/tmp/tmp7c3ic6ha.swift:9:31: note:\
    \ to match this opening '{'\nfunc fizz_buzz(n: Int) -> Int {\n               \
    \               ^\n/tmp/tmp7c3ic6ha.swift:13:16: error: left side of mutating\
    \ operator isn't mutable: 'n' is a 'let' constant\n                case 0b11:\
    \ n &= 0b11111101\n                           ~ ^\n/tmp/tmp7c3ic6ha.swift:14:16:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \                case 0b10: n &= 0b10111111\n                           ~ ^\n\
    /tmp/tmp7c3ic6ha.swift:15:16: error: left side of mutating operator isn't mutable:\
    \ 'n' is a 'let' constant\n                case 0b01: n &= 0b01111111\n      \
    \                     ~ ^\n/tmp/tmp7c3ic6ha.swift:19:16: error: left side of mutating\
    \ operator isn't mutable: 'n' is a 'let' constant\n                case 0b11:\
    \ n &= 0b11111101\n                           ~ ^\n/tmp/tmp7c3ic6ha.swift:20:16:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \                case 0b10: n &= 0b10111111\n                           ~ ^\n\
    /tmp/tmp7c3ic6ha.swift:21:16: error: left side of mutating operator isn't mutable:\
    \ 'n' is a 'let' constant\n                case 0b01: n &= 0b01111111\n      \
    \                     ~ ^\n/tmp/tmp7c3ic6ha.swift:25:16: error: left side of mutating\
    \ operator isn't mutable: 'n' "
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var nMinusOne = n - 1\n    var fizzCount = 0\n    var buzzCount\
    \ = 0\n    while true {\n        if n % 11 == 0 || n % 13 == 0 {\n           \
    \ fizzCount++\n        } else {\n            buzzCount++\n        }\n        if\
    \ n == nMinusOne {\n            break\n        }\n        nMinusOne /= 10\n  \
    \  }\n    return fizzCount + buzzCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpy32_euli.swift:15:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            fizzCount++\n                     ^~\n/tmp/tmpy32_euli.swift:17:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  buzzCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return (n - 1) & 7 ~/ (11 * 13)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp7m31zop3.swift:10:24: error: cannot find operator '~/' in scope\n\
    \    return (n - 1) & 7 ~/ (11 * 13)\n                       ^~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // Your code here\n    \n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpduecoewz/tmpduecoewz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0147488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014717fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014717f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014717e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpduecoewz                        0x000056257ccf2233 <unavailable> + 4659

    5    libc.so.6                          0x00002b0147674460 __libc_start_main +
    245

    6    tmpduecoewz                        0x000056257ccf1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n\
    \    return fizz_buzz(n - 1) + fizz_buzz(n - 11)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpef1znv8a.swift:13:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n - 1) + fizz_buzz(n - 11)\n                     ^\n   \
    \                  n: \n/tmp/tmpef1znv8a.swift:13:41: error: missing argument\
    \ label 'n:' in call\n    return fizz_buzz(n - 1) + fizz_buzz(n - 11)\n      \
    \                                  ^\n                                       \
    \ n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let digits = digits_less_than_n(n: n)\n    let count_digits_that_are_11_or_13\
    \ = (\n        digits.reduce(0) { $0 + $1.is_power_of_two() ? 1 : 0 }\n    )\n\
    \    return count_digits_that_are_11_or_13 / digits.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8y7jcu.swift:10:18: error: cannot find 'digits_less_than_n' in\
    \ scope\n    let digits = digits_less_than_n(n: n)\n                 ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let digits = [9, 8, 7, 6, 5, 4, 3, 2]\n    var count = 0\n\
    \    for n in 0..<digits {\n        if n % digits[count] == 0 || n % digits[count]\
    \ == 7 || (n % digits[count] == 9 && count > 0 && n % digits[count-1] == 7) {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpo8vcsshc.swift:12:18: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n    for n in 0..<digits {\n               \
    \  ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    for n in 0 ..< n {\n        switch n %\
    \ 10 {\n        case 7, 11, 13:\n            count += 1\n        default:\n  \
    \          count = 0\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpet01iq2z/tmpet01iq2z.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba01a79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba01a491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba01a491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba01a4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpet01iq2z                        0x000055d09293a3b3 <unavailable> + 5043

    5    libc.so.6                          0x00002ba01a986460 __libc_start_main +
    245

    6    tmpet01iq2z                        0x000055d092939fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var fizz = 0\n    var buzz = 0\n    var remainder = n % 100\n\
    \    var divisible = n % 10\n    var lastDigit = n % 10\n    if remainder >= 11\
    \ && remainder <= 13 {\n        fizz += 1\n    } else if divisible == 7 {\n  \
    \      buzz += 1\n    }\n    n /= 10\n    if n < 10 && remainder == 0 {\n    \
    \    if lastDigit == 0 {\n            buzz += 1\n        } else {\n          \
    \  fizz += 1\n        }\n    }\n    return fizz + buzz\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmph4hk5nbj.swift:20:7: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n    n /= 10\n    ~ ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tvar result = n\n\tfor i := 0; i < n; i++ {\n\t\tif i % 11 ==\
    \ 0 || i % 13 == 0 {\n\t\t\tresult += Int(i % 10)\n\t\t}\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp9_xt6205.swift:11:9: error: expected type\n        for i := 0;\
    \ i < n; i++ {\n               ^\n                <#type#>\n/tmp/tmp9_xt6205.swift:11:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < n; i++\
    \ {\n               ^\n/tmp/tmp9_xt6205.swift:11:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < n; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 1\n    var i = 1\n    var remainder = 0\n\n \
    \   while i < n {\n        remainder = (n % i)\n        if remainder == 7 && i\
    \ % 11 == 0 || remainder == 0 && i % 13 == 0 {\n            count += 1\n     \
    \   }\n\n        i += 1\n    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmpsyxou25q/tmpsyxou25q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb671bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb66eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb66eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb66eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsyxou25q                        0x000055ffc9db7248 <unavailable> + 4680

    5    libc.so.6                          0x00002adb673a8460 __libc_start_main +
    245

    6    tmpsyxou25q                        0x000055ffc9db6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // TODO: check base case\n    if n == 0 { return 0 }\n\n\
    \    // special case\n    if n % 11 == 0 || n % 13 == 0 { return 1 }\n\n    //\
    \ otherwise count the number of 11s\n    let count = (n / 11).rounded(.down)\n\
    \    return count + fizz_buzz(n - count * 11)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpxivz2kg2.swift:17:20: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Float16'\n    let count = (n / 11).rounded(.down)\n\
    \                 ~ ^ ~~\n/tmp/tmpxivz2kg2.swift:17:20: note: overloads for '/'\
    \ exist with these partially matching parameter lists: (Double, Double), (Float,\
    \ Float), (Float16, Float16), (Float80, Float80)\n    let count = (n / 11).rounded(.down)\n\
    \                   ^\n/tmp/tmpxivz2kg2.swift:18:30: error: missing argument label\
    \ 'n:' in call\n    return count + fizz_buzz(n - count * 11)\n               \
    \              ^\n                             n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    \n    return Int(n % 1000) +\n        Int(n % 10000) / 100\
    \ +\n        Int(n % 10000) / 10 +\n        Int(n % 10000) % 10 +\n        Int(n\
    \ % 10000) / 100 +\n        Int(n % 10000) / 10 +\n        Int(n % 10000) % 10\
    \ +\n        Int(n % 10000) / 100 +\n        Int(n % 10000) / 10 +\n        Int(n\
    \ % 10000) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpmicdlere/tmpmicdlere.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9fb9e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9fb6d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9fb6d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9fb6d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmicdlere                        0x00005651d51c8378 <unavailable> + 4984

    5    libc.so.6                          0x00002ba9fbbce460 __libc_start_main +
    245

    6    tmpmicdlere                        0x00005651d51c8029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let div = [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79]\n    var count = 0\n    \n    for i in 0 ..< n {\n \
    \       if i % div[i] == 0 {\n            count += 1\n        }\n    }\n    \n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0faed82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0faea79561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0faea79286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0faea7913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0faea78bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0fae878e83 <unavailable> + 188035

    6    tmpoqh182ec                        0x000055cb5ad59a2e <unavailable> + 6702

    7    tmpoqh182ec                        0x000055cb5ad5942b <unavailable> + 5163

    8    libc.so.6                          0x00002b0faef6e460 __libc_start_main +
    245

    9    tmpoqh182ec                        0x000055cb5ad59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let remainder = n % 11\n    if remainder == 0 || remainder\
    \ == 13 {\n        return 0\n    }\n    return 1 + fizz_buzz(n - remainder)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp2xt5mj_e.swift:14:26: error: missing argument label 'n:' in call\n\
    \    return 1 + fizz_buzz(n - remainder)\n                         ^\n       \
    \                  n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let n100 = n % 100\n    let n10 = n % 10\n    var result:\
    \ Int = 0\n    if n100 == 0 && n10 == 7 || n100 == 0 && n10 == 9 || n100 == 0\
    \ && n10 == 13 {\n        result++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpkok170f2.swift:14:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        result++\n              ^~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  let divisor = 11\n  var count = 0\n  var max = 0\n  var div\
    \ = n - 1\n  for _ in 0..div {\n    max = max * 10 + Int(n % 10)\n    n = Int(n\
    \ / 10)\n    if n % divisor == 7 {\n      count = count + 1\n    }\n  }\n  return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp5n3410wp.swift:14:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for _ in 0..div {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n % 11 == 0\
    \ || n % 13 == 0 {\n        return 1\n    }\n    return fizz_buzz(n - 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpejm3x7kx.swift:16:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n - 1)\n                     ^\n                     n:\
    \ \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var cnt: Int =\
    \ 0\n    var remainder: Int\n    for remainder in 0..<n {\n        if n % 11 ==\
    \ 0 || n % 13 == 0 {\n            cnt += 1\n        }\n        n -= remainder\n\
    \    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp_r54h8_l.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= remainder\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var ans = 0\n    if n > 0 {\n        ans += (n % 10 == 7)\
    \ ? 1 : 0\n        n /= 10\n    }\n    if n > 0 {\n        ans += (n % 11 == 13)\
    \ ? 1 : 0\n        n /= 11\n    }\n    if n > 0 {\n        ans += (n % 13 == 17)\
    \ ? 1 : 0\n        n /= 13\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpq8kupe_x.swift:13:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n/tmp/tmpq8kupe_x.swift:17:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n /= 11\n        ~ ^\n/tmp/tmpq8kupe_x.swift:21:11: error: left side\
    \ of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 13\n\
    \        ~ ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    let remainder = n % 10\n\
    \    if remainder == 7 { return 1 }\n    if remainder == 9 { return 2 }\n    if\
    \ remainder == 11 { return 3 }\n    if remainder == 13 { return 4 }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
    \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp8998ixqk/tmp8998ixqk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c7dbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c7ab4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60c7ab4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60c7ab37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8998ixqk                        0x000055e69d7f12c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b60c7fa9460 __libc_start_main +
    245

    6    tmp8998ixqk                        0x000055e69d7f0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n == 1 { return 0 }\n    if n % 11 == 0 && n\
    \ % 13 == 0 { return 1 }\n    if n % 13 == 0 { return 2 }\n    if n % 11 == 0\
    \ { return 3 }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpwblr1ie_/tmpwblr1ie_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a9cc92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a9c989b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a9c989988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a9c9887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwblr1ie_                        0x000055c25060f33e <unavailable> + 4926

    5    libc.so.6                          0x00002b5a9ce7e460 __libc_start_main +
    245

    6    tmpwblr1ie_                        0x000055c25060eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n >= 0, n % 11 == 0 || n % 13 == 0 else { return 0\
    \ }\n    return Int(log10(Double(n).truncatingRemainder(from: 10.0)) / log10(10.0))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpncm0k2t3.swift:11:16: error: cannot find 'log10' in scope\n   \
    \ return Int(log10(Double(n).truncatingRemainder(from: 10.0)) / log10(10.0))\n\
    \               ^~~~~\n/tmp/tmpncm0k2t3.swift:11:67: error: cannot find 'log10'\
    \ in scope\n    return Int(log10(Double(n).truncatingRemainder(from: 10.0)) /\
    \ log10(10.0))\n                                                             \
    \     ^~~~~\n/tmp/tmpncm0k2t3.swift:11:51: error: incorrect argument label in\
    \ call (have 'from:', expected 'dividingBy:')\n    return Int(log10(Double(n).truncatingRemainder(from:\
    \ 10.0)) / log10(10.0))\n                                                  ^~~~~\n\
    \                                                   dividingBy\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\t\n\tlet divisors = divisors(n)\n\t\n\tvar fizzBuzzCount = 0\n\
    \t\n\tfor divisor in divisors {\n\t\tif n / divisor == (divisor / divisor) {\n\
    \t\t\tif n % divisor == 0 {\n\t\t\t\tfizzBuzzCount += 1\n\t\t\t} else {\n\t\t\t\
    \tfizzBuzzCount = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if n / divisor != (divisor\
    \ / divisor) {\n\t\t\tfizzBuzzCount = 0\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\treturn\
    \ fizzBuzzCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp93hrvgvy.swift:11:17: error: use of local variable 'divisors' before\
    \ its declaration\n        let divisors = divisors(n)\n                      \
    \ ^\n/tmp/tmp93hrvgvy.swift:11:6: note: 'divisors' declared here\n        let\
    \ divisors = divisors(n)\n            ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  if n < 11 || (n % 11) == 0 {\n    return 0\n  }\n  if n < 13\
    \ || (n % 13) == 0 {\n    return 1\n  }\n  return fizz_buzz(n - 10)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmporc7yuy1.swift:16:20: error: missing argument label 'n:' in call\n\
    \  return fizz_buzz(n - 10)\n                   ^\n                   n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\
    \    return Int(ceil(log2(Float(n))))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpuxq4cjvk.swift:13:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(log2(Float(n))))\n               ^~~~\n/tmp/tmpuxq4cjvk.swift:13:21:\
    \ error: cannot find 'log2' in scope\n    return Int(ceil(log2(Float(n))))\n \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // This algorithm is based on a Fizz-Buzz algorithm\n   \
    \ // which works by:\n    // - looping through all the numbers less than n\n \
    \   // - checking to see if it's divisible by 11 or 13\n    // - if so then checking\
    \ if the last digit of the number is 7\n    // - if so then it's either 11 or\
    \ 13 and can be ignored.\n    // - otherwise it's divisible by either 11 or 13\
    \ and must be printed.\n    // We ignore all the other numbers.\n    \n    //\
    \ Initialize the list of digits found so far\n    var digits = [0]\n    \n   \
    \ // Loop through the numbers up to n\n    for n in 1...n {\n        // Get the\
    \ last digit\n        let lastDigit = n % 10\n        \n        // If last digit\
    \ is 7 then we know it's divisible by either 11 or 13\n        if lastDigit ==\
    \ 7 {\n            // If the last digit of the number isn't 7 then we know it's\
    \ divisible by 11 or 13\n            if lastDigit != 7 {\n                // If\
    \ the last digit is different than 7 then it's divisible by 11 or 13\n       \
    \         let isDivisibleBy11 = lastDigit != 0\n                let isDivisibleBy13\
    \ = lastDigit != 6\n                \n                // If the last digit is\
    \ different than 7 and divisible by 11 then it's divisible by 11\n           \
    \     if isDivisibleBy11 {\n                    return lastDigit\n           \
    \     }\n                \n                // If the last digit is different than\
    \ 7 and divisible by 13 then it's divisible by 13\n                else if isDivisibleBy13\
    \ {\n                    return 6\n                }\n            }\n        }\n\
    \        \n        // If last digit isn't 7 then it must be divisible by 11 or\
    \ 13\n        else {\n            digits.append(lastDigit)\n        }\n    }\n\
    \    \n    // If no digits were found then return 0\n    return digits.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpbc1gmbej/tmpbc1gmbej.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adab3fb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adab3ca9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adab3ca9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adab3ca87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbc1gmbej                        0x000055cb406154f8 <unavailable> + 5368

    5    libc.so.6                          0x00002adab419e460 __libc_start_main +
    245

    6    tmpbc1gmbej                        0x000055cb406151a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n == 1 { return 0 }\n    if n % 11 == 0 || n\
    \ % 13 == 0 { return 2 }\n    return fizz_buzz(n - 1) + 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpv7_o2m_p.swift:12:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n - 1) + 1\n                     ^\n                   \
    \  n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n == 1 {\n        return 1\n    }\n    if n\
    \ <= 35 {\n        return fizz_buzz_digit(n, 35)\n    }\n    \n    var answer:\
    \ Int = 1\n    var remain: Int = n % 10\n    while remain >= 3 {\n        answer\
    \ += fizz_buzz_digit(remain, 1)\n        remain = remain % 10\n    }\n    if remain\
    \ >= 5 {\n        answer += fizz_buzz_digit(remain, 1)\n        remain = remain\
    \ % 10\n    }\n    if remain >= 7 {\n        answer += fizz_buzz_digit(remain,\
    \ 1)\n        remain = remain % 10\n    }\n    return answer\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpzj87yk6e.swift:14:16: error: cannot find 'fizz_buzz_digit' in scope\n\
    \        return fizz_buzz_digit(n, 35)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpzj87yk6e.swift:20:19:\
    \ error: cannot find 'fizz_buzz_digit' in scope\n        answer += fizz_buzz_digit(remain,\
    \ 1)\n                  ^~~~~~~~~~~~~~~\n/tmp/tmpzj87yk6e.swift:24:19: error:\
    \ cannot find 'fizz_buzz_digit' in scope\n        answer += fizz_buzz_digit(remain,\
    \ 1)\n                  ^~~~~~~~~~~~~~~\n/tmp/tmpzj87yk6e.swift:28:19: error:\
    \ cannot find 'fizz_buzz_digit' in scope\n        answer += fizz_buzz_digit(remain,\
    \ 1)\n                  ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n == 1 {\n        return n\n    }\n    if n\
    \ % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n    return fizz_buzz(n/10)\
    \ * 10 + fizz_buzz(n%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmplzy6xd5u.swift:16:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n/10) * 10 + fizz_buzz(n%10)\n                     ^\n \
    \                    n: \n/tmp/tmplzy6xd5u.swift:16:45: error: missing argument\
    \ label 'n:' in call\n    return fizz_buzz(n/10) * 10 + fizz_buzz(n%10)\n    \
    \                                        ^\n                                 \
    \           n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n >= 0 && n % 11 == 0 || n % 13 == 0 else { return\
    \ 0 }\n    return 1 + fizz_buzz(n/11)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpy9jip2ty.swift:11:26: error: missing argument label 'n:' in call\n\
    \    return 1 + fizz_buzz(n/11)\n                         ^\n                \
    \         n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let x = n\n    var b = 0\n    var f = 0\n    var i = 0\n\
    \    repeat {\n        i += 1\n        if i % 11 == 0 {\n            b++\n   \
    \     }\n        if i % 13 == 0 {\n            b += 2\n        }\n        if b\
    \ == 0 {\n            b += n\n        }\n        if b >= x {\n            break\n\
    \        }\n        if n % b == 0 {\n            f++\n        }\n    } while b\
    \ < x\n    return f\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpgv__y85g.swift:17:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            b++\n             ^~\n/tmp/tmpgv__y85g.swift:29:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  f++\n             ^~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return fizz_buzz_n_times(n, 7)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpbnuvle0f.swift:10:12: error: cannot find 'fizz_buzz_n_times' in\
    \ scope\n    return fizz_buzz_n_times(n, 7)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return count_digits(n, \"777\", 13)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpo5u29ea0.swift:10:12: error: cannot find 'count_digits' in scope\n\
    \    return count_digits(n, \"777\", 13)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var result = 0\n    var digit: Int\n    for digit in 1..<n\
    \ {\n        if digit % 11 == 0 || digit % 13 == 0 {\n            result += Int(digit)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmp91fu8wxt/tmp91fu8wxt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca8bf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca88eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca88ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca88ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91fu8wxt                        0x0000560e45826478 <unavailable> + 5240

    5    libc.so.6                          0x00002b4ca8de3460 __libc_start_main +
    245

    6    tmp91fu8wxt                        0x0000560e45826129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var sum : Int = 0\n    var i : Int = 0\n    while n >= 10\
    \ {\n        i = n % 10\n        if i == 0 || i == 7 {\n            sum += i\n\
    \        }\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpnmq48t8y.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    for div in stride(from: n, through: 0,\
    \ by: -1) {\n        let mult = div % 11 == 0 ? 11 : div % 13 == 0 ? 13 : div\n\
    \        if mult == 7 {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpjnro4555/tmpjnro4555.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0929cc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09299bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09299bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09299bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnro4555                        0x0000561206d51478 <unavailable> + 5240

    5    libc.so.6                          0x00002b0929eb2460 __libc_start_main +
    245

    6    tmpjnro4555                        0x0000561206d51129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tlet digit = n % 10\n\tif digit == 7 || (digit == 9 && n % 100\
    \ != 11) || (digit == 11 && n % 100 != 13) {\n\t\treturn 0\n\t}\n\treturn 1 +\
    \ fizz_buzz(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpjz71lzn3.swift:14:23: error: missing argument label 'n:' in call\n\
    \        return 1 + fizz_buzz(n / 10)\n                             ^\n      \
    \                       n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tif n <= 0 {\n\t\treturn 0\n\t} else if n % 11 == 0 || n % 13\
    \ == 0 {\n\t\treturn 1\n\t} else if n < 20 {\n\t\treturn fizz_buzz(n - 1) * 5\
    \ + fizz_buzz(n - 7)\n\t} else if n < 100 {\n\t\treturn fizz_buzz(n - 2) * 5 +\
    \ fizz_buzz(n - 6) * 3 + fizz_buzz(n - 9) * 3\n\t} else if n < 1000 {\n\t\treturn\
    \ fizz_buzz(n - 4) * 10 + fizz_buzz(n - 8) * 3 + fizz_buzz(n - 12) * 3 + fizz_buzz(n\
    \ - 15) * 3\n\t} else if n < 1000000000000 {\n\t\treturn fizz_buzz(n - 8) * 10\
    \ + fizz_buzz(n - 16) * 30 + fizz_buzz(n - 24) * 30 + fizz_buzz(n - 32) * 30 +\
    \ fizz_buzz(n - 40) * 30 + fizz_buzz(n - 48) * 30 + fizz_buzz(n - 56) * 30 + fizz_buzz(n\
    \ - 64) * 30 + fizz_buzz(n - 72) * 30 + fizz_buzz(n - 80) * 30 + fizz_buzz(n -\
    \ 88) * 30 + fizz_buzz(n - 96) * 30 + fizz_buzz(n - 104) * 30 + fizz_buzz(n -\
    \ 112) * 30 + fizz_buzz(n - 120) * 30 + fizz_buzz(n - 128) * 30 + fizz_buzz(n\
    \ - 136) * 30 + fizz_buzz(n - 144)\n\t} else {\n\t\treturn fizz_buzz(n - 16) *\
    \ 100 + fizz_buzz(n - 32) * 500 + fizz_buzz(n - 48) * 1000 + fizz_buzz(n - 64)\
    \ * 3000 + fizz_buzz(n - 80) * 30000 + fizz_buzz(n - 96) * 60000 + fizz_buzz(n\
    \ - 120) * 600000 + fizz_buzz(n - 144) * 1200000\n\t}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpl8gqjvz2.swift:15:20: error: missing argument label 'n:' in call\n\
    \                return fizz_buzz(n - 1) * 5 + fizz_buzz(n - 7)\n            \
    \                     ^\n                                 n: \n/tmp/tmpl8gqjvz2.swift:15:43:\
    \ error: missing argument label 'n:' in call\n                return fizz_buzz(n\
    \ - 1) * 5 + fizz_buzz(n - 7)\n                                              \
    \          ^\n                                                        n: \n/tmp/tmpl8gqjvz2.swift:17:20:\
    \ error: missing argument label 'n:' in call\n                return fizz_buzz(n\
    \ - 2) * 5 + fizz_buzz(n - 6) * 3 + fizz_buzz(n - 9) * 3\n                   \
    \              ^\n                                 n: \n/tmp/tmpl8gqjvz2.swift:17:43:\
    \ error: missing argument label 'n:' in call\n                return fizz_buzz(n\
    \ - 2) * 5 + fizz_buzz(n - 6) * 3 + fizz_buzz(n - 9) * 3\n                   \
    \                                     ^\n                                    \
    \                    n: \n/tmp/tmpl8gqjvz2.swift:17:66: error: missing argument\
    \ label 'n:' in call\n                return fizz_buzz(n - 2) * 5 + fizz_buzz(n\
    \ - 6) * 3 + fizz_buzz(n - 9) * 3\n                                          \
    \                                     ^\n                                    \
    \                                           n: \n/tmp/tmpl8gqjvz2.swift:19:20:\
    \ error: missing argument label 'n:' in call\n                return fizz_buzz(n\
    \ - 4) * 10 + fizz_buzz(n - 8) * 3 + fizz_buzz(n - 12) * 3 + fizz_buzz(n - 15)\
    \ * 3\n                                 ^\n                                 n:\
    \ \n/tmp/tmpl8gqjvz2.swift:19:44: error: missing argument label 'n:' in call\n\
    \                return fizz_buzz(n - 4) * 10 + fizz_buzz(n - 8) * 3 + fizz_buzz(n\
    \ - 12) * 3 + fizz_buzz(n - 15) * 3\n                                        \
    \                 ^\n                                                        \
    \ n: \n/tmp/tmpl8gqjvz2.swift:19:67: error: missing argument label 'n:' in call\n\
    \                return fizz_buzz(n - 4) * 10 + fizz_buzz(n - 8) * 3 + fizz_buzz(n\
    \ - 12) * 3 + fizz_b"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return n / 11 + n / 13\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmpwh5pmnmn/tmpwh5pmnmn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedeb0ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedeadc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedeadc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedeadc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh5pmnmn                        0x000055ce37b8d248 <unavailable> + 4680

    5    libc.so.6                          0x00002aedeb2b8460 __libc_start_main +
    245

    6    tmpwh5pmnmn                        0x000055ce37b8cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  return Int(ceil(log10(n) / log10(11.0) + 1))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmprioqtvks.swift:10:14: error: cannot find 'ceil' in scope\n  return\
    \ Int(ceil(log10(n) / log10(11.0) + 1))\n             ^~~~\n/tmp/tmprioqtvks.swift:10:19:\
    \ error: cannot find 'log10' in scope\n  return Int(ceil(log10(n) / log10(11.0)\
    \ + 1))\n                  ^~~~~\n/tmp/tmprioqtvks.swift:10:30: error: cannot\
    \ find 'log10' in scope\n  return Int(ceil(log10(n) / log10(11.0) + 1))\n    \
    \                         ^~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\
    \n    guard n >= 0 && n < 10 else {\n        return -1\n    }\n\n    let digits\
    \ = String(format: \"%u\", n)\n    \n    let indexes = digits.indices\n    \n\
    \    if digits[7] == '7' {\n        return indexes[7] + fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '9' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '8' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '6' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '5' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '4' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '3' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '2' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '1' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '0' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    return fizz_buzz(n - Int(digits.dropFirst()[7]))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpw0nok5z2.swift:22:21: error: single-quoted string literal found,\
    \ use '\"'\n    if digits[7] == '7' {\n                    ^~~\n             \
    \       \"7\"\n/tmp/tmpw0nok5z2.swift:26:21: error: single-quoted string literal\
    \ found, use '\"'\n    if digits[7] == '9' {\n                    ^~~\n      \
    \              \"9\"\n/tmp/tmpw0nok5z2.swift:30:21: error: single-quoted string\
    \ literal found, use '\"'\n    if digits[7] == '8' {\n                    ^~~\n\
    \                    \"8\"\n/tmp/tmpw0nok5z2.swift:34:21: error: single-quoted\
    \ string literal found, use '\"'\n    if digits[7] == '6' {\n                \
    \    ^~~\n                    \"6\"\n/tmp/tmpw0nok5z2.swift:38:21: error: single-quoted\
    \ string literal found, use '\"'\n    if digits[7] == '5' {\n                \
    \    ^~~\n                    \"5\"\n/tmp/tmpw0nok5z2.swift:42:21: error: single-quoted\
    \ string literal found, use '\"'\n    if digits[7] == '4' {\n                \
    \    ^~~\n                    \"4\"\n/tmp/tmpw0nok5z2.swift:46:21: error: single-quoted\
    \ string literal found, use '\"'\n    if digits[7] == '3' {\n                \
    \    ^~~\n                    \"3\"\n/tmp/tmpw0nok5z2.swift:50:21: error: single-quoted\
    \ string literal found, use '\"'\n    if digits[7] == '2' {\n                \
    \    ^~~\n                    \"2\"\n/tmp/tmpw0nok5z2.swift:54:21: error: single-quoted\
    \ string literal found, use '\"'\n    if digits[7] == '1' {\n                \
    \    ^~~\n                    \"1\"\n/tmp/tmpw0nok5z2.swift:58:21: error: single-quoted\
    \ string literal found, use '\"'\n    if digits[7] == '0' {\n                \
    \    ^~~\n                    \"0\"\n/tmp/tmpw0nok5z2.swift:18:24: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  let digits = String(format: \"%u\", n)\n                       ^~~~~~~\n  \
    \                      repeating     count: \n/tmp/tmpw0nok5z2.swift:23:39: error:\
    \ missing argument label 'n:' in call\n        return indexes[7] + fizz_buzz(n\
    \ - Int(digits.dropFirst()[7]))\n                                      ^\n   \
    \                                   n: \n/tmp/tmpw0nok5z2.swift:27:26: error:"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\treturn fizzbuzz(n).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpi3ikhxc6.swift:10:9: error: cannot find 'fizzbuzz' in scope\n \
    \       return fizzbuzz(n).count\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n == 1 {\n        return n\n    }\n\n    return\
    \ fizz_buzz(n - 1) + fizz_buzz(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp1ebzxsll.swift:14:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n - 1) + fizz_buzz(n - 3)\n                     ^\n    \
    \                 n: \n/tmp/tmp1ebzxsll.swift:14:41: error: missing argument label\
    \ 'n:' in call\n    return fizz_buzz(n - 1) + fizz_buzz(n - 3)\n             \
    \                           ^\n                                        n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n\
    \n    let limit = Int.max\n    var count = 0\n\n    for i in 0..<limit {\n   \
    \     if n % i == 0 || n % (i + 2) == 0 {\n            count += 1\n        }\n\
    \    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b8306e0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8306b01561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8306b01286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8306b0113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8306b00bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb55xe9fu                        0x000055e7b905e959 <unavailable> + 6489

    6    tmpb55xe9fu                        0x000055e7b905e2cb <unavailable> + 4811

    7    libc.so.6                          0x00002b8306ff6460 __libc_start_main +
    245

    8    tmpb55xe9fu                        0x000055e7b905dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var digits = [Int]()\n    var remainder = n\n    for i in\
    \ 1...10 {\n        if remainder % i == 0 {\n            digits.append(i)\n  \
    \          remainder /= i\n        }\n    }\n    if remainder == 0 {\n       \
    \ digits.append(0)\n    }\n    return digits.count { $0 == 7 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp9y7h5naa.swift:21:19: error: cannot call value of non-function\
    \ type 'Int'\n    return digits.count { $0 == 7 }\n                  ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return fizz_buzz_recursion(n, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpmgto659y.swift:10:12: error: cannot find 'fizz_buzz_recursion'\
    \ in scope\n    return fizz_buzz_recursion(n, 0)\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return (n - 1) % 13 == 0 ? 0 :\n           n % 11 == 0 ?\
    \ 1 :\n           fizz_buzz(n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpldmo8zqn.swift:12:22: error: missing argument label 'n:' in call\n\
    \           fizz_buzz(n - 1) / 2\n                     ^\n                   \
    \  n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tswitch n {\n\tcase 0, 3, 7, 9, 11, 13, 17:\n\t\treturn 0\n\t\
    case 2:\n\t\treturn 1\n\tdefault:\n\t\tif n > 1 {\n\t\t\treturn fizz_buzz(n: n\
    \ - 1) + 1\n\t\t}\n\t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmppihrd8uy/tmppihrd8uy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac186e7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac186b76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac186b76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac186b757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppihrd8uy                        0x000055de3139b1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ac18706b460 __libc_start_main +
    245

    6    tmppihrd8uy                        0x000055de3139ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // TODO: implement fizz_buzz\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpfnfhbgew/tmpfnfhbgew.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac368454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac36814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac36814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac36814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnfhbgew                        0x000055a1064cc233 <unavailable> + 4659

    5    libc.so.6                          0x00002ac368640460 __libc_start_main +
    245

    6    tmpfnfhbgew                        0x000055a1064cbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // Odd numbers are divisible by 11\n    if n % 2 == 1 {\n\
    \        return fizz_buzz(n / 2)\n    }\n    // Fizz Buzz test\n    if n % 3 ==\
    \ 1 {\n        return fizz_buzz(n / 3)\n    }\n    if n % 5 == 1 {\n        return\
    \ fizz_buzz(n / 5)\n    }\n    if n % 7 == 1 {\n        return fizz_buzz(n / 7)\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp5eind8pb.swift:12:26: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n / 2)\n                         ^\n               \
    \          n: \n/tmp/tmp5eind8pb.swift:16:26: error: missing argument label 'n:'\
    \ in call\n        return fizz_buzz(n / 3)\n                         ^\n     \
    \                    n: \n/tmp/tmp5eind8pb.swift:19:26: error: missing argument\
    \ label 'n:' in call\n        return fizz_buzz(n / 5)\n                      \
    \   ^\n                         n: \n/tmp/tmp5eind8pb.swift:22:26: error: missing\
    \ argument label 'n:' in call\n        return fizz_buzz(n / 7)\n             \
    \            ^\n                         n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    \n    if n % 11\
    \ == 0 || n % 13 == 0 {\n        return 1\n    }\n    \n    return fizz_buzz(n\
    \ / 10) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpymxrhuw6.swift:18:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n / 10) + 1\n                     ^\n                  \
    \   n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var num: Int = 0\n    var remainder: Int = 0\n    while n\
    \ < 100000000 {\n        remainder = (n % 10) - 3\n        num += 1\n        if\
    \ remainder == 0 {\n            num += 2\n        }\n        n /= 10\n    }\n\
    \    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp8dl55fxs.swift:18:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n % 11 {\n    case 7:\n        return n\n    case\
    \ 11:\n        return n + 1\n    case 13:\n        return n + 2\n    default:\n\
    \        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpz8lyras5/tmpz8lyras5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b608e0c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b608ddbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b608ddbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b608ddbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz8lyras5                        0x00005652e58aa2c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b608e2b2460 __libc_start_main +
    245

    6    tmpz8lyras5                        0x00005652e58a9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\
    \    return Int((n / 10).rounded(.towardsZero) * 10 + (n % 10)).fizz_buzz\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp158fij09.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Int((n / 10).rounded(.towardsZero) * 10 + (n % 10)).fizz_buzz\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014278
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return (n - 1) % 9 + 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmpro7uq6z1/tmpro7uq6z1.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb6c5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb6c2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb6c2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb6c2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpro7uq6z1                        0x0000559a83f7c248 <unavailable> + 4680

    5    libc.so.6                          0x00002afb6c7a5460 __libc_start_main +
    245

    6    tmpro7uq6z1                        0x0000559a83f7bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0;\n    while n != 0 {\n        if n % 11 ==\
    \ 0 || n % 13 == 0 {\n            count += 1\n        }\n        n /= 10\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpi4xvjx_z.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  if n < 0 || n > 100 {\n    return 0\n  }\n  if n == 0 || n\
    \ % 11 == 0 || n % 13 == 0 {\n    return 0\n  }\n  return Int(log10(n) + 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpg7x1akmc.swift:16:14: error: cannot find 'log10' in scope\n  return\
    \ Int(log10(n) + 1)\n             ^~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let count = countDigits(n)\n    return count%3 == 0\n   \
    \     || count%5 == 0\n        || count%7 == 0\n        || fizz_buzz_digits(n)\n\
    \        .contains(7)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpmclrco11.swift:10:17: error: cannot find 'countDigits' in scope\n\
    \    let count = countDigits(n)\n                ^~~~~~~~~~~\n/tmp/tmpmclrco11.swift:14:12:\
    \ error: cannot find 'fizz_buzz_digits' in scope\n        || fizz_buzz_digits(n)\n\
    \           ^~~~~~~~~~~~~~~~\n/tmp/tmpmclrco11.swift:14:9: error: cannot convert\
    \ return expression of type 'Bool' to return type 'Int'\n        || fizz_buzz_digits(n)\n\
    ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let digits = (0...9).map { String($0) }\n    let divisibleBy11\
    \ = digits.contains(String(7)%11)\n    let divisibleBy13 = digits.contains(String(7)%13)\n\
    \    return digits.count{\n        ($0 % 11) == 0 && ($0 % 13) == 0\n    } + (divisibleBy11\
    \ * divisibleBy13) as Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpl3cv40up.swift:11:41: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n    let divisibleBy11 = digits.contains(String(7)%11)\n\
    \                                        ^\n/tmp/tmpl3cv40up.swift:11:50: error:\
    \ cannot convert value of type 'Int' to expected argument type 'String'\n    let\
    \ divisibleBy11 = digits.contains(String(7)%11)\n                            \
    \                     ^\n/tmp/tmpl3cv40up.swift:12:41: error: cannot convert value\
    \ of type 'String' to expected argument type 'Int'\n    let divisibleBy13 = digits.contains(String(7)%13)\n\
    \                                        ^\n/tmp/tmpl3cv40up.swift:12:50: error:\
    \ cannot convert value of type 'Int' to expected argument type 'String'\n    let\
    \ divisibleBy13 = digits.contains(String(7)%13)\n                            \
    \                     ^\n/tmp/tmpl3cv40up.swift:13:19: error: cannot call value\
    \ of non-function type 'Int'\n    return digits.count{\n                  ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n\
    \    if n < 10 {\n        return 1\n    }\n    return fizz_buzz(n / 10) * 10 +\
    \ n % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp240__z13.swift:16:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n / 10) * 10 + n % 10\n                     ^\n        \
    \             n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n%11 == 0 || n%13 == 0 {\n        return n\n    } else\
    \ {\n        return fizz_buzz(n/10) + n%10\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpa16s7o5z.swift:13:26: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n/10) + n%10\n                         ^\n         \
    \                n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  let remainder = n % 11\n  var count = 0\n  switch remainder\
    \ {\n  case 0:\n    count += 1\n  case 1:\n    count += 1\n  case 2:\n    count\
    \ += 1\n  case 3:\n    count += 1\n  case 4:\n    count += 1\n  case 5:\n    count\
    \ += 1\n  case 6:\n    count += 1\n  case 7:\n    count += 1\n  case 8:\n    count\
    \ += 1\n  case 9:\n    count += 1\n  case 10:\n    count += 1\n  case 11:\n  \
    \  count += 1\n  case 12:\n    count += 1\n  case 13:\n    count += 1\n  }\n \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmppjbqhifc.swift:12:3: error: switch must be exhaustive\n  switch\
    \ remainder {\n  ^\n/tmp/tmppjbqhifc.swift:12:3: note: do you want to add a default\
    \ clause?\n  switch remainder {\n  ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // TODO: Write an efficient algorithm that returns the number\
    \ of integers less than n that are divisible by both 7 and 11.\n    if n % 11\
    \ == 0 || n % 13 == 0 {\n        return 0;\n    }\n    var count = 0;\n    for\
    \ number in 1...n {\n        if number % 11 == 0 && number % 13 == 0 {\n     \
    \       count += 1\n        }\n        if number % 11 == 0 || number % 13 == 0\
    \ {\n            continue\n        }\n        if number % 11 == 0 && number %\
    \ 13 == 0 {\n            count += 1\n        }\n        if number % 11 == 0 ||\
    \ number % 13 == 0 {\n            continue\n        }\n        if number % 11\
    \ == 0 && number % 13 == 0 {\n            count += 1\n        }\n        if number\
    \ % 11 == 0 || number % 13 == 0 {\n            continue\n        }\n        if\
    \ number % 11 == 0 && number % 13 == 0 {\n            count += 1\n        }\n\
    \        if number % 11 == 0 || number % 13 == 0 {\n            continue\n   \
    \     }\n        if number % 11 == 0 && number % 13 == 0 {\n            count\
    \ += 1\n        }\n        if number % 11 == 0 || number % 13 == 0 {\n       \
    \     continue\n        }\n        if number % 11 == 0 && number % 13 == 0 {\n\
    \            count += 1\n        }\n        if number % 11 == 0 || number % 13\
    \ == 0 {\n            continue\n        }\n        if number % 11 == 0 && number\
    \ % 13 == 0 {\n            count += 1\n        }\n        if number % 11 == 0\
    \ || number % 13 == 0 {\n            continue\n        }\n        if number %\
    \ 11 == 0 && number % 13 == 0 {\n            count += 1\n        }\n        if\
    \ number % 11 == 0 || number % 13 == 0 {\n            continue\n        }\n  \
    \      if number % 11 == 0 && number % 13 == 0 {\n            count += 1\n   \
    \     }\n        if number % 11 == 0 || number % 13 == 0 {\n            continue\n\
    \        }\n        if number % 11 == 0 && number % 13 == 0 {\n            count\
    \ += 1\n        }\n        if number % 11 == 0 || number % 13 == 0 {\n       \
    \     continue\n        }\n        if number % 11 == 0 && number % 13 == 0 {\n\
    \            count += 1\n        }\n        if number % 11 == 0 || number % 13\
    \ == 0 {\n            continue\n        }\n        if number % 11 == 0 && number\
    \ % 13 == 0 {\n            count += 1\n        }\n        if number % 11 == 0\
    \ || number % 13 == 0 {\n            continue\n        }\n        if number %\
    \ 11 == 0 && number % 13 == 0 {\n            count += 1\n        }\n        if\
    \ number % 11 == 0 || number % 13 == 0 {\n            continue\n        }\n  \
    \      if number % 11 == 0 && number % 13 == 0 {\n            count += 1\n   \
    \     }\n        if number % 11 == 0 || number % 13 == 0 {\n            continue\n\
    \        }\n        if number \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp0axrqcnw.swift:100:18: error: expected '{' after 'if' condition\n\
    \        if number \n                 ^\n/tmp/tmp0axrqcnw.swift:123:37: error:\
    \ expected '}' at end of brace statement\nassert(fizz_buzz(n: 100000) == 8026)\n\
    \                                    ^\n/tmp/tmp0axrqcnw.swift:9:31: note: to\
    \ match this opening '{'\nfunc fizz_buzz(n: Int) -> Int {\n                  \
    \            ^\n/tmp/tmp0axrqcnw.swift:100:12: error: type 'Int' cannot be used\
    \ as a boolean; test for '!= 0' instead\n        if number \n           ^\n  \
    \         (      != 0)\n/tmp/tmp0axrqcnw.swift:104:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = n\n    for _ in 1...n {\n        count = count/11\
    \ + count/13\n    }\n    if n > 11 && n < 50 {\n        count++\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp3igx2zqg.swift:15:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        count++\n             ^~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // TODO: fill this in!\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmphvpyw2ce/tmphvpyw2ce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04cb6b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04cb3afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04cb3af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04cb3ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvpyw2ce                        0x000055582f56a233 <unavailable> + 4659

    5    libc.so.6                          0x00002b04cb8a4460 __libc_start_main +
    245

    6    tmphvpyw2ce                        0x000055582f569e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n % 10 {\n    case 7, 11, 13:\n        return n *\
    \ 3\n    default:\n        return n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmp8j2spv6t/tmp8j2spv6t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac779355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac77904cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac77904c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac77904b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8j2spv6t                        0x0000560eec689248 <unavailable> + 4680

    5    libc.so.6                          0x00002ac779541460 __libc_start_main +
    245

    6    tmp8j2spv6t                        0x0000560eec688ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let digits = String(digits(n))\n    guard digits.count >=\
    \ 3 else { return 0 }\n    let digit7Index = digits.index( where: {$0 == 7})\n\
    \    let numMultipleOf11Or13 = (digits[digit7Index - 1] == \"1\") || (digits[digit7Index\
    \ - 2] == \"1\")\n    if numMultipleOf11Or13 {\n        let remainder = n % 10\n\
    \        return remainder + fizz_buzz(Int(n/10))\n    }\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpp4n6azjz.swift:10:25: error: use of local variable 'digits' before\
    \ its declaration\n    let digits = String(digits(n))\n                      \
    \  ^\n/tmp/tmpp4n6azjz.swift:10:9: note: 'digits' declared here\n    let digits\
    \ = String(digits(n))\n        ^\n/tmp/tmpp4n6azjz.swift:16:38: error: missing\
    \ argument label 'n:' in call\n        return remainder + fizz_buzz(Int(n/10))\n\
    \                                     ^\n                                    \
    \ n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\
    \n    return Int(log10(n) + 1).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpfx8nnlby.swift:14:16: error: cannot find 'log10' in scope\n   \
    \ return Int(log10(n) + 1).count\n               ^~~~~\n/tmp/tmpfx8nnlby.swift:14:30:\
    \ error: value of type 'Int' has no member 'count'\n    return Int(log10(n) +\
    \ 1).count\n           ~~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return fizz_buzz_seq(n, &is_divisible_by_11)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpbqof1hx_.swift:10:12: error: cannot find 'fizz_buzz_seq' in scope\n\
    \    return fizz_buzz_seq(n, &is_divisible_by_11)\n           ^~~~~~~~~~~~~\n\
    /tmp/tmpbqof1hx_.swift:10:30: error: cannot find 'is_divisible_by_11' in scope\n\
    \    return fizz_buzz_seq(n, &is_divisible_by_11)\n                          \
    \   ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\treturn countDigits(n, \"7\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpefqdpepi.swift:10:9: error: cannot find 'countDigits' in scope\n\
    \        return countDigits(n, \"7\")\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let base = n / 11\n    return base.flatMap { n -> Int in\n\
    \        return Int(n % 11) == 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpa6nvvsi7.swift:11:17: error: value of type 'Int' has no member\
    \ 'flatMap'\n    return base.flatMap { n -> Int in\n           ~~~~ ^~~~~~~\n\
    /tmp/tmpa6nvvsi7.swift:11:32: error: declared closure result 'Int' is incompatible\
    \ with return type 'Bool'\n    return base.flatMap { n -> Int in\n           \
    \                    ^~~\n                               Bool\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = n\n    repeat\n        count = count / 11\n \
    \       if count % 11 == 0 || count % 13 == 0 {\n            count += 1\n    \
    \    }\n    until (n % 11 == 0 || n % 13 == 0)\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp16ll0v8d.swift:11:11: error: expected '{' after 'repeat'\n    repeat\n\
    \          ^\n/tmp/tmp16ll0v8d.swift:11:5: error: expected 'while' after body\
    \ of 'repeat' statement\n    repeat\n    ^\n/tmp/tmp16ll0v8d.swift:16:5: error:\
    \ cannot find 'until' in scope\n    until (n % 11 == 0 || n % 13 == 0)\n    ^~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tvar count = 0\n\trepeatWhile {\n\t\tif n > 7 {\n\t\t\treturn\
    \ count\n\t\t}\n\t\tif n % 11 == 0 || n % 13 == 0 {\n\t\t\tcount += 1\n\t\t}\n\
    \t\tn = n/10\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpxvz1i80w.swift:11:2: error: cannot find 'repeatWhile' in scope\n\
    \        repeatWhile {\n        ^~~~~~~~~~~\n/tmp/tmpxvz1i80w.swift:18:3: error:\
    \ cannot assign to value: 'n' is a 'let' constant\n                n = n/10\n\
    \                ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let r = n % 11\n    let m = n % 13\n    var count = 0\n \
    \   while n > 0 {\n        if n % 11 == m {\n            count += 1\n        }\n\
    \        n = n / 11\n        m = m / 13\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpm_jz9fmb.swift:17:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 11\n        ^\n/tmp/tmpm_jz9fmb.swift:18:9: error:\
    \ cannot assign to value: 'm' is a 'let' constant\n        m = m / 13\n      \
    \  ^\n/tmp/tmpm_jz9fmb.swift:11:5: note: change 'let' to 'var' to make it mutable\n\
    \    let m = n % 13\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpwjcqi0kz/tmpwjcqi0kz.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba893449c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba893140b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba893140988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89313f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjcqi0kz                        0x0000562871c06233 <unavailable> + 4659

    5    libc.so.6                          0x00002ba893635460 __libc_start_main +
    245

    6    tmpwjcqi0kz                        0x0000562871c05e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013899
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    defer { n -= 10 }\n    switch n % 10 {\n    case 7, 8, 9,\
    \ 1, 4, 6, 2, 5:\n        return 1 + fizz_buzz(n / 10)\n    case 3, 6:\n     \
    \   return 1 + fizz_buzz(n / 10)\n    default:\n        return fizz_buzz(n / 10)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpnpn_h4oe.swift:10:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n    defer { n -= 10 }\n            ~ ^\n/tmp/tmpnpn_h4oe.swift:13:30:\
    \ error: missing argument label 'n:' in call\n        return 1 + fizz_buzz(n /\
    \ 10)\n                             ^\n                             n: \n/tmp/tmpnpn_h4oe.swift:15:30:\
    \ error: missing argument label 'n:' in call\n        return 1 + fizz_buzz(n /\
    \ 10)\n                             ^\n                             n: \n/tmp/tmpnpn_h4oe.swift:17:26:\
    \ error: missing argument label 'n:' in call\n        return fizz_buzz(n / 10)\n\
    \                         ^\n                         n: \n/tmp/tmpnpn_h4oe.swift:14:13:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n    case 3, 6:\n            ^\n/tmp/tmpnpn_h4oe.swift:12:25: note: first\
    \ occurrence of identical literal pattern is here\n    case 7, 8, 9, 1, 4, 6,\
    \ 2, 5:\n                        ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return n.filter { Int($0 % 11) == 0 || Int($0 % 13) == 0\
    \ }\n        .count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp9ch9qfqx.swift:10:14: error: value of type 'Int' has no member\
    \ 'filter'\n    return n.filter { Int($0 % 11) == 0 || Int($0 % 13) == 0 }\n \
    \          ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var fizzbuzz = 0\n    \n    if n % 11 == 0 || n % 13 == 0\
    \ {\n        fizzbuzz += 1\n    }\n    \n    for var i = 11; i <= n; i++ {\n \
    \       if i % 11 == 0 || i % 13 == 0 {\n            fizzbuzz += 1\n        }\n\
    \    }\n    \n    return fizzbuzz\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpm4o4ybax.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 11; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n % 10 {\n    case 7, 8, 9, 10, 11:\n        return\
    \ 0;\n    case 12:\n        return 1;\n    case 13:\n        return 2;\n    default:\n\
    \        return 3;\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpcokxm051/tmpcokxm051.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af126ba5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af12689cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af12689c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af12689b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcokxm051                        0x000055c059218248 <unavailable> + 4680

    5    libc.so.6                          0x00002af126d91460 __libc_start_main +
    245

    6    tmpcokxm051                        0x000055c059217ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n\
    \    return fizz_buzz_helper(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpxkroeokp.swift:13:12: error: cannot find 'fizz_buzz_helper' in\
    \ scope\n    return fizz_buzz_helper(n)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  var count = 0\n  for d in 1...n {\n    if d == 7 && n % 11\
    \ == 0 || d == 7 && n % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp60xcpl9j/tmp60xcpl9j.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5449144c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5448e3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5448e3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5448e3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60xcpl9j                        0x00005601406633b3 <unavailable> + 5043

    5    libc.so.6                          0x00002b5449330460 __libc_start_main +
    245

    6    tmp60xcpl9j                        0x0000560140662fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count: [Int] = [0..<100]\n    for digit in count {\n\
    \        if n / digit % 11 == 0 || n / digit % 13 == 0 {\n            return count[digit]\n\
    \        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpupex65cu.swift:10:26: error: cannot convert value of type 'Range<Int>'\
    \ to expected element type 'Int'\n    var count: [Int] = [0..<100]\n         \
    \                ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  let digit7 = digit7Digits(n: n)\n  if digit7 == nil {\n   \
    \ return n\n  }\n  return digit7!.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpuiq5emvd.swift:10:16: error: cannot find 'digit7Digits' in scope\n\
    \  let digit7 = digit7Digits(n: n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n%11==0 || n%13==0 {\n        return n%11==0 || n%13==0\
    \ ? 0 : n%11==0 ? 1 : n%13==0 ? 2 : 3\n    }\n    return n%11==0 ? 1 : n%13==0\
    \ ? 2 : 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmprbr_sln4/tmprbr_sln4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24f800ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24f7d01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24f7d01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24f7d007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbr_sln4                        0x0000557224672248 <unavailable> + 4680

    5    libc.so.6                          0x00002b24f81f6460 __libc_start_main +
    245

    6    tmprbr_sln4                        0x0000557224671ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n {\n    case 0..<1:\n        return 0\n    case 1...<11:\n\
    \        return 1\n    case 11...<13:\n        return 2\n    case 13...<23:\n\
    \        return 3\n    case 23...<31:\n        return 4\n    case 31...<39:\n\
    \        return 5\n    case 39...<47:\n        return 6\n    case 47...<55:\n\
    \        return 7\n    case 55...<63:\n        return 8\n    case 63...<71:\n\
    \        return 9\n    case 71...<79:\n        return 10\n    case 79...<87:\n\
    \        return 11\n    case 87...<99:\n        return 12\n    case 99...<111:\n\
    \        return 13\n    case 111...<129:\n        return 14\n    case 129...<143:\n\
    \        return 15\n    case 143...<151:\n        return 16\n    case 151...<159:\n\
    \        return 17\n    case 159...<161:\n        return 18\n    case 161...<163:\n\
    \        return 19\n    case 163...<165:\n        return 20\n    case 165...<167:\n\
    \        return 21\n    case 167...<169:\n        return 22\n    case 169...<171:\n\
    \        return 23\n    case 171...<173:\n        return 24\n    case 173...<175:\n\
    \        return 25\n    case 175...<177:\n        return 26\n    case 177...<179:\n\
    \        return 27\n    case 179...<181:\n        return 28\n    case 181...<183:\n\
    \        return 29\n    case 183...<185:\n        return 30\n    case 185...<187:\n\
    \        return 31\n    case 187...<189:\n        return 32\n    case 189...<191:\n\
    \        return 33\n    case 191...<193:\n        return 34\n    case 193...<195:\n\
    \        return 35\n    case 195...<197:\n        return 36\n    case 197...<199:\n\
    \        return 37\n    case 199...<201:\n        return 38\n    case 201...<203:\n\
    \        return 39\n    case 203...<205:\n        return 40\n    case 205...<207:\n\
    \        return 41\n    case 207...<209:\n        return 42\n    case 209...<211:\n\
    \        return 43\n    case 211...<213:\n        return 44\n    case 213...<215:\n\
    \        return 45\n    case 215...<217:\n        return 46\n    case 217...<219:\n\
    \        return 47\n    case 219...<221:\n        return 48\n    case 221...<223:\n\
    \        return 49\n    case 223\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpaczkv7rq.swift:111:13: error: expected ':' after 'case'\n    case\
    \ 223\n            ^\n/tmp/tmpaczkv7rq.swift:134:37: error: expected '}' at end\
    \ of brace statement\nassert(fizz_buzz(n: 100000) == 8026)\n                 \
    \                   ^\n/tmp/tmpaczkv7rq.swift:9:31: note: to match this opening\
    \ '{'\nfunc fizz_buzz(n: Int) -> Int {\n                              ^\n/tmp/tmpaczkv7rq.swift:13:11:\
    \ error: cannot find operator '...<' in scope; did you mean '..<'?\n    case 1...<11:\n\
    \          ^~~~\n          ..<\n/tmp/tmpaczkv7rq.swift:15:12: error: cannot find\
    \ operator '...<' in scope; did you mean '..<'?\n    case 11...<13:\n        \
    \   ^~~~\n           ..<\n/tmp/tmpaczkv7rq.swift:17:12: error: cannot find operator\
    \ '...<' in scope; did you mean '..<'?\n    case 13...<23:\n           ^~~~\n\
    \           ..<\n/tmp/tmpaczkv7rq.swift:19:12: error: cannot find operator '...<'\
    \ in scope; did you mean '..<'?\n    case 23...<31:\n           ^~~~\n       \
    \    ..<\n/tmp/tmpaczkv7rq.swift:21:12: error: cannot find operator '...<' in\
    \ scope; did you mean '..<'?\n    case 31...<39:\n           ^~~~\n          \
    \ ..<\n/tmp/tmpaczkv7rq.swift:23:12: error: cannot find operator '...<' in scope;\
    \ did you mean '..<'?\n    case 39...<47:\n           ^~~~\n           ..<\n/tmp/tmpaczkv7rq.swift:25:12:\
    \ error: cannot find operator '...<' in scope; did you mean '..<'?\n    case 47...<55:\n\
    \           ^~~~\n           ..<\n/tmp/tmpaczkv7rq.swift:27:12: error: cannot\
    \ find operator '...<' in scope; did you mean '..<'?\n    case 55...<63:\n   \
    \        ^~~~\n           ..<\n/tmp/tmpaczkv7rq.swift:29:12: error: cannot find\
    \ operator '...<' in scope; did you mean '..<'?\n    case 63...<71:\n        \
    \   ^~~~\n           ..<\n/tmp/tmpaczkv7rq.swift:31:12: error: cannot find operator\
    \ '...<' in scope; did you mean '..<'?\n    case 71...<79:\n           ^~~~\n\
    \           ..<\n/tmp/tmpaczkv7rq.swift:33:12: error: cannot find operator '...<'\
    \ in scope; did you mean '..<'?\n    case 79...<87:\n           ^~~~\n       \
    \    ..<\n/tmp/tmpaczkv7rq.swift:35:12: error: cannot find operator '...<' in\
    \ scope; did you mean "
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let result: Int\n    switch n % 10 {\n    case 7, 7, 7:\n\
    \        result = 1\n    default:\n        result = 0\n    }\n    return 1 + fizz_buzz(Int(n)/10)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpl9o0p97f.swift:12:13: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n    case 7, 7, 7:\n            ^\n\
    /tmp/tmpl9o0p97f.swift:12:10: note: first occurrence of identical literal pattern\
    \ is here\n    case 7, 7, 7:\n         ^\n/tmp/tmpl9o0p97f.swift:12:16: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \    case 7, 7, 7:\n               ^\n/tmp/tmpl9o0p97f.swift:12:10: note: first\
    \ occurrence of identical literal pattern is here\n    case 7, 7, 7:\n       \
    \  ^\n/tmp/tmpl9o0p97f.swift:17:26: error: missing argument label 'n:' in call\n\
    \    return 1 + fizz_buzz(Int(n)/10)\n                         ^\n           \
    \              n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var result = 1\n\n    if n % 11 == 0 { result *= 11\n   \
    \ } else if n % 13 == 0 { result *= 13 }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp736nm9z6/tmp736nm9z6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17513cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17510c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17510c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17510c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp736nm9z6                        0x000055ff60038248 <unavailable> + 4680

    5    libc.so.6                          0x00002b17515b9460 __libc_start_main +
    245

    6    tmp736nm9z6                        0x000055ff60037ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n % 11 {\n    case 0: return 0\n    case 1: return\
    \ 1\n    case 2: return 2\n    case 3: return 3\n    case 4: return 4\n    case\
    \ 5: return 5\n    case 6: return 6\n    case 7: return 7\n    case 8: return\
    \ 8\n    case 9: return 9\n    case 10: return 10\n    case 11: return 11\n  \
    \  case 12: return 12\n    case 13: return 13\n    case 14: return 14\n    case\
    \ 15: return 15\n    case 16: return 16\n    case 17: return 17\n    case 18:\
    \ return 18\n    case 19: return 19\n    case 20: return 20\n    case 21: return\
    \ 21\n    case 22: return 22\n    case 23: return 23\n    case 24: return 24\n\
    \    case 25: return 25\n    case 26: return 26\n    case 27: return 27\n    case\
    \ 28: return 28\n    case 29: return 29\n    case 30: return 30\n    case 31:\
    \ return 31\n    case 32: return 32\n    case 33: return 33\n    case 34: return\
    \ 34\n    case 35: return 35\n    case 36: return 36\n    case 37: return 37\n\
    \    case 38: return 38\n    case 39: return 39\n    case 40: return 40\n    case\
    \ 41: return 41\n    case 42: return 42\n    case 43: return 43\n    case 44:\
    \ return 44\n    case 45: return 45\n    case 46: return 46\n    case 47: return\
    \ 47\n    case 48: return 48\n    case 49: return 49\n    case 50: return 50\n\
    \    case 51: return 51\n    case 52: return 52\n    case 53: return 53\n    case\
    \ 54: return 54\n    case 55: return 55\n    case 56: return 56\n    case 57:\
    \ return 57\n    case 58: return 58\n    case 59: return 59\n    case 60: return\
    \ 60\n    case 61: return 61\n    case 62: return 62\n    case 63: return 63\n\
    \    case 64: return 64\n    case 65: return 65\n    case 66: return 66\n    case\
    \ 67: return 67\n    case 68: return 68\n    case 69: return 69\n    case 70:\
    \ return 70\n    case 71: return 71\n    case 72: return 72\n    case 73: return\
    \ 73\n    case 74: return 74\n    case 75: return 75\n    case 76: return 76\n\
    \    case 77: return 77\n    case 78: return 78\n    case 79: return 79\n    case\
    \ 80: return 80\n    case 81: return 81\n    case 82: return 82\n    case 83:\
    \ return 83\n    case 84: return 84\n    case 85: return 85\n    case 86: return\
    \ 86\n    case 87: return 87\n    case 88: return 88\n    case 89: return 89\n\
    \    case 90: return 90\n    case 91: return 91\n    case 92: return 92\n    case\
    \ 93: return 93\n    case 94: return 94\n    case 95: return 95\n    case 96:\
    \ return 96\n    case 97: return 97\n    case 98: return 98\n    case 99: return\
    \ 99\n    case 100\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpico7fqe2.swift:111:13: error: expected ':' after 'case'\n    case\
    \ 100\n            ^\n/tmp/tmpico7fqe2.swift:134:37: error: expected '}' at end\
    \ of brace statement\nassert(fizz_buzz(n: 100000) == 8026)\n                 \
    \                   ^\n/tmp/tmpico7fqe2.swift:9:31: note: to match this opening\
    \ '{'\nfunc fizz_buzz(n: Int) -> Int {\n                              ^\n/tmp/tmpico7fqe2.swift:10:5:\
    \ error: switch must be exhaustive\n    switch n % 11 {\n    ^\n/tmp/tmpico7fqe2.swift:10:5:\
    \ note: do you want to add a default clause?\n    switch n % 11 {\n    ^\n/tmp/tmpico7fqe2.swift:115:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n <= 0 || n % 11 == 0 || n % 13 == 0 {\n        return\
    \ 0\n    }\n    return fizz_buzz(n/10) + fizz_buzz(n%10)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp4r625dr2.swift:13:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n/10) + fizz_buzz(n%10)\n                     ^\n      \
    \               n: \n/tmp/tmp4r625dr2.swift:13:40: error: missing argument label\
    \ 'n:' in call\n    return fizz_buzz(n/10) + fizz_buzz(n%10)\n               \
    \                        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    \n    for i in 1 ..< n {\n        count\
    \ += (n % 10 == 7) && (n / 10 % 11 != 0) && (n / 100 % 13 != 0)\n    }\n    \n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpwgvffas9.swift:13:54: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        count += (n % 10 == 7) && (n / 10 %\
    \ 11 != 0) && (n / 100 % 13 != 0)\n                                          \
    \           ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n % 3 {\n    case 0:\n        return n + 1\n    case\
    \ 1:\n        return 2 * n + 1\n    default:\n        return 3 * n + 2\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpmmchebom/tmpmmchebom.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b564d23ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b564cf35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b564cf35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b564cf347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmchebom                        0x0000557e667e7248 <unavailable> + 4680

    5    libc.so.6                          0x00002b564d42a460 __libc_start_main +
    245

    6    tmpmmchebom                        0x0000557e667e6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  var count = 0\n\n  for i : Int in 0..<n {\n    if i % 11 ==\
    \ 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n\n  return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpd3kwq_h2/tmpd3kwq_h2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aced0c93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aced098ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aced098a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aced09897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3kwq_h2                        0x00005617d5466338 <unavailable> + 4920

    5    libc.so.6                          0x00002aced0e7f460 __libc_start_main +
    245

    6    tmpd3kwq_h2                        0x00005617d5465fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  let n = n as Int\n  // 1 -> 11\n  // 2 -> 13\n  // 3 -> 7\n\
    \  let x: (Int) -> Int = { (n: Int) -> Int in\n    if n > 13 {\n      return 7\n\
    \    } else {\n      if n % 11 == 0 {\n        return 1\n      } else {\n    \
    \    return 2\n      }\n    }\n  }\n  return n(10)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp5waru9am.swift:25:10: error: cannot call value of non-function\
    \ type 'Int'\n  return n(10)\n         ^\n"
  stdout: ''
  timestamp: 1660014248
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp8cyisgy4/tmp8cyisgy4.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5adcaf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5adc7eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5adc7ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5adc7e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cyisgy4                        0x0000565201bdb233 <unavailable> + 4659

    5    libc.so.6                          0x00002b5adccdf460 __libc_start_main +
    245

    6    tmp8cyisgy4                        0x0000565201bdae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013789
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // Write your code here.\n    var result = 0\n    var temp\
    \ = n\n    repeat {\n        result += (n%10)/10 \n        temp /= 10\n    } while\
    \ temp != 0\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpbdz0beux/tmpbdz0beux.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada85242c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada84f39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada84f39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada84f387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdz0beux                        0x000055aea99832c3 <unavailable> + 4803

    5    libc.so.6                          0x00002ada8542e460 __libc_start_main +
    245

    6    tmpbdz0beux                        0x000055aea9982ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var result = 0\n    if n % 11 == 0 || n % 13 == 0 {\n   \
    \     result = 1\n    }\n    if n > 0 {\n        if n % 10 == 7 {\n          \
    \  result += 0\n        } else if n % 10 == 0 {\n            result += 0\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmphl6btiyt/tmphl6btiyt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca16a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphl6btiyt                        0x00005638576642c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b8ca1890460 __libc_start_main +
    245

    6    tmphl6btiyt                        0x0000563857663ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n == 1 {\n        return n\n    }\n\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        return fizz_buzz(n - 1)\n    }\n\n   \
    \ return fizz_buzz(n - 1) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpen4j54ch.swift:15:26: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n - 1)\n                         ^\n               \
    \          n: \n/tmp/tmpen4j54ch.swift:18:22: error: missing argument label 'n:'\
    \ in call\n    return fizz_buzz(n - 1) + 1\n                     ^\n         \
    \            n: \n"
  stdout: ''
  timestamp: 1660014248
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tif n > 40 {\n\t\treturn 0\n\t}\n\n\tif n == 0 || n == 1 {\n\
    \t\treturn n\n\t}\n\n\tif n % 11 == 0 || n % 13 == 0 {\n\t\treturn n\n\t}\n\n\t\
    return fizz_buzz(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp16xxo9l4.swift:22:19: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n - 1)\n                         ^\n               \
    \          n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n\
    \    \n    return fizz_buzz(n/11) + fizz_buzz(n/13)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpc8m49gsa.swift:14:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n/11) + fizz_buzz(n/13)\n                     ^\n      \
    \               n: \n/tmp/tmpc8m49gsa.swift:14:40: error: missing argument label\
    \ 'n:' in call\n    return fizz_buzz(n/11) + fizz_buzz(n/13)\n               \
    \                        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var result = 0\n\n    for number in 1...n {\n        if number\
    \ % 11 == 0 || number % 13 == 0 {\n            result++\n        }\n    }\n\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpp76gcpml.swift:14:19: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            result++\n                  ^~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var result = 0\n    var remainder = n\n    while remainder\
    \ > 0 {\n        remainder = remainder / 10\n        result = result + Int(remainder)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpt9q1v_os/tmpt9q1v_os.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a7c215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7bf0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7bf0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7bf0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9q1v_os                        0x000055cc98bab378 <unavailable> + 4984

    5    libc.so.6                          0x00002b5a7c401460 __libc_start_main +
    245

    6    tmpt9q1v_os                        0x000055cc98bab029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n >= 1 && n <= 200000000 else {\n        return -1\n\
    \    }\n    \n    var answer = 0\n    \n    if n%11 == 0 {\n        answer +=\
    \ 1\n    }\n    \n    if n%13 == 0 {\n        answer += 1\n    }\n    \n    return\
    \ answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmprhyjfrgx/tmprhyjfrgx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5de10dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5dde04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5dde04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5dde037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhyjfrgx                        0x0000558c0ec6e2c3 <unavailable> + 4803

    5    libc.so.6                          0x00002ab5de2f9460 __libc_start_main +
    245

    6    tmprhyjfrgx                        0x0000558c0ec6def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return\
    \ 4\n    }\n    if n == 5 {\n        return 5\n    }\n    if n == 6 {\n      \
    \  return 6\n    }\n    if n == 7 {\n        return 7\n    }\n    if n == 8 {\n\
    \        return 8\n    }\n    if n == 9 {\n        return 9\n    }\n    if n ==\
    \ 10 {\n        return 10\n    }\n    if n == 11 {\n        return 11\n    }\n\
    \    if n == 12 {\n        return 12\n    }\n    if n == 13 {\n        return\
    \ 13\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp5rlt_3dk/tmp5rlt_3dk.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ba5ecec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ba5bc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ba5bc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ba5bc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rlt_3dk                        0x0000556306bdc2c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b0ba60ba460 __libc_start_main +
    245

    6    tmp5rlt_3dk                        0x0000556306bdbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    for i in 1...n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpavohhgan/tmpavohhgan.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acefa7e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acefa4dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acefa4dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acefa4db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavohhgan                        0x0000560d915bc338 <unavailable> + 4920

    5    libc.so.6                          0x00002acefa9d1460 __libc_start_main +
    245

    6    tmpavohhgan                        0x0000560d915bbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 1\n    if n < 0 || n > 1000 || n % 11 != 0 ||\
    \ n % 13 != 0 {\n        return count\n    }\n    for i in 0..<n / 10 {\n    \
    \    if i % 10 == 7 { count += 1}\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpdb6l0_pg/tmpdb6l0_pg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b8686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b837db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b837d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b837c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdb6l0_pg                        0x0000555c82725338 <unavailable> + 4920

    5    libc.so.6                          0x00002b65b8872460 __libc_start_main +
    245

    6    tmpdb6l0_pg                        0x0000555c82724fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  if n == 0 || n == 1 || n % 11 == 0 || n % 13 == 0 {\n    return\
    \ n\n  }\n  return fizz_buzz(n-1) + fizz_buzz(n-1) + fizz_buzz(n-2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpgr3gyb5d.swift:13:20: error: missing argument label 'n:' in call\n\
    \  return fizz_buzz(n-1) + fizz_buzz(n-1) + fizz_buzz(n-2)\n                 \
    \  ^\n                   n: \n/tmp/tmpgr3gyb5d.swift:13:37: error: missing argument\
    \ label 'n:' in call\n  return fizz_buzz(n-1) + fizz_buzz(n-1) + fizz_buzz(n-2)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpgr3gyb5d.swift:13:54: error: missing argument label 'n:' in call\n\
    \  return fizz_buzz(n-1) + fizz_buzz(n-1) + fizz_buzz(n-2)\n                 \
    \                                    ^\n                                     \
    \                n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n < 7 { return 0 }\n    if n == 7 { return 1 }\n    if\
    \ n % 11 == 0 { return 1 }\n    if n % 13 == 0 { return 2 }\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpoan1s7ab/tmpoan1s7ab.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce737ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce7071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce7071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce70707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoan1s7ab                        0x00005645c923633e <unavailable> + 4926

    5    libc.so.6                          0x00002adce7566460 __libc_start_main +
    245

    6    tmpoan1s7ab                        0x00005645c9235ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let limit = Int(pow(10, n))\n    return Int(ceil(log10(limit)))\
    \ - Int(floor(log10(limit)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpyqmw6hcx.swift:10:21: error: cannot find 'pow' in scope\n    let\
    \ limit = Int(pow(10, n))\n                    ^~~\n/tmp/tmpyqmw6hcx.swift:11:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(log10(limit))) - Int(floor(log10(limit)))\n\
    \               ^~~~\n/tmp/tmpyqmw6hcx.swift:11:21: error: cannot find 'log10'\
    \ in scope\n    return Int(ceil(log10(limit))) - Int(floor(log10(limit)))\n  \
    \                  ^~~~~\n/tmp/tmpyqmw6hcx.swift:11:42: error: cannot find 'floor'\
    \ in scope\n    return Int(ceil(log10(limit))) - Int(floor(log10(limit)))\n  \
    \                                       ^~~~~\n/tmp/tmpyqmw6hcx.swift:11:48: error:\
    \ cannot find 'log10' in scope\n    return Int(ceil(log10(limit))) - Int(floor(log10(limit)))\n\
    \                                               ^~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let mod = n % 10\n    switch mod {\n    case 0: return 0\n\
    \    case 1: return 1\n    case 2: return 2\n    case 3: return 3\n    case 4:\
    \ return 4\n    case 5: return 5\n    case 6: return 6\n    case 7: return 7\n\
    \    case 8: return 8\n    case 9: return 9\n    case 11: return 11\n    case\
    \ 13: return 13\n    case 12: return 12\n    case 14: return 14\n    case 15:\
    \ return 15\n    case 16: return 16\n    case 17: return 17\n    case 18: return\
    \ 18\n    case 19: return 19\n    case 20: return 20\n    case 21: return 21\n\
    \    case 22: return 22\n    case 23: return 23\n    case 24: return 24\n    case\
    \ 25: return 25\n    case 26: return 26\n    case 27: return 27\n    case 28:\
    \ return 28\n    case 29: return 29\n    case 30: return 30\n    case 31: return\
    \ 31\n    default: return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmpyatqale9/tmpyatqale9.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ba7ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4ba4e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4ba4e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4ba4e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyatqale9                        0x000055e51243a2c3 <unavailable> + 4803

    5    libc.so.6                          0x00002ae4ba9d7460 __libc_start_main +
    245

    6    tmpyatqale9                        0x000055e512439ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\
    \    if n % 10 == 0 {\n        return 1\n    }\n    return fizz_buzz(n - 10) +\
    \ fizz_buzz(n - 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpmi0s7w99.swift:16:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n - 10) + fizz_buzz(n - 10)\n                     ^\n  \
    \                   n: \n/tmp/tmpmi0s7w99.swift:16:42: error: missing argument\
    \ label 'n:' in call\n    return fizz_buzz(n - 10) + fizz_buzz(n - 10)\n     \
    \                                    ^\n                                     \
    \    n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // count is initialized to 1 since count <= n\n    var count\
    \ = 1\n    // while count <= n we run through each number divisible by 11 or 13\n\
    \    // and add it to count\n    while count <= n {\n        // we test if number\
    \ is divisible by 11 or 13\n        if n % 11 == 0 || n % 13 == 0 {\n        \
    \    // add 1 to count\n            count += 1\n        }\n        // we increment\
    \ the number by 1\n        n += 1\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp62aojo0o.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n >= 0 else {\n        return 0\n    }\n    \n    switch\
    \ n % 10 {\n    case 0 ... 3:\n        return fizz_buzz_0(n)\n    case 4 ... 7:\n\
    \        return fizz_buzz_1(n)\n    case 8 ... 11:\n        return fizz_buzz_2(n)\n\
    \    case 12:\n        return fizz_buzz_3(n)\n    default:\n        return fizz_buzz_4(n)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp2yafafgq.swift:16:16: error: cannot find 'fizz_buzz_0' in scope\n\
    \        return fizz_buzz_0(n)\n               ^~~~~~~~~~~\n/tmp/tmp2yafafgq.swift:18:16:\
    \ error: cannot find 'fizz_buzz_1' in scope\n        return fizz_buzz_1(n)\n \
    \              ^~~~~~~~~~~\n/tmp/tmp2yafafgq.swift:20:16: error: cannot find 'fizz_buzz_2'\
    \ in scope\n        return fizz_buzz_2(n)\n               ^~~~~~~~~~~\n/tmp/tmp2yafafgq.swift:22:16:\
    \ error: cannot find 'fizz_buzz_3' in scope\n        return fizz_buzz_3(n)\n \
    \              ^~~~~~~~~~~\n/tmp/tmp2yafafgq.swift:24:16: error: cannot find 'fizz_buzz_4'\
    \ in scope\n        return fizz_buzz_4(n)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var counter: Int = 0\n    var remainder: Int = n % 10\n\n\
    \    while remainder == 7 {\n        if n <= 13 {\n            counter = counter\
    \ + 1\n        }\n        n = n / 10\n        remainder = (n % 10)\n    }\n  \
    \  return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpkjrjpc1e.swift:17:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 10\n        ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n    if n%11\
    \ == 0 || n%13 == 0 {\n        return 1\n    }\n    if n%10 == 0 {\n        return\
    \ fizz_buzz(n/10) + 1\n    }\n    return fizz_buzz(n/10) + fizz_buzz(n%10)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpffveik96.swift:17:26: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n/10) + 1\n                         ^\n            \
    \             n: \n/tmp/tmpffveik96.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return fizz_buzz(n/10) + fizz_buzz(n%10)\n               \
    \      ^\n                     n: \n/tmp/tmpffveik96.swift:19:40: error: missing\
    \ argument label 'n:' in call\n    return fizz_buzz(n/10) + fizz_buzz(n%10)\n\
    \                                       ^\n                                  \
    \     n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var fb = n / 11\n    if fb == 0 {\n        fb = n / 13\n\
    \    }\n    if fb > 0 {\n        switch fb {\n        case 11:\n            switch\
    \ n {\n            case 11:\n                return 0\n            default:\n\
    \                return 1\n            }\n        case 13:\n            switch\
    \ n {\n            case 13:\n                return 0\n            default:\n\
    \                return 1\n            }\n        default:\n            return\
    \ fb\n        }\n    } else {\n        return fb\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp3is1umw3/tmp3is1umw3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c58b42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c58839b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c58839988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c588387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3is1umw3                        0x0000556bb341f248 <unavailable> + 4680

    5    libc.so.6                          0x00002b4c58d2e460 __libc_start_main +
    245

    6    tmp3is1umw3                        0x0000556bb341eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return fizz_buzz_count(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmptd8bva5t.swift:10:12: error: cannot find 'fizz_buzz_count' in scope\n\
    \    return fizz_buzz_count(n)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // TODO: This can be solved with binary search as well\n\
    \    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n % 11 == 0 {\n  \
    \      return n\n    }\n    if n == 2 || n % 13 == 0 {\n        return n\n   \
    \ }\n    if n % 11 == 0 && n % 13 == 0 {\n        return n\n    }\n    return\
    \ fizz_buzz(n / 10) + fizz_buzz(n / 10) * 10\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmprgsjwn_g.swift:23:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n / 10) + fizz_buzz(n / 10) * 10\n                     ^\n\
    \                     n: \n/tmp/tmprgsjwn_g.swift:23:42: error: missing argument\
    \ label 'n:' in call\n    return fizz_buzz(n / 10) + fizz_buzz(n / 10) * 10\n\
    \                                         ^\n                                \
    \         n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    \n    if n == 0 || n == 1 {\n        return n\n    }\n  \
    \  \n    if n % 11 == 0 || n % 13 == 0 {\n        return fizz_buzz(n - 1) + fizz_buzz(n\
    \ - 3)\n    }\n    \n    return fizz_buzz(n - 1) + fizz_buzz(n - 3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmps7r23qzj.swift:16:26: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n - 1) + fizz_buzz(n - 3)\n                        \
    \ ^\n                         n: \n/tmp/tmps7r23qzj.swift:16:45: error: missing\
    \ argument label 'n:' in call\n        return fizz_buzz(n - 1) + fizz_buzz(n -\
    \ 3)\n                                            ^\n                        \
    \                    n: \n/tmp/tmps7r23qzj.swift:19:22: error: missing argument\
    \ label 'n:' in call\n    return fizz_buzz(n - 1) + fizz_buzz(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmps7r23qzj.swift:19:41: error:\
    \ missing argument label 'n:' in call\n    return fizz_buzz(n - 1) + fizz_buzz(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp0co1qqjp/tmp0co1qqjp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a5f2c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a5efbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a5efbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a5efbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0co1qqjp                        0x000055aa4e7f02c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b8a5f4b4460 __libc_start_main +
    245

    6    tmp0co1qqjp                        0x000055aa4e7efef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // Count how many times 7 appears in integers less than n\
    \ which are divisible by 11 or 13.\n    let count = Int(log2(Double(n))) + 1\n\
    \    let remainder = n - (2 * count)\n    \n    // If the remainder is divisible\
    \ by 11 or 13, replace it by 12.\n    return ((count & 1) == 0) ? (12 * (count\
    \ >> 1)) + (remainder & 1) : count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmphu83s2no.swift:11:21: error: cannot find 'log2' in scope\n    let\
    \ count = Int(log2(Double(n))) + 1\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let num: Int = Int(n)\n    var fizzbuzz: Int = 0\n    if\
    \ num%13 == 0 {\n        fizzbuzz += 1\n    }\n    if num%11 == 0 {\n        fizzbuzz\
    \ += 1\n    }\n    if fizzbuzz > 0 {\n        fizzbuzz += 1\n    }\n    if fizzbuzz\
    \ > 1 {\n        fizzbuzz += 1\n    }\n    if fizzbuzz > 2 {\n        fizzbuzz\
    \ += 1\n    }\n    if fizzbuzz > 3 {\n        fizzbuzz += 1\n    }\n    return\
    \ fizzbuzz\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpu8uzzmn6/tmpu8uzzmn6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4913a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae491098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae491098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4910977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8uzzmn6                        0x000055cd56bfb3f3 <unavailable> + 5107

    5    libc.so.6                          0x00002ae49158d460 __libc_start_main +
    245

    6    tmpu8uzzmn6                        0x000055cd56bfb029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n%11 == 0 || n%13 == 0 {\n        return 1\n    }\n  \
    \  if n >= 100 {\n        return fizz_buzz(n/100)*10 + n % 10\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
    \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmplphqvwp9.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n/100)*10 + n % 10\n                         ^\n   \
    \                      n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return count_digits(n) - count_digits(n%11) - count_digits(n%13)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpmeh53g5g.swift:10:12: error: cannot find 'count_digits' in scope\n\
    \    return count_digits(n) - count_digits(n%11) - count_digits(n%13)\n      \
    \     ^~~~~~~~~~~~\n/tmp/tmpmeh53g5g.swift:10:30: error: cannot find 'count_digits'\
    \ in scope\n    return count_digits(n) - count_digits(n%11) - count_digits(n%13)\n\
    \                             ^~~~~~~~~~~~\n/tmp/tmpmeh53g5g.swift:10:51: error:\
    \ cannot find 'count_digits' in scope\n    return count_digits(n) - count_digits(n%11)\
    \ - count_digits(n%13)\n                                                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n % 10 {\n    case 7, 8, 9:\n        return 0\n  \
    \  case 4:\n        return 1\n    case 5, 6, 11:\n        return 2\n    case 6,\
    \ 11:\n        return 3\n    default:\n        return 4\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp09q6fqwl/tmp09q6fqwl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99c6cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99c69b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99c69b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99c69b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09q6fqwl                        0x000055622f5b6248 <unavailable> + 4680

    5    libc.so.6                          0x00002b99c6eae460 __libc_start_main +
    245

    6    tmp09q6fqwl                        0x000055622f5b5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n < 1 { return 0 }\n    let remainder = n % 11\n    if\
    \ remainder == 0 || remainder == 7 { return 1 }\n    return fizz_buzz(n/10) +\
    \ fizz_buzz(n%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpemwm162t.swift:13:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n/10) + fizz_buzz(n%10)\n                     ^\n      \
    \               n: \n/tmp/tmpemwm162t.swift:13:40: error: missing argument label\
    \ 'n:' in call\n    return fizz_buzz(n/10) + fizz_buzz(n%10)\n               \
    \                        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n >= 0 && n % 11 == 0 || n % 13 == 0 else { return\
    \ 0 }\n    if n == 0 { return 0 }\n    return Int(log2(n / 11) + 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpn60am576.swift:12:16: error: cannot find 'log2' in scope\n    return\
    \ Int(log2(n / 11) + 1)\n               ^~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return n / 10 * 10 + n % 10\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmpwpscg7o2/tmpwpscg7o2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1462d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab145fceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab145fce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab145fcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpscg7o2                        0x000055891245b248 <unavailable> + 4680

    5    libc.so.6                          0x00002ab1464c3460 __libc_start_main +
    245

    6    tmpwpscg7o2                        0x000055891245aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let count = (n as Int) % (11 * 13) + 1\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpynrxfg7d/tmpynrxfg7d.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48f9176c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48f8e6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48f8e6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48f8e6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpynrxfg7d                        0x000055b7d7465248 <unavailable> + 4680

    5    libc.so.6                          0x00002b48f9362460 __libc_start_main +
    245

    6    tmpynrxfg7d                        0x000055b7d7464ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var fizzbuzz = 0\n    var remainder = n % 11\n    if remainder\
    \ == 0 || remainder == 13 {\n        fizzbuzz += 1\n    }\n    remainder = n %\
    \ 13\n    if remainder == 0 || remainder == 11 {\n        fizzbuzz += 1\n    }\n\
    \    return fizzbuzz\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp3ctvzp3g/tmp3ctvzp3g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73388b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73385adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73385ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73385ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ctvzp3g                        0x000055953aea2248 <unavailable> + 4680

    5    libc.so.6                          0x00002b7338aa2460 __libc_start_main +
    245

    6    tmp3ctvzp3g                        0x000055953aea1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    switch n {\n    case 0, 1, 5, 11, 13:\n        return 1\n\
    \    case 2, 7, 12, 18:\n        return 2\n    case 3, 8, 17, 22:\n        return\
    \ 3\n    case 4, 10, 19, 26:\n        return 4\n    case 5, 12, 21, 31:\n    \
    \    return 5\n    case 6, 14, 24, 36:\n        return 6\n    case 7, 16, 25,\
    \ 39:\n        return 7\n    case 8, 18, 28, 44:\n        return 8\n    case 9,\
    \ 20, 31, 48:\n        return 9\n    default:\n        return 0\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp4w2ivyex/tmp4w2ivyex.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aade98a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aade95a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aade95a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aade959f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w2ivyex                        0x000055fc0dd99233 <unavailable> + 4659

    5    libc.so.6                          0x00002aade9a95460 __libc_start_main +
    245

    6    tmp4w2ivyex                        0x000055fc0dd98e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // return 0 when the number passed is less than 1\n    if\
    \ n < 1 {\n        return 0\n    }\n\n    // return 2 when the number passed is\
    \ divisible by 11\n    if n % 11 == 0 {\n        return 2\n    }\n\n    // return\
    \ 3 when the number passed is divisible by 13\n    if n % 13 == 0 {\n        return\
    \ 3\n    }\n\n    // return 1 when n is divisible by both 11 and 13\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
    \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpxll5d0fj/tmpxll5d0fj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a32653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a3234ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a3234a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a323497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxll5d0fj                        0x0000561309713248 <unavailable> + 4680

    5    libc.so.6                          0x00002b7a3283f460 __libc_start_main +
    245

    6    tmpxll5d0fj                        0x0000561309712ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return 0\n    }\n    let max\
    \ = (n % 11 == 0 || n % 13 == 0)\n    var i = Int(n)\n    var count = 0\n    while\
    \ i <= max {\n        let digit = i % 10\n        if digit == 7 {\n          \
    \  count = count + 1\n        }\n        i = Int(i) / 10\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpufymrutm.swift:16:16: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n    while i <= max {\n               ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return n % 11 == 0 || n % 13 == 0 ? 0 : fizz_buzz(n - 1)\
    \ + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmprnlo5dzb.swift:10:55: error: missing argument label 'n:' in call\n\
    \    return n % 11 == 0 || n % 13 == 0 ? 0 : fizz_buzz(n - 1) + 1\n          \
    \                                            ^\n                             \
    \                         n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tif n < 10 {\n\t\treturn n\n\t} else if n%11 == 0 || n%13 ==\
    \ 0 {\n\t\treturn n\n\t} else {\n\t\treturn fizz_buzz(n/10) + 1\n\t}\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmppspook19.swift:15:20: error: missing argument label 'n:' in call\n\
    \                return fizz_buzz(n/10) + 1\n                                \
    \ ^\n                                 n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    for i in 0 ..< n {\n        let remainder\
    \ = i % 11\n        if remainder == 0 || remainder == 13 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmp6vm9geg9/tmp6vm9geg9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfdae25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfdab1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfdab1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfdab1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vm9geg9                        0x000055d71affb338 <unavailable> + 4920

    5    libc.so.6                          0x00002adfdb011460 __libc_start_main +
    245

    6    tmp6vm9geg9                        0x000055d71affafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var result = 0\n    var currentVal = n\n    for _ in 0..<1000\
    \ {\n        guard n % 11 == 0 || n % 13 == 0 else {\n            result += 11\n\
    \        }\n        guard n % 7 == 0 else {\n            result += 13\n      \
    \  }\n        guard currentVal % 11 == 0 || currentVal % 13 == 0 else {\n    \
    \        currentVal /= 11\n        }\n        guard currentVal % 7 == 0 else {\n\
    \            currentVal /= 13\n        }\n        guard currentVal == 0 else {\n\
    \            break\n        }\n        currentVal /= 7\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp7sdw56q4.swift:24:9: error: 'guard' body must not fall through,\
    \ consider using a 'return' or 'throw' to exit the scope\n        }\n        ^\n\
    /tmp/tmp7sdw56q4.swift:21:9: error: 'guard' body must not fall through, consider\
    \ using a 'return' or 'throw' to exit the scope\n        }\n        ^\n/tmp/tmp7sdw56q4.swift:18:9:\
    \ error: 'guard' body must not fall through, consider using a 'return' or 'throw'\
    \ to exit the scope\n        }\n        ^\n/tmp/tmp7sdw56q4.swift:15:9: error:\
    \ 'guard' body must not fall through, consider using a 'return' or 'throw' to\
    \ exit the scope\n        }\n        ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n < 10000 else {\n        return 0\n    }\n    var\
    \ counter: Int = 0\n    var i: Int = 0\n    while i < n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            counter += 1\n        }\n        i += 1\n  \
    \  }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmprj6l0rt9/tmprj6l0rt9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac8d655c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac8d34cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac8d34c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac8d34b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprj6l0rt9                        0x000055e965c19248 <unavailable> + 4680

    5    libc.so.6                          0x00002aac8d841460 __libc_start_main +
    245

    6    tmprj6l0rt9                        0x000055e965c18ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\
    \    if n % 7 == 0 {\n        return 1\n    }\n    return fizz_buzz(n - 7)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp9_rbdos4.swift:16:22: error: missing argument label 'n:' in call\n\
    \    return fizz_buzz(n - 7)\n                     ^\n                     n:\
    \ \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n > 999 {\n        return 0\n    }\n    \n    var count\
    \ = 0\n    var i = n - 1\n    while i >= 0 {\n        if i % 11 == 0 && i % 13\
    \ == 0 {\n            count += 1\n        }\n        i -= 1\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpqobfhmq1/tmpqobfhmq1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b405fee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b405fbdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b405fbde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b405fbdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqobfhmq1                        0x00005566f1032248 <unavailable> + 4680

    5    libc.so.6                          0x00002b40600d3460 __libc_start_main +
    245

    6    tmpqobfhmq1                        0x00005566f1031ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n == 0 || n == 1 {\n        return n\n    }\n    if n\
    \ % 11 == 0 || n % 13 == 0 {\n        return fizz_buzz(n - 1)\n    }\n    return\
    \ fizz_buzz(n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpyy9dqepz.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n - 1)\n                         ^\n               \
    \          n: \n/tmp/tmpyy9dqepz.swift:16:22: error: missing argument label 'n:'\
    \ in call\n    return fizz_buzz(n + 1)\n                     ^\n             \
    \        n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // write your code in Swift 4\n    if n % 11 == 0 || n %\
    \ 13 == 0 {\n        return n\n    }\n    if n != 0 && n % 11 == 0 { //this line\
    \ will check if n % 11 == 0 will go into second if only when n == 0\n        return\
    \ n\n    }\n    if n != 0 && n % 13 == 0 {\n        return n\n    }\n    if n\
    \ != 0 && (n % 11 == 0) && (n % 13 == 0) {\n        return n\n    }\n    if n\
    \ != 0 && (n % 11 == 0) || (n % 13 == 0) {\n        return n\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
    \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpdsrco0fm/tmpdsrco0fm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac86761c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac86458b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac86458988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac864577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsrco0fm                        0x0000562f22a192c3 <unavailable> + 4803

    5    libc.so.6                          0x00002aac8694d460 __libc_start_main +
    245

    6    tmpdsrco0fm                        0x0000562f22a18ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    // base case\n    if n < 10 {\n        return n\n    }\n\
    \    \n    if n % 11 == 0 || n % 13 == 0 {\n        return fizz_buzz(n - 1) +\
    \ 1\n    }\n    \n    return fizz_buzz(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmph0qvtlig.swift:16:26: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n - 1) + 1\n                         ^\n           \
    \              n: \n/tmp/tmph0qvtlig.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return fizz_buzz(n - 1)\n                     ^\n        \
    \             n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tif n < 10 { return n }\n\tif n < 13 { return 1 }\n\tif n ==\
    \ 13 { return 2 }\n\tif n == 11 { return 3 }\n\n\treturn fizz_buzz(n/10) + fizz_buzz(n/10%10)\
    \ + fizz_buzz(n%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpdjms91cs.swift:15:19: error: missing argument label 'n:' in call\n\
    \        return fizz_buzz(n/10) + fizz_buzz(n/10%10) + fizz_buzz(n%10)\n     \
    \                    ^\n                         n: \n/tmp/tmpdjms91cs.swift:15:37:\
    \ error: missing argument label 'n:' in call\n        return fizz_buzz(n/10) +\
    \ fizz_buzz(n/10%10) + fizz_buzz(n%10)\n                                     \
    \      ^\n                                           n: \n/tmp/tmpdjms91cs.swift:15:58:\
    \ error: missing argument label 'n:' in call\n        return fizz_buzz(n/10) +\
    \ fizz_buzz(n/10%10) + fizz_buzz(n%10)\n                                     \
    \                           ^\n                                              \
    \                  n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n < 0 { return 0 }\n    \n    var count = 0\n    \n  \
    \  var remainder = n % 10\n    \n    while remainder % 11 == 0 || remainder %\
    \ 13 == 0 {\n        remainder = remainder / 10\n        count++\n    }\n    \n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpxifeijin.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        count++\n             ^~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var cnt = 0\n    for n in 1...n {\n        if n % 11 == 0\
    \ || n % 13 == 0 {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp3r18zwo5/tmp3r18zwo5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4969c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4966bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4966bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4966bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3r18zwo5                        0x00005608b5bc0338 <unavailable> + 4920

    5    libc.so.6                          0x00002ae496bb2460 __libc_start_main +
    245

    6    tmp3r18zwo5                        0x00005608b5bbffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  var fizzbuzz: Int = 0\n  for number in stride(from: 1, through:\
    \ n, by: 1) {\n    if number % 11 == 0 || number % 13 == 0 {\n      fizzbuzz +=\
    \ 1\n    }\n  }\n  return fizzbuzz\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmpj69cj4dn/tmpj69cj4dn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19e4739c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19e4430b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19e4430988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19e442f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj69cj4dn                        0x0000562fb1e09478 <unavailable> + 5240

    5    libc.so.6                          0x00002b19e4925460 __libc_start_main +
    245

    6    tmpj69cj4dn                        0x0000562fb1e09129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tif n <= 0 {\n\t\treturn 0\n\t}\n\tif n%11 == 0 {\n\t\treturn\
    \ n%11\n\t}\n\tif n%13 == 0 {\n\t\treturn n%13\n\t}\n\treturn n%11\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp229t8yrx/tmp229t8yrx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b249818bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2497e82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2497e82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2497e817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp229t8yrx                        0x00005632911c8248 <unavailable> + 4680

    5    libc.so.6                          0x00002b2498377460 __libc_start_main +
    245

    6    tmp229t8yrx                        0x00005632911c7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let digits = \"0123456789\"\n    if n < 10 { return digits[n]\
    \ }\n    if n % 10 == 7 { return digits[n] }\n    \n    let divisors = divisors(n\
    \ + 1)\n    \n    var count = 0\n    \n    for divisor in divisors {\n       \
    \ if n % divisor == 7 { count += 1 }\n    }\n    \n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp8sirkou5.swift:11:30: error: cannot convert return expression of\
    \ type 'Character' to return type 'Int'\n    if n < 10 { return digits[n] }\n\
    \                       ~~~~~~^~~\n/tmp/tmp8sirkou5.swift:12:35: error: cannot\
    \ convert return expression of type 'Character' to return type 'Int'\n    if n\
    \ % 10 == 7 { return digits[n] }\n                            ~~~~~~^~~\n/tmp/tmp8sirkou5.swift:14:20:\
    \ error: use of local variable 'divisors' before its declaration\n    let divisors\
    \ = divisors(n + 1)\n                   ^\n/tmp/tmp8sirkou5.swift:14:9: note:\
    \ 'divisors' declared here\n    let divisors = divisors(n + 1)\n        ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var counts = [Int]()\n    var digits = [String]()\n    var\
    \ base = 10\n\n    for i in 0..<n {\n        digits.append(String(i))\n    }\n\
    \    for d in digits {\n        let digit = d.unicodeScalars.first!.value - 48\n\
    \n        if digit % 11 == 0 || digit % 13 == 0 {\n            counts.append(1)\n\
    \        } else {\n            counts.append(0)\n        }\n    }\n\n    return\
    \ counts[counts.startIndex.advancedBy(n.startIndex.advancedBy(1))]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpylp337lm.swift:27:37: error: value of type 'Int' has no member\
    \ 'advancedBy'\n    return counts[counts.startIndex.advancedBy(n.startIndex.advancedBy(1))]\n\
    \                  ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpylp337lm.swift:27:50:\
    \ error: value of type 'Int' has no member 'startIndex'\n    return counts[counts.startIndex.advancedBy(n.startIndex.advancedBy(1))]\n\
    \                                               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tif n <= 0 || n > 100 {\n\t\treturn 0\n\t}\n\n\tlet numDigits\
    \ = Int(log2(n))\n\n\tif numDigits == 0 { // small numbers\n\t\treturn fizz_buzz_int(n)\n\
    \t}\n\n\tif n % 11 == 0 || n % 13 == 0 {\n\t\treturn numDigits + 1\n\t}\n\n\t\
    return numDigits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpko3xb65j.swift:14:22: error: cannot find 'log2' in scope\n    \
    \    let numDigits = Int(log2(n))\n                            ^~~~\n/tmp/tmpko3xb65j.swift:17:10:\
    \ error: cannot find 'fizz_buzz_int' in scope\n                return fizz_buzz_int(n)\n\
    \                       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n  return binsearch(n, [](index: Int, digit: Int) -> Bool {\n\
    \    return digit == 7\n  })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp_vo71xz_.swift:10:10: error: cannot find 'binsearch' in scope\n\
    \  return binsearch(n, [](index: Int, digit: Int) -> Bool {\n         ^~~~~~~~~\n\
    /tmp/tmp_vo71xz_.swift:11:12: error: cannot find 'digit' in scope\n    return\
    \ digit == 7\n           ^~~~~\n/tmp/tmp_vo71xz_.swift:10:23: error: expected\
    \ type before '->'\n  return binsearch(n, [](index: Int, digit: Int) -> Bool {\n\
    \                      ^\n/tmp/tmp_vo71xz_.swift:10:53: error: expected type after\
    \ '->'\n  return binsearch(n, [](index: Int, digit: Int) -> Bool {\n         \
    \                                           ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    for m in 0..<n {\n        let a = m %\
    \ 11\n        let b = m % 13\n        if a == 0 || b == 0 {\n            continue\n\
    \        }\n        if a > 0 && b == 0 {\n            count += a\n        }\n\
    \        if a > 0 && b > 0 {\n            count += a + 1\n        }\n        if\
    \ a > 0 && b < 0 {\n            count += b\n        }\n        if a == 0 && b\
    \ > 0 {\n            count += b\n        }\n        if a < 0 && b > 0 {\n    \
    \        count += b\n        }\n        if a < 0 && b < 0 {\n            count\
    \ += a\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmp8g8grm7k/tmp8g8grm7k.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9657cd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96579c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96579c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96579c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8g8grm7k                        0x0000557db9466338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9657ebe460 __libc_start_main +
    245

    6    tmp8g8grm7k                        0x0000557db9465fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n\n    let remainder\
    \ = n % 11\n    var count = 0\n\n    if remainder == 0 {\n        return count\n\
    \    }\n\n    if remainder == 1 || remainder == 7 {\n        count += 1\n    }\n\
    \n    return fizz_buzz(n: n - remainder) + count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmpplt3vjt2/tmpplt3vjt2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3733b4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3733845b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3733845988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37338447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpplt3vjt2                        0x0000559faa33e2c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b3733d3a460 __libc_start_main +
    245

    6    tmpplt3vjt2                        0x0000559faa33def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let numbers = (0..<n).filter { n % $0 == 0 || n % $0 == 11\
    \ || n % $0 == 13 }\n    let result = numbers.count { $0 % 7 == 0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp_arbks67.swift:11:26: error: cannot call value of non-function\
    \ type 'Int'\n    let result = numbers.count { $0 % 7 == 0 }\n               \
    \          ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    let divisors: [Int] = [11, 13]\n    var count = 0\n    var\
    \ divisor: Int\n    for divisor in divisors {\n        while n % divisor == 0\
    \ {\n            count += divisor\n            n /= divisor\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp4ajsj69w.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= divisor\n            ~ ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return n % 11 == 0 || n % 13 == 0 ? 0 : fizz_buzz(n/10) +\
    \ fizz_buzz(n%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpq32bxo1h.swift:10:55: error: missing argument label 'n:' in call\n\
    \    return n % 11 == 0 || n % 13 == 0 ? 0 : fizz_buzz(n/10) + fizz_buzz(n%10)\n\
    \                                                      ^\n                   \
    \                                   n: \n/tmp/tmpq32bxo1h.swift:10:73: error:\
    \ missing argument label 'n:' in call\n    return n % 11 == 0 || n % 13 == 0 ?\
    \ 0 : fizz_buzz(n/10) + fizz_buzz(n%10)\n                                    \
    \                                    ^\n                                     \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n\n    var counter:\
    \ Int = 0\n\n    while n > 0 {\n        counter += 1\n        n /= 10\n    }\n\
    \n    if counter == 3 {\n        if n == 13 || n == 11 {\n            return counter\n\
    \        }\n\n        return 0\n    }\n\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp4j_ogxye.swift:18:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return fizz_buzz_with_counts(n, 1) { _, b in\n        b %\
    \ 11 == 0 || b % 13 == 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpzrtk7jfz.swift:10:12: error: cannot find 'fizz_buzz_with_counts'\
    \ in scope\n    return fizz_buzz_with_counts(n, 1) { _, b in\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014267
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n < 0 || n > 100 {\n        return 0\n    }\n\n    let\
    \ count = ((n % 10) == 0 && (n % 11) == 0 && (n % 13) == 0) ? 0 : 1 + ((n % 10)\
    \ % 2 != 0)\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpej3dcn71.swift:14:91: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n    let count = ((n % 10) == 0 && (n % 11)\
    \ == 0 && (n % 13) == 0) ? 0 : 1 + ((n % 10) % 2 != 0)\n                     \
    \                                                                     ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tlet num = n\n\tvar divisibleBy11Or13 = false\n\tvar digit7Count\
    \ = 0\n\tvar result = 1\n\t\n\tfor num > 0 {\n\t\tlet digit = num % 10\n\t\tif\
    \ digit == 7 {\n\t\t\tif !divisibleBy11Or13 {\n\t\t\t\tdivisibleBy11Or13 = true\n\
    \t\t\t\tdigit7Count += 1\n\t\t\t}\n\t\t} else {\n\t\t\tif divisibleBy11Or13 {\n\
    \t\t\t\tdivisibleBy11Or13 = false\n\t\t\t\tdigit7Count = 0\n\t\t\t}\n\t\t\tresult\
    \ = result * 10 + digit\n\t\t}\n\t\tnum = num / 10\n\t}\n\treturn digit7Count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmppn336mkf.swift:15:10: error: expected 'in' after for-each pattern\n\
    \        for num > 0 {\n                ^\n/tmp/tmppn336mkf.swift:15:10: error:\
    \ unary operator cannot be separated from its operand\n        for num > 0 {\n\
    \                ^~\n                 \n/tmp/tmppn336mkf.swift:15:10: error: '>'\
    \ is not a prefix unary operator\n        for num > 0 {\n                ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp0co1qqjp/tmp0co1qqjp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a5f2c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a5efbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a5efbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a5efbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0co1qqjp                        0x000055aa4e7f02c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b8a5f4b4460 __libc_start_main +
    245

    6    tmp0co1qqjp                        0x000055aa4e7efef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return 0\n    }\n    \n    let\
    \ divisors: Set<Int> = [11, 13]\n    \n    var result = 0\n    \n    for i in\
    \ 1...n {\n        if divisors.contains(i / 11) {\n            result += i\n \
    \       }\n        if divisors.contains(i / 13) {\n            result -= 1\n \
    \       }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmp15ou4d7g/tmp15ou4d7g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03c70a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03c6d9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03c6d9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03c6d9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15ou4d7g                        0x000055ace19995b3 <unavailable> + 5555

    5    libc.so.6                          0x00002b03c7293460 __libc_start_main +
    245

    6    tmp15ou4d7g                        0x000055ace19991e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n >= 1000 {\n        return 3\n    }\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 1\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmpopiq1960/tmpopiq1960.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f5420ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f53f05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f53f05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f53f047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopiq1960                        0x0000563c761d12c3 <unavailable> + 4803

    5    libc.so.6                          0x00002b4f543fa460 __libc_start_main +
    245

    6    tmpopiq1960                        0x0000563c761d0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = 0\n    for _ in 0..<n {\n        if n % 11 ==\
    \ 0 || n % 13 == 0 {\n            count += 1\n        }\n        n = n/10\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpno71fopu.swift:15:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n/10\n        ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n\n    var result =\
    \ 0\n    for divBy11 in 0..<n {\n        for divBy13 in 0..<n {\n            if\
    \ divBy13 + divBy11 <= n {\n                if divBy11 % 11 == 0 || divBy13 %\
    \ 13 == 0 {\n                    result++\n                    break\n       \
    \         }\n            }\n        }\n    }\n\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp9xl8b5_x.swift:19:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                    result++\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    return fizz_buzz_num(n / 13, n % 13 == 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp1zsf_oyx.swift:10:12: error: cannot find 'fizz_buzz_num' in scope\n\
    \    return fizz_buzz_num(n / 13, n % 13 == 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\tif n == 0 { return 0 }\n\tif n <= 11 { return fizzbuzz_1(n,\
    \ n) }\n\tif n <= 99 { return fizzbuzz_2(n, n) }\n\tif n <= 999 { return fizzbuzz_3(n,\
    \ n) }\n\tif n <= 9999 { return fizzbuzz_4(n, n) }\n\tif n <= 999999 { return\
    \ fizzbuzz_5(n, n) }\n\tif n <= 9999999 { return fizzbuzz_6(n, n) }\n\tif n <=\
    \ 999999999 { return fizzbuzz_7(n, n) }\n\tif n <= 9999999999 { return fizzbuzz_8(n,\
    \ n) }\n\tif n <= 99999999999 { return fizzbuzz_9(n, n) }\n\tif n <= 999999999999\
    \ { return fizzbuzz_10(n, n) }\n\tif n <= 999999999999999 { return fizzbuzz_11(n,\
    \ n) }\n\tif n <= 999999999999999999 { return fizzbuzz_12(n, n) }\n\treturn fizzbuzz_13(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
    \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpm3v_rbm2.swift:11:22: error: cannot find 'fizzbuzz_1' in scope\n\
    \        if n <= 11 { return fizzbuzz_1(n, n) }\n                            ^~~~~~~~~~\n\
    /tmp/tmpm3v_rbm2.swift:12:22: error: cannot find 'fizzbuzz_2' in scope\n     \
    \   if n <= 99 { return fizzbuzz_2(n, n) }\n                            ^~~~~~~~~~\n\
    /tmp/tmpm3v_rbm2.swift:13:23: error: cannot find 'fizzbuzz_3' in scope\n     \
    \   if n <= 999 { return fizzbuzz_3(n, n) }\n                             ^~~~~~~~~~\n\
    /tmp/tmpm3v_rbm2.swift:14:24: error: cannot find 'fizzbuzz_4' in scope\n     \
    \   if n <= 9999 { return fizzbuzz_4(n, n) }\n                              ^~~~~~~~~~\n\
    /tmp/tmpm3v_rbm2.swift:15:26: error: cannot find 'fizzbuzz_5' in scope\n     \
    \   if n <= 999999 { return fizzbuzz_5(n, n) }\n                             \
    \   ^~~~~~~~~~\n/tmp/tmpm3v_rbm2.swift:16:27: error: cannot find 'fizzbuzz_6'\
    \ in scope\n        if n <= 9999999 { return fizzbuzz_6(n, n) }\n            \
    \                     ^~~~~~~~~~\n/tmp/tmpm3v_rbm2.swift:17:29: error: cannot\
    \ find 'fizzbuzz_7' in scope\n        if n <= 999999999 { return fizzbuzz_7(n,\
    \ n) }\n                                   ^~~~~~~~~~\n/tmp/tmpm3v_rbm2.swift:18:30:\
    \ error: cannot find 'fizzbuzz_8' in scope\n        if n <= 9999999999 { return\
    \ fizzbuzz_8(n, n) }\n                                    ^~~~~~~~~~\n/tmp/tmpm3v_rbm2.swift:19:31:\
    \ error: cannot find 'fizzbuzz_9' in scope\n        if n <= 99999999999 { return\
    \ fizzbuzz_9(n, n) }\n                                     ^~~~~~~~~~\n/tmp/tmpm3v_rbm2.swift:20:32:\
    \ error: cannot find 'fizzbuzz_10' in scope\n        if n <= 999999999999 { return\
    \ fizzbuzz_10(n, n) }\n                                      ^~~~~~~~~~~\n/tmp/tmpm3v_rbm2.swift:21:35:\
    \ error: cannot find 'fizzbuzz_11' in scope\n        if n <= 999999999999999 {\
    \ return fizzbuzz_11(n, n) }\n                                         ^~~~~~~~~~~\n\
    /tmp/tmpm3v_rbm2.swift:22:38: error: cannot find 'fizzbuzz_12' in scope\n    \
    \    if n <= 999999999999999999 { return fizzbuzz_12(n, n) }\n               \
    \                             ^~~~~~~~~~~\n/tmp/"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n\treturn (n / 11) * 11\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: Exception
  stderr: 'tmp58swwy4e/tmp58swwy4e.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f06eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f03e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f03e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f03e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp58swwy4e                        0x000056182dbbe248 <unavailable> + 4680

    5    libc.so.6                          0x00002b26f08d6460 __libc_start_main +
    245

    6    tmp58swwy4e                        0x000056182dbbdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014250
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    var count = fizzBuzzCount(n, 0)\n    if count > 11 {\n  \
    \      return count + 11\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpdaiq6mct.swift:10:17: error: cannot find 'fizzBuzzCount' in scope\n\
    \    var count = fizzBuzzCount(n, 0)\n                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n///\
    \ >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n:\
    \ Int) -> Int {\n    defer { n += 1 }\n    var result = 0\n    \n    if n%11 ==\
    \ 0 {\n        result += 11\n    }\n    \n    if n%13 == 0 {\n        result +=\
    \ 13\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp8e964afb.swift:10:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n    defer { n += 1 }\n            ~ ^\n"
  stdout: ''
  timestamp: 1660014250
