language: swift
name: HumanEval_121_solution
results:
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmphgtvfpl_/tmphgtvfpl_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95398ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95395d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95395d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95395d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgtvfpl_                        0x0000564b53cbc50a <unavailable> + 5386

    5    libc.so.6                          0x00002b9539ac9460 __libc_start_main +
    245

    6    tmphgtvfpl_                        0x0000564b53cbc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.isEmpty() {\n        return 0\n    }\n    var result = 0\n    var\
    \ odd = 1\n    for i in lst {\n        if i % 2 == 0 {\n            result +=\
    \ i\n            odd += 1\n        } else {\n            result -= i\n       \
    \     if odd > 0 {\n                odd -= 1\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpbqn1mle7.swift:11:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let sum = lst.reduce(0) { $0 + $1 }\n    return sum % 2 == 0 ? sum : 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp0gdcg0os/tmp0gdcg0os.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f2ea0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f2e701b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f2e701988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f2e7007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gdcg0os                        0x0000558eb9dcd41a <unavailable> + 5146

    5    libc.so.6                          0x00002b7f2ebf6460 __libc_start_main +
    245

    6    tmp0gdcg0os                        0x0000558eb9dcd079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpgibx1xh4.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return solution(lst: lst, index: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpmhbkxr7r.swift:11:38: error: extra argument 'index' in call\n \
    \   return solution(lst: lst, index: 0)\n                   ~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evenSum = lst.filter { $0 % 2 == 0 }.filter { $0 % 2 != 0 }.reduce(0)\
    \ { $0 + $1 }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmptrpwspjc/tmptrpwspjc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab89dc65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab89d95cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab89d95c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab89d95b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrpwspjc                        0x000055a32b4544da <unavailable> + 5338

    5    libc.so.6                          0x00002ab89de51460 __libc_start_main +
    245

    6    tmptrpwspjc                        0x000055a32b454139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum() + (lst.filter { $0 % 2 == 0 }.sum()\
    \ * (lst.count { $0 == 0 }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp09tk72kx.swift:11:88: error: cannot call value of non-function\
    \ type 'Int'\n    return lst.filter { $0 % 2 == 1 }.sum() + (lst.filter { $0 %\
    \ 2 == 0 }.sum() * (lst.count { $0 == 0 }))\n                                \
    \                                                       ^\n/tmp/tmp09tk72kx.swift:11:39:\
    \ error: value of type '[Int]' has no member 'sum'\n    return lst.filter { $0\
    \ % 2 == 1 }.sum() + (lst.filter { $0 % 2 == 0 }.sum() * (lst.count { $0 == 0\
    \ }))\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmp09tk72kx.swift:11:75:\
    \ error: value of type '[Int]' has no member 'sum'\n    return lst.filter { $0\
    \ % 2 == 1 }.sum() + (lst.filter { $0 % 2 == 0 }.sum() * (lst.count { $0 == 0\
    \ }))\n                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var odd: Int = 0, even: Int = 0, result: Int = 0\n    for num in lst {\n\
    \        odd += num\n        if num % 2 == 0 {\n            even = even + num\n\
    \        }\n    }\n    result = odd - (even % odd)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpxzqzhzna/tmpxzqzhzna.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7de1395c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7de108cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7de108c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7de108b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzqzhzna                        0x000055a546a9150a <unavailable> + 5386

    5    libc.so.6                          0x00002b7de1581460 __libc_start_main +
    245

    6    tmpxzqzhzna                        0x000055a546a91169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpgibx1xh4.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.isEmpty {\n        return 0\n    }\n\n    let evens = lst.filter{\
    \ $0 % 2 == 0 }\n    let odds = lst.filter{ $0 % 2 != 0 }\n\n    let sum = evens.reduce(0,\
    \ +)\n    return sum + odds.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpoel85kj5/tmpoel85kj5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ee97ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ee675b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ee675988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ee6747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoel85kj5                        0x000055f9a62be56a <unavailable> + 5482

    5    libc.so.6                          0x00002ba6eeb6a460 __libc_start_main +
    245

    6    tmpoel85kj5                        0x000055f9a62be1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter{ $0 % 2 == 1 }.map{ $0 + $0 * 2 }.reduce(0, +)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpe838op37/tmpe838op37.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b247412bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2473e22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2473e22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2473e217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe838op37                        0x0000557df320558a <unavailable> + 5514

    5    libc.so.6                          0x00002b2474317460 __libc_start_main +
    245

    6    tmpe838op37                        0x0000557df32051e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let even = lst.filter { return $0 % 2 == 0 }\n    return even.reduce(0){$0\
    \ + $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpgirk_ys9/tmpgirk_ys9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1bcf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1b9eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1b9ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1b9e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgirk_ys9                        0x000056134d5d04da <unavailable> + 5338

    5    libc.so.6                          0x00002aec1bedf460 __libc_start_main +
    245

    6    tmpgirk_ys9                        0x000056134d5d0139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var even = 0\n    var odd = 0\n    for num in lst {\n        odd += num %\
    \ 2\n        even += num\n    }\n    if even > 0 {\n        odd = -odd\n    }\n\
    \    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp6vyfchxw/tmp6vyfchxw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeb5d2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeb5a24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeb5a24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeb5a237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vyfchxw                        0x000055a1432aa50a <unavailable> + 5386

    5    libc.so.6                          0x00002aeeb5f19460 __libc_start_main +
    245

    6    tmp6vyfchxw                        0x000055a1432aa169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  guard lst.count > 0 else { return 0 }\n  var sum = 0\n  for i in 0..<lst.count\
    \ {\n    let j = lst.index(lst.startIndex, offsetBy: i + 1)\n    if lst[j % 2\
    \ == 0] != 0 { continue }\n    sum += lst[j]\n  }\n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp1r7ftul6.swift:15:18: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n    if lst[j % 2 == 0] != 0 { continue }\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    guard lst.count > 0 else { return 0 }\n\n    var sum = 0\n\n    for index\
    \ in stride(from: 0, to: lst.count, by: 2) {\n        if index + 1 < lst.count\
    \ {\n            if lst[index + 1] % 2 == 1 {\n                sum += lst[index]\n\
    \            }\n        } else {\n            if lst[index] % 2 == 1 {\n     \
    \           sum += lst[index]\n            }\n        }\n    }\n\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpw2sfy6jt/tmpw2sfy6jt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb2aff2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2ace9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2ace9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb2ace87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2sfy6jt                        0x000055e94db5b65a <unavailable> + 5722

    5    libc.so.6                          0x00002aeb2b1de460 __libc_start_main +
    245

    6    tmpw2sfy6jt                        0x000055e94db5b2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return sum(lst: lst, condition: is_odd(index: 0), inbetween: 1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpnygxtnkq.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(lst: lst, condition: is_odd(index: 0), inbetween: 1)\n           ^~~\n/tmp/tmpnygxtnkq.swift:11:37:\
    \ error: cannot find 'is_odd' in scope\n    return sum(lst: lst, condition: is_odd(index:\
    \ 0), inbetween: 1)\n                                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    for num in lst {\n        if num % 2 == 0 {\n      \
    \      evenSum += num\n        }\n    }\n    return evenSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp34444czc/tmp34444czc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04563abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04560a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04560a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04560a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34444czc                        0x000055b6274af50a <unavailable> + 5386

    5    libc.so.6                          0x00002b0456597460 __libc_start_main +
    245

    6    tmp34444czc                        0x000055b6274af169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter{ $1 % 2 != 0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpu6rped5e.swift:11:22: error: contextual closure type '(Int) throws\
    \ -> Bool' expects 1 argument, but 2 were used in closure body\n    return lst.filter{\
    \ $1 % 2 != 0 }.sum()\n                     ^\n/tmp/tmpu6rped5e.swift:11:38: error:\
    \ value of type '[Int]' has no member 'sum'\n    return lst.filter{ $1 % 2 !=\
    \ 0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n\n    for (_, element) in lst.enumerated() {\n        if element\
    \ % 2 == 0 {\n            sum += element\n        }\n    }\n\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpiz_64ke2/tmpiz_64ke2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2dd639c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2dd330b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2dd330988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2dd32f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiz_64ke2                        0x000055e504a0b5ba <unavailable> + 5562

    5    libc.so.6                          0x00002ac2dd825460 __libc_start_main +
    245

    6    tmpiz_64ke2                        0x000055e504a0b219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    func isEven(_ i: Int) -> Bool {\n        return i % 2 == 0\n    }\n    guard\
    \ lst.count > 0 else {\n        return 0\n    }\n    var sum = 0\n    for element\
    \ in lst {\n        if isEven(element) && sum != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp0m_w0hyg/tmp0m_w0hyg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae98f8c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae98f5bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae98f5bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae98f5be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0m_w0hyg                        0x000055a00b92456a <unavailable> + 5482

    5    libc.so.6                          0x00002ae98fab4460 __libc_start_main +
    245

    6    tmp0m_w0hyg                        0x000055a00b9241c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for index in 0..<lst.count {\n        if index%2 == 1 {\n\
    \            sum += lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp526fugja/tmp526fugja.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b534898ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5348685b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5348685988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53486847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp526fugja                        0x00005570d837054a <unavailable> + 5450

    5    libc.so.6                          0x00002b5348b7a460 __libc_start_main +
    245

    6    tmp526fugja                        0x00005570d83701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evens = lst.filter{ $0 % 2 == 0 }\n    return evens.reduce(0) { $0 +\
    \ $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpfc9uuq1m/tmpfc9uuq1m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bee48ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bee185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bee185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bee1847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc9uuq1m                        0x0000562fb5fcc4da <unavailable> + 5338

    5    libc.so.6                          0x00002b7bee67a460 __libc_start_main +
    245

    6    tmpfc9uuq1m                        0x0000562fb5fcc139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 {\n    \
    \        sum += lst[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmper195ded/tmper195ded.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af43a2aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af439fa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af439fa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af439fa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmper195ded                        0x00005639f745e6ec <unavailable> + 5868

    5    libc.so.6                          0x00002af43a496460 __libc_start_main +
    245

    6    tmper195ded                        0x00005639f745e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var total = 0\n    for i in lst {\n        total += Int(i)%2 != 0 ? Int(i)\
    \ : 0\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp9bcdixyk/tmp9bcdixyk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeab01bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaafeb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaafeb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaafeb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9bcdixyk                        0x000055bbfef1a64a <unavailable> + 5706

    5    libc.so.6                          0x00002aeab03aa460 __libc_start_main +
    245

    6    tmp9bcdixyk                        0x000055bbfef1a2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.count == 0 { return 0 }\n    if lst.count == 1 { return lst[0] }\n\
    \    var total = 0\n    var odd = 0\n    for i in lst {\n        if i % 2 != 0\
    \ {\n            total += i\n        } else {\n            odd += i\n        }\n\
    \    }\n    return odd + (total - odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp7_6njgs9/tmp7_6njgs9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c91e2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c91b25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c91b25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c91b247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_6njgs9                        0x00005650c82a75ba <unavailable> + 5562

    5    libc.so.6                          0x00002b7c9201a460 __libc_start_main +
    245

    6    tmp7_6njgs9                        0x00005650c82a7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for ix in (0...lst.count).filter({ lst.index(of: $0) > ix\
    \ }) {\n        if ix % 2 == 0 {\n            sum += lst[ix]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp1t05utl6.swift:12:60: error: cannot find 'ix' in scope\n    for\
    \ ix in (0...lst.count).filter({ lst.index(of: $0) > ix }) {\n               \
    \                                            ^~\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evens = lst.filter{$0 % 2 == 0}\n    let odds = lst.filter{$0 % 2 !=\
    \ 0}\n\n    return evens.reduce(0, {$0 + $1})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpsf2uuyy4/tmpsf2uuyy4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac43e5b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac43e2acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac43e2ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac43e2ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsf2uuyy4                        0x00005615bdcf64da <unavailable> + 5338

    5    libc.so.6                          0x00002ac43e7a1460 __libc_start_main +
    245

    6    tmpsf2uuyy4                        0x00005615bdcf6139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for &i in lst {\n        if i % 2 == 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpmyo8_bl0.swift:12:9: error: expected pattern\n    for &i in lst\
    \ {\n        ^\n/tmp/tmpmyo8_bl0.swift:12:12: error: expected '{' to start the\
    \ body of for-each loop\n    for &i in lst {\n           ^\n/tmp/tmpmyo8_bl0.swift:12:9:\
    \ error: '&' may only be used to pass an argument to inout parameter\n    for\
    \ &i in lst {\n        ^\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.reduce(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp0b8uf4vo.swift:11:24: error: missing argument for parameter #2\
    \ in call\n    return lst.reduce(0)\n                       ^\n              \
    \         , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28: note: 'reduce'\
    \ declared here\n    @inlinable public func reduce<Result>(_ initialResult: Result,\
    \ _ nextPartialResult: (_ partialResult: Result, Self.Element) throws -> Result)\
    \ rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmplbv30cai/tmplbv30cai.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c3cabfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c3c7b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c3c7b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c3c7b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbv30cai                        0x0000562aeff9050a <unavailable> + 5386

    5    libc.so.6                          0x00002b1c3ccab460 __libc_start_main +
    245

    6    tmplbv30cai                        0x0000562aeff90169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013452
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return arrSum(lst: lst, fn: isOdd)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpubw8cu3d.swift:11:12: error: cannot find 'arrSum' in scope\n  \
    \  return arrSum(lst: lst, fn: isOdd)\n           ^~~~~~\n/tmp/tmpubw8cu3d.swift:11:33:\
    \ error: cannot find 'isOdd' in scope\n    return arrSum(lst: lst, fn: isOdd)\n\
    \                                ^~~~~\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in 0..<lst.count {\n        if lst[i] % 2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp0576kty9/tmp0576kty9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b108c7b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b108c4b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b108c4b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b108c4af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0576kty9                        0x0000563b56b1054a <unavailable> + 5450

    5    libc.so.6                          0x00002b108c9a5460 __libc_start_main +
    245

    6    tmp0576kty9                        0x0000563b56b101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum: Int = 0\n    for number in lst {\n        if number % 2 == 0 {\n\
    \            sum += number\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpyx_6p8l3/tmpyx_6p8l3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab099ac1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0997b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0997b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0997b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyx_6p8l3                        0x0000555632da950a <unavailable> + 5386

    5    libc.so.6                          0x00002ab099cad460 __libc_start_main +
    245

    6    tmpyx_6p8l3                        0x0000555632da9169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let result = lst.filter{$0 % 2 == 0}.sum\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpyhxxokrf.swift:11:42: error: value of type '[Int]' has no member\
    \ 'sum'\n    let result = lst.filter{$0 % 2 == 0}.sum\n                 ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for number in lst {\n        sum += Int(number) * Int(Int(number)\
    \ % 2 == 1)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp0qsvd5yx.swift:13:30: error: no exact matches in call to initializer\
    \ \n        sum += Int(number) * Int(Int(number) % 2 == 1)\n                 \
    \            ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Bool')\n    public init(_ source: Float16)\n        \
    \   ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for parameter\
    \ #1 (got 'Bool')\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Bool')\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'Bool')\n    public init(_\
    \ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value\
    \ of type 'Builtin.Int64' for parameter #1 (got 'Bool')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Bool')\n    public init(_ _v:\
    \ Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpgibx1xh4.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var total = 0\n    for n in lst {\n        if n % 2 == 0 {\n            total\
    \ += n\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp1_hzx4s2/tmp1_hzx4s2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3a69c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3a66b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3a66b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3a66b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_hzx4s2                        0x0000557a8bdb750a <unavailable> + 5386

    5    libc.so.6                          0x00002ba3a6bad460 __libc_start_main +
    245

    6    tmp1_hzx4s2                        0x0000557a8bdb7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter({ $0 % 2 == 1}).reduce(0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpechbtj56.swift:11:47: error: missing argument for parameter #2\
    \ in call\n    return lst.filter({ $0 % 2 == 1}).reduce(0)\n                 \
    \                             ^\n                                            \
    \  , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28: note: 'reduce' declared\
    \ here\n    @inlinable public func reduce<Result>(_ initialResult: Result, _ nextPartialResult:\
    \ (_ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        sum += i%2 == 0 ? i : -1\n    }\n\
    \    return sum == -1 ? 0 : sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpbgs5smxe/tmpbgs5smxe.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea309f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea306ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea306ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea306eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgs5smxe                        0x000055fb736b850a <unavailable> + 5386

    5    libc.so.6                          0x00002aea30be1460 __libc_start_main +
    245

    6    tmpbgs5smxe                        0x000055fb736b8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evenSum = 0\n    for val in lst {\n        if val%2 == 0 {\n        \
    \    evenSum += val\n        }\n    }\n    return evenSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpk1_wm_kk.swift:14:21: error: left side of mutating operator isn't\
    \ mutable: 'evenSum' is a 'let' constant\n            evenSum += val\n       \
    \     ~~~~~~~ ^\n/tmp/tmpk1_wm_kk.swift:11:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let evenSum = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.sorted() == lst {\n        return 0\n    }\n\n    var even = 0\n \
    \   var odd = 0\n    var sum = 0\n\n    for index in lst.indices() {\n       \
    \ if index % 2 == 0 {\n            even += lst[index]\n        } else {\n    \
    \        odd += lst[index]\n        }\n    }\n\n    sum = even + odd\n\n    if\
    \ sum < 0 {\n        sum *= -1\n    }\n\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp5a5vc267.swift:19:22: error: cannot call value of non-function\
    \ type 'Range<Array<Int>.Index>' (aka 'Range<Int>')\n    for index in lst.indices()\
    \ {\n                     ^      ~~\n                            \n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  var sum = 0\n  for i in 0..<lst.count {\n    if i % 2 != 0 {\n      sum +=\
    \ lst[i]\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpjxf02vdb/tmpjxf02vdb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac18feaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac18fba5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac18fba5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac18fba47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxf02vdb                        0x0000558baae0654a <unavailable> + 5450

    5    libc.so.6                          0x00002ac19009a460 __libc_start_main +
    245

    6    tmpjxf02vdb                        0x0000558baae061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var total = 0\n    for i in lst {\n        if i % 2 == 1 {\n            total\
    \ += i\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpelw_b6et/tmpelw_b6et.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3043b8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3043881b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3043881988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30438807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelw_b6et                        0x0000557a47d4d50a <unavailable> + 5386

    5    libc.so.6                          0x00002b3043d76460 __libc_start_main +
    245

    6    tmpelw_b6et                        0x0000557a47d4d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    guard lst.count > 0 else {\n        return 0\n    }\n    var odds = (0..<lst.count).filter\
    \ { lst[$0] % 2 != 0 }\n    if odds.count == lst.count {\n        return odds.reduce(0)\n\
    \    }\n    var sum = 0\n    var pos = 0\n    for index in odds {\n        sum\
    \ = sum + lst[pos]\n        pos = index + 1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpmfdljefj.swift:16:29: error: missing argument for parameter #2\
    \ in call\n        return odds.reduce(0)\n                            ^\n    \
    \                        , <#(Int, Range<Int>.Element) throws -> Int#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    var oddSum = 0\n    var result = 0\n    var i = 0\n\
    \    for e in lst {\n        if i % 2 == 0 {\n            evenSum += e\n     \
    \   } else {\n            oddSum += e\n        }\n        i += 1\n    }\n    result\
    \ = oddSum - evenSum\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp_axd2vgy/tmp_axd2vgy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc14b45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc1483cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc1483c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc1483b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_axd2vgy                        0x00005619b37a750a <unavailable> + 5386

    5    libc.so.6                          0x00002acc14d31460 __libc_start_main +
    245

    6    tmp_axd2vgy                        0x00005619b37a7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpw73h9by_/tmpw73h9by_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee86e05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee86afcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee86afc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee86afb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw73h9by_                        0x000055f9994d154a <unavailable> + 5450

    5    libc.so.6                          0x00002aee86ff1460 __libc_start_main +
    245

    6    tmpw73h9by_                        0x000055f9994d11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 != 0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpw5bekjnm.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 != 0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evenSum = lst.reduce(0, {$0 + ($1 & 1)})\n    \n    return evenSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp41ti41ge/tmp41ti41ge.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3db71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3db414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3db414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3db4137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41ti41ge                        0x000055b3d69d838a <unavailable> + 5002

    5    libc.so.6                          0x00002ae3db909460 __libc_start_main +
    245

    6    tmp41ti41ge                        0x000055b3d69d7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpgibx1xh4.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    for element in lst {\n        if element % 2 == 0 {\n\
    \            evenSum += element\n        }\n    }\n    return evenSum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpu5guj0o6/tmpu5guj0o6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b448de3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b448db34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b448db34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b448db337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5guj0o6                        0x0000559bb7d8650a <unavailable> + 5386

    5    libc.so.6                          0x00002b448e029460 __libc_start_main +
    245

    6    tmpu5guj0o6                        0x0000559bb7d86169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 0 }.reduce { $0 + $1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpbw712ux5.swift:11:45: error: missing argument for parameter #1\
    \ in call\n    return lst.filter { $0 % 2 == 0 }.reduce { $0 + $1 }\n        \
    \                                    ^\n                                     \
    \       (<#Int#>)\nSwift.Sequence:2:28: note: 'reduce' declared here\n    @inlinable\
    \ public func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (_\
    \ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.reduce(0, { ($0, $1) in\n        guard $0 % 2 == 0 else { return\
    \ $0 + $1 }\n        return $0\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpe6ng1_z6.swift:11:29: error: expected parameter name followed by\
    \ ':'\n    return lst.reduce(0, { ($0, $1) in\n                            ^\n\
    /tmp/tmpe6ng1_z6.swift:11:33: error: expected parameter name followed by ':'\n\
    \    return lst.reduce(0, { ($0, $1) in\n                                ^\n/tmp/tmpe6ng1_z6.swift:12:15:\
    \ error: anonymous closure arguments cannot be used inside a closure that has\
    \ explicit arguments\n        guard $0 % 2 == 0 else { return $0 + $1 }\n    \
    \          ^\n/tmp/tmpe6ng1_z6.swift:12:41: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments\n        guard $0\
    \ % 2 == 0 else { return $0 + $1 }\n                                        ^\n\
    /tmp/tmpe6ng1_z6.swift:12:46: error: anonymous closure arguments cannot be used\
    \ inside a closure that has explicit arguments\n        guard $0 % 2 == 0 else\
    \ { return $0 + $1 }\n                                             ^\n/tmp/tmpe6ng1_z6.swift:13:16:\
    \ error: anonymous closure arguments cannot be used inside a closure that has\
    \ explicit arguments\n        return $0\n               ^\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var oddSum = 0\n    var evenSum = 0\n    var evenIndex = 0\n    for el in\
    \ lst {\n        if el % 2 == 1 {\n            evenSum += el\n        } else {\n\
    \            oddSum += el\n            evenIndex += 1\n            if evenIndex\
    \ == lst.count {\n                evenSum -= lst[evenIndex-1]\n            }\n\
    \        }\n    }\n    return oddSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp9suma1b6/tmp9suma1b6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab94a23ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab949f31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab949f31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab949f307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9suma1b6                        0x00005600cf0f25ba <unavailable> + 5562

    5    libc.so.6                          0x00002ab94a426460 __libc_start_main +
    245

    6    tmp9suma1b6                        0x00005600cf0f2219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for el in lst {\n        if el % 2 == 0 {\n            sum\
    \ += el\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpqo1jo7m7/tmpqo1jo7m7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b478264dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4782344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4782344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47823437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqo1jo7m7                        0x000055b573d9e50a <unavailable> + 5386

    5    libc.so.6                          0x00002b4782839460 __libc_start_main +
    245

    6    tmpqo1jo7m7                        0x000055b573d9e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var res = 0\n    for index1 in 0..<lst.count {\n        for index2 in index1..<lst.count\
    \ {\n            if index1 % 2 == 0 && index2 % 2 == 1 {\n                res\
    \ += lst[index2]\n            }\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmphggf3jvs/tmphggf3jvs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1425bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14258b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14258b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14258b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphggf3jvs                        0x000056417636b54a <unavailable> + 5450

    5    libc.so.6                          0x00002b1425da8460 __libc_start_main +
    245

    6    tmphggf3jvs                        0x000056417636b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var oddSum = 0\n    for i in lst {\n        if i % 2 == 1 {\n           \
    \ oddSum += i\n        }\n    }\n    return oddSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpvfgutctx/tmpvfgutctx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1c0819c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1c0510b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1c0510988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1c050f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfgutctx                        0x000055eb3b0c250a <unavailable> + 5386

    5    libc.so.6                          0x00002ad1c0a05460 __libc_start_main +
    245

    6    tmpvfgutctx                        0x000055eb3b0c2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.reduce(0, {$0 + $1 % 2 == 1})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp9s5nke8v.swift:11:39: error: cannot convert value of type 'Bool'\
    \ to closure result type 'Int'\n    return lst.reduce(0, {$0 + $1 % 2 == 1})\n\
    \                          ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660013600
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        sum += i\n        if i % 2 == 0\
    \ {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp1cqy9jtz/tmp1cqy9jtz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57f4bdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57f48d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57f48d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57f48d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cqy9jtz                        0x00005651906c050a <unavailable> + 5386

    5    libc.so.6                          0x00002b57f4dc6460 __libc_start_main +
    245

    6    tmp1cqy9jtz                        0x00005651906c0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.contains(0) {\n        return 0\n    }\n    var sum = 0\n    for val\
    \ in lst {\n        if val % 2 == 0 {\n            sum += val\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp89kn6hca/tmp89kn6hca.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaadde4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaddb43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaddb43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaddb427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89kn6hca                        0x0000557d4ba4357a <unavailable> + 5498

    5    libc.so.6                          0x00002aaade038460 __libc_start_main +
    245

    6    tmp89kn6hca                        0x0000557d4ba431d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var total = 0\n    for index in lst {\n        if index % 2 != 0 {\n    \
    \        total += index\n        }\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpelpcgkrv/tmpelpcgkrv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7d8f9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7d8c94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7d8c94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7d8c937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelpcgkrv                        0x000056353c1ea50a <unavailable> + 5386

    5    libc.so.6                          0x00002ae7d9189460 __libc_start_main +
    245

    6    tmpelpcgkrv                        0x000056353c1ea169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  if lst.count <= 0 {\n    return 0\n  }\n  \n  var sum = 0\n  for index in 0..<lst.count\
    \ {\n    let value = lst[index]\n    if value % 2 == 0 {\n      sum += value\n\
    \    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpacdkn_yd/tmpacdkn_yd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba4691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba4388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba4388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba43877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacdkn_yd                        0x00005650862be54a <unavailable> + 5450

    5    libc.so.6                          0x00002b4ba487d460 __libc_start_main +
    245

    6    tmpacdkn_yd                        0x00005650862be1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    for i in  lst {\n        if i%2 == 0 {\n           \
    \ evenSum += i\n        }\n    }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpap3eqv58/tmpap3eqv58.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a94adac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a947d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a947d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a947d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpap3eqv58                        0x000055bf70dbe50a <unavailable> + 5386

    5    libc.so.6                          0x00002b0a94cc6460 __libc_start_main +
    245

    6    tmpap3eqv58                        0x000055bf70dbe169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i % 2 != 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp53hi4fym/tmp53hi4fym.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace4b8ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace4b5e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace4b5e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace4b5e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53hi4fym                        0x000055979144e50a <unavailable> + 5386

    5    libc.so.6                          0x00002ace4bad7460 __libc_start_main +
    245

    6    tmp53hi4fym                        0x000055979144e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    // Create a set to keep track of odd/even indices, and add the even indices.\n\
    \    var even = Set<Int>()\n    for index in 0..<lst.count {\n        even.insert(index)\
    \ if (index % 2 == 0)\n    }\n    // Get the sum of those odd indices.\n    return\
    \ lst.filter { index -> Bool in\n        even.contains(index) && index % 2 ==\
    \ 1\n    }.reduce(0,+)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp6y3a0qsh.swift:14:27: error: consecutive statements on a line must\
    \ be separated by ';'\n        even.insert(index) if (index % 2 == 0)\n      \
    \                    ^\n                          ;\n/tmp/tmp6y3a0qsh.swift:14:47:\
    \ error: expected '{' after 'if' condition\n        even.insert(index) if (index\
    \ % 2 == 0)\n                                              ^\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp2p6z0jze.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmptl1wk120/tmptl1wk120.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba15037ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba150075b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba150075988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1500747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl1wk120                        0x000056234a1e450a <unavailable> + 5386

    5    libc.so.6                          0x00002ba15056a460 __libc_start_main +
    245

    6    tmptl1wk120                        0x000056234a1e4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013452
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return sum(\n        arr[start ..< end]\n            .filter { $0 % 2 ==\
    \ 1 }\n            .map { $0 + arr[start + $0] }\n    )\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpx6gqi5aq.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(\n           ^~~\n/tmp/tmpx6gqi5aq.swift:12:9: error: cannot find 'arr'\
    \ in scope\n        arr[start ..< end]\n        ^~~\n/tmp/tmpx6gqi5aq.swift:12:13:\
    \ error: cannot find 'start' in scope\n        arr[start ..< end]\n          \
    \  ^~~~~\n/tmp/tmpx6gqi5aq.swift:12:23: error: cannot find 'end' in scope\n  \
    \      arr[start ..< end]\n                      ^~~\n/tmp/tmpx6gqi5aq.swift:14:25:\
    \ error: cannot find 'arr' in scope\n            .map { $0 + arr[start + $0] }\n\
    \                        ^~~\n/tmp/tmpx6gqi5aq.swift:14:29: error: cannot find\
    \ 'start' in scope\n            .map { $0 + arr[start + $0] }\n              \
    \              ^~~~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $1 % 2 == 1 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpxdy12p0c.swift:11:23: error: contextual closure type '(Int) throws\
    \ -> Bool' expects 1 argument, but 2 were used in closure body\n    return lst.filter\
    \ { $1 % 2 == 1 }.sum()\n                      ^\n/tmp/tmpxdy12p0c.swift:11:39:\
    \ error: value of type '[Int]' has no member 'sum'\n    return lst.filter { $1\
    \ % 2 == 1 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmptl1wk120/tmptl1wk120.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba15037ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba150075b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba150075988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1500747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl1wk120                        0x000056234a1e450a <unavailable> + 5386

    5    libc.so.6                          0x00002ba15056a460 __libc_start_main +
    245

    6    tmptl1wk120                        0x000056234a1e4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013452
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return sum(lst) % 2 == 0 ? 0 : lst[find(lst) % 2 == 0 ? 0 : find(lst) //\
    \ 2] - lst[find(lst) % 2 == 0 ? 1 : find(lst) // 2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp2885h59o.swift:12:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmp2885h59o.swift:11:39: note: to match this opening '['\n    return sum(lst)\
    \ % 2 == 0 ? 0 : lst[find(lst) % 2 == 0 ? 0 : find(lst) // 2] - lst[find(lst)\
    \ % 2 == 0 ? 1 : find(lst) // 2]\n                                      ^\n/tmp/tmp2885h59o.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(lst) % 2 == 0 ? 0 : lst[find(lst)\
    \ % 2 == 0 ? 0 : find(lst) // 2] - lst[find(lst) % 2 == 0 ? 1 : find(lst) // 2]\n\
    \           ^~~\n/tmp/tmp2885h59o.swift:11:40: error: cannot find 'find' in scope\n\
    \    return sum(lst) % 2 == 0 ? 0 : lst[find(lst) % 2 == 0 ? 0 : find(lst) //\
    \ 2] - lst[find(lst) % 2 == 0 ? 1 : find(lst) // 2]\n                        \
    \               ^~~~\n/tmp/tmp2885h59o.swift:11:65: error: cannot find 'find'\
    \ in scope\n    return sum(lst) % 2 == 0 ? 0 : lst[find(lst) % 2 == 0 ? 0 : find(lst)\
    \ // 2] - lst[find(lst) % 2 == 0 ? 1 : find(lst) // 2]\n                     \
    \                                           ^~~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  return odd_even_rec(lst, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpmq09lisb.swift:11:10: error: cannot find 'odd_even_rec' in scope\n\
    \  return odd_even_rec(lst, 0)\n         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in 0..<lst.count {\n        if ((lst.indices.contains(i)\
    \ & Int(lst[i])) % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpq_nsmuat.swift:13:26: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        if ((lst.indices.contains(i) & Int(lst[i]))\
    \ % 2 == 0) {\n                         ^\n"
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var result = 0\n    for element in lst {\n        if element % 2 == 0 {\n\
    \            result += element\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpjvl5x8au/tmpjvl5x8au.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace7b24bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace7af42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace7af42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace7af417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvl5x8au                        0x000055c068b4f50a <unavailable> + 5386

    5    libc.so.6                          0x00002ace7b437460 __libc_start_main +
    245

    6    tmpjvl5x8au                        0x000055c068b4f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    // write your code in Swift 4.2 or later\n    return lst.filter{$0%2 == 0}.reduce(0,\
    \ +) \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpimunaqno/tmpimunaqno.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b04447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0413eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0413e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0413d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpimunaqno                        0x0000564996c094da <unavailable> + 5338

    5    libc.so.6                          0x00002b6b04633460 __libc_start_main +
    245

    6    tmpimunaqno                        0x0000564996c09139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var odd = 0\n    for val in lst {\n        if val % 2 == 1 {\n          \
    \  odd += val\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpxzvtpwlv/tmpxzvtpwlv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a61d64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a61a5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a61a5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a61a5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzvtpwlv                        0x000055ecab09c50a <unavailable> + 5386

    5    libc.so.6                          0x00002b3a61f50460 __libc_start_main +
    245

    6    tmpxzvtpwlv                        0x000055ecab09c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i%2 == 0 {\n            sum +=\
    \ i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpfx9m47_d/tmpfx9m47_d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f71c23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f7191ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f7191a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f719197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfx9m47_d                        0x000055c03f34d50a <unavailable> + 5386

    5    libc.so.6                          0x00002b0f71e0f460 __libc_start_main +
    245

    6    tmpfx9m47_d                        0x000055c03f34d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter{ $0 % 2 == 1 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpmk1fetvz/tmpmk1fetvz.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1c8ec5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1c8bbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1c8bbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1c8bbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmk1fetvz                        0x000055586299e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ae1c90b1460 __libc_start_main +
    245

    6    tmpmk1fetvz                        0x000055586299e139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    // Base case\n    if lst.contains(0) {\n        return 0\n    }\n\n    //\
    \ Sum all even numbers\n    var evenSum = 0\n    for element in lst {\n      \
    \  if element % 2 == 0 {\n            evenSum += element\n        }\n    }\n\n\
    \    // Sum the odd numbers in the remaining array\n    var oddSum = 0\n    for\
    \ element in lst[1...] {\n        if element % 2 != 0 {\n            oddSum +=\
    \ element\n        }\n    }\n\n    // Combine them\n    return evenSum + oddSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp59v8cr_e/tmp59v8cr_e.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24a05e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24a02d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24a02d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24a02d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59v8cr_e                        0x000055a297e0575a <unavailable> + 5978

    5    libc.so.6                          0x00002b24a07cc460 __libc_start_main +
    245

    6    tmp59v8cr_e                        0x000055a297e053b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter({ $0 % 2 == 1 }).reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpr_rpvasn/tmpr_rpvasn.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46e8e4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46e8b46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46e8b46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46e8b457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_rpvasn                        0x00005572e9b614da <unavailable> + 5338

    5    libc.so.6                          0x00002b46e903b460 __libc_start_main +
    245

    6    tmpr_rpvasn                        0x00005572e9b61139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    \n    var sum = 0\n    \n    for i in 0..<lst.count {\n        if lst[i]\
    \ % 2 != 0 && lst[i] > 0 {\n            sum += lst[i]\n        }\n    }\n    \n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpr4wcz91l/tmpr4wcz91l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe794e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe791ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe791dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe791dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4wcz91l                        0x000056200d12754a <unavailable> + 5450

    5    libc.so.6                          0x00002afe796d2460 __libc_start_main +
    245

    6    tmpr4wcz91l                        0x000056200d1271a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  if lst.isEmpty {\n    return 0\n  }\n  return lst.filter { $0 % 2 == 1 }.sum()\
    \ + (lst.filter { $0 % 2 == 0 }.sum())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmph_x4bqod.swift:14:37: error: value of type '[Int]' has no member\
    \ 'sum'\n  return lst.filter { $0 % 2 == 1 }.sum() + (lst.filter { $0 % 2 == 0\
    \ }.sum())\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmph_x4bqod.swift:14:73:\
    \ error: value of type '[Int]' has no member 'sum'\n  return lst.filter { $0 %\
    \ 2 == 1 }.sum() + (lst.filter { $0 % 2 == 0 }.sum())\n                      \
    \                       ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  var sum = 0\n  for (ix, x) in lst.enumerated() {\n    if x % 2 == 0 {\n   \
    \   sum += x\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpa70na5x2/tmpa70na5x2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dd2ae4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dd27dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dd27db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dd27da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa70na5x2                        0x0000559a1e07f5ba <unavailable> + 5562

    5    libc.so.6                          0x00002b4dd2cd0460 __libc_start_main +
    245

    6    tmpa70na5x2                        0x0000559a1e07f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evens = lst.filter{ $0 % 2 == 0 }\n    return evens.reduce(0,+)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpgtl0edh4/tmpgtl0edh4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7547976c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b754766db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b754766d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b754766c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtl0edh4                        0x000055e687bd84da <unavailable> + 5338

    5    libc.so.6                          0x00002b7547b62460 __libc_start_main +
    245

    6    tmpgtl0edh4                        0x000055e687bd8139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 {\n    \
    \        sum += lst[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmper195ded/tmper195ded.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af43a2aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af439fa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af439fa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af439fa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmper195ded                        0x00005639f745e6ec <unavailable> + 5868

    5    libc.so.6                          0x00002af43a496460 __libc_start_main +
    245

    6    tmper195ded                        0x00005639f745e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var result = 0\n    if lst.count > 0 {\n        var i = lst.firstIndex{$0\
    \ % 2 != 0}\n        while i != nil {\n            result += lst[i]\n        \
    \    i = lst.firstIndex{$0 % 2 != 0}\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpbs4fb89w.swift:15:27: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result += lst[i]\n                          ^\n/tmp/tmpbs4fb89w.swift:15:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result += lst[i]\n                          ^\n         \
    \                   ?? <#default value#>\n/tmp/tmpbs4fb89w.swift:15:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result += lst[i]\n                          ^\n                 \
    \          !\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.count == 0 {\n        return 0\n    }\n    var evenSum = 0\n    for\
    \ element in lst {\n        if element % 2 == 0 {\n            evenSum += element\n\
    \        }\n    }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpbplirvac/tmpbplirvac.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66bd585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66bd27cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66bd27c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66bd27b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbplirvac                        0x00005647d979056a <unavailable> + 5482

    5    libc.so.6                          0x00002b66bd771460 __libc_start_main +
    245

    6    tmpbplirvac                        0x00005647d97901c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return odd(lst).reduce(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpiwogwvds.swift:11:12: error: cannot find 'odd' in scope\n    return\
    \ odd(lst).reduce(0)\n           ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    \n    var sum = 0\n    \n    for i in 0 ..< lst.count {\n        if ((i &\
    \ 1) == 0) {\n            sum += lst[i]\n        }\n    }\n    \n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpxdf79f7q/tmpxdf79f7q.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95e05b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95e02abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95e02ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95e02aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdf79f7q                        0x00005639c4da36ec <unavailable> + 5868

    5    libc.so.6                          0x00002b95e07a0460 __libc_start_main +
    245

    6    tmpxdf79f7q                        0x00005639c4da31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst\n        .filter { $0 % 2 == 1 }\n        .filter{ $0 % 2 != 0\
    \ }\n        .reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpds10bk15/tmpds10bk15.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad581f43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad581c3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad581c3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad581c397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpds10bk15                        0x00005565c26e54da <unavailable> + 5338

    5    libc.so.6                          0x00002ad58212f460 __libc_start_main +
    245

    6    tmpds10bk15                        0x00005565c26e5139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum: Int = 0\n    for index in lst {\n        if index % 2 == 0 {\n \
    \           sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpcr1_e48i/tmpcr1_e48i.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eaac20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eaa917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eaa917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eaa9167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcr1_e48i                        0x0000557662cc750a <unavailable> + 5386

    5    libc.so.6                          0x00002b5eaae0c460 __libc_start_main +
    245

    6    tmpcr1_e48i                        0x0000557662cc7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { lst -> Bool in\n        return lst % 2 == 1\n    }.map\
    \ { lst -> Int in\n        return lst / 2\n    }.sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmptac5q62l.swift:15:7: error: value of type '[Int]' has no member\
    \ 'sum'\n    }.sum\n~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    \n    for val in lst {\n        if val % 2 == 0 {\n    \
    \        sum += val\n        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpzqveofqt/tmpzqveofqt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5469a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b546976cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b546976c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b546976b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqveofqt                        0x0000557ff6aa750a <unavailable> + 5386

    5    libc.so.6                          0x00002b5469c61460 __libc_start_main +
    245

    6    tmpzqveofqt                        0x0000557ff6aa7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter({ (value) -> Bool in\n        value % 2 != 0\n    }).reduce(0)\
    \ { (sum, value) -> Int in\n        sum + value\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpcvr42nr9/tmpcvr42nr9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1284862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1284559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1284559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12845587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvr42nr9                        0x00005579a303d4da <unavailable> + 5338

    5    libc.so.6                          0x00002b1284a4e460 __libc_start_main +
    245

    6    tmpcvr42nr9                        0x00005579a303d139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.count == 0 {\n        return 0\n    }\n    var sumOdd = lst[0]\n \
    \   for number in lst {\n        if number % 2 == 0 {\n            sumOdd += number\n\
    \        }\n    }\n    return sumOdd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp0osp84so/tmp0osp84so.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20a2babc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20a28a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20a28a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20a28a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0osp84so                        0x00005617413245ba <unavailable> + 5562

    5    libc.so.6                          0x00002b20a2d97460 __libc_start_main +
    245

    6    tmp0osp84so                        0x0000561741324219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmptl1wk120/tmptl1wk120.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba15037ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba150075b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba150075988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1500747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl1wk120                        0x000056234a1e450a <unavailable> + 5386

    5    libc.so.6                          0x00002ba15056a460 __libc_start_main +
    245

    6    tmptl1wk120                        0x000056234a1e4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    \n    let startIndex: Int = lst.startIndex\n    \n    var oddSum = 0\n  \
    \  \n    for index in 0..<lst.count {\n        \n        if index % 2 != 0 {\n\
    \            oddSum += lst[index]\n        }\n    }\n    \n    return oddSum -\
    \ lst.filter{$0 % 2 == 0}.prefix(startIndex).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp9nm8rvfp/tmp9nm8rvfp.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86a22bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86a1fb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86a1fb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86a1fb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9nm8rvfp                        0x000055d834e2780a <unavailable> + 6154

    5    libc.so.6                          0x00002b86a24a9460 __libc_start_main +
    245

    6    tmp9nm8rvfp                        0x000055d834e27469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        sum += lst[i % 2 == 0]\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp6q6u2pmt.swift:13:26: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        sum += lst[i % 2 == 0]\n          \
    \               ^\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for element in lst {\n        if element % 2 == 0 {\n  \
    \          sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp3dz9ooyd/tmp3dz9ooyd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0260ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02609c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02609c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02609c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dz9ooyd                        0x0000557e19aa150a <unavailable> + 5386

    5    libc.so.6                          0x00002b0260eb9460 __libc_start_main +
    245

    6    tmp3dz9ooyd                        0x0000557e19aa1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenIndexes: [Int] = []\n    var oddIndexes: [Int] = []\n    \n    for\
    \ i in 0..<lst.count {\n        if i % 2 == 0 {\n            evenIndexes.append(i)\n\
    \        } else {\n            oddIndexes.append(i)\n        }\n    }\n    \n\
    \    \n    return evenIndexes.reduce(0, +) + oddIndexes.reduce(0, +)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp5fl4bhyo/tmp5fl4bhyo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3019bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3016b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3016b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3016b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5fl4bhyo                        0x0000555c64c6e5ba <unavailable> + 5562

    5    libc.so.6                          0x00002ae301ba9460 __libc_start_main +
    245

    6    tmp5fl4bhyo                        0x0000555c64c6e219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpgibx1xh4.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let len = lst.count\n    if len == 0 {\n        return 0\n    }\n    let\
    \ even = lst[0 ..< len/2].filter { $0 % 2 == 0 }\n    let odd = lst[0 ..< len/2].filter\
    \ { $0 % 2 != 0 }\n    let sum = even.map() + odd\n    return sum.fold(0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp9p6zckun.swift:17:24: error: missing argument for parameter #1\
    \ in call\n    let sum = even.map() + odd\n                       ^\n        \
    \               <#(Int) throws -> Int#>\nSwift.Collection:2:28: note: 'map' declared\
    \ here\n    @inlinable public func map<T>(_ transform: (Self.Element) throws ->\
    \ T) rethrows -> [T]\n                           ^\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpgibx1xh4.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in lst {\n        if num % 2 == 0 {\n          \
    \  sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmploz5533r/tmploz5533r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b797dee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b797dbdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b797dbdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b797dbde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmploz5533r                        0x000055d01674e50a <unavailable> + 5386

    5    libc.so.6                          0x00002b797e0d4460 __libc_start_main +
    245

    6    tmploz5533r                        0x000055d01674e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i % 2 != 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp53hi4fym/tmp53hi4fym.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace4b8ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace4b5e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace4b5e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace4b5e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53hi4fym                        0x000055979144e50a <unavailable> + 5386

    5    libc.so.6                          0x00002ace4bad7460 __libc_start_main +
    245

    6    tmp53hi4fym                        0x000055979144e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  return lst.filter{ $0 % 2 == 0 }.sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp0ty42k76.swift:11:36: error: value of type '[Int]' has no member\
    \ 'sum'\n  return lst.filter{ $0 % 2 == 0 }.sum\n         ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum: Int = 0\n    for number in lst {\n        if number % 2 == 1 {\n\
    \            sum += number\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmptbyztshh/tmptbyztshh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c988cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c985c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c985c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c985c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbyztshh                        0x000055effe5de50a <unavailable> + 5386

    5    libc.so.6                          0x00002b2c98aba460 __libc_start_main +
    245

    6    tmptbyztshh                        0x000055effe5de169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evenIndexes: Set<Int> = lst.indices.filter{$0 % 2 == 0}\n    let sum\
    \ = evenIndexes.reduce(0, { (res, i) -> Int in\n        return res + lst[i]\n\
    \    })\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp6zmmpw6u.swift:11:45: error: cannot convert value of type '[Range<Array<Int>.Index>.Element]'\
    \ (aka 'Array<Int>') to specified type 'Set<Int>'\n    let evenIndexes: Set<Int>\
    \ = lst.indices.filter{$0 % 2 == 0}\n                                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.sorted() == lst {\n        return lst[0]\n    }\n    var sum = lst[0]\n\
    \    for val in lst {\n        if val & 1 == 1 {\n            sum += val\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmphuinjuh8/tmphuinjuh8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba927797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba92748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba92748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba92748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphuinjuh8                        0x000055a66f31d5da <unavailable> + 5594

    5    libc.so.6                          0x00002ba927983460 __libc_start_main +
    245

    6    tmphuinjuh8                        0x000055a66f31d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    var count = 2\n    for i in lst {\n        if count % 2\
    \ == 0 {\n            sum += i\n        }\n        count += 1\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpndkq0qef/tmpndkq0qef.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cdc538c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cdc22fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cdc22f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cdc22e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndkq0qef                        0x000055e21bd8e6ac <unavailable> + 5804

    5    libc.so.6                          0x00002b2cdc724460 __libc_start_main +
    245

    6    tmpndkq0qef                        0x000055e21bd8e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for val in lst {\n        if val % 2 == 1 {\n          \
    \  sum += val\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpa36p61lu/tmpa36p61lu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ec8a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ec870eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ec870e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ec870d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa36p61lu                        0x000055ef46e7750a <unavailable> + 5386

    5    libc.so.6                          0x00002b1ec8c03460 __libc_start_main +
    245

    6    tmpa36p61lu                        0x000055ef46e77169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var total = 0\n    var evenSum = 0\n    for i in lst {\n        if i % 2\
    \ == 0 {\n            evenSum += i\n        } else {\n            total += evenSum\n\
    \            evenSum = 0\n        }\n    }\n    return total + evenSum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp7l5rklxc/tmp7l5rklxc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e0d599c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e0d290b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e0d290988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e0d28f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7l5rklxc                        0x0000563ca155050a <unavailable> + 5386

    5    libc.so.6                          0x00002b6e0d785460 __libc_start_main +
    245

    6    tmp7l5rklxc                        0x0000563ca1550169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return sumOdd(lst, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpq05tk137.swift:11:12: error: cannot find 'sumOdd' in scope\n  \
    \  return sumOdd(lst, 0)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    \n    var sum = 0\n    for i in 0..<lst.count {\n        if lst[i % 2] !=\
    \ 0 { sum += lst[i % 2] }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpwsv1gcdu/tmpwsv1gcdu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af095dcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af095ac1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af095ac1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af095ac07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsv1gcdu                        0x0000564885f8f54a <unavailable> + 5450

    5    libc.so.6                          0x00002af095fb6460 __libc_start_main +
    245

    6    tmpwsv1gcdu                        0x0000564885f8f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for idx, i in enumerate(lst) {\n        if idx % 2 == 0\
    \ {\n            if i >= 0 {\n                sum += i\n            }\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpnxxfgald.swift:12:12: error: expected 'in' after for-each pattern\n\
    \    for idx, i in enumerate(lst) {\n           ^\n/tmp/tmpnxxfgald.swift:12:12:\
    \ error: expected Sequence expression for for-each loop\n    for idx, i in enumerate(lst)\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.count == 0 {\n        return 0\n    }\n    var total = 0\n    for\
    \ i in 0..<lst.count {\n        if i % 2 == 1 {\n            total += lst[i]\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpvhkevpxs/tmpvhkevpxs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64e3b6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64e3864b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64e3864988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64e38637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhkevpxs                        0x0000564cc939954a <unavailable> + 5450

    5    libc.so.6                          0x00002b64e3d59460 __libc_start_main +
    245

    6    tmpvhkevpxs                        0x0000564cc93991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter{ $0 % 2 == 0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpcmn1bre4.swift:11:38: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter{ $0 % 2 == 0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    var i = 0\n    \n    while i < lst.count {\n       \
    \ if i % 2 == 0 {\n            evenSum += lst[i]\n        }\n        i += 2\n\
    \    }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpq6o3kb1g/tmpq6o3kb1g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d8bc30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d8b927b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d8b927988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d8b9267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6o3kb1g                        0x0000563dd7f595fc <unavailable> + 5628

    5    libc.so.6                          0x00002b7d8be1c460 __libc_start_main +
    245

    6    tmpq6o3kb1g                        0x0000563dd7f590b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var res = Int()\n    for i in 0..<lst.count {\n        if lst[i] % 2 == 0\
    \ {\n            s += lst[i]\n        }\n        if lst[i] % 2 == 1 {\n      \
    \      res += lst[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp1t8ejd3q.swift:14:13: error: cannot find 's' in scope\n       \
    \     s += lst[i]\n            ^\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.reduce(0){ (sum, item) in\n        if item % 2 == 1 {\n      \
    \      sum += item\n        }\n        return sum\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpvgtz42ep.swift:13:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += item\n            ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n\n    for element in lst {\n        if element % 2 == 0\
    \ {\n            evenSum += element\n        }\n    }\n    return evenSum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpde52mzvq/tmpde52mzvq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57cb737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57cb42eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57cb42e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57cb42d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde52mzvq                        0x000055e1e927850a <unavailable> + 5386

    5    libc.so.6                          0x00002b57cb923460 __libc_start_main +
    245

    6    tmpde52mzvq                        0x000055e1e9278169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let odd = (0..<lst.count).filter({ $0 % 2 == 1 }).map { $0 }\n    let even\
    \ = lst.filter { $0 % 2 == 0 }\n    return even.fold(0, { $0 + $1 })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpw814wy14.swift:13:17: error: value of type '[Int]' has no member\
    \ 'fold'\n    return even.fold(0, { $0 + $1 })\n           ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  if lst.count < 2 {\n    return 0\n  }\n  var sum = lst[0]\n  for i = 1; i <\
    \ lst.count; i++ {\n    if lst[i] % 2 == 0 {\n      sum += lst[i]\n    }\n  }\n\
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpmkdaeo6s.swift:15:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 1; i < lst.count; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    for num in lst {\n        if num % 2 == 0 {\n      \
    \      evenSum += num\n        }\n    }\n    return evenSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp34444czc/tmp34444czc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04563abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04560a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04560a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04560a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34444czc                        0x000055b6274af50a <unavailable> + 5386

    5    libc.so.6                          0x00002b0456597460 __libc_start_main +
    245

    6    tmp34444czc                        0x000055b6274af169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return odd(lst, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmplrfweui4.swift:11:12: error: cannot find 'odd' in scope\n    return\
    \ odd(lst, 0)\n           ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmptl1wk120/tmptl1wk120.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba15037ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba150075b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba150075988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1500747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl1wk120                        0x000056234a1e450a <unavailable> + 5386

    5    libc.so.6                          0x00002ba15056a460 __libc_start_main +
    245

    6    tmptl1wk120                        0x000056234a1e4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in 0..<lst.count {\n        sum += lst[i % lst.count]\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpl4bhtfzy/tmpl4bhtfzy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eef0fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eeedf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6eeedf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6eeedf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4bhtfzy                        0x0000561f4264254a <unavailable> + 5450

    5    libc.so.6                          0x00002b6eef2e6460 __libc_start_main +
    245

    6    tmpl4bhtfzy                        0x0000561f426421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    // TODO: Write your code here.\n    if lst.count == 0 {\n        return 0\n\
    \    }\n    var sum = 0\n    for x in lst {\n        if x % 2 == 0 {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpg838yilc/tmpg838yilc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e70628c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e7031fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e7031f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e7031e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg838yilc                        0x000055ce0406d56a <unavailable> + 5482

    5    libc.so.6                          0x00002b5e70814460 __libc_start_main +
    245

    6    tmpg838yilc                        0x000055ce0406d1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0&1 != 0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmppu8b32hc/tmppu8b32hc.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd1c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd1929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd1929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd19287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppu8b32hc                        0x000055ab9966344a <unavailable> + 5194

    5    libc.so.6                          0x00002aabd1e1e460 __libc_start_main +
    245

    6    tmppu8b32hc                        0x000055ab996630a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    // If there are at least 2 items in the list, there is an odd sum.\n    if\
    \ lst.count >= 2 {\n        return lst[0] + lst[1] + lst[1]\n    }\n\n    // Otherwise\
    \ we must sum the even sums.\n    var total = 0\n    for e in lst {\n        total\
    \ += e\n        if e % 2 == 0 {\n            return total\n        }\n    }\n\
    \    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpxebx09jc/tmpxebx09jc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad777a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad777779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad777779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7777787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxebx09jc                        0x00005590ed4145ba <unavailable> + 5562

    5    libc.so.6                          0x00002ad777c6e460 __libc_start_main +
    245

    6    tmpxebx09jc                        0x00005590ed414219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter{ $0 % 2 == 1 }.sum() % 1000000007\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpa9tuourp.swift:11:38: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter{ $0 % 2 == 1 }.sum() % 1000000007\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 != 0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpw5bekjnm.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 != 0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst[lst.reduce(0, {$0 + ($1&1)*2})]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4aa678c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4aa36f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4aa36f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4aa36f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4aa36ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab4aa16ee83 <unavailable> + 188035

    6    tmpm0juru1v                        0x0000557bb887297e <unavailable> + 6526

    7    tmpm0juru1v                        0x0000557bb887235c <unavailable> + 4956

    8    libc.so.6                          0x00002ab4aa864460 __libc_start_main +
    245

    9    tmpm0juru1v                        0x0000557bb8872039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var oddSum = 0\n    for i in  lst {\n        if i % 2 != 0 {\n          \
    \  oddSum += i\n        }\n    }\n    return oddSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpg2rexgdj/tmpg2rexgdj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5f4c08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5f48ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5f48ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5f48fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2rexgdj                        0x000055f8b766c50a <unavailable> + 5386

    5    libc.so.6                          0x00002ab5f4df4460 __libc_start_main +
    245

    6    tmpg2rexgdj                        0x000055f8b766c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    var even_count = 0\n    var odd_count = 0\n\n    for elt\
    \ in lst {\n        if elt % 2 == 0 {\n            even_count += 1\n        }\
    \ else {\n            sum += elt\n            odd_count += 1\n        }\n    }\n\
    \n    // handle odd numbers\n    if odd_count > 0 {\n        sum += lst[odd_count\
    \ - 1]\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp8sdasaef/tmp8sdasaef.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e63b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6380ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6380a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e638097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8sdasaef                        0x000055f45b97c55a <unavailable> + 5466

    5    libc.so.6                          0x00002b8e63cff460 __libc_start_main +
    245

    6    tmp8sdasaef                        0x000055f45b97c1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    func sumOddsEvens(_ list: [Int]) -> [Int] {\n        if list.isEmpty {\n\
    \            return []\n        }\n        var evenSum = 0\n        var oddSum\
    \ = 0\n        var currentIndex = 0\n        for index in 0 ..< list.count {\n\
    \            if index % 2 == 0 {\n                evenSum += list[index]\n   \
    \         } else {\n                oddSum += list[index]\n            }\n   \
    \         currentIndex += 1\n            if currentIndex < list.count {\n    \
    \            evenSum += list[currentIndex]\n                oddSum += list[currentIndex]\n\
    \            }\n        }\n        return [oddSum, evenSum]\n    }\n    return\
    \ sumOddsEvens(lst).0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpk8l0jg0o.swift:32:30: error: value of type '[Int]' has no member\
    \ '0'\n    return sumOddsEvens(lst).0\n           ~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  return lst.filter{$0&1!=0}.sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmptddwuuxk.swift:11:30: error: value of type '[Int]' has no member\
    \ 'sum'\n  return lst.filter{$0&1!=0}.sum\n         ~~~~~~~~~~~~~~~~~~~ ^~~\n\
    /tmp/tmptddwuuxk.swift:11:23: error: expression is not assignable: binary operator\
    \ returns immutable value\n  return lst.filter{$0&1!=0}.sum\n                \
    \    ~~^~~\n/tmp/tmptddwuuxk.swift:11:26: error: cannot convert value of type\
    \ '()' to closure result type 'Bool'\n  return lst.filter{$0&1!=0}.sum\n     \
    \               ~~~~~^~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  var result: Int = 0\n  var sum: Int = 0\n  for element in lst {\n    if element\
    \ % 2 == 0 {\n      sum += element\n    }\n  }\n  for element in lst {\n    if\
    \ element % 2 != 0 && element != sum {\n      result += element\n    }\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpixikmufn/tmpixikmufn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fac6d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fac3ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fac3cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fac3cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixikmufn                        0x000056450f9a050a <unavailable> + 5386

    5    libc.so.6                          0x00002b3fac8c1460 __libc_start_main +
    245

    6    tmpixikmufn                        0x000056450f9a0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    guard lst.count > 0 else { return 0 }\n    return lst.filter {\n        guard\
    \ $0 % 2 != 0 else { return false }\n        return true\n    }.sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmplhm2261i.swift:15:7: error: value of type '[Int]' has no member\
    \ 'sum'\n    }.sum\n~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    \n    let sum = lst.reduce(0) { (sum, num) -> Int in\n        if num % 2\
    \ == 1 { sum += num }\n        return sum\n    }\n    \n    if sum % 2 == 1 {\
    \ \n        return sum\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpcvru76dc.swift:13:31: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        if num % 2 == 1 { sum += num }\n\
    \                          ~~~ ^\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.reduce(0, {$0 + ($1 % 2 == 0 ? $1 : 0)})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpp3aerc6c/tmpp3aerc6c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1dc104c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1dbdfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1dbdfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1dbdfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3aerc6c                        0x000055770c90641a <unavailable> + 5146

    5    libc.so.6                          0x00002ac1dc2f0460 __libc_start_main +
    245

    6    tmpp3aerc6c                        0x000055770c906079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    // base case: if the array is empty, return the zero\n    if lst.count ==\
    \ 0 {\n        return 0\n    }\n\n    // base case: if the array is even, return\
    \ zero\n    if lst.count % 2 == 0 {\n        return 0\n    }\n\n    // base case:\
    \ if the array is odd, return the sum of the first and last elements\n    return\
    \ lst[0] + lst[lst.count-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpdbneyku_/tmpdbneyku_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cf995cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cf9653b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cf9653988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cf96527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdbneyku_                        0x000055b44e1af45a <unavailable> + 5210

    5    libc.so.6                          0x00002b2cf9b48460 __libc_start_main +
    245

    6    tmpdbneyku_                        0x000055b44e1af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let sum = lst.reduce(0){ (accum, num) in\n        accum + Int(num) % 2 ==\
    \ 0 ? num : 0\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpd34jcqig/tmpd34jcqig.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7af927fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7af8f76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7af8f76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7af8f757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd34jcqig                        0x000055cfd422b54a <unavailable> + 5450

    5    libc.so.6                          0x00002b7af946b460 __libc_start_main +
    245

    6    tmpd34jcqig                        0x000055cfd422b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  return lst.reduce(0) { $0 + ($1 % 2 == 0 ? $1 : 0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpv1pvvd9x/tmpv1pvvd9x.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97a3f00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97a3bf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97a3bf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97a3bf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1pvvd9x                        0x0000559772a8241a <unavailable> + 5146

    5    libc.so.6                          0x00002b97a40ec460 __libc_start_main +
    245

    6    tmpv1pvvd9x                        0x0000559772a82079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in lst {\n        sum += num % 2 != 0 ? num : 0\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpjzvlpedh/tmpjzvlpedh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac95462dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac954324b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac954324988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9543237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzvlpedh                        0x0000558538d9950a <unavailable> + 5386

    5    libc.so.6                          0x00002ac954819460 __libc_start_main +
    245

    6    tmpjzvlpedh                        0x0000558538d99169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  var oddSum = 0\n  var sum = 0\n  for item in lst {\n    if item % 2 == 0 {\n\
    \      sum += item\n    } else {\n      oddSum += item\n    }\n  }\n  if oddSum\
    \ > 0 {\n    return oddSum\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpbt_1fzem/tmpbt_1fzem.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e013cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e010c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e010c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e010c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbt_1fzem                        0x0000560e74e7d50a <unavailable> + 5386

    5    libc.so.6                          0x00002b7e015b9460 __libc_start_main +
    245

    6    tmpbt_1fzem                        0x0000560e74e7d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  guard lst.count > 0 else { return 0 }\n  var res = lst[0]\n  for el in lst[1..]\
    \ {\n    if el % 2 == 0 {\n      res += el\n    }\n  }\n  return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpgqut9e0p.swift:13:18: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for el in lst[1..] {\n                 ^~\n         \
    \        ...\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.count == 0 {\n        return 0;\n    }\n    var sum = 0\n    for index\
    \ in 0..<lst.count {\n        if index % 2 == 0 {\n            sum += lst[index]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpiggz_f7g/tmpiggz_f7g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e7674fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e76446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e76446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e764457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiggz_f7g                        0x00005619928cf6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b2e7693b460 __libc_start_main +
    245

    6    tmpiggz_f7g                        0x00005619928cf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  if lst.filter({ $0 % 2 == 1 }).count == lst.count {\n    return 0\n  }\n  return\
    \ lst.filter { $0 % 2 == 1 }.map({ $0 + $0 }).reduce(0) { $0 + $1 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmps4w451jg/tmps4w451jg.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47dd8d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47dd5cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47dd5cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47dd5ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4w451jg                        0x000055bf2345e5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b47ddac0460 __libc_start_main +
    245

    6    tmps4w451jg                        0x000055bf2345e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    for number in lst {\n        evenSum = evenSum + number\n\
    \    }\n    var oddSum = 0\n    for number in lst {\n        if number % 2 ==\
    \ 0 {\n            oddSum = oddSum + number\n        }\n    }\n    if evenSum\
    \ == oddSum {\n        return 0\n    }\n    return evenSum + oddSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp9j5xi8w6/tmp9j5xi8w6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9190e86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9190b7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9190b7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9190b7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9j5xi8w6                        0x0000555865d9a50a <unavailable> + 5386

    5    libc.so.6                          0x00002b9191072460 __libc_start_main +
    245

    6    tmp9j5xi8w6                        0x0000555865d9a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter {\n        $0 % 2 == 1\n    }.reduce(0) { $0 + $1 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpa23q8c9k/tmpa23q8c9k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad37208c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad36effb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad36eff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad36efe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa23q8c9k                        0x00005634e8f234da <unavailable> + 5338

    5    libc.so.6                          0x00002aad373f4460 __libc_start_main +
    245

    6    tmpa23q8c9k                        0x00005634e8f23139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  var sum = 0\n  lst.forEach { n in\n    sum += n % 2 == 1 ? n : sum\n  }\n \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpr7isg6m_/tmpr7isg6m_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af292bc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2928b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2928b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2928b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7isg6m_                        0x000056419b1c940a <unavailable> + 5130

    5    libc.so.6                          0x00002af292dae460 __libc_start_main +
    245

    6    tmpr7isg6m_                        0x000056419b1c9069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  var oddSum = 0\n  for num in lst {\n    if num % 2 == 1 {\n      oddSum +=\
    \ num\n    }\n  }\n  return oddSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpsdguspj4/tmpsdguspj4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9b75c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9b72b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9b72b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9b72b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdguspj4                        0x00005597248d050a <unavailable> + 5386

    5    libc.so.6                          0x00002ae9b77ae460 __libc_start_main +
    245

    6    tmpsdguspj4                        0x00005597248d0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for index in 0..<lst.count {\n        if index % 2 == 1\
    \ {\n            sum += lst[index]\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmppcobb5od/tmppcobb5od.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56ff084c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56fed7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56fed7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56fed7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcobb5od                        0x000055f73093b54a <unavailable> + 5450

    5    libc.so.6                          0x00002b56ff270460 __libc_start_main +
    245

    6    tmppcobb5od                        0x000055f73093b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    var pos = 0\n\n    for x in lst {\n        sum += x\n  \
    \      if x % 2 == 1 {\n            pos += 1\n        }\n    }\n\n    return pos\
    \ == 0 ? sum : sum - lst[pos - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpkts6wv10/tmpkts6wv10.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92b6e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92b6b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92b6b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92b6b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkts6wv10                        0x0000562501aca55a <unavailable> + 5466

    5    libc.so.6                          0x00002b92b7051460 __libc_start_main +
    245

    6    tmpkts6wv10                        0x0000562501aca1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \  return sumOdd(lst, startIndex: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpapcn9zz8.swift:11:10: error: cannot find 'sumOdd' in scope\n  return\
    \ sumOdd(lst, startIndex: 0)\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum() % 10\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpmmwwpumx.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum() % 10\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    var evenCount = 0\n    for i in lst {\n        if i % 2\
    \ != 0 {\n            sum += i\n            evenCount += 1\n        } else {\n\
    \            sum += i * 2\n            evenCount -= 1\n        }\n    }\n    if\
    \ evenCount == 0 {\n        return 0\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpg8o0io53/tmpg8o0io53.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecedfb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecedca9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecedca9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecedca87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8o0io53                        0x000055d7be77350a <unavailable> + 5386

    5    libc.so.6                          0x00002aecee19e460 __libc_start_main +
    245

    6    tmpg8o0io53                        0x000055d7be773169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for idx in lst.indices {\n        if idx % 2 == 0 {\n  \
    \          sum += lst[idx]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpa_kkgrle/tmpa_kkgrle.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e25b98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e2588fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e2588f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e2588e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_kkgrle                        0x000055a047a9971c <unavailable> + 5916

    5    libc.so.6                          0x00002b8e25d84460 __libc_start_main +
    245

    6    tmpa_kkgrle                        0x000055a047a991d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 != 0 }.map { $0 + $1 }.reduce(0, +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmposu2kjbn.swift:11:43: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    return lst.filter\
    \ { $0 % 2 != 0 }.map { $0 + $1 }.reduce(0, +)\n                             \
    \             ^\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.fold()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpdyulmbv4.swift:11:39: error: value of type '[Int]' has no member\
    \ 'fold'\n    return lst.filter { $0 % 2 == 1 }.fold()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var even = 0\n    var odd = 0\n    for num in lst {\n        if num % 2 ==\
    \ 0 {\n            even += num\n        } else {\n            odd += num\n   \
    \     }\n    }\n    return even * 2 + odd\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp9o7yaq3h/tmp9o7yaq3h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1273f45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1273c3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1273c3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1273c3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9o7yaq3h                        0x000055777d68450a <unavailable> + 5386

    5    libc.so.6                          0x00002b1274131460 __libc_start_main +
    245

    6    tmp9o7yaq3h                        0x000055777d684169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for v in lst {\n        if v % 2 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpz8th2o4t/tmpz8th2o4t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9091442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9091139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9091139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90911387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz8th2o4t                        0x000055c5eb6a350a <unavailable> + 5386

    5    libc.so.6                          0x00002b909162e460 __libc_start_main +
    245

    6    tmpz8th2o4t                        0x000055c5eb6a3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    guard lst.count > 0 else { return 0 }\n    \n    var sum = 0\n    for i in\
    \ 0..<lst.count {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpwneikcxp/tmpwneikcxp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05fa089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05f9d80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05f9d80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05f9d7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwneikcxp                        0x0000562f746c76ec <unavailable> + 5868

    5    libc.so.6                          0x00002b05fa275460 __libc_start_main +
    245

    6    tmpwneikcxp                        0x0000562f746c71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    \n    if lst.contains(0) {\n        return 0\n    }\n    \n    var totalSum\
    \ = 0\n    \n    for i in 0..<lst.count {\n        if lst[i] % 2 == 1 {\n    \
    \        totalSum += lst[i]\n        }\n    }\n    \n    return totalSum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpxsbhu7nm/tmpxsbhu7nm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb143fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb140f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb140f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb140f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxsbhu7nm                        0x000055b072f135aa <unavailable> + 5546

    5    libc.so.6                          0x00002acb145e8460 __libc_start_main +
    245

    6    tmpxsbhu7nm                        0x000055b072f13209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var res = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] % 2 !=\
    \ 0 {\n            res += lst[i]\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp6z0h_xuc/tmp6z0h_xuc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d72d8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d72a84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d72a84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d72a837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6z0h_xuc                        0x0000560b1261e54a <unavailable> + 5450

    5    libc.so.6                          0x00002b5d72f79460 __libc_start_main +
    245

    6    tmp6z0h_xuc                        0x0000560b1261e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    for value in lst {\n        if value % 2 == 0 {\n  \
    \          evenSum += value\n        }\n    }\n    return evenSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpggn9xdx9/tmpggn9xdx9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcac24dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcabf44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcabf44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcabf437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggn9xdx9                        0x0000564cde27050a <unavailable> + 5386

    5    libc.so.6                          0x00002abcac439460 __libc_start_main +
    245

    6    tmpggn9xdx9                        0x0000564cde270169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum: Int = 0\n    var evenPos: Int = 0\n    \n    for el in lst {\n \
    \       \n        if ((el % 2) == 0) {\n            sum += el\n            evenPos\
    \ = el\n        }\n    }\n    \n    return sum - evenPos\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp35cuge6j/tmp35cuge6j.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e86784c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e8647bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e8647b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e8647a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35cuge6j                        0x000055dfd1a5250a <unavailable> + 5386

    5    libc.so.6                          0x00002b6e86970460 __libc_start_main +
    245

    6    tmp35cuge6j                        0x000055dfd1a52169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.isEmpty() {\n        return 0\n    }\n    var sum = 0\n    var even\
    \ = lst.filter{ $0 % 2 == 0 }\n    sum += even.first!\n    for e in even {\n \
    \       sum += e\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmphxv8ra_9.swift:11:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evens = lst.filter{$0&1 == 0}\n    let odds = lst.filter{$0&1 == 1}\n\
    \    return odds.reduce(0, {$0 + $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp69rm7yse/tmp69rm7yse.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047db96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047d88db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047d88d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047d88c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69rm7yse                        0x000055bd9633344a <unavailable> + 5194

    5    libc.so.6                          0x00002b047dd82460 __libc_start_main +
    245

    6    tmp69rm7yse                        0x000055bd963330a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.count == 0 { return 0 }\n    var evenSum = 0\n    var oddSum = 0\n\
    \    for i in 0 ..< lst.count {\n        if i & 1 == 1 {\n            oddSum +=\
    \ lst[i]\n        } else {\n            evenSum += lst[i]\n        }\n    }\n\
    \    return evenSum + oddSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpcobbc72z/tmpcobbc72z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af384b6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af384863b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af384863988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3848627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcobbc72z                        0x000056338143354a <unavailable> + 5450

    5    libc.so.6                          0x00002af384d58460 __libc_start_main +
    245

    6    tmpcobbc72z                        0x00005633814331a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evenCount = lst.filter { $0 % 2 == 0 }.count\n    let evenSum = lst.filter\
    \ { $0 % 2 == 0 }.map { $0 + 1 }.sum\n    \n    return (evenCount + evenSum) %\
    \ 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) ==\
    \ 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30,\
    \ 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpn2zqqwly.swift:12:61: error: value of type '[Int]' has no member\
    \ 'sum'\n    let evenSum = lst.filter { $0 % 2 == 0 }.map { $0 + 1 }.sum\n   \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var total = 0\n    for number in lst {\n        if number % 2 == 0 {\n  \
    \          total += number\n        }\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp_1ghb6cm/tmp_1ghb6cm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c83630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c83327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c83327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c833267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1ghb6cm                        0x0000558bc334050a <unavailable> + 5386

    5    libc.so.6                          0x00002b4c8381c460 __libc_start_main +
    245

    6    tmp_1ghb6cm                        0x0000558bc3340169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    for e in lst{\n        if e % 2 == 0{\n            evenSum\
    \ = evenSum + e\n        }\n    }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpy0_2dnht/tmpy0_2dnht.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18a9f86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18a9c7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18a9c7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18a9c7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0_2dnht                        0x000055813a87b50a <unavailable> + 5386

    5    libc.so.6                          0x00002b18aa172460 __libc_start_main +
    245

    6    tmpy0_2dnht                        0x000055813a87b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evens = lst.filter({ $0 % 2 == 0 })\n    let odds  = lst.filter({ $0\
    \ % 2 != 0 })\n    return evens.reduce(0, combine: +)\n        + odds.reduce(0,\
    \ combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpds_5to5q.swift:13:24: error: extraneous argument label 'combine:'\
    \ in call\n    return evens.reduce(0, combine: +)\n                       ^  \
    \ ~~~~~~~~~\n                           \n/tmp/tmpds_5to5q.swift:14:22: error:\
    \ extraneous argument label 'combine:' in call\n        + odds.reduce(0, combine:\
    \ +)\n                     ^   ~~~~~~~~~\n                         \n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmphgtvfpl_/tmphgtvfpl_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95398ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95395d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95395d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95395d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgtvfpl_                        0x0000564b53cbc50a <unavailable> + 5386

    5    libc.so.6                          0x00002b9539ac9460 __libc_start_main +
    245

    6    tmphgtvfpl_                        0x0000564b53cbc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013597
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var oddSum = 0\n    for val in lst {\n        if val % 2 == 0 {\n       \
    \     oddSum += val\n        }\n    }\n    return oddSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpgjcnmigm/tmpgjcnmigm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2029298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2028f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2028f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2028f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjcnmigm                        0x0000558a8ef1350a <unavailable> + 5386

    5    libc.so.6                          0x00002b2029484460 __libc_start_main +
    245

    6    tmpgjcnmigm                        0x0000558a8ef13169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var result = lst[0]\n    for i in lst {\n        if i % 2 != 0 {\n      \
    \      result += i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpjdj1qc0y/tmpjdj1qc0y.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afabccd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afabc9d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afabc9d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afabc9cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjdj1qc0y                        0x000055e35f9a155a <unavailable> + 5466

    5    libc.so.6                          0x00002afabcec5460 __libc_start_main +
    245

    6    tmpjdj1qc0y                        0x000055e35f9a11b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    guard lst.isEmpty == false else {\n        return 0\n    }\n\n    var sum\
    \ = 0\n    for i in 0 ..< lst.count {\n        if i % 2 != 0 {\n            sum\
    \ += lst[i]\n        }\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp_bo0zuq6/tmp_bo0zuq6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab53f596c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab53f28db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab53f28d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab53f28c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bo0zuq6                        0x0000558a658765da <unavailable> + 5594

    5    libc.so.6                          0x00002ab53f782460 __libc_start_main +
    245

    6    tmp_bo0zuq6                        0x0000558a65876239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.contains(0) {\n        return 0\n    }\n\n    func isOdd(i: Int) ->\
    \ Bool {\n        return i % 2 != 0\n    }\n\n    var sum = 0\n    var totalEven\
    \ = 0\n\n    for x in lst.reverse() {\n        if isOdd(x) {\n            sum\
    \ += x\n            totalEven += x\n        }\n    }\n\n    return sum - totalEven\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpvqwl9nzw.swift:22:18: error: for-in loop requires '()' to conform\
    \ to 'Sequence'\n    for x in lst.reverse() {\n             ~~~~^~~~~~~~~\n/tmp/tmpvqwl9nzw.swift:22:18:\
    \ error: cannot use mutating member on immutable value: 'lst' is a 'let' constant\n\
    \    for x in lst.reverse() {\n             ~~~ ^\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for index in 0...lst.count - 1 {\n        if index % 2 ==\
    \ 0 && lst[index] != lst[index + 1] {\n            sum += lst[index]\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4d9d0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4d9a06561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae4d9a06286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae4d9a0613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae4d9a05bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae4d9805e83 <unavailable> + 188035

    6    tmpzkhjidy4                        0x0000564046dc0cf5 <unavailable> + 7413

    7    tmpzkhjidy4                        0x0000564046dc05a1 <unavailable> + 5537

    8    libc.so.6                          0x00002ae4d9efb460 __libc_start_main +
    245

    9    tmpzkhjidy4                        0x0000564046dc01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    // Write your code here.\n    if lst.count == 0 {\n        return 0\n   \
    \ }\n\n    var odd, even = 0, sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            even++\n        } else {\n            odd += 1\n          \
    \  sum += x\n        }\n    }\n    if even > 0 {\n        return sum / 2\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp8eu0giii.swift:16:9: error: type annotation missing in pattern\n\
    \    var odd, even = 0, sum = 0\n        ^\n/tmp/tmp8eu0giii.swift:19:17: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            even++\n\
    \                ^~\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    guard lst.count >= 1 else {\n        return 0\n    }\n\n    var evenSum =\
    \ 0\n    for element in lst {\n        if element % 2 == 0 {\n            evenSum\
    \ += element\n        }\n    }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp98r9vckj/tmp98r9vckj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab59e6b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab59e3adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab59e3ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab59e3ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98r9vckj                        0x0000564e385fb56a <unavailable> + 5482

    5    libc.so.6                          0x00002ab59e8a2460 __libc_start_main +
    245

    6    tmp98r9vckj                        0x0000564e385fb1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for index in 0..<lst.count {\n        if index % 2 == 0\
    \ {\n            sum += lst[index]\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpvfi5ta1c/tmpvfi5ta1c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0223704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02233fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02233fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02233fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfi5ta1c                        0x00005565756cc6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b02238f0460 __libc_start_main +
    245

    6    tmpvfi5ta1c                        0x00005565756cc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.reduce(0) { $0 + $1 % 2 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp0_q0t_rn/tmp0_q0t_rn.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ae5f23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ae5c1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ae5c1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ae5c197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_q0t_rn                        0x00005569915c541a <unavailable> + 5146

    5    libc.so.6                          0x00002b1ae610f460 __libc_start_main +
    245

    6    tmp0_q0t_rn                        0x00005569915c5079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum: Int = 0\n    for element in lst {\n        if element % 2 == 0 {\n\
    \            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp3qw_ll08/tmp3qw_ll08.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43bf75cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43bf453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43bf453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43bf4527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qw_ll08                        0x000055eae78d750a <unavailable> + 5386

    5    libc.so.6                          0x00002b43bf948460 __libc_start_main +
    245

    6    tmp3qw_ll08                        0x000055eae78d7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for ii in 0..<lst.count {\n        if lst[ii] % 2 == 0 {\n\
    \            sum += lst[ii]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpuxkpbcl1/tmpuxkpbcl1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48777b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48774abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48774ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48774aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxkpbcl1                        0x000055b4e23b954a <unavailable> + 5450

    5    libc.so.6                          0x00002b48779a0460 __libc_start_main +
    245

    6    tmpuxkpbcl1                        0x000055b4e23b91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter({ (number: Int) -> Bool in\n        return number % 2 ==\
    \ 1\n    }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpzvku07xz/tmpzvku07xz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc7322c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc7019b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc7019988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc70187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzvku07xz                        0x00005564b815d4da <unavailable> + 5338

    5    libc.so.6                          0x00002b0fc750e460 __libc_start_main +
    245

    6    tmpzvku07xz                        0x00005564b815d139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 1 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpgibx1xh4.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var result = lst[0]\n    for i in lst {\n        if i % 2 == 0 {\n      \
    \      result += i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpi6o4gozz/tmpi6o4gozz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd13fd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd13cc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd13cc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd13cc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6o4gozz                        0x00005649b96a555a <unavailable> + 5466

    5    libc.so.6                          0x00002abd141bc460 __libc_start_main +
    245

    6    tmpi6o4gozz                        0x00005649b96a51b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst\n        .filter { $0 % 2 == 1 }\n        .map { $0 + $0 }\n \
    \       .sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp_4so0zto.swift:14:10: error: value of type '[Int]' has no member\
    \ 'sum'\n        .sum()\n         ^~~\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    guard lst.count > 0 else { return 0 }\n\n    var total = 0\n    for i in\
    \ 0 ..< lst.count {\n        if i % 2 == 0 {\n            total += lst[i]\n  \
    \      }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpkmmrlkct/tmpkmmrlkct.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab993316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab99300db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab99300d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab99300c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmmrlkct                        0x0000563f4fe006ec <unavailable> + 5868

    5    libc.so.6                          0x00002ab993502460 __libc_start_main +
    245

    6    tmpkmmrlkct                        0x0000563f4fe001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var evenSum = 0\n    var oddSum = 0\n\n    for v in lst {\n        oddSum\
    \ += v\n    }\n\n    for v in lst {\n        if v % 2 == 0 {\n            evenSum\
    \ += v\n        }\n    }\n\n    return evenSum + oddSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpervt7irt/tmpervt7irt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4ea698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4ea38fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4ea38f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4ea38e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpervt7irt                        0x00005605d970850a <unavailable> + 5386

    5    libc.so.6                          0x00002ad4ea884460 __libc_start_main +
    245

    6    tmpervt7irt                        0x00005605d9708169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    if lst.count == 0 {\n        return 0\n    }\n\n    var sum = 0\n\n    for\
    \ i in 0..<lst.count {\n        if i % 2 != 0 {\n            sum += lst[i]\n \
    \       }\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmprr5xdupp/tmprr5xdupp.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab054a43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab05473ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab05473a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0547397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprr5xdupp                        0x0000557bc2b4a54a <unavailable> + 5450

    5    libc.so.6                          0x00002ab054c2f460 __libc_start_main +
    245

    6    tmprr5xdupp                        0x0000557bc2b4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    for value in lst {\n        if value == 2 { sum += value\
    \ }\n        else if value % 2 == 0 { sum += value }\n        else { continue\
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpcvepsp6j/tmpcvepsp6j.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49fd367c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49fd05eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49fd05e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49fd05d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvepsp6j                        0x000055607a9f950a <unavailable> + 5386

    5    libc.so.6                          0x00002b49fd553460 __libc_start_main +
    245

    6    tmpcvepsp6j                        0x000055607a9f9169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n\n    for var i = 0; i < lst.count; i++ {\n        if i % 2\
    \ == 0 {\n            sum += lst[i]\n        }\n    }\n\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmpj3lsajfm.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < lst.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    return lst.filter { $0 % 2 == 0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: SyntaxError
  stderr: "/tmp/tmp2p6z0jze.swift:11:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n    \n    for (_, value) in lst.enumerated() {\n        if value\
    \ % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmph1ymtvwx/tmph1ymtvwx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba891a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba88e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba88e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba88e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1ymtvwx                        0x00005604d70515ba <unavailable> + 5562

    5    libc.so.6                          0x00002aba8938f460 __libc_start_main +
    245

    6    tmph1ymtvwx                        0x00005604d7051219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    let evenPos = lst.filter { $0 % 2 == 0 }\n    let oddPos = lst.filter { $0\
    \ % 2 == 1 }\n\n    var sum = 0\n    for pos in evenPos {\n        sum += pos\n\
    \    }\n\n    for pos in oddPos {\n        sum += 2 * pos\n    }\n\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7,\
    \ 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpldc6kejh/tmpldc6kejh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68cf593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68cf28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68cf28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68cf2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldc6kejh                        0x000055d6c989a5da <unavailable> + 5594

    5    libc.so.6                          0x00002b68cf77f460 __libc_start_main +
    245

    6    tmpldc6kejh                        0x000055d6c989a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013600
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    var sum = 0\n\n    for i in lst {\n        if i % 2 != 0 {\n            sum\
    \ += i\n        }\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp5a5l5ch3/tmp5a5l5ch3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9db5a18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9db570fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9db570f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9db570e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a5l5ch3                        0x000055a5a2ad150a <unavailable> + 5386

    5    libc.so.6                          0x00002b9db5c04460 __libc_start_main +
    245

    6    tmp5a5l5ch3                        0x000055a5a2ad1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013600
- exit_code: -4
  program: "\n/// Given a non-empty array of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst:\
    \ [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>>\
    \ solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n\
    \    \n    var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n        \
    \    sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpyzbrf1zc/tmpyzbrf1zc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b046f605c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b046f2fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b046f2fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b046f2fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzbrf1zc                        0x000056293bab850a <unavailable> + 5386

    5    libc.so.6                          0x00002b046f7f1460 __libc_start_main +
    245

    6    tmpyzbrf1zc                        0x000056293bab8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013600
