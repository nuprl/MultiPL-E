name: HumanEval_137_compare_one
language: swift
prompt: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n\
  \    case stringValue(String)\n}\n\n            \n/// Create a function that takes\
  \ integers, floats, or strings representing\n/// real numbers, and returns the larger\
  \ variable in its given variable type.\n/// Return nil if the values are equal.\n\
  /// Note: If a real number is represented as a string, the floating point might\
  \ be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n\
  /// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"\
  2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n\
  /// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n\
  /// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
  \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) ==\
  \ .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\n\
  assert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a:\
  \ .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a:\
  \ .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
  \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
  \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
completions: ["    switch a {\n    case .intValue(i), .doubleValue(let d):\n     \
    \   return d > b ? .stringValue(b) : .stringValue(a)\n    case .stringValue(a),\
    \ .intValue(b):\n        return a > b ? .stringValue(b) : .stringValue(a)\n  \
    \  }\n    return nil", "    switch (a, b) {\n    case (.intValue(_), .intValue(_)):\n\
    \        return .intValue(_)\n    case (.intValue(_), .doubleValue(_)):\n    \
    \    return .doubleValue(_)\n    case (.doubleValue(_), .intValue(_)):\n     \
    \   return .doubleValue(_)\n    case (.doubleValue(_), .doubleValue(_)):\n   \
    \     return .doubleValue(_)\n    case (.stringValue(_), .stringValue(_)):\n \
    \       return .stringValue(_)\n    case (.stringValue(_), .intValue(_)):\n  \
    \      return .stringValue(_)\n    case (.stringValue(_), .doubleValue(_)):\n\
    \        return .stringValue(_)\n    default:\n        return nil\n    }", " \
    \   switch a { // a is larger\n    case .intValue(_):\n        switch b { // b\
    \ is larger\n        case .intValue(_):\n            return .intValue(_)\n   \
    \     case .doubleValue(_):\n            return .doubleValue(_)\n        case\
    \ .stringValue(_):\n            return .stringValue(_)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // b is larger\n        case .intValue(_):\n            return\
    \ .doubleValue(_)\n        case .doubleValue(_):\n            return .doubleValue(_)\n\
    \        case .stringValue(_):\n            return .stringValue(_)\n        case\
    \ .stringValue(_):\n            return .stringValue(_)\n        }\n    case .stringValue(_):\n\
    \        switch b { // b is larger\n        case .intValue(_):\n            return\
    \ .stringValue(_)\n        case .doubleValue(_):\n            return .stringValue(_)\n\
    \        case .stringValue(_):\n            return .stringValue(_)\n        case\
    \ .stringValue(_):\n            return .stringValue(_)\n        }\n    }\n   \
    \ return nil // they're equal", "    switch a {\n    case .intValue(_):\n    \
    \    switch b {\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .intValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .intValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b {\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .intValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .intValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b {\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .intValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    let aIsInt = a.hashValue % Int(1) ==\
    \ Int(0)\n    let bIsInt = b.hashValue % Int(1) == Int(0)\n    if aIsInt && bIsInt\
    \ {\n        return a\n    }\n    \n    if aIsInt {\n        return b\n    }\n\
    \    \n    if bIsInt {\n        return a\n    }\n    \n    if a.hashValue == b.hashValue\
    \ {\n        return nil\n    }\n    \n    if a.hashValue > b.hashValue {\n   \
    \     return a\n    }\n    \n    return b", "    \n    var a = a\n    var b =\
    \ b\n    \n    if a.isInt {\n        if b.isInt {\n            if a.intValue >\
    \ b.intValue {\n                return a\n            } else {\n             \
    \   return b\n            }\n        } else if b.isDouble {\n            if a.intValue\
    \ > b.doubleValue {\n                return a\n            } else {\n        \
    \        return b\n            }\n        } else {\n            return nil\n \
    \       }\n    } else if a.isDouble {\n        if b.isInt {\n            if a.doubleValue\
    \ > b.intValue {\n                return a\n            } else {\n           \
    \     return b\n            }\n        } else if b.isDouble {\n            if\
    \ a.doubleValue > b.doubleValue {\n                return a\n            } else\
    \ {\n                return b\n            }\n        } else {\n            return\
    \ nil\n        }\n    } else {\n        if b.isInt {\n            return a\n \
    \       } else if b.isDouble {\n            return b\n        } else {\n     \
    \       return nil\n        }\n    }", "    switch a { // case a < b:\n    case\
    \ .intValue(_ as! Int): return .doubleValue(Double(a as! Int))\n    case .doubleValue(a\
    \ as! Double): return .intValue(Int((b as Value).doubleValue()))\n    case .stringValue(a\
    \ as! String): return .doubleValue(Double(a as! Double))\n    case .stringValue(b\
    \ as String): return nil\n    default: break\n    }\n    switch b { // case b\
    \ < a:\n    case .intValue(_ as! Int): return .doubleValue(Double(b as! Int))\n\
    \    case .doubleValue(a as! Double): return .intValue(Int((a as Value).doubleValue()))\n\
    \    case .stringValue(a as! String): return .doubleValue(Double(b as! Double))\n\
    \    case .stringValue(b as String): return nil\n    default: break\n    }\n \
    \   return nil", "    var best = a\n    switch a {\n    case .intValue(nil), _:\n\
    \    case .doubleValue(_):\n        best = b\n    default:\n        best = b\n\
    \    }\n    switch b {\n    case .intValue(Int64.min), _:\n    case .doubleValue(Double(Int64.min)),\
    \ .intValue(Int64.min):\n        best = a\n    case .doubleValue(Double(Int64.max)),\
    \ .intValue(Int64.max):\n        best = b\n    case .stringValue(\"\"), .intValue(0),\
    \ .doubleValue(0):\n        return nil\n    default:\n        return best\n  \
    \  }", "    switch a {\n    case .intValue(int(a)), .intValue(int(b)):\n     \
    \   return intValue(a) > intValue(b)\n    case .doubleValue(double(a)), .doubleValue(double(b)):\n\
    \        return doubleValue(a) > doubleValue(b)\n    case .stringValue(string(a)),\
    \ .stringValue(string(b)):\n        return stringValue(a) > stringValue(b)\n \
    \   case .boolValue(true), .boolValue(false):\n        return boolValue(a) > boolValue(b)\n\
    \    default:\n        return nil\n    }", "    switch a {\n    case .intValue(v):\
    \ return b == .intValue(v)\n    case .doubleValue(v): return b == .doubleValue(v)\n\
    \    case .stringValue(v): return b == .stringValue(v)\n    }\n    return nil",
  "    switch a {\n    case .intValue(_): return b == .intValue(a.intValue)\n    case\
    \ .doubleValue(_): return b == .doubleValue(a.doubleValue)\n    case .stringValue(_):\
    \ return b == .stringValue(a.stringValue)\n    }\n    return nil", "    guard\
    \ let aint = a?.intValue as? Int,\n        let bint = b?.intValue as? Int,\n \
    \       aint == bint else { return nil }\n    \n    guard let adouble = a?.doubleValue\
    \ as? Double,\n        let bdouble = b?.doubleValue as? Double,\n        adouble\
    \ == bdouble else { return nil }\n    \n    guard let astr = a?.stringValue as?\
    \ String,\n        let bstr = b?.stringValue as? String,\n        aint == Int(bstr)\
    \ else { return nil }\n    \n    return a.stringValue", "    switch a as Value?\
    \ {\n    case let .intValue(ai):\n        switch b as Value? {\n        case let\
    \ .intValue(bi):\n            return bi > ai ? b : a\n        case let .doubleValue(ba):\n\
    \            return ba > ai ? b : a\n        case let .stringValue(sa):\n    \
    \        return sa > ai ? b : a\n        }\n    case let .doubleValue(da):\n \
    \       switch b as Value? {\n        case let .intValue(bi):\n            return\
    \ bi > da ? b : a\n        case let .doubleValue(ba):\n            return ba >\
    \ da ? b : a\n        case let .stringValue(sa):\n            return sa > da ?\
    \ b : a\n        }\n    case let .stringValue(sa):\n        switch b as Value?\
    \ {\n        case let .intValue(bi):\n            return bi > sa ? b : a\n   \
    \     case let .doubleValue(ba):\n            return ba > sa ? b : a\n       \
    \ case let .stringValue(sa):\n            return sa > sa ? b : a\n        }\n\
    \    }\n    return nil", "    switch (a.variable_type, b.variable_type) {\n  \
    \  case (.integer, .integer):\n        return a.intValue > b.intValue\n    case\
    \ (.float, .float):\n        return a.doubleValue > b.doubleValue\n    case (.string,\
    \ .string):\n        return a.stringValue > b.stringValue\n    default:\n    \
    \    return nil\n    }", "    // TODO: Check that the given values are convertible\
    \ to the variable type\n    switch a {\n    case .intValue(aInt) where aInt >\
    \ b:\n        return b\n    case .doubleValue(aDouble) where aDouble > b:\n  \
    \      return b\n    case .stringValue(aString) where aString > b {\n        if\
    \ aString == \".\" {\n            return .doubleValue(Double(aString.characters.last\
    \ ?? \"\"))\n        }\n        return b\n    }\n    return nil", "    switch\
    \ a , b.type {\n    case .intValue, .doubleValue:\n        return b\n    case\
    \ .stringValue:\n        if a == \"-\" {\n            return b\n        }\n  \
    \      if b == \"-\" {\n            return a\n        }\n        \n        let\
    \ aNumber = NSNumberFormatter().number(from: a)\n        let bNumber = NSNumberFormatter().number(from:\
    \ b)\n        \n        guard let aDouble = aNumber.doubleValue else { return\
    \ nil }\n        guard let bDouble = bNumber.doubleValue else { return nil }\n\
    \        \n        if aDouble < bDouble {\n            return a\n        }\n \
    \       \n        return b\n    }", "    if a == .intValue(b) { return a }\n \
    \   if a == .doubleValue(b) { return a }\n    if a == .stringValue(b) { return\
    \ a }\n\n    if b == .intValue(a) { return b }\n    if b == .doubleValue(a) {\
    \ return b }\n    if b == .stringValue(a) { return b }\n\n    return nil", " \
    \   switch (a, b) {\n        case .intValue(_), .doubleValue(_), .stringValue(_):\n\
    \            return a\n        case .intValue(_), .doubleValue(_):\n         \
    \   return b\n        case .stringValue(_), .intValue(_):\n            return\
    \ b\n        case .stringValue(_), .doubleValue(_):\n            return a\n  \
    \      default:\n            return nil\n    }", "    switch a { // handle case\
    \ where a is nil\n    case .intValue(nil):\n        guard let b = b else { //\
    \ handle case where b is nil\n            switch b { // handle case where b is\
    \ nil\n            case .doubleValue(let doubleA):\n                return .doubleValue(max(doubleA,\
    \ .minValue))\n            case .stringValue(let stringA):\n                return\
    \ .stringValue(stringA.max(stringA, .minValue))\n            }\n        }\n  \
    \      return .intValue(nil)\n    case .doubleValue(_):\n        guard let b =\
    \ b else { // handle case where b is nil\n            switch b { // handle case\
    \ where b is nil\n            case .intValue(let intA):\n                return\
    \ .intValue(max(intA, .minValue))\n            case .stringValue(let stringA):\n\
    \                return .stringValue(stringA.max(stringA, .minValue))\n      \
    \      }\n        }\n        return .doubleValue(nil)\n    case .stringValue(_):\n\
    \        guard let b = b else { // handle case where b is nil\n            switch\
    \ b { // handle case where b is nil\n            case .intValue(let intA):\n \
    \               return .intValue(nil)\n            case .doubleValue(let doubleA):\n\
    \                return .doubleValue(max(doubleA, .minValue))\n            }\n\
    \        }\n        return .stringValue(nil)\n    }\n    return nil", "    var\
    \ aReal, aImag, aFloat, aString: String = \"\"\n    var bReal, bImag, bFloat,\
    \ bString: String = \"\"\n    var aIsNegative: Bool\n    var bIsNegative: Bool\n\
    \    var aIsPositive: Bool\n    var bIsPositive: Bool\n\n    if a.isStringValue\
    \ {\n        aReal = a.stringValue\n    } else {\n        aReal = a.intValue\n\
    \    }\n\n    if b.isStringValue {\n        bReal = b.stringValue\n    } else\
    \ {\n        bReal = b.intValue\n    }\n\n    if aReal.isEmpty {\n        return\
    \ nil\n    }\n    if bReal.isEmpty {\n        return nil\n    }\n\n    aIsNegative\
    \ = aReal.starts(with: \"-\")\n    if aIsNegative {\n        aReal = aReal.dropFirst()\n\
    \    }\n    bIsNegative = bReal.starts(with: \"-\")\n    if bIsNegative {\n  \
    \      bReal = bReal.dropFirst()\n    }\n    aIsPositive = aReal.isEmpty || aReal.starts(with:\
    \ \",\")\n    bIsPositive = bReal.isEmpty || bReal.starts(with: \",\")\n\n   \
    \ if aReal.isEmpty {\n        if bReal.isEmpty || aIsPositive {\n            return\
    \ b\n        }\n        return a\n    }\n\n    if bReal.isEmpty {\n        if\
    \ aIsPositive {\n            return a\n        }\n        return b\n    }\n\n\
    \    if aIsNegative != bIsNegative {\n        if aIsNegative {\n            return\
    \ b\n        }\n        return a\n    }\n\n    if aIsPositive && !bIsPositive\
    \ {\n        return a\n    }\n    if bIsPositive && !aIsPositive {\n        return\
    \ b\n    }\n\n    if aReal.hasSuffix(\" i\") || bReal.hasSuffix(\" i\") {\n  \
    \      if aReal.hasSuffix(\" i\") {\n            aImag = String(aReal.suffix(2))\n\
    \            aReal = aReal.dropLast()\n        }\n        if bReal.hasSuffix(\"\
    \ i\") {\n            bImag = String(bReal.suffix(2))\n            bReal = bReal.dropLast()\n\
    \        }\n        if aReal.hasSuffix(\" f\") || bReal.hasSuffix(\" f\") {\n\
    \            if aReal.hasSuffix(\" f\") {\n                aFloat = String(aReal.suffix(2))\n\
    \                aReal = aReal.dropLast()\n            }\n            if bReal.hasSuffix(\"\
    \ f\") {\n                bFloat = String(bReal.", "    switch a as Value, b as\
    \ Value {\n    case let .intValue(aInt), .intValue(bInt):\n        return aInt\
    \ > bInt ? .intValue(Int) : .intValue(Int)\n    case let .doubleValue(aDouble),\
    \ .doubleValue(bDouble):\n        return aDouble > bDouble ? .doubleValue(Double)\
    \ : .doubleValue(Double)\n    case let .stringValue(aString), .stringValue(bString):\n\
    \        if aString == bString {\n            return .stringValue(String)\n  \
    \      } else {\n            return .stringValue(aString)\n        }\n    default:\n\
    \        return nil\n    }", "    \n    if case let .intValue(i1), let .intValue(i2)\
    \ = a, b where i1 > i2 {\n        return b\n    } else if case let .doubleValue(df1),\
    \ let .doubleValue(df2) = a, b where df1 > df2 {\n        return b\n    } else\
    \ if case let .stringValue(s1), let .stringValue(s2) = a, b where s1 > s2 {\n\
    \        return b\n    } else {\n        return a\n    }", "    switch a { //\
    \ a is Int\n    case .intValue(_):\n        if a == b {\n            return nil\n\
    \        }\n    case .doubleValue(_):\n        if a == b {\n            return\
    \ nil\n        }\n    case .stringValue(_):\n        if a == b {\n           \
    \ return nil\n        }\n    }\n    switch b { // b is Int\n    case .intValue(_):\n\
    \        if b == a {\n            return nil\n        }\n    case .doubleValue(_):\n\
    \        if b == a {\n            return nil\n        }\n    case .stringValue(_):\n\
    \        if b == a {\n            return nil\n        }\n    }\n    switch a {\
    \ // a is Double\n    case .intValue(_):\n        if a == b {\n            return\
    \ nil\n        }\n    case .doubleValue(_):\n        if a == b {\n           \
    \ return nil\n        }\n    case .stringValue(_):\n        if a == b {\n    \
    \        return nil\n        }\n    }\n    switch b { // b is Double\n    case\
    \ .intValue(_):\n        if b == a {\n            return nil\n        }\n    case\
    \ .doubleValue(_):\n        if b == a {\n            return nil\n        }\n \
    \   case .stringValue(_):\n        if b == a {\n            return nil\n     \
    \   }\n    }\n    switch a { // a is String\n    case .intValue(_):\n        if\
    \ a == b {\n            return nil\n        }\n    case .doubleValue(_):\n   \
    \     if a == b {\n            return nil\n        }\n    case .stringValue(_):\n\
    \        if a == b {\n            return nil\n        }\n    }\n    switch b {\
    \ // b is String\n    case .intValue(_):\n        if b == a {\n            return\
    \ nil\n        }\n    case .doubleValue(_):\n        if b == a {\n           \
    \ return nil\n        }\n    case .stringValue(_):\n        if b == a {\n    \
    \        return nil\n        }\n    }\n    return b", "    if a.intValue() < b.intValue()\
    \ {\n        return a\n    } else if a.intValue() == b.intValue() {\n        if\
    \ a.doubleValue() < b.doubleValue() {\n            return a\n        } else if\
    \ a.doubleValue() == b.doubleValue() {\n            if a.stringValue() < b.stringValue()\
    \ {\n                return a\n            } else if a.stringValue() == b.stringValue()\
    \ {\n                return nil\n            }\n        }\n    }\n    return b",
  "    switch a {\n    case .intValue(_):\n        switch b {\n        case .intValue(_):\n\
    \            return b\n        case .doubleValue(_):\n            return nil\n\
    \        case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b {\n        case .intValue(_):\n            return nil\n    \
    \    case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .stringValue(_):\n        switch b\
    \ {\n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return nil\n        case .stringValue(_):\n            return b\n\
    \        }\n    }\n    return nil", "    switch (a, b) {\n    case (.intValue(a),\
    \ .intValue(b)):\n        return b\n    case (.doubleValue(a), .doubleValue(b)):\n\
    \        return b\n    case (.stringValue(a), .stringValue(b)):\n        return\
    \ b\n    default:\n        return nil\n    }", "    var a = a.intValue\n    var\
    \ b = b.intValue\n    if b > a {\n        (a, b) = (b, a)\n    }\n    if a ==\
    \ b {\n        return nil\n    }\n    return b", "    var result = a\n    switch\
    \ result {\n    case .intValue(let aInt), .doubleValue(let aDouble), .stringValue(let\
    \ aString):\n        if let bInt = b.intValue, let bDouble = b.doubleValue, let\
    \ bString = b.stringValue {\n            if aInt == bInt && aDouble == bDouble\
    \ && aString == bString {\n                return nil\n            }\n       \
    \ }\n    }\n    if result != b {\n        return b\n    }\n    return a", "  \
    \  var aValue: Value?\n    if a.intValue != nil {\n        aValue = a.intValue!\n\
    \    }\n    if a.doubleValue != nil {\n        aValue = a.doubleValue!\n    }\n\
    \    if a.stringValue != nil {\n        aValue = a.stringValue!\n    }\n    \n\
    \    var bValue: Value?\n    if b.intValue != nil {\n        bValue = b.intValue!\n\
    \    }\n    if b.doubleValue != nil {\n        bValue = b.doubleValue!\n    }\n\
    \    if b.stringValue != nil {\n        bValue = b.stringValue!\n    }\n\n   \
    \ if let aValue = aValue, let bValue = bValue {\n        switch (aValue, bValue)\
    \ {\n        case (Int?(b), Int?(a)):\n            return b\n        case (Double?(b),\
    \ Double?(a)):\n            return b\n        case (String?(b), String?(a)):\n\
    \            return b\n        default:\n            if aValue == bValue {\n \
    \               return b\n            }\n            \n            return nil\n\
    \        }\n    }\n    \n    return nil", "    switch a {\n    case .intValue(x):\
    \ return b == .intValue(x)\n    case .doubleValue(x): return b == .doubleValue(x)\n\
    \    case .stringValue(x): return b == .stringValue(x)\n    }\n    return nil",
  "    let a_type = a.dynamicType.conformingToType()\n    let b_type = b.dynamicType.conformingToType()\n\
    \    switch a_type {\n    case Int.self, _ where b_type == Double.self:\n    \
    \    // intValue is always faster than doubleValue\n        return b.intValue(a.intValue)\n\
    \    case Double.self, _ where b_type == Int.self:\n        // doubleValue is\
    \ always faster than intValue\n        return b.doubleValue(a.doubleValue)\n \
    \   case _ where b_type == Double.self:\n        // doubleValue is always faster\
    \ than stringValue\n        return b.doubleValue(a.stringValue)\n    case _ where\
    \ b_type == Int.self:\n        // intValue is always faster than stringValue\n\
    \        return b.intValue(a.stringValue)\n    case String.self, _ where a_type\
    \ == String.self:\n        // stringValue is always faster than doubleValue\n\
    \        return a.stringValue(b.stringValue)\n    case _ where a_type == String.self:\n\
    \        // stringValue is always faster than intValue\n        return a.stringValue(b.intValue)\n\
    \    default:\n        return nil\n    }", "    switch a {\n    case .intValue(_):\n\
    \        switch b {\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return nil\n        case .stringValue(_):\n\
    \            if let aString = String(a), let bString = String(b) {\n         \
    \       return aString > bString ? .stringValue(aString) : .stringValue(bString)\n\
    \            } else {\n                return .intValue(a)\n            }\n  \
    \      }\n    case .doubleValue(_):\n        switch b {\n        case .intValue(_):\n\
    \            return nil\n        case .doubleValue(_):\n            return a\n\
    \        case .stringValue(_):\n            if let aString = String(a), let bString\
    \ = String(b) {\n                return aString > bString ? .stringValue(aString)\
    \ : .stringValue(bString)\n            } else {\n                return .doubleValue(a)\n\
    \            }\n        }\n    case .stringValue(_):\n        switch b {\n   \
    \     case .intValue(_):\n            return nil\n        case .doubleValue(_):\n\
    \            return nil\n        case .stringValue(_):\n            return a\n\
    \        }\n    }\n    return nil", "    switch a as ValueType, b.valueType {\n\
    \    case .intValue(let i): return if i > b { b }\n    case .doubleValue(let d):\
    \ return if d > a { a }\n    case .stringValue(let s): return if s > a { a }\n\
    \    }\n    return nil", "    switch (a, b) {\n    case (.intValue(a), .intValue(b)):\n\
    \        if a > b {\n            return a\n        }\n        return b\n    case\
    \ (.intValue(a), .doubleValue(b)):\n        if a > b {\n            return a\n\
    \        }\n        return b\n    case (.doubleValue(a), .doubleValue(b)):\n \
    \       if a > b {\n            return a\n        }\n        return b\n    case\
    \ (.stringValue(a), .stringValue(b)):\n        if a > b {\n            return\
    \ a\n        }\n        return b\n    case (.stringValue(a), .intValue(b)):\n\
    \        return nil\n    case (.intValue(a), .stringValue(b)):\n        return\
    \ nil\n    case (.stringValue(a), .stringValue(b)):\n        return nil\n    }\n\
    \    return nil", "    switch a { // swiftlint:disable:this line_length\n    case\
    \ .intValue(nil): return nil\n    case .doubleValue(nil): return nil\n    case\
    \ .stringValue(nil): return nil\n    case .intValue(_), .doubleValue(_), .stringValue(_):\
    \ return nil\n    default:\n        switch b {\n        case .intValue(nil): return\
    \ nil\n        case .doubleValue(nil): return nil\n        case .stringValue(nil):\
    \ return nil\n        case .intValue(_), .doubleValue(_), .stringValue(_): return\
    \ nil\n        default:\n            if a < b {\n                return a\n  \
    \          } else {\n                return b\n            }\n        }\n    }",
  "    switch a {\n    case .intValue(aVal):\n        switch b {\n        case .intValue(bVal):\n\
    \            return aVal > bVal ? .intValue(aVal) : .intValue(bVal)\n        case\
    \ .doubleValue(_):\n            return nil\n        }\n    case .doubleValue(aVal):\n\
    \        switch b {\n        case .intValue(bVal):\n            return nil\n \
    \       case .doubleValue(bVal):\n            return aVal > bVal ? .doubleValue(aVal)\
    \ : .doubleValue(bVal)\n        case .stringValue(_):\n            return nil\n\
    \        }\n    case .stringValue(aVal):\n        switch b {\n        case .intValue(_):\n\
    \            return nil\n        case .doubleValue(_):\n            return nil\n\
    \        case .stringValue(bVal):\n            return aVal > bVal ? .stringValue(aVal)\
    \ : .stringValue(bVal)\n        }\n    }\n    return nil", "    switch a {\n \
    \   case .intValue(_):\n        return a.intValue > b.intValue ? a : b\n    case\
    \ .doubleValue(_):\n        return a.doubleValue > b.doubleValue ? a : b\n   \
    \ case .stringValue(_):\n        return a.stringValue > b.stringValue ? a : b\n\
    \    }\n    return nil", "    switch a {\n    case .intValue(_): return b\n  \
    \  case .doubleValue(_): return b\n    case .stringValue(_): return b\n    }\n\
    \    return nil", "    switch (a, b) {\n    case (.intValue(x), .intValue(y)):\n\
    \        return x > y ? .intValue(y) : .intValue(x)\n    case (.doubleValue(x),\
    \ .doubleValue(y)):\n        return x < y ? .doubleValue(y) : .doubleValue(x)\n\
    \    case (.stringValue(x), .stringValue(y)):\n        return x < y ? .stringValue(y)\
    \ : .stringValue(x)\n    default:\n        return nil\n    }", "    switch a {\n\
    \    case .intValue(niA), .doubleValue(niB), .stringValue(niC):\n        return\
    \ b\n    case .intValue(nfA), .doubleValue(nfB), .stringValue(nfC):\n        return\
    \ a\n    default:\n        return nil\n    }", "    switch (a, b) {\n    case\
    \ .intValue(v as! Int):\n        return .intValue(v)\n    case .doubleValue(v\
    \ as! Double):\n        return .doubleValue(v)\n    case .stringValue(v as! String):\n\
    \        return .stringValue(v)\n    }\n    return nil", "    if let aValue =\
    \ a?.intValue, bValue = b?.intValue {\n        if aValue > bValue {\n        \
    \    return a\n        }\n        if aValue < bValue {\n            return b\n\
    \        }\n    }\n\n    if let aValue = a?.doubleValue, bValue = b?.doubleValue\
    \ {\n        if aValue > bValue {\n            return a\n        }\n        if\
    \ aValue < bValue {\n            return b\n        }\n    }\n\n    if let aValue\
    \ = a?.stringValue, bValue = b?.stringValue {\n        if aValue > bValue {\n\
    \            return a\n        }\n        if aValue < bValue {\n            return\
    \ b\n        }\n    }\n    return nil", "    if a < b {\n        return b\n  \
    \  } else if a > b {\n        return a\n    } else {\n        return nil\n   \
    \ }", "    switch (a, b) {\n    case (.intValue(x), .intValue(y)) where x > y:\n\
    \        return .intValue(x)\n    case (.intValue(x), .intValue(y)) where x ==\
    \ y:\n        return nil\n    case (.doubleValue(x), .doubleValue(y)) where x\
    \ > y:\n        return .doubleValue(x)\n    case (.doubleValue(x), .doubleValue(y))\
    \ where x == y:\n        return nil\n    case (.stringValue(x), .stringValue(y))\
    \ where x > y:\n        return .stringValue(x)\n    case (.stringValue(x), .stringValue(y))\
    \ where x == y:\n        return nil\n    default:\n        return nil\n    }",
  "    let aTyped = a as? Int\n    let bTyped = b as? Int\n    let aFloat = aTyped\
    \ ?? a as? Double\n    let bFloat = bTyped ?? b as? Double\n    \n    if let aInt\
    \ = aFloat, let bInt = bFloat {\n        let aDiff = Int(aInt - bInt)\n      \
    \  switch aDiff {\n        case 0...0:\n            return nil\n        case 1...0:\n\
    \            return aTyped\n        case 0...1:\n            return bTyped\n \
    \       case 1...1:\n            return .intValue(aInt - bInt)\n        }\n  \
    \  }\n    \n    if let aString = aTyped, let bString = bTyped {\n        if aString\
    \ == bString {\n            return aString\n        }\n        if let aDouble\
    \ = aString, let bDouble = bString {\n            switch Double(aDouble) - Double(bDouble)\
    \ {\n            case 0...0:\n                return nil\n            case 1...0:\n\
    \                return .stringValue(aString)\n            case 0...1:\n     \
    \           return .stringValue(bString)\n            case 1...1:\n          \
    \      return .doubleValue(aDouble - bDouble)\n            }\n        }\n    }\n\
    \    return nil", "    switch a as Value.Type {\n        case .intValue:\n   \
    \         switch b as Value.Type {\n                case .intValue:\n        \
    \            return b\n                case .stringValue:\n                  \
    \  let aAsInt = Int(a.stringValue)!\n                    let bAsInt = Int(b.stringValue)!\n\
    \                    return aAsInt > bAsInt ? b : a\n            }\n        case\
    \ .doubleValue:\n            switch b as Value.Type {\n                case .intValue:\n\
    \                    let aAsDouble = a.doubleValue\n                    let bAsDouble\
    \ = b.doubleValue\n                    return aAsDouble > bAsDouble ? b : a\n\
    \                case .stringValue:\n                    let aAsDouble = Double(a.stringValue)!\n\
    \                    let bAsDouble = Double(b.stringValue)!\n                \
    \    return aAsDouble > bAsDouble ? b : a\n            }\n        case .stringValue:\n\
    \            switch b as Value.Type {\n                case .intValue:\n     \
    \               let aAsString = a.stringValue\n                    let bAsString\
    \ = b.stringValue\n                    return aAsString > bAsString ? b : a\n\
    \                case .doubleValue:\n                    let aAsString = a.stringValue\n\
    \                    let bAsString = b.stringValue\n                    return\
    \ aAsString > bAsString ? b : a\n                case .stringValue:\n        \
    \            let aAsString = a.stringValue\n                    let bAsString\
    \ = b.stringValue\n                    return aAsString > bAsString ? b : a\n\
    \            }\n    }\n    return nil", "    if let aint = Int(a) {\n        if\
    \ let bint = Int(b) {\n            return aint > bint ? .intValue(aint) : .intValue(bint)\n\
    \        }\n    }\n    \n    if let adouble = Double(a) {\n        if let bdouble\
    \ = Double(b) {\n            return adouble > bdouble ? .doubleValue(adouble)\
    \ : .doubleValue(bdouble)\n        }\n    }\n    \n    if let astring = String(a)\
    \ {\n        if let bstring = String(b) {\n            return astring > bstring\
    \ ? .stringValue(astring) : .stringValue(bstring)\n        }\n    }\n    \n  \
    \  return nil", "    switch a {\n    case .intValue(nil), .doubleValue(nil), .stringValue(nil):\n\
    \        return nil\n    case .intValue(_):\n        if let b = b.doubleValue()\
    \ {\n            return .doubleValue(a.doubleValue() > b ? 1 : -1)\n        }\
    \ else {\n            return .intValue(a.intValue() > b.intValue() ? 1 : -1)\n\
    \        }\n    case .doubleValue(_):\n        if let a = a.doubleValue() {\n\
    \            return .doubleValue(a.doubleValue() > b ? 1 : -1)\n        } else\
    \ {\n            return .doubleValue(b.doubleValue() > a.doubleValue() ? 1 : -1)\n\
    \        }\n    case .stringValue(_):\n        if let a = a.doubleValue() {\n\
    \            return .stringValue(a.doubleValue() > b ? a.stringValue() : b.stringValue())\n\
    \        } else {\n            return .stringValue(b.doubleValue() > a.doubleValue()\
    \ ? b.stringValue() : a.stringValue())\n        }\n    }", "    switch a { //\
    \ Int\n    case .intValue(_):\n        switch b { // Int\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return nil\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Double\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return nil\n        }\n    case .stringValue(_):\n        switch\
    \ b { // String\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return nil\n        }\n    }\n    return nil", "    let a_is_int = a.intValue\
    \ != nil\n    let b_is_int = b.intValue != nil\n    guard a_is_int && b_is_int\
    \ else {\n        return nil\n    }\n    let a_is_double = a.doubleValue != nil\n\
    \    let b_is_double = b.doubleValue != nil\n    guard a_is_double && b_is_double\
    \ else {\n        return nil\n    }\n    let a_is_string = a.stringValue != nil\n\
    \    let b_is_string = b.stringValue != nil\n    guard a_is_string && b_is_string\
    \ else {\n        return nil\n    }\n    if a_is_string {\n        if let a_string_int\
    \ = Int(a.stringValue!) {\n            return b_is_int ? .intValue(a_string_int)\
    \ : .doubleValue(b_is_double ? Double(a_string_int as String) : Double(a_string_int\
    \ as String))\n        }\n        if let a_string_double = Double(a.stringValue!)\
    \ {\n            return b_is_int ? .intValue(a_string_double) : .doubleValue(a_string_double)\n\
    \        }\n    }\n    if a_is_int {\n        if let a_int_double = a.intValue\
    \ as? Double {\n            return b_is_double ? .doubleValue(a_int_double) :\
    \ .intValue(b_is_double ? Double(a_int_double as String) : Int(a_int_double as\
    \ String))\n        }\n        if let a_int_string = a.intValue as? String {\n\
    \            if let a_int_string = Int(a_int_string) {\n                return\
    \ b_is_double ? .doubleValue(a_int_string) : .intValue(b_is_double ? Double(a_int_string)\
    \ : Int(a_int_string))\n            }\n        }\n    }\n    if a_is_double {\n\
    \        if let a_double_string = a.doubleValue as? String {\n            if let\
    \ a_double_string = Double(a_double_string) {\n                return b_is_string\
    \ ? .stringValue(a_double_string) : .doubleValue(a_double_string)\n          \
    \  }\n        }\n    }\n    return nil", "    switch a as? Value {\n    case let\
    \ .intValue(valueA):\n        switch b as? Value {\n        case let .intValue(valueB):\n\
    \            return valueA > valueB ? a : b\n        case let .doubleValue(valueB):\n\
    \            return valueA > valueB ? a : b\n        case let .stringValue(valueB):\n\
    \            return valueA > valueB ? a : b\n        }\n    case let .doubleValue(valueA):\n\
    \        switch b as? Value {\n        case let .intValue(valueB):\n         \
    \   return valueA > valueB ? a : b\n        case let .doubleValue(valueB):\n \
    \           return valueA > valueB ? a : b\n        case let .stringValue(valueB):\n\
    \            return valueA > valueB ? a : b\n        }\n    case let .stringValue(valueA):\n\
    \        switch b as? Value {\n        case let .intValue(valueB):\n         \
    \   return valueA > valueB ? a : b\n        case let .doubleValue(valueB):\n \
    \           return valueA > valueB ? a : b\n        case let .stringValue(valueB):\n\
    \            return valueA > valueB ? a : b\n        }\n    }\n    return nil",
  "    switch (a, b) {\n    case (.intValue(a), .intValue(b)):\n        return a\n\
    \    case (.doubleValue(a), .doubleValue(b)):\n        return a\n    case (.stringValue(a),\
    \ .stringValue(b)):\n        return a\n    default:\n        return nil\n    }",
  "    var val1: Value\n    var val2: Value\n    \n    switch (val1, val2) {\n   \
    \ case (nil, nil):\n        return nil\n    \n    case (let _ as IntValue, _ as\
    \ DoubleValue):\n        return .doubleValue(a.value) < .doubleValue(b.value)\
    \ ? a : b\n        \n    case (let _ as IntValue, _ as StringValue):\n       \
    \ return .stringValue(a.value) < .stringValue(b.value) ? a : b\n        \n   \
    \ case (_ as DoubleValue, let _ as IntValue):\n        return .doubleValue(a.value)\
    \ < .intValue(b.value) ? a : b\n        \n    case (_ as DoubleValue, let _ as\
    \ StringValue):\n        return .stringValue(a.value) < .stringValue(b.value)\
    \ ? a : b\n        \n    case (_ as StringValue, let _ as IntValue):\n       \
    \ return .stringValue(a.value) < .intValue(b.value) ? a : b\n        \n    case\
    \ (_ as StringValue, let _ as StringValue):\n        return .stringValue(a.value)\
    \ < .stringValue(b.value) ? a : b\n        \n    default:\n        fatalError(\"\
    Unexpected case\")\n    }", "    switch a as Value? {\n    case .intValue(n) as\
    \ Int:\n        switch b as Value? {\n        case .intValue(n) as Int:\n    \
    \        return n > b\n        case .stringValue(b) as Int:\n            return\
    \ n < a\n        case .doubleValue(b) as Int:\n            return n < b\n    \
    \    }\n    case .doubleValue(n) as Double:\n        switch b as Value? {\n  \
    \      case .intValue(n) as Int:\n            return n > b\n        case .stringValue(b)\
    \ as Int:\n            return n < a\n        case .doubleValue(b) as Int:\n  \
    \          return n < b\n        }\n    case .stringValue(n) as String:\n    \
    \    switch b as Value? {\n        case .intValue(n) as Int:\n            return\
    \ n > b\n        case .stringValue(b) as Int:\n            return n < a\n    \
    \    case .doubleValue(b) as Int:\n            return n < b\n        }\n    }\n\
    \    return nil", "    if a.intValue() < b.intValue() {\n        return a\n  \
    \  } else if a.intValue() > b.intValue() {\n        return b\n    } else if a.doubleValue()\
    \ < b.doubleValue() {\n        return a\n    } else if a.doubleValue() > b.doubleValue()\
    \ {\n        return b\n    } else {\n        return a\n    }", "    let aDouble\
    \ = a\n    let bDouble = b\n    let aInt = a\n    \n    if aDouble.doubleValue()\
    \ >= bDouble.doubleValue() {\n        return aDouble\n    } else {\n        return\
    \ bDouble\n    }\n    ", "    switch a < b ? .intValue : a > b ? .doubleValue\
    \ : .stringValue {\n    case .intValue(let aInt), .intValue(let bInt):\n     \
    \   return aInt.compare(bInt)\n    case .doubleValue(let aDouble), .doubleValue(let\
    \ bDouble):\n        return aDouble.compare(bDouble)\n    case .stringValue(let\
    \ aString), .stringValue(let bString):\n        return aString.compare(bString)\n\
    \    }\n    return nil", "    if a.intValue < b.intValue {\n        return a\n\
    \    } else if b.intValue < a.intValue {\n        return b\n    } else if a.doubleValue\
    \ < b.doubleValue {\n        return a\n    } else if b.doubleValue < a.doubleValue\
    \ {\n        return b\n    } else if a.stringValue < b.stringValue {\n       \
    \ return a\n    } else if b.stringValue < a.stringValue {\n        return b\n\
    \    }\n    return nil", "    guard let aIsInt = a.isInt, let bIsInt = b.isInt\
    \ else {\n        if a.isDouble && b.isDouble {\n            return a.doubleValue\
    \ < b.doubleValue\n        }\n        if a.isDouble || b.isDouble {\n        \
    \    return a.isDouble ? a < b : b < a\n        }\n        if a.isString && b.isString\
    \ {\n            return a.stringValue < b.stringValue\n        }\n        if a.isString\
    \ || b.isString {\n            return a.isString ? a < b : b < a\n        }\n\
    \        return nil\n    }\n    \n    if aIsInt != bIsInt { return nil }\n   \
    \ if aIsInt {\n        if a.isInt {\n            return a.intValue > b.intValue\n\
    \        } else {\n            return b.intValue > a.intValue\n        }\n   \
    \ }\n    \n    if a.isDouble {\n        if b.isDouble {\n            return a.doubleValue\
    \ > b.doubleValue\n        } else {\n            return b.doubleValue > a.doubleValue\n\
    \        }\n    }\n    \n    if b.isDouble {\n        if a.isDouble {\n      \
    \      return a.doubleValue > b.doubleValue\n        } else {\n            return\
    \ b.doubleValue > a.doubleValue\n        }\n    }\n    \n    if a.isString {\n\
    \        if b.isString {\n            return a.stringValue > b.stringValue\n \
    \       } else {\n            return b.stringValue > a.stringValue\n        }\n\
    \    }\n    \n    if b.isString {\n        if a.isString {\n            return\
    \ a.stringValue > b.stringValue\n        } else {\n            return b.stringValue\
    \ > a.stringValue\n        }\n    }\n    \n    return nil", "    if let aIntValue\
    \ = a.intValue, bIntValue = b.intValue {\n        if aIntValue > bIntValue {\n\
    \            return a\n        } else {\n            return b\n        }\n   \
    \ } else if let aDoubleValue = a.doubleValue, bDoubleValue = b.doubleValue {\n\
    \        if aDoubleValue > bDoubleValue {\n            return a\n        } else\
    \ {\n            return b\n        }\n    } else if let aStringValue = a.stringValue,\
    \ bStringValue = b.stringValue {\n        if aStringValue > bStringValue {\n \
    \           return a\n        } else {\n            return b\n        }\n    }\
    \ else {\n        return nil\n    }", "    switch a {\n    case .intValue:\n \
    \       switch b {\n        case .intValue:\n            return a\n        case\
    \ .doubleValue:\n            return b\n        case .stringValue:\n          \
    \  let a = a.stringValue\n            let b = b.stringValue\n            if a\
    \ == b {\n                return nil\n            }\n            if a.isEmpty\
    \ {\n                return b\n            }\n            if b.isEmpty {\n   \
    \             return a\n            }\n            let aArray = a.characters.split(\"\
    ,\")\n            let bArray = b.characters.split(\",\")\n            if aArray.count\
    \ == bArray.count {\n                for index in 0..<bArray.count {\n       \
    \             if aArray[index] != bArray[index] {\n                        return\
    \ self\n                    }\n                }\n            } else {\n     \
    \           return self\n            }\n        }\n    case .doubleValue:\n  \
    \      switch b {\n        case .intValue:\n            return a\n        case\
    \ .doubleValue:\n            return b\n        case .stringValue:\n          \
    \  let a = a.stringValue\n            let b = b.stringValue\n            if a.isEmpty\
    \ {\n                return b\n            }\n            if b.isEmpty {\n   \
    \             return a\n            }\n            let aArray = a.characters.split(\"\
    ,\")\n            let bArray = b.characters.split(\",\")\n            if aArray.count\
    \ == bArray.count {\n                for index in 0..<bArray.count {\n       \
    \             if aArray[index] != bArray[index] {\n                        return\
    \ self\n                    }\n                }\n            } else {\n     \
    \           return self\n            }\n        }\n    case .stringValue:\n  \
    \      let a = a.stringValue\n        let b = b.stringValue\n        if a == b\
    \ {\n            return self\n        }\n        if a.isEmpty {\n            return\
    \ b\n        }\n        if b.isEmpty {\n            return a\n        }\n    \
    \    let aArray = a.characters.split(\",\")\n        let bArray = b.characters.split(\"\
    ,\")\n        if aArray.count == bArray.count {\n            for index in 0..<bArray.count\
    \ {\n                if aArray[index] != bArray[index] {\n                   \
    \ return self\n                }\n            }\n        } else {\n          \
    \  return self\n        }\n    }", "    var a_double: Double?\n    var b_double:\
    \ Double?\n    \n    if let a = a.doubleValue {\n        a_double = a\n    }\n\
    \    if let b = b.doubleValue {\n        b_double = b\n    }\n    \n    switch\
    \ a {\n    case .intValue(a):\n        switch b {\n        case .intValue(b):\
    \ // Ints compare as equal.\n        case .doubleValue(b_double): // Int and Double\
    \ compare as equal.\n        case .stringValue(b_double!): // Double and String\
    \ compare as equal.\n        case .stringValue(b_double!): // Double and String\
    \ compare as equal.\n            return b\n        default:\n            return\
    \ nil\n        }\n    case .doubleValue(a_double!):\n        switch b {\n    \
    \    case .intValue(b_double!): // Double and Int compare as equal.\n        \
    \    return b\n        case .doubleValue(b): // Double compares less than Int.\n\
    \            return b\n        case .stringValue(b_double!): // Double compares\
    \ less than Double.\n            return b\n        case .stringValue(b_double!):\
    \ // Double compares less than String.\n            return b\n        default:\n\
    \            return nil\n        }\n    case .stringValue(a):\n        switch\
    \ b {\n        case .intValue(b_double!): // String and Int compare as equal.\n\
    \            return b\n        case .doubleValue(b): // String compares less than\
    \ Int.\n            return b\n        case .stringValue(b_double!): // String\
    \ compares less than Double.\n            return b\n        default:\n       \
    \     return nil\n        }\n    }", "    if let a = a.intValue,\n        let\
    \ b = b.doubleValue,\n        !(a.isNaN && b.isNaN),\n        !(a.isInfinite &&\
    \ b.isInfinite),\n        !(a.isNaN && b.isNaN),\n        !(a.isInfinite && b.isInfinite),\n\
    \        !(a.doubleValue == b.doubleValue) {\n        return a\n    } else if\
    \ let a = a.doubleValue,\n        let b = b.intValue,\n        !(a.isNaN && b.isNaN),\n\
    \        !(a.isInfinite && b.isInfinite),\n        !(a.isNaN && b.isNaN),\n  \
    \      !(a.isInfinite && b.isInfinite),\n        !(a.intValue == b.intValue) {\n\
    \        return a\n    } else if let a = a.stringValue,\n        let b = b.stringValue,\n\
    \        !(a.isNaN && b.isNaN),\n        !(a.isInfinite && b.isInfinite),\n  \
    \      !(a.isNaN && b.isNaN),\n        !(a.isInfinite && b.isInfinite),\n    \
    \    !(a.stringValue == b.stringValue) {\n        return a\n    } else {\n   \
    \     return nil\n    }", "    switch a {\n    case .intValue(_): return b ==\
    \ .intValue(a) ? .intValue(b) : nil\n    case .doubleValue(_): return b == .doubleValue(a)\
    \ ? .doubleValue(b) : nil\n    case .stringValue(_): return b == .stringValue(a)\
    \ ? .stringValue(b) : nil\n    }\n    return nil", "    switch (a, b) {\n    \
    \    case (let .intValue(aValue), let .doubleValue(bValue)) where aValue > bValue:\n\
    \            return .doubleValue(bValue)\n        case (let .intValue(aValue),\
    \ let .stringValue(bValue)) where aValue > bValue:\n            return .stringValue(bValue)\n\
    \        case (let .stringValue(aValue), let .stringValue(bValue)) where aValue\
    \ > bValue:\n            return .stringValue(bValue)\n        case (let .stringValue(aValue),\
    \ let .doubleValue(bValue)) where aValue < bValue:\n            return .intValue(aValue)\n\
    \        case (let .intValue(aValue), let .stringValue(bValue)) where aValue <\
    \ bValue:\n            return nil\n        default:\n            return nil\n\
    \    }", "    var aValue = a\n    var bValue = b\n    if aValue is String && bValue\
    \ is String {\n        if aValue < bValue { return aValue }\n        if aValue\
    \ > bValue { return bValue }\n        return nil\n    }\n    if aValue is Int\
    \ && bValue is Double {\n        if aValue < bValue { return aValue }\n      \
    \  if aValue > bValue { return bValue }\n        return nil\n    }\n    if aValue\
    \ is Double && bValue is Int {\n        if aValue < bValue { return aValue }\n\
    \        if aValue > bValue { return bValue }\n        return nil\n    }\n   \
    \ return nil", "    let aIsInt = (a.type == .intValue) || (a.type == .stringValue)\n\
    \    let bIsInt = (b.type == .intValue) || (b.type == .stringValue)\n    if aIsInt\
    \ && !bIsInt { return .intValue(Int(a.intValue) > Int(b.intValue)) }\n    else\
    \ if aIsInt && bIsInt { return nil }\n    else if !aIsInt && bIsInt { return nil\
    \ }\n\n    let aIsDouble = (a.type == .doubleValue) || (a.type == .stringValue)\n\
    \    let bIsDouble = (b.type == .doubleValue) || (b.type == .stringValue)\n  \
    \  if aIsDouble && !bIsDouble { return .doubleValue(Double(a.doubleValue) > Double(b.doubleValue))\
    \ }\n    else if aIsDouble && bIsDouble { return nil }\n    else if !aIsDouble\
    \ && bIsDouble { return nil }\n\n    let aIsString = (a.type == .stringValue)\
    \ || (a.type == .intValue)\n    let bIsString = (b.type == .stringValue) || (b.type\
    \ == .intValue)\n    if aIsString && !bIsString { return .stringValue(a.stringValue\
    \ > b.stringValue) }\n    else if aIsString && bIsString { return nil }\n    else\
    \ if !aIsString && bIsString { return nil }\n    \n    return nil", "    let floatA\
    \ = Float(a.doubleValue)\n    let floatB = Float(b.doubleValue)\n    if floatA\
    \ == floatB {\n        if let a = a.stringValue, let b = b.stringValue {\n   \
    \         switch a {\n            case b:\n                return a\n        \
    \    case _:\n                return b\n            }\n        } else if let a\
    \ = a.intValue, let b = b.intValue {\n            switch a {\n            case\
    \ b:\n                return a\n            case _:\n                return b\n\
    \            }\n        } else {\n            return nil\n        }\n    } else\
    \ {\n        return nil\n    }", "    switch a {\n    case .intValue(v1), .doubleValue(v1),\
    \ .stringValue(v1) where v1 > b: return v1\n    case .intValue(v1), .doubleValue(v1),\
    \ .stringValue(v1) where v1 < b: return nil\n    case .intValue(v1), .doubleValue(v1),\
    \ .stringValue(v1) where v1 == b: return v1\n    case .intValue(v1), .doubleValue(v1),\
    \ .stringValue(v1) where v1 == b: return nil\n    case .intValue(v1), .doubleValue(v1),\
    \ .stringValue(v1) where v1 != b: return nil\n    case .intValue(v1), .doubleValue(v1),\
    \ .stringValue(v1) where v1 != b: return v1\n    default: return nil\n    }",
  "    switch b {\n    case .intValue(b):\n        if a == .intValue(b) {\n      \
    \      return nil\n        }\n        return a\n    case .doubleValue(b):\n  \
    \      if a == .doubleValue(b) {\n            return nil\n        }\n        return\
    \ a\n    case .stringValue(b):\n        if a == .stringValue(b) {\n          \
    \  return nil\n        }\n        return a\n    }\n    return nil", "    switch\
    \ a as! Eq.Element {\n    case .intValue:\n        switch b as! Eq.Element {\n\
    \        case .intValue: return a\n        case .doubleValue: return b\n     \
    \   case .stringValue: return nil\n        }\n    case .doubleValue:\n       \
    \ switch b as! Eq.Element {\n        case .intValue: return a\n        case .doubleValue:\
    \ return b\n        case .stringValue: return nil\n        }\n    case .stringValue:\n\
    \        switch b as! Eq.Element {\n        case .intValue: return a\n       \
    \ case .doubleValue: return b\n        case .stringValue: return nil\n       \
    \ }\n    }\n    return nil", "    let aReal: Double\n    let bReal: Double\n \
    \   switch (a.doubleValue, b.realValue) {\n    case (nil, b.realValue):\n    \
    \    return nil\n    case (nil, a.doubleValue):\n        return nil\n    case\
    \ (false, true):\n        return nil\n    case (true, false):\n        return\
    \ nil\n    case (false, false):\n        return nil\n    case (true, true):\n\
    \        return a\n    case (false, true):\n        return b\n    case (true,\
    \ false):\n        return a\n    case (false, false):\n        return b\n    case\
    \ (true, true):\n        return a\n    default:\n        aReal = a.realValue\n\
    \        bReal = b.realValue\n        if aReal > bReal {\n            return a\n\
    \        } else if aReal < bReal {\n            return b\n        } else {\n \
    \           return a\n        }\n    }", "    switch a {\n    case .intValue(value):\n\
    \        if let b = b as? Value {\n            switch b {\n            case .intValue(value):\n\
    \                return value\n            case .doubleValue(value):\n       \
    \         return value\n            case .stringValue(value):\n              \
    \  return value\n            }\n        }\n        return nil\n    case .doubleValue(value):\n\
    \        if let b = b as? Value {\n            switch b {\n            case .intValue(value):\n\
    \                return value\n            case .doubleValue(value):\n       \
    \         return value\n            case .stringValue(value):\n              \
    \  return value\n            }\n        }\n        return nil\n    case .stringValue(value):\n\
    \        if let b = b as? Value {\n            switch b {\n            case .intValue(value):\n\
    \                return value\n            case .doubleValue(value):\n       \
    \         return value\n            case .stringValue(value):\n              \
    \  return value\n            }\n        }\n        return nil\n    }\n    return\
    \ nil", "    switch a {\n    case .intValue(_):\n        guard b.intValue() !=\
    \ nil else { return nil }\n        return .intValue(b.intValue()!)\n    case .doubleValue(_):\n\
    \        guard b.doubleValue() != nil else { return nil }\n        return .doubleValue(b.doubleValue()!)\n\
    \    case .stringValue(_):\n        guard b.stringValue() != nil else { return\
    \ nil }\n        return .stringValue(b.stringValue()!)\n    }", "    switch (a,\
    \ b) {\n    case let (.intValue(a), .intValue(b)):\n        return a > b ? a :\
    \ b\n    case let (.doubleValue(a), .doubleValue(b)):\n        return a.compare(b)\
    \ == .orderedDescending\n    case let (.stringValue(a), .stringValue(b)):\n  \
    \      return a.compare(b) == .orderedAscending\n    default:\n        return\
    \ nil\n    }", "    switch (a, b) {\n    case (.intValue(a), .intValue(b)):\n\
    \        return b\n    case (.doubleValue(a), .doubleValue(b)):\n        return\
    \ a\n    case (.stringValue(a), .stringValue(b)):\n        return a\n    default:\n\
    \        return nil\n    }", "    var maxA = a\n    var maxB = b\n\n    if a.doubleValue()\
    \ > b.doubleValue() {\n        maxA = b\n        maxB = a\n    }\n    if a.intValue()\
    \ > b.intValue() {\n        maxA = b\n        maxB = a\n    }\n    if a.stringValue()\
    \ > b.stringValue() {\n        maxA = b\n        maxB = a\n    }\n    if a.stringValue()\
    \ == b.stringValue() {\n        if a.intValue() == b.intValue() {\n          \
    \  if a.doubleValue() == b.doubleValue() {\n                return a\n       \
    \     } else {\n                return b\n            }\n        }\n        return\
    \ nil\n    }\n    return nil", "    switch a {\n    case .intValue(_):\n     \
    \   return b == .intValue(a.intValue())\n    case .doubleValue(_):\n        return\
    \ b == .doubleValue(a.doubleValue())\n    case .stringValue(_):\n        return\
    \ b == .stringValue(a.stringValue())\n    }\n    return nil", "    switch a {\n\
    \    case .intValue(_):\n        switch b {\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return nil\n        }\n    case .doubleValue(_):\n\
    \        switch b {\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return nil\n        }\n    case .stringValue(_):\n        switch\
    \ b {\n        case .intValue(_):\n            return nil\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return nil\n\
    \        }\n    }\n    return nil", "    switch a { \n        case .intValue(n):\
    \ \n            if b == .intValue(n) { return .intValue(n) }\n            else\
    \ { return nil }\n        case .doubleValue(d): \n            if b == .doubleValue(d)\
    \ { return .doubleValue(d) }\n            else { return nil }\n        case .stringValue(v):\
    \ \n            if b == .stringValue(v) { return .stringValue(v) }\n         \
    \   else { return nil }\n    }", "    switch a { // a is greater\n    case .intValue(aVal):\n\
    \        switch b { // b is greater\n        case .intValue(bVal):\n         \
    \   return .intValue(aVal > bVal ? aVal : bVal) // a is greater\n        case\
    \ .doubleValue(bVal):\n            return .doubleValue(aVal > bVal ? aVal : bVal)\
    \ // a is greater\n        case .stringValue(bVal):\n            return .stringValue(aVal\
    \ > bVal ? aVal : bVal) // a is greater\n        }\n    case .doubleValue(aVal):\n\
    \        switch b { // b is greater\n        case .intValue(bVal):\n         \
    \   return .doubleValue(aVal > bVal ? aVal : bVal) // a is greater\n        case\
    \ .doubleValue(bVal):\n            return .doubleValue(aVal > bVal ? aVal : bVal)\
    \ // a is greater\n        case .stringValue(bVal):\n            return .doubleValue(aVal\
    \ > bVal ? aVal : bVal) // a is greater\n        case .stringValue(bVal):\n  \
    \          return .doubleValue(aVal > bVal ? aVal : bVal) // a is greater\n  \
    \      }\n    case .stringValue(aVal):\n        switch b { // b is greater\n \
    \       case .intValue(bVal):\n            return .stringValue(aVal > bVal ? aVal\
    \ : bVal) // a is greater\n        case .doubleValue(bVal):\n            return\
    \ .stringValue(aVal > bVal ? aVal : bVal) // a is greater\n        case .stringValue(bVal):\n\
    \            return .stringValue(aVal > bVal ? aVal : bVal) // a is greater\n\
    \        }\n    }\n    return nil", "    switch (a, b) {\n    case (.intValue(_),\
    \ .intValue(_)):\n        return .intValue(_)\n    case (.doubleValue(_), .doubleValue(_)):\n\
    \        return .doubleValue(_)\n    case (.stringValue(_), .stringValue(_)):\n\
    \        return .stringValue(_)\n    default:\n        return nil\n    }", " \
    \   switch a {\n    case .intValue(nif let i) -> if nif.abs(i) == nif.abs(nif\
    \ b) return nif i else nil\n    case .doubleValue(nif let d) -> if nif.abs(d)\
    \ == nif.abs(nif b) return nif d else nil\n    case .stringValue(nif let s) ->\
    \ if nif.abs(s) > nif.abs(nif b) return nil else s\n    }\n    \n    switch b\
    \ {\n    case .intValue(nif let i) -> if nif.abs(i) == nif.abs(nif a) return nif\
    \ i else nil\n    case .doubleValue(nif let d) -> if nif.abs(d) == nif.abs(nif\
    \ a) return nif d else nil\n    case .stringValue(nif let s) -> if nif.abs(s)\
    \ > nif.abs(nif a) return nil else s\n    }\n    \n    return nil", "    switch\
    \ a { case .intValue(_), .doubleValue(_), .stringValue(_)\n    default:\n    \
    \    return nil\n    }\n\n    switch b { case .intValue(_), .doubleValue(_), .stringValue(_)\n\
    \    default:\n        return nil\n    }\n\n    // Both are ints\n    switch a\
    \ { case .intValue($0), .intValue($1), .intValue($2), .intValue($3), .intValue($4),\
    \ .intValue($5), .intValue($6), .intValue($7), .intValue($8), .intValue($9)\n\
    \    default:\n        return nil\n    }\n\n    // Both are doubles\n    switch\
    \ b { case .doubleValue($0), .doubleValue($1), .doubleValue($2), .doubleValue($3),\
    \ .doubleValue($4), .doubleValue($5), .doubleValue($6), .doubleValue($7), .doubleValue($8),\
    \ .doubleValue($9)\n    default:\n        return nil\n    }\n\n    // Both are\
    \ strings\n    switch a { case .stringValue($0), .stringValue($1), .stringValue($2),\
    \ .stringValue($3), .stringValue($4), .stringValue($5), .stringValue($6), .stringValue($7),\
    \ .stringValue($8), .stringValue($9)\n    default:\n        return nil\n    }\n\
    \n    // Both are doubles and strings\n    switch b { case .doubleValue($0), .doubleValue($1),\
    \ .doubleValue($2), .doubleValue($3), .doubleValue($4), .doubleValue($5), .doubleValue($6),\
    \ .doubleValue($7), .doubleValue($8), .doubleValue($9), .stringValue($0), .stringValue($1),\
    \ .stringValue($2), .stringValue($3), .stringValue($4), .stringValue($5), .stringValue($6),\
    \ .stringValue($7), .stringValue($8), .stringValue($9), .stringValue($0), .stringValue($1),\
    \ .stringValue($2), .stringValue($3), .stringValue($4), .stringValue($5), .stringValue($6),\
    \ .stringValue($7), .stringValue($8), .stringValue($9)\n    default:\n       \
    \ return nil\n    }\n\n    // Both are ints, doubles and strings\n    switch a\
    \ { case .intValue($0), .doubleValue($1), .stringValue($2), .intValue($3), .doubleValue($4),\
    \ .stringValue($5), .intValue($6), .doubleValue($7), .stringValue($8), .intValue($9),\
    \ .stringValue($0), .string", "    if let aInt = a.intValue(), let bInt = b.intValue()\
    \ {\n        if aInt > bInt {\n            return a\n        } else if aInt <\
    \ bInt {\n            return b\n        } else {\n            return nil\n   \
    \     }\n    } else if let aDouble = a.doubleValue(), let bDouble = b.doubleValue()\
    \ {\n        if aDouble > bDouble {\n            return a\n        } else if aDouble\
    \ < bDouble {\n            return b\n        } else {\n            return nil\n\
    \        }\n    } else if let aString = a.stringValue(), let bString = b.stringValue()\
    \ {\n        if aString > bString {\n            return a\n        } else if aString\
    \ < bString {\n            return b\n        } else {\n            return nil\n\
    \        }\n    } else {\n        return nil\n    }", "    switch a {\n    case\
    \ .intValue(_):\n        switch b {\n        case .intValue(_):\n            return\
    \ a\n        case .stringValue(_):\n            guard let a = a.stringValue, b\
    \ = b.stringValue else {\n                return nil\n            }\n        \
    \    if a == b {\n                return nil\n            }\n            let numeric\
    \ = a.components(separatedBy: CharacterSet.decimalDigits.inverted).reduce(0) {\
    \ (result, next) -> Int? in\n                let result = Int(next.unicodeScalars.first!)\n\
    \                if result < result {\n                    return result\n   \
    \             }\n                return result\n            }\n            guard\
    \ let bNumeric = b.components(separatedBy: CharacterSet.decimalDigits.inverted).reduce(0)\
    \ { (result, next) -> Int? in\n                let result = Int(next.unicodeScalars.first!)\n\
    \                if result < result {\n                    return result\n   \
    \             }\n                return result\n            }\n            return\
    \ numeric < bNumeric ? .intValue(a) : .stringValue(b)\n        }\n    case .doubleValue(_):\n\
    \        switch b {\n        case .intValue(_):\n            return nil\n    \
    \    case .stringValue(_):\n            guard let a = a.stringValue, b = b.stringValue\
    \ else {\n                return nil\n            }\n            if a == b {\n\
    \                return nil\n            }\n            let numeric = a.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted).reduce(0) { (result, next) -> Int? in\n\
    \                let result = Int(next.unicodeScalars.first!)\n              \
    \  if result < result {\n                    return result\n                }\n\
    \                return result\n            }\n            guard let bNumeric\
    \ = b.components(separatedBy: CharacterSet.decimalDigits.inverted).reduce(0) {\
    \ (result, next) -> Int? in\n                let result = Int(next.unicodeScalars.first!)\n\
    \                if result < result {\n                    return result\n   \
    \             }\n                return result\n            }\n            return\
    \ numeric < bNumeric ? .intValue(a) : .stringValue(b)\n        }\n    case .stringValue(_):\n\
    \        guard let a = a.stringValue, b = b.stringValue else {\n            return\
    \ nil\n        }\n        if a == b {\n            return nil\n        }\n   \
    \     return a < b ? .stringValue(a) : .stringValue(b)\n    }", "    var a = a\n\
    \    var b = b\n    if let aInt = a.intValue() {\n        if let bInt = b.intValue()\
    \ {\n            if aInt > bInt { return .intValue(bInt) }\n            if aInt\
    \ == bInt { return .intValue(aInt) }\n            return nil\n        }\n    \
    \    if let bDouble = b.doubleValue() {\n            if aInt > bDouble { return\
    \ .doubleValue(bDouble) }\n            if aInt == bDouble { return .doubleValue(aInt)\
    \ }\n            return nil\n        }\n        if let bString = b.stringValue()\
    \ {\n            if aInt > bString { return .stringValue(bString) }\n        \
    \    if aInt == bString { return .stringValue(aInt) }\n            return nil\n\
    \        }\n    }\n    if let aDouble = a.doubleValue() {\n        if let bInt\
    \ = b.intValue() {\n            if aDouble > bInt { return .intValue(bInt) }\n\
    \            if aDouble == bInt { return .intValue(aDouble) }\n            return\
    \ nil\n        }\n        if let bDouble = b.doubleValue() {\n            if aDouble\
    \ > bDouble { return .doubleValue(bDouble) }\n            if aDouble == bDouble\
    \ { return .doubleValue(aDouble) }\n            return nil\n        }\n      \
    \  if let bString = b.stringValue() {\n            if aDouble > bString { return\
    \ .stringValue(bString) }\n            if aDouble == bString { return .stringValue(aDouble)\
    \ }\n            return nil\n        }\n    }\n    if let aString = a.stringValue()\
    \ {\n        if let bInt = b.intValue() {\n            if aString > bInt { return\
    \ .intValue(bInt) }\n            if aString == bInt { return .intValue(aString)\
    \ }\n            return nil\n        }\n        if let bDouble = b.doubleValue()\
    \ {\n            if aString > bDouble { return .doubleValue(bDouble) }\n     \
    \       if aString == bDouble { return .doubleValue(aString) }\n            return\
    \ nil\n        }\n        if let bString = b.stringValue() {\n            if aString\
    \ > bString { return .stringValue(bString) }\n            if aString == bString\
    \ { return .stringValue(aString) }\n            return nil\n        }\n    }\n\
    \    return nil", "    var aValue = a\n    var bValue = b\n    \n    if aValue.doubleValue()\
    \ < bValue.doubleValue() {\n        aValue = bValue\n    }\n    \n    if aValue.doubleValue()\
    \ >= bValue.doubleValue() {\n        if aValue.stringValue().toInt() != bValue.stringValue().toInt()\
    \ {\n            return nil\n        }\n    }\n    \n    return aValue", "   \
    \ switch a {\n    case .intValue(aInt):\n        switch b {\n        case .intValue(bInt):\n\
    \            if aInt > bInt {\n                return b\n            }\n     \
    \       else if aInt == bInt {\n                return nil\n            }\n  \
    \          else if aInt == -1 {\n                return .intValue(-1)\n      \
    \      }\n            else if bInt == -1 {\n                return .intValue(-1)\n\
    \            }\n            else if aInt == bInt {\n                if let double\
    \ = Double(aInt) {\n                    return .doubleValue(double)\n        \
    \        }\n                else {\n                    return .intValue(aInt)\n\
    \                }\n            }\n            else {\n                return\
    \ .intValue(aInt)\n            }\n        case .doubleValue(aDouble):\n      \
    \      if b == .doubleValue(Double(aDouble)) {\n                return nil\n \
    \           }\n            else if aDouble > b {\n                return .doubleValue(aDouble)\n\
    \            }\n            else if aDouble == b {\n                return .doubleValue(aDouble)\n\
    \            }\n            else {\n                return .intValue(aInt)\n \
    \           }\n        case .stringValue(aString):\n            if b == .stringValue(aString)\
    \ {\n                return nil\n            }\n            else if aString >\
    \ b {\n                return .stringValue(aString)\n            }\n         \
    \   else if aString == b {\n                return .stringValue(aString)\n   \
    \         }\n            else {\n                return .intValue(aInt)\n    \
    \        }\n        default:\n            return nil\n        }\n    case .doubleValue(aDouble):\n\
    \        switch b {\n        case .intValue(bInt):\n            if aDouble > bInt\
    \ {\n                return b\n            }\n            else if aDouble == bInt\
    \ {\n                return nil\n            }\n            else if aDouble ==\
    \ -1 {\n                return .doubleValue(-1)\n            }\n            else\
    \ if bDouble == -1 {\n                return .doubleValue(-1)\n            }\n\
    \            else if aDouble == bInt {\n                if let double = Double(aDouble)\
    \ {\n                    return .doubleValue(double)\n                }\n    \
    \            else {\n                    return .intValue(aInt)\n            \
    \    }\n            }\n            else {\n                return .doubleValue(aDouble)\n\
    \            }\n        case .doubleValue(bDouble):\n            if b == .doubleValue(bDouble)\
    \ {\n                return nil\n            }\n            else if aDouble >\
    \ b {\n                return .doubleValue(aDouble)\n            }\n         \
    \   else if aDouble == b {\n                return .doubleValue(aDouble)\n   \
    \         }\n            else {\n                return .intValue(aInt)\n    \
    \        }\n        case .stringValue(bString):\n            if b == .stringValue(bString)\
    \ {", "    let aFloat = a?.doubleValue\n    let bFloat = b?.doubleValue\n    \n\
    \    if aFloat != nil && bFloat != nil {\n        if aFloat! < bFloat! {\n   \
    \         return a\n        } else {\n            return b\n        }\n    } else\
    \ {\n        if a == b {\n            return nil\n        } else {\n         \
    \   return a\n        }\n    }", "    var big = a // a is always larger\n    if\
    \ let bv = b.intValue, va = a.intValue, va! >= bv {\n        big = b\n    }\n\
    \    if let bv = b.doubleValue, va = a.doubleValue, va! >= bv {\n        big =\
    \ b\n    }\n    if let bv = b.stringValue, va = a.stringValue, va! >= bv {\n \
    \       big = b\n    }\n    return big", "    switch a <-> b {\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    return nil", "    switch a { // TODO: add support\
    \ for structs\n    case .intValue(i):\n        return .doubleValue(max(i, b))\n\
    \    case .doubleValue(db):\n        return .intValue(min(db, Double.max))\n \
    \   case .stringValue(s):\n        let db2 = Double(s)\n        if db2 == db {\n\
    \            return .doubleValue(max(db, b))\n        } else {\n            return\
    \ .intValue(min(db, db2))\n        }\n    }\n    return nil", "    \n    guard\
    \ let bValue = aValue.compare(bValue) else {\n        return nil\n    }\n    \n\
    \    return bValue", "    let (max1, max2) = (a.doubleValue(), b.doubleValue())\n\
    \    if max1 == max2 {\n        if a.doubleValue() == b.doubleValue() {\n    \
    \        // If the numbers are the same, compare the strings.\n            return\
    \ (a.stringValue(), b.stringValue())\n        } else {\n            // If the\
    \ numbers are different, return nil.\n            return nil\n        }\n    }\
    \ else {\n        // If the numbers are different, return the larger one.\n  \
    \      return max1\n    }", "    \n    let a: Int, b: Int, stringA: String?\n\
    \    \n    if let intAInt = a.intValue {\n        a = intAInt\n    }\n    \n \
    \   if let intBInt = b.intValue {\n        b = intBInt\n    }\n    \n    if let\
    \ doubleA = a.doubleValue {\n        a = doubleA\n    }\n    \n    if let doubleB\
    \ = b.doubleValue {\n        b = doubleB\n    }\n    \n    if let stringAString\
    \ = a.stringValue {\n        stringA = stringAString\n    }\n    \n    if let\
    \ stringBString = b.stringValue {\n        stringB = stringBString\n    }\n  \
    \  \n    if a == b {\n        return a\n    }\n    \n    if a < b {\n        return\
    \ a\n    }\n    \n    if a == Double.leastNonzeroMagnitude || b == Double.leastNonzeroMagnitude\
    \ {\n        return a\n    }\n    \n    if a > b {\n        return b\n    }\n\
    \    \n    if stringA != nil && stringB != nil {\n        if stringA.intValue\
    \ < stringB.intValue {\n            return a\n        }\n        \n        if\
    \ stringA.intValue > stringB.intValue {\n            return b\n        }\n   \
    \     \n        return nil\n    }\n    \n    if stringA == nil && stringB != nil\
    \ {\n        if stringB.intValue > b.intValue {\n            return a\n      \
    \  }\n        \n        return b\n    }\n    \n    if stringA != nil && stringB\
    \ == nil {\n        if stringA.intValue < a.intValue {\n            return b\n\
    \        }\n        \n        return a\n    }\n    \n    if stringA == nil &&\
    \ stringB == nil {\n        return nil\n    }\n    \n    return a", "    var biggest:\
    \ Value?\n\n    var aFloat = a\n    var bFloat = b\n    if let aString = a.stringValue,\
    \ let bString = b.stringValue {\n        if aString == bString {\n           \
    \ return aFloat\n        }\n        if aString == \".\" {\n            aFloat\
    \ = .intValue(Double(aString.unicodeScalars.first!))\n        }\n        if bString\
    \ == \".\" {\n            bFloat = .intValue(Double(bString.unicodeScalars.first!))\n\
    \        }\n        return nil\n    }\n\n    if let aInt = a.intValue, let bInt\
    \ = b.intValue {\n        if aInt > bInt {\n            biggest = a\n        }\n\
    \        else if aInt < bInt {\n            biggest = b\n        }\n        else\
    \ { return nil }\n    }\n    if let aDouble = a.doubleValue, let bDouble = b.doubleValue\
    \ {\n        if aDouble > bDouble {\n            biggest = a\n        }\n    \
    \    else if aDouble < bDouble {\n            biggest = b\n        }\n       \
    \ else { return nil }\n    }\n\n    return biggest", "    switch a {\n       \
    \ case .intValue(aInt):\n            switch b {\n                case .intValue(bInt):\n\
    \                    return bInt\n                case .doubleValue(bDouble):\n\
    \                    return bDouble\n                case .stringValue(bString):\n\
    \                    if let aString = aInt as? String, bString = bInt as? String,\
    \ aString < bString {\n                        return .intValue(bInt)\n      \
    \              } else if aString == bString, let bDouble = bInt as? Double {\n\
    \                        return .doubleValue(bDouble)\n                    }\n\
    \                    return .stringValue(bString)\n            }\n        case\
    \ .doubleValue(aDouble):\n            switch b {\n                case .intValue(bInt):\n\
    \                    return bInt\n                case .doubleValue(bDouble):\n\
    \                    return bDouble\n                case .stringValue(bString):\n\
    \                    if let aDouble = aInt as? Double, bDouble = bInt as? Double,\
    \ aDouble < bDouble {\n                        return .intValue(bInt)\n      \
    \              } else if aDouble == bDouble, let bInt = bInt as? Int {\n     \
    \                   return .doubleValue(bDouble)\n                    }\n    \
    \                return .stringValue(bString)\n            }\n        case .stringValue(aString):\n\
    \            switch b {\n                case .intValue(bInt):\n             \
    \       return bInt\n                case .doubleValue(bDouble):\n           \
    \         return bDouble\n                case .stringValue(bString):\n      \
    \              if let aString = aInt as? String, bString = bInt as? String, aString\
    \ < bString {\n                        return .intValue(bInt)\n              \
    \      } else if aString == bString, let bInt = bInt as? Int {\n             \
    \           return .doubleValue(bDouble)\n                    }\n            \
    \        return .stringValue(bString)\n            }\n    }\n    return nil",
  "    switch a { case .intValue(intValue(a)) case .doubleValue(doubleValue(a)) case\
    \ .stringValue(stringValue(a)) }\n    switch b { case .intValue(intValue(b)) case\
    \ .doubleValue(doubleValue(b)) case .stringValue(stringValue(b)) }\n    return\
    \ nil", "    switch (a, b) {\n    case (.intValue(a), .intValue(b)):\n       \
    \ return .intValue(a)\n    case (.doubleValue(a), .doubleValue(b)):\n        return\
    \ .doubleValue(a)\n    case (.stringValue(a), .stringValue(b)):\n        if a\
    \ == \"1\" || b == \"1\" {\n            return .stringValue(\"1\")\n        }\
    \ else if a.isEmpty || b.isEmpty {\n            return .stringValue(\"\")\n  \
    \      } else {\n            if let a = a.stringValue, let b = b.stringValue {\n\
    \                if a.isEmpty || b.isEmpty {\n                    return .stringValue(\"\
    \")\n                } else {\n                    guard let aNum = Double(a),\
    \ let bNum = Double(b) else {\n                        fatalError(\"Incompatible\
    \ types (use Double instead)\")\n                    }\n                    if\
    \ aNum > bNum {\n                        return .stringValue(a)\n            \
    \        } else if aNum < bNum {\n                        return .stringValue(b)\n\
    \                    }\n                }\n            }\n        }\n    case\
    \ (.intValue(a), .stringValue(b)):\n        return .stringValue(\"\")\n    case\
    \ (.doubleValue(a), .intValue(b)):\n        return .intValue(a)\n    case (.stringValue(a),\
    \ .doubleValue(b)):\n        return .doubleValue(a)\n    }\n    return nil", " \
    \   switch a { // Switch the types of the parameters\n    case .intValue(nilValue):\
    \ return b\n    case .doubleValue(nilValue): return nil\n    case .stringValue(stringValue):\n\
    \        if let n = Double(stringValue), let x = a, let y = b {\n            return\
    \ x.doubleValue() <= n && y.doubleValue() <= n ? x : y\n        }\n        return\
    \ nil\n    }\n    return nil", "    switch (a, b) {\n    case (.intValue(aValue),\
    \ .intValue(bValue)):\n        return aValue > bValue ? .intValue(1) : .intValue(-1)\n\
    \    case (.doubleValue(aValue), .doubleValue(bValue)):\n        return aValue\
    \ > bValue ? .doubleValue(1) : .doubleValue(-1)\n    case (.stringValue(aValue),\
    \ .stringValue(bValue)):\n        return aValue > bValue ? .stringValue(\"1\"\
    ) : .stringValue(\"-1\")\n    default:\n        return nil\n    }", "    switch\
    \ a { \n    case .intValue(b): return .intValue(b)\n    case .doubleValue(b):\
    \ return .doubleValue(b)\n    case .stringValue(b): return .stringValue(b)\n \
    \   }\n    \n    return nil", "    switch a {\n    case .intValue(b):\n      \
    \  return a\n    case .doubleValue(b):\n        return a\n    case .stringValue(b):\n\
    \        return a\n    }\n    return nil", "    let a_type = a.dynamicType\n \
    \   let b_type = b.dynamicType\n    switch a_type {\n    case IntType:\n     \
    \   guard let value = a.intValue else {\n            return nil\n        }\n \
    \       return b.intValue > value ? a : b\n    case DoubleType:\n        guard\
    \ let value = a.doubleValue else {\n            return nil\n        }\n      \
    \  return b.doubleValue > value ? a : b\n    case StringType:\n        guard let\
    \ value = a.stringValue else {\n            return nil\n        }\n        return\
    \ b.stringValue > value ? a : b\n    }", "    switch a {\n    case .intValue(aInt):\
    \ return b == .intValue(aInt) ? nil : a\n    case .doubleValue(aDouble): return\
    \ b == .doubleValue(aDouble) ? nil : a\n    case .stringValue(aString): return\
    \ b == .stringValue(aString) ? nil : a\n    }", "    // Compare a and b as double\
    \ values, not as strings containing doubles.\n    // This allows for precision\
    \ loss from double math, but only if the doubles\n    // are exactly representable.\n\
    \    switch a as? Double {\n    case let as as Double:\n        switch b as? Double\
    \ {\n        case is < as: return a\n        case is > as: return nil\n      \
    \  case is == as: return b\n        case is == as: break\n        }\n    case\
    \ let as as String:\n        switch b as? Double {\n        case is < as: return\
    \ a\n        case is > as: return nil\n        case is == as: return b\n     \
    \   case is == as: break\n        }\n    case let as as Int:\n        switch b\
    \ as? Double {\n        case is < as: return a\n        case is > as: return nil\n\
    \        case is == as: return b\n        case is == as: break\n        }\n  \
    \  case let as as Float:\n        switch b as? Double {\n        case is < as:\
    \ return a\n        case is > as: return nil\n        case is == as: return b\n\
    \        case is == as: break\n        }\n    }\n    \n    // If a and b are both\
    \ strings with no decimal points, treat them as\n    // equal, since they both\
    \ contain no decimal points. Return nil if they\n    // are equal.\n    switch\
    \ a as? String, b as? String {\n    case (.same, .same):\n        return nil\n\
    \    case (.same, .same):\n        return nil\n    case (.hasSuffix(separator:\
    \ \".\"), b hasSuffix(separator: \".\")):\n        return nil\n    case (a hasSuffix(separator:\
    \ \",\"), b hasSuffix(separator: \",\")):\n        return nil\n    case (.hasSuffix(separator:\
    \ \",\"), b hasSuffix(separator: \".\")):\n        return nil\n    case (.hasSuffix(separator:\
    \ \",\"), a hasSuffix(separator: \",\")):\n        return nil\n    case (.hasSuffix(separator:\
    \ \",\"), b hasSuffix(separator: \",\")):\n        return nil\n    default:\n\
    \        return a\n    }", "    if case .intValue(aVal) = a {\n        switch\
    \ b {\n        case .intValue(bVal), .doubleValue(bVal):\n            return bVal\n\
    \        case .stringValue(bVal):\n            return bVal.compare(aVal)\n   \
    \     default:\n            return nil\n        }\n    } else if case .doubleValue(aVal)\
    \ = a {\n        switch b {\n        case .intValue(bVal), .doubleValue(bVal):\n\
    \            return aVal\n        case .stringValue(bVal):\n            return\
    \ aVal.compare(bVal)\n        default:\n            return nil\n        }\n  \
    \  } else {\n        if case .stringValue(aVal) = a {\n            if case .stringValue(bVal)\
    \ = b {\n                return aVal\n            } else {\n                return\
    \ nil\n            }\n        } else {\n            if case .stringValue(bVal)\
    \ = a {\n                return bVal\n            } else {\n                return\
    \ nil\n            }\n        }\n    }", "    switch (a, b) {\n    case (.intValue(aValue),\
    \ .intValue(bValue)):\n        if aValue > bValue { return b }\n        if aValue\
    \ < bValue { return a }\n        return nil\n\n    case (.doubleValue(aValue),\
    \ .doubleValue(bValue)):\n        if aValue > bValue { return b }\n        if\
    \ aValue < bValue { return a }\n        return nil\n\n    case (.stringValue(aValue),\
    \ .stringValue(bValue)):\n        if aValue > bValue { return b }\n        if\
    \ aValue < bValue { return a }\n        return nil\n    }\n    return nil", " \
    \   switch a {\n    case .intValue(_): return b\n    case .doubleValue(_): return\
    \ b\n    case .stringValue(_): return b\n    }\n    return nil", "    switch a\
    \ {\n    case .intValue(i): return b == .intValue(i)\n    case .doubleValue(d):\
    \ return b == .doubleValue(d) || b == .intValue(0)\n    case .stringValue(s):\
    \ return b == .stringValue(s) || b == .intValue(0)\n    }\n    \n    return nil",
  "    var result: Value?\n    switch a as Value? {\n    case .intValue(_):\n    \
    \    switch b as Value? {\n        case .intValue(_):\n            result = a\n\
    \        case .doubleValue(let b):\n            if b > a {\n                result\
    \ = a\n            } else {\n                result = b\n            }\n     \
    \   case .stringValue(let b):\n            if b > a {\n                result\
    \ = a\n            } else {\n                result = b\n            }\n     \
    \   case nil:\n            result = b\n        }\n    case .doubleValue(let a):\n\
    \        switch b as Value? {\n        case .intValue(_):\n            if a >\
    \ b {\n                result = b\n            } else {\n                result\
    \ = a\n            }\n        case .doubleValue(let b):\n            if b > a\
    \ {\n                result = a\n            } else {\n                result\
    \ = b\n            }\n        case .stringValue(let b):\n            if b > a\
    \ {\n                result = a\n            } else {\n                result\
    \ = b\n            }\n        case nil:\n            result = a\n        }\n \
    \   case .stringValue(let a):\n        switch b as Value? {\n        case .intValue(_):\n\
    \            if a > b {\n                result = b\n            } else {\n  \
    \              result = a\n            }\n        case .doubleValue(let b):\n\
    \            if b > a {\n                result = a\n            } else {\n  \
    \              result = b\n            }\n        case .stringValue(let b):\n\
    \            if b > a {\n                result = a\n            } else {\n  \
    \              result = b\n            }\n        case nil:\n            result\
    \ = a\n        }\n    default:\n        result = a\n    }\n    return result",
  "    switch a as! Value, b as! Value {\n    case .intValue:\n        if a.intValue\
    \ > b.intValue {\n            return a\n        } else if a.intValue < b.intValue\
    \ {\n            return b\n        } else {\n            return nil\n        }\n\
    \    case .doubleValue:\n        if a.doubleValue > b.doubleValue {\n        \
    \    return a\n        } else if a.doubleValue < b.doubleValue {\n           \
    \ return b\n        } else {\n            return nil\n        }\n    case .stringValue:\n\
    \        if a.stringValue > b.stringValue {\n            return a\n        } else\
    \ if a.stringValue < b.stringValue {\n            return b\n        } else {\n\
    \            return nil\n        }\n    }", "    switch a { // a will be in one\
    \ of the cases, e.g. .intValue(Int)\n        case .intValue(n): return b == .intValue(n)\
    \ ? .intValue(Int) : nil\n        case .doubleValue(n): return b == .doubleValue(n)\
    \ ? .doubleValue(Double) : nil\n        case .stringValue(n): return b == .stringValue(n)\
    \ ? .stringValue(String) : nil\n    }\n    return nil", "    if let bInt = b.intValue\
    \ {\n        if let aInt = a.intValue {\n            if aInt > bInt {\n      \
    \          return a\n            }\n            if aInt == bInt {\n          \
    \      return nil\n            }\n        }\n    }\n    \n    if let bDouble =\
    \ b.doubleValue {\n        if let aDouble = a.doubleValue {\n            if aDouble\
    \ > bDouble {\n                return a\n            }\n            if aDouble\
    \ == bDouble {\n                return nil\n            }\n        }\n    }\n\
    \    \n    if let bString = b.stringValue {\n        if let aString = a.stringValue\
    \ {\n            if aString > bString {\n                return a\n          \
    \  }\n            if aString == bString {\n                return nil\n      \
    \      }\n        }\n    }\n    \n    return nil", "    var larger: Value?\n \
    \   var smaller: Value?\n    \n    switch a {\n    case .intValue(_):\n      \
    \  switch b {\n        case .intValue(_):\n            return nil\n        case\
    \ .doubleValue(_):\n            smaller = a\n        case .stringValue(_):\n \
    \           smaller = a\n        }\n    case .doubleValue(_):\n        switch\
    \ b {\n        case .intValue(_):\n            smaller = a\n        case .doubleValue(_):\n\
    \            larger = a\n        case .stringValue(_):\n            smaller =\
    \ a\n        }\n    case .stringValue(_):\n        switch b {\n        case .intValue(_):\n\
    \            smaller = a\n        case .doubleValue(_):\n            larger =\
    \ a\n        case .stringValue(_):\n            larger = a\n        }\n    }\n\
    \    \n    switch b {\n    case .intValue(_):\n        switch a {\n        case\
    \ .intValue(_):\n            return nil\n        case .doubleValue(_):\n     \
    \       smaller = b\n        case .stringValue(_):\n            smaller = b\n\
    \        }\n    case .doubleValue(_):\n        switch a {\n        case .intValue(_):\n\
    \            smaller = b\n        case .doubleValue(_):\n            larger =\
    \ b\n        case .stringValue(_):\n            smaller = b\n        }\n    case\
    \ .stringValue(_):\n        switch a {\n        case .intValue(_):\n         \
    \   smaller = b\n        case .doubleValue(_):\n            larger = b\n     \
    \   case .stringValue(_):\n            larger = b\n        }\n    }\n    \n  \
    \  if smaller != nil && larger != nil {\n        switch smaller {\n        case\
    \ .intValue(_):\n            return larger\n        case .doubleValue(_):\n  \
    \          return larger\n        case .stringValue(_):\n            return larger\n\
    \        }\n    }\n    return nil", "    switch a { case .intValue(aval), .doubleValue(aval),\
    \ .stringValue(aval) where aval == b }\n    case .intValue(aval), .doubleValue(aval),\
    \ .stringValue(aval),\n         .intValue(bval), .doubleValue(bval), .stringValue(bval)\n\
    \         where aval == b\n    {\n        return b\n    }\n    return nil", " \
    \   switch a as? Int, b as? Int, a as? Double, b as? Double {\n    case (_, let\
    \ b, _), (_, _, let a), (_, _, _, _), let a = a, let b = b:\n        return a\
    \ > b ? a : b\n    case let a = a as? String, let b = b as? String:\n        return\
    \ a > b ? a : b\n    case (_, let b, _), (_, _, let a):\n        return a < b\
    \ ? a : b\n    }\n    return nil", "    var lv = a\n    var rv = b\n    if a.hashValue\
    \ < b.hashValue {\n        lv = b\n        rv = a\n    }\n    if lv.hashValue\
    \ == rv.hashValue {\n        if lv.intValue < rv.intValue {\n            return\
    \ lv\n        } else {\n            return rv\n        }\n    } else {\n     \
    \   if lv.doubleValue < rv.doubleValue {\n            return lv\n        } else\
    \ {\n            return rv\n        }\n    }\n    return nil", "    switch (a,\
    \ b) {\n    case (.intValue(a), .intValue(b)) if b > a => .intValue(b)\n    case\
    \ (.doubleValue(a), .doubleValue(b)) if b > a => .doubleValue(b)\n    case (.stringValue(a),\
    \ .stringValue(b)) if b > a => .stringValue(b)\n    case (.stringValue(a), .stringValue(b))\
    \ if b > a => .stringValue(b)\n    default: return nil\n    }", "    switch b\
    \ {\n    case .stringValue:\n        if a.stringValue < b.stringValue {\n    \
    \        return a\n        } else {\n            return b\n        }\n    case\
    \ .intValue:\n        if a.intValue < b.intValue {\n            return a\n   \
    \     } else {\n            return b\n        }\n    case .doubleValue:\n    \
    \    if a.doubleValue < b.doubleValue {\n            return a\n        } else\
    \ {\n            return b\n        }\n    }\n    return nil", "    switch a {\n\
    \    case .intValue(x): return b == .intValue(x) ? a : nil\n    case .doubleValue(x):\
    \ return b == .doubleValue(x) ? a : nil\n    case .stringValue(x): return b ==\
    \ .stringValue(x) ? a : nil\n    }\n    return nil", "    switch (a, b) {\n  \
    \  case (.intValue(a), .intValue(b)) as (Value, Value):\n        return b\n  \
    \  case (.intValue(a), .doubleValue(b)) as (Value, Value):\n        return a\n\
    \    case (.doubleValue(a), .doubleValue(b)) as (Value, Value):\n        return\
    \ a\n    case (.stringValue(a), .stringValue(b)) as (Value, Value):\n        return\
    \ b\n    case (.stringValue(a), .doubleValue(b)) as (Value, Value):\n        return\
    \ a\n    case (.doubleValue(a), .intValue(b)) as (Value, Value):\n        return\
    \ nil\n    default:\n        return nil\n    }", "    switch a {\n    case .intValue(nil),\
    \ .doubleValue(nil), .stringValue(nil):\n        return nil\n    case .intValue(value):\n\
    \        return .intValue(b)\n    case .doubleValue(value):\n        return .doubleValue(b)\n\
    \    case .stringValue(value):\n        return .stringValue(b)\n    }", "    switch\
    \ a {\n    case .intValue(_):\n        switch b {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b {\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .stringValue(_):\n        switch b\
    \ {\n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a { case .intValue(_): return b\
    \ == .intValue(a)\n    case .doubleValue(_): return b == .doubleValue(a)\n   \
    \ case .stringValue(_): return b == .stringValue(a)\n    }\n    return nil", " \
    \   switch a {\n    case .intValue(b):\n        if let b = b, b.isKind(of: Int)\
    \ { return b }\n    case .doubleValue(b):\n        if let b = b, b.isKind(of:\
    \ Double) { return b }\n    case .stringValue(b):\n        if let b = b, b.isKind(of:\
    \ String) {\n            if b == \"?\" { return b }\n            do {\n      \
    \          let doubleb = Double(b)\n                return b\n            }\n\
    \            catch let err {\n                return nil\n            }\n    \
    \    }\n    }\n    return nil", "    if let intVal = a.intValue, let doubleVal\
    \ = b.doubleValue {\n        switch intVal {\n        case .intValue(intVal):\
    \ return intVal > doubleVal ? .intValue(Int8(intVal)) : .doubleValue(Double(doubleVal))\n\
    \        case .doubleValue(doubleVal): return intVal > doubleVal ? .intValue(Int8(intVal))\
    \ : .doubleValue(Double(doubleVal))\n        default:\n            return .stringValue(String(intVal.description))\n\
    \        }\n    } else if let stringVal = a.stringValue, let stringVal2 = b.stringValue\
    \ {\n        return .stringValue(String(stringVal.description)) > .stringValue(String(stringVal2.description))\
    \ ? .stringValue(String(stringVal2.description)) : .stringValue(String(stringVal.description))\n\
    \    }\n    return nil", "    switch a {\n    case .intValue(_):\n        switch\
    \ b {\n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return nil\n\
    \        }\n    case .doubleValue(_):\n        switch b {\n        case .intValue(_):\n\
    \            return b\n        case .doubleValue(_):\n            return a\n \
    \       case .stringValue(_):\n            return nil\n        }\n    case .stringValue(_):\n\
    \        switch b {\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return nil\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil", "    switch a {\n  \
    \  case .intValue(_):\n        switch b {\n        case .doubleValue(_):\n   \
    \         if a.doubleValue() < b.doubleValue() {\n                return a\n \
    \           } else if a.doubleValue() == b.doubleValue() {\n                return\
    \ a\n            }\n        case .stringValue(_):\n            if a.stringValue()\
    \ < b.stringValue() {\n                return a\n            } else if a.stringValue()\
    \ == b.stringValue() {\n                return a\n            }\n        }\n \
    \   case .doubleValue(_):\n        switch b {\n        case .intValue(_):\n  \
    \          if a.doubleValue() < b.intValue() {\n                return a\n   \
    \         } else if a.doubleValue() == b.doubleValue() {\n                return\
    \ a\n            }\n        case .stringValue(_):\n            if a.stringValue()\
    \ < b.stringValue() {\n                return a\n            } else if a.stringValue()\
    \ == b.stringValue() {\n                return a\n            }\n        }\n \
    \   case .stringValue(_):\n        switch b {\n        case .intValue(_):\n  \
    \          if a.stringValue() < b.intValue() {\n                return a\n   \
    \         } else if a.stringValue() == b.stringValue() {\n                return\
    \ a\n            }\n        case .doubleValue(_):\n            if a.stringValue()\
    \ < b.doubleValue() {\n                return a\n            } else if a.stringValue()\
    \ == b.stringValue() {\n                return a\n            }\n        }\n \
    \   }\n    return nil", "    switch (a, b) {\n    case (intValue(a), intValue(b)):\n\
    \        return a\n    case (doubleValue(a), doubleValue(b)):\n        return\
    \ a\n    case (stringValue(a), stringValue(b)):\n        return a\n    default:\n\
    \        return nil\n    }", "    switch (a, b) {\n    case (.intValue(x), .intValue(y))\
    \ if x > y else {\n        return .intValue(x)\n    }\n    case (.doubleValue(x),\
    \ .doubleValue(y)) if x > y else {\n        return .doubleValue(x)\n    }\n  \
    \  case (.stringValue(x), .stringValue(y)) if x > y else {\n        return .stringValue(x)\n\
    \    }\n    default:\n        return nil\n    }", "    switch a {\n    case .intValue(aInt):\n\
    \        switch b {\n        case .doubleValue(bDouble):\n            if aInt\
    \ == bDouble {\n                return nil\n            } else {\n           \
    \     return .doubleValue(bDouble)\n            }\n        case .stringValue(bString):\n\
    \            if aInt < bInt {\n                return .intValue(aInt)\n      \
    \      } else {\n                return .stringValue(bString)\n            }\n\
    \        }\n    case .doubleValue(aDouble):\n        switch b {\n        case\
    \ .intValue(bInt):\n            if aDouble == bInt {\n                return nil\n\
    \            } else {\n                return .doubleValue(bDouble)\n        \
    \    }\n        case .stringValue(bString):\n            if aDouble < bDouble\
    \ {\n                return .doubleValue(aDouble)\n            } else {\n    \
    \            return .stringValue(bString)\n            }\n        }\n    case\
    \ .stringValue(aString):\n        switch b {\n        case .intValue(bInt):\n\
    \            if aString == bInt {\n                return nil\n            } else\
    \ {\n                return .stringValue(bString)\n            }\n        case\
    \ .doubleValue(bDouble):\n            if aString < bString {\n               \
    \ return .stringValue(aString)\n            } else {\n                return .doubleValue(bDouble)\n\
    \            }\n        }\n    }\n    return nil", "    var v = a\n    switch\
    \ b {\n    case .intValue(let bInt):\n        if v == .intValue(bInt) {\n    \
    \        return nil\n        }\n    case .doubleValue(let bDouble):\n        if\
    \ v == .doubleValue(bDouble) {\n            return nil\n        }\n    case .stringValue(let\
    \ bString):\n        if v == .stringValue(bString) {\n            return nil\n\
    \        }\n    }\n    return v", "    switch a {\n    case .intValue(nil, b):\n\
    \        return b\n    case .doubleValue(a, nil):\n        return a\n    case\
    \ .stringValue(a, b, nil):\n        return b\n    case .stringValue(nil, a, nil):\n\
    \        return a\n    }\n    return nil", "    var a = a\n    var b = b\n   \
    \ if let aInt = a.intValue() {\n        if let bInt = b.intValue() {\n       \
    \     return aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n        }\n    \
    \    \n    }\n    if let aDouble = a.doubleValue() {\n        if let bDouble =\
    \ b.doubleValue() {\n            return aDouble > bDouble ? .doubleValue(aDouble)\
    \ : .doubleValue(bDouble)\n        }\n        \n    }\n    if let aString = a.stringValue()\
    \ {\n        if let bString = b.stringValue() {\n            return aString >\
    \ bString ? .stringValue(aString) : .stringValue(bString)\n        }\n       \
    \ \n    }\n    return nil", "    switch (a, b){\n    case (.intValue(x), .intValue(y))\
    \ if x > y -> return .intValue(x)\n    case (.intValue(x), .intValue(y)) if x\
    \ == y -> return .intValue(x)\n    case (.intValue(x), .doubleValue(y)) if x >\
    \ y -> return .intValue(x)\n    case (.doubleValue(x), .doubleValue(y)) if x >\
    \ y -> return .doubleValue(x)\n    case (.doubleValue(x), .doubleValue(y)) if\
    \ x == y -> return .doubleValue(x)\n    case (.doubleValue(x), .stringValue(y))\
    \ if x > y -> return .doubleValue(x)\n    case (.stringValue(x), .stringValue(y))\
    \ if x > y -> return .stringValue(x)\n    case (.stringValue(x), .intValue(y))\
    \ if x > y -> return .stringValue(x)\n    case (.stringValue(x), .doubleValue(y))\
    \ if x > y -> return .stringValue(x)\n    case (.doubleValue(x), .intValue(y))\
    \ if x > y -> return .doubleValue(x)\n    case (.intValue(x), .intValue(y)) if\
    \ x == y -> return .intValue(x)\n    case (.intValue(x), .stringValue(y)) if x\
    \ == y -> return .intValue(x)\n    case (.stringValue(x), .stringValue(y)) if\
    \ x == y -> return .stringValue(x)\n    case (.stringValue(x), .doubleValue(y))\
    \ if x == y -> return .stringValue(x)\n    case (.stringValue(x), .intValue(y))\
    \ if x == y -> return .stringValue(x)\n    case (.doubleValue(x), .intValue(y))\
    \ if x == y -> return .doubleValue(x)\n    case (.intValue(x), .intValue(y)) if\
    \ x == y -> return .intValue(x)\n    case (.stringValue(x), .stringValue(y)) if\
    \ x == y -> return .stringValue(x)\n    case (.doubleValue(x), .stringValue(y))\
    \ if x == y -> return .doubleValue(x)\n    case (.doubleValue(x), .intValue(y))\
    \ if x == y -> return .doubleValue(x)\n    case (.intValue(x), .intValue(y)) if\
    \ x == y -> return .intValue(x)\n    case (.doubleValue(x), .doubleValue(y)) if\
    \ x == y -> return .doubleValue(x)\n    case (.stringValue(x), .doubleValue(y))\
    \ if x == y -> return .stringValue(x)\n    case (.stringValue(x), .intValue(y))\
    \ if x == y -> return .stringValue(x)\n    case (.stringValue(x), .doubleValue(y))\
    \ if x == y -> return .stringValue(x)\n    case (.doubleValue(x), .intValue",
  "    switch a { case .intValue(_):\n        switch b { case .intValue(_):\n    \
    \        return a\n        default:\n            return b\n        }\n    case\
    \ .doubleValue(_):\n        switch b { case .doubleValue(_):\n            return\
    \ a\n        default:\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { case .stringValue(_):\n            return a\n        default:\n\
    \            return b\n        }\n    default:\n        return nil\n    }", " \
    \   switch a {\n    case .intValue(_):\n        switch b {\n        case .doubleValue(let\
    \ value):\n            return .intValue(value)\n        case .stringValue(let\
    \ value):\n            return .stringValue(String(value).deletingCommas())\n \
    \       }\n    case .doubleValue(_):\n        switch b {\n        case .intValue(let\
    \ value):\n            return .doubleValue(value)\n        case .stringValue(let\
    \ value):\n            return .stringValue(String(value).deletingCommas())\n \
    \       }\n    case .stringValue(_):\n        switch b {\n        case .intValue(let\
    \ value):\n            return .stringValue(value)\n        case .doubleValue(let\
    \ value):\n            return .doubleValue(value)\n        }\n    }\n    return\
    \ nil", "    if let a_intValue = a.intValue, let b_intValue = b.intValue {\n \
    \       if a_intValue > b_intValue {\n            return a\n        }\n    }\n\
    \    if let a_doubleValue = a.doubleValue, let b_doubleValue = b.doubleValue {\n\
    \        if a_doubleValue > b_doubleValue {\n            return a\n        }\n\
    \    }\n    if let a_stringValue = a.stringValue, let b_stringValue = b.stringValue\
    \ {\n        if a_stringValue > b_stringValue {\n            return a\n      \
    \  }\n    }\n    return nil", "    \n    switch a where a.isKindOfClass(Double),\
    \ b.isKindOfClass(Double) {\n    case true:\n        if let a = a.doubleValue,\
    \ b = b.doubleValue {\n            return .doubleValue(max(min(a, b), Double.infinity))\n\
    \        }\n    case false:\n        if let a = a.intValue, b = b.intValue {\n\
    \            return .intValue(max(min(a, b), Int32.max))\n        }\n    case\
    \ nil:\n        if let a = a.stringValue, b = b.stringValue {\n            return\
    \ .stringValue(max(min(a, b), b.hasDecimalSeparator)\n                ? b.stringValue.stringByReplacingOccurrencesOfString(\"\
    ,\", withString: \"\")\n                : b.stringValue)\n        }\n    default:\n\
    \        return nil\n    }", "    switch b {\n    case .intValue(_), .doubleValue(_),\
    \ .stringValue(_), .stringEqualsIgnoreCase(_):\n        return a\n    case .intEqualsIgnoreCase(_),\
    \ .doubleEqualsIgnoreCase(_), .stringEqualsIgnoreCase(_):\n        return nil\n\
    \    }\n    return a", "    switch a <? b where a == b {\n    case let .intValue(aValue):\n\
    \        return .intValue(aValue)\n    case let .doubleValue(aValue):\n      \
    \  return .doubleValue(aValue)\n    case let .stringValue(aValue):\n        if\
    \ let bValue = b.stringValue {\n            return .stringValue(aValue > bValue\
    \ ? aValue : bValue)\n        } else {\n            return .stringValue(\"0\"\
    )\n        }\n    }\n    return nil", "    if a.doubleValue() > b.doubleValue()\
    \ {\n        return b\n    } else if a.doubleValue() < b.doubleValue() {\n   \
    \     return a\n    }\n\n    if a.intValue() > b.intValue() {\n        return\
    \ b\n    } else if a.intValue() < b.intValue() {\n        return a\n    }\n\n\
    \    if a.stringValue() > b.stringValue() {\n        return b\n    } else if a.stringValue()\
    \ < b.stringValue() {\n        return a\n    }\n\n    return nil", "    if a ===\
    \ b {\n        return nil\n    }\n\n    let floatA = a?.floatValue\n    let floatB\
    \ = b?.floatValue\n    switch floatA, floatB {\n    case (nil, nil):\n       \
    \ return nil\n    case (let floatA, let floatB), (_, let floatB):\n        if\
    \ floatA < floatB {\n            return .intValue(floatA)\n        }\n       \
    \ return .doubleValue(max(floatA, floatB))\n    case (_, let floatA), (_, let\
    \ floatB):\n        if floatA > floatB {\n            return .intValue(floatA)\n\
    \        }\n        return .doubleValue(min(floatA, floatB))\n    case (_, let\
    \ floatA), (_, let floatB), (_, let floatB):\n        if floatA < floatB {\n \
    \           return .doubleValue(max(floatA, floatB))\n        }\n        if floatA\
    \ > floatB {\n            return .doubleValue(min(floatA, floatB))\n        }\n\
    \        return .intValue(floatA)\n    case (_, let floatA), (_, let floatB),\
    \ (_, let floatB), (_, let floatB):\n        if floatA < floatB {\n          \
    \  return .intValue(floatA)\n        }\n        if floatA > floatB {\n       \
    \     return .intValue(floatA)\n        }\n        return .doubleValue(max(floatA,\
    \ floatB))\n    case (_, let floatA), (_, let floatB), (_, let floatB), (_, let\
    \ floatB), (_, let floatB):\n        if floatA < floatB {\n            return\
    \ .intValue(floatA)\n        }\n        if floatA > floatB {\n            return\
    \ .intValue(floatA)\n        }\n        if floatA < floatB {\n            return\
    \ .intValue(floatA)\n        }\n        if floatA > floatB {\n            return\
    \ .intValue(floatA)\n        }\n        return .doubleValue(min(floatA, floatB))\n\
    \    case (_, let floatA), (_, let floatB), (_, let floatB), (_, let floatB),\
    \ (_, let floatB), (_, let floatB):\n        if floatA < floatB {\n          \
    \  return .intValue(floatA)\n        }\n        if floatA > floatB {\n       \
    \     return .intValue(floatA)\n        }\n        if floatA < floatB {\n    \
    \        return .intValue(floatA)\n        }\n        if floatA > floatB {\n \
    \           return .intValue(floatA)\n        }\n        if floatA < floatB {\n\
    \            return .intValue(floatA)\n        }\n        return .doubleValue(max(floatA, ",
  "    // Convert one value to the other of the same type\n    let converted_a = a.dynamicType\
    \ === b.dynamicType ? a.intValue(b) : a.doubleValue(b)\n    // Determine if the\
    \ values are equal\n    return converted_a.compare(b.dynamicType == Double.self\
    \ ? b.doubleValue(a) : b.doubleValue(a))", "    let a_int = a.intValue()\n   \
    \ let b_int = b.intValue()\n    let a_double = a.doubleValue()\n    let b_double\
    \ = b.doubleValue()\n    let a_int_str = a.stringValue()\n    let b_int_str =\
    \ b.stringValue()\n    \n    switch {\n    case a_int > b_int:\n        return\
    \ .intValue(b_int)\n    case a_int < b_int:\n        return .intValue(a_int)\n\
    \    case a_double > b_double:\n        return .doubleValue(b_double)\n    case\
    \ a_double < b_double:\n        return .doubleValue(a_double)\n    case a_int_str\
    \ > b_int_str:\n        return .stringValue(b_int_str)\n    case a_int_str < b_int_str:\n\
    \        return .stringValue(a_int_str)\n    default:\n        return nil\n  \
    \  }", "    switch (a, b) {\n    case (.intValue(a), .intValue(b)):\n        return\
    \ .intValue(a)\n    case (.intValue(a), .doubleValue(b)):\n        return .doubleValue(a)\n\
    \    case (.intValue(a), .stringValue(b)):\n        return .stringValue(a)\n \
    \   case (.doubleValue(a), .doubleValue(b)):\n        return .doubleValue(a)\n\
    \    case (.doubleValue(a), .stringValue(b)):\n        return .stringValue(a)\n\
    \    case (.stringValue(a), .stringValue(b)):\n        return .stringValue(a)\n\
    \    case (.stringValue(a), .intValue(b)):\n        return .intValue(a)\n    case\
    \ (nil, nil):\n        return nil\n    default:\n        return nil\n    }", " \
    \   switch a { \n    case .intValue(i), .doubleValue(d), .stringValue(str): \n\
    \        return .doubleValue(max(i, d)) \n    case .stringValue(str): \n     \
    \   return .stringValue(max(str, b))\n    case nil: \n        return nil \n  \
    \  }", "    switch a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString)\n\
    \    case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString)\n    default:\n\
    \        guard a == b else { return nil }\n    }\n    return a", "    var a: Value\n\
    \    var b: Value\n    switch a {\n    case .intValue(_):\n        guard let i\
    \ = (a as? Int) else {\n            return nil\n        }\n        a = .intValue(b)\n\
    \        b = .intValue(i)\n    case .doubleValue(_):\n        guard let d = (a\
    \ as? Double) else {\n            return nil\n        }\n        a = .doubleValue(b)\n\
    \        b = .doubleValue(a)\n    case .stringValue(_):\n        guard let s =\
    \ (a as? String) else {\n            return nil\n        }\n        a = .stringValue(b)\n\
    \        b = .stringValue(a)\n    }\n    if a != b {\n        return nil\n   \
    \ }\n    return a", "    switch a {\n    case .intValue(_):\n        if a.intValue()\
    \ < b.intValue() {\n            return a\n        }\n        return b\n    case\
    \ .doubleValue(_):\n        if a.doubleValue() < b.doubleValue() {\n         \
    \   return a\n        }\n        return b\n    case .stringValue(_):\n       \
    \ if a.stringValue() < b.stringValue() {\n            return a\n        }\n  \
    \      return b\n    }\n    return nil", "    if a == .intValue(b) {\n       \
    \ return .intValue(b);\n    } else if a == .doubleValue(b) {\n        return .doubleValue(b);\n\
    \    } else if a == .stringValue(b) {\n        if let str = b.stringValue {\n\
    \            guard str.count >= a.stringValue.count else { return nil }\n    \
    \        var newStr = str\n            if str.count == a.stringValue.count {\n\
    \                for i in 0..<a.stringValue.count {\n                    if str.index(after:\
    \ a.stringValue[i]) == nil {\n                        newStr = newStr.substring(0,\
    \ newStr.index(before: newStr.endIndex))\n                        break;\n   \
    \                 }\n                }\n            }\n            return .stringValue(newStr);\n\
    \        }\n    }\n    return nil;", "    switch a <-> b {\n    case .intValue:\n\
    \        return a.intValue\n    case .doubleValue:\n        return a.doubleValue\n\
    \    case .stringValue:\n        return a.stringValue\n    }\n    return nil",
  "    // TODO: Test edge cases\n    switch a {\n    case .intValue(aValue):\n   \
    \     return b == .intValue(bValue) ? .intValue(aValue) : nil\n    case .doubleValue(aValue):\n\
    \        return b == .doubleValue(bValue) ? .doubleValue(aValue) : nil\n    case\
    \ .stringValue(aValue):\n        return b == .stringValue(bValue) ? .stringValue(aValue)\
    \ : nil\n    }", "    if a == b { return nil }\n    if a.intValue < b.intValue\
    \ { return b }\n    if a.intValue > b.intValue { return a }\n    if a.doubleValue\
    \ < b.doubleValue { return b }\n    if a.doubleValue > b.doubleValue { return\
    \ a }\n    if a.stringValue < b.stringValue { return b }\n    if a.stringValue\
    \ > b.stringValue { return a }\n    return nil", "    if a == b {\n        return\
    \ nil\n    }\n    if a.doubleValue() < b.doubleValue() {\n        return a\n \
    \   } else if a.doubleValue() > b.doubleValue() {\n        return b\n    }\n \
    \   if a.stringValue() < b.stringValue() {\n        return a\n    } else if a.stringValue()\
    \ > b.stringValue() {\n        return b\n    }\n    if a.intValue() < b.intValue()\
    \ {\n        return a\n    } else if a.intValue() > b.intValue() {\n        return\
    \ b\n    }\n    return nil", "    switch a {\n    case .intValue(int(a)):\n  \
    \      if let b = b.intValue(int(a)) {\n            return b\n        }\n    case\
    \ .doubleValue(double(a)):\n        if let b = b.doubleValue(double(a)) {\n  \
    \          return b\n        }\n    case .stringValue(string(a)):\n        if\
    \ let b = b.stringValue(string(a)) {\n            return b\n        }\n    }\n\
    \    return nil", "    switch a { \n    case .intValue(_), .doubleValue(_), .stringValue(_):\
    \ return b\n    default: return nil\n    }", "    switch a as! Value {\n    case\
    \ .intValue(n): switch b as! Value {\n    case .intValue(n): return n > n ? .intValue(n)\
    \ : .intValue(0)\n    case .stringValue(n): return b == .intValue(n) ? .intValue(n)\
    \ : nil\n    }\n    case .doubleValue(d): switch b as! Value {\n    case .doubleValue(d):\
    \ return d > d ? .doubleValue(d) : .doubleValue(0)\n    case .stringValue(n):\
    \ return b == .doubleValue(d) ? .doubleValue(d) : nil\n    }\n    case .stringValue(n):\
    \ return b == .stringValue(n) ? .stringValue(n) : nil\n    }\n    return nil",
  "    switch a {\n    case .intValue(i): return b == .intValue(i)\n    case .doubleValue(l):\
    \ return b == .doubleValue(l)\n    case .stringValue(s): return b == .stringValue(s)\n\
    \    }\n    return nil", "    if let aIsDouble = a\n        as? ValueType else\
    \ { return nil }\n    if let bIsDouble = b\n        as? ValueType else { return\
    \ nil }\n    \n    var a: Value\n    var b: Value\n    \n    switch a.type {\n\
    \    case .intValue:\n        a = aIsDouble\n        b = bIsDouble\n    case .doubleValue:\n\
    \        a = aIsDouble\n        b = bIsDouble\n    case .stringValue:\n      \
    \  a = aIsDouble\n        b = bIsDouble\n    }\n    \n    switch b.type {\n  \
    \  case .intValue:\n        a = a\n        b = bIsDouble\n    case .doubleValue:\n\
    \        a = a\n        b = bIsDouble\n    case .stringValue:\n        a = a\n\
    \        b = b\n    }\n    \n    if a == b {\n        return a\n    }\n    return\
    \ nil", "    switch a {\n    case .intValue(i):\n        if b == .intValue(i)\
    \ {\n            return i\n        } else if b == .doubleValue(d) {\n        \
    \    return d\n        } else if b == .stringValue(str) {\n            if str\
    \ == \"nan\" {\n                return .stringValue(str)\n            } else if\
    \ str == \"inf\" {\n                return .stringValue(\"\\(-\\Double.infinity)\"\
    )\n            } else if str == \"-inf\" {\n                return .stringValue(\"\
    \\(-\\Double.minusInfinity)\")\n            } else {\n                return .stringValue(str)\n\
    \            }\n        } else if b == nil { return nil }\n    case .doubleValue(db):\n\
    \        if a == .doubleValue(db) { return db }\n        if a == .intValue(i)\
    \ { return nil }\n        if a == .stringValue(str) {\n            if str == \"\
    nan\" { return .stringValue(str) }\n            if str == \"inf\" { return .stringValue(\"\
    \\(-\\Double.infinity)\") }\n            if str == \"-inf\" { return .stringValue(\"\
    \\(-\\Double.minusInfinity)\") }\n            if str == \"-nan\" { return .stringValue(\"\
    \\(-\\Double.nan)\") }\n            if str == \"0\" { return .stringValue(\"0.0\"\
    ) }\n            if str == \"-0\" { return .stringValue(\"-0.0\") }\n        \
    \    if str == \"1\" { return .stringValue(\"1.0\") }\n            if str == \"\
    -1\" { return .stringValue(\"-1.0\") }\n            if str == \"2\" { return .stringValue(\"\
    2.0\") }\n            if str == \"-2\" { return .stringValue(\"-2.0\") }\n   \
    \         if str == \"3\" { return .stringValue(\"3.0\") }\n            if str\
    \ == \"-3\" { return .stringValue(\"-3.0\") }\n            if str == \"4\" { return\
    \ .stringValue(\"4.0\") }\n            if str == \"-4\" { return .stringValue(\"\
    -4.0\") }\n            if str == \"5\" { return .stringValue(\"5.0\") }\n    \
    \        if str == \"-5\" { return .stringValue(\"-5.0\") }\n            if str\
    \ == \"6\" { return .stringValue(\"6.0\") }\n            if str == \"-6\" { return\
    \ .stringValue(\"-6.0\") }\n            if str == \"7\" { return .stringValue(\"\
    7.0\") }\n            if str == \"-7\" { return .stringValue(\"-7.0\") }\n   \
    \         if str == \"8\" { return .stringValue(\"8.0\") }\n            if str\
    \ == \"-8\" { return .stringValue(\"-8.0\") }\n            if str == \"9\" { return\
    \ .stringValue(\"9.0\") }\n            if str == \"-9\" { return .stringValue(\"\
    -9.0\") }\n            if str == \"10\" { return .stringValue(\"10.0", "    switch\
    \ (a, b) {\n    case (.intValue(a), .intValue(b)):\n        return a\n    case\
    \ (.doubleValue(a), .doubleValue(b)):\n        return a\n    case (.stringValue(a),\
    \ .stringValue(b)):\n        return a\n    case (_, _):\n        return nil\n\
    \    }", "    if a == b {\n        return nil\n    }\n    \n    if let a = a.doubleValue()\
    \ {\n        if let b = b.doubleValue() {\n            if a > b {\n          \
    \      return a\n            } else {\n                return b\n            }\n\
    \        }\n    }\n    \n    if let a = a.intValue() {\n        if let b = b.intValue()\
    \ {\n            if a > b {\n                return a\n            } else {\n\
    \                return b\n            }\n        }\n    }\n    \n    if let a\
    \ = a.stringValue() {\n        if let b = b.stringValue() {\n            if a\
    \ == b {\n                return a\n            } else {\n                return\
    \ nil\n            }\n        }\n    }\n    \n    return nil", "    let av = a.intValue\n\
    \    let bv = b.intValue\n    if av > bv {\n        return b\n    } else if bv\
    \ > av {\n        return a\n    } else {\n        return nil\n    }", "    if\
    \ a is IntValue {\n        return b is IntValue ? a : b\n    } else if b is IntValue\
    \ {\n        return a\n    } else if a is DoubleValue {\n        return b is DoubleValue\
    \ ? a : b\n    } else if b is DoubleValue {\n        return a\n    } else if a\
    \ is StringValue {\n        return b is StringValue ? a : b\n    } else if b is\
    \ StringValue {\n        return nil\n    } else {\n        return nil\n    }",
  "    var aValue: Value = a.value\n    var bValue: Value = b.value\n    if aValue\
    \ is IntValue {\n        if bValue is DoubleValue {\n            aValue = bValue\n\
    \        }\n        else if bValue is StringValue {\n            aValue = .intValue(Int(bValue.stringValue))\n\
    \        }\n    }\n    else if aValue is DoubleValue {\n        if bValue is IntValue\
    \ {\n            aValue = bValue\n        }\n        else if bValue is StringValue\
    \ {\n            aValue = .doubleValue(Double(bValue.stringValue))\n        }\n\
    \    }\n    else if aValue is StringValue {\n        if bValue is IntValue {\n\
    \            aValue = .stringValue(bValue.stringValue)\n        }\n        else\
    \ if bValue is DoubleValue {\n            aValue = .stringValue(bValue.stringValue)\n\
    \        }\n    }\n    \n    if aValue == bValue {\n        return nil\n    }\n\
    \    \n    return aValue", "    if a == b {\n        return nil\n    }\n    if\
    \ let aInt = a.intValue, bInt = b.intValue {\n        if aInt > bInt {\n     \
    \       return a\n        }\n        return b\n    }\n    if let aDouble = a.doubleValue,\
    \ bDouble = b.doubleValue {\n        if aDouble > bDouble {\n            return\
    \ a\n        }\n        return b\n    }\n    if let aString = a.stringValue, bString\
    \ = b.stringValue {\n        let aStringSlice = String(aString)\n        let bStringSlice\
    \ = String(bString)\n        if aString > bString {\n            return a\n  \
    \      }\n        if aStringSlice == bStringSlice {\n            return a\n  \
    \      }\n        return b\n    }\n    return nil", "    switch a { \n    case\
    \ .intValue(_): return b == .intValue(a)\n    case .doubleValue(_): return b ==\
    \ .doubleValue(a)\n    case .stringValue(_): return b == .stringValue(a)\n   \
    \ }\n    return nil", "    switch a {\n    case .intValue(_):\n        return\
    \ .intValue(max(b.intValue(), Int64.max))\n    case .doubleValue(_):\n       \
    \ return .doubleValue(max(b.doubleValue(), Double.max))\n    case .stringValue(_):\n\
    \        return .stringValue(max(b.stringValue(), a.stringValue()))\n    default:\n\
    \        return nil\n    }", "    switch a {\n    case .intValue(i): return b\
    \ == .intValue(i) ? .intValue(i) : nil\n    case .doubleValue(d): return b ==\
    \ .doubleValue(d) ? .doubleValue(d) : nil\n    case .stringValue(str): return\
    \ b == .stringValue(str) ? .stringValue(str) : nil\n    }\n    return nil", " \
    \   switch a {\n    case .intValue(aValue): return .intValue(bValue)\n    case\
    \ .doubleValue(aValue): return .doubleValue(bValue)\n    case .stringValue(aValue):\
    \ return .stringValue(bValue)\n    }\n    return nil", "    switch a {\n    case\
    \ .intValue(_):\n        switch b {\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ {\n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    case .stringValue(_):\n        switch b {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return a\n        }\n    }\n    return\
    \ nil", "    switch (a, b) {\n    case (Value.intValue(a), Value.intValue(b)):\n\
    \        return Value.intValue(max(Int(a), Int(b)))\n    case (Value.doubleValue(a),\
    \ Value.doubleValue(b)):\n        return Value.doubleValue(max(Double(a), Double(b)))\n\
    \    case (Value.stringValue(a), Value.stringValue(b)):\n        return Value.stringValue(max(String(a),\
    \ String(b)))\n    default:\n        return nil\n    }", "    let aIsInt = a.typeIsInt()\n\
    \    let bIsInt = b.typeIsInt()\n\n    let aIsDouble = a.typeIsDouble()\n    let\
    \ bIsDouble = b.typeIsDouble()\n\n    let aIsString = a.typeIsString()\n    let\
    \ bIsString = b.typeIsString()\n\n    if aIsInt && bIsInt {\n        return max(a,\
    \ max)(b, max(a, b))\n    } else if aIsInt || bIsInt {\n        return max(a,\
    \ min)(b, min(a, b))\n    } else if aIsDouble && bIsDouble {\n        return max(a,\
    \ max)(b, max(a, b))\n    } else if aIsDouble || bIsDouble {\n        return max(a,\
    \ min)(b, min(a, b))\n    } else {\n        return nil\n    }", "    switch a\
    \ {\n    case .intValue(aInt), .intValue(bInt):\n        if aInt.compare(bInt)\
    \ == .orderedSame {\n            return a\n        } else {\n            return\
    \ b\n        }\n    case .doubleValue(aDouble), .doubleValue(bDouble):\n     \
    \   if aDouble.compare(bDouble) == .orderedSame {\n            return a\n    \
    \    } else {\n            return b\n        }\n    case .stringValue(aString),\
    \ .stringValue(bString):\n        if aString.compare(bString) == .orderedSame\
    \ {\n            return a\n        } else {\n            return b\n        }\n\
    \    default:\n        return nil\n    }", "    \n    // Get the type of the largest\
    \ type\n    let smallestType = min(type(of: a), type(of: b))\n    \n    // Check\
    \ if one of the types is float\n    if smallestType == Float.self {\n        //\
    \ Check if the types are equal\n        \n        // Cast the float to a Double\n\
    \        let aDouble = a.doubleValue\n        let bDouble = b.doubleValue\n  \
    \      \n        // If the values are equal, return it\n        if aDouble ==\
    \ bDouble {\n            return a\n        }\n    }\n    \n    // Check if the\
    \ types are equal\n    if smallestType == Double.self {\n        // Cast the double\
    \ to a Int\n        let aInt = a.intValue\n        let bInt = b.intValue\n   \
    \     \n        // If the values are equal, return it\n        if aInt == bInt\
    \ {\n            return a\n        }\n    }\n    \n    // Check if the types are\
    \ equal\n    if smallestType == Int.self {\n        // Cast the int to a String\n\
    \        let aString = a.stringValue\n        let bString = b.stringValue\n  \
    \      \n        // If the values are equal, return it\n        if aString ==\
    \ bString {\n            return a\n        }\n    }\n    \n    // If the types\
    \ are equal, return nil\n    return nil", "    if let aInt = a.intValue() { return\
    \ aInt > b.intValue() }\n    if let aDouble = a.doubleValue() { return aDouble\
    \ > b.doubleValue() }\n    if let aString = a.stringValue() { return aString >\
    \ b.stringValue() }\n    return nil", "    switch a {\n    case .intValue(_):\n\
    \        if b == .intValue(_) {\n            return a\n        }\n    case .doubleValue(_):\n\
    \        if b == .doubleValue(_) {\n            return a\n        }\n    case\
    \ .stringValue(_):\n        if b == .stringValue(_) {\n            return a\n\
    \        }\n    }\n    if let b = b, b.isGreater(a) {\n        return b\n    }\
    \ else {\n        return nil\n    }", "    if a == b {\n        return nil\n \
    \   }\n\n    switch a as? Int:\n    case let integerValue as Int:\n        switch\
    \ b as? Int:\n        case let integerValue as Int:\n            return integerValue\
    \ > integerValue\n        case let doubleValue as Double:\n            return\
    \ doubleValue > doubleValue\n        default:\n            return nil\n      \
    \  }\n    case let doubleValue as Double:\n        switch b as? Int:\n       \
    \ case let integerValue as Int:\n            return integerValue > integerValue\n\
    \        case let doubleValue as Double:\n            return doubleValue > doubleValue\n\
    \        default:\n            return nil\n        }\n    case let stringValue\
    \ as String:\n        switch b as? Int:\n        case let integerValue as Int:\n\
    \            return integerValue > integerValue\n        case let stringValue\
    \ as String:\n            return stringValue > stringValue\n        default:\n\
    \            return nil\n        }\n    default:\n        return nil\n    }",
  "    switch a { case .intValue(aInt)\n        \n    case .doubleValue(aDouble)\n\
    \        \n    case .stringValue(aString)\n        \n    case .intValue(bInt)\n\
    \        \n    case .doubleValue(bDouble)\n        \n    case .stringValue(bString)\n\
    \        \n    case .stringValue(aString), .stringValue(bString)\n        return\
    \ nil\n    }\n\n    if a == b {\n        return a\n    }\n\n    switch b {\n \
    \   \n    case .intValue(bInt)\n        return a\n        \n    case .doubleValue(bDouble)\n\
    \        return a\n        \n    case .stringValue(bString)\n        return a\n\
    \        \n    case .stringValue(aString), .stringValue(bString)\n        return\
    \ nil\n    }", "    switch a {\n    case .intValue(n1), .doubleValue(d1), .stringValue(str1):\n\
    \        switch b {\n        case .intValue(n2), .doubleValue(d2), .stringValue(str2):\n\
    \            return (n1 > n2) || (n1 == n2 && d1 > d2) || (n1 == n2 && d1 == d2\
    \ && str1 > str2)\n        case .intValue(\"\"), .doubleValue(\"\"), .stringValue(\"\
    \"), nil:\n            return nil\n        }\n    case .intValue(\"\"), .doubleValue(\"\
    \"), .stringValue(\"\"), nil:\n        return nil\n    }", "    var compare =\
    \ .stringValue(\"\")\n    switch a {\n    case .intValue(i):\n        switch b\
    \ {\n        case .doubleValue(j):\n            compare = .stringValue(i == j\
    \ ? \"1\" : \"0\")\n        case .stringValue(k):\n            compare = .stringValue(i\
    \ == j ? \"0\" : \"1\")\n        }\n    case .doubleValue(j):\n        switch\
    \ b {\n        case .intValue(i):\n            compare = .stringValue(i == j ?\
    \ \"0\" : \"1\")\n        case .stringValue(k):\n            compare = .stringValue(i\
    \ == j ? \"1\" : \"0\")\n        }\n    case .stringValue(k):\n        switch\
    \ b {\n        case .intValue(i):\n            compare = .stringValue(i == j ?\
    \ \"1\" : \"0\")\n        case .doubleValue(j):\n            compare = .stringValue(i\
    \ == j ? \"0\" : \"1\")\n        }\n    }\n    if compare == .stringValue(\"1\"\
    ) {\n        return nil\n    }\n    return .stringValue(compare)", "    switch\
    \ a < b {\n    case true: return b\n    case false: return a\n    }\n    return\
    \ nil", "    var aNumber = a.intValue\n    var bNumber = b.intValue\n\n    if\
    \ aNumber < bNumber {\n        return a\n    } else if bNumber < aNumber {\n \
    \       return b\n    } else {\n        if let aString = a.stringValue, bString\
    \ = b.stringValue {\n            if aString == \".\" || aString == \",\" || bString\
    \ == \".\" || bString == \",\" {\n                return nil\n            }\n\
    \            aNumber = Double(aString)\n            bNumber = Double(bString)\n\
    \            if aNumber < bNumber {\n                return a\n            } else\
    \ if bNumber < aNumber {\n                return b\n            } else {\n   \
    \             return nil\n            }\n        } else {\n            if let\
    \ aDouble = a.doubleValue, bDouble = b.doubleValue {\n                if aDouble\
    \ < bDouble {\n                    return a\n                } else if bDouble\
    \ < aDouble {\n                    return b\n                } else {\n      \
    \              return nil\n                }\n            } else {\n         \
    \       return nil\n            }\n        }\n    }", "    switch a < b {\n  \
    \  case true:\n        return a\n    case false:\n        return b\n    case let\
    \ aInt, bInt where aInt < bInt:\n        return .intValue(aInt)\n    case let\
    \ aDouble, bDouble where aDouble > bDouble:\n        return .doubleValue(bDouble)\n\
    \    case let aString, bString where aString < bString:\n        return .stringValue(bString)\n\
    \    }\n    return nil", "    var result_type = nil\n    if a == b {\n       \
    \ return nil\n    } else if a == .intValue(b) {\n        return a\n    } else\
    \ if b == .intValue(a) {\n        return b\n    } else if a == .doubleValue(b)\
    \ {\n        return a\n    } else if b == .doubleValue(a) {\n        return b\n\
    \    } else if a == .stringValue(b) {\n        return a\n    } else if b == .stringValue(a)\
    \ {\n        return b\n    } else {\n        return nil\n    }", "    switch a\
    \ {\n    case .intValue($0): return b\n    case .doubleValue($0): return b\n \
    \   case .stringValue($0): return b\n    default:\n        return nil\n    }",
  "    switch a {\n    case .intValue(v1) where b == .intValue(v2): return v1 > v2\
    \ ? v1 : v2\n    case .doubleValue(v1) where b == .doubleValue(v2): return v1\
    \ > v2 ? v1 : v2\n    case .stringValue(v1) where b == .stringValue(v2): return\
    \ v1 > v2 ? v1 : v2\n    default: return nil\n    }", "    switch a { \n    case\
    \ .intValue(aInt), .intValue(bInt):\n        if aInt <= bInt {\n            return\
    \ a\n        } else {\n            return b\n        }\n    \n    case .doubleValue(aDouble),\
    \ .doubleValue(bDouble):\n        if aDouble < bDouble {\n            return a\n\
    \        } else {\n            return b\n        }\n        \n    case .stringValue(aString),\
    \ .stringValue(bString):\n        if aString <= bString {\n            return\
    \ a\n        } else {\n            return b\n        }\n        \n    default:\n\
    \        return nil\n    }", "    switch a as Value {\n    case .intValue(_):\n\
    \        switch b as Value {\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n        case .stringValue(let bStr):\n\
    \            let bInt: Int? = bStr.integerValue\n            return .stringValue(bInt?.compare(b.stringValue)\
    \ == .orderedSame ? bInt : nil)\n        case .doubleValue(let bDouble):\n   \
    \         let bInt: Int? = bDouble.integerValue\n            return .doubleValue(bInt?.compare(b.doubleValue)\
    \ == .orderedSame ? bInt : nil)\n        }\n    case .doubleValue(_):\n      \
    \  switch b as Value {\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.intValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(let\
    \ bStr):\n            let bDouble: Double? = bStr.doubleValue\n            return\
    \ .stringValue(bDouble?.compare(b.stringValue) == .orderedSame ? bDouble : nil)\n\
    \        case .doubleValue(let bDouble):\n            let bInt: Int? = bDouble.integerValue\n\
    \            return .doubleValue(bInt?.compare(b.doubleValue) == .orderedSame\
    \ ? bInt : nil)\n        }\n    case .stringValue(_):\n        switch b as Value\
    \ {\n        case .intValue(_):\n            return .stringValue(a.stringValue.compare(b.stringValue)\
    \ == .orderedSame ? a.stringValue : b.stringValue)\n        case .stringValue(let\
    \ bStr):\n            return .stringValue(a.stringValue > bStr ? a.stringValue\
    \ : bStr)\n        case .doubleValue(let bDouble):\n            let bInt: Int?\
    \ = bDouble.integerValue\n            return .doubleValue(bInt?.compare(b.doubleValue)\
    \ == .orderedSame ? bInt : nil)\n        }\n    }\n    return nil", "    switch\
    \ a { // case .intValue(let a):\n    case .intValue(let a):\n        switch b\
    \ { // case .doubleValue(let b):\n        case .doubleValue(let b):\n        \
    \    return b > a ? .doubleValue(max(b, a)) : .doubleValue(min(b, a))\n      \
    \  default: break\n        }\n    default: break\n    }\n    return nil", "  \
    \  guard let aValue = a.intValue,\n        let bValue = b.intValue else { return\
    \ nil }\n    guard let aValueAsDouble = aValue.doubleValue,\n        let bValueAsDouble\
    \ = bValue.doubleValue else { return nil }\n    return aValueAsDouble > bValueAsDouble\
    \ ? a : b", "    switch a {\n    case .intValue(_): return .intValue(b as Int)\n\
    \    case .doubleValue(_): return .doubleValue(b as Double)\n    case .stringValue(_):\
    \ return .stringValue(b as String)\n    }\n    return nil", "    switch a as Value,\
    \ b as Value {\n    case let .intValue(a), let .intValue(b):\n        if a > b\
    \ {\n            return b\n        } else {\n            return a\n        }\n\
    \    case let .doubleValue(a), let .doubleValue(b):\n        return a.doubleValue(b)\
    \ // if these are equal, the bigger one is returned.\n    case let .stringValue(a),\
    \ let .stringValue(b):\n        if a == b {\n            return nil\n        }\
    \ else {\n            return a\n        }\n    default:\n        return nil\n\
    \    }", "    switch (a, b) {\n    case (IntValue(x), _): // x is an int\n   \
    \ case (DoubleValue(x), _): // x is a float\n    case (_, StringValue(x): // x\
    \ is a string\n        if x == y { return nil }\n        \n        // if x < y,\
    \ return x\n        if x < y { return x }\n        \n        // if x > y, return\
    \ y\n        if x > y { return y }\n    }\n    \n    // if both values are the\
    \ same type, return nil\n    return nil", "    var aValue = a.rawValue\n    var\
    \ bValue = b.rawValue\n    \n    // Return nil if both values are equal\n    if\
    \ aValue == bValue {\n        return nil\n    }\n    \n    // Return nil if a\
    \ is less than b\n    if aValue < bValue {\n        return nil\n    }\n    \n\
    \    // Return nil if a is greater than b\n    if aValue > bValue {\n        return\
    \ nil\n    }\n    \n    // Return b if a is less than b\n    return b", "    if\
    \ a == b {\n        return nil\n    }\n    \n    // TODO: Switch to Float, Double,\
    \ or String\n    switch a as! Value {\n    case .intValue(_):\n        return\
    \ .intValue(max(b.intValue(a), a.intValue(b)))\n    case .doubleValue(_):\n  \
    \      return .doubleValue(max(b.doubleValue(a), a.doubleValue(b)))\n    case\
    \ .stringValue(_):\n        return .stringValue(max(b.stringValue(a), a.stringValue(b)))\n\
    \    }\n    return nil", "    switch a { case .intValue(_), .doubleValue(_), .stringValue(_)\n\
    \         \n         // If a.value == b.value or if they are both nil,\n     \
    \    // return nil.\n         case .intValue(let a)\n            if b == a { return\
    \ nil }\n         case .doubleValue(let a)\n            if b == a { return nil\
    \ }\n         case .stringValue(let a)\n            if b == a { return nil }\n\
    \         \n         // If a.value < b.value, return a.\n         case .intValue(_)\
    \ < .doubleValue(_)\n            return a\n         case .doubleValue(_) < .stringValue(_)\n\
    \            return a\n         \n         // If a.value > b.value, return b.\n\
    \         case .intValue(_) > .doubleValue(_)\n            return b\n        \
    \ case .doubleValue(_) > .stringValue(_)\n            return b\n         \n  \
    \       // If a.value <= b.value, return a.\n         case .intValue(_) <= .doubleValue(_)\n\
    \            return a\n         case .doubleValue(_) <= .stringValue(_)\n    \
    \        return a\n         \n         // If a.value >= b.value, return b.\n \
    \        case .intValue(_) >= .doubleValue(_)\n            return b\n        \
    \ case .doubleValue(_) >= .stringValue(_)\n            return b\n         \n \
    \        // If a.value == b.value, return b.\n         case .intValue(_) == .doubleValue(_)\n\
    \            return b\n         case .doubleValue(_) == .stringValue(_)\n    \
    \        return b\n         \n         // If a.value <=> b.value, return b.\n\
    \         case .intValue(_) <=> .doubleValue(_)\n            return b\n      \
    \   case .doubleValue(_) <=> .stringValue(_)\n            return b\n         \n\
    \         // If a.value <> b.value, return nil.\n         case .intValue(_) <>\
    \ .doubleValue(_)\n            return nil\n         case .doubleValue(_) <> .stringValue(_)\n\
    \            return nil\n         case .intValue(_) != .doubleValue(_)\n     \
    \       return nil\n         case .doubleValue(_) != .stringValue(_)\n       \
    \     return nil\n         \n         // If a.value < b, return nil.\n       \
    \  case .intValue(_) < b\n            return nil\n         case .doubleValue(_)\
    \ < b\n            return nil\n         case .intValue(_) < .stringValue(_)\n\
    \            return nil\n         case .doubleValue(_) < .stringValue(_)\n   \
    \         return "]
stop_tokens:
- "\n}"
