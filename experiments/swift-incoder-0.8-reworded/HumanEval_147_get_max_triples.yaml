name: HumanEval_147_get_max_triples
language: swift
prompt: "\n/// You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
  \ i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i <\
  \ j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>>\
  \ get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n///\
  \ The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
  \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
  \ == 53361)"
completions: ["    var result = 1\n    for i in 1..<n {\n        for j in i + 1..<n\
    \ {\n            for k in j + 1..<n {\n                if i * i - i + 1 + j *\
    \ j - k == 3 {\n                    result++\n                }\n            }\n\
    \        }\n    }\n    return result", "    var count = 1\n    var maxSum: Int\
    \ = 0\n    var max: Int = 0\n    var sum: Int = 0\n    for i in 1...n {\n    \
    \    for j in 1...n {\n            for k in 1...n {\n                sum += Int(pow(i,\
    \ 3))\n                sum += Int(pow(j, 3))\n                sum += Int(pow(k,\
    \ 3))\n                if maxSum < sum {\n                    maxSum = sum\n \
    \                   max = i\n                    count = 2\n                }\n\
    \                if sum == 0 {\n                    maxSum = 0\n             \
    \       sum = 1\n                    count = -1\n                }\n         \
    \   }\n        }\n    }\n    return count", "    var a = [Int](n+1)\n    var cnt\
    \ = 0\n\n    for i in 0 ..< n {\n        a[i] = i * i - i + 1\n    }\n\n    for\
    \ i in 0 ..< n {\n        for j in i ..< n {\n            for k in i ..< n {\n\
    \                if i + j + k > n {\n                    cnt++\n             \
    \   } else {\n                    if a[i] < a[j] + a[k] {\n                  \
    \      a[i] = a[j]\n                    } else if a[i] > a[j] + a[k] {\n     \
    \                   a[i] = a[k]\n                    } else {\n              \
    \          a[i] = a[i] + a[j] + a[k]\n                    }\n                }\n\
    \            }\n        }\n    }\n\n    return cnt", "    var a: Int?\n    var\
    \ max = 0\n    for _ in 1...n {\n        a = Int(arc4random_uniform(UInt32(n)))\n\
    \        max += a[i] + a[i] - a[i] + a[i] - a[i]\n    }\n    return Int(max%3)\
    \ + 1", "    var triple = 0\n    for i = 1; i < n; i++ {\n        for j = i +\
    \ 1; j < n; j++ {\n            for k = j + 1; k < n; k++ {\n                if\
    \ ((i! + j! + k!) mod 3 == 0) {\n                    triple = (i! + j! + k!)\n\
    \                }\n            }\n        }\n    }\n    return triple", '    return
    0', "    var a: [Int] = []\n    for _ in 0..<n {\n        let index = Int(arc4random_uniform(UInt32(n)))\n\
    \        if index != i {\n            continue\n        }\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count", "\tvar a = [0]\n\tfor i := 0; i <\
    \ n; i++ {\n\t\ta[i] = a[i] * i - i + 1\n\t}\n\t\n\tresult := 0\n\t\n\tvar tmp\
    \ int\n\tfor i := n - 2; i >= 0; i-- {\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\
    \tfor k := 0; k < i; k++ {\n\t\t\t\tif a[j] + a[k] + a[i] >= 3 {\n\t\t\t\t\tresult\
    \ = result + 1\n\t\t\t\t}\n\t\t\t\ttmp = a[j] + a[k] + a[i]\n\t\t\t\tif tmp >=\
    \ 3 {\n\t\t\t\t\ttmp = 3\n\t\t\t\t}\n\t\t\t\tif tmp < 3 {\n\t\t\t\t\ttmp = 3\n\
    \t\t\t\t}\n\t\t\t\ta[j] = tmp\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result", "\t\n\
    \tlet mut a = Array(repeating: 0, count: n)\n\tfor i in 0..<n {\n\t\ta[i] = i\
    \ * i - i + 1\n\t}\n\tlet len = a.count\n\tvar sum_arr = [Int]()\n\tvar sum_triple\
    \ = 0\n\tfor i in 0..<len {\n\t\tlet j = i+1\n\t\tlet k = len-i\n\t\tlet sum =\
    \ Int((a[j] - a[i])*(a[j] - a[i]) + (a[k] - a[j])*(a[k] - a[j]))\n\t\tif sum !=\
    \ 0 {\n\t\t\tsum_triple += sum\n\t\t\tsum_arr.append(sum)\n\t\t}\n\t}\n\treturn\
    \ sum_triple.count == 0 ? 0 : sum_triple.count", "    var sum = 0\n    var sum2\
    \ = 0\n    var a = Array<Int>(n)\n\n    for i in 0..<n {\n        a[i] = i * i\
    \ - i + 1\n    }\n\n    for i in 0..<n {\n        if i < (n-1)/2 {\n         \
    \   sum += a[i]\n            sum2 += a[i] * a[i]\n        }\n    }\n\n    return\
    \ sum + sum2", "    // TODO: check edge case\n    var a: Int[] = IntArray(n)\n\
    \    for idx in 0 ..< n {\n        a[idx] = 3 * (idx * idx - idx - 1)\n    }\n\
    \    let sum = a.sum()\n    if sum%3 != 0 {\n        return 0\n    }\n    return\
    \ a.count { $0 % 3 == 0 }", "   var a = [1]\n   for i in 1..n {\n      a[i] =\
    \ a[i] * a[i] - a[i] + i + 1\n   }\n   return a.count { $0 % 3 == 0 }", "    precondition(n\
    \ >= 0, \"n must be positive\")\n    var a = [Int](n + 1)\n    for i in 1..(n\
    \ + 1) {\n        a[i] = i * i - i + 1\n    }\n    var triples = 0\n    for i\
    \ in 0..(n) {\n        for j in 0..(n) {\n            if i != j {\n          \
    \      for k in 0..(n) {\n                    if i != j && j != k {\n        \
    \                if a[i + j + k] == (a[i] + a[j] + a[k]) {\n                 \
    \           triples += 1\n                        }\n                    }\n \
    \               }\n            }\n        }\n    }\n    return triples", '    return
    get_triples(n, n, n)', "    if n < 0 {\n        return 0\n    }\n    var result\
    \ = 1\n    for _ in 1...n {\n        var a = 0\n        for i in 1...n {\n   \
    \         a += i * i - i + 1\n        }\n        if a > result {\n           \
    \ result = a\n        }\n    }\n    return result", "    precondition(n >= 0,\
    \ \"Invalid n\")\n    \n    var res = Int(0)\n    for _ in 1...n {\n        for\
    \ _ in 1...n {\n            for _ in 1...n {\n                if _ % 3 == 0 &&\
    \ _ + _ + _ == n * n - 3 {\n                    res += 1\n                }\n\
    \            }\n        }\n    }\n    return res", "\tlet a = Array(1...n)\n\t\
    var count = 0\n\tvar k = n - 1\n\t\n\tfor i in 1...n {\n\t\tcount += 1\n\t\tfor\
    \ j in 1...k {\n\t\t\tcount += j\n\t\t\tif a[j] > a[j+k] {\n\t\t\t\tcount += a[j+k]\n\
    \t\t\t\ta[j] = a[j+k]\n\t\t\t\ta[k] = 0\n\t\t\t}\n\t\t}\n\t\tk /= 2\n\t}\n\treturn\
    \ count", "    var a = Array<Int>(n)\n    a.fill(0)\n    var triple = 0\n    for\
    \ idx in 1...n {\n        for idx in 1...n {\n            if idx > idx {\n   \
    \             for (idx in 1...n) {\n                    if idx == idx {\n    \
    \                    continue\n                    }\n                    if a[idx\
    \ - 1] > a[idx] + a[idx] {\n                        triple++\n               \
    \         a[idx - 1] = a[idx] + a[idx]\n                        a[idx] = idx -\
    \ 1\n                        break\n                    }\n                }\n\
    \            }\n        }\n    }\n    return triple", "    if n < 3 {\n      \
    \  return 0\n    }\n    var triples = 0\n    var a = [Int](n+1)\n    a[0] = 0\n\
    \    for i in 1...n {\n        a[i] = i*i - i + 1 // a[i] = (i*i) - i + 1 // a[i]\
    \ = 3 * i - i\n    }\n    for i in 1...n {\n        for j in (i+1)...n {\n   \
    \         var k = j\n            while (k < a[i]) {\n                k++\n   \
    \         }\n            if k == i {\n                a[k] = 1\n            }\
    \ else {\n                a[k] = a[k] - a[i]\n                a[k] += 1\n    \
    \        }\n        }\n    }\n    for _ in 1...n {\n        if a[n] == 3 {\n \
    \           triples += 1\n        }\n    }\n    return triples * 2", "    var\
    \ a = [Int](n + 1)\n    \n    // O(n^2), O(1)\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            for k in 0..<n {\n                if i > j { continue\
    \ }\n                if i > k { continue }\n                if j > k { continue\
    \ }\n                if a[i] > 0 { continue }\n                if a[j] > 0 { continue\
    \ }\n                if a[k] > 0 { continue }\n                a[i] = a[i] + a[j]\
    \ + a[k]\n                if a[i] == 3 { return 1 }\n            }\n        }\n\
    \    }\n    \n    return 0", "  var result = 0\n  var a: Array<Int> = Array(n)\n\
    \  for i in 0 ..< n {\n    a[i] = i\n    result += a[i] * a[i] - a[i] + 1\n  }\n\
    \  return result", "    var a = [Int]()\n    for i in 1...n {\n        a[i] =\
    \ i*i - i + 1\n    }\n    var total = 0\n    for i in 0..(n-1) {\n        for\
    \ j in (i+1)...n {\n            for k in (i+1)...n {\n                total +=\
    \ a[i] + a[j] + a[k]\n            }\n        }\n    }\n    return total", "  \
    \  if n < 0 {\n        return -1\n    }\n    var ans = Int()\n    for _ in 0 ..<\
    \ n {\n        ans = max(ans, (n * (n + 1)) / 2) // 3\n    }\n    return ans",
  "    \n    // 1. Create a constant array of length n\n    // 2. Initialize a counter\
    \ variable and increment it by 1 for each valid triple.\n    // 3. Return the\
    \ counter.\n    \n    let maxTriples = 0\n    var counter = 0\n    \n    let a\
    \ = Array(0 ..< n).map { _ in counter++ }\n    \n    for i in 0..<n {\n      \
    \  \n        for j in 0..<n {\n            \n            if j < i {\n        \
    \        \n                for k in 0..<n {\n                    \n          \
    \          if k != i && k != j {\n                        \n                 \
    \       if a[k] > a[k+1] + a[j] {\n                            a[k] = a[k+1] +\
    \ a[j]\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    maxTriples = counter\n    \n    return\
    \ maxTriples", "    if n < 2 {\n        return Int(0)\n    }\n    var count =\
    \ Int(0)\n    var array = Array(0...n)\n    for var i = 1; i < array.count; i++\
    \ {\n        if i > array.count {\n            break\n        }\n        for var\
    \ j = i + 1; j < array.count; j++ {\n            if j > array.count {\n      \
    \          break\n            }\n            for var k = j + 1; k < array.count;\
    \ k++ {\n                if k > array.count {\n                    break\n   \
    \             }\n                if array[k] - array[j] < array[i] - array[i]\
    \ {\n                    count = count + 1\n                }\n            }\n\
    \        }\n    }\n    return count", "    var a = [Int](n+1)\n    a[0] = -1\n\
    \    a[1] = 1\n    for i in 2..<n {\n        a[i] = (a[i-1] + a[i-2] + i) % 3\n\
    \    }\n    return a.count { $0 == 0 }", '    return (n * n - n*(n-1) / 2) / 2',
  '    return max_triangle_sum(n)', "    precondition(n >= 0, \"n must be positive\"\
    )\n    precondition(n % 3 == 0, \"n must be divisible by 3\")\n    var triplesCount\
    \ = 0\n    var i : Int = 0\n    var j : Int = 0\n    var k : Int = 0\n    while\
    \ (i < n) {\n        j = i + 2\n        while (j < n) {\n            k = j + 2\n\
    \            while (k < n) {\n                triplesCount += 3\n            \
    \    k++\n            }\n            j++\n        }\n        i++\n    }\n    return\
    \ triplesCount", "    let a = stride(from: 1, through: n, by: 1).map { $0 * $0\
    \ - $0 + 1 }\n    return a.filter { $0 % 3 == 0 }.count", "  var a = Array<Int>()\n\
    \  for i in 1..n {\n    for j in 1..n {\n      for k in 1..n {\n        if i ==\
    \ j && j == k && i == k && i % 3 == 0 && a[i] < a[j] && a[j] < a[k] {\n      \
    \    a.append(i)\n        }\n      }\n    }\n  }\n  return a.count", "    // Your\
    \ code here\n    \n    var triples : [(Int, Int, Int)] = []\n    for i in 0..<n\
    \ {\n        let x = i * i\n        let y = x * i - i + 1\n        \n        if\
    \ y % 3 != 0 {\n            continue\n        }\n        \n        var triple\
    \ = (i, x, y)\n        triples.append(triple)\n    }\n    \n    \n    return triples.count\n\
    \    ", '    return get_max_triples_aux(n, n, n)', "    var num = a[n-1] * a[n-1]\
    \ + a[n-1]\n    for i in 1...n {\n        for j in i...n {\n            num ^=\
    \ (a[i] * a[j]) + a[j] * a[k]\n        }\n    }\n    if num % 3 == 0 {\n     \
    \   return 1\n    }\n    return 0", "    return n == 3\n        ? 1\n        :\
    \ ((n - 1) * (n - 1) * (n - 1) + n) / 3", "    var counter: Int = 0\n    var array\
    \ = [Int]()\n    var a = Array<Int>()\n    for i in 1 ..< n {\n        array.append(i)\n\
    \    }\n    for i in 0 ..< array.count {\n        a = [Int](array)\n        for\
    \ j in 0 ..< a.count {\n            for k in 0 ..< a.count {\n               \
    \ if i + j + k == 3 && a[j] > 0 && a[k] > 0 && j > 0 && k > 0 {\n            \
    \        counter++\n                }\n            }\n        }\n    }\n    return\
    \ counter", "\tif n == 0 {\n\t\treturn 0\n\t}\n\n\tcount := 0\n\tlet a = (1...n).map(|x|\
    \ x * x - x + 1).take(n)\n\tfor i in 0..<n-2 {\n\t\tfor j in (i + 1..n).reversed()\
    \ {\n\t\t\tfor k in (j + 1..n).reversed() {\n\t\t\t\tif a[i + j + k] == 3 {\n\t\
    \t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn\
    \ count", "    var sum = 0\n    for i in 1..<n {\n        for j in 0..<i {\n \
    \           for k in 0..<j {\n                if i != k {\n                  \
    \  sum += i * i * i - j * j + k\n                }\n            }\n        }\n\
    \    }\n    return sum", "\treturn get_max_triples_recur(n, n, n)", "    var result\
    \ = 0\n    var a = [Int]()\n    for i in 1...n {\n        for j in 0...i {\n \
    \           for k in 0...j {\n                a[i] = i*i - i + 1\n           \
    \     if a[i] % 3 == 0 && a[j] + a[k] == 3 {\n                    result++\n \
    \               }\n            }\n        }\n    }\n    return result", "    var\
    \ a = Array(n)\n    var count = 0\n    for i in 0 ..< n {\n        for j in 0\
    \ ..< i {\n            for k in 0 ..< j {\n                if (a[i] == a[j] +\
    \ a[k] && i != j && j != k) {\n                    count++\n                 \
    \   break\n                }\n            }\n        }\n    }\n    return count",
  "\treturn Solution().max_triples(n)", "    var triple_number = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var temp = 0\n    var current_triple_number\
    \ = 0\n    var triple_array_with_3 = 0\n    for _ in 0..<n {\n        i += 1\n\
    \        j += 1\n        k += 1\n        if i == n {\n            i = 0\n    \
    \    }\n        if j == n {\n            j = 0\n        }\n        if k == n {\n\
    \            k = 0\n        }\n        temp = i * i - i + 1 // i - (i + 1) * (i\
    \ + 1) + 1\n        if temp % 3 == 0 {\n            current_triple_number += 1\n\
    \        }\n        if current_triple_number == triple_array_with_3 {\n      \
    \      triple_number += 1\n            current_triple_number = 0\n        }\n\
    \        if temp % 3 != 0 {\n            triple_array_with_3 += 1\n        }\n\
    \    }\n    return triple_number", "\tvar result = 0\n\tvar a = [Int](count: n,\
    \ repeatedValue: 0)\n\t\n\tfor i in 1..<n {\n\t\ta[i] = i * i - i + 1\n\t}\n\t\
    \n\tfor i in 1..<n {\n\t\tfor j in i+1..<n {\n\t\t\tif a[i] - a[j] * 3 == 0 &&\
    \ a[j] > 0 {\n\t\t\t\tresult = result + 1\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result",
  "    var a = [0]\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    \n    var count = 0\n    \n    for i in 1...n {\n        for j in (i + 1)...n\
    \ {\n            for k in (j + 1)...n {\n                if i + j + k == a[i]\
    \ && a[i] + a[j] + a[k] % 3 == 0 {\n                    count += 1\n         \
    \       }\n            }\n        }\n    }\n    \n    return count", "\t\n\tvar\
    \ triple_count = 0\n\tvar triples = [Int]()\n\t\n\tvar a: Array<Int> = [Int]()\n\
    \t\n\tfor i in 1...n {\n\t\ta.append(i * i - i + 1)\n\t}\n\t\n\tfor var i = 0;\
    \ i < a.count - 1; i++ {\n\t\tvar max_triple = 0\n\t\tfor var j = i + 1; j < a.count;\
    \ j++ {\n\t\t\tvar current_triple = i * i - j + 1\n\t\t\tif current_triple > max_triple\
    \ {\n\t\t\t\tmax_triple = current_triple\n\t\t\t}\n\t\t}\n\t\tif max_triple %\
    \ 3 == 0 {\n\t\t\ttriple_count += 1\n\t\t\ttriples.append(i)\n\t\t\ttriples.append(j)\n\
    \t\t\ttriples.append(max_triple)\n\t\t}\n\t}\n\t\n\treturn triple_count", "  \
    \  var a = Array(n) {0}\n    var i = 0\n    for _ in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n        i += 1\n    }\n    var j = 0\n    var k = n - 1\n    while\
    \ i < j {\n        var x = a[i] + a[j] + a[k]\n        if ((i % 3 != 0) || (x\
    \ != 0)) {\n            i += 1\n        } else {\n            j -= 1\n       \
    \ }\n        if ((j != k) && (x % 3 != 0)) {\n            k += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return i", "    // write your code\
    \ here\n    \n    let a = [0]\n    \n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    \n    for i in 1...n-1 {\n        a[i] += 2 * i - 1\n        for j\
    \ in (i+1)...n {\n            a[j] += 2 * j - 1\n            for k in (i+j)...n\
    \ {\n                a[k] += 2 * k - 1\n                if a[k] > 3 * a[i] - a[j]\
    \ + a[k] {\n                    return 0\n                } else {\n         \
    \           return 1\n                }\n            }\n        }\n    }\n   \
    \ \n    return 0", "    let a = Array(stride(from: 0, to: n, by: 1).map({ $0 *\
    \ $0 - $0 + 1 }))\n    return a.filter({ $0 + $0 + $0 == 3*$0 }).count", "   \
    \ var res = 1\n    for i in 1..n-1 {\n        for j in i+1..n-1 {\n          \
    \  for k in j+1..n-1 {\n                if ((i+j+k)%3 == 0) res++\n          \
    \  }\n        }\n    }\n    return res", "    let mut a: Vec<Int> = vec![Int::MIN]\n\
    \    for i in 0..n {\n        a[i] = i * i - i + 1\n    }\n    let mut triplet\
    \ = 0\n    for i in 1..n {\n        for j in (i + 1)..n {\n            if a[i]\
    \ < a[j] {\n                let k = (i * i * i) + a[j] - a[i]\n              \
    \  if k > triplet {\n                    triplet = k\n                }\n    \
    \        }\n        }\n    }\n    return triplet", "    if n < 0 {\n        return\
    \ 0\n    }\n    var result : Int = 0\n    var a : [Int] = Array(0..<n)\n    for\
    \ i in 0..<n {\n        a[i] = i*i - i + 1\n    }\n    for i in 0..<n {\n    \
    \    for j in 0..<n {\n            for k in 0..<n {\n                if i == j\
    \ && j == k {\n                    continue\n                }\n             \
    \   \n                let sum = i * i + j * j + k * k\n                \n    \
    \            if sum == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result", '    return count_tripler_triples(get_tripler_array(n))',
  '    return n * n * (n + 1) / 2', "\treturn get_max_triples(n: n, a: IntArray(n))",
  "    var result = 0\n    \n    for i in 1...n {\n        for j in 1...n {\n    \
    \        if i != j && i != n {\n                for k in 1...n {\n           \
    \         if j != k {\n                        if i * i - j + k == 3 {\n     \
    \                       result = result + 1\n                        }\n     \
    \               }\n                }\n            }\n        }\n    }\n    \n\
    \    return result", "    var a: Array<Int> = Array<Int>()\n    for i in 1...n\
    \ {\n        a.append(i*(i-1)*(i-1)+1)\n    }\n    return a.count{($0, $1, $2)\
    \ in a}.count", "\treturn (Array(n)).reduce(0) { acc, item in\n\t\tacc *= item\n\
    \t\tacc += item + 1\n\t\tacc += item + 2\n\t\treturn acc\n\t}", "\tvar a = Array(n).fill(0)\n\
    \tfor i in 0 ..< n {\n\t\ta[i] = i * i - i + 1\n\t}\n\t\n\tfor i in 0 ..< n {\n\
    \t\tfor j in 0 ..< n {\n\t\t\tfor k in 0 ..< n {\n\t\t\t\tif i+j+k == a[i] &&\
    \ a[j]+k == a[j] && a[i]+k == a[k] {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn 0", "    if n < 2 {\n        return 0\n    }\n\n    var result\
    \ = 0\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k\
    \ in (i + 1)..<n {\n                if i != j && i != k {\n                  \
    \  if a[i] == a[j] + a[k] {\n                        result = result + 1\n   \
    \                 }\n                }\n            }\n        }\n    }\n\n  \
    \  return result", "    var a = [Int](n + 1)\n    \n    var max_count = 0\n  \
    \  \n    var max_triple: Int?\n    \n    for var i = 0; i < a.count - 1; i++ {\n\
    \        for var j = i + 1; j < a.count; j++ {\n            for var k = j + 1;\
    \ k < a.count; k++ {\n                let product = a[i] * a[j] * a[k]\n     \
    \           if product % 3 == 0 {\n                    if max_count < product\
    \ {\n                        max_count = product\n                        max_triple\
    \ = [i, j, k]\n                    }\n                }\n            }\n     \
    \   }\n    }\n    \n    return max_triple?.0 ?? 0", "    var ans = Int()\n   \
    \ for i in 1...n {\n        for j in (i+1)...n {\n            for k in (i+1)...n\
    \ {\n                ans = max(ans, i*i*i - j*j + k*k - i*i*i) // k*(k+1)/2\n\
    \            }\n        }\n    }\n    return ans", "    precondition(n >= 1, \"\
    n must be positive\")\n    var a: [Int] = []\n    var triples = 0\n    var temp:\
    \ Int = 0\n    for i in 1...n {\n        if a[i] == a[i-1] + a[i-2] {\n      \
    \      triples += 1\n        }\n    }\n    if triples == 0 {\n        return 0\n\
    \    }\n    for i in 1...triples {\n        for j in 1...triples {\n         \
    \   temp = temp + (i * j * j)\n        }\n    }\n    if temp % 3 == 0 {\n    \
    \    return triples / 3\n    } else {\n        return 0\n    }", "    if n ==\
    \ 0 || n == 1 {\n        return 0\n    }\n\n    let result = 0\n    var count\
    \ = 0\n    var a = [Int](count: n, repeatedValue: 0)\n\n    for _ in 1...n {\n\
    \        a[count] = count\n        count += 1\n    }\n    \n    for a in 0...count-1\
    \ {\n        var b = a\n        for b in a...count-1 {\n            var c = a\n\
    \            for c in a...count-1 {\n                var d = a\n             \
    \   for d in a...count-1 {\n                    var e = (a+b+c)\n            \
    \        if e % 3 == 0 {\n                        count += 1\n               \
    \     }\n                }\n            }\n        }\n    }\n    \n    return\
    \ result", "    var a : [Int] = []\n    var sum : Int = 0\n    for i in 1...n\
    \ {\n        sum += i * i - i + 1\n        a.append(sum)\n    }\n    \n    var\
    \ triplet : Int = 0\n    \n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                triplet += a[k] - a[j] - a[i]\n \
    \           }\n        }\n    }\n    return triplet.toInt()", "    let mut a =\
    \ Array(0..<n).map { Int(arc4random()) }\n    a.sort()\n    \n    let mut i =\
    \ -1\n    for j in 0..<n {\n        for k in 0..<j {\n            if k != i {\n\
    \                if a[k] > a[j] + a[i] {\n                    i = k\n        \
    \        }\n            }\n        }\n    }\n    return i", "    var maxSum =\
    \ 0\n    var i = 2\n    var sum = 0\n    while i <= n {\n        sum += i\n  \
    \      if sum > maxSum {\n            maxSum = sum\n        }\n        i += 1\n\
    \    }\n    return maxSum", "    var a = [0]\n    for i in 1...n {\n        a[i]\
    \ = a[i] * i - i + 1\n    }\n    var count = 0\n    for i in 0 ..< n {\n     \
    \   for j in 0 ..< n {\n            for k in 0 ..< n {\n                let k\
    \ = k + j\n                if a[i] != a[j] || a[i] != a[k] || a[j] != a[k] {\n\
    \                    continue\n                }\n                if a[i] - a[j]\
    \ - a[k] == 0 {\n                    count = count + 1\n                }\n  \
    \          }\n        }\n    }\n    return count", "    var result = 0\n    var\
    \ a = [Int](n)\n    for i in 1..<n {\n        a[i] = i * i - i + 1\n    }\n  \
    \  for i in 1..<n {\n        for j in 1..<n {\n            for k in 1..<n {\n\
    \                if i != j && i != k && j != k {\n                    let sum\
    \ = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if sum % 3 == 0 {\n\
    \                        result = result + 1\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return result", "    var a =\
    \ [Int]()\n    for _ in 1...n {\n        a.append(i*i - i + 1)\n    }\n    return\
    \ a.count", '    return 1', "    \n    let arr = Array<Int>(repeating: 0, count:\
    \ n)\n    for i in 1...n {\n        for j in 1...n {\n            for k in 1...n\
    \ {\n                if i <= j && i <= k && j <= k && i != j {\n             \
    \       arr[i] += arr[j] + arr[k]\n                }\n            }\n        }\n\
    \    }\n    \n    return arr.max()", "\tvar a = [0]\n\tfor i := 1; i <= n; i++\
    \ {\n\t\ta[i] = i * i - i + 1\n\t}\n\tfor i := 1; i <= n; i++ {\n\t\tfor j :=\
    \ i + 1; j <= n; j++ {\n\t\t\tfor k := j + 1; k <= n; k++ {\n\t\t\t\tif a[i] <\
    \ a[j] || a[i] < a[k] || a[j] < a[k] {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t\
    if a[i] += a[j] += a[k] < 3 {\n\t\t\t\t\treturn i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn 0", "\tvar sum: Int = 0\n\t\n\tfor i in 1..n {\n\t\tsum += (i) *\
    \ (i - 1) + (i + 1)\n\t}\n\t\n\treturn sum % 3", "  var a = [0]\n  var count =\
    \ 0\n\n  for (i in 1...n) {\n    if a[i] == 0 { \n      count = 1 + count\n  \
    \    continue\n    }\n    if a[i] == 1 {\n      count = 1 + count\n      continue\n\
    \    }\n\n    for (i in 2...n) {\n      if a[i] > 1 && a[i] == 3 && a[i - 1] +\
    \ a[i - 2] + a[i - 3] == a[i] {\n        count = 1 + count\n        break\n  \
    \    }\n    }\n\n    a[i] = count\n    count = 1\n  }\n\n  return a[n]", "   \
    \ var a: inout [Int] = [0]\n    for i in 1...n {\n        for j in (i+1)...n {\n\
    \            if a[i*i-1] + a[j*i] == 0 {\n                a[i*i-1] = i + 1\n \
    \               a[j*i] = i + 1\n            }\n        }\n    }\n    var triples\
    \ = 0\n    for i in 0..n {\n        for j in (i+1)..n {\n            for k in\
    \ (i+1)..n {\n                if a[i*i-1] == a[j*i] && a[j*i] == a[k*i] {\n  \
    \                  if a[k*i] % 3 == 0 {\n                        triples += 3\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return triples", "    let array = [Int]()\n    for _ in 0..<n {\n        array.append(Int(arc4random_uniform(100))\
    \ + 1)\n    }\n    let mut res = array[0]\n    for i in 1..<array.count {\n  \
    \      let curr = array[i]\n        for j in i..<array.count {\n            let\
    \ next = array[j]\n            guard curr + next > res else {\n              \
    \  res = curr + next\n                break\n            }\n        }\n    }\n\
    \    return res == array[0]", "    var a: [Int] = []\n    for _ in 0..<n {\n \
    \       a.append(0)\n    }\n    var sum = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            for k in 0..<n {\n                sum += a[i] + a[j]\
    \ + a[k]\n                if sum == 3*(i*(i+1)) + 3*(j*j+k*k) {\n            \
    \        a[i] += 1\n                    a[j] += 1\n                    a[k] +=\
    \ 1\n                    sum = 0\n                    break\n                }\n\
    \            }\n        }\n    }\n    return a.count", "    if n < 1 {\n     \
    \   return 0\n    }\n\n    // initialize a zero array with a capacity of n\n \
    \   var a = Array<Int>(n + 1)\n\n    // initialize all values of a to 1\n    for\
    \ index in 0...n {\n        a[index] = 1\n    }\n\n    // start from i = 2 and\
    \ increase by 1 until the index equals n\n    // loop will run exactly n - 1 times\n\
    \    for i = 2; i < n; i++ {\n        // loop will run exactly n - 1 times\n \
    \       for j = i; j > 0; j-- {\n            // loop will run exactly n - 1 times\n\
    \            for k = j; k < i; k++ {\n                if a[i] + a[j] + a[k] ==\
    \ 3 {\n                    return 1\n                } else {\n              \
    \      return 0\n                }\n            }\n        }\n    }\n\n    return\
    \ 0", "    let result = (1...n).map{_ in (2 * $0 - 1) + 1}.filter{x in x%3 !=\
    \ 0}\n    return result.reduce(0){($0 + 1)*($0+1) + $1}", "\t/*\n\t1. Find the\
    \ max and min value in arr. \n\t2. Set i = max and j = min.\n\t3. Repeat while\
    \ i < j\n\t3. For each i, a[i] = a[i] + a[j] - i; i = i + 1\n\t4. Set i = i -\
    \ 1 and j = j + 1\n\t5. Repeat while i < j\n\t*/\n\t\n\tfor i in 0..<n {\n\t\t\
    if arr[i] < arr[i+1] {\n\t\t\ti += 1\n\t\t} else {\n\t\t\tj -= 1\n\t\t}\n\t}\n\
    \t\n\t/*\n\ta[i] = a[i] + a[j] - i; i = i + 1\n\ti = i - 1 and j = j + 1\n\ti\
    \ = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\
    \ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j +\
    \ 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j =\
    \ j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and\
    \ j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1\
    \ and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i\
    \ - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\t\
    i = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\
    \ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j +\
    \ 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j =\
    \ j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and\
    \ j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1\
    \ and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i\
    \ - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\t\
    i = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\
    \ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j +\
    \ 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and ",
  "    if n == 0 {\n        return 0\n    }\n    let arr = Array<Int>(n + 1)\n   \
    \ var count = 0\n    for _ in 0..<n {\n        arr[n - 1] = 0\n        arr[n -\
    \ 1] += n - 1\n        arr[n - 1] += 1\n        count = max(count, arr[n])\n \
    \   }\n    return count", "\treturn min_sum_problem(n)", "    // write your code\
    \ here\n    var a: [Int] = [0] * n\n    \n    var count = 0\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            for k in 0..<n {\n                if\
    \ i >= 0 && j >= 0 && k >= 0 {\n                    let sum = i * i - i + j +\
    \ k\n                    if sum % 3 == 0 {\n                        a[(i+1)%3]\
    \ = 1\n                        a[j%3] = 1\n                        a[k%3] = 1\n\
    \                        count++\n                    }\n                }\n \
    \           }\n        }\n    }\n    return count", "    // code here\n    \n\
    \    var count = 0\n    var j = 0\n    var k = 0\n    var a = [Int](n)\n    var\
    \ sum = 0\n    var triple: [Int] = []\n    \n    for index in 1...n {\n      \
    \  a[index] = index * index - index + 1\n        sum += a[index]\n    }\n    \n\
    \    for index in 0...n {\n        triple[0] = a[index] // j\n        if j ==\
    \ n-1 {\n            j += 1\n            triple[1] = a[j] // k\n            if\
    \ k == n-1 {\n                k += 1\n            } else {\n                k\
    \ = k + 1\n            }\n        }\n        if j == k {\n            triple[2]\
    \ = a[k] // a[j] to a[i]\n            if triple[0]*triple[0] + triple[1]*triple[1]+triple[2]*triple[2]\
    \ < sum {\n                count += 1\n            }\n        }\n        j+=1\n\
    \        k+=1\n    }\n    return count", "    // TODO: return your solution here.\n\
    \    return 0", '    return Int(get_triples(n).count)', "\treturn get_sum_triples(n,\
    \ n)", "\tvar a = Array(n * 3)\n\tfor i := 1; i <= n; i++ {\n\t\tjMax := 0\n\t\
    \tfor j := 1; j <= n; j++ {\n\t\t\tif j > i {\n\t\t\t\tfor k := 1; k <= n; k++\
    \ {\n\t\t\t\t\tif i+j+k < n {\n\t\t\t\t\t\ta[i + j*n + k] = a[i] + a[j] + a[k]\n\
    \t\t\t\t\t\tif a[i + j*n + k] % 3 == 0 {\n\t\t\t\t\t\t\tjMax = j\n\t\t\t\t\t\t\
    }\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ta[i*n - 1] =\
    \ a[i*n - 1] + jMax + 1\n\t\tif a[i*n - 1] % 3 == 0 {\n\t\t\treturn i\n\t\t}\n\
    \t}\n\treturn 0", "    \n    guard n != 0 else { return 0 }\n    \n    let a =\
    \ Array(0..<n).map { _ in n * n - n + 1 }\n    \n    for i in 0..<a.count {\n\
    \        for j in i..<a.count {\n            for k in j..<a.count {\n        \
    \        if a[i] + a[j] + a[k] % 3 == 0 {\n                    return 1\n    \
    \            }\n            }\n        }\n    }\n    return 0", "    var triples\
    \ = 0\n    var max = 0\n    for i = 1 ..< n {\n        for j = i ..< n {\n   \
    \         for k = j ..< n {\n                if i*i + j*j + k*k == 3 {\n     \
    \               triples += 1\n                }\n                if k > max {\n\
    \                    max = k\n                }\n            }\n        }\n  \
    \  }\n    return max", "    var count = 0\n    var max = Int(pow(3, Double(n)))\
    \ + 1\n    for i : Int in 1..n+1 {\n        for j : Int in 0..n+1 {\n        \
    \    if i == j { continue}\n            if i == j+1 || i == j-2 { continue }\n\
    \            if a[i] > max { max = a[i] }\n            for k : Int in 0..n+1 {\n\
    \                if i == k || i == j || i == k+1 || i == k-2 { continue }\n  \
    \              if a[j] > max { max = a[j] }\n                if a[k] > max { max\
    \ = a[k] }\n                if a[i] + a[j] + a[k] == max && i <= j+1 && j <= k+1\
    \ && k <= n+1 {\n                    count += 1\n                }\n         \
    \   }\n        }\n    }\n    return count", "    var a = Array(0..<n)\n    let\
    \ max = (n - 1) * 3\n    for i in 0..<n {\n        a[i] = i * i - i + 1\n    }\n\
    \    return a.filter{ $0 % 3 == 0 }.count", "\t\n\tguard n > 0 else { return 0\
    \ }\n\n\treturn get_max_triple_with_lower_bound(n, 0)", "    if n < 0 {\n    \
    \    return 0\n    }\n    var a = Array<Int>(n + 1)\n    for i : Int in 1...n\
    \ {\n        a[i] = i * i - i + 1\n    }\n    let maxCount = 3\n    var count\
    \ = 0\n    for i : Int in 1...n {\n        if i != i {\n            count += 1\n\
    \            if count == maxCount {\n                return count\n          \
    \  }\n        }\n        if a[i] < 0 {\n            return 0\n        }\n    \
    \    for j : Int in i + 1...n {\n            if i != j {\n                count\
    \ += 1\n                if count == maxCount {\n                    return count\n\
    \                }\n            }\n            for k : Int in j + 1...n {\n  \
    \              if i != j && i != k {\n                    count += 1\n       \
    \             if count == maxCount {\n                        return count\n \
    \                   }\n                }\n            }\n        }\n    }\n  \
    \  return 0", "    precondition(n >= 1)\n    var a = make(Array, n)\n    for i\
    \ := 1; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    \n    var triples\
    \ = 0\n    \n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n\
    \            for k := 0; k < j; k++ {\n                if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k] {\n                    triples++\n                }\n\
    \            }\n        }\n    }\n    \n    return triples", "    var a = Array[Int](n)\n\
    \    for i in 0..<n {\n        a[i] = i*i-i+1\n    }\n    for k in 0..<n {\n \
    \       for j in 0..<k {\n            if j < k && i*a[j] + a[j]*a[k] + a[k]*a[j]\
    \ == 3 {\n                return k - j\n            }\n        }\n    }\n    return\
    \ 0", "    var array = [Int]()\n    for i in 1...n {\n        array.append(i*i\
    \ - i + 1)\n    }\n    for index in 0...n-1 {\n        for j1 in index...n {\n\
    \            for j2 in j1...n {\n                for j3 in j2...n {\n        \
    \            if array[index] > array[j1] + array[j2] + array[j3] {\n         \
    \               return 0\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return 1", "    if n <= 0 { return 0 }\n    \n  \
    \  var a = Array(repeating: 0, count: n)\n    for _ in 1...n {\n        a[n-1]\
    \ += 1\n    }\n    var sum = 0\n    for (_, i, j) in a.enumerated() {\n      \
    \  sum += i*i - i - j\n    }\n    if sum % 3 == 0 {\n        return a.count\n\
    \    }\n    return 0", "    var res: Int = 0\n    let a: [Int] = Array(0..<n).map({\
    \ return i * i - i + 1 })\n    a.enumerate().forEach { (index: Int, value: Int)\
    \ in\n        if index < a.count {\n            if value == a[index] + a[index]\
    \ + a[index] {\n                res += 1\n            }\n        }\n    }\n  \
    \  return res", "    var a = Array<Int>(n){1, 3, 7, 13, 21}\n    \n    for i in\
    \ 0..<n {\n        let j = findIndex(i: &a, j: &a, k: &a, i: &a) + 1\n       \
    \ let k = findIndex(i: &a, j: &a, k: &a, j: &a) + 1\n        if i != j {\n   \
    \         a[j] = a[i]\n        }\n        if i != k {\n            a[k] = a[i]\n\
    \        }\n        if j != k {\n            a[j] = a[j]\n        }\n    }\n \
    \   \n    let tripleCount = a.filter{ $0%3 == 0 }.count\n    return tripleCount",
  "    var a: [Int] = Array(n + 1)\n    \n    for i in 0..<n+1 {\n        a[i] = i\
    \ * i - i + 1\n    }\n    \n    var ans: Int = -1\n    \n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ > j { continue; }\n                if j > k { continue; }\n                \n\
    \                if a[i] > a[j] {\n                    if a[i] > a[k] {\n    \
    \                    if a[j] > a[k] {\n                            ans = max(ans,\
    \ a[i] + a[j] + a[k]);\n                        }\n                        else\
    \ {\n                            ans = max(ans, a[i] + a[j] + a[k] - 1);\n   \
    \                     }\n                    }\n                    else {\n \
    \                       if a[j] > a[k] {\n                            ans = max(ans,\
    \ a[i] - a[j] + a[k]);\n                        }\n                        else\
    \ {\n                            ans = max(ans, a[i] - a[j] + a[k] - 1);\n   \
    \                     }\n                    }\n                }\n          \
    \      else {\n                    if a[i] > a[k] {\n                        ans\
    \ = max(ans, a[i] - a[j] + a[k]);\n                    }\n                   \
    \ else {\n                        ans = max(ans, a[i] - a[j] + a[k] - 1);\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ \n    return ans;", "    var a = Array(0..<n)\n    a.sort { $0 < $1 }\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    while i < n {\n        if a[i] < a[j]\
    \ || a[i] < a[k] || a[j] < a[k] {\n            a[i] = a[i] * a[i] - a[i] + a[j]\
    \ + a[k]\n            i += 1\n            j += 1\n            k += 1\n       \
    \     continue\n        }\n        if a[i] < a[j] + a[k] {\n            a[i] =\
    \ a[i] * a[i] - a[i] + a[j] + a[k]\n            i += 1\n            continue\n\
    \        }\n        if a[j] < a[k] + a[i] {\n            a[j] += a[k]\n      \
    \      k += 1\n            continue\n        }\n        if a[k] < a[j] + a[i]\
    \ {\n            a[k] += a[i]\n            i += 1\n            continue\n    \
    \    }\n        return k\n    }\n    return i", "    var a = Array<Int>()\n  \
    \  for i in 1...n {\n        for j in i...n {\n            for k in j...n {\n\
    \                if i != j && j != k && k > i {\n                    a[i] = i\
    \ * i - i + 1\n                    \n                }\n            }\n      \
    \  }\n    }\n    return a.count", "    var a = [1]\n    for i in 1..<n {\n   \
    \     for j in 1..<n {\n            for k in 1..<n {\n                if i !=\
    \ j && j != k && k != i && a[j] + a[k] + a[i] % 3 == 0 {\n                   \
    \ a.append(a[j] + a[k] + a[i])\n                }\n            }\n        }\n\
    \    }\n    return a.count", "\tvar a : [Int] = Array(repeating: 0, count: n)\n\
    \tfor k in 0..<n {\n\t\ta[k] = k * k\n\t}\n\tguard a.indices.contains(0) else\
    \ {\n\t\treturn 0\n\t}\n\tfor i in 0..<n {\n\t\tif a[i] % 3 == 0 {\n\t\t\tcontinue\n\
    \t\t}\n\t\tlet k = 0\n\t\tfor j in (i + 1)..<n {\n\t\t\tif a[j] % 3 == 0 {\n\t\
    \t\t\tcontinue\n\t\t\t}\n\t\t\tk += 1\n\t\t\tlet sum = a[i] + a[j] + a[k]\n\t\t\
    \tif sum % 3 == 0 {\n\t\t\t\treturn k\n\t\t\t}\n\t\t}\n\t}\n\treturn 0", "   \
    \ var arr = [Int]()\n    var a = 0\n    for _ in 1...n {\n        a += 1\n   \
    \     arr.append(a)\n    }\n    var result = 0\n    for i in 0 ..< n {\n     \
    \   for j in 0 ..< n {\n            for k in 0 ..< n {\n                if i !=\
    \ j && i != k && j != k {\n                    if arr[i] + arr[j] + arr[k] ==\
    \ (arr[i] * arr[i] + arr[j] * arr[j] + arr[k] * arr[k]) {\n                  \
    \      result = result+1\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return result", "    var a: Array<Int> = []\n   \
    \ for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n \
    \               if i < j < k && (a[i] + a[j] + a[k])%3 != 0 {\n              \
    \      a.append(i)\n                    a.append(j)\n                    a.append(k)\n\
    \                }\n            }\n        }\n    }\n    return a.count", "  \
    \  \n    let arr = Array(1 ..< n)\n    \n    \n    var count = 0\n    for i in\
    \ arr {\n        \n        for j in arr {\n            \n            for k in\
    \ arr {\n                \n                if (i != j) && (j != k) && (i != k)\
    \ {\n                    \n                    if (arr[i] + arr[j] + arr[k] ==\
    \ 3 * i) {\n                        count = count + 1\n                    }\n\
    \                    \n                }\n                \n            }\n  \
    \          \n        }\n        \n    }\n    \n    return count\n    ", "    var\
    \ a = Array(repeating: 0, count: n)\n    \n    for i in 0..<n {\n        if a[i]\
    \ == 0 {\n            a[i] = i * i - i + 1\n        }\n    }\n    \n    let result\
    \ = a.max{ $0 + $1 + $2 }\n    \n    return result", "    var a = Array<Int>()\n\
    \    for _ in 1..<n {\n        a.append(i * i - i + 1)\n    }\n    return a.count",
  "\t// write your code here\n\tvar a: [Int] = []\n\tfor _ in 1...n {\n\t\ta.append(0)\n\
    \t}\n\tfor i in 0..<n {\n\t\tfor j in 0..<n {\n\t\t\tfor k in 0..<n {\n\t\t\t\t\
    if i != j {\n\t\t\t\t\tif a[j] + a[k] > a[j] + a[i] {\n\t\t\t\t\t\ta[i] = a[j]\
    \ + a[k]\n\t\t\t\t\t\tj = k\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ a.count", "    var a: [Int] = []\n    for i in 0..<n {\n        a[i] = i*i-i+1\n\
    \    }\n    var count = 1\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          for k in 0..<n {\n                if i+j+k == 3 && a[i] + a[j] + a[k]\
    \ == 3 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count", "\treturn get_max_triple_helper(n, (n * n\
    \ - n) / 2)", "    let res = [Int]()\n    res.reserveCapacity(n * n)\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            if i != j && j > i {\n \
    \               if is_multiple(n - 1, i , j, res) {\n                    return\
    \ res.count\n                }\n            }\n        }\n    }\n    return 0",
  "\tvar a : [Int] = []\n\tfor var i = 0; i < n; i++ {\n\t\ta.append(i * i - i + 1)\n\
    \t}\n\t\n\tvar sum : Int = 0\n\t\n\tfor i : Int in 0..<n {\n\t\tfor j : Int in\
    \ 0..<n {\n\t\t\tfor k : Int in 0..<n {\n\t\t\t\tif a[i] < a[j] || a[j] < a[k]\
    \ || a[i] < a[k] {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsum += a[i]\
    \ + a[j] + a[k]\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum % 3", "    var result =\
    \ Int(0)\n    for j in 0..<n {\n        for i in 0..<n {\n            if i !=\
    \ j {\n                for k in 0..<n {\n                    if i != k {\n   \
    \                     if j != k {\n                            if a[i + j + k]\
    \ == a[j + k + a] {\n                                result += 3\n           \
    \                 }\n                        }\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return result", "    var a\
    \ = [Int]()\n    for _ in 0 ..< n {\n        a.append(0)\n    }\n    var sum =\
    \ 0\n    var count = 0\n    var i, j: Int\n\n    for i = 0; i < n {\n        for\
    \ j = i + 1; j < n; j++ {\n            sum += a[i] + a[j] + a[k]\n           \
    \ if sum == 3 * i {\n                count += 1\n            }\n        }\n  \
    \  }\n    return count", "\treturn get_max_triple_with_aux(n, n, 0)", "    var\
    \ a: [Int] = []\n    for i in 1...n {\n        for j in 0...(i-1) {\n        \
    \    for k in j...n {\n                if i != j && i != k && j != k {\n     \
    \               if ((i*i*i) + 1 + (i*j) + k) % 3 == 0 {\n                    \
    \    a.append(i*i*i + i*j + i*k)\n                    }\n                }\n \
    \           }\n        }\n    }\n    return a.count", "    var a = [0] * (n+1)\n\
    \    for x in 1...n {\n        for y in 0..(n-x) {\n            for z in 0..(x-y-1)\
    \ {\n                if x+y+z == n {\n                    a[x+y+z] = 1\n     \
    \           }\n            }\n        }\n    }\n    return a[n] % 3", "    var\
    \ res = 1\n    for i in 1..n {\n        for j in i + 1..n {\n            for k\
    \ in i + 1..n {\n                if i+j+k == 3 && i+k+j == 3 && i+k+i == 3 {\n\
    \                    res *= 3\n                    if res > n {\n            \
    \            res = n\n                    }\n                }\n            }\n\
    \        }\n    }\n    return res", "    var a: Int = 0\n    for i in 1...n {\n\
    \        a = (i * i) - i + 1\n        if a > 0 {\n            if a%3 == 0 {\n\
    \                return Int((n - 1) * 3)\n            }\n        }\n    }\n  \
    \  return Int((n - 1) * 3)", "    let max: Int = Int.max\n    var result = 0\n\
    \    for i in 0..<n {\n        for j in (i+1)..<n {\n            if i * i + i\
    \ + 1 == j * j {\n                result++\n            }\n        }\n    }\n\
    \    if result > max {\n        return Int.max\n    }\n    return result", " \
    \   var a = [0]\n    for index in 1...n {\n        a[index] = a[index-1]*(a[index-1]*index-a[index-1]+1)\
    \ + index-1\n        if a[index]*a[index]*a[index] % 3 != 0 { return 0 }\n   \
    \ }\n    return a.count-1", "    var a: [[Int]] = [[Int]](n, 0)\n    for _ in\
    \ 1...n {\n        a[a.endIndex-1].append(Int(arc4random_uniform(UInt32(n))))\n\
    \    }\n    var sum: Int = 0\n    for i in a.indices {\n        for j in a.indices\
    \ {\n            for k in a.indices {\n                if i != j && i != k &&\
    \ j != k && a[i][j] + a[j][k] > a[i][k] + a[k][j] {\n                    sum =\
    \ sum + a[i][j] + a[j][k] + a[i][k]\n                }\n            }\n      \
    \  }\n    }\n    return sum % 3 == 0 ? 1 : 0", "\tvar num = 0\n\tvar a = [Int](repeating:\
    \ 0, count: n)\n\tfor i in 0 ..< n {\n\t\tlet a1 = i * i - i + 1\n\t\ta[i] = a1\n\
    \t}\n\tfor _ in 0 ..< n {\n\t\tlet a1 = a[i] - a[i + 1] - a[i + 2]\n\t\tif a1\
    \ % 3 == 0 {\n\t\t\tnum += 1\n\t\t}\n\t}\n\treturn num", '    return max_triples(1,
    n, 1, n)', "\t\n\tif n < 3 {\n\t\treturn 0\n\t}\n\t\n\tlet a = Array(0..<n)\n\t\
    let mut ans = n\n\t\n\tfor (a[i], a[j], a[k]) in a.enumerated() {\n\t\t\n\t\t\
    let n = a[j] + a[k]\n\t\tlet m = n + a[i]\n\n\t\tif m > 3 {\n\t\t\tans = max(n,\
    \ 0)\n\t\t} else {\n\t\t\tans = max(ans, n)\n\t\t}\n\t}\n\t\n\treturn ans", " \
    \   let a = [Int]()\n    for i in 1...n {\n        let j = i * i - i + 1\n   \
    \     if j > a.last {\n            a.append(j)\n        }\n    }\n    let res\
    \ = a.enumerated().filter({$0.element % 3 == 1}).count\n    return res", "   \
    \ var a: [Int] = []\n    for i in 1..<n {\n        a[i] = i * i - i + 1\n    }\n\
    \    var triples = Int()\n    a.forEach { triples += $0 * $0 * $0 + 1 }\n    return\
    \ min(triples, 1)", "    var a = [0]\n    for _ in 1...n {\n        a.append(a[n-1])\n\
    \    }\n    var triples = 1\n    var a0 = a[0]\n    for i in  1...n {\n      \
    \  if a[i] == a0*a0*a0+1 {\n            triples += 1\n        }\n        a0 =\
    \ a[i]\n    }\n    return triples", "\tif n == 0 { return 0 }\n\t\n\tlet maxTriples\
    \ = [0] * (n+1)\n\t\n\tvar i = 0\n\tfor _ in 0 ..< n {\n\t\tmaxTriples[i] = 0\n\
    \t\ti += 1\n\t}\n\t\n\tmaxTriples[0] = 1\n\tfor i := 1; i < n; i++ {\n\t\tmaxTriples[i]\
    \ = maxTriples[i-1] + maxTriples[i-1] - maxTriples[i-2]\n\t}\n\t\n\tvar sum =\
    \ 0\n\tfor i := 0; i < n; i++ {\n\t\tsum += maxTriples[i]\n\t}\n\treturn sum %\
    \ 3", "    // Since all the numbers are negative, the maximum triple is the biggest\
    \ negative number \n    let max_triple = -Int64(n)\n\n    // Create a triple array\
    \ of a size n\n    var a = Array(0..<n)\n\n    // The sum of each triple is 0\n\
    \    var sum = 0\n\n    // For every triple, increment sum by its value\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n     \
    \           sum += (i*i - j*j - k*k) // 3\n            }\n        }\n        a[i]\
    \ = sum\n        sum = 0\n    }\n\n    // If sum > 0, then there exists at least\
    \ 3 elements with sum greater than 0\n    if sum > 0 {\n        return 1\n   \
    \ }\n\n    // Else if no triple with sum greater than 0, then there is no such\
    \ triple\n    return 0", "    var count = Int()\n    var arr = [Int]()\n    \n\
    \    for i in 1...n {\n        arr.append(i * i - i + 1)\n    }\n    \n    for\
    \ i in 0..<(n-2) {\n        var j = i+1\n        var k = n-i-1\n        \n   \
    \     let count = arr[i] + arr[j] + arr[k]\n        \n        if count == (arr[i]\
    \ + arr[j] + arr[k]) {\n            count = arr[i] + arr[j] + arr[k] - count\n\
    \        }\n        \n        if count == 0 {\n            count = 1\n       \
    \ }\n        \n        if count == 3 {\n            count += 1\n        }\n  \
    \      \n        if count > 3 {\n            count = count - 3\n        }\n  \
    \      \n        arr.append(count)\n    }\n    \n    return arr.reduce(0, {$0\
    \ + $1})", "    if n <= 0 {\n        return 0\n    }\n    var res = 1\n    for\
    \ i in 1...n {\n        for j in (i + 1)...n {\n            for k in (i + j)...n\
    \ {\n                if i != j && i != k && j != k && i * i + j * j == n * k {\n\
    \                    res += 1\n                    break\n                }\n\
    \            }\n        }\n    }\n    return res", "    var triples = (n * n)\
    \ / 2\n    for _ in 0..<n {\n        triples += (n * n) / 2\n    }\n    return\
    \ triples", "    var a = [0]\n    for i in 1..n {\n        for j in 1..i {\n \
    \           for k in 1..j {\n                if a[i] + a[j] + a[k] == 3 {\n  \
    \                  return 1\n                }\n            }\n        }\n   \
    \     a[i] += i\n    }\n    return 0", "\tvar a = [Int]()\n\ta.reserve(n)\n\t\
    for i in 1..<n {\n\t\ta.append(i * i - i + 1)\n\t}\n\treturn a.countTriples(a:\
    \ &a)", "\tvar a = [1]\n\tfor i := 1; i <= n; i++ {\n\t\ta[i] = a[i] * a[i] -\
    \ i + 1 // the a[i] will be positive and unique\n\t}\n\ti := 0\n\tvar count =\
    \ 0\n\tisTriple := true\n\tfor i < n {\n\t\tisTriple = false\n\t\tfor j := i +\
    \ 1; j < n; j++ {\n\t\t\tfor k := i + 1; k < n; k++ {\n\t\t\t\tif a[j] > a[k]\
    \ {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif a[j] + a[k] <= 3 {\n\t\t\t\t\t\
    isTriple = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif isTriple {\n\t\t\
    \t\tcount++\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n\treturn count", " \
    \   let m = Int(pow(Double(n), 3))\n    var i = 0\n    var j = n - 1\n    var\
    \ k = n - 1\n    var count = 0\n    \n    while j < m {\n        var count = 0\n\
    \        while k < m && j >= i {\n            count += 3\n            if a[i]\
    \ < a[j] {\n                i = j\n            } else {\n                j = k\n\
    \            }\n            k--\n        }\n        count += j\n        i = j\n\
    \        j--\n        count++\n    }\n    return count", "    var max_count =\
    \ 0\n    var max_triple = (-1, -1, -1)\n    for _ in 1...n {\n        \n     \
    \   \n        var triple_count = 0\n        var a = Array<Int>(n + 1)\n      \
    \  for i = 1...n {\n            a[i] = i * i - i + 1\n            if a[i] % 3\
    \ == 0 {\n                triple_count += 1\n            }\n        }\n      \
    \  \n        if triple_count > max_count {\n            max_count = triple_count\n\
    \            max_triple = a.indices(where: { $0 % 3 == 0 })\n        }\n    }\n\
    \    return max_count", '    return Int(arc4random_uniform(UInt32(n)) / 3)', "\t\
    return n", "    var count = 0\n    var sum = 0\n    for var i = 0; i < n; i++\
    \ {\n        sum += ((i * i) - i + 1)\n    }\n    for var i = 0; i < n; i++ {\n\
    \        for var j = i + 1; j < n; j++ {\n            for var k = j + 1; k < n;\
    \ k++ {\n                if ((i * i) + j * j + k * k == sum) {\n             \
    \       count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    if n == 0 {\n        return 0\n    }\n    \n    var a = [Int](n+1)\n\
    \    \n    a[0] = 1\n    for i in 1...n {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var max_triples = 0\n    \n    for _ in 0...(n-2) {\n        var i\
    \ = 0\n        var j = 0\n        var k = 0\n        \n        for _ in 0...(n-2)\
    \ {\n            i = i + 1\n            j = j + 1\n            k = k + 1\n   \
    \     }\n        \n        if a[i] < a[j] < a[k] {\n            if i == j && a[i]\
    \ < a[k] {\n                max_triples = max_triples + 1\n            }\n   \
    \         if i == k && a[i] < a[j] {\n                max_triples = max_triples\
    \ + 1\n            }\n            if j == k && a[j] < a[k] {\n               \
    \ max_triples = max_triples + 1\n            }\n        }\n    }\n    \n    return\
    \ max_triples", "    \n    var result = 0\n    var max = 0\n    for i in 1...n\
    \ {\n        var j = 1\n        var k = 1\n        var k = k * i - i + 1\n   \
    \     \n        while k % 3 == 0 {\n            j = j + 1\n            k = k *\
    \ j - i + 1\n        }\n        \n        if max < k {\n            result = k\n\
    \            max = k\n        }\n    }\n    \n    return result", "    precondition(n\
    \ >= 0, \"Invalid negative n\")\n    var result = 0\n    for i in 1..n-1 {\n \
    \       for j in (i + 1)..n-1 {\n            result += ((3*i - 3*j) % 3) == 0\n\
    \        }\n    }\n    return result", "    var a: [Int] = []\n    for _ in 1...n\
    \ {\n        a.removeFirst()\n    }\n    for i in 1..<n {\n        for j in i..<n\
    \ {\n            for k in i..<n {\n                if i * i - i + 1 + j * j -\
    \ k == 3 {\n                    a.append(i)\n                    a.append(j)\n\
    \                    a.append(k)\n                }\n            }\n        }\n\
    \    }\n    return a.count", "    var res = 1\n    for i in 1 ..< n {\n      \
    \  for j in 1 ..< n {\n            for k in 1 ..< n {\n                if i +\
    \ j + k == 3 * i && j + k == i {\n                    res += 1\n             \
    \   }\n            }\n        }\n    }\n    return res", "    switch n {\n   \
    \ case 1: return 1\n    case 2: return 3\n    case 3: return 1\n    case 4: return\
    \ 2\n    case 5: return 3\n    default: return 0\n    }", "    var sum: Int =\
    \ 0\n    for i in 1...n {\n        for j in i...n {\n            sum += i * i\
    \ * i + 1\n            if sum == n {\n                return 1\n            }\n\
    \        }\n    }\n    return 0", "    var a = [Int]()\n    for _ in 1...n {\n\
    \        a.append(Int.random(in: 1...n))\n    }\n    for a in a {\n        if\
    \ a < 0 {\n            continue\n        }\n        for b in a {\n           \
    \ if b < 0 {\n                continue\n            }\n            for c in a\
    \ {\n                if c < 0 {\n                    continue\n              \
    \  }\n                if a + b + c == n {\n                    return a.count\
    \ + b.count + c.count\n                }\n            }\n        }\n    }\n  \
    \  return 0", "    var a: [Int] = []\n    \n    for i in 1...n {\n        for\
    \ j in (i + 1) ...n {\n            for k in (j + 1) ...n {\n                if\
    \ ((i + j + k) % 3 == 0) {\n                    a.append(i*j + i + j + k)\n  \
    \              }\n            }\n        }\n    }\n    \n    return a.count",
  '    return Int(arc4random_uniform(UInt32(n * n)) + n*n*n) % n', '    return count_triples(n:
    n, max: 0)', '    return getTriples(n).count', "    // write your code in JavaScript\
    \ (Node.js)\n    var a = [Int]()\n    for i : Int in 1 ..< n {\n        a[i] =\
    \ i * i - i + 1\n    }\n    var res = Int()\n    for i in 1 ..< n {\n        for\
    \ j in 1 ..< n {\n            for k in 1 ..< n {\n                var triple =\
    \ 0\n                if (i < j && j < k && a[i] < a[j] && a[j] < a[k]) {\n   \
    \                 triple = 1\n                }\n                if (i < k &&\
    \ a[i] < a[k]) {\n                    triple = 1\n                }\n        \
    \        if ((i < j && j < k) && (a[i] < a[j] || a[j] < a[k])) {\n           \
    \         triple = 1\n                }\n                res += triple\n     \
    \       }\n        }\n    }\n    return res", "    var res = 0\n    for index\
    \ in stride(from: 0, to: n, by: 1) {\n        var i = 0\n        var j = 0\n \
    \       var k = 0\n        while i < n && j < n && k < n {\n            if index%3\
    \ != 0 {\n                break\n            }\n            var c = index%3 *\
    \ index%3 * index%3\n            if c < 3 {\n                i++\n           \
    \ } else if c > 9 {\n                k++\n            } else {\n             \
    \   j++\n            }\n        }\n        if i < n && j < n && k<n {\n      \
    \      res = max(res, index + i - j - k)\n        }\n    }\n    return res", " \
    \   var a = Array(0..<n)\n    let sum = a.sum()\n\n    for i in 0..<n {\n    \
    \    a[i] = i * i - i + 1\n    }\n\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i <= j && j <= k && k <=\
    \ n {\n                    if a[i] < a[j] + a[k] {\n                        swap(&a[i],\
    \ &a[j])\n                        swap(&a[i], &a[k])\n                    }\n\
    \                }\n            }\n        }\n    }\n\n    return a.filter({$0\
    \ == sum * sum}).count() / 3", "    var a: [Int] = Array(0..<n).map { $0 * $0\
    \ - $0 + 1 }\n    var result = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                result += (a[i] - a[j]) * (a[i]\
    \ - a[j]) + (a[k] - a[j]) * (a[k] - a[j]) + a[i] == (a[i] - a[j]) * (a[k] - a[j])\
    \ + a[j] == (a[i] - a[j]) * (a[i] - a[k]) + a[k] == a[i] - a[j] - a[k]\n     \
    \       }\n        }\n    }\n    return result", "    if n < 0 { return 0 }\n\
    \    var a: [Int] = []\n    for i in 0..<n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for index in 0..<n {\n        for j in 0..<index\
    \ {\n            for k in 0..<j {\n                if a[index] > a[j] + a[k] {\n\
    \                    a[index] = a[j] + a[k]\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count", "    var\
    \ arr = [Int]()\n    \n    for i in 1...n {\n        arr.append(i*i - i + 1)\n\
    \    }\n    \n    let sortedArr = arr.sorted(by: <)\n    \n    var counter = 0\n\
    \    for i in sortedArr {\n        if i < sortedArr[sortedArr.count-1] && \n \
    \          i < sortedArr[sortedArr.count-1]+sortedArr[sortedArr.count-1] {\n \
    \           counter += 1\n        }\n    }\n    \n    return counter", "    var\
    \ a = [Int]()\n    for _ in 1...n {\n        for _ in 1...n {\n            for\
    \ _ in 1...n {\n                a.append(i * i - i + 1)\n            }\n     \
    \   }\n    }\n    \n    return a.count{(_, _, _) in \n        (_, _, _) in\n \
    \       (_ + _ + _) mod 3 == 0\n    }", "\tlet a = Array<Int>(n)\n\tfor i in 0..<n\
    \ {\n\t\ta[i] = i * i - i + 1\n\t}\n\treturn a.maxElement()", "    var a = [Int]()\n\
    \    for _ in 1...n {\n        let i = Int(arc4random_uniform(UInt32(n)))\n  \
    \      if !contains(&a, i) {\n            a.append(i)\n        }\n    }\n    return\
    \ count(&a, { $0 % 3 == 0 })", "    var sum = 0\n    var total = 0\n    for x\
    \ in 1...n {\n        var sum = sum + x\n        if sum > 9 {\n            sum\
    \ = sum - 9\n        } else {\n            if sum > 3 {\n                sum =\
    \ sum - 3\n            } else {\n                total++\n            }\n    \
    \    }\n    }\n    return total", "    // write your code here\n    var a = Array<Int>(n)\n\
    \    for i in 0..<n {\n        a[i] = i * i - i + 1\n    }\n    var count = 0\n\
    \    for (i in 0..<n) {\n        for j in (i + 1)..<n {\n            for k in\
    \ (i + 2)..<n {\n                if ((a[i] == a[j] && a[j] == a[k]) && a[i] +\
    \ a[j] + a[k] % 3 == 0) {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    // TODO: add your code\n\
    \    var max = 0\n    var temp = 0\n    for j in 1 ..< n {\n        if temp ==\
    \ 0 {\n            temp = j\n        }\n        if max < temp {\n            max\
    \ = temp\n        }\n        if temp < j {\n            temp = j\n        }\n\
    \    }\n    if temp == 0 {\n        return 0\n    } else {\n        return 1\n\
    \    }", "\tvar sum = 0\n\tfor i in 0..<n {\n\t\tfor j in 0..<n {\n\t\t\tif i\
    \ != j && j > i {\n\t\t\t\tfor k in 0..<n {\n\t\t\t\t\tif k != i && k != j &&\
    \ k != k {\n\t\t\t\t\t\tif sum+i*i+j*j+k*k == 3*i && i!=j && i!=k && j!=k {\n\t\
    \t\t\t\t\t\tsum += i + 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn sum", "    if n < 0 {\n        return 0\n    }\n    var sum =\
    \ 0\n    for i in 1 ... n {\n        sum += (i * i - i + 1) / 3\n    }\n    return\
    \ sum", '    return get_max_triples(n: Int.max) + 1', "\tguard n > 0 else {\n\t\
    \treturn 0\n\t}\n\tvar a: [Int] = Array(0..<n)\n\tvar count = 0\n\tfor i : Int\
    \ in 0..<n {\n\t\tlet j = i + i + 1\n\t\tlet k = i * i\n\t\twhile j < k {\n\t\t\
    \tcount += 1\n\t\t\tj++\n\t\t}\n\t\tif count > 0 {\n\t\t\tcontinue\n\t\t}\n\t\t\
    a[i] = i * i - i + 1\n\t\tcontinue\n\t}\n\tguard a.last % 3 == 0 else {\n\t\t\
    return 0\n\t}\n\treturn count", '    return Int(binom(n, 3, 0))', "    precondition(n\
    \ >= 0, \"n should be greater than or equal to 0.\")\n\n    var result = Int()\n\
    \    for ii in 1...n {\n        for jj in (ii + 1...n) {\n            if ii +\
    \ jj > n {\n                break\n            }\n            for kk in jj+1...n\
    \ {\n                if ii + jj + kk > n {\n                    break\n      \
    \          }\n                if ii + jj + kk + 3 == i * i * i - i * (i + 1) +\
    \ i * (i + 1) + i * (i + 1) + 1 {\n                    result = max(result, ii\
    \ + jj + kk)\n                }\n            }\n        }\n    }\n    return result",
  "    var a = Array<Int>(n)\n    var max = 0\n    for i in 0..<n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    \n    for k in 0..<n {\n        if k != n {\n  \
    \          var j = k + 1\n            for i in 0..<n {\n                j = k\n\
    \                var sum = a[i] + a[j] + a[k]\n                if sum == 0 {\n\
    \                    a[i] = 0\n                    a[j] = 0\n                \
    \    a[k] = 0\n                }\n                sum += a[i] * a[j] * a[k]\n\
    \                if sum > max {\n                    max = sum\n             \
    \   }\n                j++\n            }\n        }\n    }\n    return max",
  "   \n   var max_triple = 0\n   \n   var a = Array<Int>()\n   for i in 1...n {\n\
    \      a.append(i*i-i+1)\n   }\n   \n   for i in 0..<n {\n      for j in 0..<n\
    \ {\n         for k in 0..<n {\n            if (a[i] > 0 || a[j] > 0 || a[k] >\
    \ 0) && a[i] > a[j] && a[j] > a[k] {\n               \n               if a[i]\
    \ < max_triple {\n                  max_triple = a[i]\n               }\n    \
    \           if a[j] < max_triple {\n                  max_triple = a[j]\n    \
    \           }\n               if a[k] < max_triple {\n                  max_triple\
    \ = a[k]\n               }\n            }\n         }\n      }\n   }\n   return\
    \ max_triple", "    // base case when n = 2\n    guard n < 2 else {\n        return\
    \ 0\n    }\n    // initialize array a of size n.\n    let a = Array<Int>()\n \
    \   for i in 1..<n {\n        a.append(i * i - i + 1)\n    }\n    // initialize\
    \ count of triples (a[i], a[j], a[k]) of a where i < j < k\n    var count = 0\n\
    \    // traverse array a from right to left and count triples (a[j], a[k], a[i])\n\
    \    for i in (n - 1)..<n {\n        for j in i..<n {\n            for k in j..<n\
    \ {\n                if a[k] + a[j] + a[i] == a[0] {\n                    count\
    \ += 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    return count", "    var result = 0\n    var a = Array<Int>()\n   \
    \ for i in 1...n {\n        for j in i+1...n {\n            for k in j+1...n {\n\
    \                if i!==j && i!==k && j!==k {\n                    a.append(i*i-i+1)\n\
    \                }\n            }\n        }\n    }\n    let maxTriples = a.filter({\
    \ $0 % 3 == 0 }).count\n    return maxTriples", "  var result = 0\n  var a = [Int]()\n\
    \  var triples = [i: Int]()\n  for _ in 0..<n {\n    if a.count < 3 {\n      a.append(0)\n\
    \    }\n    triples.updateValue(n-i, forKey: i)\n    if a.count > 3 {\n      result\
    \ = max3(triples.values, forKey: i)\n      break\n    }\n  }\n  return result",
  "    if n == 0 {\n        return 0\n    }\n    var i = 0\n    var max = 0\n    var\
    \ triples = 1\n    for _ in 0..<n {\n        i += 1\n        triples = 1\n   \
    \     if i < n {\n            var sum = 0\n            for _ in 0..<n {\n    \
    \            sum += a[i]\n                i += 2\n            }\n            max\
    \ = max(max, sum)\n            if sum == max {\n                triples += 1\n\
    \            }\n        }\n    }\n    return triples", "    var result = 0\n \
    \   var triples = [Int]()\n    for i in 1...n {\n        for j in (i + 1)...n\
    \ {\n            if i != j && i == i * i - j {\n                triples.append((i,\
    \ j, i*i - j + 1))\n            }\n        }\n    }\n    for triple in triples\
    \ {\n        result += triple\n    }\n    return result", "    var a: [Int] =\
    \ []\n    for _ in 0..<n {\n        a.append(0)\n    }\n    for i : Int = 0 to\
    \ n {\n        for j : Int to i {\n            for k : Int to j {\n          \
    \      if a[k] > 0 {\n                    a[k] += a[i] + a[j] + 1\n          \
    \      }\n            }\n        }\n    }\n    return a.count - a.filter({$0 %\
    \ 3 == 0}, countBy: >).count - 1", '    return 1 + get_max_triples_n(n - 1)',
  "    var a = [0]\n    for _ in 1...n {\n        a[a[0]] = a[0] + a[0] + a[0] + 1\n\
    \    }\n    var sum = 0\n    for element in a {\n        sum += element\n    }\n\
    \    for element in a {\n        if sum % 3 == 0 {\n            return 1\n   \
    \     }\n        sum += element\n    }\n    return 0", "\treturn get_max_triples(n:\
    \ n + 1)", "    let a = [Int](repeating: 0, count: n)\n    \n    let result =\
    \ _getMaxOfTwoArrays(a: &a, min: 0)\n    \n    return result", "    return 0..<n\n\
    \        .scan(0, {\n            var j = $0;\n            var k = $0;\n      \
    \      return $0 + {\n                if j >= k {\n                    ($0 + 1,\
    \ j, k)\n                } else {\n                    ($0 + 1, $0 + 1, $0 + 1)\n\
    \                }\n            }\n        })\n        .map { (i, j, k) -> Int\
    \ in\n            (i, j, k)\n        }\n        .filter({ $0.0 + $0.1 + $0.2 ==\
    \ 3 * $0.0 })\n        .count", "    // Write your code here.\n    // 1\n    var\
    \ count = 0\n    var array = [Int]()\n    var temp = 0\n    var max = 0\n    \n\
    \    for i in 1...n {\n        temp = i * i - i + 1\n        if max < temp {\n\
    \            max = temp\n        }\n        array.append(i)\n    }\n    \n   \
    \ for i in 0..<array.count-1 {\n        for j in 0..<array.count-1 {\n       \
    \     for k in 0..<array.count-1 {\n                if array[i] < array[j] &&\
    \ array[i] < array[k] && array[j] < array[k] {\n                    if array[i]\
    \ - array[j] < array[i] - array[k] && array[j] - array[k] < array[j] - array[i]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count", "    precondition(n\
    \ >= 0, \"n is negative\")\n    var res = 1\n    for i in 1..n {\n        for\
    \ j in 1..n {\n            for k in 1..n {\n                if i + j + k == i\
    \ * i * i + j * j + k * k {\n                    res *= 3\n                  \
    \  if i + j + k > n {\n                        res -= 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return res", "\tvar a\
    \ : [Int] = []\n\tfor i : Int in 1...n {\n\t\ta.append(i * i - i + 1)\n\t}\n\t\
    return a.count { \n\t\tt in\n\t\tt < 3 &&\n\t\tt%3 ==0\n\t}", "    if n < 1 {\n\
    \        return 0;\n    }\n    var result = 0\n    var a = Array<Int>()\n    a.reserveCapacity(n)\n\
    \    for i in 0..<n {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if i != j {\n                for k\
    \ in 0..<n {\n                    if i != k {\n                        if j !=\
    \ k {\n                            if a[i] > a[j] + a[k] {\n                 \
    \               result += 1;\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return result % 3;", "\tvar a: Array = Array()\n\tfor i in 1...n {\n\
    \t\ta.append(i * i - i + 1)\n\t}\n\treturn a.maxElement()", "    precondition(n\
    \ >= 0, \"n must be positive\")\n    var result = 1\n    for i in  1..n {\n  \
    \      for j in (i+1)..n {\n            if i != j && i * i + j * j == i * j *\
    \ 3 {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result", "\tlet a = Array<Int>(n)\n\tfor i in 0 ..< n {\n\t\ta[i] = i * i -\
    \ i + 1\n\t}\n\t\n\tvar i, j, k int\n\tfor i, v in enumerate(a) {\n\t\tfor j,\
    \ u in enumerate(a) {\n\t\t\tif j > i {\n\t\t\t\tfor k, v in enumerate(a) {\n\t\
    \t\t\t\tif i != j && j != k {\n\t\t\t\t\t\tif v + u + v == a[i*j+k] {\n\t\t\t\t\
    \t\t\treturn i+j+k\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\t\n\treturn 0", "    var a = [0]\n    for i in 1...n {\n        for j in i...n\
    \ {\n            for k in j...n {\n                if i*i + j*j + k*k == i*i*i*i\
    \ {\n                    a[0] = 1\n                    a[i] = a[i] - i + 1\n \
    \                   a[j] = a[j] - j + 1\n                    a[k] = a[k] - k +\
    \ 1\n                }\n            }\n        }\n    }\n    return a[0]", "\t\
    return get_max_triples(n: n, triplesCount: 0)", "\tvar a = [Int](n+1)\n\ta[0]\
    \ = 1\n\t\n\tfor i : Int in 1..(n) {\n\t\ta[i] = a[i-1]*i - i\n\t}\n\t\n\treturn\
    \ a.count{ i, j, k -> (i + j + k) % 3 == 0 }", "    var a = [Int]()\n    for _\
    \ in 0..<n {\n        a.append(0)\n    }\n    var count = 0\n    for i : Int in\
    \ 1..<n {\n        for j : Int in i..<n {\n            for k : Int in i..<n {\n\
    \                if i == j &&  i == k && j == k {\n                    continue\
    \ // ignore triples that are already known to be valid\n                }\n  \
    \              let sum = i * i + j * j + k * k\n                if sum % 3 ==\
    \ 0 {\n                    count = count + 1\n                    a[i - 1] = 1\n\
    \                    a[j - 1] = 1\n                    a[k - 1] = 1\n        \
    \        }\n            }\n        }\n    }\n    return count", "    return 0..<n\
    \ {\n        let (v, i) = pow(3, n).enumerate().filter({ $0.1 < $0.2 }).map({\
    \ ($0.1, $0.2) }).max()\n        return v\n    }"]
stop_tokens:
- "\n}"
