name: HumanEval_66_digitSum
language: swift
prompt: "\n/// Task\n/// Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>>\
  \ digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s:\
  \ \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s:\
  \ \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
  \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"\
  helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"\
  aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
  \ \"You arE Very Smart\") == 327)"
completions: ["    guard s.count > 0 else {\n        return 0\n    }\n    var sum\
    \ = 0\n    let chars = s.characters\n    for index in 0..<chars.count {\n    \
    \    if chars[index] > 32 {\n            sum += chars[index] - 32\n        }\n\
    \    }\n    return sum", "\tlet result = 0\n\n\tfor c in s {\n\t\tif c.isUpper()\
    \ {\n\t\t\tresult += Int(c.unicodeScalars.first!.value)!\n\t\t}\n\t}\n\n\treturn\
    \ result", '    return s.map { Int($0) }.fold(0) { $0 + $1 }', "    return s.reduce(0)\
    \ { (acc, c) -> (Int) -> Int in\n        guard let c = Int(c) else { return acc\
    \ }\n        return acc + Int(c.toIntUpper())\n    }", "    let nums = s.unicodeScalars.filter\
    \ { $0.isDigit() }\n    return nums.reduce(Int.max, { $0 + $1.value })", "   \
    \ var sum = 0\n    for c in s {\n        sum += Int(Character(c).unicodeScalars.filter({\
    \ $0.isUppercase() }).first!.value)!\n    }\n    return sum", "    var sum = 0\n\
    \    var i: Int = 0\n    for i = s.startIndex..<s.endIndex where s[i].isDigit()\
    \ {\n        sum += s[i]\n    }\n    return sum", "    var total = 0\n    for\
    \ char in s.unicodeScalars {\n        if char.value > 128 {\n            return\
    \ total\n        }\n        total += char.value\n    }\n    return total", '    return
    s.reduce(0) { $0 + Int(UnicodeScalar($1)!.value - UnicodeScalar($0)!.value) }',
  "    var total = 0\n    for idx in 0..<s.count {\n        let c = s[idx].unicodeScalars.first!\n\
    \        if c > 127 { continue }\n        total += c\n    }\n    return total",
  "    return s.foldLeft(0) { (result, n: Char) in\n        let sum = result + Int(n)\n\
    \        if sum > 127 { return sum - 256 }\n        return sum\n    }", "    var\
    \ sum = Int()\n    for index in stride(from: 0, to: s.count, by: 1) {\n      \
    \  let letter = s[index].unicodeScalars\n            .filter { $0.isUppercase\
    \ }\n            .map({ $0.code })\n            .sum()\n        sum += letter\n\
    \    }\n    return sum", '    return s.map { $0 as? Int8 }.filter { $0 >= 48 }.reduce(0,
    +)', "    var sum = 0\n    for c in s {\n        if c.isUpper() {\n          \
    \  sum += c.unicodeScalars.upper\n        } else {\n            sum += c.unicodeScalars.lower\n\
    \        }\n    }\n    return sum", "    if s == \"\" {\n        return 0\n  \
    \  }\n\n    return digitSum(s.codeUnits, s.count)", '    return sum(s.uppercased().ascii)',
  "    return s.reduce(0) {\n        (sum: Int, ch: Character) in\n        let c =\
    \ (ch as Int)\n        return (sum + c, c)\n    }.0", '  return s.reduce(0, +)',
  '    return s.foldLeft(0) { $0 + Int($1) }', "\tvar sum = 0\n\ts.unicodeScalars.filter({\
    \ $0.value > CharacterSet.decimalDigits.value }).forEach({ sum += $0.value })\n\
    \treturn sum", "\treturn s.reduce(0) { $0 + Int($1) }", '    return s.reduce(0){
    $0 + Int($1) }', "    let result = reduce(s.toInt(), 0, { $0 + Int(String($1))\
    \ })\n    return result", "    var sum = 0\n    for c in s {\n        sum += Int(UInt8(c.unicodeScalars.withUnsafeBufferPointer\
    \ { buf: UnsafeBufferPointer(start: UnsafePointer($0.baseAddress), count: 1) })?.unicodeScalars.first\
    \ ?? 0)\n    }\n    return sum", "    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value > CharacterSet(UnicodeScalar(\"9\").value).value {\n \
    \           sum += c.value - CharacterSet(UnicodeScalar(\"0\").value).value\n\
    \        }\n    }\n    return sum", '    return s.reverse().reduce(0, { $0 + Int($1)
    })', "    var sum = 0\n    for _, b in s.characters {\n        if b >= '0' &&\
    \ b <= '9' {\n            sum += Int(b) - Int(Character(b)) // Convert to int\n\
    \        }\n    }\n    return sum", "    var sum = Int()\n    var i: Int = 0\n\
    \    while i < s.characters.count {\n        if s.characters[i] >= 'A' && s.characters[i]\
    \ <= 'Z' {\n            sum += Int(s.characters[i] - 'A' + 10)\n        } else\
    \ if s.characters[i] >= 'a' && s.characters[i] <= 'z' {\n            sum += Int(s.characters[i]\
    \ - 'a' + 10)\n        } else {\n            sum += s.characters[i]\n        }\n\
    \        i += 1\n    }\n    return sum", '    return s.reduce(0) { $0 + Int($1)
    }', "    if s == \"\" {\n        return 0\n    }\n    var sum = 0\n    for c in\
    \ s {\n        sum += (c > 'a' && c < 'z') ? c - 'a' + 10 : c - '0'\n    }\n \
    \   return sum", "    return s.reverse().reduce(0) {\n        i, acc in\n    \
    \    return acc + Int(i) - Int(Char.UnicodeScalarLiteralFromInt(Int(i)) - Int(Char.UnicodeScalarLiteralFromInt(Int(i)))\
    \ * 10)\n    }", "    let count = countUp(s.unicodeScalars)\n    return count\
    \ > 0 ? s.unicodeScalars.reduce(0,+) : 0", "    let length = s.characters.count\n\
    \    var result = 0\n    for index in 0..<length {\n        let c = s.characters[index]\n\
    \        let value = Int(String(c).unicodeScalars.filter {$0.value > 128}.map({$0.value}))\n\
    \        result += value!\n    }\n    return result", "    var sum = 0\n    for\
    \ c in s.characters {\n        if c.isUpper {\n            sum += c.value\n  \
    \      }\n    }\n    return sum", "    var sum = 0\n    var i = 0\n    for c in\
    \ s.characters {\n        if c >= '0' && c <= '9' {\n            sum += Int(c)\
    \ - '0'\n        } else {\n            i++\n        }\n    }\n    return sum",
  "    if s == \"\" {\n        return 0\n    }\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum", '    return s.map { Int($0) }.reduce(0,
    +)', "    let result = Int(s.characters\n        .filter { $0 >= 'a' && $0 <=\
    \ 'z' }.filter { $0 >= 'A' && $0 <= 'Z' })\n        .map { Int(String($0))! }\n\
    \        .reduce(0, +)\n    return result", "    var sum = 0\n\n    for char in\
    \ s.characters {\n        let codePoint = char.unicodeScalars.first!.value //\
    \ first code point is the upper case letter\n        if codePoint > 47 && codePoint\
    \ < 58 {\n            sum += codePoint - '0'\n        } else {\n            sum\
    \ += (codePoint - 'A' + 10) // first code point is the lower case letter\n   \
    \     }\n    }\n    return sum", '    return sum(map(s, toDigit))', "\tsum = 0\n\
    \tfor i in s.characters {\n\t\tif i.isUppercase {\n\t\t\tsum += i.value\n\t\t\
    }\n\t}\n\treturn sum", "    let r = s.unicodeScalars.filter({$0 > 32}).reduce(0)\
    \ {\n        (_: Int, _: Int) -> Int in\n        _ + Int(Character(UnicodeScalar(UInt8($0))).value)\n\
    \    }\n    return r", "\tlet s = s.characters\n\tvar sum = 0\n\tfor i in 0..<s.count\
    \ {\n\t\tlet letter = s[i]\n\t\tif letter.isUpper() {\n\t\t\tsum += letter.character\n\
    \t\t}\n\t}\n\treturn sum", '  s.filter { $0.isUpper }.fold(0)', "    var result\
    \ = 0\n    for c& in s {\n        result += Int(Int(c) - 65) * 10\n    }\n   \
    \ return result", "\tassert(s != \"\")\n\tlet result = s.makeIterator().map(String.UnicodeScalarView.init).filter({\
    \ $0.value > 32 }).reduce(0)\n\treturn result", "\tvar sum = 0\n\tfor i, chr :=\
    \ range s {\n\t\tif i > 0 && sum > 9 {\n\t\t\treturn sum\n\t\t}\n\t\tsum += Int(chr)\n\
    \t}\n\treturn sum", "    var result = 0\n    for c in s.characters {\n       \
    \ switch c {\n        case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':\n\
    \            result += 1\n        default:\n            break\n        }\n   \
    \ }\n    return result", "\tvar sum = 0\n\tfor i := 0; i < len(s); i++ {\n\t\t\
    switch s[i] {\n\t\tcase 'a':\n\t\t\tsum += 97\n\t\tcase 'b':\n\t\t\tsum += 98\n\
    \t\tcase 'c':\n\t\t\tsum += 99\n\t\tcase 'd':\n\t\t\tsum += 100\n\t\tcase 'e':\n\
    \t\t\tsum += 101\n\t\tcase 'f':\n\t\t\tsum += 102\n\t\tcase 'g':\n\t\t\tsum +=\
    \ 103\n\t\tcase 'h':\n\t\t\tsum += 104\n\t\tcase 'i':\n\t\t\tsum += 105\n\t\t\
    case 'j':\n\t\t\tsum += 106\n\t\tcase 'k':\n\t\t\tsum += 107\n\t\tcase 'l':\n\t\
    \t\tsum += 108\n\t\tcase 'm':\n\t\t\tsum += 109\n\t\tcase 'n':\n\t\t\tsum += 110\n\
    \t\tcase 'o':\n\t\t\tsum += 111\n\t\tcase 'p':\n\t\t\tsum += 112\n\t\tcase 'q':\n\
    \t\t\tsum += 113\n\t\tcase 'r':\n\t\t\tsum += 114\n\t\tcase 's':\n\t\t\tsum +=\
    \ 115\n\t\tcase 't':\n\t\t\tsum += 116\n\t\tcase 'u':\n\t\t\tsum += 117\n\t\t\
    case 'v':\n\t\t\tsum += 118\n\t\tcase 'w':\n\t\t\tsum += 119\n\t\tcase 'x':\n\t\
    \t\tsum += 120\n\t\tcase 'y':\n\t\t\tsum += 121\n\t\tcase 'z':\n\t\t\tsum += 122\n\
    \t\tdefault:\n\t\t\tsum += 127\n\t\t}\n\t}\n\treturn sum", "    var sum = 0\n\
    \    s.forEach {\n        sum += Int($0)\n    }\n    return sum", "    let sum\
    \ = s.reduce(0, combine: { $0 + Int($1).ascii() })\n    return sum", "    let\
    \ result = digits(s).map { Int($0) }.reduce(0, combine: +)\n    return result\
    \ % 10", "    let result = s.characters.reduce(0) { (result, item) -> Int in\n\
    \        switch item {\n        case '0' ... '9':\n            return result +\
    \ Int(item) - 9\n        default:\n            return result + Int(item)\n   \
    \     }\n    }\n\n    return result", '  return s.filter{ $0 >= 48 && $0 <= 57
    }.count', "  var result: Int = 0\n  for char <- s.characters {\n    if char.asciiValue\
    \ > 64 {\n      break\n    }\n    result *= 16 + char.asciiValue\n  }\n  return\
    \ result", "    if s.isEmpty() {\n        return 0\n    }\n    let start = s.startIndex\n\
    \    let end = s.endIndex\n    var digitSum = 0\n    for char in s.characters.enumerated()\
    \ {\n        if char.element >= '0' && char.element <= '9' {\n            digitSum\
    \ += Int(char.element) - '0'\n        }\n    }\n    return Int(s[start..end])\
    \ + digitSum", "    if s == \"\" {\n        return 0\n    }\n\n    var digits\
    \ = [1]\n\n    for _ in 0..<s.characters.count {\n        var sum = 0\n\n    \
    \    for char in s.characters {\n            sum += char.unicodeScalars.reduce(0)\n\
    \        }\n\n        digits.append(sum % 10)\n    }\n\n    return Int(digits.reduce(0,\
    \ { $0 + $1 }))", "  var sum = 0\n  for i in 0 ..< s.count {\n    if Int(s[i])\
    \ > 127 { sum += Int(s[i]) - 127 }\n  }\n  return sum", "  var total = 0\n  for\
    \ char in s.characters {\n    if Character.isUpper(<char>) {\n      total += Character.digit(<char>,\
    \ radix: 10)\n    }\n  }\n  return total", "    var sum = 0\n    for _, b in s.unicodeScalars\
    \ {\n        if !b.isHighSurrogate() {\n            sum += b.value\n        }\n\
    \    }\n    return sum", "    guard let str = s as String else {\n        return\
    \ 0\n    }\n    var result = 0\n    var index = str.startIndex\n    while index\
    \ < str.endIndex {\n        let c = str[index]\n        if c >= '0' && c <= '9'\
    \ {\n            result += Int(c - '0')\n        }\n        index++\n    }\n \
    \   return result", "    let sum = s.characters.map({ $0 as Int })\n        .filter{$0\
    \ > 0}\n        .sum()\n    return sum", "    return s.reduce(0) { (prev, char)\
    \ -> Int in\n        return prev + Int(char.unicodeScalarValue)\n    }", "  let\
    \ result = s.filter { $0 >= 'A' && $0 <= 'Z' }.map { $0 - 'A' + 'a' }.sum()\n\
    \  return result % 26", "    if s.isEmpty {\n        return 0\n    }\n    var\
    \ sum = 0\n    for i in s.unicodeScalars {\n        if i > 0xffff {\n        \
    \    // not an ASCII character\n            continue\n        }\n        sum +=\
    \ i\n    }\n    return sum", "    var sum = 0\n    s.forEach { ch in\n       \
    \ sum = sum + Int(String(ch).unicodeScalars.filter({ $0.isUppercase }).map({ $0.value\
    \ }).joined().unicodeScalars.first!)!\n    }\n    return sum", "    var sum =\
    \ 0\n    for _, b in s.unicodeScalars {\n        if b < 128 {\n            sum\
    \ += b\n        } else {\n            break\n        }\n    }\n    return sum",
  "    \n    return s.map { Int(String($0)) }.reduce(0, +)", '    return s.reduce(0)
    { $0 + $1 }', "\tresult := 0\n\tfor _, r := range s {\n\t\tresult += Int(r) -\
    \ Int(r)\n\t}\n\treturn result", "    let res = s.reduce(0) { sum, n in sum +\
    \ Int(String(n.unicodeScalars.map { $0.value }[0])) }\n    return res + res.unicodeScalars.map\
    \ { $0.value }.reduce(0)", "    if s == \"\" {\n        return 0\n    }\n    var\
    \ sum = 0\n    for letter in s {\n        if letter.isUpper() {\n            sum\
    \ += Int(letter) - Int(Int(letter)!)\n        }\n    }\n    return sum", "\treturn\
    \ s.filter { UInt32($0).isMultiple(9) }", "    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum", '  return digitSumHelper(s)',
  "\tvar result = 0\n\n\tfor _, r := range s {\n\t\tresult += Int(r)\n\t}\n\n\treturn\
    \ result", '    return countUppercase(asDigits(s))', "    if s == \"\" {\n   \
    \     return 0\n    }\n    var codes: [Int] = []\n    for ch in s {\n        codes.append(Int(ch))\n\
    \    }\n    return codes.reduce(0) { $0 + $1 }", "    var result = 0\n    for\
    \ _ in self.filter(\"^[\\\\w]+\") {\n        result += Int(_)\n    }\n    return\
    \ result", "\tlet chars = s.characters\n\tvar sum = Int()\n\tfor char in chars\
    \ {\n\t\tif char.unicodeScalars.filter({$0.value > 127}).count == 0 {\n\t\t\t\
    sum += Int(char)\n\t\t}\n\t}\n\treturn sum", "\tlet s = String(s)\n\tvar sum =\
    \ 0\n\tfor _ in 0..<s.count {\n\t\tif s.startIndex + _ < s.endIndex {\n\t\t\t\
    sum += Int(s[s.startIndex + _].utf16[0])\n\t\t} else {\n\t\t\treturn sum\n\t\t\
    }\n\t}\n\treturn sum", '    return digitSum(s.characters)', '    return sum(map(s,
    strToInt))', '    return s.reduce(_+, 0);', "    let inputLength = s.length\n\
    \    \n    // Step 1: Loop through all characters in String\n    for index in\
    \ 0..<inputLength {\n        let inputChar = s.characters[index]\n        \n \
    \       // Step 2: Add current char to accumulator sum\n        let currentChar\
    \ = Int(inputChar)\n        let currentCharSum = currentChar\n        \n     \
    \   // Step 3: Check each character against the uppercase character range\n  \
    \      if currentCharSum >= 97 && currentCharSum <= 122 {\n            // Step\
    \ 4: Add to accumulator\n            currentCharSum += 97\n        }\n       \
    \ \n        // Step 5: Write result to accumulator\n        accumulator += currentCharSum\n\
    \    }\n    \n    // Step 6: Return result\n    return accumulator", '    return
    digitSum(s.unicodeScalars.map { $0.value })', "    var sum = 0\n    for ch in\
    \ s {\n        if isUpper(ch) {\n            sum += (ch - 'A' + 10)\n        }\
    \ else {\n            sum += ch\n        }\n    }\n    return sum", "    let digits\
    \ = s.characters.reduce(0, combine: { (sum, ch) in\n        var sum = sum + (Int(ch)\
    \ - 48)\n        return sum\n    })\n    return digits", "    return s.reduce(0)\
    \ { (acc, c) in\n        guard c >= '0' && c <= '9' else {\n            return\
    \ acc\n        }\n        return acc + Int(c) - '0'\n    }", '    return s.map({
    $0.isUppercase() }.reduce(0, combine: +)) + 0', "    return s.reduce(0, { (acc,\
    \ ch) in\n        var sum = 0\n        switch ch {\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"a\":\n        case \"b\":\n    \
    \    case \"c\":\n        case \"d\":\n        case \"e\":\n        case \"f\"\
    :\n            sum = acc + Int(ch - \"0\")\n        default:\n            sum\
    \ = 0\n        }\n        return sum\n    })", "    return s.reduce(0, { $0 +\
    \ Int(String($1).unicodeScalars.filter({ $0.value > 57 })\n        .map({ $0.value\
    \ })\n        .sum())})", '    return digitSums(s, 0, []int)', "    let len: Int\
    \ = count(s)\n    return count(s.dropFirst()) % (len * 32 + 1)", '    return digitSum(s.unicodeScalars)',
  "    var result = 0\n    for letter in s {\n        result += (Int(letter) - '0')\
    \ + 10\n    }\n    return result", "  var charArray = [Character]()\n  var result\
    \ = 0\n  for char in s.characters {\n    if char.isUpper() {\n      charArray.append(char)\n\
    \    }\n  }\n  for char in charArray {\n    result += Int(char)\n  }\n  return\
    \ result", "\treturn digitSumHelper(s.characters.reduce(0) { $0 + Int($1) })",
  "\tlet result = s.filter { $0.isUppercase }.map { Int($0, radix: 16).reduce(0, +)\
    \ }.reduce(0, +)\n\tguard result != 0 else { return 0 }\n\treturn result", " \
    \ var total: Int = 0\n\n  for s in s {\n    total += Int(s.unicodeScalars.filter({\
    \ $0 > Character.UnicodeBlock.UppercaseLetterSpace }).reduce(0) { $0 + $1 })\n\
    \  }\n\n  return total", "    var sum = 0\n    for index in 0 ..< s.count {\n\
    \        let codePoint = s[index]\n        sum += Int(UnicodeScalar(codePoint).value)\n\
    \    }\n    return sum", "  var result = Int(0)\n  for _, b in s.unicodeScalars\
    \ {\n    if b > 0xffff {\n      break\n    }\n    result *= 256\n    result +=\
    \ Int(b)\n  }\n  return result", "    var result = 0\n    for c in s {\n     \
    \   if c.isUpper() {\n            result = result * 16 + Int(c)\n        }\n \
    \   }\n    return result", "\tresult := 0\n\tfor i in 0..<s.characters.count {\n\
    \t\tswitch s[i] {\n\t\tcase '0': result += 48\n\t\tcase '1': result += 49\n\t\t\
    case '2': result += 50\n\t\tcase '3': result += 51\n\t\tcase '4': result += 52\n\
    \t\tcase '5': result += 53\n\t\tcase '6': result += 54\n\t\tcase '7': result +=\
    \ 55\n\t\tcase '8': result += 56\n\t\tcase '9': result += 57\n\t\tdefault:\n\t\
    \t\tbreak\n\t\t}\n\t}\n\treturn result", "    var sum = 0\n    var i = 0\n   \
    \ while i < s.characters.count {\n        if Int(s[i]) > 96 && Int(s[i]) < 122\
    \ {\n            sum += Int(s[i])\n        } else {\n            sum += 64\n \
    \       }\n        i += 1\n    }\n    return sum", "    return sumOfDigits(s.characters().map()\
    \ {\n        let c = _0\n        let cDigit = getASCIICode(c)\n        if cDigit\
    \ > 64 {\n            cDigit = 64\n        }\n        c += cDigit\n        return\
    \ c\n    })", "    let sum = s.reduce(0, combine: { $0 + Int($1) < Int($2) ? Int($1)\
    \ + Int($2) : Int($1) + Int($2) })\n    return sum > Int(128) ? sum - Int(128)\
    \ + Int(128) : sum", "\treturn Int32(s.characters.reduce(0,{$0+$1}).uppercaseString.characters.reduce(0,{$0+$1}))",
  "    var sum = 0\n    for i : Int in s.unicodeScalars.filter({ $0.value > 0 }) {\n\
    \        sum += Int(i)\n    }\n    return sum", "\tlet re = NSRegularExpression.regularExpressionWithPattern(\"\
    ^.*?([A-Z0-9])\", options: nil, error: nil)\n\tvar num: Int = 0\n\tre.enumerateMatchesInString(s,\
    \ options: nil, range: NSMakeRange(0, s.characters.count)).forEach({(match, _)\
    \ in\n\t\tnum += Int(s.substringWithRange(match.rangeAtIndex(0)).uppercaseStringWithLocale(NSLocale(localeIdentifier:\
    \ \"en_US_POSIX\")).integerValue)!\n\t})\n\treturn num", '    return s.reduce
    { $0 + Int($1) }', "    if s == \"\" {\n        return 0\n    }\n    var result\
    \ = s[0]\n    for index, _ := range s {\n        result += (Int(s[index]) - 96)\
    \ * Int(s[index])\n    }\n    return result", "\treturn s.reduce(0, { $0 + Int(String($1))\
    \ })", '    return s.reduce(0, combine: { $0 + $1 })', "    return s.scanCharacters(from:\
    \ NSMakeRange(0, s.count), into: nil).reduce(0) { (accum, element) -> Int in\n\
    \        if element > 47 { return accum }\n        return accum + Int(element)\n\
    \    }", "\tlet chars = s.characters\n\tlet isDigit = CharacterSet.decimalDigits.isSupersetOfSet(CharacterSet(chars))\n\
    \tlet digitSum = chars.reduce(0, combine: +)\n\treturn digitSum + Int(isDigit)",
  "    var sum = Int(0)\n    for _, b := range s {\n        sum += Int(string(b))\n\
    \    }\n    return sum", "    let result = Int(s).reduce(0) { $0 + $1 }\n    return\
    \ result", "    var result = 0\n\n    for index in 0..<s.count {\n        let\
    \ character = s[index]\n        if character >= \"a\" && character <= \"z\" {\n\
    \            result += Int(character - \"a\")\n        }\n    }\n\n    return\
    \ result", "    \n    let sum = s.characters.reduce(0) { (acc, c) -> Int in\n\
    \        let digit = Int(c)\n        if (digit > 47 && digit < 58) {\n       \
    \     acc += digit - 48\n        }\n        return acc\n    }\n    return sum",
  "\treturn s.countByReduce {\n\t\t$0.unicodeScalars.reduce(0) {\n\t\t\t$0 + Int($1.value)\
    \ + Int($2.value)\n\t\t}\n\t}", '    return sum(s.characters)', "    let result\
    \ = s.reduce(0) { (sum: Int, ch: Character) -> Int in\n        let char = Int(ch)\n\
    \        if char > 48 { // 'A' .. 'Z'\n            return sum + char - 65\n  \
    \      }\n        return sum + char\n    }\n    return result", "    var sum =\
    \ 0\n    for i := 0; i < len(s); i++ {\n        var code : Int\n        if i <\
    \ len(s) && s[i].isUpper() {\n            code = s[i].unicodeScalars.reduce(0){$0\
    \ + $1}\n        } else {\n            code = s[i]\n        }\n        sum = sum\
    \ + code\n    }\n    return sum", "    var sum = 0\n    for char in s.characters\
    \ {\n        if char.unicodeScalars.filter{$0.isUpper}.count > 0 {\n         \
    \   sum += char.unicodeScalars.filter{$0.isUpper}.map {$0.value}.reduce(0,+)\n\
    \        }\n    }\n    return sum", "\tvar sum = 0\n\tfor ch in s {\n\t\tsum +=\
    \ Int(ch) - Int(Int(ch))!\n\t}\n\treturn sum", '    return s.uppercased().reduce(0,
    +)', "    var acc = 0\n    for _, b := range s {\n        if b >= '0' && b <=\
    \ '9' {\n            acc += int(b) - '0'\n        }\n    }\n    return acc", " \
    \   var sum = 0\n    for char in s {\n        let code = char.asciiValue\n   \
    \     sum += code > 96 ? code - 87 : code - 48\n    }\n    return sum", "\tlet\
    \ s = String(s.utf16)\n\tlet count = s.count\n\n\tlet maxDigit = s.max(of: CharacterSet.uppercaseLetters)\n\
    \n\tlet maxDigitCount = Int(maxDigit.utf8.count)\n\n\treturn count * maxDigitCount\
    \ + maxDigitCount.reduce(0)", "    let n = s.characters.reduce(0, +)\n    return\
    \ n - s.unicodeScalars.filter{$0.value > 48 && $0.value < 58}.count", "    var\
    \ result = 0\n    for character in s.characters {\n        result += Int(character)\
    \ - Int(Int(character)!)\n    }\n    return result", "    let result: Int = s.characters.reduce(0)\
    \ {\n        (accumulator, character) -> Int in\n        let ascii = Int(character)\n\
    \        return (accumulator + ascii)\n    }\n    return result", "  var sum:\
    \ Int = 0\n  for c in s.characters {\n    if c.isUpper() {\n      sum += Int(c)\n\
    \    }\n  }\n  return sum", '  return s.reduce(0, combine(|acc, _| acc * 256 +
    _))', "    var sum = 0\n    for _char in s.characters {\n        if _char >= '0'\
    \ && _char <= '9' {\n            sum += Int(_char) - '0'\n        }\n    }\n \
    \   return sum", "    let result = s.filter({$0 >= 'a' && $0 <= 'z'}).reduce(0,\
    \ { $0 + Int($1) })\n    return result % 10", "    if s == \"\" {\n        return\
    \ 0\n    }\n\n    var result = 0\n    var len = s.Length\n    for i := 0; i <\
    \ len; i++ {\n        result += s[len - i - 1] - '0'\n    }\n    return result",
  "\treturn digitSumHelper(s.unicodeScalars.count())", "    var sum = 0\n    for i\
    \ : Int in s.unicodeScalars.reversed().filter({ $0.value > 0 }) {\n        sum\
    \ += Int(i.value)\n    }\n    return sum", "    var sum = 0\n    for let i in\
    \ s.utf8.enumerated() {\n        if i.value == Character(UnicodeScalar(UInt8(i.value)!).upperCase.rawValue)\
    \ {\n            sum += i.value\n        }\n    }\n    return sum", "    var sum:\
    \ Int = 0\n    for c in s {\n        if c >= 'a' && c <= 'z' {\n            sum\
    \ += c - 'a' + 10\n        } else if c >= 'A' && c <= 'Z' {\n            sum +=\
    \ c - 'A' + 10\n        } else {\n            sum += c\n        }\n    }\n   \
    \ return sum", "    var sum = 0\n    for ch in s {\n        if ch >= 'a' && ch\
    \ <= 'z' {\n            sum += ch - 'a'\n        }\n    }\n    return sum", " \
    \ var sum = 0\n  \n  for char in s.unicodeScalars {\n    if let upperChar = char.value\
    \ as? Int where upperChar >= 65 && upperChar <= 90 {\n      sum += upperChar\n\
    \    }\n  }\n  return sum", "  guard s.count > 0 else { return 0 }\n  var result\
    \ = 0\n  for c in s.utf16 {\n    if c >= Character('0') && c <= Character('9')\
    \ {\n      result += c - Character('0')\n    }\n  }\n  return result", "\treturn\
    \ digitSumHelper(s, 0)", "  var sum = 0\n  for character in s {\n    if character\
    \ >= '0' && character <= '9' {\n      sum += Int(character)\n    }\n  }\n  return\
    \ sum", "    return s.characters.reduce(0) { acc, c in\n        let digit = c\
    \ - 0x30\n        return acc + Int(digit)\n    }", "    var sum = 0\n    for c\
    \ in s.characters {\n        if c >= '0' && c <= '9' {\n            sum += Int(c\
    \ - '0')\n        }\n    }\n    return sum", "    let sum = s.reduce(0) { (sum:\
    \ Int, _: Character) -> (Int, Character) in\n        if let c = Character(Character(Character(sum)\
    \ + Character(_)).ascii) {\n            return (c, Character(Character(Character(sum)\
    \ + Character(_))).unicodeScalars.first!)\n        }\n        (sum, Character(Character(sum)\
    \ + Character(_)).unicodeScalars.first!)\n    }.0\n    return sum", '    return
    s.map({ Int($0).upperd() }).reduce({ $0 + $1 })', "    var total = 0\n    for\
    \ cs in s.characters {\n        total += Int(cs)\n    }\n    return total", " \
    \   var sum = 0\n    var currentChar: Character\n    for currentChar in s {\n\
    \        sum += Character.isUpper(currentChar) ? currentChar.codePoint : -Character.isUpper(currentChar)\
    \ ? 65 : 66\n    }\n    return sum", "    var acc: Int = 0\n    for char in s.unicodeScalars\
    \ {\n        if char <= 0x7F {\n            acc += char\n        }\n    }\n  \
    \  return acc", "\treturn digitSumRecursive(s)", "    \n    var sum = 0\n    for\
    \ c in s {\n        if c >= '0' && c <= '9' {\n            sum += Int(c)\n   \
    \     }\n    }\n    return sum", "\tlet letters = [Character]()\n\tvar sum: Int\
    \ = 0\n\tfor (index, value) in s.unicodeScalars.enumerated() {\n\t\tif value >=\
    \ Character('a') && value <= Character('z') {\n\t\t\tsum += value\n\t\t\tletters.append(value)\n\
    \t\t}\n\t}\n\t\n\treturn sum", "    var sum = 0\n    for c in s {\n        sum\
    \ += Int(c) - Int(Character(c))\n    }\n    return sum", "    var result = 0\n\
    \    for index in 0 ..< s.characters.count {\n        if s[index].isUpper { result\
    \ += s[index].value }\n    }\n    return result", "\tlet characters = s.characters\n\
    \n\treturn characters.reduce(0, {$0 + Int($1)})", "    if s == \"\" {\n      \
    \  return 0\n    }\n\n    var sum = 0\n    for character in s {\n        if Character(character).isUpper\
    \ {\n            sum += Character(character).asciiValue\n        }\n    }\n  \
    \  return sum", '    return sum((s.unicodeScalars.filter{ $0.value > 0x30 }).map{
    $0.value })', '    return digits.foldLeft(0) { $0 + $1.value + Int($1.key.unicodeScalars.filter
    { $0.isUpper() })', "    if let s = s.unicodeScalars.first(where: { $0.value >\
    \ 127}), let _ = s.unicodeScalars.first {\n        s.unicodeScalars.first!.value\
    \ + digitSum(s.unicodeScalars.dropFirst())\n    } else {\n        s.unicodeScalars.count\n\
    \    }", '    return s.reversed().characters.reduce(0, { $0 + Int(String($1))
    })', "    var sum = 0\n    for _, b in s.utf8 {\n        let v = UInt8(UInt32(b))\n\
    \        if v > 47 {\n            sum += v - 48\n        }\n    }\n    return\
    \ sum", "    var sum = 0\n\n    for _, b := range s {\n        if b == 'A' {\n\
    \            sum += 65\n        } else if b == 'a' {\n            sum += 97\n\
    \        }\n    }\n    return sum", "  let length = s.characters.count\n  guard\
    \ length > 0 else {\n    return 0\n  }\n  var sum = 0\n  for char in s.characters\
    \ {\n    if char >= '0' && char <= '9' {\n      sum += Int(char) - 48\n    }\n\
    \  }\n  return sum", "\treturn digitSum(s.characters)", '    return sumUpper(s.unicodeScalars.lazy.filter{
    $0.value > 0x41 })', "    var sum = 0\n    var index = 0\n    for c in s.characters\
    \ {\n        sum += Int(c) // in fact, Swift can infer that the type is UInt,\
    \ and we know that char is a UInt8\n        index += 1\n    }\n    return sum",
  "    var result = Int()\n    var len = s.characters.count\n    for i in 0 ..< len\
    \ {\n        let c = s.characters[i]\n        if c >= 'a' && c <= 'z' {\n    \
    \        result += Int(c) - Int('a') + 10\n        } else {\n            result\
    \ += Int(c)\n        }\n    }\n    return result", "\tvar result = 0\n\n\tfor\
    \ c in s {\n\t\tif c.isUpper() {\n\t\t\tresult += Int(c.unicodeScalarValue)!\n\
    \t\t}\n\t}\n\treturn result", "  var total = 0\n  for letter in s.unicodeScalars\
    \ {\n    if letter.value > 128 {\n      return total\n    }\n    total += letter.value\n\
    \  }\n  return total", '    return sum(digits(s))', "    var sum = 0\n    unicodeScalars.forEach\
    \ { unicodeValue in\n        if unicodeValue.value > 0xFF {\n            sum +=\
    \ unicodeValue.value\n        } else {\n            sum += unicodeValue.value.toInt()\n\
    \        }\n    }\n    return sum", "    let length = s.length\n    var sum =\
    \ 0\n    for i in 0 ..< length {\n        let code = s.codeUnitAtIndex(i, in:\
    \ s.startIndex).intValue\n        sum += code - (code > 90 ? code - 91 : code)\n\
    \    }\n    return sum", "\tvar result : Int = 0\n\tfor _, b := range s {\n\t\t\
    if b >= '0' && b <= '9' {\n\t\t\tresult = result + b - '0'\n\t\t}\n\t}\n\treturn\
    \ result", "    let chars = s.characters.map { $0 }\n    var sum = 0\n    for\
    \ c in chars {\n        if c >= '0' && c <= '9' {\n            sum += Int(c)\n\
    \        }\n    }\n    return sum", '    return s.filter({ $0 >= "A" && $0 <=
    "Z" }).map({ Int($0) }).reduce({ $0 + $1 })', "\treturn s.map({ $0.unicodeScalars.filter\
    \ { $0.value > 0 }.fold(0, +) })", "    var result = Int(0)\n    for c in s.characters\
    \ {\n        let code = Int(c)\n        switch code {\n        case 48...57:\n\
    \            result += code\n        default:\n            break\n        }\n\
    \    }\n    return result", "    let alphabet = string.UnicodeScalarView(s).characters\n\
    \    var sum = 0\n    for index in 0..<alphabet.count {\n        let s = alphabet[index]\n\
    \        var upper = 0\n        if s != \"a\" {\n            upper = s.value -\
    \ 64\n        }\n        sum += upper\n    }\n    return sum", "    if s.isEmpty\
    \ {\n        return 0\n    }\n    var sum = 0\n    for c in s.characters {\n \
    \       sum += Int(Character(c).UnicodeScalars.value)\n    }\n    return sum",
  "    guard let unicodeScalars = s.unicodeScalars else {\n        return 0\n    }\n\
    \    var sum: Int = 0\n    unicodeScalars.forEach { unichar in\n        if let\
    \ higherCode = unichar.value > 0x4F { // Uppercase\n            sum += unichar.value\n\
    \        }\n    }\n    return sum", "  let result = s.characters.reduce(0,\n \
    \   { return $0 + Int($1) })\n  return result", "    return s.filter { UInt8(UnicodeScalar($0).value)\
    \ }\n        .map { UnicodeScalar($0).value }\n        .fold(0, { $0 + $1 })",
  "    if s == \"\" {\n        return 0\n    }\n    var sum = 0\n    var cur = 0\n\
    \    for x in s {\n        if x.isUpper() {\n            cur += x.unicodeScalars.reduce(0,combine:\
    \ +) * x.unicodeScalars.reduce(0,combine: +)\n        }\n        else {\n    \
    \        cur += x.unicodeScalars.reduce(0,combine: +)\n        }\n        if cur\
    \ > 9 {\n            sum += cur - 10\n            cur = 0\n        }\n    }\n\
    \    return sum", '    return s.reduce(0, {$0 + $1}).prefix(5)', "    var result\
    \ = Int(0);\n\n    for c in s.characters {\n        let value = c - '0';\n   \
    \     if value < 10 && value > 0 {\n            result += value;\n        }\n\
    \    }\n\n    return result", '    return digitSum(s.characters)', '    return
    digitSum(s.charactersIterator.map(String.UnicodeScalarView.init))', "    var sum\
    \ = 0\n    for c in s.characters {\n        if c.isUpper() {\n            sum\
    \ += c.asciiValue\n        }\n    }\n    return sum", "\tlet chars = s.characters\n\
    \treturn chars.reduce(0){ $0 + Int(Character($0).unicodeScalars.last!.value -\
    \ 48) }", "\treturn s.reduce(0, combine: +)", "    // TODO: Your code here\n \
    \   var sum = 0\n    for _ in s.characters {\n        sum += Int(_)\n    }\n \
    \   return sum", "    var sum = 0\n    for i : Int in\n            s.unicodeScalars.filter\
    \ { UnicodeScalar(Int($0)) != UnicodeScalar(0) }.map {\n                sum +=\
    \ UnicodeScalar(Int($0)) }\n    return sum", "\tlet length = s.characters.count\n\
    \tvar sum = 0\n\tfor index in 0..<length {\n\t\tif let _ = s.character(at: index)\
    \ {\n\t\t\tsum += Int(s.character(at: index))\n\t\t}\n\t}\n\treturn sum", "  \
    \  var sum = 0\n    for i : Character  in s {\n        sum += Int(i)\n    }\n\
    \    return sum", "\tvar result = 0\n\tfor i := 0; i < len(s); i++ {\n\t\tresult\
    \ += (s[i]) - '0'\n\t}\n\treturn result"]
stop_tokens:
- "\n}"
