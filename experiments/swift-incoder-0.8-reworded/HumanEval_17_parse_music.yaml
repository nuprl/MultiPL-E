name: HumanEval_17_parse_music
language: swift
prompt: "\n/// Input to this function is a string representing musical notes in a\
  \ special ASCII format.\n/// Your task is to parse this string and return array\
  \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
  \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts\
  \ two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
  \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc\
  \ parse_music(music_string: String) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_music(music_string: \"\") == [] as\
  \ [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
  \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .|\
  \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"\
  o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
completions: ["    var notes = [Int]()\n\n    for n in music_string.unicodeScalars.reversed()\
    \ {\n        var current_beat = 1\n\n        switch n {\n        case \"o\":\n\
    \            current_beat = 4\n        case \"o|\":\n            current_beat\
    \ = 2\n        default:\n            current_beat = 1\n        }\n\n        notes.append(current_beat)\n\
    \    }\n\n    return notes", "    var beats_array = [Int]()\n    music_string.removeAll()\n\
    \    \n    if music_string.characters.count == 0 {\n        return beats_array\n\
    \    }\n    \n    var last_beat = 0\n    \n    var prev_note_character: Character?\n\
    \    var notes_index = 0\n    var notes_length = music_string.characters.count\n\
    \    \n    while notes_index < notes_length {\n        var note_string: String\
    \ = String(music_string.characters[notes_index])\n        note_string = note_string.lowercased()\n\
    \        note_string = note_string.trimmingCharacters(in: .whitespaces)\n    \
    \    note_string = note_string.trimmingCharacters(in: .punctuationCharacters)\n\
    \        note_string = note_string.trimmingCharacters(in: .symbols)\n        \n\
    \        switch note_string.first {\n        case \"o\":\n            last_beat\
    \ = 12\n        case \"o|\":\n            last_beat = 12\n        case \".|\"\
    :\n            last_beat = 1\n        default:\n            beats_array.append(last_beat)\n\
    \            notes_index += 1\n            last_beat = 0\n            continue\n\
    \        }\n        notes_index += 1\n    }\n    beats_array.append(last_beat)\n\
    \    \n    return beats_array", "    let notes = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4,\
    \ 4]\n    let stringToBeats = music_string.split(\" \").map { $0.capitalized }\n\
    \    var beats = notes\n    for i in 1...stringToBeats.count {\n        beats[i]--\n\
    \    }\n    return beats", "    let music_chars = music_string.characters.split\
    \ { $0 != \"o\" }.map { String($0) }\n    var output = [Int](repeating: 0, count:\
    \ music_chars.count)\n    var beats = 0\n    for char in music_chars {\n     \
    \   let beat = beats.toInt()\n        switch char {\n        case \"o\":\n   \
    \         output[beats] += 1\n        case \"o|\":\n            output[beats]\
    \ += 2\n        case \"..\":\n            output[beats] += 4\n        default:\n\
    \            output[beats] += 4\n        }\n        beats += 1\n    }\n    return\
    \ output", "    // TODO: parse music_string and return the array of beats\n  \
    \  // Do not write main() function.\n    // Read input from STDIN (standard input)\n\
    \    // var music_string = readLine()!\n    // var music_string = readString()!\n\
    \    \n    return Array<Int>(repeating: 0, count: 6)", "    var total_notes =\
    \ 0\n    guard let notes = music_string.components(separatedBy: \" \") else {\
    \ return [] }\n    for note in notes {\n        if note.contains(\"o|\") {\n \
    \           total_notes += 1\n        } else if note.contains(\"o\") {\n     \
    \       total_notes += 1\n        } else if note.contains(\".|\") {\n        \
    \    total_notes += 1\n        }\n    }\n    return total_notes", "    var count\
    \ = [Int]()\n    let notes = music_string.components(separatedBy: \" \")\n   \
    \ for i in 0..<notes.count {\n        switch notes[i] {\n        case \"o\":\n\
    \            count[0] += 1\n        case \"o|\":\n            count[1] += 1\n\
    \        case \".|\":\n            count[2] += 1\n        default:\n         \
    \   fatalError(\"Incorrect note name '\\(notes[i])'\")\n        }\n    }\n   \
    \ return count", "    \n    // 1. Convert string to array: [string, ..]\n    var\
    \ notes = [String]()\n    for c in music_string {\n        if c == \"o\" {\n \
    \           notes.append(c)\n        } else if c == \"|\" {\n            notes.append(c)\n\
    \        } else {\n            notes.append(c)\n        }\n    }\n    \n    //\
    \ 2. Go through array: [string, ..]\n    var notes_beats: [String: [Int]] = [String:\
    \ [Int]]()\n    for note_index in 0..<notes.count {\n        // 2.1 Split string\
    \ by white space and create array of notes: [string]\n        let note_string\
    \ = notes[note_index]\n        let note_array = note_string.components(separatedBy:\
    \ \" \")\n        \n        // 2.2 Split note string by white space and create\
    \ array of beats: [string, ..]\n        let note_string_beats = [String]()\n \
    \       for c in note_array {\n            if c == \"o\" {\n                note_string_beats.append(c)\n\
    \            } else if c == \"|\" {\n                note_string_beats.append(c)\n\
    \            } else {\n                note_string_beats.append(c)\n         \
    \   }\n        }\n        \n        // 2.3 Convert beats array to [int, ..]\n\
    \        let beats = [Int]()\n        for c in note_string_beats {\n         \
    \   if c == \"|\" {\n                beats.append(1)\n            } else {\n \
    \               beats.append(0)\n            }\n        }\n        \n        //\
    \ 2.4 Append to array\n        notes_beats[note_string] = beats\n    }\n    \n\
    \    // 3. Go through array: [string, ..] and return [int, ..] of beats for each\
    \ note\n    var beats_for_all_notes: [Int: [Int]] = [:]\n    for note_index in\
    \ 0..<notes.count {\n        // 3.1 Get string from array - note\n        let\
    \ note_string = notes[note_index]\n        \n        // 3.2 Get array of beats\n\
    \        let note_string_beats = notes_beats[note_string]!\n        \n       \
    \ // 3.3 Create array of beats\n        let beats = [Int]()\n        for c in\
    \ note_string_beats {\n            if c == \"|\" {\n                beats.append(1)\n\
    \            } else {\n                beats.append(0)\n            }\n      \
    \  }\n        \n        // 3.4 Append to array\n        beats_for_all_notes[note_string]\
    \ = beats\n    }\n    \n    // 4. Convert array to array of ints: [int, ..]\n\
    \    var beats_for_all_notes_ints: [Int: [Int]] = [:]\n    for note_index in 0..<notes.count\
    \ {\n        // 4.1 Get string from array - note\n        let note_string = notes[note_index]\n\
    \        ", "    var beats = Array<Int>()\n    var beat = 0\n    var last = 0\n\
    \    var index = 0\n\n    if music_string.count < 1 {\n        return beats\n\
    \    }\n\n    for index in 0..<music_string.count {\n        let char = music_string[index]\n\
    \n        if char == \"o\" {\n            if beat < 3 {\n                beats[beat]\
    \ = 1\n                beat += 1\n                last = 0\n            }\n  \
    \      } else if char == \"|\" {\n            if beat < 3 {\n                beats[beat]\
    \ = 2\n                beat += 1\n                last = 0\n            } else\
    \ if last == 0 {\n                beats[beat] = 1\n                beat += 1\n\
    \            } else {\n                beats[beat] = 1\n                beat +=\
    \ 1\n            }\n            last = 1\n        } else if char == \".\" {\n\
    \            if last == 1 {\n                beats[beat] = 1\n               \
    \ beat += 1\n            } else {\n                beats[beat] = 2\n         \
    \       beat += 1\n            }\n            last = 0\n        }\n    }\n\n \
    \   return beats", "    var beats: [Int] = []\n    var length: Int = 0\n    for\
    \ symbol in music_string {\n        // find last symbol\n        switch symbol\
    \ {\n        case \"o\":\n            length += 1\n            beats.append(length)\n\
    \        case \"|\":\n            length += 1\n            beats.append(length)\n\
    \        default:\n            length = 0\n        }\n    }\n    return beats",
  "    guard let music_array = music_string.components(separatedBy: \" \") else {\n\
    \        fatalError(\"music string is not valid\")\n    }\n    var beat_count\
    \ = [Int]()\n    for music in music_array {\n        let music_character = music.trim()\n\
    \        if let music_character = music_character.unicodeScalars.first?.value\
    \ {\n            var beats = 0\n            switch music_character {\n       \
    \     case 'o': // whole note\n                if music_character == '.' {\n \
    \                   beats = 4\n                }\n            default:\n     \
    \           beats = music_character - '0' + 1\n            }\n            beat_count[beats\
    \ - 1] += 1\n        }\n    }\n    return beat_count", "    if music_string ==\
    \ \"\" { return [] }\n    var notes_beat_count = 0\n    var music_chars = music_string.characters\n\
    \    for _ in 0..<music_chars.count {\n        guard let music_char = music_chars.next()\
    \ else { break }\n        if music_char == 'o' {\n            notes_beat_count\
    \ += 4\n        } else if music_char == 'o|' {\n            notes_beat_count +=\
    \ 2\n        } else if music_char == '.|' {\n            notes_beat_count += 1\n\
    \        } else if music_char == '.{' {\n            notes_beat_count -= 1\n \
    \       } else {\n            notes_beat_count += 1\n        }\n    }\n    return\
    \ notes_beat_count", "    var total = 0\n\n    for c in music_string {\n     \
    \   switch c {\n        case \"o\":\n            total += 4\n        case \"o|\"\
    :\n            total += 2\n        case \".|\":\n            total += 1\n    \
    \    }\n    }\n\n    return Array(repeating: total, count: music_string.count)\
    \ / 4", "    var beat_number: [Int] = []\n    var current_position = 0\n    var\
    \ current_note = music_string[current_position]\n    beat_number.append(0)\n\n\
    \    while current_position < music_string.count {\n        if current_note ==\
    \ \"o\" {\n            beat_number.append(4)\n            current_position +=\
    \ 2\n        } else if current_note == \"o|\" {\n            beat_number.append(2)\n\
    \            current_position += 2\n        } else if current_note == \".|\" {\n\
    \            beat_number.append(1)\n            current_position += 2\n      \
    \  } else {\n            let note_number = map[current_note]!\n            beat_number.append(note_number)\n\
    \            current_position += note_number\n        }\n        current_note\
    \ = music_string[current_position]\n    }\n\n    return beat_number", "\t", " \
    \   var beats: [Int] = []\n    var notes: [String] = []\n    for s in music_string.split(\"\
    \ \") {\n        if s.count <= 1 { continue }\n        switch s[0] {\n       \
    \ case \"o\":\n            notes.append(String(s.dropFirst()))\n        case \"\
    o|\":\n            notes.append(String(s.dropFirst()))\n        default:\n   \
    \         notes.append(String(s))\n        }\n    }\n    for note in notes {\n\
    \        let note_length = note.count - 1\n        var beats_to_last = 0\n   \
    \     switch note.first {\n        case \"o\":\n            beats_to_last = note_length\n\
    \        case \"o|\":\n            beats_to_last = note_length * 2\n        default:\n\
    \            beats_to_last = note_length * 4\n        }\n        beats.append(beats_to_last)\n\
    \    }\n    return beats", "    var beats_per_note = [Int](repeating: 0, count:\
    \ 4)\n    var notes = music_string.unicodeScalars.filter { $0.value > 0 }\n\n\
    \    var beat = 0\n    var note = 0\n\n    for note in notes {\n        var index\
    \ = note.value - 64\n        beats_per_note[index] += 1\n        if (index ==\
    \ 2 || index == 3) && !(beat % 4 == 0) {\n            beat += 1\n        }\n \
    \   }\n    return beats_per_note", "    // Your code here\n    var beats_per_note:\
    \ [Int] = [0]\n    var notes: [String] = music_string.split(separator: \" \")\n\
    \    \n    for note in notes {\n        switch note {\n        case \"o\":\n \
    \           beats_per_note.append(4)\n        case \"o|\":\n            beats_per_note.append(2)\n\
    \        case \"o|\":\n            beats_per_note.append(1)\n        default:\n\
    \            beats_per_note.append(0)\n        }\n    }\n    return beats_per_note",
  "    var result: [Int] = []\n    var beat_counter = 0\n    let char_array = music_string.unicodeScalars.map({\
    \ $0.value })\n    for char in char_array {\n        beat_counter += char == \"\
    o\" ? 4 : 2 if char == \"|\" ? 1 : 0\n        result.append(beat_counter)\n  \
    \  }\n    return result", "    var music_array: [Int] = []\n    var beats = 0\n\
    \    for character in music_string {\n        if character == \"o\" {\n      \
    \      music_array += [4]\n            beats += 4\n        } else if character\
    \ == \"|\" {\n            music_array += [2, 2, 1]\n            beats += 2\n \
    \       } else if character == \".\" {\n            music_array += [1]\n     \
    \       beats += 1\n        } else {\n            music_array += [0]\n       \
    \     beats += 1\n        }\n    }\n    return music_array", "    var beat_count\
    \ = 0\n\n    // Split the string into chunks of musical notes\n    var music_chunks:\
    \ [[String]] = [[]]\n    for (index, note) in music_string.enumerated() {\n  \
    \      // Split notes into \"whole note\", \"half note\", \"quater note\" and\
    \ chords (\"a b|\")\n        guard note.contains(\"|\") else { break }\n     \
    \   var notes = note.components(separatedBy: \"|\")\n        let chords = notes.dropFirst()\n\
    \        notes = notes.first!\n        // If this is a whole note, save the chunk\n\
    \        if notes.contains(\"o\") {\n            let current_chunk = music_chunks[index]\
    \ ?? []\n            music_chunks[index] = current_chunk + [notes]\n         \
    \   beat_count += current_chunk.count\n        // If this is a half note, save\
    \ the chunk\n        } else if notes.contains(\"o|\") {\n            let current_chunk\
    \ = music_chunks[index] ?? []\n            music_chunks[index] = current_chunk\
    \ + [notes]\n            beat_count += current_chunk.count\n        // If this\
    \ is a quater note, save the chunk\n        } else if notes.contains(\".\") {\n\
    \            let current_chunk = music_chunks[index] ?? []\n            music_chunks[index]\
    \ = current_chunk + [notes]\n            beat_count += current_chunk.count\n \
    \       } else {\n            guard let current_chunk = music_chunks[index] else\
    \ { return beat_count }\n            beat_count = current_chunk.count + beat_count\n\
    \        }\n    }\n\n    // Iterate over the musical chunks\n    var beats = 0\n\
    \    for chunk in music_chunks {\n        beats = chunk.count + beats\n    }\n\
    \n    // Remove the extra musical notes\n    return music_chunks.map { chunk ->\
    \ Int in\n        beats - chunk.count\n    }", "    let mut beats_per_note = [0,\
    \ 0, 0]\n    let notes = music_string.characters.split(\" \").map(|x| x[0]);\n\
    \    notes.enumerate().for_each(|(_, note)| {\n        note.split(\"\").enumerate().for_each(|(_,\
    \ n)| {\n            if n.is_ascii_digit() {\n                beats_per_note[n.to_ascii_digit()]\
    \ +=\n                    note.count(char::is_ascii_digit).map(|x| x).unwrap_or(0);\n\
    \            }\n        })\n    });\n    beats_per_note.iter().for_each(|x| {\n\
    \        *x = x.max(4).min(12);\n    });\n    beats_per_note.iter().for_each(|x|\
    \ {\n        *x = x.max(4).min(12);\n    });\n    beats_per_note.iter().for_each(|x|\
    \ {\n        *x = x.max(4).min(12);\n    });\n    beats_per_note.iter().for_each(|x|\
    \ {\n        *x = x.max(4).min(12);\n    });\n    beats_per_note.iter().for_each(|x|\
    \ {\n        *x = x.max(4).min(12);\n    });\n    beats_per_note.iter().for_each(|x|\
    \ {\n        *x = x.max(4).min(12);\n    });\n    return beats_per_note", "  \
    \  \n    var note_count = [Int]()\n    \n    var note = music_string.substringToIndex(music_string.startIndex)\n\
    \    \n    \n    if note.lowercaseString == \"o\" {\n        note_count[0] = 1\n\
    \        note_count[1] = 1\n        note_count[2] = 4\n        note_count[3] =\
    \ 1\n        note_count[4] = 1\n        note_count[5] = 4\n        note_count[6]\
    \ = 1\n        note_count[7] = 4\n        note_count[8] = 1\n        note_count[9]\
    \ = 1\n        note_count[10] = 4\n        note_count[11] = 4\n        note_count[12]\
    \ = 1\n    }\n    else if note.lowercaseString == \"o|\" {\n        note_count[0]\
    \ = 1\n        note_count[1] = 4\n        note_count[2] = 1\n        note_count[3]\
    \ = 1\n        note_count[4] = 4\n        note_count[5] = 1\n        note_count[6]\
    \ = 4\n        note_count[7] = 1\n        note_count[8] = 4\n        note_count[9]\
    \ = 1\n        note_count[10] = 4\n        note_count[11] = 4\n        note_count[12]\
    \ = 1\n    }\n    else if note.lowercaseString == \".|\" {\n        note_count[0]\
    \ = 1\n        note_count[1] = 1\n        note_count[2] = 1\n        note_count[3]\
    \ = 1\n        note_count[4] = 1\n        note_count[5] = 1\n        note_count[6]\
    \ = 1\n        note_count[7] = 4\n        note_count[8] = 1\n        note_count[9]\
    \ = 4\n        note_count[10] = 1\n        note_count[11] = 4\n        note_count[12]\
    \ = 1\n    }\n    else if note.lowercaseString == \"o| o|\" {\n        note_count[0]\
    \ = 1\n        note_count[1] = 4\n        note_count[2] = 4\n        note_count[3]\
    \ = 1\n        note_count[4] = 1\n        note_count[5] = 1\n        note_count[6]\
    \ = 4\n        note_count[7] = 4\n        note_count[8] = 1\n        note_count[9]\
    \ = 1\n        note_count[10] = 4\n        note_count[11] = 1\n        note_count[12]\
    \ = 1\n    }\n    else if note.lowercaseString == \"o| .|\" {\n        note_count[0]\
    \ = 1\n        note_count[1] = 4\n        note_count[2] = 4\n        note_count[3]\
    \ = 1\n        note_count[4] = 1\n        note_count[5] = 1\n        note_count[6]\
    \ = 1\n        note_count[7] = 1\n        note_count[8] = 1\n        note_count[9]\
    \ = 4\n        note_count[10] = 1\n        note_count[11] = 1\n        note_count[12",
  "    var notes_array: [Int] = []\n    var last_char = \"\"\n    var beats_count\
    \ = 0\n    \n    for char in music_string {\n        if char == \"|\" {\n    \
    \        if last_char == \"o\" {\n                notes_array.append(beats_count)\n\
    \            }\n            beats_count = 0\n            last_char = \"\"\n  \
    \      } else {\n            beats_count += 1\n            last_char = char\n\
    \        }\n    }\n    \n    if last_char == \"o\" {\n        notes_array.append(beats_count)\n\
    \    }\n    \n    return notes_array", "    var beats = [Int]()\n    let characters\
    \ = Array(music_string)\n    var i = 0\n    var note = Int()\n\n    guard characters.count\
    \ != 0 else {\n        return beats\n    }\n    guard let lastChar = characters[characters.count\
    \ - 1] else {\n        return beats\n    }\n\n    var notes = [Note]()\n\n   \
    \ func isNote(character: String) -> Bool {\n        let charCode = character.unicodeScalars.reduce(0)\
    \ {$0 + Int($1) + 64}\n        let isNote = CharacterSet.whitespacesAndNewlines.contains(charCode)\n\
    \n        return isNote\n    }\n\n    func isNoteOrNumber(character: String) ->\
    \ Bool {\n        let charCode = character.unicodeScalars.reduce(0) {$0 + Int($1)\
    \ + 64}\n        let isNoteOrNumber = CharacterSet.whitespacesAndNewlines.contains(charCode)\n\
    \        return isNoteOrNumber\n    }\n\n    while i < characters.count {\n  \
    \      if isNote(characters[i + 0]) {\n            notes.append(Note(note, i +\
    \ 0, i + 1, i + 2))\n            note = Int(characters[i + 1])\n            i\
    \ += 3\n        } else if isNoteOrNumber(characters[i + 0]) {\n            if\
    \ note > 0 {\n                notes.append(Note(note, i + 0, i + 1, i + 2))\n\
    \                note = 0\n                i += 2\n            } else {\n    \
    \            notes.append(Note(note, i + 0, i + 1, i + 2))\n                i\
    \ += 3\n            }\n        } else {\n            i += 1\n        }\n    }\n\
    \    beats.append(notes.count)\n    return beats", "  var result: [Int] = []\n\
    \  for note in music_string {\n    if note.isWhitespace {\n      continue\n  \
    \  }\n    switch note {\n    case \"o\":\n      result = append(result, 4)\n \
    \   case \"o|\":\n      result = append(result, 2)\n    default:\n      result\
    \ = append(result, 1)\n    }\n  }\n  return result", "    var beats = [Int]()\n\
    \    var last_beat = 0\n    for note in music_string {\n        if note == \"\
    .\" {\n            if last_beat == 0 {\n                // last note in string\
    \ is not a whole note\n                beats.append(0)\n            } else {\n\
    \                // last note in string is a whole note\n                beats.append(last_beat\
    \ - 1)\n            }\n        } else {\n            beats.append(note.unicodeScalars.count())\n\
    \        }\n        last_beat = beats.last!\n    }\n    return beats", "    //\
    \ TODO: fix this function\n    // write code here\n    let beats_per_note = 4\n\
    \    let song = music_string.split(\" \").map { String($0) }\n    var song_notes:\
    \ [Int] = Array(repeating: 0, count: song.count)\n    for note in song { //loops\
    \ through notes and adds to array\n        switch note {\n        case \"o\":\
    \ song_notes[song.count - 1] = song_notes[song.count - 1] + beats_per_note\n \
    \       case \"o|\": song_notes[song.count - 1] = song_notes[song.count - 1] +\
    \ beats_per_note / 2\n        case \"|\": song_notes[song.count - 1] = song_notes[song.count\
    \ - 1] + beats_per_note\n        default: print(\"Something went wrong\")\n  \
    \      }\n    }\n    return song_notes", "    var result: [Int] = []\n    var\
    \ current_note = \"\"\n    var beat = 0\n    for c in music_string {\n       \
    \ let c = char(c)\n        if c.isWhitespace {\n            continue\n       \
    \ }\n        if c != \"o\" && c != \".\" {\n            if current_note.isEmpty\
    \ {\n                current_note = c\n                beat = 1\n            }\n\
    \            else if current_note == \"o\" {\n                beat = 1\n     \
    \       }\n            else {\n                beat = 0\n            }\n     \
    \   }\n        else {\n            beat += 1\n            if current_note != \"\
    o\" {\n                current_note = \"\"\n            }\n        }\n       \
    \ result.append(beat)\n    }\n    return result", '    return parse_music_helper(music_string,
    0)', "    var beats: [Int] = []\n    var last: Int = 0\n    var notes_cnt = 0\n\
    \    var current_note = notes_cnt % 8\n    let notes = music_string.split(separator:\
    \ \"|\")\n    for note in notes {\n        if note == \".\" {\n            if\
    \ beat_diff(last) == 1 {\n                beats.append(beats_diff(last)!)\n  \
    \          } else {\n                beats.append(beats_diff(last)! * 2)\n   \
    \         }\n            last = 0\n            notes_cnt += 1\n            current_note\
    \ = notes_cnt % 8\n            continue\n        }\n        let new_note = note.split(separator:\
    \ \" \")[0]\n        let last_beat = beats_diff(last)\n        if new_note ==\
    \ \"o\" {\n            if last_beat[0] != last_beat[1] {\n                beats.append(beats_diff(last)!)\n\
    \                last = 0\n                notes_cnt += 1\n                current_note\
    \ = notes_cnt % 8\n                continue\n            }\n        } else if\
    \ new_note == \"o|\" {\n            if last_beat[0] != last_beat[2] {\n      \
    \          beats.append(beats_diff(last)!)\n                last = 0\n       \
    \         notes_cnt += 1\n                current_note = notes_cnt % 8\n     \
    \           continue\n            }\n        } else if new_note == \"o\" {\n \
    \           if last_beat[0] != last_beat[3] {\n                beats.append(beats_diff(last)!)\n\
    \                last = 0\n                notes_cnt += 1\n                current_note\
    \ = notes_cnt % 8\n                continue\n            }\n        } else if\
    \ new_note == \"o|\" {\n            if last_beat[0] != last_beat[4] {\n      \
    \          beats.append(beats_diff(last)!)\n                last = 0\n       \
    \         notes_cnt += 1\n                current_note = notes_cnt % 8\n     \
    \           continue\n            }\n        } else if new_note == \"o|\" {\n\
    \            if last_beat[0] != last_beat[5] {\n                beats.append(beats_diff(last)!)\n\
    \                last = 0\n                notes_cnt += 1\n                current_note\
    \ = notes_cnt % 8\n                continue\n            }\n        } else if\
    \ new_note == \"o\" {\n            if last_beat[0] != last_beat[6] {\n       \
    \         beats.append(beats_diff(last)!)\n                last = 0\n        \
    \        notes_cnt += 1\n                current_note = notes_cnt % 8\n      \
    \          continue\n            }\n        } else if new_note == \"o|\" {\n \
    \           if last_beat[0] != last_beat[7] {\n                beats.append(beats_diff(last)!)\n\
    \                last = 0\n                notes_cnt += 1\n                current_note\
    \ = notes_cnt % 8\n                continue\n            }\n        } else {\n\
    \            fatalError()\n        }", "    var beatsSum: [Int] = [0]\n\n    var\
    \ notes: [String] = []\n\n    let pattern = try! NSRegularExpression(pattern:\
    \ \"o|.|o|\")\n\n    var range: NSRange = NSMakeRange(0, 0)\n    var match: NSTextCheckingResult?\n\
    \    while true {\n        range = pattern.rangeOfFirstMatchInString(music_string,\
    \ options: .BackwardsSearch, range: range)\n        match = pattern.firstMatchInString(music_string,\
    \ options: .BackwardsSearch, range: range)\n        if match?.numberOfRanges ==\
    \ 0 {\n            break\n        }\n\n        if match?.numberOfRanges > 1 {\n\
    \            notes.append(music_string.substringWithRange(range))\n          \
    \  beatsSum.append(4)\n        } else {\n            notes.append(music_string.substringWithRange(range))\n\
    \            beatsSum.append(1)\n        }\n\n        range = NSMakeRange(range.location\
    \ + range.length, range.length)\n    }\n\n    return beatsSum", "    return music_string\n\
    \        .split(separator: \"|\")\n        .map({ $0.split(separator: \"o\")\n\
    \            .map({ $0.characters.count })\n            .sum() })", "    let split\
    \ = music_string.split(separator: \"|\")\n    var beats = [Int]()\n    for note\
    \ in split {\n        let beat = note.split(separator: \" \")[0]\n        if beat.count\
    \ > 0 {\n            beats.append(Int(beat))\n        }\n    }\n    return beats",
  '    return parse_music_helper(music_string, 0)', "    if music_string == \"\" {\n\
    \        return []\n    }\n\n    let notes = music_string.components(separatedBy:\
    \ \" \").map { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n    var beats\
    \ = [Int]()\n\n    for note in notes {\n        let length = note.count\n    \
    \    var last = 0\n\n        switch (note.first!) {\n        case \"o\":\n   \
    \         for _ in 0..<length { last += 1 }\n            break\n        case \"\
    o|\":\n            for _ in 0..<length { last += 2 }\n            break\n    \
    \    case \".|\":\n            for _ in 0..<length { last += 4 }\n           \
    \ break\n        default:\n            break\n        }\n\n        beats.append(last)\n\
    \    }\n\n    return beats", "    let music_notes: [String] = music_string.components(separatedBy:\
    \ \" \")\n\n    let beats_per_note = Int((music_notes.count - 1)/4)\n\n    let\
    \ notes = music_notes.enumerated().map({ $0.element })\n    \n    var note_string\
    \ = \"\"\n    \n    for note in notes {\n        if note == \"o\" {\n        \
    \    note_string += \"0\"\n        } else if note == \"o|\" {\n            note_string\
    \ += \"1\"\n        } else if note == \".|\" {\n            note_string += \"\
    2\"\n        } else {\n            fatalError(\"unknown note letter!\")\n    \
    \    }\n    }\n\n    var beat_string = \"\"\n    \n    for i in 0..<music_notes.count\
    \ {\n        beat_string = beat_string.characters[Int((i + 1)/4)].uppercased()\n\
    \    }\n\n    let beats = beat_string.characters\n\n    var beat_count: [Int]\
    \ = [0, 0, 0, 0, 0]\n\n    for i in 0..<note_string.characters.count {\n     \
    \   beat_count[Int(note_string[Int(i)]) - 48] = beat_count[Int(note_string[Int(i)])\
    \ - 48] + 1\n    }\n\n    var last_beats: Int = 0\n    \n    for i in 0..<beats.count\
    \ {\n        last_beats = beat_count[Int(beats[i]) - 48]\n    }\n\n    return\
    \ Array(repeating: last_beats, count: music_notes.count/4).map { _ in 0 }", " \
    \ var music = [Int]()\n  for _ in 0..<len(music_string) {\n    let note = music_string.substring(from:\
    \ 0, to: music_string.index(before: music_string.endIndex, offsetBy: 1))\n   \
    \ switch note {\n    case \"o\":\n      music.append(4)\n    case \"o|\":\n  \
    \    music.append(2)\n    default:\n      music.append(1)\n    }\n  }\n  return\
    \ music", "    var notes = [Int]()\n    \n    let music_string_length = music_string.count\n\
    \    \n    let music_string_lowercase = music_string.lowercased()\n    \n    for\
    \ i in 0..<music_string_length { // For each note\n        \n        let first_char\
    \ = music_string_lowercase[i]\n        \n        if first_char == \"o\" { // If\
    \ this is the first note of the chord\n            notes.append(4)\n         \
    \   \n            if music_string_length > i + 1 {\n                \n       \
    \         let second_char = music_string_lowercase[i + 1]\n                \n\
    \                if second_char == \"|\" || second_char == \"o\" {\n         \
    \           notes.append(2)\n                }\n            }\n        }\n   \
    \     else if first_char == \"o\" { // If this second note of the chord\n    \
    \        notes.append(1)\n            \n            if music_string_length > i\
    \ + 1 {\n                \n                let second_char = music_string_lowercase[i\
    \ + 1]\n                \n                if second_char == \"|\" || second_char\
    \ == \"o\" {\n                    notes.append(1)\n                }\n       \
    \     }\n        }\n        else if first_char == \".\" { // If this is the first\
    \ half note of the chord\n            notes.append(2)\n            \n        \
    \    if music_string_length > i + 1 {\n                \n                let second_char\
    \ = music_string_lowercase[i + 1]\n                \n                if second_char\
    \ == \"|\" || second_char == \"o\" {\n                    notes.append(2)\n  \
    \              }\n            }\n        }\n        else if first_char == \"|\"\
    \ { // If this is the second half note of the chord\n            notes.append(1)\n\
    \            \n            if music_string_length > i + 1 {\n                \n\
    \                let second_char = music_string_lowercase[i + 1]\n           \
    \     \n                if second_char == \"|\" || second_char == \"o\" {\n  \
    \                  notes.append(1)\n                }\n            }\n       \
    \ }\n    }\n    \n    return notes", "    // TODO: fill this function\n    return\
    \ []", "    // Initialize empty array of notes\n    var notes = [Int]()\n\n  \
    \  // Iterate through string and use if conditions to detect different types of\
    \ notes\n    for letter in music_string {\n        if letter == \".\" {\n    \
    \        notes.append(1)\n        } else if letter == \"|\" {\n            notes.append(2)\n\
    \        } else if letter == \"o\" {\n            notes.append(4)\n        } else\
    \ {\n            // If note is unrecognized, just append an empty note to array\
    \ and continue\n            notes.append(0)\n        }\n    }\n    return notes",
  "    var notes = [Int]()\n    var notes_count = [Int]()\n    var notes_last_beat\
    \ = [Int]()\n    for character in music_string {\n        if character == \"o\"\
    \ {\n            notes.append(0)\n            notes_count.append(0)\n        \
    \    notes_last_beat.append(0)\n        } else if character == \"|\" {\n     \
    \       notes_count.append(0)\n            notes_last_beat.append(0)\n       \
    \ } else {\n            notes_last_beat[notes_count.index(notes_count.count -\
    \ 1) + 1] += 1\n            notes_last_beat[notes_count.index(notes_count.count\
    \ - 1) + 3] += 1\n            notes_last_beat[notes_count.index(notes_count.count\
    \ - 1) + 5] += 1\n            if character == \" \" {\n                notes_count.append(0)\n\
    \            } else {\n                notes_count[notes_count.index(notes_count.count\
    \ - 1) + 1] += 1\n            }\n        }\n    }\n    return notes", "    let\
    \ notes = music_string.unicodeScalars.filter({ $0.isLetter })\n    let notes_count\
    \ = notes.count\n    let beats_per_note = 4\n    let notes_per_beat = notes_count\
    \ / beats_per_note\n    let notes_per_quarter = notes_count / 3\n    guard notes_count\
    \ >= 3 else { return [0] }\n\n    var notes_per_beats: [Int] = []\n    notes_per_beats.append(notes_per_beat)\n\
    \    if notes_per_quarter != 0 {\n        notes_per_beats.append(notes_per_quarter)\n\
    \    }\n\n    var beats_per_notes: [Int] = []\n    beats_per_notes.append(beats_per_note)\n\
    \    if notes_per_beat != 0 {\n        beats_per_notes.append(beats_per_note)\n\
    \    }\n\n    var beats_to_last: [Int] = []\n    for _ in 0..<notes_count {\n\
    \        let note_beat = notes.randomElement()\n        if note_beat.value ==\
    \ notes_per_beat {\n            beats_to_last.append(beats_per_note)\n       \
    \ } else {\n            beats_to_last.append(beats_per_notes[beats_to_last.count\
    \ - 1])\n        }\n    }\n\n    return beats_to_last", "    var beats = [Int]()\n\
    \    var notes = [Int]()\n    var index = 0\n    let notes_count = music_string.characters.count\n\
    \    for c in music_string {\n        if index > notes_count {\n            break\n\
    \        }\n        switch c {\n        case \"o\":\n            beats.append(4)\n\
    \            notes.append(0)\n        case \"|\":\n            beats.append(2)\n\
    \            notes.append(0)\n        default:\n            beats.append(1)\n\
    \            notes.append(0)\n        }\n        index += 1\n    }\n    return\
    \ beats", "    var notes: String = music_string\n    var beat: Int = 1\n    var\
    \ beatCounts = [Int]()\n    var currentNote = \"\"\n    for ch in notes {\n  \
    \      if ch == \"|\" {\n            beatCounts.append(beat)\n            beat\
    \ = 1\n        }\n        if ch == \"o\" {\n            beatCounts.append(beat)\n\
    \            beat = 1\n            currentNote = \"o\"\n        } else {\n   \
    \         beat = 1\n            if currentNote == \"o\" {\n                currentNote\
    \ = \"\"\n                beatCounts.append(beat)\n            } else {\n    \
    \            beatCounts.append(beat)\n            }\n        }\n    }\n    return\
    \ beatCounts", "    var beats_per_note = [0]\n    var beats_numbers = [Int]()\n\
    \    var beats_index = 0\n    var last_note_index = 0\n    var last_note = Int()\n\
    \n    for note in music_string {\n        switch note {\n        case \"o\":\n\
    \            beats_per_note[0] += 4\n        case \"o|\":\n            beats_per_note[0]\
    \ += 2\n        case \"..\":\n            beats_per_note[0] += 1\n        default:\n\
    \            if last_note_index > 0 {\n                beats_numbers.append(beats_index)\n\
    \            }\n            last_note = Int(note)\n            last_note_index\
    \ += 1\n            beats_per_note[0] = 1\n        }\n    }\n    beats_numbers.append(beats_index)\n\
    \    return beats_numbers", "    if music_string == \"\" {\n        return []\n\
    \    }\n    var result: [Int] = [0]\n    var beat = 0\n    var note = \"\"\n \
    \   var beats_count = 0\n    for character in music_string {\n        if character\
    \ == \".\" {\n            beats_count += 1\n            if beats_count % 4 ==\
    \ 0 {\n                result.append(beat)\n            }\n            beat =\
    \ 0\n            note = \"\"\n        }\n        if character == \"o\" {\n   \
    \         beats_count += 1\n            if beats_count % 4 == 0 {\n          \
    \      result.append(beat)\n            }\n            beat = 0\n            note\
    \ = \"o\"\n        }\n        if character == \"|\" {\n            beats_count\
    \ += 1\n            if beats_count % 2 == 0 {\n                result.append(beat)\n\
    \            }\n            beat = 0\n            note = \"|\"\n        }\n  \
    \      if character == \" \" {\n            beats_count = 0\n        }\n     \
    \   if character == \"o\" {\n            beat += 1\n            beats_count =\
    \ 0\n        }\n        if character == \"|\" {\n            beat += 1\n     \
    \       beats_count = 0\n        }\n        if character == \" \" {\n        \
    \    beats_count = 0\n        }\n        if character == \"o\" {\n           \
    \ beat += 1\n            beats_count = 0\n        }\n    }\n    return result",
  "    let music_array = music_string.split(separator: \" \")\n    let notes = music_array.map\
    \ { $0.isEmpty ? nil : \"o|\".contains($0) ? 4 : 2 }\n    return notes.map { notes_into_beats(note:\
    \ $0, beats: $1) }", "    var beats: [[Int]] = Array(0...4).map { Array(repeating:\
    \ 0, count: 4) }\n    var notes = [Int]()\n    var current_note = 0\n    var current_beat\
    \ = 0\n    for note_index in 0..<music_string.characters.count {\n        guard\
    \ let current_char = music_string[note_index] else { return beats }\n        switch\
    \ current_char {\n        case \"o\": notes.append(current_note); current_note\
    \ = 0\n        case \"|\": notes.append(current_note); current_note = 1\n    \
    \    case \".\": notes.append(current_note); current_note = 2\n        default:\
    \ break\n        }\n        current_beat += notes[current_note]!\n    }\n    return\
    \ beats", "    var beats = 0\n    var beats_so_far = 0\n    var current_note =\
    \ 0\n    var note_length = 0\n    var note_length_to_beats_conversion = Int64()\n\
    \    var notes_to_beats_conversion = Int64()\n\n    for i in 0..<music_string.characters.count\
    \ {\n        let character = music_string.characters[i]\n        notes_to_beats_conversion\
    \ = Int(notes_to_beats_conversion * 12 + character)\n    }\n\n    notes_to_beats_conversion\
    \ = Int(notes_to_beats_conversion * 12 + Int64(1))\n    for i in 0..<notes_to_beats_conversion\
    \ {\n        note_length = notes_to_beats_conversion - i\n        note_length_to_beats_conversion\
    \ = note_length / (Int64(4) * Int64(60))\n        if i < note_length {\n     \
    \       beats += Int(note_length_to_beats_conversion)\n        }\n    }\n\n  \
    \  return beats", "    var notes: [Int] = [0]\n    var last = [0, 4]\n    for\
    \ char in music_string.unicodeScalars {\n        switch char {\n        case .o:\n\
    \            notes.append(notes.count + 1)\n        case .o:\n            last\
    \ = last.map({$0 + 1}).filter({$0 == last[0]}).last\n        default:\n      \
    \      last = last.map({$0 - 1}).filter({$0 == last[0]}).last\n        }\n   \
    \ }\n    return notes", "    // Create an empty array to store the results\n \
    \   var notes = [Int]()\n\n    // Iterate over all the characters in the string\
    \ and count how many times each note appears\n    for note in music_string {\n\
    \        if note.isWhiteSpace {\n            // Ignore white spaces\n        \
    \    continue\n        }\n\n        let note_char = note.asDigit()\n\n       \
    \ if note.asDigit() == \"o\" {\n            // Count how many whole notes there\
    \ are in the string\n            notes.append(1)\n        } else if note.asDigit()\
    \ == \"o|\" {\n            // Count how many half notes there are in the string\n\
    \            notes.append(2)\n        } else if note.asDigit() == \".|\" {\n \
    \           // Count how many quater notes there are in the string\n         \
    \   notes.append(1)\n        } else {\n            // Unknown note\n         \
    \   notes.append(0)\n        }\n    }\n\n    return notes", "    var beats: [[Int]]\
    \ = []\n    var beat = 0\n    var note_index = 0\n    for c in music_string {\n\
    \        if c == \".\" {\n            beats[note_index].append(beat)\n       \
    \     beat = 0\n            note_index += 1\n        } else {\n            if\
    \ c == \"o\" {\n                beats[note_index].append(beat)\n            }\n\
    \            beat += 1\n        }\n    }\n    for _ in beats {\n        beats.append([])\n\
    \    }\n    return beats", "    var beats: [Int] = []\n    let notes_count = music_string.characters.count\n\
    \n    // The maximum number of notes in a single bar\n    // TODO: this could\
    \ be improved if music_string is long\n    var note_counter = 0\n\n    var current_beat\
    \ = 0\n    var current_note = 0\n    var is_last_note = false\n\n    for _ in\
    \ 0..<notes_count {\n        guard let c = music_string.character(at: $0) else\
    \ {\n            note_counter += 1\n            current_beat += 1\n          \
    \  current_note = 0\n            continue\n        }\n\n        switch c {\n \
    \       case \"o\":\n            is_last_note = false\n        case \"o|\":\n\
    \            is_last_note = true\n        case \".|\":\n            is_last_note\
    \ = false\n        default:\n            fatalError(\"Unknown note\")\n      \
    \  }\n\n        note_counter += 1\n        current_beat += is_last_note\n    \
    \    current_note += 1\n\n        beats.append(current_beat)\n    }\n\n    return\
    \ beats", "\tmusic_array = music_string.characters\n\tmusic_count = music_string.count\n\
    \n\tmusic_array[music_count - 1] = \"o\"\n\tmusic_array[music_count - 2] = \"\
    o\"\n\tmusic_array[music_count - 3] = \"|\"\n\n\tlet beats = music_string.components(separatedBy:\
    \ \"|\").map {\n\t\tlet beat = Int($0)\n\t\tif beat == 0 {\n\t\t\treturn 4\n\t\
    \t} else if beat == 1 {\n\t\t\treturn 2\n\t\t} else {\n\t\t\treturn 1\n\t\t}\n\
    \t}\n\n\treturn beats", "    var beats = [Int]()\n    var last = 0\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            if last == 0 {\n\
    \                beats.append(4)\n            } else {\n                beats.append(1)\n\
    \            }\n            last = 4\n        } else if char == \"|\" {\n    \
    \        if last == 0 {\n                beats.append(2)\n            } else {\n\
    \                beats.append(1)\n            }\n            last = 2\n      \
    \  } else {\n            if last == 0 {\n                beats.append(1)\n   \
    \         } else {\n                beats.append(1)\n            }\n         \
    \   last = 1\n        }\n    }\n    return beats", "    if music_string == \"\"\
    \ {\n        return []\n    }\n\n    var current_note_count = 0\n    var current_beat\
    \ = 0\n    var last_note = -1 // 0 represents whole note, 1 half note, 2 quater\
    \ note\n\n    // To parse music string using '|' symbol, we need to know the length\
    \ of each note in seconds.\n    // So lets create an array that contains note\
    \ lengths.\n    var note_lens = [Int]()\n    for i in 0..<Int(music_string.count)\
    \ {\n        if music_string[i] == '|' {\n            note_lens.append(current_note_count)\n\
    \            current_note_count = 0\n        } else {\n            current_note_count\
    \ += 1\n        }\n    }\n    note_lens.append(current_note_count)\n\n    // Let's\
    \ parse music string.\n    var note_array = [Int]()\n    for i in 0..<note_lens.count\
    \ {\n        var note = Int()\n        for _ in 0..<note_lens[i] {\n         \
    \   note = note * 2 + 1\n        }\n\n        // If the last note is not the same\
    \ as the current note, we need to add one.\n        if note != last_note {\n \
    \           note = note + 1\n        }\n\n        last_note = note\n        note_array.append(note)\n\
    \    }\n\n    return note_array", "    // Write your code here\n\n    return [0]",
  "    if music_string == \"\" {\n        return []\n    }\n\n    var beats_per_note:\
    \ [Int] = []\n\n    var note_length = music_string.count\n\n    var note_count\
    \ = 0\n    var beats = 0\n    var current_note = \"\"\n\n    for index in 0..<note_length\
    \ {\n        character = music_string[index]\n        character_count = Int(character)\n\
    \        beats_per_note.append(beats)\n        note_count = note_count + character_count\n\
    \        beats = 0\n        if character == \".\" {\n            beats_per_note.append(beats)\n\
    \            note_count = note_count + 1\n            beats = 0\n        }\n \
    \       else {\n            beats = beats + character_count\n        }\n    }\n\
    \    beats_per_note.append(beats)\n    return beats_per_note", "    var notes\
    \ = [Int]()\n\n    for char in music_string {\n        switch char {\n       \
    \ case \"o\":\n            notes.append(0)\n        case \"o|\":\n           \
    \ notes.append(4)\n        case \"|\":\n            notes.append(1)\n        default:\n\
    \            notes.append(0)\n        }\n    }\n\n    return notes", "    var\
    \ result: [Int] = []\n    music_string.split(separator: \" \").enumerated().forEach\
    \ {\n        guard $0.offset > 0 else {\n            result.append(0)\n      \
    \      return\n        }\n        guard $0.offset == $0.element else { return\
    \ }\n        guard let note = music_string.index(music_string.startIndex, offset:\
    \ $0.element) else { return }\n        guard let last_note = music_string.index(music_string.startIndex,\
    \ offset: $0.element + 1) else { return }\n        guard note.offset > last_note.offset\
    \ else { return }\n        guard note.element == last_note.element else { return\
    \ }\n        guard note.element == $0.element else { return }\n        guard note.element\
    \ != 0 && !note.element == $0.element else { return }\n        result.append(note.element\
    \ - $0.element + 1 + result.count)\n    }\n    return result", "    var beats:\
    \ [Int] = [0]\n    for char in music_string {\n        if char == \"o\" {\n  \
    \          beats = append(beats, beats.endIndex - beats.startIndex - 4)\n    \
    \    } else if char == \"|\" {\n            beats = append(beats, beats.endIndex\
    \ - beats.startIndex - 2)\n        } else if char == \".\" {\n            beats\
    \ = append(beats, beats.endIndex - beats.startIndex)\n        } else {\n     \
    \       debugPrint(\"Unexpected character: \\(char)\\\", this music string is\
    \ \\(music_string)\")\n            return [0]\n        }\n    }\n    return beats",
  "    var beats: [Int] = []\n    var notes: [String] = []\n    var beats_counter:\
    \ Int = 0\n    var note_counter: Int = 0\n    for ch in music_string {\n     \
    \   notes.append(ch)\n        beats_counter += 1\n        if ch == '|' {\n   \
    \         beats_counter -= 1\n            beats.append(beats_counter)\n      \
    \      beats_counter = 0\n            note_counter += 1\n            if note_counter\
    \ == 4 {\n                notes.removeLast()\n                note_counter = 0\n\
    \            }\n        }\n    }\n    return beats", "    var beats = [Int]()\n\
    \    for c in music_string {\n        var beat = 0\n        var last = 0\n   \
    \     if c == \".\" {\n            beat = 0\n            last += 4\n        }\
    \ else if c == \"o\" {\n            beat = 0\n            last = 4\n        }\
    \ else if c == \"|\" {\n            beat = 1\n            last = 2\n        }\
    \ else if c == \"o|\" {\n            beat = 1\n            last = 2\n        }\
    \ else {\n            let val = c - \"0\"\n            beat = (val % 4) + 1\n\
    \            last = val / 4\n        }\n        beats.append(last)\n    }\n  \
    \  return beats", "    // Your code here\n    return music_string\n        .split(separator:\
    \ \"|\")\n        .map { $0.count }", '    return music_string.split("|").map({
    Int($0) }) // [".|", "o o|", "o| o|"]', "    let music_string = music_string.characters.split\
    \ { $0 == \"o\" }.joined(separator: \"\")\n    var beats = [Int]()\n    var lasts\
    \ = [Int]()\n    var i = 0\n    while i < music_string.count {\n        let char\
    \ = music_string[i]\n        if char == \"o\" {\n            let beat = 1\n  \
    \          beats += [beat]\n            lasts += [beat]\n            i += 2\n\
    \        } else if char == \"|\" {\n            let beat = 2\n            beats\
    \ += [beat]\n            lasts += [beat]\n            i += 2\n        } else if\
    \ char == \".\" {\n            let beat = 1\n            beats += [beat]\n   \
    \         lasts += [beat]\n            i += 2\n        } else {\n            let\
    \ beat = 1\n            beats += [beat]\n            lasts += [beat]\n       \
    \     i += 1\n        }\n    }\n    return lasts", "    var result = Array(repeating:\
    \ 0, count: 60)\n    let music_array = music_string.characters.split(\"o\").map({\
    \ o: Char in\n        let note = o.lowercased()\n        switch note {\n     \
    \   case \"o\":\n            return 4\n        case \"o|\":\n            return\
    \ 2\n        case \"|\":\n            return 1\n        default:\n           \
    \ return 0\n        }\n    })\n    for (_, element) in music_array.enumerated()\
    \ {\n        result[element] -= 1\n    }\n    return result", "    let split_string\
    \ = music_string.split(separator: \" \")\n    var beats = [Int]()\n    for i in\
    \ 0...split_string.count - 1 {\n        beats.append(0)\n        let splitted_string\
    \ = split_string[i].split(separator: \"|\")\n        let note = splitted_string[0]\n\
    \        let beats_count = splitted_string[1].trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \        if note.count == 1 {\n            beats[note.lowercased()] = beats_count\n\
    \        } else if note.count > 1 && note.lowercased() == \"o\" {\n          \
    \  beats[note.lowercased()] = beats_count.count\n        } else if note.count\
    \ > 1 && note.lowercased() == \".\" {\n            beats[note.lowercased()] =\
    \ beats_count.count / 2\n        } else if note.count > 1 && note.lowercased()\
    \ == \"o|\" {\n            beats[note.lowercased()] = beats_count.count / 4\n\
    \        }\n    }\n    return beats", "    let music_string = \"\\(music_string)\"\
    .lowercased()\n    let notes = music_string.components(separatedBy: \" \")\n \
    \   let notes_array = Array(notes)\n    let notes_count = notes_array.count\n\
    \    let beats_per_note = 4\n\n    var note_values = [Int](repeating: 0, count:\
    \ notes_count)\n    var note_beat = [Int](repeating: 0, count: notes_count)\n\n\
    \    for i in 0..<notes_count {\n        let note = notes_array[i].lowercased()\n\
    \        if note.contains(\"o\") {\n            let beat_number = Int(note.characters(in:\
    \ \n            NSCharacterSet.letters.inverted).first!)\n            note_values[i]\
    \ += beat_number\n            note_beat[i] += beat_number\n        } else if note.contains(\"\
    |\") {\n            let beat_number = Int(note.characters(in: \n            NSCharacterSet.letters.inverted).first!)\n\
    \            note_values[i] -= beat_number\n            note_beat[i] -= beat_number\n\
    \        } else {\n            let beat_number = Int(note.characters(in: \n  \
    \          NSCharacterSet.letters.inverted).first!)\n            note_values[i]\
    \ += beat_number\n            note_values[i] -= beat_number\n        }\n    }\n\
    \n    return note_beat", "    var beats = [0]\n    var last_beat = 0\n    var\
    \ last_note = 0\n\n    for ch in music_string {\n        if ch == 'o' {\n    \
    \        last_note = last_beat % 4\n            beats.append(last_beat)\n    \
    \        last_beat = 0\n        } else if ch == '|' {\n            last_beat +=\
    \ 1\n        } else if ch == '.' {\n            beats.append(last_beat)\n    \
    \        last_beat = 0\n        }\n    }\n\n    beats.append(last_beat)\n    return\
    \ beats", "    \n    guard let music_pieces = music_string.components(separatedBy:\
    \ \"|\") else {\n        return []\n    }\n    \n    let beats = music_pieces.filter{\
    \ $0.isWhitespace }\n        .map{ $0.isLetter ? ($0 + \"|\").lowercased() : $0\
    \ }\n        .map{ musicToBeat(_: $0) }\n        .reduce(into: [Int]()) { (result,\
    \ beat) in\n            guard result.last?.0 != beat.0 else { return }\n     \
    \       result.append(beat.1)\n        }\n    \n    return beats", "    var note_count\
    \ = [Int]()\n    let music_chars = music_string.unicodeScalars\n    for char in\
    \ music_chars {\n        if char.value == 0x2e {\n            note_count[note_countIndex]\
    \ += 1\n        }\n        if note_countIndex >= note_counts.count {\n       \
    \     note_countIndex = 0\n        }\n    }\n    return note_count", "    var\
    \ beats = [Int](repeating: 0, count: 128)\n    var beat_count = 0\n    for character\
    \ in music_string {\n        if character == \".\" {\n            beats[beat_count]\
    \ = 0\n            beat_count += 1\n        } else if character == \"|\" {\n \
    \           beats[beat_count] = 4\n            beat_count += 1\n        } else\
    \ {\n            beats[beat_count] -= 1\n        }\n    }\n    return beats",
  '    return parse_music_aux(music_string, 0)', "    \n    // Your code goes here\n\
    \    ", "    // write your logic here\n    var notes: [Int] = []\n    var current_note\
    \ = 0\n    var current_beat = 0\n    var current_beat_count = 1\n    for current_char\
    \ in music_string {\n        switch current_char {\n        case \"o\":\n    \
    \        current_beat_count = 1\n            current_note = 0\n        case \"\
    |\":\n            current_note = current_note + 1\n            current_beat_count\
    \ = 1\n        default:\n            current_note = current_note + 1\n       \
    \     current_beat_count = current_beat_count + 1\n            if current_beat_count\
    \ > 4 {\n                current_beat_count = 1\n                current_beat\
    \ = current_beat + 1\n            }\n        }\n    }\n    return notes", "  \
    \  return music_string.characters.enumerated().map({ $0.element / 4 }).sorted().map\
    \ {\n        return Int(4 * $0)\n    }", "    var note_strings = [String]()\n\
    \    var beats = [Int]()\n\n    for character in music_string {\n        switch\
    \ character {\n        case \"o\":\n            note_strings.append(\"whole_note\"\
    )\n        case \"o|\":\n            note_strings.append(\"half_note\")\n    \
    \    case \".|\":\n            note_strings.append(\"quarter_note\")\n       \
    \ default:\n            print(\"Warning, unknown character:\", character)\n  \
    \          return beats\n        }\n    }\n    for note_string in note_strings\
    \ {\n        if note_string == \"whole_note\" {\n            let beats_string\
    \ = music_string.characters.suffix(music_string.characters.endIndex).dropLast().map\
    \ { character -> Int in\n                switch character {\n                case\
    \ \"o\": return 1\n                case \"o|\": return 4\n                case\
    \ \".|\": return 3\n                default: return 0\n                }\n   \
    \         }.joined()\n            if beats_string == \"1234\" {\n            \
    \    return beats\n            }\n        } else if note_string == \"half_note\"\
    \ {\n            let beats_string = music_string.characters.suffix(music_string.characters.endIndex).dropLast().map\
    \ { character -> Int in\n                switch character {\n                case\
    \ \"o\": return 2\n                case \"o|\": return 2\n                case\
    \ \".|\": return 1\n                default: return 0\n                }\n   \
    \         }.joined()\n            if beats_string == \"1223\" {\n            \
    \    return beats\n            }\n        } else if note_string == \"quarter_note\"\
    \ {\n            let beats_string = music_string.characters.suffix(music_string.characters.endIndex).dropLast().map\
    \ { character -> Int in\n                switch character {\n                case\
    \ \"o\": return 1\n                case \"o|\": return 1\n                case\
    \ \".|\": return 1\n                default: return 0\n                }\n   \
    \         }.joined()\n            if beats_string == \"1222\" {\n            \
    \    return beats\n            }\n        }\n    }\n    print(\"Warning, no beats\
    \ found!\")\n    return beats", "    \n    guard let music_string_in_bytes = music_string.data(using:\
    \ .ascii) else {\n        fatalError()\n    }\n\n    var beats_count_of_last_notes\
    \ = [Int]()\n    \n    let music_string_bytes = music_string_in_bytes\n    let\
    \ music_string_bytes_len = music_string_bytes.count\n    \n    let music_string_iterator\
    \ = music_string_bytes.makeIterator()\n    let music_string_iter_marker = music_string_bytes.makeIterator()\n\
    \    \n    var music_string_current_char = music_string_iterator.next()!\n   \
    \ \n    var beats_count_of_last_note_current_beat = 0\n    \n    // loop that\
    \ will run until end of music string\n    while music_string_current_char != \"\
    \ \" {\n        // increment beat of music string iterator marker to last beat\n\
    \        music_string_iter_marker.next()\n        \n        // increment current\
    \ music string iterator\n        music_string_iterator.next()\n        \n    \
    \    // increment current music string char by 1\n        music_string_current_char\
    \ = music_string_iterator.next()!\n        \n        // check if current music\
    \ string char is space symbol\n        if music_string_current_char == \" \" {\n\
    \            // check if last beat of current music string equals to beat of previous\
    \ music string iterator\n            if music_string_current_char == String(music_string_iter_marker.next())\
    \ {\n                beats_count_of_last_notes.append(beats_count_of_last_note_current_beat)\n\
    \                beats_count_of_last_note_current_beat = 0\n            }\n  \
    \      } else {\n            beats_count_of_last_note_current_beat += 1\n    \
    \    }\n    }\n    \n    return beats_count_of_last_notes", "    var result: [Int]\
    \ = []\n\n    let music_string_arr = music_string.characters.split(\"|\")\n\n\
    \    for music_string_arr_index in 0..<music_string_arr.count {\n        let note\
    \ = music_string_arr[music_string_arr_index]\n        let beat_length = note.characters.count\
    \ / 4\n\n        result.append(beat_length)\n    }\n\n    return result", "  \
    \  var notes: [Int] = Array(repeating: 0, count: 6)\n\n    let notes_count = music_string.characters.count\n\
    \n    for index in 0..<notes_count {\n        let letter = music_string[index]\n\
    \n        if letter == \" \" {\n            notes[index] = notes[index] + 1\n\
    \        } else {\n            notes[index] += notes[Int(letter) - 'o']\n    \
    \    }\n    }\n\n    return notes", "    // Your code goes here\n    var music_array\
    \ = music_string.characters.map{String($0)}.joined(separator: \"\")\n    var beats_per_rest\
    \ = 0\n    var rests = 0\n    var rests_array = [Int]()\n    var rests_array =\
    \ Array(0...music_array.count).map{rests}\n    while rests_array.count != 0 {\n\
    \        rests_array.removeAll()\n        for rest in 0..<rests {\n          \
    \  if music_array[rest] == \"o\" {\n                rests_array.append(rest)\n\
    \                rests_array.append(rest)\n                beats_per_rest += 4\n\
    \            } else {\n                rests_array.append(rest)\n            \
    \    beats_per_rest += 2\n            }\n        }\n        rests = rests_array.count\n\
    \    }\n    return rests_array", "    guard music_string != \"\" else {\n    \
    \    return []\n    }\n    var last_notes = 0\n    var beats = [Int]()\n    var\
    \ current_beat = 0\n    var current_note = 0\n    var note_length = 0\n    \n\
    \    for i in music_string.characters {\n        if i == 'o' {\n            current_note\
    \ = last_notes\n            note_length = 4\n        } else if i == 'o|' {\n \
    \           current_note = last_notes\n            note_length = 2\n        }\
    \ else if i == '.|' {\n            current_note = last_notes\n            note_length\
    \ = 1\n        } else {\n            note_length = -1\n        }\n        \n \
    \       if note_length != -1 {\n            beats.append(current_beat + current_note)\n\
    \        }\n        \n        if current_note > 0 {\n            current_note\
    \ -= 1\n        } else {\n            current_beat += note_length\n        }\n\
    \        last_notes += 1\n    }\n    return beats", "    var chord = [Int]()\n\
    \    var temp = [Int]()\n    var current_beat = 0\n    var current_beat_tonality\
    \ = 0\n\n    for current_char in music_string {\n        let note = note_from_string(current_char)\n\
    \n        if note != nil {\n            temp.append(note!)\n            if note!.tonality\
    \ == 0 {\n                current_beat_tonality = 0\n            } else {\n  \
    \              current_beat_tonality = 1\n            }\n        }\n\n       \
    \ if note_from_string(current_char) != nil {\n            temp.append(note_from_string(current_char)!)\n\
    \            if note_from_string(current_char)!.tonality == 0 {\n            \
    \    current_beat_tonality = 0\n            } else {\n                current_beat_tonality\
    \ = 1\n            }\n        }\n\n        if note == nil || note_from_string(current_char)\
    \ == nil {\n            if current_beat_tonality == 1 {\n                chord.append(temp[current_beat])\n\
    \                temp.removeLast()\n                current_beat += 1\n      \
    \          current_beat_tonality = 0\n            } else {\n                chord.append(temp[current_beat])\n\
    \                temp.removeLast()\n                current_beat += 1\n      \
    \          current_beat_tonality = 1\n            }\n        }\n    }\n    \n\
    \    chord.append(temp[current_beat])\n    temp.removeLast()\n\n    return chord",
  "    return music_string\n        .split(separator: \"|\")\n        .flatMap{ $0.split(separator:\
    \ \" \").map({ Int($0) }) }", '    return music_string.scan(note_pattern, matching:
    note_occurrences).map { $0.count }', "    // Your code here\n    let array = music_string.components(separatedBy:\
    \ \" \")\n    var beats = [Int]()\n    beats.reserveCapacity(array.count)\n  \
    \  for music_element in array {\n        if music_element == \"o\" {\n       \
    \     beats.append(4)\n        } else if music_element == \"o|\" {\n         \
    \   beats.append(2)\n        } else if music_element == \".|\" {\n           \
    \ beats.append(1)\n        } else {\n            let music_note_index = Int(music_element)\
    \ - 1\n            beats.append(beats[music_note_index] + 1)\n        }\n    }\n\
    \    return beats", '    // Your code here', "    let regex = try! NSRegularExpression(pattern:\
    \ \"^([.o]|[.|o|])$\")\n    let results = regex.matches(in: music_string, range:\
    \ NSRange(location: 0, length: music_string.count))\n    return results.map({\
    \ result -> Int in\n        guard let range = result.range, let firstChar = music_string.substring(with:\
    \ range).first\n        else { return 0 }\n        switch firstChar {\n      \
    \  case \"o\": return 4\n        case \"|\": return 2\n        default: return\
    \ 1\n        }\n    })", "    var beats = [Int]()\n    let notes = music_string.split(separator:\
    \ \" \").map(String.init)\n    for note in notes {\n        if note.hasPrefix(\"\
    o\") {\n            beats.append(4)\n        } else if note.hasPrefix(\"o|\")\
    \ {\n            beats.append(2)\n        } else if note.hasPrefix(\".|\") {\n\
    \            beats.append(1)\n        } else {\n            beats.append(0)\n\
    \        }\n    }\n    return beats", "    guard music_string.count != 0 else\
    \ {\n        return []\n    }\n\n    var notes = [Int]()\n\n    for note in music_string.unicodeScalars\
    \ {\n        switch note {\n        case \"o\":\n            notes.append(4)\n\
    \        case \"o|\":\n            notes.append(2)\n        case \".|\":\n   \
    \         notes.append(1)\n        default:\n            break\n        }\n  \
    \  }\n\n    return notes", "    music_string += \"|\"\n    music_string += \"\
    |\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n", "    \n \
    \   // write your code here\n    let music_array = music_string.split(\" \").map{String($0)}\n\
    \    var result = [Int]()\n    for i in 0..<music_array.count{\n        let char\
    \ = String(music_array[i])\n        if char == \"o\" {\n            result.append(4)\n\
    \        }else if char == \"o|\" {\n            result.append(2)\n        }else\
    \ if char == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = [0]\n    for i in 1...music_string.characters.count\
    \ {\n        switch music_string.characters[i-1] {\n        case \"o\":\n    \
    \        result.append(4)\n        case \"|\":\n            result.append(2)\n\
    \        case \".\":\n            result.append(1)\n        default:\n       \
    \     result.append(0)\n        }\n    }\n    return result", "    guard let music_notes\
    \ = music_string.characters.split(\" \").map(String.init) else { return [] }\n\
    \    return music_notes.filter { note in\n        note.characters.count == 1\n\
    \    }.map { note in\n        guard let index = note.index(of: \"|\") else {\n\
    \            throw Exception.music(reason: \"No | in note - \\(note)\")\n    \
    \    }\n        return Int(note[index + 1..<note.count])\n    }", "    guard music_string.count\
    \ > 0 else {\n        return []\n    }\n    \n    var beats: [Int] = [0, 0, 0,\
    \ 0, 0, 0, 0, 0]\n    \n    let notes = \"o|.\".components(separatedBy: \"|\"\
    )\n    \n    for (i, note) in notes.enumerated() {\n        \n        let splitted_note\
    \ = note.split(separator: \" \")\n        \n        var beats_counter = 0\n  \
    \      \n        for (_, char) in splitted_note.enumerated() {\n            let\
    \ index = splitted_note.index(of: char)\n            if index == splitted_note.count\
    \ - 1 {\n                beats_counter += 1\n                splitted_note.remove(at:\
    \ index)\n            } else {\n                beats_counter += index\n     \
    \       }\n        }\n        beats[i] += beats_counter\n    }\n    \n    return\
    \ beats", "    var beats: [Int] = []\n    var beats_counter: [Int] = [0]\n\n \
    \   let music_string = music_string.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    var music_notes: [String] = []\n\n    for music_note in music_string.components(separatedBy:\
    \ \" \") {\n        let music_note = music_note.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \        if music_note != \"\" {\n            music_notes.append(music_note)\n\
    \        }\n    }\n\n    for music_note in music_notes {\n        var music_note_index\
    \ = -1\n        var music_note_length = -1\n\n        for note_index in 0..<music_note.characters.count\
    \ {\n            guard note_index < music_note.characters.count - 1, music_note[note_index]\
    \ == \".\" else {\n                continue\n            }\n\n            music_note_index\
    \ += 1\n            music_note_length += 1\n\n            if music_note_index\
    \ < music_note.characters.count {\n                if music_note[music_note_index\
    \ + 1] == \"|\" {\n                    beats_counter[music_note_length] += 1\n\
    \                }\n            }\n        }\n\n        if beats_counter[music_note_length]\
    \ == 4 {\n            beats.append(4)\n            beats_counter[music_note_length]\
    \ = 0\n        } else {\n            beats.append(beats_counter[music_note_length])\n\
    \            beats_counter[music_note_length] = 0\n        }\n    }\n\n    return\
    \ beats", "    if music_string == \"\" {\n        return [0]\n    }\n    var beats\
    \ = [Int]()\n    var notes = [Int]()\n    var i = 0\n    var current_note = 0\n\
    \    var current_beat = 0\n    var notes_count = 0\n    while i < music_string.count\
    \ {\n        let letter = music_string[i]\n        if letter != \".\" {\n    \
    \        notes.append(letter)\n            i += 1\n        }\n        else if\
    \ letter == \".\" {\n            notes_count = 1\n            i += 1\n       \
    \     current_note += 1\n            beats.append(current_beat)\n        }\n \
    \       else if letter == \"|\" {\n            notes_count += 1\n            current_note\
    \ += 1\n            current_beat += 1\n            i += 1\n        }\n       \
    \ else if letter == \"o\" {\n            notes_count = 1\n            i += 1\n\
    \            current_note += 1\n            beats.append(current_beat)\n     \
    \   }\n        else if letter == \"|\" {\n            notes_count -= 1\n     \
    \       current_note += 1\n            beats.append(current_beat)\n        }\n\
    \        else {\n            notes_count += 1\n            beats.append(current_beat)\n\
    \        }\n    }\n    notes.append(notes_count) // end of note\n    if notes_count\
    \ > 0 {\n        print(\"ERROR: Unbalanced notes!\\n\")\n        return nil\n\
    \    }\n    return beats", "    guard music_string.count > 0 else {\n        return\
    \ []\n    }\n\n    // If string only contains dot or space then return empty array\
    \ as notes are not played anyway.\n    guard music_string[0] != '.' || music_string[0]\
    \ == ' ' else {\n        return []\n    }\n\n    // If string contains more than\
    \ 3 dots then return empty array as notes are not played anyway.\n    guard music_string.count\
    \ - 1 < 3 else {\n        return []\n    }\n\n    // Get a copy of input string\
    \ and remove first character.\n    var music_copy = music_string.copy(count: music_string.count\
    \ - 1)\n\n    // Parse string to determine if note is a whole note, half or quater.\n\
    \    if let index = music_copy.firstIndex(of: \" \") {\n        // If first character\
    \ is a space then it is half note, otherwise it is whole note.\n        let note_is_half\
    \ = music_copy[index] == ' '\n        music_copy.removeFirst()\n        guard\
    \ note_is_half else { return [] }\n    }\n\n    // Remove dots at end of string.\n\
    \    if let index = music_copy.lastIndex(of: \".\") {\n        music_copy.removeLast()\n\
    \        music_copy.removeLast()\n    }\n\n    // If there are any more characters\
    \ after last space then return empty array as notes are not played anyway.\n \
    \   guard music_copy.count > 0 else {\n        return []\n    }\n\n    // If there\
    \ are no notes then return empty array.\n    var music_array = music_copy.split(separator:\
    \ \" \")\n\n    // Return empty array if note is single or double dotted or double\
    \ space\n    if music_array.count == 1 {\n        return [0]\n    } else if music_array.count\
    \ == 2 {\n        return [music_array[1]]\n    } else {\n        return [music_array[1],\
    \ music_array[4]]\n    }", "    var beats = [0] * 12\n    var last_beat = [Int](repeating:\
    \ 0, count: 4)\n    let notes: [[Int]] = [[\"o\", \"o|\", \"|.|\"], [\"o|\", \"\
    o|\", \"|.|\"], [\"o|\", \"o|\", \"|.|\"], [\"o|\", \"o|\", \"|.|\"], [\"o|\"\
    , \"o|\", \"|.|\"], [\"o|\", \"o|\", \"|.|\"], [\"o|\", \"o|\", \"|.|\"], [\"\
    o|\", \"o|\", \"|.|\"], [\"o|\", \"o|\", \"|.|\"], [\"o|\", \"o|\", \"|.|\"]]\n\
    \    \n    for note in notes {\n        if music_string.contains(note[0]) {\n\
    \            for index in 0..<note.count {\n                if index == note.count\
    \ - 1 {\n                    beats[note[index] - 48] += last_beat[index]\n   \
    \             } else {\n                    beats[note[index] - 48] += 1\n   \
    \             }\n                last_beat[index] += 1\n            }\n      \
    \  }\n    }\n    return beats", "    guard music_string.characters.count == 24\
    \ else { return [Int]() }\n    guard let music_string = music_string.substringToIndex(advance(music_string.startIndex,\
    \ 2)) else { return [Int]() }\n    let music_string = music_string.substringFromIndex(advance(music_string.startIndex,\
    \ 2))\n    let mut music_notes = music.split(music_string)\n    let mut result\
    \ = [Int]()\n    for note in music_notes {\n        guard let note = Int(note,\
    \ radix: 16) else { return [Int]() }\n        if note >= 1 && note <= 7 {\n  \
    \          result.append(note - 1)\n        }\n    }\n    result", "    // TODO:\
    \ replace with regex or something better than a naive split\n    return music_string.split(separator:\
    \ \"o|.|\").map {\n        switch $0 {\n        case \"o\":\n            return\
    \ 4\n        case \"o|\":\n            return 2\n        default:\n          \
    \  return 1\n        }\n    }", "    var output: [Int] = []\n    music_string.split(separator:\
    \ \"|\").forEach { note in\n        if note.contains(\"o\") {\n            note\
    \ = note.trimmingCharacters(in: CharacterSet(charactersIn: \"o\"))\n         \
    \   note = \"o\".distance(from: note)\n        }\n        switch note.lowercased()\
    \ {\n        case \"o\":\n            output.append(4)\n        case \"o|\":\n\
    \            output.append(2)\n        case \".|\":\n            output.append(1)\n\
    \        default:\n            fatalError(\"Unexpected note \\($note)\")\n   \
    \     }\n    }\n    return output", "    // TODO: return early\n    if music_string\
    \ == \"\" {\n        return []\n    }\n\n    var beats_count = [0] * 12\n\n  \
    \  for char in music_string {\n        let note_beats = notes_to_beats[char]\n\
    \        beats_count[note_beats] += 1\n    }\n\n    return beats_count", "   \
    \ // TODO: implement this function\n    return []", "    var beats = [Int]()\n\
    \    for note in music_string {\n        if note == \"o\" {\n            beats.append(4)\n\
    \        } else if note == \"o|\" {\n            beats.append(2)\n        } else\
    \ if note == \".|\" {\n            beats.append(1)\n        } else {\n       \
    \     let beats_in_note = note.characters.count\n            beats.append(beats_in_note)\n\
    \        }\n    }\n    return beats", "    var beats = [Int]()\n    var last =\
    \ 0\n    for _ in 0..<(music_string.count - 1) {\n        let symbol = music_string[last]\n\
    \        if symbol == \"o\" {\n            beats.append(4)\n            last =\
    \ last + 1\n        } else if symbol == \"o|\" {\n            beats.append(2)\n\
    \            last = last + 1\n        } else if symbol == \".|\" {\n         \
    \   beats.append(1)\n            last = last + 1\n        } else {\n         \
    \   fatalError(\"unknown music symbol \\(symbol)\")\n        }\n    }\n    return\
    \ beats", "    let notes = music_string.split(separator: \" \").map{String($0)}\n\
    \n    var sum = [Int]()\n\n    for note in notes {\n        let beats = note.count\
    \ - note.count % 4\n        sum += [Int](repeating: beats, count: note.count)\n\
    \    }\n\n    return sum", "    var last = 0\n    var beats = [0]\n    for c in\
    \ music_string {\n        let note = c\n        if note == \".\" {\n         \
    \   beats[last] = 1\n            last = 0\n        } else if note == \"o\" {\n\
    \            beats[last] = 4\n            last = 1\n        } else {\n       \
    \     beats[last] += 1\n            last = 0\n        }\n    }\n\n    return beats",
  "    var beats_per_beats = [Int]()\n    var beats_played = 0\n    var notes = music_string.split(\"\
    \ \")\n    for note in notes {\n        var beats = note.countElements() - 1\n\
    \        if note.contains(\"o|\") {\n            beats = 2\n        } else if\
    \ note.contains(\".|\") {\n            beats = 1\n        }\n        beats_per_beats.append(beats)\n\
    \        beats_played += beats\n    }\n    return beats_per_beats", "    let note_strings\
    \ = music_string.components(separatedBy: \" \") // Separate string by space\n\
    \    var note_counts: [Int] = []\n    for note_string in note_strings {\n    \
    \    if note_string == \"o\" {\n            note_counts.append(1)\n        } else\
    \ if note_string == \"o|\" {\n            note_counts.append(2)\n        } else\
    \ if note_string == \".|\" {\n            note_counts.append(1)\n        } else\
    \ {\n            note_counts.append(0)\n        }\n    }\n    return note_counts",
  "    var beats: [[Int]] = []\n\n    for char in music_string {\n        var beat:\
    \ Int = 0\n\n        switch char {\n        case \"o\": beat = 4; break\n    \
    \    case \"o|\": beat = 2; break\n        case \".|\": beat = 1; break\n    \
    \    default: continue\n        }\n\n        beats.append(beat)\n    }\n\n   \
    \ return beats", "    guard let music_notes = music_string.split(separator: \"\
    \ \").map(String.init) else {\n        return []\n    }\n    var beats = 0\n \
    \   var notes: [Int] = [0]\n\n    for music_note in music_notes {\n        if\
    \ music_note == \"o\" {\n            beats = 0\n            notes.append(1)\n\
    \        } else if music_note.count > 1 && (music_note[0] != \"o\" || music_note[1]\
    \ == \"|\") {\n            beats += (music_note.count - 1) / 2\n            notes.append(beats)\n\
    \        } else {\n            beats += 1\n            notes.append(beats)\n \
    \       }\n    }\n\n    return notes", "    let notes = music_string.characters.split(separator:\
    \ \"|\")\n    var output = [Int]()\n\n    for note in notes {\n        if note\
    \ == \"o\" {\n            output.append(4)\n        } else if note == \"o|\" {\n\
    \            output.append(2)\n        } else if note == \".\" {\n           \
    \ output.append(1)\n        } else {\n            fatalError(\"Unknown note\"\
    )\n        }\n    }\n\n    return output", "    // your code here\n    \n    var\
    \ beat = 0\n    var note = 0\n    var note_count = 0\n    var note_size = 0\n\
    \    var note_last = 0\n    var music_notes = [Int]()\n    var music_notes_len\
    \ = 0\n    \n    if let music_note = music_string.unicodeScalars {\n        music_notes_len\
    \ = music_note.count\n        \n        if music_notes_len > 0 {\n           \
    \ note = music_note[0].value - 49\n            note_count = music_note[0].value\
    \ - 49\n            beat = 0\n            \n            while note_count > 0 {\n\
    \                if note % 4 == 0 {\n                    beat = beat + Int(note_count)\n\
    \                    note_count = 0\n                }\n                note =\
    \ note + 4\n                note_count = note_count - 1\n            }\n     \
    \       \n            if note != 0 {\n                music_notes.append(note)\n\
    \                music_notes_len = music_notes_len + 1\n            }\n      \
    \  }\n    }\n    \n    return music_notes", "    var result: [Int] = []\n\n  \
    \  // TODO: write your code\n\n    return result", "    let notes = music_string.characters.split{$0\
    \ == \"o\"}.map(String.init)\n\n    var notes_beats = [Int]()\n    for note in\
    \ notes {\n        if note == \"o\" {\n            notes_beats += [4, 4]\n   \
    \     } else if note == \"o|\" {\n            notes_beats += [2, 2]\n        }\
    \ else if note == \".|\" {\n            notes_beats += [1]\n        } else {\n\
    \            fatalError(\"Unknown note\")\n        }\n    }\n\n    return notes_beats",
  "    var beats = 0\n    var notes: [Int] = []\n    for c in music_string {\n   \
    \     switch c {\n        case \"o\":\n            notes.append(4)\n        case\
    \ \"o|\":\n            notes.append(2)\n        case \".|\":\n            notes.append(1)\n\
    \        default:\n            notes.append(0)\n        }\n        beats += notes.last!\n\
    \        notes.remove(at: notes.count - 1)\n    }\n    return beats", "    var\
    \ beats_to_beat = [Int]()\n\n    music_string = music_string.trim()\n    if music_string.isEmpty\
    \ {\n        return beats_to_beat\n    }\n\n    var i = 0\n    for character in\
    \ music_string {\n        if character == \"o\" {\n            beats_to_beat.append(i)\n\
    \            i += 1\n        } else if character == \"o|\" {\n            i +=\
    \ 4\n        } else if character == \".|\" {\n            beats_to_beat.append(i)\n\
    \            i += 1\n        } else {\n            return beats_to_beat\n    \
    \    }\n    }\n    return beats_to_beat", "    // Split the string into a list\
    \ of single notes\n    let notes = music_string.components(separatedBy: \" \"\
    )\n    // For each note in the music string, try to parse it\n    var beat_count:\
    \ [Int] = [0]\n    for note in notes {\n        // If the note is valid\n    \
    \    if let note_number = parse_note(note: note) {\n            // Add to the\
    \ beat_count array\n            beat_count[note_number] += 1;\n        }\n   \
    \ }\n    return beat_count", '    return music_string.split(separator: " ").map({
    Int($0) }).map { $0 / 4 }', "    var beats_per_note = [Int]()\n    for note in\
    \ music_string {\n        switch note {\n        case \"o\":\n            beats_per_note.append(4)\n\
    \        case \"o|\":\n            beats_per_note.append(2)\n        case \"o.|\"\
    :\n            beats_per_note.append(1)\n        default:\n            beats_per_note.append(1)\n\
    \        }\n    }\n    return beats_per_note", "    var beats_per_note: [Int]\
    \ = [0]\n    for note in music_string {\n        var beats = 0\n        var note_index\
    \ = note.unicodeScalars.firstIndex(of: \"o\") + 1\n        for _ in 0..<note_index\
    \ {\n            beats += 4\n            note_index = note_index.distanceTo(note.unicodeScalars.firstIndex(of:\
    \ \"o\") + 1) + 1\n        }\n        beats_per_note.append(beats)\n    }\n  \
    \  return beats_per_note", "  var result: [Int] = []\n  var previous_note = \"\
    \"\n  var number_of_notes = 0\n  for c in music_string {\n    if c == \"o\" {\n\
    \      if previous_note == \"\" {\n        number_of_notes += 1\n        result.append(number_of_notes)\n\
    \        number_of_notes = 0\n      } else {\n        number_of_notes = 1\n  \
    \    }\n      previous_note = \"o\"\n    } else if c == \"|\" {\n      if number_of_notes\
    \ == 1 {\n        number_of_notes += 1\n        result.append(number_of_notes)\n\
    \      } else {\n        number_of_notes += 1\n      }\n      previous_note =\
    \ \"|\"\n    } else if c == \".\" {\n      if number_of_notes == 1 {\n       \
    \ number_of_notes += 1\n      } else {\n        number_of_notes += 1\n      }\n\
    \      previous_note = \".\"\n    }\n  }\n  return result", "    music_string\
    \ = music_string.replacingOccurrences(of: \" \", with: \"\")\n    music_string\
    \ = music_string.replacingOccurrences(of: \".\", with: \"|\")\n    let split_music_string\
    \ = music_string.components(separatedBy: \"|\")\n    var music_array = [Int]()\n\
    \    for note in split_music_string {\n        if note.first! == \"o\" {\n   \
    \         music_array.append(4)\n        }\n        else if note.first! == \"\
    o\" {\n            music_array.append(2)\n        }\n        else if note.first!\
    \ == \".\" {\n            music_array.append(1)\n        }\n        else {\n \
    \           fatalError(\"unknown music note\")\n        }\n    }\n    return music_array",
  "    \n    // Your code here!\n    let notes = music_string.split(separator: \"\
    \ \")\n    var beats = [Int]()\n    \n    for note in notes {\n        if note\
    \ == \".\" {\n            beats.append(4)\n        }\n        else if note ==\
    \ \"o\" {\n            beats.append(1)\n        }\n        else if note == \"\
    o|\" {\n            beats.append(2)\n        }\n        else {\n            beats.append(0)\n\
    \        }\n    }\n    \n    return beats", "    var result = [Int]()\n    for\
    \ s in music_string {\n        if s == '.' {\n            result.append(1)\n \
    \       } else {\n            if s == 'o' {\n                result.append(4)\n\
    \            } else if s == 'o|' {\n                result.append(2)\n       \
    \     } else {\n                fatalError(\"Wrong note symbol: \\(s)\")\n   \
    \         }\n        }\n    }\n    return result", '    return parse_music_recursive(music_string)',
  "    return music_string.characters.split {$0 == \"|\"} |> Array.map {\n       \
    \ switch $0 {\n            case \"o\" | \"o|\":\n                return 4\n  \
    \          default:\n                return 2\n        }\n    }", "    var notes:\
    \ [Int] = []\n    let beats_per_bar = 4\n    var temp = 0\n    var beats = 0\n\
    \    for index in 0..<music_string.characters.count {\n        if music_string.characters.indexGreaterThanOrEqualTo(index,\
    \ by: (music_string.characters.count - 1)) {\n            temp += 1\n        }\
    \ else {\n            if music_string.characters.characters[index] == '|' {\n\
    \                temp = 0\n            }\n            if temp == beats_per_bar\
    \ {\n                notes.append(beats)\n                temp = 0\n         \
    \       beats = 0\n            } else {\n                temp += 1\n         \
    \       beats += 1\n            }\n        }\n    }\n    return notes", "    var\
    \ beats = 0\n    var beats_of_note = []\n    for character in music_string {\n\
    \        switch character {\n        case \"o\":\n            beats_of_note.append(beats)\n\
    \            beats = 0\n        case \"|\":\n            beats_of_note.append(beats)\n\
    \            beats = 0\n        default:\n            beats++\n        }\n   \
    \ }\n    beats_of_note.append(beats)\n    return beats_of_note", "    \n    let\
    \ music_string_array = music_string.split(separator: \" \")\n    let music_string_array_without_dots\
    \ = music_string_array.filter{$0 != \".\"}\n    \n    let beats = music_string_array_without_dots.count\n\
    \n    var music_string_array_without_dots_with_beats = [Int]()\n    for i in 0..<music_string_array_without_dots.count\
    \ {\n        let string = music_string_array_without_dots[i]\n        var beats_count\
    \ = 0\n        if string[0] == 'o' {\n            beats_count = 4\n        }else\
    \ if string[0] == 'o|' {\n            beats_count = 4\n        }else if string[0]\
    \ == '.|' {\n            beats_count = 4\n        }\n        music_string_array_without_dots_with_beats.append(beats_count)\n\
    \    }\n\n    return music_string_array_without_dots_with_beats", "    \n    let\
    \ note_length = 60\n    \n    var beatCounts = [Int]()\n    \n    \n    for character\
    \ in music_string {\n        \n        let note_number = character as UInt32\n\
    \        \n        beatCounts.append(Int(note_number) / 4)\n    }\n    \n    return\
    \ beatCounts", "    var beats_arr = [Int]()\n    var note_arr = [String]()\n \
    \   \n    guard let music_arr = music_string.components(separatedBy: \" \") else\
    \ {\n        return beats_arr\n    }\n    \n    music_arr.forEach { (element)\
    \ in\n        \n        if element.contains(\"o\") {\n            beats_arr.append(4)\n\
    \        } else if element.contains(\"o|\") {\n            beats_arr.append(2)\n\
    \        } else if element.contains(\".|\") {\n            beats_arr.append(1)\n\
    \        } else {\n            note_arr.append(element)\n        }\n    }\n  \
    \  \n    beats_arr.forEach() { (element) in\n        \n        if element > 4\
    \ {\n            beats_arr.remove(at: beats_arr.index(of: element))\n        }\n\
    \    }\n    \n    return beats_arr", "    return music_string.components(separatedBy:\
    \ \" \").flatMap { noteString -> [Int] in\n        if noteString == \"o\" {\n\
    \            return Array(0..<4)\n        } else if noteString == \"o|\" {\n \
    \           return Array(0..<2)\n        } else if noteString == \".|\" {\n  \
    \          return Array(0..<1)\n        } else {\n            preconditionFailure(\"\
    note should be one of 'o', 'o|', 'o|', or 'o|')\")\n        }\n    }", "    var\
    \ music_array: [Int] = Array(repeating: 0, count: music_string.characters.count)\n\
    \n    music_string.replacingOccurrences(of: \"o\", with: \"0\")\n        .replacingOccurrences(of:\
    \ \".\", with: \"|\")\n        .replacingOccurrences(of: \"|\", with: \"0\")\n\
    \n    for i in 0..<music_string.characters.count {\n        if music_string.characters[i]\
    \ == \"0\" {\n            music_array[i] = 1\n        } else {\n            let\
    \ beat_count = Int(music_string[i])\n            music_array[i] = beat_count\n\
    \        }\n    }\n\n    return music_array", "    var result: [Int] = [0, 0]\n\
    \n    music_string.split(separator: \" \").forEach { music_string in\n       \
    \ music_string = music_string.replacingOccurrences(of: \"\\\\|\", with: \"\")\n\
    \        music_string = music_string.replacingOccurrences(of: \"\\\\o\", with:\
    \ \"\")\n\n        if music_string.count == 0 {\n            music_string = \"\
    o\"\n        }\n\n        if music_string.count == 1 {\n            result[0]\
    \ += 4\n        }\n\n        if music_string.count == 2 {\n            result[0]\
    \ += 2\n            result[1] += 2\n        }\n\n        if music_string.count\
    \ == 3 {\n            result[0] += 2\n            result[1] += 2\n           \
    \ result[2] += 1\n        }\n\n        if music_string.count == 4 {\n        \
    \    result[0] += 1\n            result[1] += 1\n            result[2] += 1\n\
    \            result[3] += 1\n        }\n\n        if music_string.count > 4 {\n\
    \            result[0] += 4\n            result[1] += 4\n            result[2]\
    \ += 4\n            result[3] += 4\n        }\n    }\n\n    return result", " \
    \   let note_symbols = music_string.split(separator: \" \")\n    var note_strings:\
    \ [String] = []\n    for note_symbol in note_symbols {\n        var note_string\
    \ = \"\"\n        let note_length = note_symbol.characters.count\n        for\
    \ index in 0..<note_length {\n            note_string += note_symbol.characters[index]\n\
    \        }\n        note_strings.append(note_string)\n    }\n\n    var beats =\
    \ [Int]()\n    for note in note_strings {\n        if note.characters.first ==\
    \ \"o\" {\n            beats.append(4)\n        }\n        else if note.characters.first\
    \ == \"o|\" {\n            beats.append(2)\n        }\n        else if note.characters.first\
    \ == \".\" {\n            beats.append(1)\n        }\n    }\n\n    return beats",
  "    \n    let splitString = music_string.split(separator: \"|\")\n    var beats\
    \ = [Int]()\n    for i in 0..<splitString.count {\n        let str = splitString[i]\n\
    \        if str.first == \"o\" {\n            beats.append(4)\n        } else\
    \ if str.first == \".\" {\n            beats.append(1)\n        } else {\n   \
    \         beats.append(0)\n        }\n    }\n    return beats", "    // Your code\
    \ here\n    if music_string == \"\" {\n        return []\n    }\n    music_string\
    \ = music_string.replacingOccurrences(of: \" \", with: \"\")\n    music_string\
    \ = music_string.replacingOccurrences(of: \"|\", with: \"\")\n    var beats_array\
    \ = [Int]()\n    var counter = 0\n    guard let music_array = music_string.components(separatedBy:\
    \ \"o|\") else {\n        return beats_array\n    }\n    for music_string_part\
    \ in music_array {\n        guard let beats = Int(music_string_part) else {\n\
    \            return beats_array\n        }\n        counter += 1\n        if counter\
    \ % 4 == 0 {\n            beats_array.append(beats)\n        } else {\n      \
    \      beats_array.append(beats * 2)\n        }\n    }\n    return beats_array",
  "    return music_string.components(separatedBy: \"\").enumerated().map({\n    \
    \    switch $0 {\n        case .element(let note, _):\n            return note\
    \ == \"o\" ? 4 : note == \"o|\" ? 2 : note == \".|\" ? 1 : 0\n        }\n    }).reversed().compactMap\
    \ { $0 }", "    var counts: [Int] = []\n    var beat = 0\n    var length = 0\n\
    \    var index = 0\n\n    if music_string.count > 36 {\n        beat = 0\n   \
    \ } else {\n        if music_string[index] != \" \" {\n            index += 1\n\
    \        }\n        if index < music_string.count {\n            length = index\
    \ - 2\n        } else {\n            length = 0\n        }\n    }\n    for _ in\
    \ 0..<length {\n        if index + 2 < music_string.count {\n            if music_string[index]\
    \ != \" \" {\n                counts.append(0)\n            } else {\n       \
    \         if music_string[index+1] == \"|\" {\n                    counts.append(4)\n\
    \                    beat += 4\n                    index += 1\n             \
    \   } else if music_string[index+1] == \"o\" {\n                    counts.append(2)\n\
    \                    beat += 2\n                    index += 1\n             \
    \   } else {\n                    counts.append(1)\n                    beat +=\
    \ 1\n                    index += 1\n                }\n            }\n      \
    \      index += 1\n        }\n    }\n    return counts", '    return music_string.characters.split(separator:
    "|").map({ String($0).characters.split(separator: "o").map({ Int(String($0)).characters.split(separator:
    " ").map({ Int($0).characters.count })}) })', "    let notes_array = music_string.components(separatedBy:\
    \ \"|\")\n    let beats_array = notes_array.components(separatedBy: \"o\")\n \
    \   var counts: [Int] = [0]\n    beats_array.forEach {\n        let note_index\
    \ = notes_array.indexOf($0)\n        counts[note_index] = (counts[note_index]\
    \ ?? 0) + beats_array.count\n    }\n    return counts", "    // Convert string\
    \ to array of ASCII code points\n    var strArray = music_string.unicodeScalars\n\
    \n    // Initialize notes array to 0\n    var notes = [Int](repeating: 0, count:\
    \ 100)\n\n    // Define a function to search for the next note in the string\n\
    \    var nextNote = strArray.startIndex.advanced(by: 1)\n    func searchForNextNote()\
    \ {\n        // If the string has reached the end\n        if nextNote == strArray.endIndex\
    \ {\n            // All notes have been found\n            return notes\n    \
    \    }\n\n        // If the string has found a note in the correct octave\n  \
    \      if let note = strArray[nextNote] as? UnicodeScalar {\n            // Check\
    \ if it is a note or not\n            switch note.value {\n            case UnicodeScalar(\"\
    o\"...\"o\"): break\n            case UnicodeScalar(\"o|\"...\".|\"): notes[1]\
    \ += 1\n            case UnicodeScalar(\".|\"): notes[4] += 1\n            default:\
    \ print(\"\\(note.value) is not a valid note\")\n            }\n        }\n\n\
    \        // Search for the next note\n        nextNote = nextNote.advanced(by:\
    \ 1)\n        return searchForNextNote()\n    }\n\n    return searchForNextNote()",
  "    var beats_per_note = [Int]()\n    let split_string = music_string.components(separatedBy:\
    \ \" \")\n    for note in split_string {\n        if note.characters.last == \"\
    |\" {\n            beats_per_note.append(4)\n        } else {\n            beats_per_note.append(1)\n\
    \        }\n    }\n    return beats_per_note", "    var beats_numbers = [Int]()\n\
    \    guard let music_notes = music_string.split(separator: \"|\") else {\n   \
    \     return beats_numbers\n    }\n    for note in music_notes {\n        if note\
    \ == \"o\" {\n            beats_numbers.append(4)\n        } else if note == \"\
    o|\" {\n            beats_numbers.append(2)\n        } else if note == \".|\"\
    \ {\n            beats_numbers.append(1)\n        }\n    }\n    return beats_numbers",
  "    var beats = [Int]()\n    var note_num = 0\n\n    for i in 0..<music_string.characters.count\
    \ {\n        guard let char = music_string.characters[i] else { return beats }\n\
    \n        switch char {\n        case 'o': // whole note, lasts four beats\n \
    \           beats.append(4)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n            note_num += 1\n            beats.append(0)\n\
    \            note_num += 1\n            beats.append(0)\n            note_num\
    \ += 1\n            beats.append(0)\n", "    return music_string.componentsSeparatedByString(\"\
    .\").map { note -> Int in\n        let note = note.substringToIndex(note.startIndex.advancedBy(1))\n\
    \        let beats = note.characters.count\n        var beat = 0\n        if note.hasPrefix(\"\
    o|\") {\n            beat = beats * 2\n        } else if note.hasPrefix(\"o\"\
    ) {\n            beat = 1\n        } else if note.hasPrefix(\".|\") {\n      \
    \      beat = 1\n        }\n        return beat\n    }", "    let music_array\
    \ = music_string.characters.split(separator: \"|\").map({ String($0) }).map({\
    \ String($0) }).reduce(into: [Int](), { $0.append($1) })\n    let beats_per_note\
    \ = music_array.count - 1\n    var beats_per_block = beats_per_note\n    while\
    \ beats_per_block > 0 {\n        beats_per_block -= beats_per_note\n        beats_per_note\
    \ += beats_per_note\n    }\n    return music_array", "    let music_tokens = music_string.characters.split(separator:\
    \ \" \")\n\n    var beats = [Int]()\n    for token in music_tokens {\n       \
    \ if token.characters.count > 0 {\n            let note = token.characters.first\
    \ ?? \"\"\n            let length = note.count\n            if note == \"o\" {\n\
    \                beats.append(4)\n            } else if note == \"o|\" {\n   \
    \             beats.append(2)\n            } else if note == \".|\" {\n      \
    \          beats.append(1)\n            } else if note == \".\" {\n          \
    \      beats.append(1)\n                beats.append(1)\n            } else {\n\
    \                beats.append(4)\n            }\n        }\n    }\n    return\
    \ beats", "    let music_string_to_beats: [(String, Int)] = [\n        (\".\"\
    , 2),\n        (\"|\", 1),\n        (\"o\", 4)\n    ]\n\n    var music_notes:\
    \ [Int] = []\n    for (note_string, beats) in music_string_to_beats {\n      \
    \  if note_string == \"\" {\n            music_notes.append(beats)\n        }\
    \ else {\n            music_notes.append(beats + music_notes[music_notes.count\
    \ - 1])\n        }\n    }\n    return music_notes", "    let music_list = music_string.componentsSeparatedByString(\"\
    \ \")\n    var result = [Int]()\n    for music in music_list {\n        var beats\
    \ = 0\n        var last = UInt8(1)\n        let music_note = music.lowercaseString\n\
    \        for n in music_note.unicodeScalars {\n            switch n {\n      \
    \      case .O:\n                beats += 4\n            case .O:\n          \
    \      beats += 2\n            case .O:\n                beats += 1\n        \
    \    default:\n                break\n            }\n            last = UInt8(0)\n\
    \        }\n        result.append(beats)\n    }\n    return result", "    var\
    \ beats = [Int]()\n\n    for music_char in music_string {\n        switch music_char\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \"|\":\n            beats.append(1)\n\
    \        default:\n            beats.append(0)\n        }\n    }\n    return beats",
  "    return music_string.unicodeScalars.filter({ $0.value > 0 })\n        .map({\
    \ Int($0.value - 65) })\n        .sorted()", "    var note_strs = music_string.split(separator:\
    \ \"|\")\n    var beats_strs = note_strs.map { $0.split(separator: \" \") }\n\
    \    var beats = beats_strs.flatMap { $0.map { Int($0) } }\n    let notes = beats.map\
    \ { note in\n        switch note {\n        case 0: return 0\n        case 1:\
    \ return 1\n        case 2: return 2\n        case 3: return 3\n        case 4:\
    \ return 4\n        case 5: return 5\n        case 6: return 6\n        case 7:\
    \ return 7\n        case 8: return 8\n        case 9: return 9\n        case 10:\
    \ return 10\n        case 11: return 11\n        case 12: return 12\n        case\
    \ 13: return 13\n        case 14: return 14\n        case 15: return 15\n    \
    \    case 16: return 16\n        case 17: return 17\n        case 18: return 18\n\
    \        case 19: return 19\n        case 20: return 20\n        case 21: return\
    \ 21\n        case 22: return 22\n        case 23: return 23\n        case 24:\
    \ return 24\n        case 25: return 25\n        case 26: return 26\n        case\
    \ 27: return 27\n        case 28: return 28\n        case 29: return 29\n    \
    \    case 30: return 30\n        case 31: return 31\n        case 32: return 32\n\
    \        case 33: return 33\n        case 34: return 34\n        case 35: return\
    \ 35\n        case 36: return 36\n        case 37: return 37\n        case 38:\
    \ return 38\n        case 39: return 39\n        case 40: return 40\n        case\
    \ 41: return 41\n        case 42: return 42\n        case 43: return 43\n    \
    \    case 44: return 44\n        case 45: return 45\n        case 46: return 46\n\
    \        case 47: return 47\n        case 48: return 48\n        case 49: return\
    \ 49\n        case 50: return 50\n        case 51: return 51\n        case 52:\
    \ return 52\n        case 53: return 53\n        case 54: return 54\n        case\
    \ 55: return 55\n        case 56: return 56\n        case 57: return 57\n    \
    \    case 58: return 58\n        case 59: return 59\n        case 60: return 60\n\
    \        case 61: return 61\n        case 62: return 62\n        case 63: return\
    \ 63\n        case 64: return 64\n        case 65: return 65\n        case 66:\
    \ return 66\n        case 67: return 67\n        case 68: return 68\n        case\
    \ 69: return 69\n        case 70: return 70\n        case 71: return 71\n    \
    \    case 72: return 72\n        case 73: return 73\n        case 74: return 74\n\
    \        case 75: return 75\n        case 76: return 76\n        case 77: return\
    \ 77\n        case 78: return 78\n        case 79: return 79\n        case 80:\
    \ return 80\n        case 81: return 81\n        case 82: return 82\n        case\
    \ 83: return 83\n        case 84: return 84\n        case 85: return 85\n    \
    \    case 86: return 86\n        case 87: return 87\n        case 88: return ",
  "    var beats = Array(repeating: 0, count: music_string.characters.count)\n   \
    \ for note in music_string.characters {\n        if note == \"o\" {\n        \
    \    beats[note.offset(to: 0)] -= 1\n            beats[note.offset(to: 1)] -=\
    \ 1\n        } else if note == \"o|\" {\n            beats[note.offset(to: 0)]\
    \ -= 1\n            beats[note.offset(to: 1)] -= 1\n            beats[note.offset(to:\
    \ 2)] -= 1\n        } else if note == \".|\" {\n            beats[note.offset(to:\
    \ 0)] -= 1\n            beats[note.offset(to: 1)] -= 1\n            beats[note.offset(to:\
    \ 2)] -= 1\n            beats[note.offset(to: 3)] -= 1\n        } else {\n   \
    \         beats[note.offset(to: 0)] += 1\n        }\n    }\n    return beats",
  "    music_string = music_string.replace(\" \", \"\") // Remove spaces\n\n    var\
    \ note_beats = [Int]()\n\n    var current_note = String()\n    var current_beats\
    \ = Int()\n    var current_note_len = 0\n\n    for _ in music_string {\n     \
    \   if let char = String(music_string.characterAtIndex(music_string.startIndex.advancedBy(current_note_len))).lowercased()\
    \ {\n            if char == \"o\" {\n                if current_note != \"\" {\n\
    \                    note_beats.append(current_beats)\n                    current_beats\
    \ = 0\n                }\n                current_note = String(music_string.characterAtIndex(music_string.startIndex.advancedBy(current_note_len))\
    \ + \"|\")\n                music_string.characterAtIndex(music_string.startIndex.advancedBy(current_note_len))\n\
    \                current_note_len = music_string.startIndex.advancedBy(current_note_len)\
    \ + 1\n            }\n            else if char == \"|\" {\n                if\
    \ current_note != \"\" {\n                    note_beats.append(current_beats)\n\
    \                    current_beats = 0\n                }\n                current_note\
    \ = String(music_string.characterAtIndex(music_string.startIndex.advancedBy(current_note_len))\
    \ + \"|\")\n                current_note_len = music_string.startIndex.advancedBy(current_note_len)\
    \ + 1\n            }\n            else if char == \".\" {\n                if\
    \ current_note != \"\" {\n                    note_beats.append(current_beats)\n\
    \                    current_beats = 0\n                }\n                current_note\
    \ = String(music_string.characterAtIndex(music_string.startIndex.advancedBy(current_note_len))\
    \ + \"|\")\n                music_string.characterAtIndex(music_string.startIndex.advancedBy(current_note_len))\n\
    \                current_note_len = music_string.startIndex.advancedBy(current_note_len)\
    \ + 1\n            }\n            else if char == \"!\" {\n                note_beats.append(current_beats)\n\
    \                note_beats.append(current_beats)\n                note_beats.append(current_beats)\n\
    \                note_beats.append(current_beats)\n                current_beats\
    \ = 0\n                current_note = \"\"\n            }\n            else {\n\
    \                if let note_len = Int(music_string.characterAtIndex(music_string.startIndex.advancedBy(current_note_len))\
    \ + String(music_string.characterAtIndex(music_string.startIndex.advancedBy(current_note_len))).lowercased())\
    \ {\n                    if note_bearers[note_len] == 0 {\n                  \
    \      current_beats = 0\n                    }\n                    else {\n\
    \                        current_beats = current_beats * bearers_scale + bearers_scale[note_len]\n\
    \                    }\n                }\n                else {\n          \
    \          if current_note != \"\" {\n                        note_beats.append(current_beats)\n\
    \                        current_beats = 0", "    var arr = [Int]()\n    var notes\
    \ = music_string.characters\n    for char in notes {\n        var beats = 0\n\
    \        switch char {\n        case \"o\":\n            beats = 4\n         \
    \   break\n        case \"o|\":\n            beats = 2\n            break\n  \
    \      case \".|\":\n            beats = 1\n            break\n        default:\n\
    \            break\n        }\n        arr.append(beats)\n    }\n    return arr",
  '    return parse_music_aux(music_string, 0)', "    var beats_per_note = [Int]()\n\
    \n    let string_array = music_string.components(separatedBy: \" \").map{String($0)}\n\
    \    let note_string = \".o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o\"\n    let note_string\
    \ = note_string.components(separatedBy: \"|\")\n    let note_count = note_string.count\n\
    \n    guard note_count == string_array.count else { return beats_per_note }\n\n\
    \    var beat = 0\n    for i in string_array {\n        if i == \"o\" {\n    \
    \        beats_per_note.append(beat)\n        }\n\n        beat = beat+4\n   \
    \ }\n\n    return beats_per_note", '    return music_string.split(separator: "
    ").compactMap { Int($0) }', "    var beats: [Int] = []\n    var current_beat =\
    \ 0\n    for symbol in music_string {\n        if symbol == \"o\" {\n        \
    \    if current_beat < beats.count {\n                beats[current_beat] += 1\n\
    \            }\n            current_beat += 1\n        } else if symbol == \"\
    o|\" {\n            if current_beat < beats.count {\n                beats[current_beat]\
    \ += 2\n            }\n            current_beat += 1\n        } else if symbol\
    \ == \".\" {\n            if current_beat < beats.count {\n                beats[current_beat]\
    \ += 1\n            }\n            current_beat += 1\n        } else {\n     \
    \       current_beat += 1\n        }\n    }\n    return beats", "    // TODO:\
    \ Use regexp or another tool to parse music string\n    return []", '    return
    parse_music_helper(music_string, 0, "")', "    var beatCounts = [Int]()\n    var\
    \ lastNoteIndex = 0\n    for character in music_string {\n        if character\
    \ == \"o\" {\n            beatCounts.append(4)\n            lastNoteIndex = 0\n\
    \        } else if character == \"o|\" {\n            beatCounts.append(2)\n \
    \           lastNoteIndex = 0\n        } else if character == \".|\" {\n     \
    \       beatCounts.append(1)\n            lastNoteIndex = 0\n        } else {\n\
    \            if lastNoteIndex > 0 {\n                beatCounts[lastNoteIndex]\
    \ += character == \".|\" ? 1 : character == \"o|\" ? 2 : 3\n            }\n  \
    \          lastNoteIndex += 1\n        }\n    }\n    return beatCounts", "   \
    \ return music_string\n        .split(\" \", maxSplit: music_string.count - 1)\n\
    \        .map { noteString in\n            guard noteString != \".\" else { return\
    \ 0 }\n            guard noteString != \"o\" else { return 0 }\n            guard\
    \ noteString != \"o|\" else { return 0 }\n            guard noteString != \".|\"\
    \ else { return 0 }\n            guard noteString != \"o|\" else { return 0 }\n\
    \            guard noteString != \".|\" else { return 0 }\n            guard noteString\
    \ != \"o|\" else { return 0 }\n            return 4\n        }\n        .reduce(0,\
    \ +)", "    guard let music_notes = music_string.components(separatedBy: \" \"\
    ) else {\n        return []\n    }\n\n    var beats_count = 0\n    var current_beat\
    \ = 1\n\n    // Iterate through each note and determine which type of note it\
    \ is\n    for note in music_notes {\n        if note == \"o\" {\n            beats_count\
    \ = 1\n        } else if note == \"o|\" {\n            beats_count = 2\n     \
    \   } else if note == \".|\" {\n            beats_count += 1\n        }\n\n  \
    \      current_beat += beats_count\n    }\n\n    // Return the beats count\n \
    \   return Array(repeating: beats_count, count: music_notes.count)", "    \n \
    \   // TODO: implement parsing of notes\n    \n    // Okay, now comes the hardest\
    \ part - parsing\n    // You will need to implement parsing of\n    // notes,\
    \ each note have it's own duration,\n    // as well as \"unparseable\" notes (notes\
    \ that weren't parsed)\n    // and those notes are separated by space\n\n    //\
    \ TODO: implement parsing of notes\n\n    // TODO: implement parsing of notes\n\
    \n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing of\
    \ notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing\
    \ of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement\
    \ parsing of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO:\
    \ implement parsing of notes\n\n    // TODO: implement parsing of notes\n\n  \
    \  // TODO: implement parsing of notes\n\n    // TODO: implement parsing of notes\n\
    \n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing of\
    \ notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing\
    \ of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement\
    \ parsing of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO:\
    \ implement parsing of notes\n\n    // TODO: implement parsing of notes\n\n  \
    \  // TODO: implement parsing of notes\n\n    // TODO: implement parsing of notes\n\
    \n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing of\
    \ notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing\
    \ of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement\
    \ parsing of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO:\
    \ implement parsing of notes\n\n    // TODO: implement parsing of notes\n\n  \
    \  // TODO: implement parsing of notes\n\n    // TODO: implement parsing of notes\n\
    \n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing of\
    \ notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing\
    \ of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement\
    \ parsing of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO:\
    \ implement parsing of notes\n\n    // TODO: implement parsing of notes\n\n  \
    \  // TODO: implement parsing of notes\n\n    // TODO: implement parsing of notes\n\
    \n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing of\
    \ notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement parsing\
    \ of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO: implement\
    \ parsing of notes\n\n    // TODO: implement parsing of notes\n\n    // TODO:\
    \ implement parsing of notes\n\n    // TODO: implement parsing of notes\n\n  \
    \  // TODO: ", "    guard !music_string.isEmpty else { return [] }\n    var beats_per_note\
    \ = [Int]()\n    var beats_count = [0]\n    var current_beat = 0\n    var current_note\
    \ = 0\n    var last_note = 0\n    var last_beat_count = 0\n    var last_beat_direction\
    \ = .None\n\n    for c in music_string {\n        if c == \"o\" {\n          \
    \  beats_per_note.append(0)\n            beats_count[0] = current_beat + last_beat_count\n\
    \            current_beat = 0\n            current_note = 1\n            last_note\
    \ = last_beat_count + last_beat_direction == .Left\n            last_beat_direction\
    \ = .None\n            last_beat_count = 0\n        } else if c == \"o|\" {\n\
    \            beats_per_note.append(1)\n            beats_count[0] = current_beat\
    \ + last_beat_count\n            current_beat = 0\n            current_note =\
    \ 2\n            last_note = last_beat_count + last_beat_direction == .Left\n\
    \            last_beat_direction = .Left\n            last_beat_count = 0\n  \
    \      } else if c == \".|\" {\n            beats_per_note.append(2)\n       \
    \     beats_count[0] = current_beat + last_beat_count\n            current_beat\
    \ = 0\n            current_note = 3\n            last_note = last_beat_count +\
    \ last_beat_direction == .Left\n            last_beat_direction = .Right\n   \
    \         last_beat_count = 0\n        } else {\n            beats_per_note.append(0)\n\
    \            beats_count[0] = current_beat + last_beat_count\n            current_beat\
    \ = 0\n        }\n        current_beat += beats_count[current_note]\n    }\n \
    \   return beats_per_note", "    guard let music_notes = music_string.lowercased().components(separatedBy:\
    \ \",.\") else {\n        return []\n    }\n    var beats = 0\n    var notes:\
    \ [Int] = []\n    for note in music_notes {\n        switch note {\n        case\
    \ \"o\":\n            notes.append(4)\n            beats += 4\n        case \"\
    o|\":\n            notes.append(2)\n            beats += 2\n        case \".|\"\
    :\n            notes.append(1)\n            beats += 1\n        default:\n   \
    \         continue\n        }\n    }\n    return notes", "    let music = music_string.components(separatedBy:\
    \ \" \")\n    guard music.count == 26 else {\n        return []\n    }\n\n   \
    \ var notes = [Int]()\n    guard let note_count = music[0] else { return notes\
    \ }\n    for i in 1...note_count {\n        guard let note = music[i] else { break\
    \ }\n        if note == \"o\" {\n            notes.append(4)\n        } else if\
    \ note == \"o|\" {\n            notes.append(2)\n        } else if note == \"\
    .|\" {\n            notes.append(1)\n        }\n    }\n\n    return notes", " \
    \   let split_music = music_string.characters.split { $0 == \"|\" || $0 == \"\
    o\" }\n    let beats = split_music\n        .enumerated()\n        .map { $0.offset(by:\
    \ 1).element + 1 }\n    return beats", "    var notes = [Int]()\n    var beats\
    \ = 0\n    var last_beat = 0\n    var repeats = false\n    for character in music_string\
    \ {\n        switch character {\n        case \"o\":\n            notes.append(last_beat)\n\
    \            last_beat = 0\n            break\n        case \"o|\":\n        \
    \    notes.append(last_beat)\n            last_beat = 0\n            repeats =\
    \ true\n            break\n        case \".|\":\n            notes.append(beats)\n\
    \            beats = 0\n            break\n        default:\n            beats\
    \ = beats*5+Int(character)\n            last_beat = beats\n        }\n    }\n\
    \    if repeats {\n        for i in 1..<notes.count {\n            notes[i] +=\
    \ notes[i-1]\n        }\n    }\n    return notes", "    guard let music = music_string.unicodeScalars\
    \ else {\n        return []\n    }\n    var beats: Int = 0\n    var beat: Int\
    \ = 0\n    var notes: [Int] = []\n\n    for note in music {\n        switch note\
    \ {\n        case \"o\":\n            beats += 4\n            beat = 0\n     \
    \       notes.append(beats)\n            break\n        case \"o|\":\n       \
    \     beats += 2\n            beat = 0\n            notes.append(beats)\n    \
    \        break\n        case \".|\":\n            beats += 1\n            beat\
    \ = 0\n            notes.append(beats)\n            break\n        default:\n\
    \            beat += 1\n            beats = 0\n            notes.append(beats)\n\
    \        }\n    }\n    return notes", "    guard music_string != \"\" else { return\
    \ [] }\n    \n    var beats = [Int]()\n    for element in music_string.split(separator:\
    \ \"|\") {\n        beats.append(element == \"o\" ? 1 : element == \".\" ? 3 :\
    \ 4)\n    }\n    return beats", "    var music = [Int]()\n    var current_beat\
    \ = 0\n    var current_note = 0\n    let current_note_length: Int = Int(music_string.characters.count))\n\
    \    for (index, char) in music_string.enumerated() {\n        if char == \"o\"\
    \ {\n            music[current_beat] = current_note\n            current_beat\
    \ += 1\n            current_note = 0\n        } else if char == \"o|\" {\n   \
    \         music[current_beat] = current_note\n            current_beat += 1\n\
    \            current_note += 1\n        } else if char == \".|\" {\n         \
    \   music[current_beat] = current_note\n            current_beat += 1\n      \
    \      current_note += 2\n        } else {\n            current_note = int(char)\n\
    \        }\n    }\n    music[current_beat] = current_note\n    return music",
  "    guard music_string != \"\" else {\n        return []\n    }\n    \n    guard\
    \ let music_array = music_string.components(separatedBy: \" \") else {\n     \
    \   return []\n    }\n    \n    let music_array_size = music_array.count\n   \
    \ \n    var beats = [Int]()\n    \n    for i in 0..<music_array_size {\n     \
    \   let note = music_array[i]\n        \n        if note.count == 1 {\n      \
    \      beats.append(1)\n        } else if note.count == 2 {\n            beats.append(4)\n\
    \        } else if note.count == 3 {\n            beats.append(4)\n          \
    \  beats.append(2)\n        } else if note.count == 4 {\n            beats.append(4)\n\
    \            beats.append(2)\n            beats.append(1)\n        } else if note.count\
    \ > 4 {\n            beats.append(4)\n            beats.append(2)\n          \
    \  beats.append(1)\n            beats.append(1)\n            beats.append(1)\n\
    \        }\n    }\n    \n    return beats", "    var notes: [Int] = []\n    var\
    \ beat_counts: [Int] = []\n    var last_beat: [Int]\n    music_string = music_string.lowercased()\n\
    \    \n    for note in music_string.characters {\n        switch note {\n    \
    \    case \"o\":\n            last_beat = [0, 0, 0, 0, 0]\n            beat_counts.append(0)\n\
    \        case \"o|\":\n            last_beat = [0, 0, 0, 0, 0]\n            beat_counts.append(0)\n\
    \        case \".|\":\n            last_beat = [0, 0, 0, 0, 0]\n            beat_counts.append(0)\n\
    \        default:\n            last_beat = [0, 0, 0, 0, 0]\n            beat_counts.append(0)\n\
    \        }\n    }\n    \n    for note in music_string.characters {\n        switch\
    \ note {\n        case \"o\":\n            last_beat[0] = last_beat[0] + 1\n \
    \           if last_beat[0] == 4 {\n                notes.append(1)\n        \
    \    } else {\n                notes.append(0)\n            }\n        case \"\
    o|\":\n            last_beat[1] = last_beat[1] + 1\n            if last_beat[1]\
    \ == 2 {\n                notes.append(2)\n            } else {\n            \
    \    notes.append(0)\n            }\n        case \".|\":\n            last_beat[2]\
    \ = last_beat[2] + 1\n            if last_beat[2] == 1 {\n                notes.append(3)\n\
    \            } else {\n                notes.append(0)\n            }\n      \
    \  default:\n            last_beat[3] = last_beat[3] + 1\n            if last_beat[3]\
    \ == 1 {\n                notes.append(4)\n            } else {\n            \
    \    notes.append(0)\n            }\n        }\n    }\n    \n    for note in music_string.characters\
    \ {\n        switch note {\n        case \"o\":\n            last_beat[0] = last_beat[0]\
    \ + 1\n            if last_beat[0] == 4 {\n                notes.append(1)\n \
    \           } else {\n                notes.append(0)\n            }\n       \
    \ case \"o|\":\n            last_beat[1] = last_beat[1] + 1\n            if last_beat[1]\
    \ == 2 {\n                notes.append(2)\n            } else {\n            \
    \    notes.append(0)\n            }\n        case \".|\":\n            last_beat[2]\
    \ = last_beat[2] + 1\n            if last_beat[2] == 1 {\n                notes.append(3)\n\
    \            } else {\n                notes.append(0)\n            }\n      \
    \  default:\n            last_beat[3] = last_beat[3] + 1\n            if last_beat[3]\
    \ == 1 {\n                notes.append(4)\n            } else {\n            \
    \    notes.append(0)\n            }\n        }\n    }\n    \n    for note in music_string.characters\
    \ {\n        switch note {\n        case \"o\":\n            last_beat[0] = last_beat[0]\
    \ + 1\n            if last_beat[0] == 4 {\n                notes.append(1)\n \
    \           } else {\n                notes.append(0)\n            }\n       \
    \ case \"o|\":\n            last_beat[1] = last_beat[1] + 1\n            if last_beat[1]\
    \ == 2 {\n                notes.append(2)\n            } else {\n            \
    \    notes.append(", "    var beats: Int = 0\n    var interval: Int = 0\n    var\
    \ note = \"\"\n    var notes_number = 0\n    var number_of_notes_number = 0\n\
    \    var number_of_notes = 0\n    var current_note = \"\"\n    var is_last_note\
    \ = false\n    var is_first_note = false\n    \n    for c in music_string {\n\
    \        switch c {\n        case \"o\":\n            if current_note != \".\"\
    \ {\n                if is_last_note {\n                    notes_number += interval\n\
    \                }\n                beats += interval\n                interval\
    \ = 0\n                number_of_notes_number += 1\n                current_note\
    \ = \".\"\n                is_last_note = false\n                is_first_note\
    \ = false\n                note = \"\"\n            } else {\n               \
    \ notes_number += interval\n            }\n        case \"o|\":\n            if\
    \ current_note != \".\" {\n                if is_last_note {\n               \
    \     notes_number += interval\n                }\n                beats += interval\n\
    \                interval = 0\n                number_of_notes_number += 1\n \
    \               current_note = \".\"\n                is_last_note = false\n \
    \               is_first_note = false\n                note = \"\"\n         \
    \   } else {\n                notes_number += interval\n            }\n      \
    \  case \".|\":\n            if current_note != \".\" {\n                if is_last_note\
    \ {\n                    notes_number += interval\n                }\n       \
    \         beats += interval\n                interval = 0\n                number_of_notes_number\
    \ += 1\n                current_note = \".\"\n                is_last_note = true\n\
    \                is_first_note = false\n                note = \"\"\n        \
    \    } else {\n                notes_number += interval\n            }\n     \
    \   default:\n            if note != \".\" {\n                if is_last_note\
    \ {\n                    notes_number += interval\n                }\n       \
    \         beats += interval\n                interval = 0\n                number_of_notes_number\
    \ += 1\n                note = \"\"\n                current_note = \"\"\n   \
    \         } else {\n                notes_number += interval\n            }\n\
    \        }\n        note += String(c)\n    }\n    return Array(repeating: beats,\
    \ count: number_of_notes_number)", "    // Your code here\n    var beatsArray:\
    \ [Int] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    var last: Int = 0\n    var first:\
    \ Int = 0\n    var inBetween: Int = 0\n\n    beatsArray[first] = last\n    beatsArray[last]\
    \ = first\n\n    for char in music_string {\n        if char == \"o\" {\n    \
    \        last = first + 4\n            first += 4\n        }\n        else if\
    \ char == \"o|\" {\n            last = first + 2\n            first += 2\n   \
    \     }\n        else if char == \".|\" {\n            last = first + 1\n    \
    \        first += 1\n        }\n        else {\n            first = last\n   \
    \         last = first + 4\n            first += 4\n            inBetween = 1\n\
    \        }\n        beatsArray[last] = first\n\n        if inBetween == 4 {\n\
    \            first += 4\n            inBetween = 0\n        }\n\n    }\n    return\
    \ beatsArray", "    // TODO: Your code here\n\n    return []", "    var counter\
    \ = [Int]()\n    for char in music_string {\n        counter[char == \"o\" ? 0\
    \ : 1] += 1\n    }\n    return counter", "    let notes = music_string.split(separator:\
    \ \" \")\n    let beats_per_note = Int32(notes.count / 4)\n    let beats_count\
    \ = Int32(notes.count % 4)\n    var notes_array = [Int]()\n    var index = 0\n\
    \    while index < notes.count {\n        var note = Int32(notes[index])\n   \
    \     var beats = 0\n        if note >= 48 && note <= 57 {\n            note =\
    \ note - 48\n            beats = Int(beats_per_note)\n        } else if note >=\
    \ 64 && note <= 73 {\n            note = note - 64\n            beats = Int(beats_per_note\
    \ * 2)\n        } else if note >= 76 && note <= 83 {\n            note = note\
    \ - 76\n            beats = Int(beats_per_note * 3)\n        } else if note >=\
    \ 86 && note <= 93 {\n            note = note - 86\n            beats = Int(beats_per_note\
    \ * 4)\n        } else {\n            note = note - 94\n            beats = Int(beats_count)\n\
    \        }\n        notes_array.append(beats)\n        index++\n    }\n    return\
    \ notes_array", "    // Add your code here\n    var beats = [Int]()\n    let length\
    \ = music_string.characters.count\n    for (_, position) in music_string.enumerated()\
    \ {\n        let c = music_string[position]\n        if c == \"o\" {\n       \
    \     beats.append(1)\n        }\n        else if c == \"|\" {\n            beats.append(2)\n\
    \        }\n        else if c == \".\" {\n            beats.append(4)\n      \
    \  }\n    }\n    return beats", "    var notes: [Int] = [0]\n    var current_beat\
    \ = 0\n    for c in music_string {\n        switch c {\n        case \".\":\n\
    \            notes.append(current_beat)\n            current_beat = 0\n      \
    \  case \".|\":\n            current_beat = 1\n        case _:\n            current_beat++\n\
    \        default:\n            break\n        }\n    }\n    notes.append(current_beat)\n\
    \    return notes", "    var beats: Int = 0\n    var notes: [Int] = []\n    var\
    \ current: Int = 0\n    var last: Int = 0\n    var notesLast: Int = 0\n    var\
    \ lastNotes: [Int] = []\n    \n    // Convert input string to array\n    var musicArray\
    \ = music_string.components(separatedBy: \"|\")\n    \n    // Initialize counters\n\
    \    for index in 0..<musicArray.count {\n        notesLast = 0\n        last\
    \ = 0\n        \n        // Get first note of array\n        current = Int(musicArray[index])\
    \ ?? 0\n        \n        // Add one to counter and save note to array until it\
    \ changes note\n        lastNotes.append(last)\n        notes.append(current)\n\
    \        \n        // Set counter to next note\n        last = current\n     \
    \   notesLast = last\n        \n        // Iterate over next note\n        for\
    \ index2 in 0..<(index + 1) {\n            \n            // Change note depending\
    \ on how many notes are in between current note and last note\n            switch\
    \ notes[index2] {\n            case 0 ..< 4:\n                if notesLast ==\
    \ 4 {\n                    last = 4\n                } else if notesLast == 0\
    \ {\n                    last = 0\n                } else {\n                \
    \    last = 1\n                }\n            case 5:\n                last =\
    \ lastNotes[index2 + 1]\n            default:\n                last = 0\n    \
    \        }\n            \n            // Save note to array\n            lastNotes.append(last)\n\
    \            notes.append(current)\n            \n            // Set counter to\
    \ next note\n            last = current\n            notesLast = last\n      \
    \  }\n    }\n    \n    // Return array which contains how many beats each note\
    \ lasts\n    return notes", "    if music_string == \"\" {\n        return []\n\
    \    }\n\n    var num_beats = [Int]()\n    var notes: [String] = String()\n  \
    \  var num_beat = 1\n    var beat = 1\n\n    for c in music_string {\n       \
    \ if notes == nil {\n            notes = [c]\n            continue\n        }\n\
    \n        if c == '.' {\n            num_beats[num_beat - beat] += 1\n       \
    \     beat = 1\n            notes.removeLast()\n            num_beat = 1\n   \
    \         continue\n        }\n\n        if c == '|' {\n            num_beats[num_beat\
    \ - beat] += 1\n            beat = 1\n            notes.removeLast()\n       \
    \     num_beat = 1\n            notes.insert(0, '|')\n            continue\n \
    \       }\n\n        if c == 'o' {\n            num_beats[num_beat - beat] +=\
    \ 1\n            notes.removeLast()\n            num_beat = 1\n            beat\
    \ = 1\n            continue\n        }\n    }\n\n    return num_beats", "    var\
    \ result: [Int] = Array(0..<100)\n    for i in 0..<music_string.characters.count\
    \ {\n        let char_index = music_string.index(music_string.startIndex, offsetBy:\
    \ i)\n        let char = music_string[char_index]\n        switch char {\n   \
    \     case \"o\":\n            result[i] = 4\n        case \"o|\":\n         \
    \   result[i] = 2\n        case \".|\":\n            result[i] = 1\n        default:\n\
    \            result[i] = 0\n        }\n    }\n    return result", "    var beats_per_note:\
    \ [Int] = []\n    for note in music_string {\n        switch note {\n        case\
    \ \"o\":\n            beats_per_note.append(4)\n        case \"|\":\n        \
    \    beats_per_note.append(2)\n        default:\n            beats_per_note.append(1)\n\
    \        }\n    }\n    return beats_per_note", "    var beat_counts: [Int] = [0,\
    \ 0, 0, 0, 0, 0]\n    var beats_per_note = [0, 4, 2, 3, 2, 4, 3, 3]\n    let music_chars\
    \ = music_string.characters\n\n    for i in 0..<music_string.characters.count\
    \ {\n        let char = music_chars[i]\n        if char == \" \" {\n         \
    \   // skip the space\n        } else if char == \"o\" || char == \"O\" {\n  \
    \          // whole note\n            beats_per_note[beats_per_note.count - 4]\
    \ = beats_per_note[beats_per_note.count - 4] + 4\n            beat_counts[beat_counts.count\
    \ - 1] += 1\n        } else if char == \"|\" || char == \"|\" {\n            //\
    \ half note\n            beats_per_note[beats_per_note.count - 2] = beats_per_note[beats_per_note.count\
    \ - 2] + 2\n            beat_counts[beat_counts.count - 1] += 1\n        } else\
    \ if char == \".\" || char == \"|\" {\n            // quater note\n          \
    \  beats_per_note[beats_per_note.count - 1] = 1\n            beat_counts[beat_counts.count\
    \ - 1] += 1\n        } else {\n            fatalError(\"invalid music char: \\\
    (char)\")\n        }\n    }\n    return beat_counts", "    music_string = music_string.replacingOccurrences(of:\
    \ \".\", with: \"|\")\n    music_string = music_string.replacingOccurrences(of:\
    \ \"o\", with: \"|\")\n\n    let note_strings = music_string.components(separatedBy:\
    \ \"|\")\n    var note_string = note_strings.first!\n    var notes: [Int] = []\n\
    \    var beats = 0\n    var lasts: Int = 0\n\n    while note_string != \"\" {\n\
    \        note_strings.remove(at: note_strings.first!.firstIndex(of: \"|\"))\n\
    \        note_string = note_strings.first!\n        lasts = 0\n        notes.append(0)\n\
    \    }\n    note_string = note_strings.first!\n\n    while note_string != \"\"\
    \ {\n        let note_length = note_string.split(separator: \"|\").count\n   \
    \     note_string = note_strings.first!\n        lasts = 0\n        notes.append(0)\n\
    \        for _ in 0..<note_length {\n            let index = note_string.index(note_string.startIndex,\
    \ offsetBy: 1)\n            let beat = note_string[index..<(index + 3)].count\n\
    \            lasts += beat\n            notes.append(lasts)\n        }\n    }\n\
    \    return notes", "    guard let notes = music_string.components(separatedBy:\
    \ \" \") else {\n        return []\n    }\n    var result: [Int] = []\n    var\
    \ beats: [Int] = []\n    var currentBeats: [Int] = []\n    var lastNote = Int(notes[0])!\n\
    \    for note in notes {\n        guard let noteAsInt = Int(note) else {\n   \
    \         return result\n        }\n        let lastNoteIndex = notes.firstIndex(of:\
    \ note)\n        beats.append(noteAsInt)\n        if lastNoteIndex == 0 {\n  \
    \          currentBeats.append(noteAsInt)\n        } else {\n            for (idx,\
    \ noteInd) in notes.enumerated() {\n                if noteInd == note {\n   \
    \                 currentBeats.append(noteAsInt)\n                    break\n\
    \                }\n            }\n            guard noteAsInt - lastNote == 1\
    \ else {\n                result.append(0)\n                continue\n       \
    \     }\n            let beatsDifference = noteAsInt - lastNote\n            let\
    \ beatsDiffArray = [Int](repeating: beatsDifference, count: beats.count)\n   \
    \         let currentBeatsArray = [Int](repeating: currentBeats.last!, count:\
    \ beats.count)\n            let sumBeatsArray = currentBeatsArray.append(contentsOf:\
    \ beatsDiffArray)\n            result.append(sumBeatsArray.count)\n          \
    \  lastNote = noteAsInt\n        }\n    }\n    return result", "    // Initialize\
    \ an array and add the first element in the array as 1\n    var beats = [Int](repeating:\
    \ 1, count: music_string.count)\n    // Iterate through each character and find\
    \ the index\n    for (_, element) in music_string.enumerated() {\n        if element\
    \ == \"o\" {\n            beats[music_string.index(before: element)! - 1] += 1\n\
    \        } else if element == \"o|\" {\n            beats[music_string.index(before:\
    \ element)! - 1] += 2\n        } else if element == \".|\" {\n            beats[music_string.index(before:\
    \ element)! - 1] += 1\n        }\n    }\n    return beats", "    var beats = [Int]()\n\
    \    var current_beat = 0\n    for character in music_string {\n        // Ignore\
    \ whitespace\n        if character == ' ' {\n            continue\n        }\n\
    \        \n        // Ignore note endings\n        if character == '|' {\n   \
    \         current_beat = 0\n            beats.append(current_beat)\n         \
    \   continue\n        }\n        \n        // Ignore rests\n        if character\
    \ == 'r' {\n            continue\n        }\n        \n        // Parse note\n\
    \        switch character {\n        case 'o':\n            current_beat += 4\n\
    \            break\n        case 'o|':\n            current_beat += 2\n      \
    \      break\n        case '.|':\n            current_beat += 1\n            break\n\
    \        }\n        \n        beats.append(current_beat)\n    }\n    \n    return\
    \ beats", "    var temp = [Int]()\n    for i in 1..<music_string.count {\n   \
    \     if music_string[(i-1) % 8] != \".\" {\n            temp.append(4)\n    \
    \    } else {\n            if music_string[(i-1) % 8] == \".\" && music_string[(i+1)\
    \ % 8] == \".\" {\n                temp.append(1)\n            } else {\n    \
    \            temp.append(2)\n            }\n        }\n    }\n    return temp",
  "    \n    let notes = [\n        \"o\",\n        \"o|\",\n        \".|\",\n   \
    \ ]\n    var beats = [Int](repeating: 0, count: notes.count)\n    \n    guard\
    \ let notes_in_string = music_string.components(separatedBy: \" \") else {\n \
    \       print(\"No notes in string\")\n        return beats\n    }\n    \n   \
    \ var current_beat = 0\n    for note in notes_in_string {\n        \n        let\
    \ note_index = notes.index(of: note)\n        beats[note_index] += current_beat\n\
    \        \n        if note_index + 1 < notes.count {\n            current_beat\
    \ = 0\n        } else {\n            current_beat = 1\n        }\n        \n \
    \   }\n    return beats", "    let music_words = music_string.split(separator:\
    \ \" \")\n\n    var counts: [Int] = [0]\n    for i in 0 ..< music_words.count\
    \ {\n        if let last_char = music_words[i].last {\n            if last_char\
    \ == \"|\" {\n                counts[0] += 2\n            } else if last_char\
    \ == \"o\" {\n                counts[0] += 4\n            } else {\n         \
    \       counts[0] += 1\n            }\n        }\n    }\n\n    return counts",
  "    var note_count = 0\n    var notes_array = [Int]()\n    for c in music_string\
    \ {\n        if c == \".\" {\n            note_count += 1\n            notes_array.append(note_count)\n\
    \        } else {\n            if c == \"o\" || c == \"|\" {\n               \
    \ note_count += 1\n            } else {\n                note_count = 1\n    \
    \            notes_array.append(note_count)\n            }\n        }\n    }\n\
    \    return notes_array"]
stop_tokens:
- "\n}"
