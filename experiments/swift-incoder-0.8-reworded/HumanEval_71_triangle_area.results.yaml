language: swift
name: HumanEval_71_triangle_area
results:
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let ab2 = a * b\n    let bc2 = b * c\n    let ca2 = c * a\n    let triArea\
    \ = ab2 + bc2 + ca2\n    let area = (Double(triArea) ?? 0.0) / 2.0\n    if area\
    \ < 0.0 || area > 1.0 {\n        return -1\n    }\n    return area\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpu24t9acc/tmpu24t9acc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd69f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd66ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd66eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd66ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu24t9acc                        0x000056071b7cb1cf <unavailable> + 4559

    5    libc.so.6                          0x00002aadd6be0460 __libc_start_main +
    245

    6    tmpu24t9acc                        0x000056071b7cae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015440
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) / Double(1.0)\n    }\n    return\
    \ sqrt(Double(a) * Double(a) + Double(b) * Double(b) - Double(c) * Double(c))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6zs76oij.swift:16:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(Double(a) * Double(a) + Double(b) * Double(b) - Double(c) * Double(c))\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660015440
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n    return Double(area)\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbkyc7vpr.swift:13:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n               ^~~~\n/tmp/tmpbkyc7vpr.swift:13:21:\
    \ error: cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n                    ^~~\n/tmp/tmpbkyc7vpr.swift:13:33: error:\
    \ cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                ^~~\n/tmp/tmpbkyc7vpr.swift:13:45: error:\
    \ cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                            ^~~\n"
  stdout: ''
  timestamp: 1660015441
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n    let side2\
    \ = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(side1, 2.0))\n    let side3 = sqrt(pow(a,\
    \ 2.0) + pow(b, 2.0) + pow(c, 2.0) + pow(side1, 2.0))\n    \n    let area = sqrt(pow(a,\
    \ 2.0) + pow(b, 2.0) + pow(c, 2.0) + pow(side1, 2.0) + pow(side2, 2.0) + pow(side3,\
    \ 2.0))\n    \n    if area > 0.0 {\n        return round(area, 2)\n    }\n   \
    \ \n    return -1.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8407bud8.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n                ^~~~\n\
    /tmp/tmp8407bud8.swift:13:22: error: cannot find 'pow' in scope\n    let side1\
    \ = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n                     ^~~\n\
    /tmp/tmp8407bud8.swift:13:36: error: cannot find 'pow' in scope\n    let side1\
    \ = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n                          \
    \         ^~~\n/tmp/tmp8407bud8.swift:13:50: error: cannot find 'pow' in scope\n\
    \    let side1 = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n             \
    \                                    ^~~\n/tmp/tmp8407bud8.swift:14:17: error:\
    \ cannot find 'sqrt' in scope\n    let side2 = sqrt(pow(a, 2.0) + pow(b, 2.0)\
    \ + pow(side1, 2.0))\n                ^~~~\n/tmp/tmp8407bud8.swift:14:22: error:\
    \ cannot find 'pow' in scope\n    let side2 = sqrt(pow(a, 2.0) + pow(b, 2.0) +\
    \ pow(side1, 2.0))\n                     ^~~\n/tmp/tmp8407bud8.swift:14:36: error:\
    \ cannot find 'pow' in scope\n    let side2 = sqrt(pow(a, 2.0) + pow(b, 2.0) +\
    \ pow(side1, 2.0))\n                                   ^~~\n/tmp/tmp8407bud8.swift:14:50:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(a, 2.0) + pow(b,\
    \ 2.0) + pow(side1, 2.0))\n                                                 ^~~\n\
    /tmp/tmp8407bud8.swift:15:17: error: cannot find 'sqrt' in scope\n    let side3\
    \ = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0) + pow(side1, 2.0))\n        \
    \        ^~~~\n/tmp/tmp8407bud8.swift:15:22: error: cannot find 'pow' in scope\n\
    \    let side3 = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0) + pow(side1, 2.0))\n\
    \                     ^~~\n/tmp/tmp8407bud8.swift:15:36: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0) + pow(side1,\
    \ 2.0))\n                                   ^~~\n/tmp/tmp8407bud8.swift:15:50:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(a, 2.0) + pow(b,\
    \ 2.0) + pow(c, 2.0) + pow(side1, 2.0))\n                                    \
    \             ^~~\n/tmp/tmp8407bud8.swift:15:64: e"
  stdout: ''
  timestamp: 1660029538
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var triangleArea = 0.5 * math.pow(a, 2) + 0.5 * math.pow(b, 2) + 0.5 * math.pow(c,\
    \ 2)\n    if triangleArea < 0 {\n        return -1\n    } else {\n        return\
    \ Double(round(triangleArea / 1e2))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptg7nlr53.swift:13:30: error: cannot find 'math' in scope\n    var\
    \ triangleArea = 0.5 * math.pow(a, 2) + 0.5 * math.pow(b, 2) + 0.5 * math.pow(c,\
    \ 2)\n                             ^~~~\n/tmp/tmptg7nlr53.swift:13:53: error:\
    \ cannot find 'math' in scope\n    var triangleArea = 0.5 * math.pow(a, 2) + 0.5\
    \ * math.pow(b, 2) + 0.5 * math.pow(c, 2)\n                                  \
    \                  ^~~~\n/tmp/tmptg7nlr53.swift:13:76: error: cannot find 'math'\
    \ in scope\n    var triangleArea = 0.5 * math.pow(a, 2) + 0.5 * math.pow(b, 2)\
    \ + 0.5 * math.pow(c, 2)\n                                                   \
    \                        ^~~~\n/tmp/tmptg7nlr53.swift:17:23: error: cannot find\
    \ 'round' in scope\n        return Double(round(triangleArea / 1e2))\n       \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let ac = abs(c)\n    let bc = abs(b)\n    let ad = abs(a)\n    let area =\
    \ if bc > ac { return -1.0 } else { return (ad - bc) * (ad - bc) + (bc - ad) *\
    \ (bc - ad) }\n    \n    return round(area)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7n4mi6x3.swift:16:16: error: expected initial value after '='\n\
    \    let area = if bc > ac { return -1.0 } else { return (ad - bc) * (ad - bc)\
    \ + (bc - ad) * (bc - ad) }\n               ^\n/tmp/tmp7n4mi6x3.swift:16:15: error:\
    \ consecutive statements on a line must be separated by ';'\n    let area = if\
    \ bc > ac { return -1.0 } else { return (ad - bc) * (ad - bc) + (bc - ad) * (bc\
    \ - ad) }\n              ^\n              ;\n/tmp/tmp7n4mi6x3.swift:16:57: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n    let area = if\
    \ bc > ac { return -1.0 } else { return (ad - bc) * (ad - bc) + (bc - ad) * (bc\
    \ - ad) }\n                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n4mi6x3.swift:18:12: error: cannot find 'round' in scope\n    return\
    \ round(area)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660029159
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side = hypot(a, b)\n    let third = hypot(c, side)\n    if side == 0\
    \ || third <= side {\n        return Double(-1) // Invalid triangle given sides\
    \ don't add up to 0\n    }\n    return Double(a * b * c) / Double(side)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmphtrj25vu.swift:13:16: error: cannot find 'hypot' in scope\n   \
    \ let side = hypot(a, b)\n               ^~~~~\n/tmp/tmphtrj25vu.swift:14:17:\
    \ error: cannot find 'hypot' in scope\n    let third = hypot(c, side)\n      \
    \          ^~~~~\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1.0)\n    }\n    if a + c > b {\n\
    \        return Double(1.0)\n    }\n    if b + c > a {\n        return Double(-1.0)\n\
    \    }\n    return Double((a + b + c) / 2.0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7fevetsg.swift:22:31: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return Double((a + b + c) / 2.0)\n\
    \                  ~~~~~~~~~~~ ^ ~~~\n/tmp/tmp7fevetsg.swift:22:31: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    return Double((a + b + c) / 2.0)\n                         \
    \     ^\n"
  stdout: ''
  timestamp: 1660029079
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a * b * c) / ((a * b) + c + a)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_ntx9c6x.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (a * b * c) / ((a * b) + c + a)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if (a + b > c) {\n        if (a + c > b) {\n            if (b + c > a) {\n\
    \                let x = (a + b + c) / 2\n                let y = (b + c + a)\
    \ / 2\n                return Math.sqrt(x * x + y * y).toDouble()\n          \
    \  } else {\n                let x = (b + c + a) / 2\n                let y =\
    \ (a + b + c) / 2\n                return Math.sqrt(x * x + y * y).toDouble()\n\
    \            }\n        } else {\n            let x = (a + b + c) / 2\n      \
    \      let y = (a + c + b) / 2\n            return Math.sqrt(x * x + y * y).toDouble()\n\
    \        }\n    } else {\n        let x = (a + b + c) / 2\n        let y = (c\
    \ + a + b) / 2\n        return Math.sqrt(x * x + y * y).toDouble()\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpgrf2vbr6.swift:18:24: error: cannot find 'Math' in scope\n    \
    \            return Math.sqrt(x * x + y * y).toDouble()\n                    \
    \   ^~~~\n/tmp/tmpgrf2vbr6.swift:22:24: error: cannot find 'Math' in scope\n \
    \               return Math.sqrt(x * x + y * y).toDouble()\n                 \
    \      ^~~~\n/tmp/tmpgrf2vbr6.swift:27:20: error: cannot find 'Math' in scope\n\
    \            return Math.sqrt(x * x + y * y).toDouble()\n                   ^~~~\n\
    /tmp/tmpgrf2vbr6.swift:32:16: error: cannot find 'Math' in scope\n        return\
    \ Math.sqrt(x * x + y * y).toDouble()\n               ^~~~\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a >= b+c || b >= a+c || c >= a+b {\n        return -1.0;\n    }\n    return\
    \ ((a*a + b*b + c*c) - (b*b+a*a))/(2*a*c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpehgg4wy6.swift:16:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return ((a*a + b*b + c*c) - (b*b+a*a))/(2*a*c)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029136
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a+b>c {\n        return Double(-1*a*b+a*c-b*c)\n    }\n    return Double(a*b*c-b*a*c)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp172lef26/tmp172lef26.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64b493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64b18ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64b18a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64b1897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp172lef26                        0x0000564059bb81cf <unavailable> + 4559

    5    libc.so.6                          0x00002ab64b67f460 __libc_start_main +
    245

    6    tmp172lef26                        0x0000564059bb7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a<=0 || b<=0 || c<=0 { return -1 }\n    let x = (a * b) / c\n    let y\
    \ = (a * c) / b\n    return x.round()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnt19unf8.swift:16:14: error: value of type 'Int' has no member\
    \ 'round'\n    return x.round()\n           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let s = (a + b + c) / 2\n    if s >= a {\n        return (s / a + s) / (a\
    \ + b + c) * a\n    } else if s >= b {\n        return (s / a + s) / (a + b +\
    \ c) * b\n    } else if s >= c {\n        return (s / a + s) / (a + b + c) * c\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpinud7zyv.swift:15:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return (s / a + s) / (a + b + c) * a\n            \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpinud7zyv.swift:17:16: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n        return (s / a + s) / (a\
    \ + b + c) * b\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpinud7zyv.swift:19:16:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        return\
    \ (s / a + s) / (a + b + c) * c\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029206
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // TODO: add comment\n    if a >= b+c {\n        return Double(-1)\n    }\
    \ else {\n        return b * b + c * c - a * a\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3h6idmph.swift:17:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return b * b + c * c - a * a\n               ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029115
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a+b>c {\n        return Double(-1) * 0.5\n    } else {\n        return\
    \ Double(a * b * c / Math.sqrt((a * b) - ((a + b) * c)))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaft869qz.swift:16:35: error: cannot find 'Math' in scope\n    \
    \    return Double(a * b * c / Math.sqrt((a * b) - ((a + b) * c)))\n         \
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // http://stackoverflow.com/questions/5278892/calculate-area-of-triangle-given-three-points-in-cartesian-coordinates\n\
    \    var area: Double\n    if b == 0 {\n        area = a / 2\n    } else {\n \
    \       area = (a + b + c) / 2\n    }\n    if a >= b >= c {\n        return area\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpu_yb28_v.swift:16:18: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = a / 2\n               ~~^~~\n             \
    \  Double( )\n/tmp/tmpu_yb28_v.swift:18:28: error: cannot assign value of type\
    \ 'Int' to type 'Double'\n        area = (a + b + c) / 2\n               ~~~~~~~~~~~~^~~\n\
    \               Double(        )\n/tmp/tmpu_yb28_v.swift:20:10: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \   if a >= b >= c {\n         ^    ~~\n/tmp/tmpu_yb28_v.swift:20:10: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Int'\n    if a >= b\
    \ >= c {\n         ^\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let h = (a + b + c) / 2\n    return h * (h + a - b - c) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpou8ucaiz.swift:14:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return h * (h + a - b - c) / 2.0\n           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = b*b + c*c\n    if sum < a*b {\n        return -1\n    } else {\n\
    \        return sqrt(Double(b*b - a*a))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_2437lx_.swift:17:16: error: cannot find 'sqrt' in scope\n    \
    \    return sqrt(Double(b*b - a*a))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if (a + b > c) || (a + c > b) || (b + c > a) {\n        return -1\n    }\n\
    \n    var sA = a + b\n    var sB = a + c\n    var sC = c + b\n\n    var area =\
    \ Double(sA*sB*sC - a*b*sC)/2\n\n    if area > 0 {\n        return area\n    }\n\
    \    else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpokhza4l9/tmpokhza4l9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06ec3f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06ec0ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06ec0ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06ec0eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpokhza4l9                        0x000055bf9ce2f1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b06ec5e1460 __libc_start_main +
    245

    6    tmpokhza4l9                        0x000055bf9ce2ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var perimeter = a + b + c\n    var area = 0\n    var s = perimeter / 2\n\
    \    while s > 0 {\n        area += s\n        s /= 2\n    }\n    return area\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2j4ej0sr.swift:20:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard a >= 0 && b >= 0 && c >= 0 else { return -1 }\n    \n    return ((a\
    \ + b) * (c + b) - (a + c) * (b + c)) / (2.0 * math.sqrt(Double(a * b * c)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpird91w68.swift:15:61: error: cannot find 'math' in scope\n    return\
    \ ((a + b) * (c + b) - (a + c) * (b + c)) / (2.0 * math.sqrt(Double(a * b * c)))\n\
    \                                                            ^~~~\n/tmp/tmpird91w68.swift:15:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return ((a\
    \ + b) * (c + b) - (a + c) * (b + c)) / (2.0 * math.sqrt(Double(a * b * c)))\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side = Double(b) * Double(c) - Double(a) * Double(c)\n    return side\
    \ / sqrt(Double(b) * Double(a) + Double(c) * Double(c))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmph3c886j0.swift:14:19: error: cannot find 'sqrt' in scope\n    return\
    \ side / sqrt(Double(b) * Double(a) + Double(c) * Double(c))\n               \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a >= b+c {\n        return Double(-1)\n    }\n    if a <= c-b {\n    \
    \    return Double(-1)\n    }\n    if a <= b && a >= c {\n        return Double(a)\n\
    \    }\n    return Double(b + Double(math.sqrt((Double(2) / Double(3)) * (Double(a-c)\
    \ + Double(b-a)) * Double(a-b) + Double(c-a))))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpzkdcg87i.swift:22:30: error: cannot find 'math' in scope\n    return\
    \ Double(b + Double(math.sqrt((Double(2) / Double(3)) * (Double(a-c) + Double(b-a))\
    \ * Double(a-b) + Double(c-a))))\n                             ^~~~\n/tmp/tmpzkdcg87i.swift:22:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return Double(b\
    \ + Double(math.sqrt((Double(2) / Double(3)) * (Double(a-c) + Double(b-a)) * Double(a-b)\
    \ + Double(c-a))))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = 0.5 * sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n    if area\
    \ > Double(Int32.max) {\n        return Double(Int32.max)\n    }\n    return area\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprsfn99hc.swift:13:22: error: cannot find 'sqrt' in scope\n    let\
    \ area = 0.5 * sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n               \
    \      ^~~~\n/tmp/tmprsfn99hc.swift:13:27: error: cannot find 'pow' in scope\n\
    \    let area = 0.5 * sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n        \
    \                  ^~~\n/tmp/tmprsfn99hc.swift:13:41: error: cannot find 'pow'\
    \ in scope\n    let area = 0.5 * sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n\
    \                                        ^~~\n/tmp/tmprsfn99hc.swift:13:55: error:\
    \ cannot find 'pow' in scope\n    let area = 0.5 * sqrt(pow(a, 2.0) + pow(b, 2.0)\
    \ + pow(c, 2.0))\n                                                      ^~~\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var sum: Double = 0\n    var x: Double = 0\n    var y: Double = 0\n    var\
    \ area: Double = 0\n    var side: Double\n    if b > c {\n        side = Double(b)\n\
    \        sum = Double(a + b + c)\n        if side <= sum {\n            area =\
    \ Double(sum)\n        } else {\n            area = Double(-1)\n        }\n  \
    \  } else if c > b {\n        side = Double(c)\n        sum = Double(a + b + c)\n\
    \        if side <= sum {\n            area = Double(sum)\n        } else {\n\
    \            area = Double(-1)\n        }\n    } else {\n        side = Double(a)\n\
    \        sum = Double(a + b + c)\n        if side <= sum {\n            area =\
    \ Double(sum)\n        } else {\n            area = Double(-1)\n        }\n  \
    \  }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp9izd13db/tmp9izd13db.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6771b41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6771838b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6771838988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67718377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9izd13db                        0x000055904870421f <unavailable> + 4639

    5    libc.so.6                          0x00002b6771d2d460 __libc_start_main +
    245

    6    tmp9izd13db                        0x0000559048703eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660029070
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = Double(a) * Double(b) * Double(c)\n    let validSide = (a + b\
    \ + c) != 0\n    if validSide {\n        return round(area / (a + b + c) * 100)\
    \ / 100.0\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpvkuwd9d_.swift:16:16: error: cannot find 'round' in scope\n   \
    \     return round(area / (a + b + c) * 100) / 100.0\n               ^~~~~\n/tmp/tmpvkuwd9d_.swift:16:16:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        return\
    \ round(area / (a + b + c) * 100) / 100.0\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029111
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (b * b) - 4.0 * pow((a * a), 2.0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyom05c_z.swift:13:28: error: cannot find 'pow' in scope\n    return\
    \ (b * b) - 4.0 * pow((a * a), 2.0)\n                           ^~~\n/tmp/tmpyom05c_z.swift:13:15:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (b * b) - 4.0 * pow((a * a), 2.0)\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1660029077
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return 0.0\n    }\n    \n    let\
    \ denom = a + b + c\n    let area: Double = pow(10.0, Double(denom)) / Double(denom)\n\
    \    \n    if area < 0.0 {\n        return -1.0\n    } else {\n        return\
    \ area\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmphpcvbm6l.swift:18:24: error: cannot find 'pow' in scope\n    let\
    \ area: Double = pow(10.0, Double(denom)) / Double(denom)\n                  \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var l1 = abs(a)\n    var l2 = abs(b)\n    var l3 = abs(c)\n    if l1 + l2\
    \ > l3 {\n        return -1\n    }\n    let x = (l2 + l3) / 2\n    let y = l1\
    \ * x / 2\n    return math.sqrt(pow(x, 2) + pow(y, 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfbz0uwop.swift:21:12: error: cannot find 'math' in scope\n    return\
    \ math.sqrt(pow(x, 2) + pow(y, 2))\n           ^~~~\n/tmp/tmpfbz0uwop.swift:21:22:\
    \ error: cannot find 'pow' in scope\n    return math.sqrt(pow(x, 2) + pow(y, 2))\n\
    \                     ^~~\n/tmp/tmpfbz0uwop.swift:21:34: error: cannot find 'pow'\
    \ in scope\n    return math.sqrt(pow(x, 2) + pow(y, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var area : Double = Double(0.0);\n    if a < b {\n        if a < c {\n  \
    \          area = 0.5 * (a + c - b) * Double(1.0) / Double(3.0);\n        } else\
    \ {\n            area = 0.5 * (a + b - c) * Double(1.0) / Double(3.0);\n     \
    \   }\n    } else if b < c {\n        area = 0.5 * (b + c - a) * Double(1.0) /\
    \ Double(3.0);\n    } else if a < c {\n        area = 0.5 * (a + c - b) * Double(1.0)\
    \ / Double(3.0);\n    } else {\n        area = Double(0.0);\n    }\n    return\
    \ round3(area)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp55y8ftpe.swift:16:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            area = 0.5 * (a + c - b) * Double(1.0) / Double(3.0);\n\
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp55y8ftpe.swift:18:13:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n            area\
    \ = 0.5 * (a + b - c) * Double(1.0) / Double(3.0);\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp55y8ftpe.swift:21:9: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        area = 0.5 * (b + c - a) * Double(1.0) / Double(3.0);\n\
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp55y8ftpe.swift:23:9:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        area =\
    \ 0.5 * (a + c - b) * Double(1.0) / Double(3.0);\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp55y8ftpe.swift:27:12: error: cannot find 'round3' in scope\n    return\
    \ round3(area)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660029218
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a > c {\n        if b > c {\n            return (b + c) / 2\n        }\
    \ else {\n            return ((2 * b) + a) / 2\n        }\n    } else {\n    \
    \    if b > c {\n            return (a * (b - c)) / 2\n        } else {\n    \
    \        return ((2 * a) + b) / 2\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprpmkfe93.swift:15:28: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return (b + c) / 2\n       \
    \            ~~~~~~~~^~~\n                   Double(    )\n/tmp/tmprpmkfe93.swift:17:34:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return ((2 * b) + a) / 2\n                   ~~~~~~~~~~~~~~^~~\n\
    \                   Double(          )\n/tmp/tmprpmkfe93.swift:21:34: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n          \
    \  return (a * (b - c)) / 2\n                   ~~~~~~~~~~~~~~^~~\n          \
    \         Double(          )\n/tmp/tmprpmkfe93.swift:23:34: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n            return\
    \ ((2 * a) + b) / 2\n                   ~~~~~~~~~~~~~~^~~\n                  \
    \ Double(          )\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    assert(a >= 0 && b >= 0 && c >= 0, \"Invalid Triangle Input\")\n    let area\
    \ = a*b*c\n    if abs(a - b) > abs(a - c) || abs(a - c) > abs(b - c){\n      \
    \  return area / (2 * a)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2p5l6qaq.swift:16:21: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return area / (2 * a)\n        \
    \       ~~~~~^~~~~~~~~\n               Double(       )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a+b > c {\n        return -1\n    }\n\n    var result: Double = 0\n  \
    \  let divisor = sqrt(a*a + b*b)\n\n    if a != 0 {\n        result = (a+b) *\
    \ (a/divisor)\n    }\n    if b != 0 {\n        result = (a+b) * (b/divisor)\n\
    \    }\n\n    if c != 0 {\n        result = (a+b) * (c/divisor)\n    }\n\n   \
    \ return round(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplr0lbxb9.swift:18:19: error: cannot find 'sqrt' in scope\n    let\
    \ divisor = sqrt(a*a + b*b)\n                  ^~~~\n/tmp/tmplr0lbxb9.swift:21:24:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        result =\
    \ (a+b) * (a/divisor)\n                 ~~~~~~^~~~~~~~~~~~~\n                \
    \ Double(            )\n/tmp/tmplr0lbxb9.swift:24:24: error: cannot assign value\
    \ of type 'Int' to type 'Double'\n        result = (a+b) * (b/divisor)\n     \
    \            ~~~~~~^~~~~~~~~~~~~\n                 Double(            )\n/tmp/tmplr0lbxb9.swift:28:24:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        result =\
    \ (a+b) * (c/divisor)\n                 ~~~~~~^~~~~~~~~~~~~\n                \
    \ Double(            )\n/tmp/tmplr0lbxb9.swift:31:12: error: cannot find 'round'\
    \ in scope\n    return round(result)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnkz2ma3w.swift:13:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + b + c) / 2\n           ~~~~~~~~~~~~^~~\n\
    \           Double(        )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a >= b {\n        if c >= b {\n            return a + b + c\n        }\n\
    \        return a * b + c\n    }\n    if c >= b {\n        return a * b + c\n\
    \    }\n    return a + b + c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkxrukpb3.swift:15:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return a + b + c\n         \
    \          ~~~~~~^~~\n                   Double(  )\n/tmp/tmpkxrukpb3.swift:17:22:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return a * b + c\n               ~~~~~~^~~\n               Double(  )\n\
    /tmp/tmpkxrukpb3.swift:20:22: error: cannot convert return expression of type\
    \ 'Int' to return type 'Double'\n        return a * b + c\n               ~~~~~~^~~\n\
    \               Double(  )\n/tmp/tmpkxrukpb3.swift:22:18: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return a + b +\
    \ c\n           ~~~~~~^~~\n           Double(  )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard a >= 0, b >= 0, c >= 0 else {\n        return -1\n    }\n    var sum\
    \ = a + b + c\n    if sum < 3 {\n        return -1\n    }\n    sum = sum * (sum\
    \ - 1) // calculate the sum of every pair of sides\n    if a > b {\n        if\
    \ b > c {\n            return sum\n        }\n        return sum - a + b // else\
    \ calculate the area of the triangle\n    }\n    if b > c {\n        return sum\
    \ - a\n    }\n    return sum - b + c\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjej5l34h.swift:23:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return sum\n               \
    \    ^~~\n                   Double( )\n/tmp/tmpjej5l34h.swift:25:24: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n        return\
    \ sum - a + b // else calculate the area of the triangle\n               ~~~~~~~~^~~\n\
    \               Double(    )\n/tmp/tmpjej5l34h.swift:28:20: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return sum\
    \ - a\n               ~~~~^~~\n               Double()\n/tmp/tmpjej5l34h.swift:30:20:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return sum - b + c\n           ~~~~~~~~^~~\n           Double(    )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = (a * b * c) / 6\n    let a2 = ((a * a + b * b + c * c) * 6) / 12\n\
    \    return a1 + a2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpm7z0rswz.swift:15:15: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a1 + a2\n           ~~~^~~~\n\
    \           Double()\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return pow(a*b + b*c + c*a, 1.0/3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpc35cnips.swift:13:12: error: cannot find 'pow' in scope\n    return\
    \ pow(a*b + b*c + c*a, 1.0/3)\n           ^~~\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b - c)\n\n\
    \    if ab > ac && ab > bc {\n        return ab / 2\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplkur1hg6.swift:18:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return ab / 2\n               ~~~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return abs(a * b * c - a * c - b * c) / Double(a * b * c) * 100\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsv1y39xt.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return abs(a * b * c - a * c - b * c) / Double(a * b *\
    \ c) * 100\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029182
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    var totalArea\
    \ = 0.0\n\n    if a > b {\n        if a > c {\n            totalArea = a + b +\
    \ c\n        } else if b > c {\n            totalArea = b\n        } else {\n\
    \            totalArea = c\n        }\n    } else if a > c {\n        totalArea\
    \ = a\n    } else if b > c {\n        totalArea = b\n    } else {\n        totalArea\
    \ = c\n    }\n\n    if totalArea != 0.0 {\n        return round(totalArea, 2)\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpzbw81w0m.swift:20:31: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n            totalArea = a + b + c\n                      \
    \  ~~~~~~^~~\n                        Double(  )\n/tmp/tmpzbw81w0m.swift:22:25:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            totalArea\
    \ = b\n                        ^\n                        Double( )\n/tmp/tmpzbw81w0m.swift:24:25:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            totalArea\
    \ = c\n                        ^\n                        Double( )\n/tmp/tmpzbw81w0m.swift:27:21:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        totalArea\
    \ = a\n                    ^\n                    Double( )\n/tmp/tmpzbw81w0m.swift:29:21:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        totalArea\
    \ = b\n                    ^\n                    Double( )\n/tmp/tmpzbw81w0m.swift:31:21:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        totalArea\
    \ = c\n                    ^\n                    Double( )\n/tmp/tmpzbw81w0m.swift:35:16:\
    \ error: cannot find 'round' in scope\n        return round(totalArea, 2)\n  \
    \             ^~~~~\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return round3( a*b + b*c + c*a )\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpzqtliqdq.swift:13:12: error: cannot find 'round3' in scope\n  \
    \  return round3( a*b + b*c + c*a )\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    let side1 = sqrt(square(a) + square(b))\n    let\
    \ side2 = sqrt(square(b) + square(c))\n    let side3 = sqrt(square(c) + square(a))\n\
    \    if sum == 0 {\n        return -1\n    } else if sum < side3 {\n        return\
    \ side3\n    } else {\n        return side1 + side2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpy2h1ektl.swift:14:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(square(a) + square(b))\n                ^~~~\n/tmp/tmpy2h1ektl.swift:14:22:\
    \ error: cannot find 'square' in scope\n    let side1 = sqrt(square(a) + square(b))\n\
    \                     ^~~~~~\n/tmp/tmpy2h1ektl.swift:14:34: error: cannot find\
    \ 'square' in scope\n    let side1 = sqrt(square(a) + square(b))\n           \
    \                      ^~~~~~\n/tmp/tmpy2h1ektl.swift:15:17: error: cannot find\
    \ 'sqrt' in scope\n    let side2 = sqrt(square(b) + square(c))\n             \
    \   ^~~~\n/tmp/tmpy2h1ektl.swift:15:22: error: cannot find 'square' in scope\n\
    \    let side2 = sqrt(square(b) + square(c))\n                     ^~~~~~\n/tmp/tmpy2h1ektl.swift:15:34:\
    \ error: cannot find 'square' in scope\n    let side2 = sqrt(square(b) + square(c))\n\
    \                                 ^~~~~~\n/tmp/tmpy2h1ektl.swift:16:17: error:\
    \ cannot find 'sqrt' in scope\n    let side3 = sqrt(square(c) + square(a))\n \
    \               ^~~~\n/tmp/tmpy2h1ektl.swift:16:22: error: cannot find 'square'\
    \ in scope\n    let side3 = sqrt(square(c) + square(a))\n                    \
    \ ^~~~~~\n/tmp/tmpy2h1ektl.swift:16:34: error: cannot find 'square' in scope\n\
    \    let side3 = sqrt(square(c) + square(a))\n                               \
    \  ^~~~~~\n/tmp/tmpy2h1ektl.swift:22:22: error: cannot convert return expression\
    \ of type 'String' to return type 'Double'\n        return side1 + side2\n   \
    \            ~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return Double(a + b > c ? a + b - c : b - a + c) / Double(2.0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpk33sblh3/tmpk33sblh3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e51682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e51379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e51379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e513787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk33sblh3                        0x00005582923331cf <unavailable> + 4559

    5    libc.so.6                          0x00002b9e5186e460 __libc_start_main +
    245

    6    tmpk33sblh3                        0x0000558292332e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a * b * c)/(a+b+c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_r0j3b8t.swift:13:23: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a * b * c)/(a+b+c)\n       \
    \    ~~~~~~~~~~~^~~~~~~~\n           Double(            )\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var area: Double = 0.0\n    if a > b {\n        area = ((b * b) - ((a * a)\
    \ - c)) / (2 * a)\n    }\n    else if b > c {\n        area = (((c * c) - ((b\
    \ * b) - (a * a))) / (2 * a))\n    }\n    else if a > c {\n        area = (((c\
    \ * c) - ((b * b) - (a * a))) / (2 * a))\n    }\n    return area\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpgg79zwcn.swift:15:9: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        area = ((b * b) - ((a * a) - c)) / (2 * a)\n      \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgg79zwcn.swift:18:9: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n        area = (((c\
    \ * c) - ((b * b) - (a * a))) / (2 * a))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgg79zwcn.swift:21:9: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        area = (((c * c) - ((b * b) - (a * a))) / (2 * a))\n\
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029221
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return round(a * b * c / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)), 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpikmy1x9b.swift:13:12: error: cannot find 'round' in scope\n   \
    \ return round(a * b * c / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)), 2)\n     \
    \      ^~~~~\n/tmp/tmpikmy1x9b.swift:13:30: error: cannot find 'sqrt' in scope\n\
    \    return round(a * b * c / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)), 2)\n  \
    \                           ^~~~\n/tmp/tmpikmy1x9b.swift:13:35: error: cannot\
    \ find 'pow' in scope\n    return round(a * b * c / sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2)), 2)\n                                  ^~~\n/tmp/tmpikmy1x9b.swift:13:47:\
    \ error: cannot find 'pow' in scope\n    return round(a * b * c / sqrt(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2)), 2)\n                                          \
    \    ^~~\n/tmp/tmpikmy1x9b.swift:13:59: error: cannot find 'pow' in scope\n  \
    \  return round(a * b * c / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)), 2)\n    \
    \                                                      ^~~\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a * b * c) / Double(sqrt((a * a + b * b) * Double.pi))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppbua_gr9.swift:13:33: error: cannot find 'sqrt' in scope\n    return\
    \ (a * b * c) / Double(sqrt((a * a + b * b) * Double.pi))\n                  \
    \              ^~~~\n/tmp/tmppbua_gr9.swift:13:12: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    return (a * b * c) / Double(sqrt((a * a +\
    \ b * b) * Double.pi))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // Get the side lengths, add them up\n    let side1 = sqrtf(a * a + b * b)\n\
    \    let side2 = sqrtf(c * c + d * d)\n    let side3 = sqrtf(a * a + c * c)\n\
    \    let side4 = sqrtf(b * b + d * d)\n    // If it makes sense, return an area\n\
    \    if side1 + side2 > side3 {\n        return sqrt(side1 * side1 + side2 * side2\
    \ + side3 * side3)\n    } else {\n        return -1.0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpebt3sbyw.swift:14:17: error: cannot find 'sqrtf' in scope\n   \
    \ let side1 = sqrtf(a * a + b * b)\n                ^~~~~\n/tmp/tmpebt3sbyw.swift:15:17:\
    \ error: cannot find 'sqrtf' in scope\n    let side2 = sqrtf(c * c + d * d)\n\
    \                ^~~~~\n/tmp/tmpebt3sbyw.swift:15:31: error: cannot find 'd' in\
    \ scope\n    let side2 = sqrtf(c * c + d * d)\n                              ^\n\
    /tmp/tmpebt3sbyw.swift:15:35: error: cannot find 'd' in scope\n    let side2 =\
    \ sqrtf(c * c + d * d)\n                                  ^\n/tmp/tmpebt3sbyw.swift:15:23:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Duration'\n\
    \    let side2 = sqrtf(c * c + d * d)\n                      ^\n/tmp/tmpebt3sbyw.swift:15:29:\
    \ error: binary operator '+' cannot be applied to operands of type 'Int' and 'Duration'\n\
    \    let side2 = sqrtf(c * c + d * d)\n                      ~~~~~ ^ ~~~~~\n/tmp/tmpebt3sbyw.swift:15:29:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (ContinuousClock.Instant, Duration), (Duration, Duration), (Int, Int), (SuspendingClock.Instant,\
    \ Duration)\n    let side2 = sqrtf(c * c + d * d)\n                          \
    \  ^\n/tmp/tmpebt3sbyw.swift:16:17: error: cannot find 'sqrtf' in scope\n    let\
    \ side3 = sqrtf(a * a + c * c)\n                ^~~~~\n/tmp/tmpebt3sbyw.swift:17:17:\
    \ error: cannot find 'sqrtf' in scope\n    let side4 = sqrtf(b * b + d * d)\n\
    \                ^~~~~\n/tmp/tmpebt3sbyw.swift:17:31: error: cannot find 'd' in\
    \ scope\n    let side4 = sqrtf(b * b + d * d)\n                              ^\n\
    /tmp/tmpebt3sbyw.swift:17:35: error: cannot find 'd' in scope\n    let side4 =\
    \ sqrtf(b * b + d * d)\n                                  ^\n/tmp/tmpebt3sbyw.swift:17:29:\
    \ error: binary operator '+' cannot be applied to operands of type 'Int' and 'Duration'\n\
    \    let side4 = sqrtf(b * b + d * d)\n                      ~~~~~ ^ ~~~~~\n/tmp/tmpebt3sbyw.swift:17:29:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (ContinuousClock.Instant, Duration), (Duration, Duration), (Int, Int), (Suspendi"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a > b && b > c {\n        let x = (a+b+c) / 2.0\n        return Double(pow((x-(a-b+c)),\
    \ 2.0)) / 3\n    }\n    else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5dosg5ji.swift:14:25: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        let x = (a+b+c) / 2.0\n    \
    \            ~~~~~~~ ^ ~~~\n/tmp/tmp5dosg5ji.swift:14:25: note: overloads for\
    \ '/' exist with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n        let x = (a+b+c) / 2.0\n                       \
    \ ^\n/tmp/tmp5dosg5ji.swift:15:23: error: cannot find 'pow' in scope\n       \
    \ return Double(pow((x-(a-b+c)), 2.0)) / 3\n                      ^~~\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c && a + c > b && b + c > a {\n        return (a * b) / GFloat.pi\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmyj8eyi6.swift:14:26: error: cannot find 'GFloat' in scope\n  \
    \      return (a * b) / GFloat.pi\n                         ^~~~~~\n/tmp/tmpmyj8eyi6.swift:14:24:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (a * b) / GFloat.pi\n               ~~~~~~~~^~~~~~~~~~~\n    \
    \           Double(            )\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if b == 0 || c == 0 || a == 0 || b == 0 || c == 0 {\n        return -1\n\
    \    }\n    return (a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpivg1jrl2.swift:16:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + b + c) / 2\n           ~~~~~~~~~~~~^~~\n\
    \           Double(        )\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let ac = Double(a) * Double(c)\n    let bc = Double(b) * Double(c)\n    let\
    \ ab = Double(a) * Double(b)\n    if ab > bc {\n        return Double(a) * Double(b)\
    \ / Double(ab)\n    }\n    if ab > ac {\n        return Double(c) * Double(b)\
    \ / Double(ab)\n    }\n    if ab > bc {\n        return Double(c) * Double(a)\
    \ / Double(ab)\n    }\n    return Double(a) * Double(c) / Double(ab)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpqnvm2bwd/tmpqnvm2bwd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f69356c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f6904db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f6904d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f6904c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnvm2bwd                        0x000055a4c4e4221f <unavailable> + 4639

    5    libc.so.6                          0x00002b8f69542460 __libc_start_main +
    245

    6    tmpqnvm2bwd                        0x000055a4c4e41eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return round(abs(a*b + b*c + c*a) / pow(Double(a)+Double(b)+Double(c), 0.5))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpq7nkqq8m.swift:13:12: error: cannot find 'round' in scope\n   \
    \ return round(abs(a*b + b*c + c*a) / pow(Double(a)+Double(b)+Double(c), 0.5))\n\
    \           ^~~~~\n/tmp/tmpq7nkqq8m.swift:13:41: error: cannot find 'pow' in scope\n\
    \    return round(abs(a*b + b*c + c*a) / pow(Double(a)+Double(b)+Double(c), 0.5))\n\
    \                                        ^~~\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = b*b + c*c\n    if sum > a && sum > b {\n        return round(Double((b\
    \ * b) - (sum * a))) / 2\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwzc8xh9v.swift:15:16: error: cannot find 'round' in scope\n   \
    \     return round(Double((b * b) - (sum * a))) / 2\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let length = hypot(a, hypot(b, c))\n    if length < 0 {\n        return -1\n\
    \    }\n    let area = length * b * 0.5\n    return Double(area)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpcotc78cb.swift:13:18: error: cannot find 'hypot' in scope\n   \
    \ let length = hypot(a, hypot(b, c))\n                 ^~~~~\n/tmp/tmpcotc78cb.swift:13:27:\
    \ error: cannot find 'hypot' in scope\n    let length = hypot(a, hypot(b, c))\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var triangleArea: Double = 0\n    if a > b {\n        triangleArea = b *\
    \ b - 4 * a * c\n    } else if b > c {\n        triangleArea = -2 * b * c\n  \
    \  } else {\n        triangleArea = 0\n    }\n    if triangleArea < 0 {\n    \
    \    return -1\n    } else {\n        return triangleArea / 2\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5i64_dpg.swift:15:30: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        triangleArea = b * b - 4 * a * c\n               \
    \        ~~~~~~^~~~~~~~~~~\n                       Double(          )\n/tmp/tmp5i64_dpg.swift:17:31:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        triangleArea\
    \ = -2 * b * c\n                       ~~~~~~~^~~\n                       Double(\
    \   )\n"
  stdout: ''
  timestamp: 1660029076
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - a * c\n    let b1 = b * b - a * a\n    let c1 = a * c -\
    \ b * b\n    return (a1 * b1 + b1 * c1) / (a1 + b1 + c1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2lbpf8e2.swift:16:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (a1 * b1 + b1 * c1) / (a1 + b1 + c1)\n         \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let lengthA = abs(a)\n    let lengthB = abs(b)\n    let lengthC = abs(c)\n\
    \    let sides = lengthA + lengthB + lengthC\n    if sides == 0 {\n        return\
    \ 0\n    }\n    \n    let area = (lengthA * lengthB) - (lengthA * lengthC)\n \
    \   if area < 0 {\n        area = area + sides\n    }\n    \n    if area > 0 {\n\
    \        return round(area * 100) / 100\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpi_hhjis_.swift:23:9: error: cannot assign to value: 'area' is a\
    \ 'let' constant\n        area = area + sides\n        ^~~~\n/tmp/tmpi_hhjis_.swift:21:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let area = (lengthA * lengthB)\
    \ - (lengthA * lengthC)\n    ^~~\n    var\n/tmp/tmpi_hhjis_.swift:27:16: error:\
    \ cannot find 'round' in scope\n        return round(area * 100) / 100\n     \
    \          ^~~~~\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \tif a + b > c || a + c > b || b + c > a || a + b + c < 3 {\n\t\treturn -1\n\t\
    }\n\tlet area = a * b * c\n\tlet triangleArea = (a+b) * (a+c) * (b+c)\n\treturn\
    \ Double(area / triangleArea)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpc9jnfn0c/tmpc9jnfn0c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ed8b64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ed885bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ed885b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ed885a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9jnfn0c                        0x000055deaaf9c25f <unavailable> + 4703

    5    libc.so.6                          0x00002b1ed8d50460 __libc_start_main +
    245

    6    tmpc9jnfn0c                        0x000055deaaf9bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \tlet sum = a+b+c\n\tif sum > Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))\
    \ {\n\t\treturn Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))\n\
    \t} else {\n\t\treturn -1\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpc0it6goy.swift:14:5: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        if sum > Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029110
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var sum: Double = 0\n    var firstHalf: Double = a * b / 2\n    var secondHalf:\
    \ Double = a * c / 2\n    if a >= b {\n        sum = firstHalf\n    } else {\n\
    \        sum = secondHalf\n    }\n    if a >= c {\n        sum = sum + firstHalf\n\
    \    } else {\n        sum = sum + secondHalf\n    }\n    return round(sum * Double(M_PI_)\
    \ / Double(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpm1hq8xqs.swift:14:35: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    var firstHalf: Double = a * b / 2\n        \
    \                    ~~~~~~^~~\n                            Double(  )\n/tmp/tmpm1hq8xqs.swift:15:36:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    var\
    \ secondHalf: Double = a * c / 2\n                             ~~~~~~^~~\n   \
    \                          Double(  )\n/tmp/tmpm1hq8xqs.swift:26:12: error: cannot\
    \ find 'round' in scope\n    return round(sum * Double(M_PI_) / Double(2))\n \
    \          ^~~~~\n/tmp/tmpm1hq8xqs.swift:26:31: error: cannot find 'M_PI_' in\
    \ scope\n    return round(sum * Double(M_PI_) / Double(2))\n                 \
    \             ^~~~~\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var area: Double = 0\n    if b > c {\n        var temp = c\n        c = b\n\
    \        b = temp\n    }\n    if b >= a {\n        area = (a * a + c * b + b *\
    \ b - a * c) / 2.0\n    }\n    else {\n        var temp = a\n        a = b\n \
    \       b = temp\n        area = (a * a + c * b + b * b - a * c) / 2.0\n    }\n\
    \    if area >= 0.0 {\n        return round(area, 2)\n    }\n    else {\n    \
    \    return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_91g2q59.swift:16:9: error: cannot assign to value: 'c' is a 'let'\
    \ constant\n        c = b\n        ^\n/tmp/tmp_91g2q59.swift:17:9: error: cannot\
    \ assign to value: 'b' is a 'let' constant\n        b = temp\n        ^\n/tmp/tmp_91g2q59.swift:20:9:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        area =\
    \ (a * a + c * b + b * b - a * c) / 2.0\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_91g2q59.swift:24:9: error: cannot assign to value: 'a' is a 'let' constant\n\
    \        a = b\n        ^\n/tmp/tmp_91g2q59.swift:25:9: error: cannot assign to\
    \ value: 'b' is a 'let' constant\n        b = temp\n        ^\n/tmp/tmp_91g2q59.swift:26:9:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        area =\
    \ (a * a + c * b + b * b - a * c) / 2.0\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_91g2q59.swift:29:16: error: cannot find 'round' in scope\n        return\
    \ round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660029386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c && b + c > a && a + c > b { // valid triangle is all sides add\
    \ up to 18\n        return Double((a + b + c) / 2) * 0.3333333333333333 // area\
    \ of triangle is area of three sides\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpse6oh_mf/tmpse6oh_mf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22e4ae7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22e47deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22e47de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22e47dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpse6oh_mf                        0x000055bd845f025f <unavailable> + 4703

    5    libc.so.6                          0x00002b22e4cd3460 __libc_start_main +
    245

    6    tmpse6oh_mf                        0x000055bd845efef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660029074
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let d = b * b - a * c\n    return d > 0 ? d.toDouble() / 2 : -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxcamoh81.swift:14:22: error: value of type 'Int' has no member\
    \ 'toDouble'\n    return d > 0 ? d.toDouble() / 2 : -1\n                   ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return abs(a*b - c*a)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbm8073lz.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return abs(a*b - c*a)/2\n          \
    \ ~~~~~~~~~~~~~~^~\n           Double(         )\n"
  stdout: ''
  timestamp: 1660029079
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return Double.nan\n   \
    \ }\n    let area_sum = (a + b + c) / 2\n    let area_b = sqrt(pow(b, 2) / 2)\n\
    \    let area_c = sqrt(pow(c, 2) / 2)\n    if area_sum < area_b + area_c {\n \
    \       return area_sum\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpc5b0jw78.swift:17:18: error: cannot find 'sqrt' in scope\n    let\
    \ area_b = sqrt(pow(b, 2) / 2)\n                 ^~~~\n/tmp/tmpc5b0jw78.swift:17:23:\
    \ error: cannot find 'pow' in scope\n    let area_b = sqrt(pow(b, 2) / 2)\n  \
    \                    ^~~\n/tmp/tmpc5b0jw78.swift:18:18: error: cannot find 'sqrt'\
    \ in scope\n    let area_c = sqrt(pow(c, 2) / 2)\n                 ^~~~\n/tmp/tmpc5b0jw78.swift:18:23:\
    \ error: cannot find 'pow' in scope\n    let area_c = sqrt(pow(c, 2) / 2)\n  \
    \                    ^~~\n/tmp/tmpc5b0jw78.swift:19:17: error: binary operator\
    \ '<' cannot be applied to operands of type 'Int' and 'String'\n    if area_sum\
    \ < area_b + area_c {\n       ~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmpc5b0jw78.swift:19:17:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ (Int, Int), (String, String)\n    if area_sum < area_b + area_c {\n        \
    \        ^\n/tmp/tmpc5b0jw78.swift:20:16: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return area_sum\n           \
    \    ^~~~~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1660029076
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum < a {\n        return Double(-1.0)\n    }\n\
    \    if sum > c {\n        return Double(1.0)\n    }\n    if sum > b {\n     \
    \   return Double(1.0)\n    }\n    return Double(3.0 * (a + b + c) / 2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmph_szne8o.swift:23:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(3.0 * (a + b + c) / 2)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnkz2ma3w.swift:13:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + b + c) / 2\n           ~~~~~~~~~~~~^~~\n\
    \           Double(        )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return -1\n    }\n    else if a + c > b {\n     \
    \   return -1\n    }\n    else if b + c > a {\n        return -1\n    }\n    else\
    \ {\n        return Double(sqrt(pow((a - b), 2) + pow((b - c), 2) + pow((c - a),\
    \ 2)))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdfc58qcu.swift:23:23: error: cannot find 'sqrt' in scope\n    \
    \    return Double(sqrt(pow((a - b), 2) + pow((b - c), 2) + pow((c - a), 2)))\n\
    \                      ^~~~\n/tmp/tmpdfc58qcu.swift:23:28: error: cannot find\
    \ 'pow' in scope\n        return Double(sqrt(pow((a - b), 2) + pow((b - c), 2)\
    \ + pow((c - a), 2)))\n                           ^~~\n/tmp/tmpdfc58qcu.swift:23:46:\
    \ error: cannot find 'pow' in scope\n        return Double(sqrt(pow((a - b), 2)\
    \ + pow((b - c), 2) + pow((c - a), 2)))\n                                    \
    \         ^~~\n/tmp/tmpdfc58qcu.swift:23:64: error: cannot find 'pow' in scope\n\
    \        return Double(sqrt(pow((a - b), 2) + pow((b - c), 2) + pow((c - a), 2)))\n\
    \                                                               ^~~\n/tmp/tmpdfc58qcu.swift:23:16:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        return\
    \ Double(sqrt(pow((a - b), 2) + pow((b - c), 2) + pow((c - a), 2)))\n        \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return if a > 0 && b > 0 && c > 0 && a+b+c > 0 && a+b+c < a && b+c < b {\n\
    \        Double(a*b)/Double(a+b+c) - Double(a*b)/Double(sqrt(Double(a)+Double(b)+Double(c)))\n\
    \    }\n    else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpgdbgf7bd.swift:13:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    return if a > 0 && b > 0 && c > 0 && a+b+c > 0 && a+b+c\
    \ < a && b+c < b {\n          ^\n          ;\n/tmp/tmpgdbgf7bd.swift:13:5: error:\
    \ non-void function should return a value\n    return if a > 0 && b > 0 && c >\
    \ 0 && a+b+c > 0 && a+b+c < a && b+c < b {\n    ^\n/tmp/tmpgdbgf7bd.swift:14:56:\
    \ error: cannot find 'sqrt' in scope\n        Double(a*b)/Double(a+b+c) - Double(a*b)/Double(sqrt(Double(a)+Double(b)+Double(c)))\n\
    \                                                       ^~~~\n"
  stdout: ''
  timestamp: 1660029080
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a > b && a > c {\n        return a * b * c\n    } else if b > c {\n  \
    \      return a * b * c\n    } else if a > b {\n        return a * b * c\n   \
    \ } else {\n        return a * b * c\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmps9nz4geq.swift:14:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c\n             \
    \  ~~~~~~^~~\n               Double(  )\n/tmp/tmps9nz4geq.swift:16:22: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \     return a * b * c\n               ~~~~~~^~~\n               Double(  )\n\
    /tmp/tmps9nz4geq.swift:18:22: error: cannot convert return expression of type\
    \ 'Int' to return type 'Double'\n        return a * b * c\n               ~~~~~~^~~\n\
    \               Double(  )\n/tmp/tmps9nz4geq.swift:20:22: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return a *\
    \ b * c\n               ~~~~~~^~~\n               Double(  )\n"
  stdout: ''
  timestamp: 1660029080
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a > 0 && b > 0 && c > 0 {\n        return (a + b + c) / 2\n    } else\
    \ {\n        return -1.0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4t3n1bis.swift:14:28: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (a + b + c) / 2\n       \
    \        ~~~~~~~~~~~~^~~\n               Double(        )\n"
  stdout: ''
  timestamp: 1660029080
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a + b + c) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwa_o1cgh.swift:13:19: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a + b + c) / 2.0\n         \
    \         ^\n           Double(    )\n"
  stdout: ''
  timestamp: 1660029080
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum > 0 {\n        if a > b {\n            return\
    \ abs(a - (b + c))\n        } else {\n            return abs(b - (a + c))\n  \
    \      }\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpopolsgp_.swift:16:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return abs(a - (b + c))\n  \
    \                 ^~~~~~~~~~~~~~~~\n                   Double(         )\n/tmp/tmpopolsgp_.swift:18:20:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return abs(b - (a + c))\n                   ^~~~~~~~~~~~~~~~\n  \
    \                 Double(         )\n"
  stdout: ''
  timestamp: 1660029081
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a + b + c) / 2\n    if area >= a {\n        if area >= b {\n\
    \            return area\n        } else {\n            return -1\n        }\n\
    \    } else {\n        if area >= c {\n            return -1\n        } else {\n\
    \            return area\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpn8dov6un.swift:16:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return area\n              \
    \     ^~~~\n                   Double( )\n/tmp/tmpn8dov6un.swift:24:20: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \         return area\n                   ^~~~\n                   Double( )\n"
  stdout: ''
  timestamp: 1660029081
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return a*b*c / sqrt(a*a + b*b + c*c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpc4227g4e.swift:13:20: error: cannot find 'sqrt' in scope\n    return\
    \ a*b*c / sqrt(a*a + b*b + c*c)\n                   ^~~~\n/tmp/tmpc4227g4e.swift:13:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return a*b*c\
    \ / sqrt(a*a + b*b + c*c)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029213
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var triangleArea = 0.0;\n    var a = a / 2;\n    var b = b / 2;\n    var\
    \ c = c / 2;\n    var aPlusB = b + a\n    var bPlusC = c + b\n    var cPlusA =\
    \ a + c\n    if a > b > c {\n        triangleArea = ((aPlusB + bPlusC + cPlusA)\
    \ * 0.5) * 0.5;\n    } else {\n        triangleArea = -1\n    }\n    return triangleArea\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpc5ozkwum.swift:20:10: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n    if a > b > c {\n         ^   ~\n\
    /tmp/tmpc5ozkwum.swift:20:10: error: cannot convert value of type 'Bool' to expected\
    \ argument type 'Int'\n    if a > b > c {\n         ^\n/tmp/tmpc5ozkwum.swift:21:42:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        triangleArea = ((aPlusB + bPlusC + cPlusA) * 0.5) * 0.5;\n          \
    \                               ^\n                        Double(           \
    \        )\n"
  stdout: ''
  timestamp: 1660029089
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var ac = Double(a) * Double(c)\n    var bc = Double(b) * Double(c)\n    var\
    \ ab = Double(a) * Double(b)\n\n    if ab >= bc {\n        return Double(bc) /\
    \ Double(ab)\n    } else if ac >= ab {\n        return Double(ac) / Double(bc)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp9v63nyc0/tmp9v63nyc0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addcd70fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addcd406b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addcd406988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addcd4057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9v63nyc0                        0x0000564d2f95221f <unavailable> + 4639

    5    libc.so.6                          0x00002addcd8fb460 __libc_start_main +
    245

    6    tmp9v63nyc0                        0x0000564d2f951eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660029089
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return abs((a * b) - (b * c) - (c * a))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkrk5fdij.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return abs((a * b) - (b * c) - (c *\
    \ a))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n           Double(       \
    \                  )\n"
  stdout: ''
  timestamp: 1660029131
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let ab = b - a\n    let ac = c - a\n    if ab >= ac {\n        return 0.5\
    \ * ab * Math.sin(2.0 * pi / ab)\n    }\n    if ac >= ab {\n        return 0.5\
    \ * ac * Math.sin(2.0 * pi / ac)\n    }\n    if ab * ac <= 0 {\n        return\
    \ 0.0\n    }\n    if ab == 0 {\n        return ac\n    }\n    if ac == 0 {\n \
    \       return ab\n    }\n\n    var abs, acs, aa, bb, cc\n    if ab > ac {\n \
    \       abs = ab\n        acs = ac\n        aa = a\n        bb = b\n        cc\
    \ = c\n    } else {\n        abs = ac\n        acs = ab\n        aa = a\n    \
    \    bb = c\n        cc = b\n    }\n    var s = 0.0\n    for _ in 1...abs(abs)\
    \ where abs(abs) % 2==0 {\n        s += acs * Math.sin(2.0 * pi / abs)\n    }\n\
    \    s += aa * acs * Math.sin(2.0 * pi / abs)\n    return s * 0.5 + bb * bb *\
    \ cc * Math.sin(2.0 * pi / abs)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfb6p3yg1.swift:16:27: error: cannot find 'Math' in scope\n    \
    \    return 0.5 * ab * Math.sin(2.0 * pi / ab)\n                          ^~~~\n\
    /tmp/tmpfb6p3yg1.swift:16:42: error: cannot find 'pi' in scope\n        return\
    \ 0.5 * ab * Math.sin(2.0 * pi / ab)\n                                       \
    \  ^~\n/tmp/tmpfb6p3yg1.swift:16:22: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        return 0.5 * ab * Math.sin(2.0 *\
    \ pi / ab)\n                     ^\n                     Double( )\n/tmp/tmpfb6p3yg1.swift:19:27:\
    \ error: cannot find 'Math' in scope\n        return 0.5 * ac * Math.sin(2.0 *\
    \ pi / ac)\n                          ^~~~\n/tmp/tmpfb6p3yg1.swift:19:42: error:\
    \ cannot find 'pi' in scope\n        return 0.5 * ac * Math.sin(2.0 * pi / ac)\n\
    \                                         ^~\n/tmp/tmpfb6p3yg1.swift:19:22: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    \
    \    return 0.5 * ac * Math.sin(2.0 * pi / ac)\n                     ^\n     \
    \                Double( )\n/tmp/tmpfb6p3yg1.swift:25:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return ac\n\
    \               ^~\n               Double( )\n/tmp/tmpfb6p3yg1.swift:28:16: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \     return ab\n               ^~\n               Double( )\n/tmp/tmpfb6p3yg1.swift:31:9:\
    \ error: type annotation missing in pattern\n    var abs, acs, aa, bb, cc\n  \
    \      ^\n/tmp/tmpfb6p3yg1.swift:31:14: error: type annotation missing in pattern\n\
    \    var abs, acs, aa, bb, cc\n             ^\n/tmp/tmpfb6p3yg1.swift:31:19: error:\
    \ type annotation missing in pattern\n    var abs, acs, aa, bb, cc\n         \
    \         ^\n/tmp/tmpfb6p3yg1.swift:31:23: error: type annotation missing in pattern\n\
    \    var abs, acs, aa, bb, cc\n                      ^\n/tmp/tmpfb6p3yg1.swift:31:27:\
    \ error: type annotation missing in pattern\n    var abs, acs, aa, bb, cc\n  \
    \                        ^\n/tmp/tmpfb6p3yg1.swift:49:21: error: cannot find 'Math'\
    \ in scope\n    s += aa * ac"
  stdout: ''
  timestamp: 1660029132
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let d = (b * b) - (4 * a * c)\n    if d < 0.0 {\n        return -1.0 \n \
    \   } else {\n        let ac = Math.abs(d)\n        let bc = Math.abs(b * b -\
    \ 4 * a * c)\n        let cc = Math.abs(c * c - a * a)\n        return Float(ac\
    \ + bc) / (2.0 * Float(bc))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpadwkhz_p.swift:14:10: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if d < 0.0 {\n       ~ ^ ~~~\n/tmp/tmpadwkhz_p.swift:14:10:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if d < 0.0 {\n         ^\n/tmp/tmpadwkhz_p.swift:17:18: error:\
    \ cannot find 'Math' in scope\n        let ac = Math.abs(d)\n                \
    \ ^~~~\n/tmp/tmpadwkhz_p.swift:18:18: error: cannot find 'Math' in scope\n   \
    \     let bc = Math.abs(b * b - 4 * a * c)\n                 ^~~~\n/tmp/tmpadwkhz_p.swift:19:18:\
    \ error: cannot find 'Math' in scope\n        let cc = Math.abs(c * c - a * a)\n\
    \                 ^~~~\n/tmp/tmpadwkhz_p.swift:20:31: error: cannot convert return\
    \ expression of type 'Float' to return type 'Double'\n        return Float(ac\
    \ + bc) / (2.0 * Float(bc))\n               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n\
    \               Double(                           )\n/tmp/tmpadwkhz_p.swift:20:16:\
    \ error: value of optional type 'Float?' must be unwrapped to a value of type\
    \ 'Float'\n        return Float(ac + bc) / (2.0 * Float(bc))\n               ^\n\
    /tmp/tmpadwkhz_p.swift:20:16: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        return Float(ac + bc) / (2.0 * Float(bc))\n\
    \               ^\n               (              ?? <#default value#>)\n/tmp/tmpadwkhz_p.swift:20:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return Float(ac + bc) / (2.0 * Float(bc))\n               ^\n\
    \                             !\n"
  stdout: ''
  timestamp: 1660029113
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return triangle_area_func(a, b, c, 0.0, 0.0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmphvj1t9ju.swift:13:12: error: cannot find 'triangle_area_func' in\
    \ scope\n    return triangle_area_func(a, b, c, 0.0, 0.0)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029113
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a >= b + c {\n        return -1\n    }\n    if b >= a + c {\n        return\
    \ -1\n    }\n    if c >= a + b {\n        return -1\n    }\n\n    let side1: Double\
    \ = (a + b + c) / 2\n    let side2: Double = (a + b + c) - side1\n    let side3:\
    \ Double = (a * b + b * c - c * b) / 6\n\n    return ceil(side1 + side2 + side3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp9tk7ujsw.swift:23:37: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let side1: Double = (a + b + c) / 2\n      \
    \                  ~~~~~~~~~~~~^~~\n                        Double(        )\n\
    /tmp/tmp9tk7ujsw.swift:24:32: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n    let side2: Double = (a + b + c) - side1\n      \
    \                         ^\n                        Double(    )\n/tmp/tmp9tk7ujsw.swift:25:25:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let side3:\
    \ Double = (a * b + b * c - c * b) / 6\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9tk7ujsw.swift:27:12: error: cannot find 'ceil' in scope\n    return ceil(side1\
    \ + side2 + side3)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660029209
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let s3 = b * b\n    let s4 = a * a\n    let s5 = c * c\n    let s6 = s3 -\
    \ s4 - s5\n    if s6 > 0 {\n        return (Double(s6) / 3.0).toFixed(2)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3y3c7ndc.swift:18:35: error: value of type 'Double' has no member\
    \ 'toFixed'\n        return (Double(s6) / 3.0).toFixed(2)\n               ~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660029115
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var area: Double = 0.0\n    var a: Double = a\n    var b: Double = b\n  \
    \  var c: Double = c\n    if a + b > c {\n        a = b\n        b += a\n    }\n\
    \    if b + c > a {\n        a = c\n        c += a\n    }\n    if a + c > b {\n\
    \        b = c\n        c += b\n    }\n    area = abs((a + b + c) / 2)\n    if\
    \ area == 0.0 {\n        return -1.0\n    }\n    return round(area, 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxha2yrd9.swift:14:21: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    var a: Double = a\n                    ^\n \
    \                   Double( )\n/tmp/tmpxha2yrd9.swift:15:21: error: cannot convert\
    \ value of type 'Int' to specified type 'Double'\n    var b: Double = b\n    \
    \                ^\n                    Double( )\n/tmp/tmpxha2yrd9.swift:16:21:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    var\
    \ c: Double = c\n                    ^\n                    Double( )\n/tmp/tmpxha2yrd9.swift:33:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660029116
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a+b+c == 0 {\n        return Double(0)\n    }\n    if a < 0 || b < 0 ||\
    \ c < 0 {\n        return -1\n    }\n\n    var s = 0.0\n    var p = a < b ? b\
    \ : a\n    var q = b < c ? c : b\n\n    var a1 = a - p\n    var b1 = b - q\n \
    \   var c1 = c - p\n\n    if a1 > b1 || a1 > c1 {\n        return Double(0)\n\
    \    }\n    if b1 > c1 {\n        s += a1 * b1\n    }\n    else {\n        s +=\
    \ b1 * c1\n    }\n\n    if b > c {\n        s += a * c1\n    }\n    else {\n \
    \       s += b * c1\n    }\n\n    return round(s, 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8g1xjsuo.swift:32:17: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        s += a1 * b1\n                ^\n\
    \             Double()\n/tmp/tmp8g1xjsuo.swift:35:17: error: cannot convert value\
    \ of type 'Int' to expected argument type 'Double'\n        s += b1 * c1\n   \
    \             ^\n             Double()\n/tmp/tmp8g1xjsuo.swift:39:16: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        s +=\
    \ a * c1\n               ^\n             Double( )\n/tmp/tmp8g1xjsuo.swift:42:16:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        s += b * c1\n               ^\n             Double( )\n/tmp/tmp8g1xjsuo.swift:45:12:\
    \ error: cannot find 'round' in scope\n    return round(s, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660029116
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var area: Double = 0\n    var a = -a\n    var b = -b\n    var c = -c\n\n\
    \    var c2 = c * c\n    var b2 = b * b\n\n    var s = (-a + b + c) / 2\n    area\
    \ = Double(s * s)\n\n    if area != 0 {\n        if b2 == 0 {\n            area\
    \ = Double(sqrt((1 + s) * s))\n        } else if c2 == 0 {\n            area =\
    \ Double(sqrt((1 / (1 + s)) * s))\n        } else {\n            area = Double(sqrt((1\
    \ / (1 + s)) * s) * s) / Double(sqrt(b2 + c2))\n        }\n    }\n\n    if area\
    \ < 0 {\n        area = -1 * area\n    }\n\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpron29brn.swift:26:27: error: cannot find 'sqrt' in scope\n    \
    \        area = Double(sqrt((1 + s) * s))\n                          ^~~~\n/tmp/tmpron29brn.swift:28:27:\
    \ error: cannot find 'sqrt' in scope\n            area = Double(sqrt((1 / (1 +\
    \ s)) * s))\n                          ^~~~\n/tmp/tmpron29brn.swift:30:27: error:\
    \ cannot find 'sqrt' in scope\n            area = Double(sqrt((1 / (1 + s)) *\
    \ s) * s) / Double(sqrt(b2 + c2))\n                          ^~~~\n/tmp/tmpron29brn.swift:30:65:\
    \ error: cannot find 'sqrt' in scope\n            area = Double(sqrt((1 / (1 +\
    \ s)) * s) * s) / Double(sqrt(b2 + c2))\n                                    \
    \                            ^~~~\n"
  stdout: ''
  timestamp: 1660029116
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c && a + c > b {\n        return ((a * b) - c) / 2\n    }\n  \
    \  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2twp1m3o.swift:14:30: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return ((a * b) - c) / 2\n     \
    \          ~~~~~~~~~~~~~~^~~\n               Double(          )\n"
  stdout: ''
  timestamp: 1660029117
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a < 0 || b < 0 || c < 0 {\n        return -1.0\n    }\n    if a + b >\
    \ c {\n        return Double(b * b - a * c)\n    }\n    if a + c > b {\n     \
    \   return Double(b * c - a * b)\n    }\n    return Double(a * a + b * b - c *\
    \ c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp1z25c0rx/tmp1z25c0rx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85dc936c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85dc62db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85dc62d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85dc62c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1z25c0rx                        0x000055a963e121cf <unavailable> + 4559

    5    libc.so.6                          0x00002b85dcb22460 __libc_start_main +
    245

    6    tmp1z25c0rx                        0x000055a963e11e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660029117
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let perimeter = a + b + c\n    let area  = Double(triangle_area: perimeter)\n\
    \    return area >= 3 ? area : -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpakplmub1.swift:14:17: error: no exact matches in call to initializer\
    \ \n    let area  = Double(triangle_area: perimeter)\n                ^\nSwift.Double:2:12:\
    \ note: incorrect labels for candidate (have: '(triangle_area:)', expected: '(_:)')\n\
    \    public init(_ v: Int)\n           ^\nSwift.Double:3:23: note: incorrect labels\
    \ for candidate (have: '(triangle_area:)', expected: '(_:)')\n    @inlinable public\
    \ init<Source>(_ value: Source) where Source : BinaryInteger\n               \
    \       ^\nSwift.BinaryFloatingPoint:3:23: note: incorrect labels for candidate\
    \ (have: '(triangle_area:)', expected: '(_:)')\n    @inlinable public init<Source>(_\
    \ value: Source) where Source : BinaryInteger\n                      ^\n"
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let s1 = b * b - 4 * a * c\n    let s2 = a * b + c * a\n    let s3 = 2 *\
    \ a * b - b * b\n\n    if s1 < 0 {\n        return -1\n    } else if s2 > 0 {\n\
    \        return s2 / s1\n    } else if s3 > 0 {\n        return s3 / s1\n    }\
    \ else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uld5yne.swift:20:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return s2 / s1\n               ~~~^~~~\n\
    \               Double()\n/tmp/tmp3uld5yne.swift:22:19: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return s3 /\
    \ s1\n               ~~~^~~~\n               Double()\n"
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    \n    return ((a + b + c) / 2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmple_j9zqj.swift:14:30: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return ((a + b + c) / 2) / 2\n     \
    \      ~~~~~~~~~~~~~~~~~~^~~\n           Double(              )\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \  guard (a != 0) &&\n      (b != 0) &&\n      (c == 0) else {\n    return -1.0\n\
    \  }\n\n  guard (a >= b) &&\n      (b >= c) else {\n    return -1.0\n  }\n\n \
    \ let area = (a + b + c) / 2\n  let area2 = (a + b) * (a + c) * (b + c)\n  if\
    \ area2 == 0 {\n    return area\n  }\n  return Double(area) / area2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprl2tz8nl.swift:27:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n/tmp/tmprl2tz8nl.swift:29:25: error: cannot convert value of\
    \ type 'Int' to expected argument type 'Double'\n  return Double(area) / area2\n\
    \                        ^\n                        Double( )\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if b == 0 || c == 0 {\n        return -1\n    }\n    let area_ab = sqrt_of_triangle(a:\
    \ a, b: b, c: c) / c\n    let area_bc = sqrt_of_triangle(a: b, c: c, d: 0) / b\n\
    \    let area_ac = sqrt_of_triangle(a: c, d: 0, b: 0) / a\n    if area_ab > area_bc\
    \ && area_ab > area_ac {\n        return area_ab\n    } else {\n        return\
    \ area_bc\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqut74d_2.swift:16:19: error: cannot find 'sqrt_of_triangle' in\
    \ scope\n    let area_ab = sqrt_of_triangle(a: a, b: b, c: c) / c\n          \
    \        ^~~~~~~~~~~~~~~~\n/tmp/tmpqut74d_2.swift:17:19: error: cannot find 'sqrt_of_triangle'\
    \ in scope\n    let area_bc = sqrt_of_triangle(a: b, c: c, d: 0) / b\n       \
    \           ^~~~~~~~~~~~~~~~\n/tmp/tmpqut74d_2.swift:18:19: error: cannot find\
    \ 'sqrt_of_triangle' in scope\n    let area_ac = sqrt_of_triangle(a: c, d: 0,\
    \ b: 0) / a\n                  ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let aLength = b - a\n    let bLength = c - b\n    let cLength = a - c\n \
    \   if aLength >= bLength && bLength >= cLength { \n        return 0.5 * Double((aLength\
    \ * bLength) + cLength * aLength)\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmprwquj93e/tmprwquj93e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52aa987c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52aa67eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52aa67e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52aa67d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwquj93e                        0x000055e85e7451cf <unavailable> + 4559

    5    libc.so.6                          0x00002b52aab73460 __libc_start_main +
    245

    6    tmprwquj93e                        0x000055e85e744e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (b * b) - (4 * a * c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprpsc6hzb.swift:13:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (b * b) - (4 * a * c)\n     \
    \      ~~~~~~~~^~~~~~~~~~~~~\n           Double(              )\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \  let l1 = abs(a-b)\n  let l2 = abs(b-c)\n  let l3 = abs(c-a)\n\n  if (l1<l2\
    \ && l1<l3) {\n    return l1\n  }\n  if (l2<l3) {\n    return l2\n  }\n  if (l3<l2)\
    \ {\n    return l3\n  }\n  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6rh73w68.swift:18:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l1\n           ^~\n         \
    \  Double( )\n/tmp/tmp6rh73w68.swift:21:12: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l2\n           ^~\n      \
    \     Double( )\n/tmp/tmp6rh73w68.swift:24:12: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l3\n           ^~\n      \
    \     Double( )\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c || a + c > b {\n        return -1\n    }\n    let area = (a\
    \ * b) - (a * c) + b * c\n    let rounded = roundToDouble(area, places: 2)\n \
    \   return rounded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptztvua48.swift:17:19: error: cannot find 'roundToDouble' in scope\n\
    \    let rounded = roundToDouble(area, places: 2)\n                  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = Double(a)\n    let b = Double(b)\n    let c = Double(c)\n\n    var\
    \ area = 0.0\n\n    if a + b <= c || b + c <= a || c + a <= b {\n        return\
    \ Double(-1) / Double(3.0)\n    } else {\n        let denom = a + b - c\n    \
    \    if denom > 0 {\n            area = Double((a + b) * 0.5) / denom\n      \
    \  }\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpvgem4j98/tmpvgem4j98.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08facc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08fa9c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08fa9c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08fa9bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgem4j98                        0x0000556015b6f21f <unavailable> + 4639

    5    libc.so.6                          0x00002b08faeb5460 __libc_start_main +
    245

    6    tmpvgem4j98                        0x0000556015b6eeb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a < 0 || b < 0 || c < 0 || a + b > c || b + c > a || c + a > b {\n   \
    \     return -1.0\n    }\n    let area = sqrtf(Double((b * b) - (a * c)))\n  \
    \  return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpr4aj6uap.swift:16:16: error: cannot find 'sqrtf' in scope\n   \
    \ let area = sqrtf(Double((b * b) - (a * c)))\n               ^~~~~\n/tmp/tmpr4aj6uap.swift:17:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660029121
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    assert(a >= 0)\n    assert(b >= 0)\n    assert(c >= 0)\n\n    \n    switch\
    \ {\n    case a + b > c:\n        return a + (c - b) * (b - a)\n    case b + c\
    \ > a:\n        return b + (a - c) * (c - b)\n    case c + a > b:\n        return\
    \ c + (b - a) * (a - c)\n    default:\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz6vbi52i.swift:18:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n/tmp/tmpz6vbi52i.swift:20:18: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return a +\
    \ (c - b) * (b - a)\n               ~~^~~~~~~~~~~~~~~~~~~\n               Double(\
    \              )\n/tmp/tmpz6vbi52i.swift:22:18: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return b + (a - c) * (c - b)\n\
    \               ~~^~~~~~~~~~~~~~~~~~~\n               Double(              )\n\
    /tmp/tmpz6vbi52i.swift:24:18: error: cannot convert return expression of type\
    \ 'Int' to return type 'Double'\n        return c + (b - a) * (a - c)\n      \
    \         ~~^~~~~~~~~~~~~~~~~~~\n               Double(              )\n"
  stdout: ''
  timestamp: 1660029130
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var area: Double = 0\n\n    if (a >= b && a >= c && b >= c) {\n        area\
    \ = 0.5 * math.sqrt(Double(pow(b, 2) + pow(c, 2)))\n    }\n\n    return area\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8lvxyv4f.swift:16:22: error: cannot find 'math' in scope\n    \
    \    area = 0.5 * math.sqrt(Double(pow(b, 2) + pow(c, 2)))\n                 \
    \    ^~~~\n/tmp/tmp8lvxyv4f.swift:16:39: error: cannot find 'pow' in scope\n \
    \       area = 0.5 * math.sqrt(Double(pow(b, 2) + pow(c, 2)))\n              \
    \                        ^~~\n/tmp/tmp8lvxyv4f.swift:16:51: error: cannot find\
    \ 'pow' in scope\n        area = 0.5 * math.sqrt(Double(pow(b, 2) + pow(c, 2)))\n\
    \                                                  ^~~\n"
  stdout: ''
  timestamp: 1660029121
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // make sure all the arguments are positive\n    if a < 0 || b < 0 || c <\
    \ 0 {\n        return -1.0\n    }\n    // make sure the area of the triangle is\
    \ non-negative\n    if a + b + c < 0 {\n        return -1.0\n    }\n    // calculate\
    \ the area of the triangle\n    let area = sqrt(Double(a) * Double(b) * Double(c))\n\
    \    // round the area to 2 decimal places and return the value\n    return Double(round(area\
    \ / Double(100) * Double(100), 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjdmbjpar.swift:22:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(Double(a) * Double(b) * Double(c))\n               ^~~~\n/tmp/tmpjdmbjpar.swift:24:19:\
    \ error: cannot find 'round' in scope\n    return Double(round(area / Double(100)\
    \ * Double(100), 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660029121
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let left = a\n    let right = b\n    let bottom = c\n    let top_left = a\
    \ * a + b * b\n    let top_right = a * b + a * c\n    let bottom_right = b * b\
    \ + c * c\n    let bottom_left = a * a + b * b + c * c\n    let area = bottom_left\
    \ * (top_right - top_left) \n    let area_valid = area > bottom_right\n    let\
    \ area_rounded = area_valid ? Double(area / top_right) : -1.0\n    return area_rounded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpqv2rqd93/tmpqv2rqd93.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba624bdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6248d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6248d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6248d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqv2rqd93                        0x000055e23c53625f <unavailable> + 4703

    5    libc.so.6                          0x00002ba624dc7460 __libc_start_main +
    245

    6    tmpqv2rqd93                        0x000055e23c535ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return b * b - a * c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpouq0zdj8.swift:13:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return b * b - a * c\n           ~~~~~~^~~~~~~\n\
    \           Double(      )\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    \n    if a > b {\n        let t = b\n        b = a\n        a = t\n    }\n\
    \    \n    if a > c {\n        let t = c\n        c = a\n        a = t\n    }\n\
    \    \n    let area = (a * b) - (c * b)\n    \n    if area >= 0 {\n        return\
    \ area\n    }\n    else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpewk7snto.swift:16:9: error: cannot assign to value: 'b' is a 'let'\
    \ constant\n        b = a\n        ^\n/tmp/tmpewk7snto.swift:17:9: error: cannot\
    \ assign to value: 'a' is a 'let' constant\n        a = t\n        ^\n/tmp/tmpewk7snto.swift:22:9:\
    \ error: cannot assign to value: 'c' is a 'let' constant\n        c = a\n    \
    \    ^\n/tmp/tmpewk7snto.swift:23:9: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n        a = t\n        ^\n/tmp/tmpewk7snto.swift:29:16: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n        return\
    \ area\n               ^~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return a * b * c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpazbmtsnn.swift:13:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * b * c\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum < 4 { return -1}\n    let area_triangle =\
    \ Double(pow((a + b + c) / 2, 1.0 / 3.0))\n    return area_triangle\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpgsi9m4l2.swift:15:32: error: cannot find 'pow' in scope\n    let\
    \ area_triangle = Double(pow((a + b + c) / 2, 1.0 / 3.0))\n                  \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = abs((a * a + b * b - c * c) / 2)\n    if area >= 0 {\n\
    \        return area\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvis98o4.swift:13:24: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let area: Double = abs((a * a + b * b - c * c) / 2)\n \
    \                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029222
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if (b + c) > a {\n        return Double(a * b / c)\n    }\n\n    if (a +\
    \ c) > b {\n        return Double(a + b * c / a)\n    }\n\n    if (a + b) > c\
    \ {\n        return Double(a + b + c * a / b)\n    }\n\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpemvg16nn/tmpemvg16nn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae437685c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43737cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43737c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43737b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemvg16nn                        0x0000562d3e50125f <unavailable> + 4703

    5    libc.so.6                          0x00002ae437871460 __libc_start_main +
    245

    6    tmpemvg16nn                        0x0000562d3e500ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660029123
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1)\n    }\n    var area: Double =\
    \ 0\n    let divisor = Double(a * b + c * c - a * b)\n    if divisor > 0 {\n \
    \       area = (a * b + c * c - a * b) / divisor\n    } else {\n        area =\
    \ Double(-1)\n    }\n    return round(area, places: 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpx_3owcwd.swift:19:9: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        area = (a * b + c * c - a * b) / divisor\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpx_3owcwd.swift:23:12: error: cannot find 'round' in scope\n    return\
    \ round(area, places: 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660029222
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // Return -1\n    if a <= 0 || b <= 0 || c <= 0 {\n        return -1\n  \
    \  }\n\n    return sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6ejv7i11.swift:18:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n           ^~~~\n/tmp/tmp6ejv7i11.swift:18:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(b, 2.0)\
    \ + pow(c, 2.0))\n                ^~~\n/tmp/tmp6ejv7i11.swift:18:31: error: cannot\
    \ find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n\
    \                              ^~~\n/tmp/tmp6ejv7i11.swift:18:45: error: cannot\
    \ find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n\
    \                                            ^~~\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnkz2ma3w.swift:13:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + b + c) / 2\n           ~~~~~~~~~~~~^~~\n\
    \           Double(        )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a+b+c)/2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpavl836jg.swift:13:16: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a+b+c)/2.0\n               ^\n\
    \           Double()\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // the sum can either be positive (all sides are positive), or negative (all\
    \ sides are negative)\n    // so if one side is negative or zero, then the other\
    \ side must be negative \n    // or zero.\n    // we check if both sides are zero\
    \ or both are positive, before checking if one side is negative or zero\n    var\
    \ sum: Double = 0\n    switch {\n    case a >= 0 && b >= 0 && c >= 0 :\n     \
    \   // the sum is positive\n        sum = a * b + c\n    case a >= 0 && b < 0\
    \ && c >= 0 :\n        // the sum is positive\n        sum = a * b + c\n    case\
    \ a < 0 && b >= 0 && c >= 0 :\n        // the sum is positive\n        sum = a\
    \ * c - b\n    case a < 0 && b < 0 && c >= 0 :\n        // the sum is positive\n\
    \        sum = a * c - b\n    case a < 0 && b >= 0 && c < 0 :\n        // the\
    \ sum is positive\n        sum = a * c - b\n    case a < 0 && b < 0 && c < 0 :\n\
    \        // the sum is positive\n        sum = a * c - b\n    default:\n     \
    \   // sum is zero\n        return -1\n    }\n\n    // check if any of a,b,c is\
    \ negative\n    var aNegative = false, \n        bNegative = false, \n       \
    \ cNegative = false\n    switch {\n    case a < 0 && b < 0 && c < 0:\n       \
    \ // a is negative\n        aNegative = true\n    case a < 0 && b >= 0 && c <\
    \ 0:\n        // b is negative\n        bNegative = true\n    case a < 0 && b\
    \ < 0 && c >= 0:\n        // c is negative\n        cNegative = true\n    case\
    \ a >= 0 && b < 0 && c < 0:\n        // b is negative\n        bNegative = true\n\
    \    case a >= 0 && b >= 0 && c < 0:\n        // c is negative\n        cNegative\
    \ = true\n    case a < 0 && b >= 0 && c >= 0:\n        // b is negative\n    \
    \    bNegative = true\n    case a >= 0 && b >= 0 && c >= 0:\n        // c is negative\n\
    \        cNegative = true\n    }\n\n    // check if sum is zero\n    if sum ==\
    \ 0 {\n        return -1\n    }\n\n    // if any of a,b,c is negative, then the\
    \ area is not a triangle\n    if aNegative || bNegative || cNegative {\n     \
    \   return -1\n    }\n\n    // if any of a,b,c is zero, then the area is not a\
    \ triangle\n    if a == 0 || b == 0 || c == 0 {\n        return -1\n    }\n\n\
    \    // if the sum is negative, then the area is not a triangle\n    if sum <\
    \ 0 {\n        return -1\n    }\n\n    // return the area rounded up to 2 decimal\
    \ points\n    return Double(sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpes9kpuqf.swift:18:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n/tmp/tmpes9kpuqf.swift:46:12: error: expected expression\
    \ in 'switch' statement\n    switch {\n           ^\n/tmp/tmpes9kpuqf.swift:92:1:\
    \ error: expected ')' in expression list\n}\n^\n/tmp/tmpes9kpuqf.swift:91:18:\
    \ note: to match this opening '('\n    return Double(sum\n                 ^\n\
    /tmp/tmpes9kpuqf.swift:21:21: error: cannot assign value of type 'Int' to type\
    \ 'Double'\n        sum = a * b + c\n              ~~~~~~^~~\n              Double(\
    \  )\n/tmp/tmpes9kpuqf.swift:24:21: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a * b + c\n              ~~~~~~^~~\n          \
    \    Double(  )\n/tmp/tmpes9kpuqf.swift:27:21: error: cannot assign value of type\
    \ 'Int' to type 'Double'\n        sum = a * c - b\n              ~~~~~~^~~\n \
    \             Double(  )\n/tmp/tmpes9kpuqf.swift:30:21: error: cannot assign value\
    \ of type 'Int' to type 'Double'\n        sum = a * c - b\n              ~~~~~~^~~\n\
    \              Double(  )\n/tmp/tmpes9kpuqf.swift:33:21: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n        sum = a * c - b\n            \
    \  ~~~~~~^~~\n              Double(  )\n/tmp/tmpes9kpuqf.swift:36:21: error: cannot\
    \ assign value of type 'Int' to type 'Double'\n        sum = a * c - b\n     \
    \         ~~~~~~^~~\n              Double(  )\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let s = a + b + c\n    if s > 3 {\n        return -1\n    }\n    return sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp9bakkk8c.swift:17:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(s * (s - a) * (s - b) * (s - c))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = (b * b) - 4.0 * c\n    let a2 = 2.0 * b * b - 8.0 * b + c\n    let\
    \ a3 = 2.0 * b * b + 4.0 * b - 4.0 * c + b\n    let a4 = -b - 2.0 * b - 2.0 *\
    \ b + c + b\n    if a1 < 0.0 || a2 < 0.0 || a3 < 0.0 || a4 < 0.0 {\n        return\
    \ -1.0\n    } else {\n        return sqrt(a1 * a1 + a2 * a2 + a3 * a3 + a4 * a4)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqqxlufdf.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let a1 = (b * b) - 4.0 * c\n          \
    \             ^\n                       Int( )\n/tmp/tmpqqxlufdf.swift:14:14:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let a2 = 2.0\
    \ * b * b - 8.0 * b + c\n             ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqqxlufdf.swift:15:14:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let a3 = 2.0\
    \ * b * b + 4.0 * b - 4.0 * c + b\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqqxlufdf.swift:16:14: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let a4 = -b - 2.0 * b - 2.0 * b + c + b\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqqxlufdf.swift:20:16: error: cannot find 'sqrt' in scope\n        return\
    \ sqrt(a1 * a1 + a2 * a2 + a3 * a3 + a4 * a4)\n               ^~~~\n"
  stdout: ''
  timestamp: 1660029418
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if b < c && a < c {\n        return ((a * b) - (b * c))\n    }\n    if b\
    \ > c {\n        return -1\n    }\n    if a > c {\n        return 1\n    }\n \
    \   return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7mygk_fl.swift:14:25: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return ((a * b) - (b * c))\n   \
    \            ~~~~~~~~~^~~~~~~~~~\n               Double(            )\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnkz2ma3w.swift:13:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + b + c) / 2\n           ~~~~~~~~~~~~^~~\n\
    \           Double(        )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    assert(a >= 0 && b >= 0 && c >= 0)\n    return (a + b + c) / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpu8gsfwzq.swift:14:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + b + c) / 2\n           ~~~~~~~~~~~~^~~\n\
    \           Double(        )\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let s = (a+b+c)/2.0\n    if a > b {\n        if a > c {\n            return\
    \ s * s\n        } else {\n            return -1\n        }\n    } else {\n  \
    \      if b > c {\n            return -1\n        } else {\n            return\
    \ s * s\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpw61p8a0p.swift:13:20: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let s = (a+b+c)/2.0\n          \
    \  ~~~~~~~^~~~\n/tmp/tmpw61p8a0p.swift:13:20: note: overloads for '/' exist with\
    \ these partially matching parameter lists: (Double, Double), (Duration, Double),\
    \ (Int, Int)\n    let s = (a+b+c)/2.0\n                   ^\n/tmp/tmpw61p8a0p.swift:16:22:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \            return s * s\n                   ~~^~~\n/tmp/tmpw61p8a0p.swift:24:22:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \            return s * s\n                   ~~^~~\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a * b + c * a * b - c * b + a * a) / (Double(a * b) * Double(c))\n\
    \    return area.rounded(to: 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8z2tnl3d.swift:13:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let area = (a * b + c * a * b - c * b + a * a) / (Double(a\
    \ * b) * Double(c))\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029198
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c && b + c > a && c + a > b {\n        return Double(a + b - c\
    \ + 1) / (2.0 * c)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x7uc1jm.swift:14:47: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        return Double(a + b - c + 1) / (2.0\
    \ * c)\n                                              ^\n                    \
    \                          Double( )\n"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a >= b + c || b >= a + c || a >= b + c {\n        return -1.0\n    }\n\
    \    if a >= a + b + c {\n        return triangle_area(a + b, a + c, b + c)\n\
    \    }\n    if a >= a + c + b {\n        return triangle_area(a + c, a, b + c)\n\
    \    }\n    return triangle_area(a, b, c + a)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2a2830m6.swift:17:29: error: missing argument labels 'a:b:c:' in\
    \ call\n        return triangle_area(a + b, a + c, b + c)\n                  \
    \          ^\n                             a:     b:     c: \n/tmp/tmp2a2830m6.swift:20:29:\
    \ error: missing argument labels 'a:b:c:' in call\n        return triangle_area(a\
    \ + c, a, b + c)\n                            ^\n                            \
    \ a:     b: c: \n/tmp/tmp2a2830m6.swift:22:25: error: missing argument labels\
    \ 'a:b:c:' in call\n    return triangle_area(a, b, c + a)\n                  \
    \      ^\n                         a: b: c: \n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let isValidTriangle = sides.map({ $0 > 0 }).reduce(true,\
    \ { ($0 && $1) }) && sides.map({ $0 > 0 }).reduce(true, { ($0 && $1) })\n    let\
    \ area = isValidTriangle ? Double(sides.reduce(($1.0, $0.0 + $1) + $0.0)) / 2.0\
    \ : 0\n    return Double(area)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfh2p65jl.swift:15:55: error: anonymous closure argument not contained\
    \ in a closure\n    let area = isValidTriangle ? Double(sides.reduce(($1.0, $0.0\
    \ + $1) + $0.0)) / 2.0 : 0\n                                                 \
    \     ^\n/tmp/tmpfh2p65jl.swift:15:61: error: anonymous closure argument not contained\
    \ in a closure\n    let area = isValidTriangle ? Double(sides.reduce(($1.0, $0.0\
    \ + $1) + $0.0)) / 2.0 : 0\n                                                 \
    \           ^\n/tmp/tmpfh2p65jl.swift:15:68: error: anonymous closure argument\
    \ not contained in a closure\n    let area = isValidTriangle ? Double(sides.reduce(($1.0,\
    \ $0.0 + $1) + $0.0)) / 2.0 : 0\n                                            \
    \                       ^\n/tmp/tmpfh2p65jl.swift:15:74: error: anonymous closure\
    \ argument not contained in a closure\n    let area = isValidTriangle ? Double(sides.reduce(($1.0,\
    \ $0.0 + $1) + $0.0)) / 2.0 : 0\n                                            \
    \                             ^\n/tmp/tmpfh2p65jl.swift:15:78: error: missing\
    \ argument for parameter #2 in call\n    let area = isValidTriangle ? Double(sides.reduce(($1.0,\
    \ $0.0 + $1) + $0.0)) / 2.0 : 0\n                                            \
    \                                 ^\n                                        \
    \                                     , <#(_, Int) throws -> _#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660029127
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return abs((a * b) * c) / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplty6uzek.swift:13:31: error: cannot find 'sqrt' in scope\n    return\
    \ abs((a * b) * c) / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n               \
    \               ^~~~\n/tmp/tmplty6uzek.swift:13:36: error: cannot find 'pow' in\
    \ scope\n    return abs((a * b) * c) / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n\
    \                                   ^~~\n/tmp/tmplty6uzek.swift:13:48: error:\
    \ cannot find 'pow' in scope\n    return abs((a * b) * c) / sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2))\n                                               ^~~\n/tmp/tmplty6uzek.swift:13:60:\
    \ error: cannot find 'pow' in scope\n    return abs((a * b) * c) / sqrt(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2))\n                                              \
    \             ^~~\n/tmp/tmplty6uzek.swift:13:12: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    return abs((a * b) * c) / sqrt(pow(a, 2)\
    \ + pow(b, 2) + pow(c, 2))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029169
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnkz2ma3w.swift:13:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + b + c) / 2\n           ~~~~~~~~~~~~^~~\n\
    \           Double(        )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \  if a < b && a < c {\n    return (b + c) / 2\n  } else if a > b && a > c {\n\
    \    return (b - a) / 2\n  } else {\n    return (c-a) / 2\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz5p7pxac.swift:14:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (b + c) / 2\n           ~~~~~~~~^~~\n\
    \           Double(    )\n/tmp/tmpz5p7pxac.swift:16:20: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return (b - a)\
    \ / 2\n           ~~~~~~~~^~~\n           Double(    )\n/tmp/tmpz5p7pxac.swift:18:18:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (c-a) / 2\n           ~~~~~~^~~\n           Double(  )\n"
  stdout: ''
  timestamp: 1660029127
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard a >= 0 && b >= 0 && c >= 0 else {\n        return -1\n    }\n    let\
    \ area = (a + b + c) / 2\n    return Double(area)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpa5bhojh0/tmpa5bhojh0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae52dfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae52dcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae52dcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae52dcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5bhojh0                        0x000055dd0d6d12f1 <unavailable> + 4849

    5    libc.so.6                          0x00002ae52e1c7460 __libc_start_main +
    245

    6    tmpa5bhojh0                        0x000055dd0d6d0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660029127
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a * b + c\n    if sum < a {\n        return -1\n    }\n    if sum\
    \ > c {\n        return -1\n    }\n    return sqrt(Double(sum) * 0.5) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp75pn_bb5.swift:20:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(Double(sum) * 0.5) / 2\n           ^~~~\n"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // Formula from the Wikipedia page - https://en.wikipedia.org/wiki/Triangle#Formula\n\
    \    var s = (a*a + b*b - c*c) / (2.0 * Double(a * b))\n    return Double(floor(round(s,\
    \ 2))) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp56dzi046.swift:14:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    var s = (a*a + b*b - c*c) / (2.0 * Double(a * b))\n   \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56dzi046.swift:15:19:\
    \ error: cannot find 'floor' in scope\n    return Double(floor(round(s, 2))) /\
    \ 2.0\n                  ^~~~~\n/tmp/tmp56dzi046.swift:15:25: error: cannot find\
    \ 'round' in scope\n    return Double(floor(round(s, 2))) / 2.0\n            \
    \            ^~~~~\n"
  stdout: ''
  timestamp: 1660029190
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard a > 0 && b > 0 && c > 0 else {\n        return -1.0\n    }\n    let\
    \ sum = a + b + c\n    if sum > 0 {\n        return Double(sum) / Double(sum)\
    \ * Double(Math.pow(a, b) + Math.pow(c, 2))\n    } else {\n        return -1.0\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp60607gxk.swift:18:51: error: cannot find 'Math' in scope\n    \
    \    return Double(sum) / Double(sum) * Double(Math.pow(a, b) + Math.pow(c, 2))\n\
    \                                                  ^~~~\n/tmp/tmp60607gxk.swift:18:68:\
    \ error: cannot find 'Math' in scope\n        return Double(sum) / Double(sum)\
    \ * Double(Math.pow(a, b) + Math.pow(c, 2))\n                                \
    \                                   ^~~~\n"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        if b + c > a {\n            return Double(b*b - a*a)\
    \ / (b*b)\n        } else {\n            return Double(c*c - a*a) / (c*c)\n  \
    \      }\n    } else {\n        if a + c > b {\n            return Double(a*a\
    \ - b*b) / (a*a)\n        } else {\n            return Double(a*a - c*c) / (a*a)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpje_748k5.swift:15:42: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n            return Double(b*b - a*a) / (b*b)\n\
    \                                         ^\n                                \
    \       Double( )\n/tmp/tmpje_748k5.swift:17:42: error: cannot convert value of\
    \ type 'Int' to expected argument type 'Double'\n            return Double(c*c\
    \ - a*a) / (c*c)\n                                         ^\n               \
    \                        Double( )\n/tmp/tmpje_748k5.swift:21:42: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n           \
    \ return Double(a*a - b*b) / (a*a)\n                                         ^\n\
    \                                       Double( )\n/tmp/tmpje_748k5.swift:23:42:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \            return Double(a*a - c*c) / (a*a)\n                              \
    \           ^\n                                       Double( )\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    let area_of_triangle = Double((sum - a * a - b *\
    \ b - c * c) / (2 * a * b))\n    return area_of_triangle\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp1pk46b29/tmp1pk46b29.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b31ec7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b31bbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b31bbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b31bbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1pk46b29                        0x000055b9b198b25f <unavailable> + 4703

    5    libc.so.6                          0x00002b2b320b3460 __libc_start_main +
    245

    6    tmp1pk46b29                        0x000055b9b198aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660029131
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var s = a + b + c\n    if s >= 0 {\n        let u = (a + b) / 2\n       \
    \ let v = (a + c) / 2\n        let w = (b + c) / 2\n        let area = (s*(s-u)*(u-v)*(v-w)*w)\
    \ / 2.0\n        return area\n    } else {\n        return -1.0\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpt3iguny_.swift:18:20: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        let area = (s*(s-u)*(u-v)*(v-w)*w) / 2.0\n        \
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029176
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    assert(a >= 0 && b >= 0 && c >= 0)\n    var d = b - a\n    if d > 0 {\n \
    \       d = d*d\n    }\n    d = d + c\n    if d > 0 {\n        d = d*d\n    }\n\
    \    d = d - a*a\n    if d < 0 {\n        return -1\n    }\n    return roundToDouble(d)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpk9wyta0p.swift:26:12: error: cannot find 'roundToDouble' in scope\n\
    \    return roundToDouble(d) / 2\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029131
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n    let area = (sides\
    \ * sides)/2\n    return Double(area)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpgswdr3v5.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpgswdr3v5.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n                     ^~~\n/tmp/tmpgswdr3v5.swift:13:34: error:\
    \ cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                 ^~~\n/tmp/tmpgswdr3v5.swift:13:46: error:\
    \ cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                             ^~~\n"
  stdout: ''
  timestamp: 1660029132
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return sqrt((pow(a, 2) + (pow(b, 2)) + (pow(c, 2)))) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwce3tog5.swift:13:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt((pow(a, 2) + (pow(b, 2)) + (pow(c, 2)))) / 2\n           ^~~~\n/tmp/tmpwce3tog5.swift:13:18:\
    \ error: cannot find 'pow' in scope\n    return sqrt((pow(a, 2) + (pow(b, 2))\
    \ + (pow(c, 2)))) / 2\n                 ^~~\n/tmp/tmpwce3tog5.swift:13:31: error:\
    \ cannot find 'pow' in scope\n    return sqrt((pow(a, 2) + (pow(b, 2)) + (pow(c,\
    \ 2)))) / 2\n                              ^~~\n/tmp/tmpwce3tog5.swift:13:45:\
    \ error: cannot find 'pow' in scope\n    return sqrt((pow(a, 2) + (pow(b, 2))\
    \ + (pow(c, 2)))) / 2\n                                            ^~~\n"
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return a * b * c / ((a + b + c) * (a + b + c))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1t41n_je.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return a * b * c / ((a + b + c) * (a + b + c))\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029197
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if (a + b > c) {\n        return Double.infinity\n    }\n\n    return Double(a\
    \ * b) / Double(a * c + b * b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpalv_1u6e/tmpalv_1u6e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b596589cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5965593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5965593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59655927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpalv_1u6e                        0x00005582d5f8921f <unavailable> + 4639

    5    libc.so.6                          0x00002b5965a88460 __libc_start_main +
    245

    6    tmpalv_1u6e                        0x00005582d5f88eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660029136
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return a*b * c / Double(a+b+c)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwo0ajype.swift:13:16: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return a*b * c / Double(a+b+c)\n   \
    \            ^\n           Double()\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = a - b\n    let a2 = a - c\n    let b1 = b - c\n    let ab2 = a*b\n\
    \    let ac2 = a*c\n    let b2 = b * c\n    let abc2 = ab2 + ac2\n    let sqrt2\
    \ = a1*a1 + b1*b1 + ab2*ab2 + abc2\n    let sqrt = sqrt(sqrt2)\n    if sqrt >=\
    \ a {\n        return sqrt * sqrt\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5q4i0xvj.swift:21:16: error: use of local variable 'sqrt' before\
    \ its declaration\n    let sqrt = sqrt(sqrt2)\n               ^\n/tmp/tmp5q4i0xvj.swift:21:9:\
    \ note: 'sqrt' declared here\n    let sqrt = sqrt(sqrt2)\n        ^\n/tmp/tmp5q4i0xvj.swift:23:21:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return sqrt * sqrt\n               ~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (sqrt(pow(a, 2) + pow(b, 2)) * sqrt(pow(c, 2) - pow(b, 2)))/2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo8z3o6v9.swift:13:13: error: cannot find 'sqrt' in scope\n    return\
    \ (sqrt(pow(a, 2) + pow(b, 2)) * sqrt(pow(c, 2) - pow(b, 2)))/2\n            ^~~~\n\
    /tmp/tmpo8z3o6v9.swift:13:18: error: cannot find 'pow' in scope\n    return (sqrt(pow(a,\
    \ 2) + pow(b, 2)) * sqrt(pow(c, 2) - pow(b, 2)))/2\n                 ^~~\n/tmp/tmpo8z3o6v9.swift:13:30:\
    \ error: cannot find 'pow' in scope\n    return (sqrt(pow(a, 2) + pow(b, 2)) *\
    \ sqrt(pow(c, 2) - pow(b, 2)))/2\n                             ^~~\n/tmp/tmpo8z3o6v9.swift:13:43:\
    \ error: cannot find 'sqrt' in scope\n    return (sqrt(pow(a, 2) + pow(b, 2))\
    \ * sqrt(pow(c, 2) - pow(b, 2)))/2\n                                         \
    \ ^~~~\n/tmp/tmpo8z3o6v9.swift:13:48: error: cannot find 'pow' in scope\n    return\
    \ (sqrt(pow(a, 2) + pow(b, 2)) * sqrt(pow(c, 2) - pow(b, 2)))/2\n            \
    \                                   ^~~\n/tmp/tmpo8z3o6v9.swift:13:60: error:\
    \ cannot find 'pow' in scope\n    return (sqrt(pow(a, 2) + pow(b, 2)) * sqrt(pow(c,\
    \ 2) - pow(b, 2)))/2\n                                                       \
    \    ^~~\n/tmp/tmpo8z3o6v9.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (sqrt(pow(a, 2) + pow(b, 2)) * sqrt(pow(c, 2) -\
    \ pow(b, 2)))/2\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029183
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let total = (a + b + c) * 0.5\n    let diff = Double(a - b) - Double(a -\
    \ c)\n    let diff2 = Double(b - c) - Double(a - b)\n    let diff3 = Double(c\
    \ - b) - Double(b - c)\n    let diff4 = Double(a - c) - Double(c - a)\n    return\
    \ Double(diff) * (Double(diff) * (Double(diff2) / Double(diff3)) + Double(diff4))\
    \ / (total * total)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2ijgil0e.swift:13:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let total = (a + b + c) * 0.5\n\
    \                ~~~~~~~~~~~ ^ ~~~\n/tmp/tmp2ijgil0e.swift:13:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n    let total = (a + b + c) * 0.5\n        \
    \                    ^\n"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var s = a + b + c\n    if s > 0 {\n        return (s / 2) + (s / 4) + (s\
    \ / 8) + \n            (s / 16) + (s / 32) + (s / 64) + (s / 128) \n    } else\
    \ {\n        return -1.0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpuhkuya5b.swift:15:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return (s / 2) + (s / 4) + (s / 8) + \n           \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029210
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (-b + sqrtDouble(powDouble(b - a) + powDouble(c - a)))/2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplph86icr.swift:13:18: error: cannot find 'sqrtDouble' in scope\n\
    \    return (-b + sqrtDouble(powDouble(b - a) + powDouble(c - a)))/2\n       \
    \          ^~~~~~~~~~\n/tmp/tmplph86icr.swift:13:29: error: cannot find 'powDouble'\
    \ in scope\n    return (-b + sqrtDouble(powDouble(b - a) + powDouble(c - a)))/2\n\
    \                            ^~~~~~~~~\n/tmp/tmplph86icr.swift:13:48: error: cannot\
    \ find 'powDouble' in scope\n    return (-b + sqrtDouble(powDouble(b - a) + powDouble(c\
    \ - a)))/2\n                                               ^~~~~~~~~\n/tmp/tmplph86icr.swift:13:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return (-b\
    \ + sqrtDouble(powDouble(b - a) + powDouble(c - a)))/2\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029203
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return sqrt(pow(((b * b) - pow(a, 2)) / pow(c, 2)),2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpgaicwtwa.swift:13:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(((b * b) - pow(a, 2)) / pow(c, 2)),2)\n           ^~~~\n/tmp/tmpgaicwtwa.swift:13:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(((b * b) - pow(a, 2))\
    \ / pow(c, 2)),2)\n                ^~~\n/tmp/tmpgaicwtwa.swift:13:32: error: cannot\
    \ find 'pow' in scope\n    return sqrt(pow(((b * b) - pow(a, 2)) / pow(c, 2)),2)\n\
    \                               ^~~\n/tmp/tmpgaicwtwa.swift:13:45: error: cannot\
    \ find 'pow' in scope\n    return sqrt(pow(((b * b) - pow(a, 2)) / pow(c, 2)),2)\n\
    \                                            ^~~\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let x = (a*a + b*b + c*c - a*b - a*c - b*c)\n    guard x >= 0 else {\n  \
    \      return -1\n    }\n    return Double((x*x + a*a + b*b + c*c - a*b - a*c\
    \ - b*c)/2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpdzvrqgg2/tmpdzvrqgg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba126e4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba126b41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba126b41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba126b407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzvrqgg2                        0x000056394347f2f1 <unavailable> + 4849

    5    libc.so.6                          0x00002ba127036460 __libc_start_main +
    245

    6    tmpdzvrqgg2                        0x000056394347eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660029141
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \  let ab = a - b\n  let bc = b - c\n  let cb = c - b\n\n  if ab > cb {\n    return\
    \ ab * ab + bc > cb * cb\n  }\n\n  if ab < cb {\n    return ab * ab + bc < cb\
    \ * cb\n  }\n\n  return ab * ab\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiix1irok.swift:18:25: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Double'\n    return ab * ab + bc > cb * cb\n   \
    \        ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpiix1irok.swift:22:25: error: cannot convert\
    \ return expression of type 'Bool' to return type 'Double'\n    return ab * ab\
    \ + bc < cb * cb\n           ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpiix1irok.swift:25:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \  return ab * ab\n         ~~~^~~~\n         Double()\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let aSide = sqrt(pow(a, 2) + pow(b, 2))\n    let bSide = sqrt(pow(b, 2) +\
    \ pow(c, 2))\n    let cSide = sqrt(pow(c, 2) + pow(a, 2))\n    if aSide + bSide\
    \ >= cSide {\n        return aSide / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpp6ppj2f7.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ aSide = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpp6ppj2f7.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let aSide = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpp6ppj2f7.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let aSide = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpp6ppj2f7.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let bSide = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpp6ppj2f7.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let bSide = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpp6ppj2f7.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let bSide = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpp6ppj2f7.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let cSide = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpp6ppj2f7.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let cSide = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpp6ppj2f7.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let cSide = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    switch {\n    case a > b + c:\n        return Double(a * a + b * b + c *\
    \ c - a * b * c + b * a * c + c * a * b - c * b * a - b * a * c)\n    default:\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpux0jedfm.swift:13:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return round((a+b+c) / 2.0, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpk3xpffdh.swift:13:12: error: cannot find 'round' in scope\n   \
    \ return round((a+b+c) / 2.0, 2)\n           ^~~~~\n/tmp/tmpk3xpffdh.swift:13:26:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    return round((a+b+c) / 2.0, 2)\n                 ~~~~~~~ ^ ~~~\n/tmp/tmpk3xpffdh.swift:13:26:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    return round((a+b+c) /\
    \ 2.0, 2)\n                         ^\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard b > 0 && c > 0 && a * b > c else {\n        return -1\n    }\n    return\
    \ (a * b) / c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5dj83x91.swift:16:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a * b) / c\n           ~~~~~~~~^~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // Check if sides sum is greater than the third side (no valid triangle exists)\n\
    \    if a + b > c {\n        return -1\n    }\n    // Otherwise calculate the\
    \ area\n    return abs(a*b*c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpio000c5x.swift:18:23: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return abs(a*b*c) / 2\n           ~~~~~~~~~~~^~~\n\
    \           Double(       )\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = (a * pi)/180.0\n    let b = (b * pi)/180.0\n    let c = (c * pi)/180.0\n\
    \    let area = sqrt((pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0)))\n    if area <\
    \ 1.0 {\n        return -1.0\n    }\n    return round(area*100)/100.0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo1ljovp9.swift:13:18: error: cannot find 'pi' in scope\n    let\
    \ a = (a * pi)/180.0\n                 ^~\n/tmp/tmpo1ljovp9.swift:14:18: error:\
    \ cannot find 'pi' in scope\n    let b = (b * pi)/180.0\n                 ^~\n\
    /tmp/tmpo1ljovp9.swift:15:18: error: cannot find 'pi' in scope\n    let c = (c\
    \ * pi)/180.0\n                 ^~\n/tmp/tmpo1ljovp9.swift:16:16: error: cannot\
    \ find 'sqrt' in scope\n    let area = sqrt((pow(a, 2.0) + pow(b, 2.0) + pow(c,\
    \ 2.0)))\n               ^~~~\n/tmp/tmpo1ljovp9.swift:16:22: error: cannot find\
    \ 'pow' in scope\n    let area = sqrt((pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0)))\n\
    \                     ^~~\n/tmp/tmpo1ljovp9.swift:16:36: error: cannot find 'pow'\
    \ in scope\n    let area = sqrt((pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0)))\n \
    \                                  ^~~\n/tmp/tmpo1ljovp9.swift:16:50: error: cannot\
    \ find 'pow' in scope\n    let area = sqrt((pow(a, 2.0) + pow(b, 2.0) + pow(c,\
    \ 2.0)))\n                                                 ^~~\n/tmp/tmpo1ljovp9.swift:20:12:\
    \ error: cannot find 'round' in scope\n    return round(area*100)/100.0\n    \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a - b)\n    let side2 = abs(b - c)\n    let side3 = abs(c\
    \ - a)\n    if side1 < side2 && side1 < side3 {\n        return side1 / 2\n  \
    \  }\n    if side2 < side3 {\n        return -1\n    }\n    return side1 / 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpq18xq3tc.swift:17:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return side1 / 2\n             \
    \  ~~~~~~^~~\n               Double(  )\n/tmp/tmpq18xq3tc.swift:22:18: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return side1 / 2\n           ~~~~~~^~~\n           Double(  )\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnkz2ma3w.swift:13:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a + b + c) / 2\n           ~~~~~~~~~~~~^~~\n\
    \           Double(        )\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \  return ((a * b) * (a + b + c)) / (Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c,\
    \ 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwr537w10.swift:13:37: error: cannot find 'Math' in scope\n  return\
    \ ((a * b) * (a + b + c)) / (Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\n\
    \                                    ^~~~\n/tmp/tmpwr537w10.swift:13:54: error:\
    \ cannot find 'Math' in scope\n  return ((a * b) * (a + b + c)) / (Math.pow(a,\
    \ 2) + Math.pow(b, 2) + Math.pow(c, 2))\n                                    \
    \                 ^~~~\n/tmp/tmpwr537w10.swift:13:71: error: cannot find 'Math'\
    \ in scope\n  return ((a * b) * (a + b + c)) / (Math.pow(a, 2) + Math.pow(b, 2)\
    \ + Math.pow(c, 2))\n                                                        \
    \              ^~~~\n/tmp/tmpwr537w10.swift:13:10: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n  return ((a * b) * (a + b + c)) / (Math.pow(a,\
    \ 2) + Math.pow(b, 2) + Math.pow(c, 2))\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029187
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = a * b * c\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ 0\n    } else if a + b > c {\n        return area / Double(a / b)\n    } else\
    \ if a + c > b {\n        return area / Double(c / b)\n    } else {\n        return\
    \ area / Double(a / c)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp200kwy72.swift:17:16: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        return area / Double(a / b)\n  \
    \             ^\n               Double( )\n/tmp/tmp200kwy72.swift:19:16: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    \
    \    return area / Double(c / b)\n               ^\n               Double( )\n\
    /tmp/tmp200kwy72.swift:21:16: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n        return area / Double(a / c)\n              \
    \ ^\n               Double( )\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a <= 0 || b <= 0 || c <= 0 {\n        return -1\n    }\n\n    let sqrt_of_a\
    \ = pow(Double(a), 0.5)\n    let sqrt_of_b = pow(Double(b), 0.5)\n    let sqrt_of_c\
    \ = pow(Double(c), 0.5)\n\n    let area = (sqrt_of_a * sqrt_of_b) * sqrt_of_c\n\
    \n    return Double(area / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp49jyh9q_.swift:17:21: error: cannot find 'pow' in scope\n    let\
    \ sqrt_of_a = pow(Double(a), 0.5)\n                    ^~~\n/tmp/tmp49jyh9q_.swift:18:21:\
    \ error: cannot find 'pow' in scope\n    let sqrt_of_b = pow(Double(b), 0.5)\n\
    \                    ^~~\n/tmp/tmp49jyh9q_.swift:19:21: error: cannot find 'pow'\
    \ in scope\n    let sqrt_of_c = pow(Double(c), 0.5)\n                    ^~~\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let s = (a + b + c) / 2\n    let area = (s * (s - a) * (s - b) * (s - c))\
    \ / (4 * a * b * c)\n    if area > 1.0 {\n        return area\n    }\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiuv5z_vn.swift:15:13: error: binary operator '>' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if area > 1.0 {\n       ~~~~ ^ ~~~\n\
    /tmp/tmpiuv5z_vn.swift:15:13: note: overloads for '>' exist with these partially\
    \ matching parameter lists: (Int, Int)\n    if area > 1.0 {\n            ^\n/tmp/tmpiuv5z_vn.swift:16:16:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return area\n               ^~~~\n               Double( )\n/tmp/tmpiuv5z_vn.swift:18:12:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return area\n           ^~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard a + b > c && a+c > b && a+b > c else { return -1.0 }\n    return Double(a\
    \ * b * c / Double(pow(Double(a), 2) + Double(b) * Double(c)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0vktbz6y.swift:14:38: error: cannot find 'pow' in scope\n    return\
    \ Double(a * b * c / Double(pow(Double(a), 2) + Double(b) * Double(c)))\n    \
    \                                 ^~~\n/tmp/tmp0vktbz6y.swift:14:12: error: the\
    \ compiler is unable to type-check this expression in reasonable time; try breaking\
    \ up the expression into distinct sub-expressions\n    return Double(a * b * c\
    \ / Double(pow(Double(a), 2) + Double(b) * Double(c)))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029197
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n\n    if a < b+c\
    \ && b < a+c && c < a+b {\n        return a*b*c\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpionklui0.swift:18:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a*b*c\n               ~~~^~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var a = a\n    var b = b\n    var c = c\n    var sum: Double = 0\n    var\
    \ isValid: Bool = false\n    var isValidLength: Bool = false\n\n    var triangleArea:\
    \ Double = 0\n\n    // Check if all three sides are positive\n    if isPositive(a)\
    \ && isPositive(b) && isPositive(c) {\n        // Check if any two sides are the\
    \ same\n        if ((a != b) || (a != c)) {\n            // Check if one side\
    \ is greater than  the other\n            if a > b {\n                isValid\
    \ = true\n                isValidLength = true\n                sum = a\n    \
    \        } else {\n                isValid = true\n                isValidLength\
    \ = true\n                sum = b\n            }\n        } else {\n         \
    \   // Check if both sides are the same\n            if a == c {\n           \
    \     isValid = true\n                isValidLength = true\n                sum\
    \ = a + b\n            } else {\n                isValid = true\n            \
    \    isValidLength = true\n                sum = a + c\n            }\n      \
    \  }\n    } else {\n        isValid = false\n    }\n\n    // Return invalid triangle\
    \ if there is no valid length or sides\n    if !isValid {\n        return -1\n\
    \    }\n\n    // Return invalid triangle if sum of two sides is a negative number\n\
    \    if isValidLength {\n        if sum < 0 {\n            return -1\n       \
    \ }\n    }\n\n    // Return the triangle area rounded to 2 decimal points\n  \
    \  triangleArea = Double(sum) / Double(6)\n\n    return triangleArea\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8kqqdo30.swift:23:8: error: cannot find 'isPositive' in scope\n\
    \    if isPositive(a) && isPositive(b) && isPositive(c) {\n       ^~~~~~~~~~\n\
    /tmp/tmp8kqqdo30.swift:23:25: error: cannot find 'isPositive' in scope\n    if\
    \ isPositive(a) && isPositive(b) && isPositive(c) {\n                        ^~~~~~~~~~\n\
    /tmp/tmp8kqqdo30.swift:23:42: error: cannot find 'isPositive' in scope\n    if\
    \ isPositive(a) && isPositive(b) && isPositive(c) {\n                        \
    \                 ^~~~~~~~~~\n/tmp/tmp8kqqdo30.swift:30:23: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n                sum = a\n            \
    \          ^\n                      Double( )\n/tmp/tmp8kqqdo30.swift:34:23: error:\
    \ cannot assign value of type 'Int' to type 'Double'\n                sum = b\n\
    \                      ^\n                      Double( )\n/tmp/tmp8kqqdo30.swift:41:25:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n                sum\
    \ = a + b\n                      ~~^~~\n                      Double( )\n/tmp/tmp8kqqdo30.swift:45:25:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n                sum\
    \ = a + c\n                      ~~^~~\n                      Double( )\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a > b {\n        if a > c {\n            return a * b\n        } else\
    \ {\n            return b * c\n        }\n    } else {\n        if b > c {\n \
    \           return a * c\n        } else {\n            return c * b\n       \
    \ }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbs2et_5z.swift:15:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return a * b\n             \
    \      ~~^~~\n                   Double( )\n/tmp/tmpbs2et_5z.swift:17:22: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \         return b * c\n                   ~~^~~\n                   Double( )\n\
    /tmp/tmpbs2et_5z.swift:21:22: error: cannot convert return expression of type\
    \ 'Int' to return type 'Double'\n            return a * c\n                  \
    \ ~~^~~\n                   Double( )\n/tmp/tmpbs2et_5z.swift:23:22: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n          \
    \  return c * b\n                   ~~^~~\n                   Double( )\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \  let a = Double(a)\n  let b = Double(b)\n  let c = Double(c)\n\n  var s = a\
    \ + b + c\n  return Double(ceil(sqrt(Double(s) / 2.0))) / 2.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5dupo5m1.swift:18:17: error: cannot find 'ceil' in scope\n  return\
    \ Double(ceil(sqrt(Double(s) / 2.0))) / 2.0\n                ^~~~\n/tmp/tmp5dupo5m1.swift:18:22:\
    \ error: cannot find 'sqrt' in scope\n  return Double(ceil(sqrt(Double(s) / 2.0)))\
    \ / 2.0\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - a * c\n    if a1 == 0 {\n        return -1\n    }\n    let\
    \ a2 = a1 * a / a1 + c\n    if a2 > c {\n        return -1\n    }\n    return\
    \ Double(sqrt(a2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaik52zpq.swift:21:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(a2))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var sum = a + b + c\n    if sum > (a+b+c) / 2 {\n        return Double(a+b+c)\
    \ / 2.0\n    } else {\n        return -1.0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp0itecass/tmp0itecass.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8f9049c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8f8d40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8f8d40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8f8d3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0itecass                        0x00005621e8c772f1 <unavailable> + 4849

    5    libc.so.6                          0x00002af8f9235460 __libc_start_main +
    245

    6    tmp0itecass                        0x00005621e8c76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660029159
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // make sure all inputs are positive\n    if a < 0 || b < 0 || c < 0 {\n\
    \        return -1\n    }\n    // make sure the sum of any two sides is greater\
    \ than the third side\n    let total = a * b + c\n    if total >= b+c {\n    \
    \    return sqrt(Double(total) * Double(a/b)) * sqrt(Double(total) / Double(b/c))\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp9whsamm3.swift:20:16: error: cannot find 'sqrt' in scope\n    \
    \    return sqrt(Double(total) * Double(a/b)) * sqrt(Double(total) / Double(b/c))\n\
    \               ^~~~\n/tmp/tmp9whsamm3.swift:20:52: error: cannot find 'sqrt'\
    \ in scope\n        return sqrt(Double(total) * Double(a/b)) * sqrt(Double(total)\
    \ / Double(b/c))\n                                                   ^~~~\n"
  stdout: ''
  timestamp: 1660029159
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    // The three sides of a triangle form a triangle when the sum of the \n \
    \   // sides is greater than the third side\n    return a + b + c < a ? a + b\
    \ + c : -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0d1rug9i.swift:15:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a + b + c < a ? a + b + c : -1\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n           Double(               \
    \        )\n"
  stdout: ''
  timestamp: 1660029159
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if (a + b > c && a + c > b && b + c > a) { \n        return (a + b + c) /\
    \ 2\n    } else {\n        return -1.0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1wc5eucv.swift:14:28: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (a + b + c) / 2\n       \
    \        ~~~~~~~~~~~~^~~\n               Double(        )\n"
  stdout: ''
  timestamp: 1660029160
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let total = (a + b + c) / 2\n    let square_area = a * a + b * b + c * c\n\
    \    let valid_triangles = square_area > total\n    return valid_triangles ? total\
    \ / 2 : -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpj1ba0sux.swift:16:28: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return valid_triangles ? total / 2 :\
    \ -1\n           ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n           Double(        \
    \                 )\n"
  stdout: ''
  timestamp: 1660029159
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return Double((a + b + c) / 2.0) * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpx66ry5zj.swift:13:31: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return Double((a + b + c) / 2.0)\
    \ * 0.5\n                  ~~~~~~~~~~~ ^ ~~~\n/tmp/tmpx66ry5zj.swift:13:31: note:\
    \ overloads for '/' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n    return Double((a + b + c) / 2.0) * 0.5\n          \
    \                    ^\n"
  stdout: ''
  timestamp: 1660029170
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return Double(sqrt(pow((b - a), 2) + pow((c - a), 2)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz_pzw0kz.swift:13:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow((b - a), 2) + pow((c - a), 2)))\n                  ^~~~\n/tmp/tmpz_pzw0kz.swift:13:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b - a), 2) +\
    \ pow((c - a), 2)))\n                       ^~~\n/tmp/tmpz_pzw0kz.swift:13:42:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b - a), 2) +\
    \ pow((c - a), 2)))\n                                         ^~~\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let isValid = a + b > c\n    guard isValid else { return -1 }\n    return\
    \ ((a + b + c)/2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkf49m9qw.swift:15:28: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return ((a + b + c)/2) / 2\n       \
    \    ~~~~~~~~~~~~~~~~^~~\n           Double(            )\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (math.sqrt(pow(a-b, 2) + pow(c-b, 2)) / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpe1mjrvpj.swift:13:13: error: cannot find 'math' in scope\n    return\
    \ (math.sqrt(pow(a-b, 2) + pow(c-b, 2)) / 2)\n            ^~~~\n/tmp/tmpe1mjrvpj.swift:13:23:\
    \ error: cannot find 'pow' in scope\n    return (math.sqrt(pow(a-b, 2) + pow(c-b,\
    \ 2)) / 2)\n                      ^~~\n/tmp/tmpe1mjrvpj.swift:13:37: error: cannot\
    \ find 'pow' in scope\n    return (math.sqrt(pow(a-b, 2) + pow(c-b, 2)) / 2)\n\
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = 0.5 * pow((pow(a, 2) + pow(b, 2) + pow(c, 2)), 0.5)\n    return\
    \ Double(area)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfqzrl0w_.swift:13:22: error: cannot find 'pow' in scope\n    let\
    \ area = 0.5 * pow((pow(a, 2) + pow(b, 2) + pow(c, 2)), 0.5)\n               \
    \      ^~~\n/tmp/tmpfqzrl0w_.swift:13:27: error: cannot find 'pow' in scope\n\
    \    let area = 0.5 * pow((pow(a, 2) + pow(b, 2) + pow(c, 2)), 0.5)\n        \
    \                  ^~~\n/tmp/tmpfqzrl0w_.swift:13:39: error: cannot find 'pow'\
    \ in scope\n    let area = 0.5 * pow((pow(a, 2) + pow(b, 2) + pow(c, 2)), 0.5)\n\
    \                                      ^~~\n/tmp/tmpfqzrl0w_.swift:13:51: error:\
    \ cannot find 'pow' in scope\n    let area = 0.5 * pow((pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2)), 0.5)\n                                                  ^~~\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double((b * b) - (4 * a * c))\n    }\n   \
    \ return Double(-1 * Double(a + b + c))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp0qlr6plj/tmp0qlr6plj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba09f0cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba09edc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba09edc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba09edc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qlr6plj                        0x00005629bd43521f <unavailable> + 4639

    5    libc.so.6                          0x00002ba09f2b9460 __libc_start_main +
    245

    6    tmp0qlr6plj                        0x00005629bd434eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \tguard a >= 0 && b >= 0 && c >= 0 else {\n\t\treturn -1\n\t}\n\tvar s = 0.0;\n\
    \tvar u = 0.0;\n\tvar v = 0.0;\n\tif b > c {\n\t\ts = (-b + c) / 2.0;\n\t\tu =\
    \ 2.0 * s;\n\t\tv = a;\n\t} else {\n\t\ts = (-b + c) / 2.0;\n\t\tv = 2.0 * s;\n\
    \t\tu = a;\n\t}\n\tif u > v {\n\t\treturn 0\n\t} else {\n\t\treturn Double(arccos(u)\
    \ * arccos(v) * pi / 180.0)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp617qmreg.swift:20:11: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n                s = (-b + c) / 2.0;\n  \
    \                      ^\n                    Double( )\n/tmp/tmp617qmreg.swift:22:7:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n                v\
    \ = a;\n                    ^\n                    Double( )\n/tmp/tmp617qmreg.swift:24:11:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \                s = (-b + c) / 2.0;\n                        ^\n            \
    \        Double( )\n/tmp/tmp617qmreg.swift:26:7: error: cannot assign value of\
    \ type 'Int' to type 'Double'\n                u = a;\n                    ^\n\
    \                    Double( )\n/tmp/tmp617qmreg.swift:31:17: error: cannot find\
    \ 'arccos' in scope\n                return Double(arccos(u) * arccos(v) * pi\
    \ / 180.0)\n                              ^~~~~~\n/tmp/tmp617qmreg.swift:31:29:\
    \ error: cannot find 'arccos' in scope\n                return Double(arccos(u)\
    \ * arccos(v) * pi / 180.0)\n                                          ^~~~~~\n\
    /tmp/tmp617qmreg.swift:31:41: error: cannot find 'pi' in scope\n             \
    \   return Double(arccos(u) * arccos(v) * pi / 180.0)\n                      \
    \                                ^~\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return 0\n    }\n    if a + c > b {\n        return\
    \ 0\n    }\n    if b + c > a {\n        return 0\n    }\n    let sum = a + b +\
    \ c\n    let p = a * b * c\n    let sqrt1 = sqrt(Double(p))\n    if sqrt1 <= 1.0\
    \ {\n        return sum * sqrt1\n    }\n    let sqrt2 = sqrt((sum - p) / 2.0)\n\
    \    return sum * sqrt2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppy614sqr.swift:24:17: error: cannot find 'sqrt' in scope\n    let\
    \ sqrt1 = sqrt(Double(p))\n                ^~~~\n/tmp/tmppy614sqr.swift:26:20:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return sum * sqrt1\n               ~~~~^~~~~~~\n               Double(\
    \    )\n/tmp/tmppy614sqr.swift:28:17: error: cannot find 'sqrt' in scope\n   \
    \ let sqrt2 = sqrt((sum - p) / 2.0)\n                ^~~~\n/tmp/tmppy614sqr.swift:28:32:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    let sqrt2 = sqrt((sum - p) / 2.0)\n                     ~~~~~~~~~ ^ ~~~\n\
    /tmp/tmppy614sqr.swift:28:32: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n\
    \    let sqrt2 = sqrt((sum - p) / 2.0)\n                               ^\n/tmp/tmppy614sqr.swift:29:16:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return sum * sqrt2\n           ~~~~^~~~~~~\n           Double(    )\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard a >= 0 && b >= 0 && c >= 0 else {\n        return -1\n    }\n    let\
    \ abs = min(a, min(b, c))\n    let bc = min(b, c)\n    let ca = min(c, a)\n  \
    \  let area = abs * bc * ca\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7bra9j17.swift:20:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660029172
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum > c {\n        return Double(sum - c) / 2\n\
    \    } else if sum > b {\n        return Double(c - b) / 2\n    } else if sum\
    \ > a {\n        return Double(b - a) / 2\n    } else {\n        return Double(a\
    \ - c) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp_7w4ggaq/tmp_7w4ggaq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb5a4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb5741b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb5741988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb57407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_7w4ggaq                        0x00005653e6b101cf <unavailable> + 4559

    5    libc.so.6                          0x00002b0bb5c36460 __libc_start_main +
    245

    6    tmp_7w4ggaq                        0x00005653e6b0fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660029172
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var result: Double = 0\n    \n    let a = abs(a)\n    let b = abs(b)\n  \
    \  let c = abs(c)\n\n    if a + b > c {\n        \n        // the sum of a and\
    \ b is greater then c\n        \n        if a + c > b {\n            // the sum\
    \ of a and c is greater then b\n            \n            result = a + b + c\n\
    \        } else {\n            // the sum of a and c is smaller then b\n     \
    \       \n            result = a + b + c\n        }\n    } else {\n        \n\
    \        // the sum of a and c is greater then b\n        \n        if b + c >\
    \ a {\n            // the sum of b and c is greater then a\n            \n   \
    \         result = b + c + a\n        } else {\n            // the sum of b and\
    \ c is smaller then a\n            \n            result = b + c + a\n        }\n\
    \    }\n    \n    guard result > 0 else { return -1 }\n    \n    return result\
    \ * 0.00000001\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpi5ypzsfb.swift:26:28: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n            result = a + b + c\n                     ~~~~~~^~~\n\
    \                     Double(  )\n/tmp/tmpi5ypzsfb.swift:30:28: error: cannot\
    \ assign value of type 'Int' to type 'Double'\n            result = a + b + c\n\
    \                     ~~~~~~^~~\n                     Double(  )\n/tmp/tmpi5ypzsfb.swift:39:28:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            result\
    \ = b + c + a\n                     ~~~~~~^~~\n                     Double(  )\n\
    /tmp/tmpi5ypzsfb.swift:43:28: error: cannot assign value of type 'Int' to type\
    \ 'Double'\n            result = b + c + a\n                     ~~~~~~^~~\n \
    \                    Double(  )\n"
  stdout: ''
  timestamp: 1660029172
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = (a + b + c) * 0.5;\n    if area >= c {\n        return\
    \ area;\n    } else {\n        return -1;\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4kvbl3y4.swift:13:31: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    let area: Double = (a + b + c) * 0.5;\n\
    \                              ^\n                       Double(    )\n/tmp/tmp4kvbl3y4.swift:14:13:\
    \ error: binary operator '>=' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    if area >= c {\n       ~~~~ ^  ~\n/tmp/tmp4kvbl3y4.swift:14:13: note:\
    \ overloads for '>=' exist with these partially matching parameter lists: (Int,\
    \ Int)\n    if area >= c {\n            ^\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var area: Double = 0\n    area = a * b * c\n    if area > Double(maxTriangleArea)\
    \ {\n        area = maxTriangleArea\n    }\n    if area < Double(minTriangleArea)\
    \ {\n        area = minTriangleArea\n    }\n    if area == 0.0 {\n        area\
    \ = Double(INFINITY)\n    }\n    return round(100 * area) / 100\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxvib9ewn.swift:14:18: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n    area = a * b * c\n           ~~~~~~^~~\n           Double(\
    \  )\n/tmp/tmpxvib9ewn.swift:15:22: error: cannot find 'maxTriangleArea' in scope\n\
    \    if area > Double(maxTriangleArea) {\n                     ^~~~~~~~~~~~~~~\n\
    /tmp/tmpxvib9ewn.swift:16:16: error: cannot find 'maxTriangleArea' in scope\n\
    \        area = maxTriangleArea\n               ^~~~~~~~~~~~~~~\n/tmp/tmpxvib9ewn.swift:18:22:\
    \ error: cannot find 'minTriangleArea' in scope\n    if area < Double(minTriangleArea)\
    \ {\n                     ^~~~~~~~~~~~~~~\n/tmp/tmpxvib9ewn.swift:19:16: error:\
    \ cannot find 'minTriangleArea' in scope\n        area = minTriangleArea\n   \
    \            ^~~~~~~~~~~~~~~\n/tmp/tmpxvib9ewn.swift:22:23: error: cannot find\
    \ 'INFINITY' in scope\n        area = Double(INFINITY)\n                     \
    \ ^~~~~~~~\n/tmp/tmpxvib9ewn.swift:24:12: error: cannot find 'round' in scope\n\
    \    return round(100 * area) / 100\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660029172
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a * a + b * b) - (c * c)\n    let area = area < 0 ? 0 : area\n\
    \    \n    func round(_ value: Double) -> Double {\n        func roundUp(_ value:\
    \ Double) -> Double {\n            return ceil(Double(value))\n        }\n   \
    \     \n        func roundDown(_ value: Double) -> Double {\n            return\
    \ floor(Double(value))\n        }\n        \n        func roundWith(_ precision:\
    \ Double) -> Double {\n            var divisor = pow(10.0, precision)\n      \
    \      let result = roundUp(Double(value) / divisor) * divisor\n            return\
    \ result\n        }\n        \n        return roundWith(precision: precision)\n\
    \    }\n    \n    return round(Double(area))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpd_w4ynaq.swift:14:9: error: invalid redeclaration of 'area'\n \
    \   let area = area < 0 ? 0 : area\n        ^\n/tmp/tmpd_w4ynaq.swift:13:9: note:\
    \ 'area' previously declared here\n    let area = (a * a + b * b) - (c * c)\n\
    \        ^\n/tmp/tmpd_w4ynaq.swift:18:20: error: cannot find 'ceil' in scope\n\
    \            return ceil(Double(value))\n                   ^~~~\n/tmp/tmpd_w4ynaq.swift:22:20:\
    \ error: cannot find 'floor' in scope\n            return floor(Double(value))\n\
    \                   ^~~~~\n/tmp/tmpd_w4ynaq.swift:26:27: error: cannot find 'pow'\
    \ in scope\n            var divisor = pow(10.0, precision)\n                 \
    \         ^~~\n/tmp/tmpd_w4ynaq.swift:31:37: error: cannot find 'precision' in\
    \ scope\n        return roundWith(precision: precision)\n                    \
    \                ^~~~~~~~~\n/tmp/tmpd_w4ynaq.swift:31:25: error: extraneous argument\
    \ label 'precision:' in call\n        return roundWith(precision: precision)\n\
    \                        ^~~~~~~~~~~~\n                         \n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var a1, b1, c1 : [Int] = [a, b]\n    while a1 < b1 && b1 < c1 {\n       \
    \ if a1 < c1 {\n            c1--\n        }\n        if b1 < c1 {\n          \
    \  c1 -= a1\n        }\n        if c1 < b1 {\n            b1 -= a1\n         \
    \   b1 -= c1\n        }\n        a1 += a1\n        b1 += b1\n        c1 += c1\n\
    \    }\n\n    var a2, b2, c2 : [Int] = [b]\n    while a1 < c1 && b1 < c1 {\n \
    \       if a1 < b1 {\n            b1 += a1 - c1\n            a1 += a1\n      \
    \  }\n        if a1 < c1 {\n            c1 += a1 - b1\n            a1 += a1\n\
    \        }\n        if b1 < c1 {\n            c1 += b1 - c1\n            b1 +=\
    \ b1\n        }\n        a1 += a1\n        b2 += b1\n        c2 += c1\n    }\n\
    \n    var a3, b3, c3 : [Int] = [c]\n    while a1 < c1 && b1 < c1 {\n        if\
    \ a1 < b1 {\n            b1 += a1 - c1\n            a1 += a1\n        }\n    \
    \    if a1 < c1 {\n            c1 += a1 - b1\n            a1 += a1\n        }\n\
    \        if b1 < c1 {\n            c1 += b1 - c1\n            b1 += b1\n     \
    \   }\n        a1 += a1\n        b3 += b1\n        c3 += c1\n    }\n\n    var\
    \ ans, bns, cns : [Double] = [0.0]\n\n    var a4 : Int = 0\n    while a1 < b1\
    \ && b1 < c1 && c1 < a1 {\n        if a1 < c1 {\n            c1 += a1 - b1\n \
    \           a1 += a1\n        }\n        if b1 < c1 {\n            c1 += b1 -\
    \ c1\n            b1 += b1\n        }\n        if c1 < a1 {\n            a1 +=\
    \ c1\n            a1 += a1\n        }\n        a1 += a1\n        a4 += a1\n  \
    \      bn += b1\n        cn += c1\n    }\n\n    var a5 : Int = 0\n    while a1\
    \ < c1 && b1 < c1 && c1 < a1 {\n        if a1 < b1 {\n            b1 += a1 - c1\n\
    \            a1 += a1\n        }\n        if a1 < c1 {\n            c1 += a1 -\
    \ b1\n            a1 += a1\n        }\n        if b1 < c1 {\n            c1 +=\
    \ b1 - c1\n            b1 += b1\n        }\n        a1 += a1\n        a5 += a1\n\
    \        bn += b1\n        cn += c1\n    }\n\n    if a1 == a4 || b1 == b4 || c4\
    \ == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoy261vpi.swift:110:39: error: expected '{' after 'if' condition\n\
    \    if a1 == a4 || b1 == b4 || c4 == c\n                                    \
    \  ^\n/tmp/tmpoy261vpi.swift:13:9: error: type annotation missing in pattern\n\
    \    var a1, b1, c1 : [Int] = [a, b]\n        ^\n/tmp/tmpoy261vpi.swift:13:13:\
    \ error: type annotation missing in pattern\n    var a1, b1, c1 : [Int] = [a,\
    \ b]\n            ^\n/tmp/tmpoy261vpi.swift:14:25: error: binary operator '<'\
    \ cannot be applied to operands of type '()' and '[Int]'\n    while a1 < b1 &&\
    \ b1 < c1 {\n                     ~~ ^ ~~\n/tmp/tmpoy261vpi.swift:14:25: note:\
    \ overloads for '<' exist with these partially matching parameter lists: ((),\
    \ ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n    while a1 < b1 && b1 < c1 {\n                  \
    \      ^\n/tmp/tmpoy261vpi.swift:15:15: error: binary operator '<' cannot be applied\
    \ to operands of type '()' and '[Int]'\n        if a1 < c1 {\n           ~~ ^\
    \ ~~\n/tmp/tmpoy261vpi.swift:15:15: note: overloads for '<' exist with these partially\
    \ matching parameter lists: ((), ()), (AnyIndex, AnyIndex), (Character, Character),\
    \ (ContinuousClock.Instant, ContinuousClock.Instant), (Duration, Duration), (Int,\
    \ Int), (Int16, Int16), (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never,\
    \ Never), (ObjectIdentifier, ObjectIdentifier), (String, String), (String.Index,\
    \ String.Index), (SuspendingClock.Instant, SuspendingClock.Instant), (TaskPriority,\
    \ TaskPriority), (UInt, UInt), (UInt16, UInt16), (UInt32, UInt32), (U"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a > b + c {\n        return -1\n    }\n\n    if b > c + a {\n        return\
    \ -1\n    }\n\n    if c > a + b {\n        return -1\n    }\n\n    return (b *\
    \ b) - (4 * a * c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpije1rt04.swift:25:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (b * b) - (4 * a * c)\n     \
    \      ~~~~~~~~^~~~~~~~~~~~~\n           Double(              )\n"
  stdout: ''
  timestamp: 1660029176
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \  func add(a: Double, b: Double) -> Double {\n    return a + b\n  }\n\n  func\
    \ sub(a: Double, b: Double) -> Double {\n    return a - b\n  }\n\n  func mul(a:\
    \ Double, b: Double) -> Double {\n    return a * b\n  }\n\n  func div(a: Double,\
    \ b: Double) -> Double {\n    return a / b\n  }\n\n  func area(a: Double, b: Double,\
    \ c: Double) -> (Double) {\n    return (mul(a, sub(b, c)) + add(sub(a, c), sub(b,\
    \ a))) / 2.0\n  }\n\n  func area2(a: Double, b: Double, c: Double) -> (Double)\
    \ {\n    let add = (a * sub(b, c)) - (b * add(c))\n    let sub = (a * add(b, c))\
    \ + (b * sub(c))\n    return (add + sub) / 2.0\n  }\n\n  func isTriangle(sides:\
    \ Double) -> Bool {\n    let s1 = area(sides, sides, sides)\n    let s2 = area(sides,\
    \ sides, sides + 1)\n    let s3 = area(sides + 1, sides, sides)\n    return s1\
    \ == s2 && s2 == s3\n  }\n\n  guard isTriangle(a: a, b: b, c: c) else { return\
    \ -1 }\n\n  let s0 = area2(a, c, b)\n  let s1 = area2(a, 1, c)\n  let s2 = area2(a\
    \ + 1, b, c)\n\n  guard s0 >= 0 && s1 >= 0 && s2 >= 0 else {\n    return -1\n\
    \  }\n\n  return Double(round(100 * s0 / s1))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplu_qhqpa.swift:30:16: error: missing argument labels 'a:b:' in\
    \ call\n    return (mul(a, sub(b, c)) + add(sub(a, c), sub(b, a))) / 2.0\n   \
    \            ^\n                a: b: \n/tmp/tmplu_qhqpa.swift:30:23: error: missing\
    \ argument labels 'a:b:' in call\n    return (mul(a, sub(b, c)) + add(sub(a, c),\
    \ sub(b, a))) / 2.0\n                      ^\n                       a: b: \n\
    /tmp/tmplu_qhqpa.swift:30:36: error: missing argument labels 'a:b:' in call\n\
    \    return (mul(a, sub(b, c)) + add(sub(a, c), sub(b, a))) / 2.0\n          \
    \                         ^\n                                    a:         b:\
    \ \n/tmp/tmplu_qhqpa.swift:30:40: error: missing argument labels 'a:b:' in call\n\
    \    return (mul(a, sub(b, c)) + add(sub(a, c), sub(b, a))) / 2.0\n          \
    \                             ^\n                                        a: b:\
    \ \n/tmp/tmplu_qhqpa.swift:30:51: error: missing argument labels 'a:b:' in call\n\
    \    return (mul(a, sub(b, c)) + add(sub(a, c), sub(b, a))) / 2.0\n          \
    \                                        ^\n                                 \
    \                  a: b: \n/tmp/tmplu_qhqpa.swift:34:23: error: missing argument\
    \ labels 'a:b:' in call\n    let add = (a * sub(b, c)) - (b * add(c))\n      \
    \                ^\n                       a: b: \n/tmp/tmplu_qhqpa.swift:34:42:\
    \ error: missing argument label 'a:' in call\n    let add = (a * sub(b, c)) -\
    \ (b * add(c))\n                                         ^\n                 \
    \                        a: \n/tmp/tmplu_qhqpa.swift:34:43: error: missing argument\
    \ for parameter 'b' in call\n    let add = (a * sub(b, c)) - (b * add(c))\n  \
    \                                        ^\n                                 \
    \         , b: <#Double#>\n/tmp/tmplu_qhqpa.swift:13:8: note: 'add(a:b:)' declared\
    \ here\n  func add(a: Double, b: Double) -> Double {\n       ^\n/tmp/tmplu_qhqpa.swift:35:42:\
    \ error: missing argument label 'a:' in call\n    let sub = (a * add(b, c)) +\
    \ (b * sub(c))\n                                         ^\n                 \
    \                        a: \n/tmp/tmplu_qhqpa.swift:35:43: erro"
  stdout: ''
  timestamp: 1660029174
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    switch {\n    case a+b+c <= 0: return -1\n    case a+b == c && b+c == a &&\
    \ b+a == c: return 0\n    case a == 0 && b == 0: return 0\n    case a == 0 ||\
    \ b == 0 || c == 0: return Double(-1)\n    case a > 0 && b > 0 && c > 0: return\
    \ Double(a+b+c-(a*b*c))/(2*(a+b+c))\n    case a > 0 && b > 0 && c < 0: return\
    \ Double(a+b+c-(a*b*c))/(2*(a+b+c))\n    case a < 0 && b < 0 && c > 0: return\
    \ Double(a+b+c-(a*b*c))/(2*(a+b+c))\n    case a < 0 && b < 0 && c < 0: return\
    \ Double(a+b+c-(a*b*c))/(2*(a+b+c))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpowknbhcu.swift:13:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n/tmp/tmpowknbhcu.swift:18:42: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n    case a > 0 && b > 0 && c >\
    \ 0: return Double(a+b+c-(a*b*c))/(2*(a+b+c))\n                              \
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpowknbhcu.swift:19:42: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n    case a > 0 &&\
    \ b > 0 && c < 0: return Double(a+b+c-(a*b*c))/(2*(a+b+c))\n                 \
    \                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpowknbhcu.swift:20:42:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    case a < 0\
    \ && b < 0 && c > 0: return Double(a+b+c-(a*b*c))/(2*(a+b+c))\n              \
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpowknbhcu.swift:21:42:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    case a < 0\
    \ && b < 0 && c < 0: return Double(a+b+c-(a*b*c))/(2*(a+b+c))\n              \
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029302
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \  if a + b > c || b + c > a || c + a > b || a + c > b {\n    return -1\n  }\n\
    \  let area = (a * b + c * c) - (b * c + a * a)\n  return Double(round(area /\
    \ Double(a * b), 2)) / Double(a * b)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbicmmk7x.swift:17:17: error: cannot find 'round' in scope\n  return\
    \ Double(round(area / Double(a * b), 2)) / Double(a * b)\n                ^~~~~\n\
    /tmp/tmpbicmmk7x.swift:17:28: error: binary operator '/' cannot be applied to\
    \ operands of type 'Int' and 'Double'\n  return Double(round(area / Double(a *\
    \ b), 2)) / Double(a * b)\n                      ~~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpbicmmk7x.swift:17:28:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n  return Double(round(area\
    \ / Double(a * b), 2)) / Double(a * b)\n                           ^\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = 2.0 * (a * b) + c\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp39sdvf6x.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let area: Double = 2.0 * (a * b) + c\n\
    \                       ^\n                       Int( )\n/tmp/tmp39sdvf6x.swift:13:38:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    let\
    \ area: Double = 2.0 * (a * b) + c\n                       ~~~~~~~~~~~~~~^~~\n\
    \                       Double(          )\n"
  stdout: ''
  timestamp: 1660029177
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    var area: Double\n    \n    if (a+b <= c) {\n        area = 0.5 * Double((a\
    \ + b) * (b - c))\n    } else {\n        area = -1 * Double((a + b) * (c - b))\n\
    \    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpqto0rufu/tmpqto0rufu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf021fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf01ef1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf01ef1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf01ef07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqto0rufu                        0x0000560122acc1cf <unavailable> + 4559

    5    libc.so.6                          0x00002acf023e6460 __libc_start_main +
    245

    6    tmpqto0rufu                        0x0000560122acbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sideA = length(b)\n    let sideC = length(c)\n    let sideB = length(a\
    \ + c)\n    guard sideA >= 0 && sideC > 0 && sideB > 0, sideB > sideA else { return\
    \ -1 }\n    return sqrt(Double(sideA * sideB - sideC * sideA))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmlukw8sk.swift:13:17: error: cannot find 'length' in scope\n  \
    \  let sideA = length(b)\n                ^~~~~~\n/tmp/tmpmlukw8sk.swift:14:17:\
    \ error: cannot find 'length' in scope\n    let sideC = length(c)\n          \
    \      ^~~~~~\n/tmp/tmpmlukw8sk.swift:15:17: error: cannot find 'length' in scope\n\
    \    let sideB = length(a + c)\n                ^~~~~~\n/tmp/tmpmlukw8sk.swift:17:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(Double(sideA * sideB - sideC\
    \ * sideA))\n           ^~~~\n/tmp/tmpmlukw8sk.swift:17:17: error: no exact matches\
    \ in call to initializer \n    return sqrt(Double(sideA * sideB - sideC * sideA))\n\
    \                ^\n/tmp/tmpmlukw8sk.swift:17:17: note: found candidate with type\
    \ '(Builtin.FPIEEE64) -> Double'\n    return sqrt(Double(sideA * sideB - sideC\
    \ * sideA))\n                ^\n/tmp/tmpmlukw8sk.swift:17:17: note: found candidate\
    \ with type '(Substring) -> Double?'\n    return sqrt(Double(sideA * sideB - sideC\
    \ * sideA))\n                ^\n/tmp/tmpmlukw8sk.swift:17:17: note: found candidate\
    \ with type '(Int) -> Double'\n    return sqrt(Double(sideA * sideB - sideC *\
    \ sideA))\n                ^\n/tmp/tmpmlukw8sk.swift:17:17: note: found candidate\
    \ with type '(Float16) -> Double'\n    return sqrt(Double(sideA * sideB - sideC\
    \ * sideA))\n                ^\n/tmp/tmpmlukw8sk.swift:17:17: note: found candidate\
    \ with type '(Float) -> Double'\n    return sqrt(Double(sideA * sideB - sideC\
    \ * sideA))\n                ^\n/tmp/tmpmlukw8sk.swift:17:17: note: found candidate\
    \ with type '(Double) -> Double'\n    return sqrt(Double(sideA * sideB - sideC\
    \ * sideA))\n                ^\n/tmp/tmpmlukw8sk.swift:17:17: note: found candidate\
    \ with type '(Float80) -> Double'\n    return sqrt(Double(sideA * sideB - sideC\
    \ * sideA))\n                ^\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard c > 0 && a>0 && b>0 && a+b+c>0 && a+c > c && a+b > b else { return\
    \ -1 }\n    return Double((a * b * c) / Double(a+b+c))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zna4kyo.swift:14:31: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return Double((a * b * c) / Double(a+b+c))\n\
    \                  ~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmp8zna4kyo.swift:14:31:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return Double((a * b * c) / Double(a+b+c))\n\
    \                              ^\n"
  stdout: ''
  timestamp: 1660029208
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let length = hypot(a, hypot(b, c))\n    if length < 0 {\n        return -1\n\
    \    }\n    return Float(a * b * c) / length\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplnb14wwf.swift:13:18: error: cannot find 'hypot' in scope\n   \
    \ let length = hypot(a, hypot(b, c))\n                 ^~~~~\n/tmp/tmplnb14wwf.swift:13:27:\
    \ error: cannot find 'hypot' in scope\n    let length = hypot(a, hypot(b, c))\n\
    \                          ^~~~~\n/tmp/tmplnb14wwf.swift:17:29: error: cannot\
    \ convert return expression of type 'Float' to return type 'Double'\n    return\
    \ Float(a * b * c) / length\n           ~~~~~~~~~~~~~~~~~^~~~~~~~\n          \
    \ Double(                  )\n"
  stdout: ''
  timestamp: 1660029182
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    guard b > a && b > c else { return Double.infinity }\n    guard c > a &&\
    \ c > b else { return Double.infinity }\n    return Double.pi * pow((pow(b,2)-pow(a+b,2)-pow(c+a,2))/(2*pow(a,2)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmph71ji6ez.swift:15:24: error: cannot find 'pow' in scope\n    return\
    \ Double.pi * pow((pow(b,2)-pow(a+b,2)-pow(c+a,2))/(2*pow(a,2)))\n           \
    \            ^~~\n/tmp/tmph71ji6ez.swift:15:29: error: cannot find 'pow' in scope\n\
    \    return Double.pi * pow((pow(b,2)-pow(a+b,2)-pow(c+a,2))/(2*pow(a,2)))\n \
    \                           ^~~\n/tmp/tmph71ji6ez.swift:15:38: error: cannot find\
    \ 'pow' in scope\n    return Double.pi * pow((pow(b,2)-pow(a+b,2)-pow(c+a,2))/(2*pow(a,2)))\n\
    \                                     ^~~\n/tmp/tmph71ji6ez.swift:15:49: error:\
    \ cannot find 'pow' in scope\n    return Double.pi * pow((pow(b,2)-pow(a+b,2)-pow(c+a,2))/(2*pow(a,2)))\n\
    \                                                ^~~\n/tmp/tmph71ji6ez.swift:15:64:\
    \ error: cannot find 'pow' in scope\n    return Double.pi * pow((pow(b,2)-pow(a+b,2)-pow(c+a,2))/(2*pow(a,2)))\n\
    \                                                               ^~~\n"
  stdout: ''
  timestamp: 1660029183
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a2 = a * a\n    let b2 = b * b\n    let c2 = c * c\n    let ab2 = a2\
    \ + b2\n    let bc2 = b2 + c2\n    let ac2 = a2 + c2\n\n    if ab2 >= bc {\n \
    \       return (a * b + b * c + c * a) * (ab2 - bc2) / 2\n    } else if ac2 >=\
    \ bc {\n        return (a * b + c * c + b * a) * (ac2 - bc2)/2\n    } else {\n\
    \        return (a * b + c * c) * (ab2 + ac2)/2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1_u8uszo.swift:20:15: error: cannot find 'bc' in scope\n    if\
    \ ab2 >= bc {\n              ^~\n/tmp/tmp1_u8uszo.swift:21:16: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n        return (a * b + b * c\
    \ + c * a) * (ab2 - bc2) / 2\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1_u8uszo.swift:22:22: error: cannot find 'bc' in scope\n    } else if\
    \ ac2 >= bc {\n                     ^~\n/tmp/tmp1_u8uszo.swift:23:16: error: the\
    \ compiler is unable to type-check this expression in reasonable time; try breaking\
    \ up the expression into distinct sub-expressions\n        return (a * b + c *\
    \ c + b * a) * (ac2 - bc2)/2\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1_u8uszo.swift:25:16: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return (a * b + c * c) * (ab2 + ac2)/2\n          \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660029342
