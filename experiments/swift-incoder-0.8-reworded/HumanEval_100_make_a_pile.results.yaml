language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = [Int]()\n    var i = n - 1\n    for _ in 0..<n\
    \ {\n        levels.append(i)\n        if i & 1 == 1 {\n            i = i + 1\n\
    \        } else {\n            i = i + 1\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpdhwvj95i/tmpdhwvj95i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59212a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5920f9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5920f9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5920f9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhwvj95i                        0x000055fabd44e5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b5921493460 __libc_start_main +
    245

    6    tmpdhwvj95i                        0x000055fabd44e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [0]\n\n    if n % 2 == 1 {\n        pile = append(pile,\
    \ n)\n    }\n\n    for i in 1..(n/2) {\n        let next = 2 * i\n        if n\
    \ % 2 == 0 {\n            pile = append(pile, next)\n        } else {\n      \
    \      pile = append(pile, next+1)\n        }\n    }\n\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpff7i7hri.swift:16:16: error: cannot find 'append' in scope\n  \
    \      pile = append(pile, n)\n               ^~~~~~\n/tmp/tmpff7i7hri.swift:19:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for i in\
    \ 1..(n/2) {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let mut stones: int = 0\n    \n    for _ in 0..n {\n       \
    \ stones += 1 // if n is odd, add next odd number.\n        if n % 2 == 0 {\n\
    \            stones += 1 // if n is even, add next even number.\n        }\n \
    \       n -= 1\n    }\n    \n    return [stones]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9ztmxyyk.swift:13:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut stones:\
    \ int = 0\n            ^\n/tmp/tmp9ztmxyyk.swift:13:13: note: join the identifiers\
    \ together\n    let mut stones: int = 0\n        ~~~~^~~~~~\n        mutstones\n\
    /tmp/tmp9ztmxyyk.swift:13:13: note: join the identifiers together with camel-case\n\
    \    let mut stones: int = 0\n        ~~~~^~~~~~\n        mutStones\n/tmp/tmp9ztmxyyk.swift:13:21:\
    \ error: cannot find type 'int' in scope\n    let mut stones: int = 0\n      \
    \              ^~~\n/tmp/tmp9ztmxyyk.swift:15:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for _ in 0..n {\n              ^~\n\
    \              ...\n/tmp/tmp9ztmxyyk.swift:23:13: error: cannot find 'stones'\
    \ in scope\n    return [stones]\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    \n    var res = [Int]()\n    \n    if n%2 == 0 {\n        let\
    \ m = n/2\n        for i in 1...m {\n            if i%2 == 0 {\n             \
    \   res.append(i+1)\n            } else {\n                res.append(i+2)\n \
    \           }\n        }\n    } else {\n        let m = n/2\n        for i in\
    \ 1...m {\n            if i%2 == 0 {\n                res.append(i+2)\n      \
    \      } else {\n                res.append(i+1)\n            }\n        }\n \
    \   }\n    \n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmphkida81u/tmphkida81u.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad176fabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad176ca2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad176ca2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad176ca17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphkida81u                        0x000055c4e8c4f5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ad177197460 __libc_start_main +
    245

    6    tmphkida81u                        0x000055c4e8c4f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile : [Int] = []\n    if n == 1 {\n        pile += [0]\n\
    \    } else if n % 2 == 0 {\n        pile += [n, n - 1]\n    } else {\n      \
    \  pile += [n/2, n/2, n/2]\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpfv739_59/tmpfv739_59.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eee6e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eee3d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eee3d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eee3d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfv739_59                        0x000055e8a75a8482 <unavailable> + 5250

    5    libc.so.6                          0x00002b1eee8cd460 __libc_start_main +
    245

    6    tmpfv739_59                        0x000055e8a75a80c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n\tvar r: [Int] = []\n\tr.append()\n\tlet isEven = n%2 == 0\n\tlet\
    \ nextEven = n%2 != 0\n\tif isEven {\n\t\tlet nextEven = n%2 != 0\n\t\tif nextEven\
    \ {\n\t\t\tlet nextOdd = n%2 != 0\n\t\t\tif nextOdd {\n\t\t\t\tr.append()\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5wlr7cmv.swift:14:11: error: missing argument for parameter #1\
    \ in call\n        r.append()\n                 ^\n                 <#Int#>\n\
    Swift.Array:6:37: note: 'append' declared here\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\n/tmp/tmp5wlr7cmv.swift:22:14: error: missing argument for parameter #1\
    \ in call\n                                r.append()\n                      \
    \                   ^\n                                         <#Int#>\nSwift.Array:6:37:\
    \ note: 'append' declared here\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let stones = [Int](repeating: 0, count: n + 1);\n    var nLevels\
    \ = 0;\n    while n != 0 {\n        if n % 2 == 1 {\n            nLevels++;\n\
    \            stones[nLevels] = stones[nLevels] + n + 1;\n        } else {\n  \
    \          nLevels++;\n            stones[nLevels] = stones[nLevels] - n;\n  \
    \      }\n        n /= 2;\n    }\n    return stones;\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwm9tm492.swift:17:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            nLevels++;\n                   ^~\n/tmp/tmpwm9tm492.swift:18:19:\
    \ error: cannot assign through subscript: 'stones' is a 'let' constant\n     \
    \       stones[nLevels] = stones[nLevels] + n + 1;\n            ~~~~~~^\n/tmp/tmpwm9tm492.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let stones = [Int](repeating:\
    \ 0, count: n + 1);\n    ^~~\n    var\n/tmp/tmpwm9tm492.swift:20:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            nLevels++;\n\
    \                   ^~\n/tmp/tmpwm9tm492.swift:21:19: error: cannot assign through\
    \ subscript: 'stones' is a 'let' constant\n            stones[nLevels] = stones[nLevels]\
    \ - n;\n            ~~~~~~^\n/tmp/tmpwm9tm492.swift:13:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let stones = [Int](repeating: 0, count: n + 1);\n\
    \    ^~~\n    var\n/tmp/tmpwm9tm492.swift:23:11: error: left side of mutating\
    \ operator isn't mutable: 'n' is a 'let' constant\n        n /= 2;\n        ~\
    \ ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    if n % 2 == 0 {\n        arr += [n]\n\
    \    }\n    if n % 2 == 1 {\n        arr += [n + 1]\n    }\n    return arr\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp8qqa97y_/tmp8qqa97y_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d9ca12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d9c709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d9c709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d9c7087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8qqa97y_                        0x000055f27b3874d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b7d9cbfe460 __libc_start_main +
    245

    6    tmp8qqa97y_                        0x000055f27b387119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n\tvar arr = [Int]()\n\tif n%2 != 0 {\n\t\tarr.append(n)\n\t}\n\t\
    let nextOdd = n / 2\n\tlet nextEven = n - nextOdd\n\tif n%2 == 0 {\n\t\tarr.append(nextEven)\n\
    \t} else {\n\t\tarr.append(nextOdd)\n\t}\n\treturn arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpbrsnojev/tmpbrsnojev.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b880f273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b880ef6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b880ef6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b880ef697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrsnojev                        0x000055fce297d4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b880f45f460 __libc_start_main +
    245

    6    tmpbrsnojev                        0x000055fce297d119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    \n    if n % 2 != 0 {\n        return make_a_pile(n: n - 1)\
    \ + [n]\n    }\n    return make_a_pile(n: n / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979179
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let pile: [Int] = [0]\n    if n % 2 == 0 {\n        for _ in\
    \ 0 ..< n / 2 {\n            pile.append(pile[pile.count-1]! + 2)\n        }\n\
    \    } else {\n        for _ in 0 ..< n / 2 {\n            pile.append(pile[pile.count-1]!\
    \ + 1)\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp3znuazkc.swift:16:18: error: no exact matches in call to instance\
    \ method 'append'\n            pile.append(pile[pile.count-1]! + 2)\n        \
    \         ^\n/tmp/tmp3znuazkc.swift:16:18: note: found candidate with type '(__owned\
    \ Int) -> ()'\n            pile.append(pile[pile.count-1]! + 2)\n            \
    \     ^\n/tmp/tmp3znuazkc.swift:20:18: error: no exact matches in call to instance\
    \ method 'append'\n            pile.append(pile[pile.count-1]! + 1)\n        \
    \         ^\n/tmp/tmp3znuazkc.swift:20:18: note: found candidate with type '(__owned\
    \ Int) -> ()'\n            pile.append(pile[pile.count-1]! + 1)\n            \
    \     ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int](repeating: 0, count: n)\n    for level in 0\
    \ ..< n {\n        let nextOddOrEven = nextOdd(n: n - level)\n        pile[level]\
    \ = nextOddOrEven\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpkfslr6t6.swift:15:29: error: cannot find 'nextOdd' in scope\n \
    \       let nextOddOrEven = nextOdd(n: n - level)\n                          \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 || n == 1 {\n        return [1]\n    }\n    if n %\
    \ 2 == 0 {\n        return make_a_pile(n - 1) + make_a_pile(n / 2)\n    } else\
    \ {\n        return make_a_pile(n - 1) + make_a_pile(n / 2) + [1]\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpx1sjrf52.swift:17:28: error: missing argument label 'n:' in call\n\
    \        return make_a_pile(n - 1) + make_a_pile(n / 2)\n                    \
    \       ^\n                           n: \n/tmp/tmpx1sjrf52.swift:17:49: error:\
    \ missing argument label 'n:' in call\n        return make_a_pile(n - 1) + make_a_pile(n\
    \ / 2)\n                                                ^\n                  \
    \                              n: \n/tmp/tmpx1sjrf52.swift:19:28: error: missing\
    \ argument label 'n:' in call\n        return make_a_pile(n - 1) + make_a_pile(n\
    \ / 2) + [1]\n                           ^\n                           n: \n/tmp/tmpx1sjrf52.swift:19:49:\
    \ error: missing argument label 'n:' in call\n        return make_a_pile(n - 1)\
    \ + make_a_pile(n / 2) + [1]\n                                               \
    \ ^\n                                                n: \n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var ret = [Int]()\n    var levels = n\n    for _ in 1...n {\n\
    \        if n % 2 == 1 {\n            levels += 1\n        } else {\n        \
    \    levels -= 1\n        }\n        ret.append(levels)\n    }\n    return ret\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmppuze7rd6/tmppuze7rd6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3df068c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3ded5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3ded5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3ded5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppuze7rd6                        0x0000560ca81d75c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ab3df254460 __libc_start_main +
    245

    6    tmppuze7rd6                        0x0000560ca81d7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    let ones = make_pil(ones: n, next: Int(),\
    \ level: 0)\n    let odd = make_pil(ones: n, next: Int(), level: 1)\n    let even\
    \ = make_pil(ones: n, next: Int(), level: 2)\n    pile.append(ones)\n    pile.append(odd)\n\
    \    pile.append(even)\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt1m6_vd0.swift:14:16: error: cannot find 'make_pil' in scope\n\
    \    let ones = make_pil(ones: n, next: Int(), level: 0)\n               ^~~~~~~~\n\
    /tmp/tmpt1m6_vd0.swift:15:15: error: cannot find 'make_pil' in scope\n    let\
    \ odd = make_pil(ones: n, next: Int(), level: 1)\n              ^~~~~~~~\n/tmp/tmpt1m6_vd0.swift:16:16:\
    \ error: cannot find 'make_pil' in scope\n    let even = make_pil(ones: n, next:\
    \ Int(), level: 2)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    var stones: [Int]\
    \ = []\n    var stone: Int = 1\n    var count: Int = 0\n    repeat{\n        stone\
    \ += 2\n        count += 1\n        if n == stone {\n            stones.append(count)\n\
    \        }\n        else if n % 2 == 0 {\n            stones.append(count)\n \
    \           stone = count\n            count = n + 1\n            n /= 2\n   \
    \     }\n    }while(n)\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplwn6z4lr.swift:29:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmplwn6z4lr.swift:31:12:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ }while(n)\n           ^\n          (   != 0)\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let n = n\n    let res = [Int]()\n    if n % 2 == 0 {\n    \
    \    res.append(n)\n    }\n    else {\n        var i = 0\n        while (i + 1\
    \ < n) {\n            i += 2\n            res.append(i)\n        }\n    }\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5va8grjy.swift:16:13: error: cannot use mutating member on immutable\
    \ value: 'res' is a 'let' constant\n        res.append(n)\n        ~~~ ^\n/tmp/tmp5va8grjy.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = [Int]()\n    ^~~\n\
    \    var\n/tmp/tmp5va8grjy.swift:22:17: error: cannot use mutating member on immutable\
    \ value: 'res' is a 'let' constant\n            res.append(i)\n            ~~~\
    \ ^\n/tmp/tmp5va8grjy.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let res = [Int]()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let result = [Int](repeating: 0, count: n+1)\n    result[n]\
    \ = 1\n    let rem = n % 2 == 0 ? 2 : 3\n    for i in 1..(rem-2).min(3) {\n  \
    \      result[i] = result[i*2 + 1]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp22tkwm1y.swift:14:11: error: cannot assign through subscript: 'result'\
    \ is a 'let' constant\n    result[n] = 1\n    ~~~~~~^\n/tmp/tmp22tkwm1y.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [Int](repeating:\
    \ 0, count: n+1)\n    ^~~\n    var\n/tmp/tmp22tkwm1y.swift:16:15: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n    for i in 1..(rem-2).min(3)\
    \ {\n              ^~\n              ...\n/tmp/tmp22tkwm1y.swift:16:21: error:\
    \ binary operator '-' cannot be applied to operands of type 'Int' and 'Float16'\n\
    \    for i in 1..(rem-2).min(3) {\n                 ~~~^~\n/tmp/tmp22tkwm1y.swift:16:21:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Float, Float), (Float16, Float16), (Float80, Float80)\n \
    \   for i in 1..(rem-2).min(3) {\n                    ^\n/tmp/tmp22tkwm1y.swift:16:25:\
    \ error: reference to member 'min' cannot be resolved without a contextual type\n\
    \    for i in 1..(rem-2).min(3) {\n                        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = n\n    stones = stones % 2 == 0 ? stones : stones\
    \ + 1\n    var piles = [Int]()\n    if stones == 1 {\n        piles = [stones]\n\
    \    } else {\n        var p = 2\n        while stones > 1 {\n            if stones\
    \ % 2 == 0 {\n                piles.append(p)\n                stones = stones\
    \ - 1\n            } else {\n                piles.append(2 * p)\n           \
    \     stones = stones - 1\n            }\n            p = p + 1\n        }\n \
    \   }\n    return piles\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpskmintby/tmpskmintby.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eade35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eadb2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eadb2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eadb2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskmintby                        0x000055720228e4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b1eae021460 __libc_start_main +
    245

    6    tmpskmintby                        0x000055720228e119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int](repeating: 0, count: n)\n    let n = n %\
    \ 2 == 0 ? n + 1 : n\n    for i in 0..<n {\n        if i % 2 == 0 {\n        \
    \    result[i] = result[i] + 2\n        } else {\n            result[i] = result[i]\
    \ + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp6bc2egw8/tmp6bc2egw8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06f6139c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06f5e30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06f5e30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06f5e2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bc2egw8                        0x00005639bea73622 <unavailable> + 5666

    5    libc.so.6                          0x00002b06f6325460 __libc_start_main +
    245

    6    tmp6bc2egw8                        0x00005639bea73269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var n = n // n is Int\n    var prev\
    \ = [Int]()\n    if n%2 == 1 {\n        pile = prev\n    } else {\n        prev\
    \ = make_a_pile(n: n - 1)\n        pile.append(prev![0] + prev![1])\n    }\n \
    \   pile.append(prev![0])\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz5wxr_mi.swift:20:25: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        pile.append(prev![0] + prev![1])\n                   \
    \ ~~~~^\n                        \n/tmp/tmpz5wxr_mi.swift:20:36: error: cannot\
    \ force unwrap value of non-optional type '[Int]'\n        pile.append(prev![0]\
    \ + prev![1])\n                               ~~~~^\n                        \
    \           \n/tmp/tmpz5wxr_mi.swift:22:21: error: cannot force unwrap value of\
    \ non-optional type '[Int]'\n    pile.append(prev![0])\n                ~~~~^\n\
    \                    \n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile : [Int] = []\n    if n != 0 { // n is even\n      \
    \  if n & 1 == 0 { // n is odd\n            pile += [n]\n        } else {\n  \
    \          pile += [n / 2]\n            pile += [n / 2]\n            pile += [n\
    \ / 2]\n            pile += [n]\n        }\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp152iq20t/tmp152iq20t.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b758d592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b758d289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b758d289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b758d2887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp152iq20t                        0x0000556c43d5b482 <unavailable> + 5250

    5    libc.so.6                          0x00002b758d77e460 __libc_start_main +
    245

    6    tmp152iq20t                        0x0000556c43d5b0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var a = [Int]()\n    var current = 0\n    while current < n\
    \ {\n        if n % 2 == 0 {\n            a.append(n)\n            n /= 2\n  \
    \      } else {\n            a.append(n / 2)\n            n /= 2\n        }\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpngbvxgpu.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpngbvxgpu.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    if n % 2 == 1 {\n        // odd n is odd\n\
    \        let oddStones = n + n - 1\n        for i in 1..<oddStones {\n       \
    \     stones.insert(i, stones[i-1] + 1)\n        }\n    } else {\n        // even\
    \ n is even\n        let evenStones = n + 1\n        for i in 1..<evenStones {\n\
    \            stones.insert(i, stones[i-1] + 1)\n        }\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpy2qh43n2.swift:18:20: error: no exact matches in call to instance\
    \ method 'insert'\n            stones.insert(i, stones[i-1] + 1)\n           \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpy2qh43n2.swift:24:20:\
    \ error: no exact matches in call to instance method 'insert'\n            stones.insert(i,\
    \ stones[i-1] + 1)\n                   ^\nSwift.Array:11:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n\n    if n % 2 == 1 {\n        // even\n\
    \        for i in 1...n {\n            pile.append(i)\n        }\n    } else {\n\
    \        // odd\n        for i in 1...n {\n            if i % 2 == 0 {\n     \
    \           pile.append(i)\n            }\n        }\n    }\n\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpju2q8kwg/tmpju2q8kwg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb59570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb59267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb59267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb592667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpju2q8kwg                        0x0000561ccbfda5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002acb5975c460 __libc_start_main +
    245

    6    tmpju2q8kwg                        0x0000561ccbfda209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let pile = repeatElement(n: n, times: 0, element: 0)\n    pile.append(1)\n\
    \    for i in 1...pile.count {\n        pile[i] = pile[i-1] + i\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpcpmmaqiw.swift:13:29: error: extra arguments at positions #2, #3\
    \ in call\n    let pile = repeatElement(n: n, times: 0, element: 0)\n        \
    \                    ^\nSwift.repeatElement:1:24: note: 'repeatElement(_:count:)'\
    \ declared here\n@inlinable public func repeatElement<T>(_ element: T, count n:\
    \ Int) -> Repeated<T>\n                       ^\n/tmp/tmpcpmmaqiw.swift:13:34:\
    \ error: missing argument for parameter 'count' in call\n    let pile = repeatElement(n:\
    \ n, times: 0, element: 0)\n                                 ^\n             \
    \                    , count: <#Int#>\nSwift.repeatElement:1:24: note: 'repeatElement(_:count:)'\
    \ declared here\n@inlinable public func repeatElement<T>(_ element: T, count n:\
    \ Int) -> Repeated<T>\n                       ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return []\n    }\n    var pile = [Int](n)\n\
    \    for i in 0..<n {\n        if n % 2 == 0 {\n            pile[i] = n + 1\n\
    \        } else {\n            pile[i] = n\n        }\n        n = n / 2\n   \
    \ }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmph66lqo9q.swift:16:22: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var pile = [Int](n)\n                     ^\n                 \
    \    arrayLiteral: \n/tmp/tmph66lqo9q.swift:23:9: error: cannot assign to value:\
    \ 'n' is a 'let' constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile.append(n)\n\
    \    } else {\n        pile.append(n - 1)\n    }\n\n    var nextLevel = pile\n\
    \    var evenLevel = nextLevel\n    if nextLevel[0] % 2 == 0 {\n        nextLevel\
    \ = nextLevel[1..]\n    }\n    for number in nextLevel {\n        if number %\
    \ 2 == 0 {\n            evenLevel.append(number)\n        } else {\n         \
    \   pile.append(number)\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz02ypok6.swift:23:32: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        nextLevel = nextLevel[1..]\n                  \
    \             ^~\n                               ...\n/tmp/tmpz02ypok6.swift:23:30:\
    \ error: no 'subscript' candidates produce the expected contextual result type\
    \ '[Int]'\n        nextLevel = nextLevel[1..]\n                             ^\n\
    Swift.Array:16:23: note: 'subscript(_:)' produces 'Int', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript(index: Int) -> Element\
    \ { get set }\n                      ^\nSwift.Array:17:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n\
    \    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> {\
    \ get set }\n                      ^\nSwift.Collection:3:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n\
    \    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\nSwift.MutableCollection:3:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n\
    \    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // Make an array with n empty slots.\n    var pile = [Int](repeating:\
    \ 0, count: n)\n\n    // If n is even, fill the odd slots with stones.\n    if\
    \ n % 2 == 0 {\n        pile[n/2] = n\n    }\n\n    // If n is odd, fill the even\
    \ slots with stones.\n    else {\n        pile[n/2-1] = n - 1\n    }\n\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp42miml7o/tmp42miml7o.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb9be3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb98dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb98da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb98d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42miml7o                        0x000055bfb78fb4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b6cb9dcf460 __libc_start_main +
    245

    6    tmp42miml7o                        0x000055bfb78fb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).map { i in i == 0 || i % 2 == 1 ? i + 1 : i }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp0wfp64m7/tmp0wfp64m7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4eeff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4eececb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4eecec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4eeceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wfp64m7                        0x00005583998c2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae4ef1e1460 __libc_start_main +
    245

    6    tmp0wfp64m7                        0x00005583998c2199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0...n).map { make_a_pile(n: $0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmkswtb7z.swift:13:26: error: cannot convert value of type '[Int]'\
    \ to closure result type 'Int'\n    return (0...n).map { make_a_pile(n: $0) }\n\
    \                         ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0] * n\n    var level = 0\n    while n != 0 {\n\
    \        stones[level] = n\n        if n & 1 == 1 {\n            level++\n   \
    \     }\n        n = n >> 1\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmcynrxbk.swift:13:22: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    var stones = [0] * n\n          \
    \       ~~~ ^ ~\n/tmp/tmpmcynrxbk.swift:13:22: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    var stones = [0] *\
    \ n\n                     ^\n/tmp/tmpmcynrxbk.swift:18:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            level++\n        \
    \         ^~\n/tmp/tmpmcynrxbk.swift:20:9: error: cannot assign to value: 'n'\
    \ is a 'let' constant\n        n = n >> 1\n        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [0]\n    make_a_pile_helper(n, &result)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp25congko.swift:14:5: error: cannot find 'make_a_pile_helper' in\
    \ scope\n    make_a_pile_helper(n, &result)\n    ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // code here\n    if n == 0 { return [] }\n    var even = 0\n\
    \    var odd  = 0\n    var arr  = []\n    while n > 0 {\n        if n % 2 == 0\
    \ {\n            even += n\n            n = n/2\n        }\n        else {\n \
    \           odd  += n\n            n = n/2\n        }\n    }\n    arr = Array(0\
    \ ..< n).map { (n) -> Int in\n        if n == odd { return odd }\n        if n\
    \ == even { return even }\n        return odd\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeoi06w7j.swift:17:16: error: empty collection literal requires\
    \ an explicit type\n    var arr  = []\n               ^~\n/tmp/tmpeoi06w7j.swift:21:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = n/2\n\
    \            ^\n/tmp/tmpeoi06w7j.swift:25:13: error: cannot assign to value: 'n'\
    \ is a 'let' constant\n            n = n/2\n            ^\n/tmp/tmpeoi06w7j.swift:33:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[Int]'\n\
    \    return arr\n           ^\n/tmp/tmpeoi06w7j.swift:33:12: note: arguments to\
    \ generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n   \
    \ return arr\n           ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile : [Int]\n    if n%2 == 1 {\n        pile = []\n   \
    \     for _ in 0...n {\n            pile.append(n+1)\n        }\n    } else {\n\
    \        pile = []\n        for _ in 0...n {\n            pile.append(n+2)\n \
    \       }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpvaj66wvk/tmpvaj66wvk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3317b8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3317884b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3317884988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33178837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvaj66wvk                        0x000055c1803c3562 <unavailable> + 5474

    5    libc.so.6                          0x00002b3317d79460 __libc_start_main +
    245

    6    tmpvaj66wvk                        0x000055c1803c31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [1]\n    var pile = [Int]()\n    pile.append(stones[0])\n\
    \    for i in 0..<n {\n        var next = 0\n        if i % 2 == 0 {\n       \
    \     next = stones[i]\n        } else {\n            next = stones[(i - 1) /\
    \ 2]\n        }\n        stones.append(next)\n        pile.append(stones[i])\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpzw12t6ec/tmpzw12t6ec.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae35e16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae35de61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae35de61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae35de607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzw12t6ec                        0x00005584ebf05612 <unavailable> + 5650

    5    libc.so.6                          0x00002ae35e356460 __libc_start_main +
    245

    6    tmpzw12t6ec                        0x00005584ebf05259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var res = make([][Int], n)\n  if n % 2 == 0 {\n    var evens =\
    \ n\n    var odds = n - 1\n    for i := 1; i <= evens; i++ {\n      res[evens][evens]\
    \ = i\n      evens *= 2\n    }\n    for i := evens + 1; i <= odds; i++ {\n   \
    \   res[odds][odds] = i\n      odds *= 2\n    }\n  } else {\n    var evens = n\n\
    \    var odds = n - 1\n    for i := 1; i <= evens; i++ {\n      res[i][evens]\
    \ = i\n      evens *= 2\n    }\n    for i := evens + 1; i <= odds; i++ {\n   \
    \   res[i][odds] = i\n      odds *= 2\n    }\n  }\n  return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxn82514u.swift:17:12: error: expected type\n    for i := 1; i <=\
    \ evens; i++ {\n           ^\n            <#type#>\n/tmp/tmpxn82514u.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= evens; i++\
    \ {\n           ^\n/tmp/tmpxn82514u.swift:17:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= evens; i++ {\n           ^\n/tmp/tmpxn82514u.swift:21:12:\
    \ error: expected type\n    for i := evens + 1; i <= odds; i++ {\n           ^\n\
    \            <#type#>\n/tmp/tmpxn82514u.swift:21:12: error: expected 'in' after\
    \ for-each pattern\n    for i := evens + 1; i <= odds; i++ {\n           ^\n/tmp/tmpxn82514u.swift:21:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := evens +\
    \ 1; i <= odds; i++ {\n           ^\n/tmp/tmpxn82514u.swift:28:12: error: expected\
    \ type\n    for i := 1; i <= evens; i++ {\n           ^\n            <#type#>\n\
    /tmp/tmpxn82514u.swift:28:12: error: expected 'in' after for-each pattern\n  \
    \  for i := 1; i <= evens; i++ {\n           ^\n/tmp/tmpxn82514u.swift:28:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 1; i <=\
    \ evens; i++ {\n           ^\n/tmp/tmpxn82514u.swift:32:12: error: expected type\n\
    \    for i := evens + 1; i <= odds; i++ {\n           ^\n            <#type#>\n\
    /tmp/tmpxn82514u.swift:32:12: error: expected 'in' after for-each pattern\n  \
    \  for i := evens + 1; i <= odds; i++ {\n           ^\n/tmp/tmpxn82514u.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := evens +\
    \ 1; i <= odds; i++ {\n           ^\n/tmp/tmpxn82514u.swift:13:13: error: cannot\
    \ find 'make' in scope\n  var res = make([][Int], n)\n            ^~~~\n/tmp/tmpxn82514u.swift:13:20:\
    \ error: no exact matches in call to subscript \n  var res = make([][Int], n)\n\
    \                   ^\n/tmp/tmpxn82514u.swift:13:20: note: found candidate with\
    \ type '(Int) -> Any'\n  var res = make([][Int], n)\n                   ^\n/tmp/tmpxn82514u.swift:13:20:\
    \ note: found candidate with type '(Range<Int>) -> ArraySlice<Any>'\n  var res\
    \ = make([][Int], n)\n                   ^\n/tmp/tmpxn82"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    pile.append(0)\n\
    \    if n % 2 == 1 {\n        for _ in 1..<(n-1)/2 {\n            pile.append(pile[pile.count-1]+1)\n\
    \        }\n    } else {\n        for _ in 1..<(n-1)/2 {\n            pile.append(pile[pile.count-1])\n\
    \        }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpih1gazcg/tmpih1gazcg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b848944ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8489141b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8489141988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84891407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih1gazcg                        0x0000560bc154f672 <unavailable> + 5746

    5    libc.so.6                          0x00002b8489636460 __libc_start_main +
    245

    6    tmpih1gazcg                        0x0000560bc154f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = [Int]()\n    var counter: Int = 0\n    var next_odd_or_even:\
    \ Int = 0\n    while counter < n {\n        levels.append(counter)\n        if\
    \ isOdd(n) {\n            next_odd_or_even = (counter + 2) % 2\n        } else\
    \ {\n            next_odd_or_even = (counter + 1) % 2\n        }\n        counter\
    \ = next_odd_or_even\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpljso_w_4.swift:18:12: error: cannot find 'isOdd' in scope\n   \
    \     if isOdd(n) {\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            result.append(n)\n        } else {\n            result.append(2\
    \ * n)\n        }\n        n /= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpqwndueyr.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // Fill this in.\n    var pile = [0]\n    if n % 2 == 1 {\n\
    \        for i in 1..n {\n            if i % 2 != 0 {\n                pile =\
    \ append(pile, i+1)\n            }\n        }\n    } else {\n        for i in\
    \ 1..n {\n            if i % 2 == 0 {\n                pile = append(pile, i+1)\n\
    \            }\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeuhf5jo9.swift:16:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 1..n {\n                  ^~\n       \
    \           ...\n/tmp/tmpeuhf5jo9.swift:22:19: error: cannot find operator '..'\
    \ in scope; did you mean '...'?\n        for i in 1..n {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones_in_the_pile = [Int]()\n    if n <= 0 {\n        return\
    \ stones_in_the_pile\n    }\n    if n % 2 == 1 {\n        stones_in_the_pile.append(n)\n\
    \        n -= 2\n    }\n    for number in 1...n {\n        stones_in_the_pile.append(n\
    \ % 2 == 0 ? number : number - 1)\n        n = n / 2\n    }\n    return stones_in_the_pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpe0w68j6f.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 2\n        ~ ^\n/tmp/tmpe0w68j6f.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if n%2 == 0 {\n \
    \       return make_a_pile(n/2)\n    } else {\n        return make_a_pile(n/2-1)\
    \ + [n-1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1rw6agze.swift:17:28: error: missing argument label 'n:' in call\n\
    \        return make_a_pile(n/2)\n                           ^\n             \
    \              n: \n/tmp/tmp1rw6agze.swift:19:28: error: missing argument label\
    \ 'n:' in call\n        return make_a_pile(n/2-1) + [n-1]\n                  \
    \         ^\n                           n: \n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var total = 0\n    for i in 1...n\
    \ {\n        if i % 2 == 1 {\n            total += i\n        } else {\n     \
    \       total += i * 3\n        }\n        pile.append(total)\n        total =\
    \ 0\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp1_tnp2h0/tmp1_tnp2h0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e770dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e76dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e76dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e76dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_tnp2h0                        0x000055c880856562 <unavailable> + 5474

    5    libc.so.6                          0x00002b0e772ca460 __libc_start_main +
    245

    6    tmp1_tnp2h0                        0x000055c8808561a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int](repeating: 0, count: n + 2)\n    for _ in 1..<n\
    \ {\n        let next = (n % 2 == 0 ? next() + 1 : next() + 2)\n        pile[next]\
    \ += 1\n        n = next\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpj55cpoe6.swift:15:34: error: use of local variable 'next' before\
    \ its declaration\n        let next = (n % 2 == 0 ? next() + 1 : next() + 2)\n\
    \                                 ^\n/tmp/tmpj55cpoe6.swift:15:13: note: 'next'\
    \ declared here\n        let next = (n % 2 == 0 ? next() + 1 : next() + 2)\n \
    \           ^\n/tmp/tmpj55cpoe6.swift:15:47: error: use of local variable 'next'\
    \ before its declaration\n        let next = (n % 2 == 0 ? next() + 1 : next()\
    \ + 2)\n                                              ^\n/tmp/tmpj55cpoe6.swift:15:13:\
    \ note: 'next' declared here\n        let next = (n % 2 == 0 ? next() + 1 : next()\
    \ + 2)\n            ^\n/tmp/tmpj55cpoe6.swift:17:9: error: cannot assign to value:\
    \ 'n' is a 'let' constant\n        n = next\n        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pil = [Int]()\n    for _ in 0..<n {\n        pil.append(n)\n\
    \    }\n\n    if n % 2 == 0 {\n        for _ in 0..<n {\n            pil.append(Int(arc4random()\
    \ % n + 1))\n        }\n    } else {\n        for _ in 0..<n {\n            pil.append(Int(arc4random()\
    \ % n + 1))\n            pil.append(Int(arc4random() % n + 1))\n        }\n  \
    \  }\n    return pil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmppvgdjlc1.swift:20:28: error: cannot find 'arc4random' in scope\n\
    \            pil.append(Int(arc4random() % n + 1))\n                         \
    \  ^~~~~~~~~~\n/tmp/tmppvgdjlc1.swift:24:28: error: cannot find 'arc4random' in\
    \ scope\n            pil.append(Int(arc4random() % n + 1))\n                 \
    \          ^~~~~~~~~~\n/tmp/tmppvgdjlc1.swift:25:28: error: cannot find 'arc4random'\
    \ in scope\n            pil.append(Int(arc4random() % n + 1))\n              \
    \             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n\n    while stones\
    \ > 0 {\n        let next = stones % 2 != 0 ? stones + 1 : stones - 1\n      \
    \  result.append(next)\n        stones = next\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979179
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append\
    \ (n / 2)\n    }\n\n    if n % 2 != 0 {\n        result.append ((2 * n) + 1) /\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8twjm5yw.swift:19:16: error: cannot convert value of type '()'\
    \ to expected argument type 'Int'\n        result.append ((2 * n) + 1) / 2\n \
    \              ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n <= 0 {\n        return pile\n \
    \   }\n\n    let oddOrEven = n % 2 == 0 ? 2 : 3\n    var numOfLevels = n\n   \
    \ while numOfLevels > 0 {\n        let nextLevel = numOfLevels\n        if nextLevel\
    \ % 2 == 0 {\n            nextLevel += 1\n        } else {\n            nextLevel\
    \ += oddOrEven\n        }\n        pile.append(nextLevel)\n        numOfLevels\
    \ = numOfLevels / 2\n    }\n\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyhtgabfj.swift:23:23: error: left side of mutating operator isn't\
    \ mutable: 'nextLevel' is a 'let' constant\n            nextLevel += 1\n     \
    \       ~~~~~~~~~ ^\n/tmp/tmpyhtgabfj.swift:21:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let nextLevel = numOfLevels\n        ^~~\n     \
    \   var\n/tmp/tmpyhtgabfj.swift:25:23: error: left side of mutating operator isn't\
    \ mutable: 'nextLevel' is a 'let' constant\n            nextLevel += oddOrEven\n\
    \            ~~~~~~~~~ ^\n/tmp/tmpyhtgabfj.swift:21:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let nextLevel = numOfLevels\n        ^~~\n     \
    \   var\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile.append(n)\n\
    \    } else {\n        var n = n\n        for _ in 1...n {\n            pile.append(n\
    \ % 2 == 0 ? n : n + 2)\n            n /= 2\n        }\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpbfjjajv_/tmpbfjjajv_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28b56afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28b53a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28b53a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28b53a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfjjajv_                        0x00005628e0c375c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b28b589b460 __libc_start_main +
    245

    6    tmpbfjjajv_                        0x00005628e0c37209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    for _ in 1 ..< n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones[stones.endIndex] - 1)\n        } else\
    \ {\n            stones.append(stones.last! + 1)\n        }\n    }\n    return\
    \ stones.dropFirst().reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpk88qgime.swift:21:31: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return stones.dropFirst().reverse()\n\
    \           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpk88qgime.swift:21:31: error:\
    \ cannot use mutating member on immutable value: function call returns immutable\
    \ value\n    return stones.dropFirst().reverse()\n           ~~~~~~~~~~~~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    for i in 1...n {\n        if i%2 ==\
    \ 0 {\n            stones.append(i)\n        } else {\n            stones.append(i+1)\n\
    \        }\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp8isbeb9y/tmp8isbeb9y.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b739b2c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b739afbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b739afbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b739afba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8isbeb9y                        0x000055d0d8d9c5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b739b4b0460 __libc_start_main +
    245

    6    tmp8isbeb9y                        0x000055d0d8d9c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = [Int]()\n    var total = 0\n    var prevLevel =\
    \ 0\n    if n % 2 == 0 {\n        for i in 0..<n {\n            levels.append(i)\n\
    \            total += i + prevLevel\n        }\n    } else {\n        for i in\
    \ 0..<n {\n            if i % 2 == 0 {\n                levels.append(i)\n   \
    \             total += i + prevLevel\n            } else {\n                total\
    \ += i + prevLevel\n                levels.append(total)\n                prevLevel\
    \ = total\n            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp8h7whqby/tmp8h7whqby.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefdbcf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefdb9e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefdb9e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefdb9e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8h7whqby                        0x000055f9b42dc5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002aefdbedc460 __libc_start_main +
    245

    6    tmp8h7whqby                        0x000055f9b42dc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n % 2 == 0 else { return [n] * n }\n    guard n >= 2 else\
    \ { return [n-1] * n }\n    return [n-1] + make_a_pile(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwk4q4psl.swift:13:40: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    guard n % 2 == 0 else { return [n]\
    \ * n }\n                                   ~~~ ^ ~\n/tmp/tmpwk4q4psl.swift:13:40:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    guard n % 2 == 0 else { return [n] * n }\n                 \
    \                      ^\n/tmp/tmpwk4q4psl.swift:13:40: error: no '*' candidates\
    \ produce the expected contextual result type '[Int]'\n    guard n % 2 == 0 else\
    \ { return [n] * n }\n                                       ^\nSwift.Int:9:24:\
    \ note: '*' produces 'Int', not the expected contextual result type '[Int]'\n\
    \    public static func * (lhs: Int, rhs: Int) -> Int\n                      \
    \ ^\nSwift.Numeric:5:17: note: '*' produces 'Int', not the expected contextual\
    \ result type '[Int]'\n    static func * (lhs: Self, rhs: Self) -> Self\n    \
    \            ^\nSwift.BinaryInteger:22:26: note: '*' produces 'Int', not the expected\
    \ contextual result type '[Int]'\n    override static func * (lhs: Self, rhs:\
    \ Self) -> Self\n                         ^\nSwift.Duration:16:24: note: '*' produces\
    \ 'Duration', not the expected contextual result type '[Int]'\n    public static\
    \ func * <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n    \
    \                   ^\n/tmp/tmpwk4q4psl.swift:14:38: error: cannot convert return\
    \ expression of type 'Int' to return type '[Int]'\n    guard n >= 2 else { return\
    \ [n-1] * n }\n                               ~~~~~~^~~\n/tmp/tmpwk4q4psl.swift:14:32:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    guard n >= 2 else { return [n-1] * n }\n                               ^\n\
    /tmp/tmpwk4q4psl.swift:15:32: error: missing argument label 'n:' in call\n   \
    \ return [n-1] + make_a_pile(n-2)\n                               ^\n        \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let result = make_a_pile_internal(n, n)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0yh5hkcu.swift:13:18: error: cannot find 'make_a_pile_internal'\
    \ in scope\n    let result = make_a_pile_internal(n, n)\n                 ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [Int]()\n    res.append(n)\n    if n % 2 == 0 {\n\
    \        res.append(n - 1)\n    } else {\n        var left = n - 1\n        var\
    \ right = n\n        res.append(left)\n        while left > 0 {\n            left\
    \ -= 1\n            res.append(right)\n            right += 1\n        }\n   \
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp7c77btkg/tmp7c77btkg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36da4dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36da1d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36da1d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36da1d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7c77btkg                        0x00005628cdedf4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b36da6c7460 __libc_start_main +
    245

    6    tmp7c77btkg                        0x00005628cdedf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var stack = [Int]()\n  var result = [Int]()\n  for num in stride(from:\
    \ 0, to: n, by: 2) {\n    if num % 2 == 0 {\n      stack.append(num)\n    } else\
    \ {\n      result.append(stack.last + stack.last)\n      stack.removeLast()\n\
    \    }\n  }\n  result.append(stack.last)\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_002i5mf.swift:19:32: error: binary operator '+' cannot be applied\
    \ to two 'Int?' operands\n      result.append(stack.last + stack.last)\n     \
    \               ~~~~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmp_002i5mf.swift:19:32: note: overloads\
    \ for '+' exist with these partially matching parameter lists: (Int, Int)\n  \
    \    result.append(stack.last + stack.last)\n                               ^\n\
    /tmp/tmp_002i5mf.swift:23:23: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n  result.append(stack.last)\n                    \
    \  ^\n/tmp/tmp_002i5mf.swift:23:23: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n  result.append(stack.last)\n      \
    \                ^\n                           ?? <#default value#>\n/tmp/tmp_002i5mf.swift:23:23:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n  result.append(stack.last)\n                      ^\n              \
    \            !\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n <= 0 {\n        return []\n    }\n    if n % 2 == 0 {\n\
    \        return make_a_pile(n / 2)\n    }\n    \n    var arr = [Int]()\n    if\
    \ n%2 == 1 {\n        arr.append(n)\n    }\n    for _ in 1...n/2 {\n        arr.append(n/2)\n\
    \    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeqw_es69.swift:17:28: error: missing argument label 'n:' in call\n\
    \        return make_a_pile(n / 2)\n                           ^\n           \
    \                n: \n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr: [Int] = []\n    if n % 2 == 1 {\n        for _ in 0\
    \ ..< n / 2 {\n            arr.append(arr[(arr[(arr.count) - 1] + 1) % arr.count])\n\
    \        }\n    } else {\n        for _ in 0 ..< n / 2 {\n            arr.append(arr[(arr[(arr.count)\
    \ - 1] + 2) % arr.count])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9470f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba946df0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba946df0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba946df013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba946defbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba946befe83 <unavailable> + 188035

    6    tmpwhi1rl6f                        0x000056235bfc0d5e <unavailable> + 7518

    7    tmpwhi1rl6f                        0x000056235bfc053b <unavailable> + 5435

    8    libc.so.6                          0x00002ba9472e5460 __libc_start_main +
    245

    9    tmpwhi1rl6f                        0x000056235bfc0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    guard n >= 1 else { return result\
    \ }\n    for i in 1 ..< n {\n        guard i % 2 == 1 else { result.append(i);\
    \ return result }\n        guard i % 2 != 0 else { result.append(n); return result\
    \ }\n        result.append(i)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmprdzguyk_/tmprdzguyk_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d697dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d694d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d694d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d694d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdzguyk_                        0x000055c30ec7c5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b3d699c6460 __libc_start_main +
    245

    6    tmprdzguyk_                        0x000055c30ec7c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: int = 0\n    var stonesCurrentLevel = stones\n \
    \   if n % 2 == 0 {\n        for i : Int in 1..n / 2 {\n            if i % 2 ==\
    \ 0 {\n                stonesCurrentLevel++\n            } else {\n          \
    \      stonesCurrentLevel++\n            }\n        }\n    } else {\n        for\
    \ i : Int in 1..n / 2 {\n            if i % 2 == 1 {\n                stonesCurrentLevel++\n\
    \            } else {\n                stonesCurrentLevel++\n            }\n \
    \       }\n    }\n    var stonesInTheLevel = [Int]()\n    stonesInTheLevel.append(stonesCurrentLevel)\n\
    \    while stonesCurrentLevel > 0 {\n        var stonesInNextLevel = [Int]()\n\
    \        for i : Int in 1..stonesCurrentLevel {\n            if i % 2 == 0 {\n\
    \                stonesInNextLevel.append(stonesCurrentLevel)\n            } else\
    \ {\n                stonesInNextLevel.append(stonesCurrentLevel - i)\n      \
    \      }\n        }\n        stonesInTheLevel.append(stonesInNextLevel)\n    \
    \    stonesCurrentLevel = stonesInNextLevel[0]\n    }\n    return stonesInTheLevel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp7ep__7h6.swift:13:17: error: cannot find type 'int' in scope\n\
    \    var stones: int = 0\n                ^~~\n/tmp/tmp7ep__7h6.swift:16:25: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n        for i : Int\
    \ in 1..n / 2 {\n                        ^~\n                        ...\n/tmp/tmp7ep__7h6.swift:24:25:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        for\
    \ i : Int in 1..n / 2 {\n                        ^~\n                        ...\n\
    /tmp/tmp7ep__7h6.swift:36:25: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        for i : Int in 1..stonesCurrentLevel {\n              \
    \          ^~\n                        ...\n/tmp/tmp7ep__7h6.swift:43:26: error:\
    \ no exact matches in call to instance method 'append'\n        stonesInTheLevel.append(stonesInNextLevel)\n\
    \                         ^\nSwift.Array:7:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where Element == S.Element, S :\
    \ Sequence\n                                    ^\nSwift.RangeReplaceableCollection:5:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where S : Sequence, Self.Element == S.Element\n                         \
    \           ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 { return [] }\n    var nums: [Int] = []\n    if n\
    \ % 2 == 1 {\n        nums.append(n + make_a_pile(n: n - 2))\n    }\n    if n\
    \ % 2 == 0 {\n        nums.append(n + make_a_pile(n: n - 2))\n    }\n    return\
    \ nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0lb821bx.swift:16:25: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        nums.append(n + make_a_pile(n: n -\
    \ 2))\n                        ^\n/tmp/tmp0lb821bx.swift:19:25: error: cannot\
    \ convert value of type '[Int]' to expected argument type 'Int'\n        nums.append(n\
    \ + make_a_pile(n: n - 2))\n                        ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var arr = [Int]()\n  if n % 2 == 0 {\n    for i in 1 ..< n / 2\
    \ {\n      arr.append(i)\n    }\n  }\n  if n % 2 == 1 {\n    for i in 1 ..< n\
    \ / 2 {\n      arr.append(i * 2 + 1)\n    }\n  }\n  return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpv6l0uqai/tmpv6l0uqai.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b835bd09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b835ba00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b835ba00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b835b9ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6l0uqai                        0x000055b1a144e5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b835bef5460 __libc_start_main +
    245

    6    tmpv6l0uqai                        0x000055b1a144e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    for i in 1 ... n {\n        if i % 2 ==\
    \ 0 {\n            stones.append(stones.last + i)\n        } else {\n        \
    \    stones.append(i)\n        }\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5jvbdd23.swift:16:34: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            stones.append(stones.last\
    \ + i)\n                                 ^\n/tmp/tmp5jvbdd23.swift:16:34: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            stones.append(stones.last + i)\n                                \
    \ ^\n                          (           ?? <#default value#>)\n/tmp/tmp5jvbdd23.swift:16:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            stones.append(stones.last + i)\n                        \
    \         ^\n                                     !\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    for i in 1...n {\n        arr.append(i)\n\
    \    }\n    let oddEven = n % 2 == 0 ? 1 : 0\n    arr.append(arr[n - 1])\n   \
    \ arr.remove(at: arr.count - 1)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpfclsvxtg/tmpfclsvxtg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b742f4e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b742f1dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b742f1df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b742f1de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfclsvxtg                        0x000055f6ebb286c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b742f6d4460 __libc_start_main +
    245

    6    tmpfclsvxtg                        0x000055f6ebb28309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // Your code here\n    var results = [Int]()\n    for let level\
    \ = n / 2 {\n        results.append(level)\n    }\n    if n % 2 == 0 {\n     \
    \   results.append(n)\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp149lr6w_.swift:15:9: error: 'let' pattern cannot appear nested\
    \ in an already immutable context\n    for let level = n / 2 {\n        ^\n/tmp/tmp149lr6w_.swift:15:19:\
    \ error: expected 'in' after for-each pattern\n    for let level = n / 2 {\n \
    \                 ^\n/tmp/tmp149lr6w_.swift:15:19: error: expected Sequence expression\
    \ for for-each loop\n    for let level = n / 2 {\n                  ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n % 2 == 0 {\n        return make_pile_of_n(stones: n, level:\
    \ 0)\n    } else {\n        return make_pile_of_n(stones: n, level: 1)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpcu57fhv2.swift:14:16: error: cannot find 'make_pile_of_n' in scope\n\
    \        return make_pile_of_n(stones: n, level: 0)\n               ^~~~~~~~~~~~~~\n\
    /tmp/tmpcu57fhv2.swift:16:16: error: cannot find 'make_pile_of_n' in scope\n \
    \       return make_pile_of_n(stones: n, level: 1)\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let max = Int(sqrt(Double(n)))\n    var pile: [Int] = []\n \
    \   var evenPile: [Int] = []\n    var oddPile: [Int] = []\n\n    pile = Array(1...n).map{\
    \ $0 }\n    pile = pile.map{ $0 + 1 }\n\n    if n % 2 == 0 {\n        evenPile\
    \ = pile.map{ $0 + 2 * $0 }\n    }\n\n    if n % 2 != 0 {\n        oddPile = pile.map{\
    \ $0 + 2 * $0 + 1 }\n    }\n\n    return evenPile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpq7tdl6w8.swift:13:19: error: cannot find 'sqrt' in scope\n    let\
    \ max = Int(sqrt(Double(n)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int](repeating: 0, count: (n + 1) * 2)\n    if\
    \ n % 2 == 1 {\n        result[(n + 1) * 2 - 1] = n - 1\n    } else {\n      \
    \  result[(n + 1) * 2 - 1] = n\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpwm2qhn9a/tmpwm2qhn9a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5eae2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5eab21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5eab21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5eab207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm2qhn9a                        0x0000560c41fff4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002ad5eb016460 __libc_start_main +
    245

    6    tmpwm2qhn9a                        0x0000560c41fff129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var res = make([][Int](n), n)\n  var stones = n\n  var i = 0\n\
    \  for stones in res {\n    res[stones][i] = stones\n    stones %= 2\n    i +=\
    \ 1\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptrbtre5k.swift:13:13: error: cannot find 'make' in scope\n  var\
    \ res = make([][Int](n), n)\n            ^~~~\n/tmp/tmptrbtre5k.swift:13:20: error:\
    \ no exact matches in call to subscript \n  var res = make([][Int](n), n)\n  \
    \                 ^\n/tmp/tmptrbtre5k.swift:13:20: note: found candidate with\
    \ type '(Int) -> Any'\n  var res = make([][Int](n), n)\n                   ^\n\
    /tmp/tmptrbtre5k.swift:13:20: note: found candidate with type '(Range<Int>) ->\
    \ ArraySlice<Any>'\n  var res = make([][Int](n), n)\n                   ^\n/tmp/tmptrbtre5k.swift:13:20:\
    \ note: found candidate with type '(Int.Type) -> ArraySlice<Any>'\n  var res =\
    \ make([][Int](n), n)\n                   ^\n/tmp/tmptrbtre5k.swift:13:20: note:\
    \ found candidate with type '((UnboundedRange_) -> ()) -> ArraySlice<Any>'\n \
    \ var res = make([][Int](n), n)\n                   ^\n/tmp/tmptrbtre5k.swift:13:20:\
    \ error: cannot call value of non-function type 'Any'\n  var res = make([][Int](n),\
    \ n)\n                   ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [1]\n    for _ in 0 ..< n {\n        stones.append(stones.last!\
    \ + 2*stones.last!)\n        stones.popLast()\n    }\n    return stones\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpnln62rmu/tmpnln62rmu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569ba44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569b73bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569b73b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569b73a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnln62rmu                        0x000055cbfed6d6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b569bc30460 __libc_start_main +
    245

    6    tmpnln62rmu                        0x000055cbfed6d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [0]\n    }\n    if n == 2 {\n  \
    \      return [1, 3]\n    }\n    if n % 2 == 1 {\n        return make_a_pile(n\
    \ - 1) + [n - 1]\n    }\n    return make_a_pile(n - 1) + make_a_pile(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp62o7lgqs.swift:20:28: error: missing argument label 'n:' in call\n\
    \        return make_a_pile(n - 1) + [n - 1]\n                           ^\n \
    \                          n: \n/tmp/tmp62o7lgqs.swift:22:24: error: missing argument\
    \ label 'n:' in call\n    return make_a_pile(n - 1) + make_a_pile(n - 2)\n   \
    \                    ^\n                       n: \n/tmp/tmp62o7lgqs.swift:22:45:\
    \ error: missing argument label 'n:' in call\n    return make_a_pile(n - 1) +\
    \ make_a_pile(n - 2)\n                                            ^\n        \
    \                                    n: \n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [0]\n    var currentLevel = 1\n    for index in\
    \ 1..<n {\n        if index%2 == 0 {\n            result.append(currentLevel)\n\
    \        } else {\n            result.append(currentLevel+currentLevel/2)\n  \
    \      }\n        currentLevel = currentLevel + 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpjlti1pku/tmpjlti1pku.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71fa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71ca0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d71ca0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d71c9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjlti1pku                        0x000055562ac1c562 <unavailable> + 5474

    5    libc.so.6                          0x00002b5d72195460 __libc_start_main +
    245

    6    tmpjlti1pku                        0x000055562ac1c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    switch n {\n    case 1, 2 ... n where\
    \ n % 2 == 1:\n        pile = pile.append(n)\n    case 1, 2 ... n where n % 2\
    \ == 0:\n        pile = pile.append(n - 1)\n    case 1 ... n where n % 2 != 0:\n\
    \        pile = pile.append(n - 2)\n    default:\n        return pile\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5l5bc_wa.swift:16:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5l5bc_wa.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n - 1)\n               ~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp5l5bc_wa.swift:20:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n - 2)\n               ~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp5l5bc_wa.swift:17:10: warning: literal value is already handled by previous\
    \ pattern; consider removing it\n    case 1, 2 ... n where n % 2 == 0:\n     \
    \    ^\n/tmp/tmp5l5bc_wa.swift:15:10: note: first occurrence of identical literal\
    \ pattern is here\n    case 1, 2 ... n where n % 2 == 1:\n         ^\n/tmp/tmp5l5bc_wa.swift:15:21:\
    \ warning: 'where' only applies to the second pattern match in this case\n   \
    \ case 1, 2 ... n where n % 2 == 1:\n            ~~~~~~~ ^     ~~~~~~~~~~\n/tmp/tmp5l5bc_wa.swift:15:13:\
    \ note: disambiguate by adding a line break between them if this is desired\n\
    \    case 1, 2 ... n where n % 2 == 1:\n            ^\n/tmp/tmp5l5bc_wa.swift:15:10:\
    \ note: duplicate the 'where' on both patterns to check both patterns\n    case\
    \ 1, 2 ... n where n % 2 == 1:\n         ^\n           where n % 2 == 1\n/tmp/tmp5l5bc_wa.swift:17:21:\
    \ warning: 'where' only applies to the second pattern match in this case\n   \
    \ case 1, 2 ... n where n % 2 == 0:\n            ~~~~~~~ ^     ~~~~~~~~~~\n/tmp/tmp5l5bc_wa.swift:17:13:\
    \ note: disambiguate by adding a line break between them if this is desired\n\
    \    case 1, 2 ... n where n % 2 == 0:\n            ^\n/tmp/tmp5l5bc_wa.swift:17:10:\
    \ note: duplicate the 'where' on both patterns to check both patterns\n    case\
    \ 1, 2 ... n where n % 2 == 0:\n         ^\n           where n % 2 == 0\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 || n == 1 {\n        return [0]\n    }\n    if n %\
    \ 2 == 0 {\n        return make_a_pile(n: n - 1) + [n/2]\n    }\n    return make_a_pile(n:\
    \ n - 1) + [(n-1)/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy10qxkd1/tmpy10qxkd1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb42141c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb41e38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb41e38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb41e377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy10qxkd1                        0x0000558084421472 <unavailable> + 5234

    5    libc.so.6                          0x00002adb4232d460 __libc_start_main +
    245

    6    tmpy10qxkd1                        0x00005580844210b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr: [Int] = []\n    if n % 2 == 1 {\n        arr.append(n)\n\
    \    }\n    let low: Int = n / 2\n    for n in 1...low {\n        if n % 2 ==\
    \ 0 {\n            arr.append(n)\n        } else {\n            let high: Int\
    \ = n * 3 + 1\n            for num in 2...high {\n                arr.append(num)\n\
    \            }\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp9upjl0so/tmp9upjl0so.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4b02afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4affa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4affa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4affa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9upjl0so                        0x0000561e51b52562 <unavailable> + 5474

    5    libc.so.6                          0x00002ae4b049b460 __libc_start_main +
    245

    6    tmp9upjl0so                        0x0000561e51b521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    if n < 0 {\n        return arr\n    }\n\
    \    if n&1 == 0 {\n        arr.append(n)\n    }\n    if n&1 == 1 {\n        arr.append(n\
    \ + 1)\n    }\n    for i in  (0...Int(sqrt(n))).reversed() {\n        if i % 2\
    \ == 0 {\n            arr.append(n * (n + 1))\n        } else {\n            arr.append(n\
    \ * (n - 1 + Int(Double(n) / 2)))\n        }\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpsz85bixc.swift:23:24: error: cannot find 'sqrt' in scope\n    for\
    \ i in  (0...Int(sqrt(n))).reversed() {\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = make([]Int, n)\n    var pile = [Int](n + 1)\n \
    \   pile[0] = 1\n    for i := 1; i < n; i++ {\n        if n%2 == 0 {\n       \
    \     pile[i] = pile[i-2] + 2\n        } else {\n            pile[i] = pile[i-1]\
    \ + 1\n        }\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpdq5jwupw.swift:13:25: error: expected ',' separator\n    var stones\
    \ = make([]Int, n)\n                        ^\n                        ,\n/tmp/tmpdq5jwupw.swift:16:12:\
    \ error: expected type\n    for i := 1; i < n; i++ {\n           ^\n         \
    \   <#type#>\n/tmp/tmpdq5jwupw.swift:16:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 1; i < n; i++ {\n           ^\n/tmp/tmpdq5jwupw.swift:16:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 1; i < n;\
    \ i++ {\n           ^\n/tmp/tmpdq5jwupw.swift:13:18: error: cannot find 'make'\
    \ in scope\n    var stones = make([]Int, n)\n                 ^~~~\n/tmp/tmpdq5jwupw.swift:14:22:\
    \ error: missing argument label 'arrayLiteral:' in call\n    var pile = [Int](n\
    \ + 1)\n                     ^\n                     arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var stones: Int = 0\n  var pile: [Int] = []\n  var currentLevel:\
    \ Int = 0\n  for level in stride(from: 1, to: n, by: 1) {\n    if level % 2 ==\
    \ 0 {\n      currentLevel = level\n    } else {\n      pile[currentLevel] = level\n\
    \      stones += 2 * level\n    }\n  }\n  return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b361c572c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b361c269561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b361c269286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b361c26913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b361c268bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b361c0687ec <unavailable> + 186348

    6    tmpdehvowq9                        0x000055df06795d47 <unavailable> + 7495

    7    tmpdehvowq9                        0x000055df067955ab <unavailable> + 5547

    8    libc.so.6                          0x00002b361c75e460 __libc_start_main +
    245

    9    tmpdehvowq9                        0x000055df067952c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 1 else {\n        return []\n    }\n    \n    let\
    \ array = [Int]()\n    if n % 2 == 1 {\n        for j in 0..<n / 2 {\n       \
    \     array.append(j + 1)\n        }\n    } else {\n        for i in 0..<n / 2\
    \ {\n            array.append(i)\n        }\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9ipuzmui.swift:20:19: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n            array.append(j + 1)\n      \
    \      ~~~~~ ^\n/tmp/tmp9ipuzmui.swift:17:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let array = [Int]()\n    ^~~\n    var\n/tmp/tmp9ipuzmui.swift:24:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.append(i)\n            ~~~~~ ^\n/tmp/tmp9ipuzmui.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let array = [Int]()\n  \
    \  ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979174
