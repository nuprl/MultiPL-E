language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = [Int]()\n    var i = n - 1\n    for _ in 0..<n\
    \ {\n        levels.append(i)\n        if i & 1 == 1 {\n            i = i + 1\n\
    \        } else {\n            i = i + 1\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpdhwvj95i/tmpdhwvj95i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59212a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5920f9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5920f9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5920f9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhwvj95i                        0x000055fabd44e5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b5921493460 __libc_start_main +
    245

    6    tmpdhwvj95i                        0x000055fabd44e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [0]\n\n    if n % 2 == 1 {\n        pile = append(pile,\
    \ n)\n    }\n\n    for i in 1..(n/2) {\n        let next = 2 * i\n        if n\
    \ % 2 == 0 {\n            pile = append(pile, next)\n        } else {\n      \
    \      pile = append(pile, next+1)\n        }\n    }\n\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpff7i7hri.swift:16:16: error: cannot find 'append' in scope\n  \
    \      pile = append(pile, n)\n               ^~~~~~\n/tmp/tmpff7i7hri.swift:19:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for i in\
    \ 1..(n/2) {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let mut stones: int = 0\n    \n    for _ in 0..n {\n       \
    \ stones += 1 // if n is odd, add next odd number.\n        if n % 2 == 0 {\n\
    \            stones += 1 // if n is even, add next even number.\n        }\n \
    \       n -= 1\n    }\n    \n    return [stones]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9ztmxyyk.swift:13:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut stones:\
    \ int = 0\n            ^\n/tmp/tmp9ztmxyyk.swift:13:13: note: join the identifiers\
    \ together\n    let mut stones: int = 0\n        ~~~~^~~~~~\n        mutstones\n\
    /tmp/tmp9ztmxyyk.swift:13:13: note: join the identifiers together with camel-case\n\
    \    let mut stones: int = 0\n        ~~~~^~~~~~\n        mutStones\n/tmp/tmp9ztmxyyk.swift:13:21:\
    \ error: cannot find type 'int' in scope\n    let mut stones: int = 0\n      \
    \              ^~~\n/tmp/tmp9ztmxyyk.swift:15:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for _ in 0..n {\n              ^~\n\
    \              ...\n/tmp/tmp9ztmxyyk.swift:23:13: error: cannot find 'stones'\
    \ in scope\n    return [stones]\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    \n    var res = [Int]()\n    \n    if n%2 == 0 {\n        let\
    \ m = n/2\n        for i in 1...m {\n            if i%2 == 0 {\n             \
    \   res.append(i+1)\n            } else {\n                res.append(i+2)\n \
    \           }\n        }\n    } else {\n        let m = n/2\n        for i in\
    \ 1...m {\n            if i%2 == 0 {\n                res.append(i+2)\n      \
    \      } else {\n                res.append(i+1)\n            }\n        }\n \
    \   }\n    \n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmphkida81u/tmphkida81u.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad176fabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad176ca2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad176ca2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad176ca17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphkida81u                        0x000055c4e8c4f5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ad177197460 __libc_start_main +
    245

    6    tmphkida81u                        0x000055c4e8c4f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile : [Int] = []\n    if n == 1 {\n        pile += [0]\n\
    \    } else if n % 2 == 0 {\n        pile += [n, n - 1]\n    } else {\n      \
    \  pile += [n/2, n/2, n/2]\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpfv739_59/tmpfv739_59.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eee6e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eee3d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eee3d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eee3d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfv739_59                        0x000055e8a75a8482 <unavailable> + 5250

    5    libc.so.6                          0x00002b1eee8cd460 __libc_start_main +
    245

    6    tmpfv739_59                        0x000055e8a75a80c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n\tvar r: [Int] = []\n\tr.append()\n\tlet isEven = n%2 == 0\n\tlet\
    \ nextEven = n%2 != 0\n\tif isEven {\n\t\tlet nextEven = n%2 != 0\n\t\tif nextEven\
    \ {\n\t\t\tlet nextOdd = n%2 != 0\n\t\t\tif nextOdd {\n\t\t\t\tr.append()\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5wlr7cmv.swift:14:11: error: missing argument for parameter #1\
    \ in call\n        r.append()\n                 ^\n                 <#Int#>\n\
    Swift.Array:6:37: note: 'append' declared here\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\n/tmp/tmp5wlr7cmv.swift:22:14: error: missing argument for parameter #1\
    \ in call\n                                r.append()\n                      \
    \                   ^\n                                         <#Int#>\nSwift.Array:6:37:\
    \ note: 'append' declared here\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let stones = [Int](repeating: 0, count: n + 1);\n    var nLevels\
    \ = 0;\n    while n != 0 {\n        if n % 2 == 1 {\n            nLevels++;\n\
    \            stones[nLevels] = stones[nLevels] + n + 1;\n        } else {\n  \
    \          nLevels++;\n            stones[nLevels] = stones[nLevels] - n;\n  \
    \      }\n        n /= 2;\n    }\n    return stones;\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwm9tm492.swift:17:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            nLevels++;\n                   ^~\n/tmp/tmpwm9tm492.swift:18:19:\
    \ error: cannot assign through subscript: 'stones' is a 'let' constant\n     \
    \       stones[nLevels] = stones[nLevels] + n + 1;\n            ~~~~~~^\n/tmp/tmpwm9tm492.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let stones = [Int](repeating:\
    \ 0, count: n + 1);\n    ^~~\n    var\n/tmp/tmpwm9tm492.swift:20:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            nLevels++;\n\
    \                   ^~\n/tmp/tmpwm9tm492.swift:21:19: error: cannot assign through\
    \ subscript: 'stones' is a 'let' constant\n            stones[nLevels] = stones[nLevels]\
    \ - n;\n            ~~~~~~^\n/tmp/tmpwm9tm492.swift:13:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let stones = [Int](repeating: 0, count: n + 1);\n\
    \    ^~~\n    var\n/tmp/tmpwm9tm492.swift:23:11: error: left side of mutating\
    \ operator isn't mutable: 'n' is a 'let' constant\n        n /= 2;\n        ~\
    \ ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    if n % 2 == 0 {\n        arr += [n]\n\
    \    }\n    if n % 2 == 1 {\n        arr += [n + 1]\n    }\n    return arr\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp8qqa97y_/tmp8qqa97y_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d9ca12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d9c709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d9c709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d9c7087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8qqa97y_                        0x000055f27b3874d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b7d9cbfe460 __libc_start_main +
    245

    6    tmp8qqa97y_                        0x000055f27b387119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n\tvar arr = [Int]()\n\tif n%2 != 0 {\n\t\tarr.append(n)\n\t}\n\t\
    let nextOdd = n / 2\n\tlet nextEven = n - nextOdd\n\tif n%2 == 0 {\n\t\tarr.append(nextEven)\n\
    \t} else {\n\t\tarr.append(nextOdd)\n\t}\n\treturn arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpbrsnojev/tmpbrsnojev.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b880f273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b880ef6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b880ef6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b880ef697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrsnojev                        0x000055fce297d4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b880f45f460 __libc_start_main +
    245

    6    tmpbrsnojev                        0x000055fce297d119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    \n    if n % 2 != 0 {\n        return make_a_pile(n: n - 1)\
    \ + [n]\n    }\n    return make_a_pile(n: n / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979179
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let pile: [Int] = [0]\n    if n % 2 == 0 {\n        for _ in\
    \ 0 ..< n / 2 {\n            pile.append(pile[pile.count-1]! + 2)\n        }\n\
    \    } else {\n        for _ in 0 ..< n / 2 {\n            pile.append(pile[pile.count-1]!\
    \ + 1)\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp3znuazkc.swift:16:18: error: no exact matches in call to instance\
    \ method 'append'\n            pile.append(pile[pile.count-1]! + 2)\n        \
    \         ^\n/tmp/tmp3znuazkc.swift:16:18: note: found candidate with type '(__owned\
    \ Int) -> ()'\n            pile.append(pile[pile.count-1]! + 2)\n            \
    \     ^\n/tmp/tmp3znuazkc.swift:20:18: error: no exact matches in call to instance\
    \ method 'append'\n            pile.append(pile[pile.count-1]! + 1)\n        \
    \         ^\n/tmp/tmp3znuazkc.swift:20:18: note: found candidate with type '(__owned\
    \ Int) -> ()'\n            pile.append(pile[pile.count-1]! + 1)\n            \
    \     ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int](repeating: 0, count: n)\n    for level in 0\
    \ ..< n {\n        let nextOddOrEven = nextOdd(n: n - level)\n        pile[level]\
    \ = nextOddOrEven\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpkfslr6t6.swift:15:29: error: cannot find 'nextOdd' in scope\n \
    \       let nextOddOrEven = nextOdd(n: n - level)\n                          \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 || n == 1 {\n        return [1]\n    }\n    if n %\
    \ 2 == 0 {\n        return make_a_pile(n - 1) + make_a_pile(n / 2)\n    } else\
    \ {\n        return make_a_pile(n - 1) + make_a_pile(n / 2) + [1]\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpx1sjrf52.swift:17:28: error: missing argument label 'n:' in call\n\
    \        return make_a_pile(n - 1) + make_a_pile(n / 2)\n                    \
    \       ^\n                           n: \n/tmp/tmpx1sjrf52.swift:17:49: error:\
    \ missing argument label 'n:' in call\n        return make_a_pile(n - 1) + make_a_pile(n\
    \ / 2)\n                                                ^\n                  \
    \                              n: \n/tmp/tmpx1sjrf52.swift:19:28: error: missing\
    \ argument label 'n:' in call\n        return make_a_pile(n - 1) + make_a_pile(n\
    \ / 2) + [1]\n                           ^\n                           n: \n/tmp/tmpx1sjrf52.swift:19:49:\
    \ error: missing argument label 'n:' in call\n        return make_a_pile(n - 1)\
    \ + make_a_pile(n / 2) + [1]\n                                               \
    \ ^\n                                                n: \n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var ret = [Int]()\n    var levels = n\n    for _ in 1...n {\n\
    \        if n % 2 == 1 {\n            levels += 1\n        } else {\n        \
    \    levels -= 1\n        }\n        ret.append(levels)\n    }\n    return ret\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmppuze7rd6/tmppuze7rd6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3df068c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3ded5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3ded5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3ded5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppuze7rd6                        0x0000560ca81d75c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ab3df254460 __libc_start_main +
    245

    6    tmppuze7rd6                        0x0000560ca81d7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    let ones = make_pil(ones: n, next: Int(),\
    \ level: 0)\n    let odd = make_pil(ones: n, next: Int(), level: 1)\n    let even\
    \ = make_pil(ones: n, next: Int(), level: 2)\n    pile.append(ones)\n    pile.append(odd)\n\
    \    pile.append(even)\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt1m6_vd0.swift:14:16: error: cannot find 'make_pil' in scope\n\
    \    let ones = make_pil(ones: n, next: Int(), level: 0)\n               ^~~~~~~~\n\
    /tmp/tmpt1m6_vd0.swift:15:15: error: cannot find 'make_pil' in scope\n    let\
    \ odd = make_pil(ones: n, next: Int(), level: 1)\n              ^~~~~~~~\n/tmp/tmpt1m6_vd0.swift:16:16:\
    \ error: cannot find 'make_pil' in scope\n    let even = make_pil(ones: n, next:\
    \ Int(), level: 2)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    var stones: [Int]\
    \ = []\n    var stone: Int = 1\n    var count: Int = 0\n    repeat{\n        stone\
    \ += 2\n        count += 1\n        if n == stone {\n            stones.append(count)\n\
    \        }\n        else if n % 2 == 0 {\n            stones.append(count)\n \
    \           stone = count\n            count = n + 1\n            n /= 2\n   \
    \     }\n    }while(n)\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplwn6z4lr.swift:29:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmplwn6z4lr.swift:31:12:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ }while(n)\n           ^\n          (   != 0)\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let n = n\n    let res = [Int]()\n    if n % 2 == 0 {\n    \
    \    res.append(n)\n    }\n    else {\n        var i = 0\n        while (i + 1\
    \ < n) {\n            i += 2\n            res.append(i)\n        }\n    }\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5va8grjy.swift:16:13: error: cannot use mutating member on immutable\
    \ value: 'res' is a 'let' constant\n        res.append(n)\n        ~~~ ^\n/tmp/tmp5va8grjy.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = [Int]()\n    ^~~\n\
    \    var\n/tmp/tmp5va8grjy.swift:22:17: error: cannot use mutating member on immutable\
    \ value: 'res' is a 'let' constant\n            res.append(i)\n            ~~~\
    \ ^\n/tmp/tmp5va8grjy.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let res = [Int]()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let result = [Int](repeating: 0, count: n+1)\n    result[n]\
    \ = 1\n    let rem = n % 2 == 0 ? 2 : 3\n    for i in 1..(rem-2).min(3) {\n  \
    \      result[i] = result[i*2 + 1]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp22tkwm1y.swift:14:11: error: cannot assign through subscript: 'result'\
    \ is a 'let' constant\n    result[n] = 1\n    ~~~~~~^\n/tmp/tmp22tkwm1y.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [Int](repeating:\
    \ 0, count: n+1)\n    ^~~\n    var\n/tmp/tmp22tkwm1y.swift:16:15: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n    for i in 1..(rem-2).min(3)\
    \ {\n              ^~\n              ...\n/tmp/tmp22tkwm1y.swift:16:21: error:\
    \ binary operator '-' cannot be applied to operands of type 'Int' and 'Float16'\n\
    \    for i in 1..(rem-2).min(3) {\n                 ~~~^~\n/tmp/tmp22tkwm1y.swift:16:21:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Float, Float), (Float16, Float16), (Float80, Float80)\n \
    \   for i in 1..(rem-2).min(3) {\n                    ^\n/tmp/tmp22tkwm1y.swift:16:25:\
    \ error: reference to member 'min' cannot be resolved without a contextual type\n\
    \    for i in 1..(rem-2).min(3) {\n                        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = n\n    stones = stones % 2 == 0 ? stones : stones\
    \ + 1\n    var piles = [Int]()\n    if stones == 1 {\n        piles = [stones]\n\
    \    } else {\n        var p = 2\n        while stones > 1 {\n            if stones\
    \ % 2 == 0 {\n                piles.append(p)\n                stones = stones\
    \ - 1\n            } else {\n                piles.append(2 * p)\n           \
    \     stones = stones - 1\n            }\n            p = p + 1\n        }\n \
    \   }\n    return piles\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpskmintby/tmpskmintby.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eade35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eadb2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eadb2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eadb2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskmintby                        0x000055720228e4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b1eae021460 __libc_start_main +
    245

    6    tmpskmintby                        0x000055720228e119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int](repeating: 0, count: n)\n    let n = n %\
    \ 2 == 0 ? n + 1 : n\n    for i in 0..<n {\n        if i % 2 == 0 {\n        \
    \    result[i] = result[i] + 2\n        } else {\n            result[i] = result[i]\
    \ + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp6bc2egw8/tmp6bc2egw8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06f6139c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06f5e30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06f5e30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06f5e2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bc2egw8                        0x00005639bea73622 <unavailable> + 5666

    5    libc.so.6                          0x00002b06f6325460 __libc_start_main +
    245

    6    tmp6bc2egw8                        0x00005639bea73269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var n = n // n is Int\n    var prev\
    \ = [Int]()\n    if n%2 == 1 {\n        pile = prev\n    } else {\n        prev\
    \ = make_a_pile(n: n - 1)\n        pile.append(prev![0] + prev![1])\n    }\n \
    \   pile.append(prev![0])\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz5wxr_mi.swift:20:25: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        pile.append(prev![0] + prev![1])\n                   \
    \ ~~~~^\n                        \n/tmp/tmpz5wxr_mi.swift:20:36: error: cannot\
    \ force unwrap value of non-optional type '[Int]'\n        pile.append(prev![0]\
    \ + prev![1])\n                               ~~~~^\n                        \
    \           \n/tmp/tmpz5wxr_mi.swift:22:21: error: cannot force unwrap value of\
    \ non-optional type '[Int]'\n    pile.append(prev![0])\n                ~~~~^\n\
    \                    \n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile : [Int] = []\n    if n != 0 { // n is even\n      \
    \  if n & 1 == 0 { // n is odd\n            pile += [n]\n        } else {\n  \
    \          pile += [n / 2]\n            pile += [n / 2]\n            pile += [n\
    \ / 2]\n            pile += [n]\n        }\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp152iq20t/tmp152iq20t.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b758d592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b758d289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b758d289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b758d2887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp152iq20t                        0x0000556c43d5b482 <unavailable> + 5250

    5    libc.so.6                          0x00002b758d77e460 __libc_start_main +
    245

    6    tmp152iq20t                        0x0000556c43d5b0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var a = [Int]()\n    var current = 0\n    while current < n\
    \ {\n        if n % 2 == 0 {\n            a.append(n)\n            n /= 2\n  \
    \      } else {\n            a.append(n / 2)\n            n /= 2\n        }\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpngbvxgpu.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpngbvxgpu.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    if n % 2 == 1 {\n        // odd n is odd\n\
    \        let oddStones = n + n - 1\n        for i in 1..<oddStones {\n       \
    \     stones.insert(i, stones[i-1] + 1)\n        }\n    } else {\n        // even\
    \ n is even\n        let evenStones = n + 1\n        for i in 1..<evenStones {\n\
    \            stones.insert(i, stones[i-1] + 1)\n        }\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpy2qh43n2.swift:18:20: error: no exact matches in call to instance\
    \ method 'insert'\n            stones.insert(i, stones[i-1] + 1)\n           \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpy2qh43n2.swift:24:20:\
    \ error: no exact matches in call to instance method 'insert'\n            stones.insert(i,\
    \ stones[i-1] + 1)\n                   ^\nSwift.Array:11:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n\n    if n % 2 == 1 {\n        // even\n\
    \        for i in 1...n {\n            pile.append(i)\n        }\n    } else {\n\
    \        // odd\n        for i in 1...n {\n            if i % 2 == 0 {\n     \
    \           pile.append(i)\n            }\n        }\n    }\n\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpju2q8kwg/tmpju2q8kwg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb59570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb59267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb59267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb592667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpju2q8kwg                        0x0000561ccbfda5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002acb5975c460 __libc_start_main +
    245

    6    tmpju2q8kwg                        0x0000561ccbfda209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let pile = repeatElement(n: n, times: 0, element: 0)\n    pile.append(1)\n\
    \    for i in 1...pile.count {\n        pile[i] = pile[i-1] + i\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpcpmmaqiw.swift:13:29: error: extra arguments at positions #2, #3\
    \ in call\n    let pile = repeatElement(n: n, times: 0, element: 0)\n        \
    \                    ^\nSwift.repeatElement:1:24: note: 'repeatElement(_:count:)'\
    \ declared here\n@inlinable public func repeatElement<T>(_ element: T, count n:\
    \ Int) -> Repeated<T>\n                       ^\n/tmp/tmpcpmmaqiw.swift:13:34:\
    \ error: missing argument for parameter 'count' in call\n    let pile = repeatElement(n:\
    \ n, times: 0, element: 0)\n                                 ^\n             \
    \                    , count: <#Int#>\nSwift.repeatElement:1:24: note: 'repeatElement(_:count:)'\
    \ declared here\n@inlinable public func repeatElement<T>(_ element: T, count n:\
    \ Int) -> Repeated<T>\n                       ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return []\n    }\n    var pile = [Int](n)\n\
    \    for i in 0..<n {\n        if n % 2 == 0 {\n            pile[i] = n + 1\n\
    \        } else {\n            pile[i] = n\n        }\n        n = n / 2\n   \
    \ }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmph66lqo9q.swift:16:22: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var pile = [Int](n)\n                     ^\n                 \
    \    arrayLiteral: \n/tmp/tmph66lqo9q.swift:23:9: error: cannot assign to value:\
    \ 'n' is a 'let' constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile.append(n)\n\
    \    } else {\n        pile.append(n - 1)\n    }\n\n    var nextLevel = pile\n\
    \    var evenLevel = nextLevel\n    if nextLevel[0] % 2 == 0 {\n        nextLevel\
    \ = nextLevel[1..]\n    }\n    for number in nextLevel {\n        if number %\
    \ 2 == 0 {\n            evenLevel.append(number)\n        } else {\n         \
    \   pile.append(number)\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz02ypok6.swift:23:32: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        nextLevel = nextLevel[1..]\n                  \
    \             ^~\n                               ...\n/tmp/tmpz02ypok6.swift:23:30:\
    \ error: no 'subscript' candidates produce the expected contextual result type\
    \ '[Int]'\n        nextLevel = nextLevel[1..]\n                             ^\n\
    Swift.Array:16:23: note: 'subscript(_:)' produces 'Int', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript(index: Int) -> Element\
    \ { get set }\n                      ^\nSwift.Array:17:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n\
    \    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> {\
    \ get set }\n                      ^\nSwift.Collection:3:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n\
    \    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\nSwift.MutableCollection:3:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n\
    \    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // Make an array with n empty slots.\n    var pile = [Int](repeating:\
    \ 0, count: n)\n\n    // If n is even, fill the odd slots with stones.\n    if\
    \ n % 2 == 0 {\n        pile[n/2] = n\n    }\n\n    // If n is odd, fill the even\
    \ slots with stones.\n    else {\n        pile[n/2-1] = n - 1\n    }\n\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp42miml7o/tmp42miml7o.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb9be3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb98dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb98da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb98d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42miml7o                        0x000055bfb78fb4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b6cb9dcf460 __libc_start_main +
    245

    6    tmp42miml7o                        0x000055bfb78fb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).map { i in i == 0 || i % 2 == 1 ? i + 1 : i }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp0wfp64m7/tmp0wfp64m7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4eeff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4eececb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4eecec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4eeceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wfp64m7                        0x00005583998c2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae4ef1e1460 __libc_start_main +
    245

    6    tmp0wfp64m7                        0x00005583998c2199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0...n).map { make_a_pile(n: $0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmkswtb7z.swift:13:26: error: cannot convert value of type '[Int]'\
    \ to closure result type 'Int'\n    return (0...n).map { make_a_pile(n: $0) }\n\
    \                         ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0] * n\n    var level = 0\n    while n != 0 {\n\
    \        stones[level] = n\n        if n & 1 == 1 {\n            level++\n   \
    \     }\n        n = n >> 1\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmcynrxbk.swift:13:22: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    var stones = [0] * n\n          \
    \       ~~~ ^ ~\n/tmp/tmpmcynrxbk.swift:13:22: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    var stones = [0] *\
    \ n\n                     ^\n/tmp/tmpmcynrxbk.swift:18:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            level++\n        \
    \         ^~\n/tmp/tmpmcynrxbk.swift:20:9: error: cannot assign to value: 'n'\
    \ is a 'let' constant\n        n = n >> 1\n        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [0]\n    make_a_pile_helper(n, &result)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp25congko.swift:14:5: error: cannot find 'make_a_pile_helper' in\
    \ scope\n    make_a_pile_helper(n, &result)\n    ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // code here\n    if n == 0 { return [] }\n    var even = 0\n\
    \    var odd  = 0\n    var arr  = []\n    while n > 0 {\n        if n % 2 == 0\
    \ {\n            even += n\n            n = n/2\n        }\n        else {\n \
    \           odd  += n\n            n = n/2\n        }\n    }\n    arr = Array(0\
    \ ..< n).map { (n) -> Int in\n        if n == odd { return odd }\n        if n\
    \ == even { return even }\n        return odd\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeoi06w7j.swift:17:16: error: empty collection literal requires\
    \ an explicit type\n    var arr  = []\n               ^~\n/tmp/tmpeoi06w7j.swift:21:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = n/2\n\
    \            ^\n/tmp/tmpeoi06w7j.swift:25:13: error: cannot assign to value: 'n'\
    \ is a 'let' constant\n            n = n/2\n            ^\n/tmp/tmpeoi06w7j.swift:33:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[Int]'\n\
    \    return arr\n           ^\n/tmp/tmpeoi06w7j.swift:33:12: note: arguments to\
    \ generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n   \
    \ return arr\n           ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile : [Int]\n    if n%2 == 1 {\n        pile = []\n   \
    \     for _ in 0...n {\n            pile.append(n+1)\n        }\n    } else {\n\
    \        pile = []\n        for _ in 0...n {\n            pile.append(n+2)\n \
    \       }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpvaj66wvk/tmpvaj66wvk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3317b8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3317884b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3317884988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33178837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvaj66wvk                        0x000055c1803c3562 <unavailable> + 5474

    5    libc.so.6                          0x00002b3317d79460 __libc_start_main +
    245

    6    tmpvaj66wvk                        0x000055c1803c31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [1]\n    var pile = [Int]()\n    pile.append(stones[0])\n\
    \    for i in 0..<n {\n        var next = 0\n        if i % 2 == 0 {\n       \
    \     next = stones[i]\n        } else {\n            next = stones[(i - 1) /\
    \ 2]\n        }\n        stones.append(next)\n        pile.append(stones[i])\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpzw12t6ec/tmpzw12t6ec.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae35e16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae35de61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae35de61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae35de607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzw12t6ec                        0x00005584ebf05612 <unavailable> + 5650

    5    libc.so.6                          0x00002ae35e356460 __libc_start_main +
    245

    6    tmpzw12t6ec                        0x00005584ebf05259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var res = make([][Int], n)\n  if n % 2 == 0 {\n    var evens =\
    \ n\n    var odds = n - 1\n    for i := 1; i <= evens; i++ {\n      res[evens][evens]\
    \ = i\n      evens *= 2\n    }\n    for i := evens + 1; i <= odds; i++ {\n   \
    \   res[odds][odds] = i\n      odds *= 2\n    }\n  } else {\n    var evens = n\n\
    \    var odds = n - 1\n    for i := 1; i <= evens; i++ {\n      res[i][evens]\
    \ = i\n      evens *= 2\n    }\n    for i := evens + 1; i <= odds; i++ {\n   \
    \   res[i][odds] = i\n      odds *= 2\n    }\n  }\n  return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxn82514u.swift:17:12: error: expected type\n    for i := 1; i <=\
    \ evens; i++ {\n           ^\n            <#type#>\n/tmp/tmpxn82514u.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= evens; i++\
    \ {\n           ^\n/tmp/tmpxn82514u.swift:17:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= evens; i++ {\n           ^\n/tmp/tmpxn82514u.swift:21:12:\
    \ error: expected type\n    for i := evens + 1; i <= odds; i++ {\n           ^\n\
    \            <#type#>\n/tmp/tmpxn82514u.swift:21:12: error: expected 'in' after\
    \ for-each pattern\n    for i := evens + 1; i <= odds; i++ {\n           ^\n/tmp/tmpxn82514u.swift:21:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := evens +\
    \ 1; i <= odds; i++ {\n           ^\n/tmp/tmpxn82514u.swift:28:12: error: expected\
    \ type\n    for i := 1; i <= evens; i++ {\n           ^\n            <#type#>\n\
    /tmp/tmpxn82514u.swift:28:12: error: expected 'in' after for-each pattern\n  \
    \  for i := 1; i <= evens; i++ {\n           ^\n/tmp/tmpxn82514u.swift:28:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 1; i <=\
    \ evens; i++ {\n           ^\n/tmp/tmpxn82514u.swift:32:12: error: expected type\n\
    \    for i := evens + 1; i <= odds; i++ {\n           ^\n            <#type#>\n\
    /tmp/tmpxn82514u.swift:32:12: error: expected 'in' after for-each pattern\n  \
    \  for i := evens + 1; i <= odds; i++ {\n           ^\n/tmp/tmpxn82514u.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := evens +\
    \ 1; i <= odds; i++ {\n           ^\n/tmp/tmpxn82514u.swift:13:13: error: cannot\
    \ find 'make' in scope\n  var res = make([][Int], n)\n            ^~~~\n/tmp/tmpxn82514u.swift:13:20:\
    \ error: no exact matches in call to subscript \n  var res = make([][Int], n)\n\
    \                   ^\n/tmp/tmpxn82514u.swift:13:20: note: found candidate with\
    \ type '(Int) -> Any'\n  var res = make([][Int], n)\n                   ^\n/tmp/tmpxn82514u.swift:13:20:\
    \ note: found candidate with type '(Range<Int>) -> ArraySlice<Any>'\n  var res\
    \ = make([][Int], n)\n                   ^\n/tmp/tmpxn82"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    pile.append(0)\n\
    \    if n % 2 == 1 {\n        for _ in 1..<(n-1)/2 {\n            pile.append(pile[pile.count-1]+1)\n\
    \        }\n    } else {\n        for _ in 1..<(n-1)/2 {\n            pile.append(pile[pile.count-1])\n\
    \        }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpih1gazcg/tmpih1gazcg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b848944ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8489141b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8489141988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84891407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih1gazcg                        0x0000560bc154f672 <unavailable> + 5746

    5    libc.so.6                          0x00002b8489636460 __libc_start_main +
    245

    6    tmpih1gazcg                        0x0000560bc154f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = [Int]()\n    var counter: Int = 0\n    var next_odd_or_even:\
    \ Int = 0\n    while counter < n {\n        levels.append(counter)\n        if\
    \ isOdd(n) {\n            next_odd_or_even = (counter + 2) % 2\n        } else\
    \ {\n            next_odd_or_even = (counter + 1) % 2\n        }\n        counter\
    \ = next_odd_or_even\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpljso_w_4.swift:18:12: error: cannot find 'isOdd' in scope\n   \
    \     if isOdd(n) {\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            result.append(n)\n        } else {\n            result.append(2\
    \ * n)\n        }\n        n /= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpqwndueyr.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // Fill this in.\n    var pile = [0]\n    if n % 2 == 1 {\n\
    \        for i in 1..n {\n            if i % 2 != 0 {\n                pile =\
    \ append(pile, i+1)\n            }\n        }\n    } else {\n        for i in\
    \ 1..n {\n            if i % 2 == 0 {\n                pile = append(pile, i+1)\n\
    \            }\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeuhf5jo9.swift:16:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 1..n {\n                  ^~\n       \
    \           ...\n/tmp/tmpeuhf5jo9.swift:22:19: error: cannot find operator '..'\
    \ in scope; did you mean '...'?\n        for i in 1..n {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones_in_the_pile = [Int]()\n    if n <= 0 {\n        return\
    \ stones_in_the_pile\n    }\n    if n % 2 == 1 {\n        stones_in_the_pile.append(n)\n\
    \        n -= 2\n    }\n    for number in 1...n {\n        stones_in_the_pile.append(n\
    \ % 2 == 0 ? number : number - 1)\n        n = n / 2\n    }\n    return stones_in_the_pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpe0w68j6f.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 2\n        ~ ^\n/tmp/tmpe0w68j6f.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if n%2 == 0 {\n \
    \       return make_a_pile(n/2)\n    } else {\n        return make_a_pile(n/2-1)\
    \ + [n-1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1rw6agze.swift:17:28: error: missing argument label 'n:' in call\n\
    \        return make_a_pile(n/2)\n                           ^\n             \
    \              n: \n/tmp/tmp1rw6agze.swift:19:28: error: missing argument label\
    \ 'n:' in call\n        return make_a_pile(n/2-1) + [n-1]\n                  \
    \         ^\n                           n: \n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var total = 0\n    for i in 1...n\
    \ {\n        if i % 2 == 1 {\n            total += i\n        } else {\n     \
    \       total += i * 3\n        }\n        pile.append(total)\n        total =\
    \ 0\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp1_tnp2h0/tmp1_tnp2h0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e770dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e76dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e76dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e76dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_tnp2h0                        0x000055c880856562 <unavailable> + 5474

    5    libc.so.6                          0x00002b0e772ca460 __libc_start_main +
    245

    6    tmp1_tnp2h0                        0x000055c8808561a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int](repeating: 0, count: n + 2)\n    for _ in 1..<n\
    \ {\n        let next = (n % 2 == 0 ? next() + 1 : next() + 2)\n        pile[next]\
    \ += 1\n        n = next\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpj55cpoe6.swift:15:34: error: use of local variable 'next' before\
    \ its declaration\n        let next = (n % 2 == 0 ? next() + 1 : next() + 2)\n\
    \                                 ^\n/tmp/tmpj55cpoe6.swift:15:13: note: 'next'\
    \ declared here\n        let next = (n % 2 == 0 ? next() + 1 : next() + 2)\n \
    \           ^\n/tmp/tmpj55cpoe6.swift:15:47: error: use of local variable 'next'\
    \ before its declaration\n        let next = (n % 2 == 0 ? next() + 1 : next()\
    \ + 2)\n                                              ^\n/tmp/tmpj55cpoe6.swift:15:13:\
    \ note: 'next' declared here\n        let next = (n % 2 == 0 ? next() + 1 : next()\
    \ + 2)\n            ^\n/tmp/tmpj55cpoe6.swift:17:9: error: cannot assign to value:\
    \ 'n' is a 'let' constant\n        n = next\n        ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pil = [Int]()\n    for _ in 0..<n {\n        pil.append(n)\n\
    \    }\n\n    if n % 2 == 0 {\n        for _ in 0..<n {\n            pil.append(Int(arc4random()\
    \ % n + 1))\n        }\n    } else {\n        for _ in 0..<n {\n            pil.append(Int(arc4random()\
    \ % n + 1))\n            pil.append(Int(arc4random() % n + 1))\n        }\n  \
    \  }\n    return pil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmppvgdjlc1.swift:20:28: error: cannot find 'arc4random' in scope\n\
    \            pil.append(Int(arc4random() % n + 1))\n                         \
    \  ^~~~~~~~~~\n/tmp/tmppvgdjlc1.swift:24:28: error: cannot find 'arc4random' in\
    \ scope\n            pil.append(Int(arc4random() % n + 1))\n                 \
    \          ^~~~~~~~~~\n/tmp/tmppvgdjlc1.swift:25:28: error: cannot find 'arc4random'\
    \ in scope\n            pil.append(Int(arc4random() % n + 1))\n              \
    \             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n\n    while stones\
    \ > 0 {\n        let next = stones % 2 != 0 ? stones + 1 : stones - 1\n      \
    \  result.append(next)\n        stones = next\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979179
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append\
    \ (n / 2)\n    }\n\n    if n % 2 != 0 {\n        result.append ((2 * n) + 1) /\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8twjm5yw.swift:19:16: error: cannot convert value of type '()'\
    \ to expected argument type 'Int'\n        result.append ((2 * n) + 1) / 2\n \
    \              ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n <= 0 {\n        return pile\n \
    \   }\n\n    let oddOrEven = n % 2 == 0 ? 2 : 3\n    var numOfLevels = n\n   \
    \ while numOfLevels > 0 {\n        let nextLevel = numOfLevels\n        if nextLevel\
    \ % 2 == 0 {\n            nextLevel += 1\n        } else {\n            nextLevel\
    \ += oddOrEven\n        }\n        pile.append(nextLevel)\n        numOfLevels\
    \ = numOfLevels / 2\n    }\n\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyhtgabfj.swift:23:23: error: left side of mutating operator isn't\
    \ mutable: 'nextLevel' is a 'let' constant\n            nextLevel += 1\n     \
    \       ~~~~~~~~~ ^\n/tmp/tmpyhtgabfj.swift:21:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let nextLevel = numOfLevels\n        ^~~\n     \
    \   var\n/tmp/tmpyhtgabfj.swift:25:23: error: left side of mutating operator isn't\
    \ mutable: 'nextLevel' is a 'let' constant\n            nextLevel += oddOrEven\n\
    \            ~~~~~~~~~ ^\n/tmp/tmpyhtgabfj.swift:21:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let nextLevel = numOfLevels\n        ^~~\n     \
    \   var\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile.append(n)\n\
    \    } else {\n        var n = n\n        for _ in 1...n {\n            pile.append(n\
    \ % 2 == 0 ? n : n + 2)\n            n /= 2\n        }\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpbfjjajv_/tmpbfjjajv_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28b56afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28b53a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28b53a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28b53a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfjjajv_                        0x00005628e0c375c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b28b589b460 __libc_start_main +
    245

    6    tmpbfjjajv_                        0x00005628e0c37209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    for _ in 1 ..< n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones[stones.endIndex] - 1)\n        } else\
    \ {\n            stones.append(stones.last! + 1)\n        }\n    }\n    return\
    \ stones.dropFirst().reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpk88qgime.swift:21:31: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return stones.dropFirst().reverse()\n\
    \           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpk88qgime.swift:21:31: error:\
    \ cannot use mutating member on immutable value: function call returns immutable\
    \ value\n    return stones.dropFirst().reverse()\n           ~~~~~~~~~~~~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    for i in 1...n {\n        if i%2 ==\
    \ 0 {\n            stones.append(i)\n        } else {\n            stones.append(i+1)\n\
    \        }\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp8isbeb9y/tmp8isbeb9y.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b739b2c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b739afbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b739afbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b739afba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8isbeb9y                        0x000055d0d8d9c5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b739b4b0460 __libc_start_main +
    245

    6    tmp8isbeb9y                        0x000055d0d8d9c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = [Int]()\n    var total = 0\n    var prevLevel =\
    \ 0\n    if n % 2 == 0 {\n        for i in 0..<n {\n            levels.append(i)\n\
    \            total += i + prevLevel\n        }\n    } else {\n        for i in\
    \ 0..<n {\n            if i % 2 == 0 {\n                levels.append(i)\n   \
    \             total += i + prevLevel\n            } else {\n                total\
    \ += i + prevLevel\n                levels.append(total)\n                prevLevel\
    \ = total\n            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp8h7whqby/tmp8h7whqby.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefdbcf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefdb9e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefdb9e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefdb9e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8h7whqby                        0x000055f9b42dc5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002aefdbedc460 __libc_start_main +
    245

    6    tmp8h7whqby                        0x000055f9b42dc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n % 2 == 0 else { return [n] * n }\n    guard n >= 2 else\
    \ { return [n-1] * n }\n    return [n-1] + make_a_pile(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwk4q4psl.swift:13:40: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    guard n % 2 == 0 else { return [n]\
    \ * n }\n                                   ~~~ ^ ~\n/tmp/tmpwk4q4psl.swift:13:40:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    guard n % 2 == 0 else { return [n] * n }\n                 \
    \                      ^\n/tmp/tmpwk4q4psl.swift:13:40: error: no '*' candidates\
    \ produce the expected contextual result type '[Int]'\n    guard n % 2 == 0 else\
    \ { return [n] * n }\n                                       ^\nSwift.Int:9:24:\
    \ note: '*' produces 'Int', not the expected contextual result type '[Int]'\n\
    \    public static func * (lhs: Int, rhs: Int) -> Int\n                      \
    \ ^\nSwift.Numeric:5:17: note: '*' produces 'Int', not the expected contextual\
    \ result type '[Int]'\n    static func * (lhs: Self, rhs: Self) -> Self\n    \
    \            ^\nSwift.BinaryInteger:22:26: note: '*' produces 'Int', not the expected\
    \ contextual result type '[Int]'\n    override static func * (lhs: Self, rhs:\
    \ Self) -> Self\n                         ^\nSwift.Duration:16:24: note: '*' produces\
    \ 'Duration', not the expected contextual result type '[Int]'\n    public static\
    \ func * <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n    \
    \                   ^\n/tmp/tmpwk4q4psl.swift:14:38: error: cannot convert return\
    \ expression of type 'Int' to return type '[Int]'\n    guard n >= 2 else { return\
    \ [n-1] * n }\n                               ~~~~~~^~~\n/tmp/tmpwk4q4psl.swift:14:32:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    guard n >= 2 else { return [n-1] * n }\n                               ^\n\
    /tmp/tmpwk4q4psl.swift:15:32: error: missing argument label 'n:' in call\n   \
    \ return [n-1] + make_a_pile(n-2)\n                               ^\n        \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let result = make_a_pile_internal(n, n)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0yh5hkcu.swift:13:18: error: cannot find 'make_a_pile_internal'\
    \ in scope\n    let result = make_a_pile_internal(n, n)\n                 ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [Int]()\n    res.append(n)\n    if n % 2 == 0 {\n\
    \        res.append(n - 1)\n    } else {\n        var left = n - 1\n        var\
    \ right = n\n        res.append(left)\n        while left > 0 {\n            left\
    \ -= 1\n            res.append(right)\n            right += 1\n        }\n   \
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp7c77btkg/tmp7c77btkg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36da4dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36da1d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36da1d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36da1d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7c77btkg                        0x00005628cdedf4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b36da6c7460 __libc_start_main +
    245

    6    tmp7c77btkg                        0x00005628cdedf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var stack = [Int]()\n  var result = [Int]()\n  for num in stride(from:\
    \ 0, to: n, by: 2) {\n    if num % 2 == 0 {\n      stack.append(num)\n    } else\
    \ {\n      result.append(stack.last + stack.last)\n      stack.removeLast()\n\
    \    }\n  }\n  result.append(stack.last)\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_002i5mf.swift:19:32: error: binary operator '+' cannot be applied\
    \ to two 'Int?' operands\n      result.append(stack.last + stack.last)\n     \
    \               ~~~~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmp_002i5mf.swift:19:32: note: overloads\
    \ for '+' exist with these partially matching parameter lists: (Int, Int)\n  \
    \    result.append(stack.last + stack.last)\n                               ^\n\
    /tmp/tmp_002i5mf.swift:23:23: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n  result.append(stack.last)\n                    \
    \  ^\n/tmp/tmp_002i5mf.swift:23:23: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n  result.append(stack.last)\n      \
    \                ^\n                           ?? <#default value#>\n/tmp/tmp_002i5mf.swift:23:23:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n  result.append(stack.last)\n                      ^\n              \
    \            !\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n <= 0 {\n        return []\n    }\n    if n % 2 == 0 {\n\
    \        return make_a_pile(n / 2)\n    }\n    \n    var arr = [Int]()\n    if\
    \ n%2 == 1 {\n        arr.append(n)\n    }\n    for _ in 1...n/2 {\n        arr.append(n/2)\n\
    \    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeqw_es69.swift:17:28: error: missing argument label 'n:' in call\n\
    \        return make_a_pile(n / 2)\n                           ^\n           \
    \                n: \n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr: [Int] = []\n    if n % 2 == 1 {\n        for _ in 0\
    \ ..< n / 2 {\n            arr.append(arr[(arr[(arr.count) - 1] + 1) % arr.count])\n\
    \        }\n    } else {\n        for _ in 0 ..< n / 2 {\n            arr.append(arr[(arr[(arr.count)\
    \ - 1] + 2) % arr.count])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9470f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba946df0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba946df0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba946df013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba946defbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba946befe83 <unavailable> + 188035

    6    tmpwhi1rl6f                        0x000056235bfc0d5e <unavailable> + 7518

    7    tmpwhi1rl6f                        0x000056235bfc053b <unavailable> + 5435

    8    libc.so.6                          0x00002ba9472e5460 __libc_start_main +
    245

    9    tmpwhi1rl6f                        0x000056235bfc0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    guard n >= 1 else { return result\
    \ }\n    for i in 1 ..< n {\n        guard i % 2 == 1 else { result.append(i);\
    \ return result }\n        guard i % 2 != 0 else { result.append(n); return result\
    \ }\n        result.append(i)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmprdzguyk_/tmprdzguyk_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d697dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d694d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d694d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d694d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdzguyk_                        0x000055c30ec7c5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b3d699c6460 __libc_start_main +
    245

    6    tmprdzguyk_                        0x000055c30ec7c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: int = 0\n    var stonesCurrentLevel = stones\n \
    \   if n % 2 == 0 {\n        for i : Int in 1..n / 2 {\n            if i % 2 ==\
    \ 0 {\n                stonesCurrentLevel++\n            } else {\n          \
    \      stonesCurrentLevel++\n            }\n        }\n    } else {\n        for\
    \ i : Int in 1..n / 2 {\n            if i % 2 == 1 {\n                stonesCurrentLevel++\n\
    \            } else {\n                stonesCurrentLevel++\n            }\n \
    \       }\n    }\n    var stonesInTheLevel = [Int]()\n    stonesInTheLevel.append(stonesCurrentLevel)\n\
    \    while stonesCurrentLevel > 0 {\n        var stonesInNextLevel = [Int]()\n\
    \        for i : Int in 1..stonesCurrentLevel {\n            if i % 2 == 0 {\n\
    \                stonesInNextLevel.append(stonesCurrentLevel)\n            } else\
    \ {\n                stonesInNextLevel.append(stonesCurrentLevel - i)\n      \
    \      }\n        }\n        stonesInTheLevel.append(stonesInNextLevel)\n    \
    \    stonesCurrentLevel = stonesInNextLevel[0]\n    }\n    return stonesInTheLevel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp7ep__7h6.swift:13:17: error: cannot find type 'int' in scope\n\
    \    var stones: int = 0\n                ^~~\n/tmp/tmp7ep__7h6.swift:16:25: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n        for i : Int\
    \ in 1..n / 2 {\n                        ^~\n                        ...\n/tmp/tmp7ep__7h6.swift:24:25:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        for\
    \ i : Int in 1..n / 2 {\n                        ^~\n                        ...\n\
    /tmp/tmp7ep__7h6.swift:36:25: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        for i : Int in 1..stonesCurrentLevel {\n              \
    \          ^~\n                        ...\n/tmp/tmp7ep__7h6.swift:43:26: error:\
    \ no exact matches in call to instance method 'append'\n        stonesInTheLevel.append(stonesInNextLevel)\n\
    \                         ^\nSwift.Array:7:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where Element == S.Element, S :\
    \ Sequence\n                                    ^\nSwift.RangeReplaceableCollection:5:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where S : Sequence, Self.Element == S.Element\n                         \
    \           ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 { return [] }\n    var nums: [Int] = []\n    if n\
    \ % 2 == 1 {\n        nums.append(n + make_a_pile(n: n - 2))\n    }\n    if n\
    \ % 2 == 0 {\n        nums.append(n + make_a_pile(n: n - 2))\n    }\n    return\
    \ nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0lb821bx.swift:16:25: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        nums.append(n + make_a_pile(n: n -\
    \ 2))\n                        ^\n/tmp/tmp0lb821bx.swift:19:25: error: cannot\
    \ convert value of type '[Int]' to expected argument type 'Int'\n        nums.append(n\
    \ + make_a_pile(n: n - 2))\n                        ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var arr = [Int]()\n  if n % 2 == 0 {\n    for i in 1 ..< n / 2\
    \ {\n      arr.append(i)\n    }\n  }\n  if n % 2 == 1 {\n    for i in 1 ..< n\
    \ / 2 {\n      arr.append(i * 2 + 1)\n    }\n  }\n  return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpv6l0uqai/tmpv6l0uqai.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b835bd09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b835ba00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b835ba00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b835b9ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6l0uqai                        0x000055b1a144e5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b835bef5460 __libc_start_main +
    245

    6    tmpv6l0uqai                        0x000055b1a144e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    for i in 1 ... n {\n        if i % 2 ==\
    \ 0 {\n            stones.append(stones.last + i)\n        } else {\n        \
    \    stones.append(i)\n        }\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5jvbdd23.swift:16:34: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            stones.append(stones.last\
    \ + i)\n                                 ^\n/tmp/tmp5jvbdd23.swift:16:34: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            stones.append(stones.last + i)\n                                \
    \ ^\n                          (           ?? <#default value#>)\n/tmp/tmp5jvbdd23.swift:16:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            stones.append(stones.last + i)\n                        \
    \         ^\n                                     !\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    for i in 1...n {\n        arr.append(i)\n\
    \    }\n    let oddEven = n % 2 == 0 ? 1 : 0\n    arr.append(arr[n - 1])\n   \
    \ arr.remove(at: arr.count - 1)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpfclsvxtg/tmpfclsvxtg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b742f4e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b742f1dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b742f1df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b742f1de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfclsvxtg                        0x000055f6ebb286c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b742f6d4460 __libc_start_main +
    245

    6    tmpfclsvxtg                        0x000055f6ebb28309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // Your code here\n    var results = [Int]()\n    for let level\
    \ = n / 2 {\n        results.append(level)\n    }\n    if n % 2 == 0 {\n     \
    \   results.append(n)\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp149lr6w_.swift:15:9: error: 'let' pattern cannot appear nested\
    \ in an already immutable context\n    for let level = n / 2 {\n        ^\n/tmp/tmp149lr6w_.swift:15:19:\
    \ error: expected 'in' after for-each pattern\n    for let level = n / 2 {\n \
    \                 ^\n/tmp/tmp149lr6w_.swift:15:19: error: expected Sequence expression\
    \ for for-each loop\n    for let level = n / 2 {\n                  ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n % 2 == 0 {\n        return make_pile_of_n(stones: n, level:\
    \ 0)\n    } else {\n        return make_pile_of_n(stones: n, level: 1)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpcu57fhv2.swift:14:16: error: cannot find 'make_pile_of_n' in scope\n\
    \        return make_pile_of_n(stones: n, level: 0)\n               ^~~~~~~~~~~~~~\n\
    /tmp/tmpcu57fhv2.swift:16:16: error: cannot find 'make_pile_of_n' in scope\n \
    \       return make_pile_of_n(stones: n, level: 1)\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let max = Int(sqrt(Double(n)))\n    var pile: [Int] = []\n \
    \   var evenPile: [Int] = []\n    var oddPile: [Int] = []\n\n    pile = Array(1...n).map{\
    \ $0 }\n    pile = pile.map{ $0 + 1 }\n\n    if n % 2 == 0 {\n        evenPile\
    \ = pile.map{ $0 + 2 * $0 }\n    }\n\n    if n % 2 != 0 {\n        oddPile = pile.map{\
    \ $0 + 2 * $0 + 1 }\n    }\n\n    return evenPile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpq7tdl6w8.swift:13:19: error: cannot find 'sqrt' in scope\n    let\
    \ max = Int(sqrt(Double(n)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int](repeating: 0, count: (n + 1) * 2)\n    if\
    \ n % 2 == 1 {\n        result[(n + 1) * 2 - 1] = n - 1\n    } else {\n      \
    \  result[(n + 1) * 2 - 1] = n\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpwm2qhn9a/tmpwm2qhn9a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5eae2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5eab21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5eab21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5eab207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm2qhn9a                        0x0000560c41fff4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002ad5eb016460 __libc_start_main +
    245

    6    tmpwm2qhn9a                        0x0000560c41fff129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var res = make([][Int](n), n)\n  var stones = n\n  var i = 0\n\
    \  for stones in res {\n    res[stones][i] = stones\n    stones %= 2\n    i +=\
    \ 1\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptrbtre5k.swift:13:13: error: cannot find 'make' in scope\n  var\
    \ res = make([][Int](n), n)\n            ^~~~\n/tmp/tmptrbtre5k.swift:13:20: error:\
    \ no exact matches in call to subscript \n  var res = make([][Int](n), n)\n  \
    \                 ^\n/tmp/tmptrbtre5k.swift:13:20: note: found candidate with\
    \ type '(Int) -> Any'\n  var res = make([][Int](n), n)\n                   ^\n\
    /tmp/tmptrbtre5k.swift:13:20: note: found candidate with type '(Range<Int>) ->\
    \ ArraySlice<Any>'\n  var res = make([][Int](n), n)\n                   ^\n/tmp/tmptrbtre5k.swift:13:20:\
    \ note: found candidate with type '(Int.Type) -> ArraySlice<Any>'\n  var res =\
    \ make([][Int](n), n)\n                   ^\n/tmp/tmptrbtre5k.swift:13:20: note:\
    \ found candidate with type '((UnboundedRange_) -> ()) -> ArraySlice<Any>'\n \
    \ var res = make([][Int](n), n)\n                   ^\n/tmp/tmptrbtre5k.swift:13:20:\
    \ error: cannot call value of non-function type 'Any'\n  var res = make([][Int](n),\
    \ n)\n                   ^\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [1]\n    for _ in 0 ..< n {\n        stones.append(stones.last!\
    \ + 2*stones.last!)\n        stones.popLast()\n    }\n    return stones\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpnln62rmu/tmpnln62rmu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569ba44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569b73bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569b73b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569b73a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnln62rmu                        0x000055cbfed6d6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b569bc30460 __libc_start_main +
    245

    6    tmpnln62rmu                        0x000055cbfed6d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [0]\n    }\n    if n == 2 {\n  \
    \      return [1, 3]\n    }\n    if n % 2 == 1 {\n        return make_a_pile(n\
    \ - 1) + [n - 1]\n    }\n    return make_a_pile(n - 1) + make_a_pile(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp62o7lgqs.swift:20:28: error: missing argument label 'n:' in call\n\
    \        return make_a_pile(n - 1) + [n - 1]\n                           ^\n \
    \                          n: \n/tmp/tmp62o7lgqs.swift:22:24: error: missing argument\
    \ label 'n:' in call\n    return make_a_pile(n - 1) + make_a_pile(n - 2)\n   \
    \                    ^\n                       n: \n/tmp/tmp62o7lgqs.swift:22:45:\
    \ error: missing argument label 'n:' in call\n    return make_a_pile(n - 1) +\
    \ make_a_pile(n - 2)\n                                            ^\n        \
    \                                    n: \n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [0]\n    var currentLevel = 1\n    for index in\
    \ 1..<n {\n        if index%2 == 0 {\n            result.append(currentLevel)\n\
    \        } else {\n            result.append(currentLevel+currentLevel/2)\n  \
    \      }\n        currentLevel = currentLevel + 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpjlti1pku/tmpjlti1pku.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71fa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71ca0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d71ca0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d71c9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjlti1pku                        0x000055562ac1c562 <unavailable> + 5474

    5    libc.so.6                          0x00002b5d72195460 __libc_start_main +
    245

    6    tmpjlti1pku                        0x000055562ac1c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    switch n {\n    case 1, 2 ... n where\
    \ n % 2 == 1:\n        pile = pile.append(n)\n    case 1, 2 ... n where n % 2\
    \ == 0:\n        pile = pile.append(n - 1)\n    case 1 ... n where n % 2 != 0:\n\
    \        pile = pile.append(n - 2)\n    default:\n        return pile\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5l5bc_wa.swift:16:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5l5bc_wa.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n - 1)\n               ~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp5l5bc_wa.swift:20:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n - 2)\n               ~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp5l5bc_wa.swift:17:10: warning: literal value is already handled by previous\
    \ pattern; consider removing it\n    case 1, 2 ... n where n % 2 == 0:\n     \
    \    ^\n/tmp/tmp5l5bc_wa.swift:15:10: note: first occurrence of identical literal\
    \ pattern is here\n    case 1, 2 ... n where n % 2 == 1:\n         ^\n/tmp/tmp5l5bc_wa.swift:15:21:\
    \ warning: 'where' only applies to the second pattern match in this case\n   \
    \ case 1, 2 ... n where n % 2 == 1:\n            ~~~~~~~ ^     ~~~~~~~~~~\n/tmp/tmp5l5bc_wa.swift:15:13:\
    \ note: disambiguate by adding a line break between them if this is desired\n\
    \    case 1, 2 ... n where n % 2 == 1:\n            ^\n/tmp/tmp5l5bc_wa.swift:15:10:\
    \ note: duplicate the 'where' on both patterns to check both patterns\n    case\
    \ 1, 2 ... n where n % 2 == 1:\n         ^\n           where n % 2 == 1\n/tmp/tmp5l5bc_wa.swift:17:21:\
    \ warning: 'where' only applies to the second pattern match in this case\n   \
    \ case 1, 2 ... n where n % 2 == 0:\n            ~~~~~~~ ^     ~~~~~~~~~~\n/tmp/tmp5l5bc_wa.swift:17:13:\
    \ note: disambiguate by adding a line break between them if this is desired\n\
    \    case 1, 2 ... n where n % 2 == 0:\n            ^\n/tmp/tmp5l5bc_wa.swift:17:10:\
    \ note: duplicate the 'where' on both patterns to check both patterns\n    case\
    \ 1, 2 ... n where n % 2 == 0:\n         ^\n           where n % 2 == 0\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 || n == 1 {\n        return [0]\n    }\n    if n %\
    \ 2 == 0 {\n        return make_a_pile(n: n - 1) + [n/2]\n    }\n    return make_a_pile(n:\
    \ n - 1) + [(n-1)/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy10qxkd1/tmpy10qxkd1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb42141c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb41e38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb41e38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb41e377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy10qxkd1                        0x0000558084421472 <unavailable> + 5234

    5    libc.so.6                          0x00002adb4232d460 __libc_start_main +
    245

    6    tmpy10qxkd1                        0x00005580844210b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr: [Int] = []\n    if n % 2 == 1 {\n        arr.append(n)\n\
    \    }\n    let low: Int = n / 2\n    for n in 1...low {\n        if n % 2 ==\
    \ 0 {\n            arr.append(n)\n        } else {\n            let high: Int\
    \ = n * 3 + 1\n            for num in 2...high {\n                arr.append(num)\n\
    \            }\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp9upjl0so/tmp9upjl0so.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4b02afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4affa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4affa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4affa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9upjl0so                        0x0000561e51b52562 <unavailable> + 5474

    5    libc.so.6                          0x00002ae4b049b460 __libc_start_main +
    245

    6    tmp9upjl0so                        0x0000561e51b521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    if n < 0 {\n        return arr\n    }\n\
    \    if n&1 == 0 {\n        arr.append(n)\n    }\n    if n&1 == 1 {\n        arr.append(n\
    \ + 1)\n    }\n    for i in  (0...Int(sqrt(n))).reversed() {\n        if i % 2\
    \ == 0 {\n            arr.append(n * (n + 1))\n        } else {\n            arr.append(n\
    \ * (n - 1 + Int(Double(n) / 2)))\n        }\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpsz85bixc.swift:23:24: error: cannot find 'sqrt' in scope\n    for\
    \ i in  (0...Int(sqrt(n))).reversed() {\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = make([]Int, n)\n    var pile = [Int](n + 1)\n \
    \   pile[0] = 1\n    for i := 1; i < n; i++ {\n        if n%2 == 0 {\n       \
    \     pile[i] = pile[i-2] + 2\n        } else {\n            pile[i] = pile[i-1]\
    \ + 1\n        }\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpdq5jwupw.swift:13:25: error: expected ',' separator\n    var stones\
    \ = make([]Int, n)\n                        ^\n                        ,\n/tmp/tmpdq5jwupw.swift:16:12:\
    \ error: expected type\n    for i := 1; i < n; i++ {\n           ^\n         \
    \   <#type#>\n/tmp/tmpdq5jwupw.swift:16:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 1; i < n; i++ {\n           ^\n/tmp/tmpdq5jwupw.swift:16:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 1; i < n;\
    \ i++ {\n           ^\n/tmp/tmpdq5jwupw.swift:13:18: error: cannot find 'make'\
    \ in scope\n    var stones = make([]Int, n)\n                 ^~~~\n/tmp/tmpdq5jwupw.swift:14:22:\
    \ error: missing argument label 'arrayLiteral:' in call\n    var pile = [Int](n\
    \ + 1)\n                     ^\n                     arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979174
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var stones: Int = 0\n  var pile: [Int] = []\n  var currentLevel:\
    \ Int = 0\n  for level in stride(from: 1, to: n, by: 1) {\n    if level % 2 ==\
    \ 0 {\n      currentLevel = level\n    } else {\n      pile[currentLevel] = level\n\
    \      stones += 2 * level\n    }\n  }\n  return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b361c572c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b361c269561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b361c269286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b361c26913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b361c268bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b361c0687ec <unavailable> + 186348

    6    tmpdehvowq9                        0x000055df06795d47 <unavailable> + 7495

    7    tmpdehvowq9                        0x000055df067955ab <unavailable> + 5547

    8    libc.so.6                          0x00002b361c75e460 __libc_start_main +
    245

    9    tmpdehvowq9                        0x000055df067952c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 1 else {\n        return []\n    }\n    \n    let\
    \ array = [Int]()\n    if n % 2 == 1 {\n        for j in 0..<n / 2 {\n       \
    \     array.append(j + 1)\n        }\n    } else {\n        for i in 0..<n / 2\
    \ {\n            array.append(i)\n        }\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9ipuzmui.swift:20:19: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n            array.append(j + 1)\n      \
    \      ~~~~~ ^\n/tmp/tmp9ipuzmui.swift:17:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let array = [Int]()\n    ^~~\n    var\n/tmp/tmp9ipuzmui.swift:24:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.append(i)\n            ~~~~~ ^\n/tmp/tmp9ipuzmui.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let array = [Int]()\n  \
    \  ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979174
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    switch n {\n    case 3:\n        return [3]\n    case 4:\n \
    \       return [3] + [4, 5]\n    case 5:\n        return [3] + [4, 5] + [6, 7]\n\
    \    case 6:\n        return [3] + [4, 5] + [6, 7] + [8, 9]\n    case 7:\n   \
    \     return [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11]\n    case 8:\n        return\
    \ [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11] + [12, 13]\n    case 9:\n        return\
    \ [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11] + [12, 13] + [14, 15]\n    case 10:\n\
    \        return [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11] + [12, 13] + [14, 15]\
    \ + [16, 17]\n    case 11:\n        return [3] + [4, 5] + [6, 7] + [8, 9] + [10,\
    \ 11] + [12, 13] + [14, 15] + [16, 17] + [18, 19]\n    case 12:\n        return\
    \ [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11] + [12, 13] + [14, 15] + [16, 17] +\
    \ [18, 19] + [20, 21]\n    case 13:\n        return [3] + [4, 5] + [6, 7] + [8,\
    \ 9] + [10, 11] + [12, 13] + [14, 15] + [16, 17] + [18, 19] + [20, 21] + [22,\
    \ 23]\n    case 14:\n        return [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11]\
    \ + [12, 13] + [14, 15] + [16, 17] + [18, 19] + [20, 21] + [22, 23] + [24, 25]\n\
    \    case 15:\n        return [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11] + [12,\
    \ 13] + [14, 15] + [16, 17] + [18, 19] + [20, 21] + [22, 23] + [24, 25] + [26,\
    \ 27]\n    case 16:\n        return [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11]\
    \ + [12, 13] + [14, 15] + [16, 17] + [18, 19] + [20, 21] + [22, 23] + [24, 25]\
    \ + [26, 27] + [28, 29]\n    case 17:\n        return [3] + [4, 5] + [6, 7] +\
    \ [8, 9] + [10, 11] + [12, 13] + [14, 15] + [16, 17] + [18, 19] + [20, 21] + [22,\
    \ 23] + [24, 25] + [26, 27] + [28, 29] + [30, 31]\n    case 18:\n        return\
    \ [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11] + [12, 13] + [14, 15] + [16, 17] +\
    \ [18, 19] + [20, 21] + [22, 23] + [24, 25] + [26, 27] + [28, 29] + [30, 31] +\
    \ [32, 33]\n    case 19:\n        return [3] + [4, 5] + [6, 7] + [8, 9] + [10,\
    \ 11] + [12, 13] + [14, 15] + [16, 17] + [18, 19] + [20, 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 15 (use -v to see invocation)\n\
    /tmp/tmpdfi8bss0.swift:47:110: error: expected ']' in container literal expression\n\
    \        return [3] + [4, 5] + [6, 7] + [8, 9] + [10, 11] + [12, 13] + [14, 15]\
    \ + [16, 17] + [18, 19] + [20, 2\n                                           \
    \                                                                  ^\n/tmp/tmpdfi8bss0.swift:47:104:\
    \ note: to match this opening '['\n        return [3] + [4, 5] + [6, 7] + [8,\
    \ 9] + [10, 11] + [12, 13] + [14, 15] + [16, 17] + [18, 19] + [20, 2\n       \
    \                                                                            \
    \                    ^\n/tmp/tmpdfi8bss0.swift:67:61: error: expected '}' at end\
    \ of brace statement\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20,\
    \ 22])\n                                                            ^\n/tmp/tmpdfi8bss0.swift:12:35:\
    \ note: to match this opening '{'\nfunc make_a_pile(n: Int) -> [Int] {\n     \
    \                             ^\n"
  stdout: ''
  timestamp: 1660052772
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 || n == 1 {\n        return []\n    }\n\n    var firstLevelCount\
    \ = n\n    var secondLevelCount = n - 1\n    var thirdLevelCount = n - 2\n\n \
    \   var firstLevel = [Int]()\n    var secondLevel = [Int]()\n    var thirdLevel\
    \ = [Int]()\n\n    if firstLevelCount % 2 == 0 {\n        firstLevel = [Int](repeating:\
    \ firstLevelCount, count: secondLevelCount)\n        secondLevel = [Int](repeating:\
    \ secondLevelCount, count: thirdLevelCount)\n    } else {\n        firstLevel\
    \ = [Int](repeating: firstLevelCount, count: thirdLevelCount)\n        secondLevel\
    \ = [Int](repeating: secondLevelCount, count: firstLevelCount)\n    }\n\n    return\
    \ firstLevel + secondLevel + thirdLevel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpozgu5ige/tmpozgu5ige.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fa3192c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fa318fbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fa318fbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fa318fbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozgu5ige                        0x000055e9c0f31532 <unavailable> + 5426

    5    libc.so.6                          0x00007fa318ab4460 __libc_start_main +
    245

    6    tmpozgu5ige                        0x000055e9c0f31179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n\n    // Start with the first level.\n \
    \   pile = pile.append(n).sort()\n\n    if n % 2 == 0 {\n        // Even length\
    \ piles just double the number of stones.\n        pile = pile.append(n).sort()\n\
    \    }\n\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpo0_ve1ip.swift:16:27: error: value of tuple type '()' has no member\
    \ 'sort'\n    pile = pile.append(n).sort()\n           ~~~~~~~~~~~~~~ ^~~~\n/tmp/tmpo0_ve1ip.swift:20:31:\
    \ error: value of tuple type '()' has no member 'sort'\n        pile = pile.append(n).sort()\n\
    \               ~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    let minValue = n / 2\n    var temp:\
    \ Int\n    if isEven(n) {\n        for i in 1..minValue {\n            temp =\
    \ 2 * i\n            if n % 2 == 0 {\n                temp += temp\n         \
    \   }\n            result.append(temp)\n        }\n    } else {\n        for i\
    \ in 1..minValue {\n            temp = 2 * i + 1\n            if n % 2 == 1 {\n\
    \                temp += temp\n            }\n            result.append(temp)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjayeh3tx.swift:16:8: error: cannot find 'isEven' in scope\n   \
    \ if isEven(n) {\n       ^~~~~~\n/tmp/tmpjayeh3tx.swift:17:19: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n        for i in 1..minValue {\n\
    \                  ^~\n                  ...\n/tmp/tmpjayeh3tx.swift:25:19: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n        for i in 1..minValue\
    \ {\n                  ^~\n                  ...\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result: [Int] = []\n    var current = 1\n    for _ in 0..<n\
    \ {\n        current = current + 2 % 2\n        result.append(current)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpt8iccuo9/tmpt8iccuo9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f4017536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f401722db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f401722d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f401722c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt8iccuo9                        0x000055d4fab60562 <unavailable> + 5474

    5    libc.so.6                          0x00007f4016d23460 __libc_start_main +
    245

    6    tmpt8iccuo9                        0x000055d4fab601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [0]\n    for i in 1..n*2 {\n        if n%2 == 0 {\n\
    \            pile[0]++\n        } else {\n            pile[pile.count-1]++\n \
    \       }\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmprfujk7du.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n*2 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return sequence(by: n) { index in\n        return index / 2\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpg2y8_nrn.swift:13:12: error: no exact matches in call to global\
    \ function 'sequence'\n    return sequence(by: n) { index in\n           ^\n/tmp/tmpg2y8_nrn.swift:13:12:\
    \ note: found candidate with type '(Int, @escaping (Int) -> Int?) -> UnfoldSequence<Int,\
    \ (Int?, Bool)>'\n    return sequence(by: n) { index in\n           ^\n/tmp/tmpg2y8_nrn.swift:13:12:\
    \ note: found candidate with type '(Int, @escaping (inout Int) -> Int?) -> UnfoldSequence<Int,\
    \ Int>'\n    return sequence(by: n) { index in\n           ^\n/tmp/tmpg2y8_nrn.swift:13:12:\
    \ error: no 'sequence' candidates produce the expected contextual result type\
    \ '[Int]'\n    return sequence(by: n) { index in\n           ^\nSwift.sequence:1:24:\
    \ note: 'sequence(first:next:)' produces 'UnfoldSequence<Int, (Int?, Bool)>',\
    \ not the expected contextual result type '[Int]'\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\nSwift.sequence:1:24: note: 'sequence(state:next:)' produces 'UnfoldSequence<Int,\
    \ Int>', not the expected contextual result type '[Int]'\n@inlinable public func\
    \ sequence<T, State>(state: State, next: @escaping (inout State) -> T?) -> UnfoldSequence<T,\
    \ State>\n                       ^\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile : [Int] = [Int(n)]\n    var count : [Int] = [Int(n)]\n\
    \    \n    if n%2 == 1 {\n        for count in 0..<n-1 {\n            count +=\
    \ Int(n) - Int(count)\n            \n            pile += [count]\n        }\n\
    \    } else {\n        for count in 0..<n-1 {\n            count += Int(n) - Int(count)\n\
    \            \n            pile += [count]\n        }\n    }\n    \n    return\
    \ pile \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp3fiea_u1.swift:18:19: error: left side of mutating operator isn't\
    \ mutable: 'count' is a 'let' constant\n            count += Int(n) - Int(count)\n\
    \            ~~~~~ ^\n/tmp/tmp3fiea_u1.swift:24:19: error: left side of mutating\
    \ operator isn't mutable: 'count' is a 'let' constant\n            count += Int(n)\
    \ - Int(count)\n            ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // n is positive\n    if n <= 0 {\n        return []\n    }\n\
    \n    // n is even\n    if n % 2 == 0 {\n        var num_stones: [Int] = [0]\n\
    \        var i = 2\n        while i < n {\n            num_stones.append(num_stones[i]\
    \ * 2)\n            i += 2\n        }\n        return num_stones\n    }\n\n  \
    \  // n is odd\n    var num_stones: [Int] = [0]\n    var i = 1\n    while i <\
    \ n {\n        num_stones.append(num_stones[i] * 2 + num_stones[i+1])\n      \
    \  i += 2\n    }\n    return num_stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f595fd18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f595fa0f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f595fa0f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f595fa0f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f595fa0ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f595ffbce83 <unavailable> + 188035

    6    tmp_218buli                        0x0000559cfe68db65 <unavailable> + 7013

    7    tmp_218buli                        0x0000559cfe68d3fb <unavailable> + 5115

    8    libc.so.6                          0x00007f595f505460 __libc_start_main +
    245

    9    tmp_218buli                        0x0000559cfe68d119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(stride(from: n, through: 0, by: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp9j1mg27v/tmp9j1mg27v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f470998dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f4709684b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f4709684988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f47096837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9j1mg27v                        0x000056142c211542 <unavailable> + 5442

    5    libc.so.6                          0x00007f470917a460 __libc_start_main +
    245

    6    tmp9j1mg27v                        0x000056142c211189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int](count: n, repeatedValue: 0)\n    var level\
    \ = [Int]()\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last!)\n        }\n\
    \        level.append(stones.last!)\n        stones.removeLast()\n    }\n    return\
    \ level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplix1k8ix.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var stones = [Int](count: n, repeatedValue: 0)\n                 ^\n/tmp/tmplix1k8ix.swift:13:18:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var stones = [Int](count: n, repeatedValue: 0)\n                 ^\n\
    /tmp/tmplix1k8ix.swift:13:18: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var stones = [Int](count: n, repeatedValue:\
    \ 0)\n                 ^\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr: [Int] = []\n    var currentLevel = 0\n    var currentValue\
    \ = 0\n\n    for _ in 0..<n {\n        currentLevel = n % 2\n        currentValue\
    \ = n % currentLevel\n        n = n / currentLevel\n\n        if currentValue\
    \ % 2 == 0 {\n            currentValue += 1\n        }\n        arr.append(currentValue)\n\
    \    }\n\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpad2tewvl.swift:20:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / currentLevel\n        ^\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var i = 0\n    if n % 2 == 1 {\n     \
    \   stones = stones + [n - 1]\n    } else {\n        stones = stones + [n]\n \
    \   }\n    for _ in 0..<(n - 1) / 2 {\n        stones = stones + [n]\n    }\n\
    \    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp9gfdej2_/tmp9gfdej2_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f22dc8a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f22dc5a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f22dc5a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f22dc59f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9gfdej2_                        0x000055d664d1a562 <unavailable> + 5474

    5    libc.so.6                          0x00007f22dc096460 __libc_start_main +
    245

    6    tmp9gfdej2_                        0x000055d664d1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // base case\n    if n == 0 {\n        return []\n    }\n\n\
    \    // recursion case\n    let result = [Int]()\n    var i = 0\n    for _ in\
    \ 0..<n {\n        if n % 2 == 0 {\n            result.append(((2 * n) + 1) /\
    \ 2)\n        } else {\n            result.append(n / 2)\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpr51bmoqq.swift:23:20: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n            result.append(((2 * n) + 1)\
    \ / 2)\n            ~~~~~~ ^\n/tmp/tmpr51bmoqq.swift:19:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let result = [Int]()\n    ^~~\n    var\n/tmp/tmpr51bmoqq.swift:25:20:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \            result.append(n / 2)\n            ~~~~~~ ^\n/tmp/tmpr51bmoqq.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [Int]()\n \
    \   ^~~\n    var\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).filter { $0 % 2 == 0 }.map { $0 + n }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp2wg28yy0/tmp2wg28yy0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fb4cdaf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fb4cd7eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fb4cd7ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fb4cd7e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wg28yy0                        0x0000559dbb6975f2 <unavailable> + 5618

    5    libc.so.6                          0x00007fb4cd2e0460 __libc_start_main +
    245

    6    tmp2wg28yy0                        0x0000559dbb697239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let stack = make_stack(n)\n    var results = [Int]()\n    for\
    \ _ in 0..<n {\n        if stack.head % 2 == 0 {\n            results.append(stack.next)\n\
    \        } else {\n            results.append(stack.next/2)\n        }\n    }\n\
    \    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpp0jap607.swift:13:17: error: cannot find 'make_stack' in scope\n\
    \    let stack = make_stack(n)\n                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return [0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpinm1bwl4/tmpinm1bwl4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff5cb681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff5cb378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff5cb378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff5cb3777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinm1bwl4                        0x0000559d9af6c382 <unavailable> + 4994

    5    libc.so.6                          0x00007ff5cae6e460 __libc_start_main +
    245

    6    tmpinm1bwl4                        0x0000559d9af6bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [0]\n    }\n\n    // 1. Create a\
    \ pile of n-1 levels, where we have the previous level n-1\n    // stones, next\
    \ level n-2 stones, and so on\n    // 2. The first level's number of stones are\
    \ just n\n    // 3. The last level's number of stones are 2n-1\n    let stones\
    \ = make_a_pile(n-1)\n\n    // 4. Find the next even or odd number to be the new\
    \ last level's number of\n    // stones\n    let last_level = stones.last!\n \
    \   let next_level_number = (n % 2 == 0) ? last_level+2 : last_level\n\n    //\
    \ 5. Append the new last level's number of stones to our pile of stones\n    stones.append(next_level_number)\n\
    \n    // 6. Return the pile of stones\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfr8eu9tl.swift:21:30: error: missing argument label 'n:' in call\n\
    \    let stones = make_a_pile(n-1)\n                             ^\n         \
    \                    n: \n"
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    \n    // base case\n    if n == 1 {\n        return [1, 1, 1]\n\
    \    }\n    \n    // helper function which calculates odd/even numbers based on\
    \ input\n    let getOddOrEven = { n: Int in\n        if n % 2 == 0 {\n       \
    \     return n\n        } else {\n            return 2 * n + 1\n        }\n  \
    \  }\n    \n    // number of stones in each level\n    var numberOfStones: [Int]\
    \ = []\n    \n    // number of stones in current level\n    var currentNumberOfStones\
    \ = 0\n    \n    // loop through each level\n    for i in 1...n {\n        //\
    \ number of stones in next level\n        currentNumberOfStones = getOddOrEven(i)\n\
    \        numberOfStones.append(currentNumberOfStones)\n    }\n    \n    // return\
    \ number of stones in each level\n    return numberOfStones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpb9y6o1e7.swift:20:27: error: consecutive statements on a line must\
    \ be separated by ';'\n    let getOddOrEven = { n: Int in\n                  \
    \        ^\n                          ;\n/tmp/tmpb9y6o1e7.swift:20:27: error:\
    \ expected expression\n    let getOddOrEven = { n: Int in\n                  \
    \        ^\n/tmp/tmpb9y6o1e7.swift:20:26: warning: expression of type 'Int' is\
    \ unused\n    let getOddOrEven = { n: Int in\n                         ^\n/tmp/tmpb9y6o1e7.swift:37:46:\
    \ error: argument passed to call that takes no arguments\n        currentNumberOfStones\
    \ = getOddOrEven(i)\n                                            ~^~\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var count = 0\n    var pile = [Int]()\n    for i in 0 ..< n\
    \ {\n        if n % 2 == 1 {\n            pile = pile.append(i)\n            count\
    \ += i + 1\n        }\n        if n % 2 == 0 {\n            pile = pile.append(i)\n\
    \            count += i + 1\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjcqhls4w.swift:17:25: error: cannot assign value of type '()' to\
    \ type '[Int]'\n            pile = pile.append(i)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmpjcqhls4w.swift:21:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(i)\n                   ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0...n).map { i in\n        n & 1 == 0 ? i + 1 : i +\
    \ 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpldtva9bz/tmpldtva9bz.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f8fc9ccbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f8fc99c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f8fc99c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f8fc99c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldtva9bz                        0x000056043996e552 <unavailable> + 5458

    5    libc.so.6                          0x00007f8fc94b8460 __libc_start_main +
    245

    6    tmpldtva9bz                        0x000056043996e199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).map {\n        switch n % 2 {\n        case 0:\
    \ return $0\n        case 1: return $0 + $0 + 1\n        }\n    }.map { $0 * 2\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\n\
    assert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7,\
    \ 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n:\
    \ 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp069r8hd3.swift:14:9: error: switch must be exhaustive\n       \
    \ switch n % 2 {\n        ^\n/tmp/tmp069r8hd3.swift:14:9: note: do you want to\
    \ add a default clause?\n        switch n % 2 {\n        ^\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int](repeating: 0, count: n + 1)\n    if n == 1 {\n\
    \        return arr\n    }\n    let nextOdd = (n + 1) &* (n &* (n - 1)) &* (n\
    \ &* (n - 2))\n    let nextEven = n &* (n &* (n - 1) &* (n - 2))\n    arr[n] =\
    \ nextOdd\n    arr[n + 1] = nextEven\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f3f43250c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f3f42f47561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f3f42f47286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f3f42f4713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f3f42f46bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f3f434f47ec <unavailable> + 186348

    6    tmp5hk6pjrq                        0x000055c392efaacd <unavailable> + 6861

    7    tmp5hk6pjrq                        0x000055c392efa37b <unavailable> + 4987

    8    libc.so.6                          0x00007f3f42a3d460 __libc_start_main +
    245

    9    tmp5hk6pjrq                        0x000055c392efa099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var level = [Int]()\n    if n <= 0 {\n        return level\n\
    \    }\n    if n & 1 == 0 {\n        level.append(n + 1)\n    }\n    if n > 1\
    \ {\n        level.append(n)\n    }\n    level.append(n - 1)\n    return level\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp1mrkbeyr/tmp1mrkbeyr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f91030c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f9102db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f9102db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f9102db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mrkbeyr                        0x0000555cd7784442 <unavailable> + 5186

    5    libc.so.6                          0x00007f91028ae460 __libc_start_main +
    245

    6    tmp1mrkbeyr                        0x0000555cd7784089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    \n    for _ in 1...n {\n        pile.append(1)\n\
    \    }\n    \n    if n%2 == 0 {\n        pile[(n - 1) / 2] = pile[(n - 1) / 2]\
    \ * 2\n    } else {\n        pile[(n - 1) / 2] = pile[(n - 1) / 2] * 3\n    }\n\
    \    \n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpb7c_d05g/tmpb7c_d05g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f74e24bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f74e21b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f74e21b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f74e21b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7c_d05g                        0x000056447ea6d612 <unavailable> + 5650

    5    libc.so.6                          0x00007f74e1cab460 __libc_start_main +
    245

    6    tmpb7c_d05g                        0x000056447ea6d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n\n    var evenLevel = n / 2\n\n    if\
    \ n % 2 != 0 {\n        evenLevel += 1\n    }\n\n    for _ in 0..<n {\n      \
    \  if evenLevel % 2 == 0 {\n            stones.append(evenLevel)\n        } else\
    \ {\n            stones.append(oddLevel)\n        }\n\n        evenLevel = evenLevel\
    \ / 2\n        oddLevel = oddLevel + oddLevel\n    }\n\n    return stones\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpkfljw_v1.swift:25:27: error: cannot find 'oddLevel' in scope\n\
    \            stones.append(oddLevel)\n                          ^~~~~~~~\n/tmp/tmpkfljw_v1.swift:29:9:\
    \ error: cannot find 'oddLevel' in scope\n        oddLevel = oddLevel + oddLevel\n\
    \        ^~~~~~~~\n/tmp/tmpkfljw_v1.swift:29:20: error: cannot find 'oddLevel'\
    \ in scope\n        oddLevel = oddLevel + oddLevel\n                   ^~~~~~~~\n\
    /tmp/tmpkfljw_v1.swift:29:31: error: cannot find 'oddLevel' in scope\n       \
    \ oddLevel = oddLevel + oddLevel\n                              ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones_array = [Int]()\n    var stones_array_index = 0\n\
    \    stones_array.append(0)\n    if n % 2 == 1 {\n        for j in 0..<n {\n \
    \           if j % 2 == 1 {\n                stones_array[stones_array_index]\
    \ = j + 1\n                stones_array_index += 1\n            } else {\n   \
    \             stones_array.append(0)\n                stones_array_index = 0\n\
    \            }\n        }\n    } else {\n        for j in 0..<n {\n          \
    \  if j % 2 == 0 {\n                stones_array[stones_array_index] = j + 1\n\
    \                stones_array_index += 1\n            } else {\n             \
    \   stones_array.append(0)\n                stones_array_index = 0\n         \
    \   }\n        }\n    }\n    return stones_array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp7_z2x0og/tmp7_z2x0og.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f93138f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f93135e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f93135e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f93135e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_z2x0og                        0x000055c6b7e5d612 <unavailable> + 5650

    5    libc.so.6                          0x00007f93130dd460 __libc_start_main +
    245

    6    tmp7_z2x0og                        0x000055c6b7e5d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    \n    var pile = [Int]()\n    if n % 2 == 0 {\n        for i\
    \ in 0..(n-1){\n            pile.append(Int(floor((i+1)/2))+1)\n        }\n  \
    \      pile.append(n+1)\n    } else {\n        for i in 0..(n-1){\n          \
    \  pile.append(Int(floor((i+1)/2))+1)\n        }\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpohhd99_f.swift:16:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 0..(n-1){\n                  ^~\n    \
    \              ...\n/tmp/tmpohhd99_f.swift:21:19: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n        for i in 0..(n-1){\n           \
    \       ^~\n                  ...\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    if n % 2 == 0 {\n        stones = stones\
    \ + [Int((n + 1) / 2)]\n    } else {\n        stones = stones + [Int((n - 1) /\
    \ 2)]\n    }\n    for i in 1...n {\n        if i % 2 == 0 {\n            stones\
    \ = stones + [Int((i + 1)*2)]\n        } else {\n            stones = stones +\
    \ [Int((i + 1)*1.5)]\n        }\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpnvk0he7e.swift:23:43: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n            stones = stones + [Int((i\
    \ + 1)*1.5)]\n                                   ~~~~~~~^~~~\n/tmp/tmpnvk0he7e.swift:23:43:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n            stones = stones + [Int((i + 1)*1.5)]\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var count = 0\n    var result = [Int]()\n\n    for num in 1...n\
    \ {\n        if num % 2 == 0 {\n            result.append(num)\n        } else\
    \ {\n            result.append(num / 2)\n        }\n        count = count + 1\n\
    \    }\n    result.append(count)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpr6h21wsi/tmpr6h21wsi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc957176c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc956e6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc956e6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc956e6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6h21wsi                        0x0000564f172ad5c2 <unavailable> + 5570

    5    libc.so.6                          0x00007fc956963460 __libc_start_main +
    245

    6    tmpr6h21wsi                        0x0000564f172ad209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // write your code in JavaScript (for function make_a_pile)\
    \ here\n    var tempArray = [Int](repeating: 0, count: n+1)\n    for i in 0..<n+1\
    \ {\n        if i % 2 == 0 {\n            tempArray[i] = tempArray[i+1] + 2\n\
    \        } else {\n            tempArray[i] = tempArray[i+1] + 1\n        }\n\
    \    }\n    return tempArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f1932907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f19325fe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f19325fe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f19325fe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f19325fdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f1932babe83 <unavailable> + 188035

    6    tmpjevphqui                        0x0000558520d6cd67 <unavailable> + 7527

    7    tmpjevphqui                        0x0000558520d6c54b <unavailable> + 5451

    8    libc.so.6                          0x00007f19320f4460 __libc_start_main +
    245

    9    tmpjevphqui                        0x0000558520d6c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    arr.append(n)\n    if n & 1 == 0 {\n\
    \        for i in 1..<n {\n            if i % 2 != 0 {\n                arr.append(i)\n\
    \            } else {\n                arr.append(i + 1)\n            }\n    \
    \    }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp6mepk_z9/tmp6mepk_z9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f4aad43cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f4aad133b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f4aad133988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f4aad1327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mepk_z9                        0x0000562e1fde55c2 <unavailable> + 5570

    5    libc.so.6                          0x00007f4aacc29460 __libc_start_main +
    245

    6    tmp6mepk_z9                        0x0000562e1fde5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n\n    if n % 2 == 1 {\n        stones.append(n)\n\
    \    }\n    else {\n        for i in 1..<n {\n            if i % 2 == 0 {\n  \
    \              stones.append(i + 1)\n            }\n            else {\n     \
    \           stones.append(i)\n            }\n        }\n    }\n\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp2aa54crp/tmp2aa54crp.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f805860ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f8058301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f8058301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f80583007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2aa54crp                        0x000055befbcbf5c2 <unavailable> + 5570

    5    libc.so.6                          0x00007f8057df7460 __libc_start_main +
    245

    6    tmp2aa54crp                        0x000055befbcbf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = 1\n    if n % 2 == 0\
    \ {\n        result = result + [current]\n        n = n / 2\n        current =\
    \ current * 3 + 1\n    }\n    for _ in 1...n {\n        current = current * 3\
    \ + 1\n        result = result + [current]\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmph05yo06s.swift:17:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1660052659
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    let count = n * 2\n\
    \    var stones = count - 1\n    if n % 2 == 0 {\n        stones += count / 2\n\
    \    }\n    return [stones]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpyq8i7t5c/tmpyq8i7t5c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc6ab357c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc6ab04eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc6ab04e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc6ab04d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyq8i7t5c                        0x00005567d5c94422 <unavailable> + 5154

    5    libc.so.6                          0x00007fc6aab44460 __libc_start_main +
    245

    6    tmpyq8i7t5c                        0x00005567d5c94069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [0]\n    var count = 0\n    if n % 2 == 0 {\n    \
    \    arr.push(n - 1)\n    } else {\n        for index in stride(from: 2, to: n,\
    \ by: 2) {\n            if index % 2 == 0 {\n                arr.push(index -\
    \ 1)\n            }\n        }\n    }\n    for _ in stride(from: count, to: arr.count,\
    \ by: 1) {\n        count += 1\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptee2u971.swift:16:13: error: value of type '[Int]' has no member\
    \ 'push'\n        arr.push(n - 1)\n        ~~~ ^~~~\n/tmp/tmptee2u971.swift:20:21:\
    \ error: value of type '[Int]' has no member 'push'\n                arr.push(index\
    \ - 1)\n                ~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    var result = [Int](n\
    \ + 1)\n    if n % 2 == 1 {\n        result[0] = 1\n    }\n    for i : Int in\
    \ 0 ... n {\n        if i % 2 == 0 {\n            result[i + 1] = result[i] +\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp4ehyfyp8.swift:16:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var result = [Int](n + 1)\n                       ^\n         \
    \              arrayLiteral: \n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [0]\n    for _ in 1...n {\n        if n&1 != 0 {\n\
    \            n = n + 1\n            res.append(0)\n        } else {\n        \
    \    n = (n + 1) / 2\n            res[n] = 1\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxznh00h0.swift:16:13: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n            n = n + 1\n            ^\n/tmp/tmpxznh00h0.swift:19:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = (n +\
    \ 1) / 2\n            ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return []\n    }\n    \n    var result:\
    \ [Int] = []\n    \n    if n % 2 == 0 {\n        result.append(n)\n        return\
    \ result + make_a_pile(n: n - 1)\n    }\n    \n    var remain = n - 1\n    while\
    \ remain > 0 {\n        let nextOdd = remain/2 + remain%2\n        if nextOdd\
    \ > 0 {\n            result.append(nextOdd)\n        }\n        remain = remain/2\
    \ - remain%2\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp8kyows7z/tmp8kyows7z.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f249dcbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f249d9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f249d9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f249d9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kyows7z                        0x000055b68e7284d2 <unavailable> + 5330

    5    libc.so.6                          0x00007f249d4aa460 __libc_start_main +
    245

    6    tmp8kyows7z                        0x000055b68e728119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [0]\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(result[i-1] + 2)\n        } else {\n        \
    \    result.append(result[i-1] + 1)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp7tfgmgok/tmp7tfgmgok.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f298a8f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f298a5ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f298a5eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f298a5ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7tfgmgok                        0x00005588847e95c2 <unavailable> + 5570

    5    libc.so.6                          0x00007f298a0e1460 __libc_start_main +
    245

    6    tmp7tfgmgok                        0x00005588847e9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var i = 0\n    var levels: [Int] = []\n    while i < n {\n \
    \       if isOdd(i) {\n            levels.append(i + 1)\n            i += 2\n\
    \        } else {\n            levels.append(i)\n            i += 1\n        }\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp268vz8r2.swift:16:12: error: cannot find 'isOdd' in scope\n   \
    \     if isOdd(i) {\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).map({ i in\n        return i % 2 == 0 ? n : n\
    \ * 2 + 1\n    }).map { $0 / 2 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppome1zap/tmppome1zap.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f45f70d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f45f6dcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f45f6dcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f45f6dce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppome1zap                        0x000055d497c24592 <unavailable> + 5522

    5    libc.so.6                          0x00007f45f68c5460 __libc_start_main +
    245

    6    tmppome1zap                        0x000055d497c241d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return []\n    }\n    var res: [Int] =\
    \ []\n    res += make_a_pile(n: n - 1)\n    if n & 1 == 0 {\n        res += [n\
    \ / 2, n / 2]\n    } else {\n        res += [n / 2, n / 2 + 1]\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmphksnzn5_/tmphksnzn5_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f5988c87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f598897eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f598897e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f598897d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphksnzn5_                        0x000055d2fbd8c482 <unavailable> + 5250

    5    libc.so.6                          0x00007f5988474460 __libc_start_main +
    245

    6    tmphksnzn5_                        0x000055d2fbd8c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return repeat(n).map {\n        if isOdd(n) {\n            return\
    \ Int($0 + 1)\n        } else {\n            return Int($0 + 0)\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6rbjm7j1.swift:13:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    return repeat(n).map {\n          ^\n          ;\n\
    /tmp/tmp6rbjm7j1.swift:13:18: error: expected '{' after 'repeat'\n    return repeat(n).map\
    \ {\n                 ^\n/tmp/tmp6rbjm7j1.swift:15:24: error: anonymous closure\
    \ argument not contained in a closure\n            return Int($0 + 1)\n      \
    \                 ^\n/tmp/tmp6rbjm7j1.swift:17:24: error: anonymous closure argument\
    \ not contained in a closure\n            return Int($0 + 0)\n               \
    \        ^\n/tmp/tmp6rbjm7j1.swift:19:5: error: expected 'while' after body of\
    \ 'repeat' statement\n    }\n    ^\n/tmp/tmp6rbjm7j1.swift:13:5: error: non-void\
    \ function should return a value\n    return repeat(n).map {\n    ^\n/tmp/tmp6rbjm7j1.swift:14:12:\
    \ error: cannot find 'isOdd' in scope\n        if isOdd(n) {\n           ^~~~~\n\
    /tmp/tmp6rbjm7j1.swift:15:20: error: cannot convert return expression of type\
    \ 'Int' to return type '[Int]'\n            return Int($0 + 1)\n             \
    \      ^~~~~~~~~~~\n/tmp/tmp6rbjm7j1.swift:17:20: error: cannot convert return\
    \ expression of type 'Int' to return type '[Int]'\n            return Int($0 +\
    \ 0)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    if n == 0 {\n    \
    \    return [n]\n    }\n\n    let max = (2 * n) - 1\n    \n    if n % 2 == 1 {\n\
    \        let left = make_a_pile(n - 1)\n        let right = make_a_pile(1)\n \
    \       var res = make(count: max, repeatedValue: 0)\n        for i in 0 ..< max\
    \ {\n            var val = left[i] + right[i]\n            if val > n {\n    \
    \            val = n\n            }\n            res[i] = val\n        }\n   \
    \     return res\n    } else {\n        let left = make_a_pile(n - 1)\n      \
    \  var res = make(count: max, repeatedValue: 0)\n        for i in 0 ..< max {\n\
    \            res[i] = left[i]\n        }\n        return res\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpddrsilei.swift:23:32: error: missing argument label 'n:' in call\n\
    \        let left = make_a_pile(n - 1)\n                               ^\n   \
    \                            n: \n/tmp/tmpddrsilei.swift:24:33: error: missing\
    \ argument label 'n:' in call\n        let right = make_a_pile(1)\n          \
    \                      ^\n                                n: \n/tmp/tmpddrsilei.swift:25:19:\
    \ error: cannot find 'make' in scope\n        var res = make(count: max, repeatedValue:\
    \ 0)\n                  ^~~~\n/tmp/tmpddrsilei.swift:35:32: error: missing argument\
    \ label 'n:' in call\n        let left = make_a_pile(n - 1)\n                \
    \               ^\n                               n: \n/tmp/tmpddrsilei.swift:36:19:\
    \ error: cannot find 'make' in scope\n        var res = make(count: max, repeatedValue:\
    \ 0)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).map(make_a_stone_at_index).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpho_04c05.swift:13:24: error: cannot find 'make_a_stone_at_index'\
    \ in scope\n    return (0..<n).map(make_a_stone_at_index).count\n            \
    \           ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpho_04c05.swift:13:14: error: generic\
    \ parameter 'T' could not be inferred\n    return (0..<n).map(make_a_stone_at_index).count\n\
    \             ^\nSwift.Collection:2:28: note: in call to function 'map'\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\n/tmp/tmpho_04c05.swift:13:47: error: cannot convert\
    \ return expression of type 'Int' to return type '[Int]'\n    return (0..<n).map(make_a_stone_at_index).count\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpho_04c05.swift:13:24:\
    \ error: converting non-escaping value to '(Int) throws -> T' may allow it to\
    \ escape\n    return (0..<n).map(make_a_stone_at_index).count\n              \
    \         ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).map({ _ in n * 2 }).filter { n % 2 == 1 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp319qr4t1.swift:13:47: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return (0..<n).map({\
    \ _ in n * 2 }).filter { n % 2 == 1 }\n                                      \
    \        ^\n                                                _ in\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    var pile = [Int]()\n\
    \    var numberOfStones = n\n    var lastPile = [Int]()\n    for _ in 0 ..< n\
    \ {\n        numberOfStones += 2\n        if numberOfStones % 2 == 1 {\n     \
    \       numberOfStones += 1\n        }\n        lastPile.append(numberOfStones)\n\
    \    }\n    for element in lastPile {\n        pile.append(element)\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpq3096wac/tmpq3096wac.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f56cff31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f56cfc28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f56cfc28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f56cfc277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3096wac                        0x000055bf68e5f722 <unavailable> + 5922

    5    libc.so.6                          0x00007f56cf71e460 __libc_start_main +
    245

    6    tmpq3096wac                        0x000055bf68e5f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    \n    if n % 2 == 1 {\n        pile\
    \ = pile.append(n)\n    } else {\n        for _ in 0..<(n - 1) {\n           \
    \ if n == 0 {\n                pile = pile.append(0)\n            } else {\n \
    \               pile = pile.append(n)\n            }\n        }\n        pile\
    \ = pile.append(0)\n    }\n    \n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpq_32x67u.swift:16:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpq_32x67u.swift:20:29: error: cannot assign value of type '()' to type\
    \ '[Int]'\n                pile = pile.append(0)\n                       ~~~~~^~~~~~~~~\n\
    /tmp/tmpq_32x67u.swift:22:29: error: cannot assign value of type '()' to type\
    \ '[Int]'\n                pile = pile.append(n)\n                       ~~~~~^~~~~~~~~\n\
    /tmp/tmpq_32x67u.swift:25:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(0)\n               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var nextStone = 0\n    for _ in 1...n\
    \ {\n        nextStone += 1 + (n % 2 == 0 ? 1 : 0)\n        stones.append(nextStone)\n\
    \        n = n/2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpqg_rf0fx.swift:18:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n/2\n        ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    \n    var pile =\
    \ [1]\n    var numOfLevels = 1 \n    \n    for i in 0..<n {\n        switch n\
    \ % i {\n        case 0:\n            numOfLevels += 1\n        case 1:\n    \
    \        numOfLevels += 1\n            pile.append(numOfLevels)\n        default:\n\
    \            numOfLevels += 1\n        }\n    }\n    \n    return pile\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00007f6d7cbe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f6d7c8de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f6d7c8de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f6d7c8de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f6d7c8ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2s7xkeb4                        0x00005568eddbfbdb <unavailable> + 7131

    6    tmp2s7xkeb4                        0x00005568eddbf48b <unavailable> + 5259

    7    libc.so.6                          0x00007f6d7c3d4460 __libc_start_main +
    245

    8    tmp2s7xkeb4                        0x00005568eddbf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: [Int] = [n]\n    if n % 2 == 0 {\n        // Even\
    \ number n is odd\n        stones.append(stones[n - 1])\n    } else {\n      \
    \  // Odd number n is even\n        stones.append(stones[n / 2])\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f7c9dd7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f7c9da73561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f7c9da73286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f7c9da7313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f7c9da72bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f7c9e020e83 <unavailable> + 188035

    6    tmpuqft7i8p                        0x0000560a16cdaae4 <unavailable> + 6884

    7    tmpuqft7i8p                        0x0000560a16cda3fb <unavailable> + 5115

    8    libc.so.6                          0x00007f7c9d569460 __libc_start_main +
    245

    9    tmpuqft7i8p                        0x0000560a16cda119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    repeat() {\n        result.append(n\
    \ % 2 == 0 ? n : n/2)\n        n /= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2kv_hk3x.swift:14:11: error: expected '{' after 'repeat'\n    repeat()\
    \ {\n          ^\n/tmp/tmp2kv_hk3x.swift:17:5: error: expected 'while' after body\
    \ of 'repeat' statement\n    }\n    ^\n/tmp/tmp2kv_hk3x.swift:16:11: error: left\
    \ side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n\
    \ /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    var res = make_a_pile(n:\
    \ n + 1)\n    if n % 2 == 0 {\n        res.last() = res.last() + 1\n    }\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpurmjsb9t.swift:18:13: error: cannot call value of non-function\
    \ type 'Int?'\n        res.last() = res.last() + 1\n            ^   ~~\n     \
    \           \n/tmp/tmpurmjsb9t.swift:18:26: error: cannot call value of non-function\
    \ type 'Int?'\n        res.last() = res.last() + 1\n                         ^\
    \   ~~\n                             \n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let pile = [0]\n    if n % 2 == 0 {\n        pile = pile.append(n\
    \ - 1) + pile.append(n)\n    } else {\n        pile = pile.append(n) + pile.append(n\
    \ - 1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9_gxyqmu.swift:15:9: error: cannot assign to value: 'pile' is a\
    \ 'let' constant\n        pile = pile.append(n - 1) + pile.append(n)\n       \
    \ ^~~~\n/tmp/tmp9_gxyqmu.swift:13:5: note: change 'let' to 'var' to make it mutable\n\
    \    let pile = [0]\n    ^~~\n    var\n/tmp/tmp9_gxyqmu.swift:15:35: error: cannot\
    \ assign value of type '()' to type '[Int]'\n        pile = pile.append(n - 1)\
    \ + pile.append(n)\n               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmp9_gxyqmu.swift:15:21:\
    \ error: cannot use mutating member on immutable value: 'pile' is a 'let' constant\n\
    \        pile = pile.append(n - 1) + pile.append(n)\n               ~~~~ ^\n/tmp/tmp9_gxyqmu.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let pile = [0]\n    ^~~\n\
    \    var\n/tmp/tmp9_gxyqmu.swift:15:35: error: type '()' cannot conform to 'FloatingPoint'\n\
    \        pile = pile.append(n - 1) + pile.append(n)\n                        \
    \          ^\n/tmp/tmp9_gxyqmu.swift:15:35: note: only concrete types such as\
    \ structs, enums and classes can conform to protocols\n        pile = pile.append(n\
    \ - 1) + pile.append(n)\n                                  ^\n/tmp/tmp9_gxyqmu.swift:15:35:\
    \ note: required by referencing operator function '+' on 'FloatingPoint' where\
    \ 'Self' = '()'\n        pile = pile.append(n - 1) + pile.append(n)\n        \
    \                          ^\n/tmp/tmp9_gxyqmu.swift:15:42: error: cannot use\
    \ mutating member on immutable value: 'pile' is a 'let' constant\n        pile\
    \ = pile.append(n - 1) + pile.append(n)\n                                    ~~~~\
    \ ^\n/tmp/tmp9_gxyqmu.swift:13:5: note: change 'let' to 'var' to make it mutable\n\
    \    let pile = [0]\n    ^~~\n    var\n/tmp/tmp9_gxyqmu.swift:17:9: error: cannot\
    \ assign to value: 'pile' is a 'let' constant\n        pile = pile.append(n) +\
    \ pile.append(n - 1)\n        ^~~~\n/tmp/tmp9_gxyqmu.swift:13:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let pile = [0]\n    ^~~\n    var\n/tmp/tmp9_gxyqmu.swift:17:31:\
    \ error: cannot assign value of type '()' to type '[Int]'\n        pile = pile.append(n)\
    \ + pile.append(n - 1)\n         "
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var ans = [0]\n    var curr = 1\n    for _ in 0..<n {\n    \
    \    if n % 2 == 0 {\n            ans[curr] = ans[curr] + 1\n        }\n     \
    \   n -= 1\n        if n == 0 {\n            curr += 2\n        }\n    }\n   \
    \ return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2jqwk80g.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).filter({ 2 * $0 % 2 != 0 }).map {\n        2\
    \ * $0 % 2 + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppx2l7r3n/tmppx2l7r3n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f40cc8a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f40cc598b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f40cc598988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f40cc5977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppx2l7r3n                        0x0000559abb5cc5f2 <unavailable> + 5618

    5    libc.so.6                          0x00007f40cc08e460 __libc_start_main +
    245

    6    tmppx2l7r3n                        0x0000559abb5cc239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var numArray = [Int]()\n    if n % 2 == 1 {\n        numArray.append(n\
    \ + 1)\n    } else {\n        for _ in 0..<n {\n            numArray.append(Int(ceil(Double(n)\
    \ / 2.0)))\n        }\n    }\n    return numArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpb59t3agq.swift:18:33: error: cannot find 'ceil' in scope\n    \
    \        numArray.append(Int(ceil(Double(n) / 2.0)))\n                       \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    var num_stones = 0\n    var pile = make_pile(n:\
    \ n)\n    for index in 0..<pile.count {\n        let next_num_stones = pile[index]\
    \ % 2 == 1 ? pile[index] : pile[index] + 1\n        arr.append(next_num_stones)\n\
    \        num_stones += next_num_stones\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmhfdb19i.swift:15:16: error: cannot find 'make_pile' in scope\n\
    \    var pile = make_pile(n: n)\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var counts = [Int]()\n\n    // loop n - 1 times to compute first\
    \ level of stones\n    for _ in 0..<(n-1) {\n        // if n is odd then next\
    \ odd number is even\n        if n % 2 != 0 {\n            counts.append(n/2)\n\
    \        }\n        // if n is even then next even number is odd\n        else\
    \ {\n            counts.append(n*3 + 1)\n        }\n        n -= 1\n    }\n\n\
    \    // loop n - 1 times again to compute remaining levels\n    for _ in 0..<(n-1)\
    \ {\n        // if n is odd then next odd number is even\n        if n % 2 !=\
    \ 0 {\n            counts.append(n/2)\n        }\n        // if n is even then\
    \ next even number is odd\n        else {\n            counts.append(n*3 + 1)\n\
    \        }\n        n -= 1\n    }\n\n    return counts\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfb7cvqot.swift:25:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n/tmp/tmpfb7cvqot.swift:38:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    var counts = [Int]()\n\
    \    var count = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n          \
    \  counts[count] = count + 1\n            counts.append(count + 1)\n        }\
    \ else {\n            counts[count] = count + 1\n            count = count + 1\n\
    \        }\n        n = n - 1\n    }\n    return counts\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpbnlo8030.swift:26:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n - 1\n        ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0...n).map { n in (n + n % 2 == 0 ? n : n + 1) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpx1t6ajv4/tmpx1t6ajv4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fa1dcb6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fa1dc866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fa1dc866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fa1dc8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1t6ajv4                        0x000055fcfda14552 <unavailable> + 5458

    5    libc.so.6                          0x00007fa1dc35c460 __libc_start_main +
    245

    6    tmpx1t6ajv4                        0x000055fcfda14199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones  = n\n    var stones_array = [0]\n    \n    if n\
    \ % 2 == 0 {\n        stones_array.append(stones)\n    }\n    else {\n       \
    \ for var i = 2; i <= n/2; i+=1 {\n            if n % i == 0 {\n             \
    \   stones_array.append(stones)\n            }\n            else if n % (i+1)\
    \ == 0 {\n                stones_array.append(stones + 1)\n            }\n   \
    \         else {\n                stones_array.append(stones + 1)\n          \
    \      stones_array.append(stones)\n            }\n        }\n    }\n    \n  \
    \  return stones_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp3z6dkgj4.swift:20:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i <= n/2; i+=1 {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var num = 1\n    if n % 2 == 0 {\n   \
    \     num = 1\n    }\n\n    for _ in 1...n {\n        if n % 2 == 0 {\n      \
    \      stones.append(num)\n        } else {\n            stones.append(num + stones[stones.count\
    \ - 2])\n        }\n        num++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp7fhi0y5j.swift:25:12: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        num++\n           ^~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // TODO: Fill in the code here.\n    var ans = [Int]()\n   \
    \ if n % 2 != 0 {\n        ans = append(ans, 0)\n    }\n    for _ in 1...n {\n\
    \        ans = append(ans, 0)\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpm8vgu1kp.swift:16:15: error: cannot find 'append' in scope\n  \
    \      ans = append(ans, 0)\n              ^~~~~~\n/tmp/tmpm8vgu1kp.swift:19:15:\
    \ error: cannot find 'append' in scope\n        ans = append(ans, 0)\n       \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var ans = [Int]()\n    if n <= 0 {\n        return ans\n   \
    \ }\n    // first level has n stones\n    ans.append(n)\n    \n    let even =\
    \ (n % 2 == 0)\n    if even {\n        \n        // first odd level\n        let\
    \ next = (n - 1) / 2\n        if next % 2 != 0 {\n            ans.append(next\
    \ + 1)\n        } else {\n            ans.append(next)\n        }\n    }\n   \
    \ \n    // second level\n    n = n - 1\n    if even {\n        \n        // second\
    \ even level\n        let next = n / 2\n        if next % 2 != 0 {\n         \
    \   ans.append(next + 1)\n        } else {\n            ans.append(next)\n   \
    \     }\n    }\n    \n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6nghndm6.swift:33:5: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n    n = n - 1\n    ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let stones = n % 2 == 0 ? n / 2 : n / 2 + 1\n    var arr = [Int]()\n\
    \    for _ in 0...stones {\n        arr += [n]\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp5oq4pprd/tmp5oq4pprd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fe8b0c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fe8b095db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fe8b095d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fe8b095c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5oq4pprd                        0x0000562b99cbd5c2 <unavailable> + 5570

    5    libc.so.6                          0x00007fe8b0453460 __libc_start_main +
    245

    6    tmp5oq4pprd                        0x0000562b99cbd209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0] * n\n    var current_level = n\n\n    var odd_levels\
    \ = current_level / 2\n    \n    if odd_levels == 0 {\n        return stones\n\
    \    }\n    \n    for i in 1..(n - 1) {\n        if i % 2 == 0 {\n           \
    \ stones[i] += 1\n            current_level -= odd_levels\n        } else {\n\
    \            stones[i] += 2\n            current_level += odd_levels\n       \
    \ }\n    }\n    \n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpv_85_9o9.swift:13:22: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    var stones = [0] * n\n          \
    \       ~~~ ^ ~\n/tmp/tmpv_85_9o9.swift:13:22: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    var stones = [0] *\
    \ n\n                     ^\n/tmp/tmpv_85_9o9.swift:22:15: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n    for i in 1..(n - 1) {\n   \
    \           ^~\n              ...\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return makeArray(n / 2, n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp3jxc_shx.swift:13:12: error: cannot find 'makeArray' in scope\n\
    \    return makeArray(n / 2, n)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    func helper(n: Int, i: Int = 0) -> [Int] {\n        if n <=\
    \ 0 {\n            return []\n        }\n        if n % 2 == 1 {\n           \
    \ return [(i + 1)]\n        } else {\n            return helper(n / 2, i + 1)\n\
    \        }\n    }\n    return helper(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_svp753n.swift:20:26: error: missing argument labels 'n:i:' in\
    \ call\n            return helper(n / 2, i + 1)\n                         ^\n\
    \                          n:     i: \n/tmp/tmp_svp753n.swift:23:19: error: missing\
    \ argument label 'n:' in call\n    return helper(n)\n                  ^\n   \
    \               n: \n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<(n+1)).filter { n % 2 == 0 }.map { n in n }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz_f2x5ay.swift:13:31: error: cannot convert value of type '() ->\
    \ Bool' to expected argument type '(Range<Int>.Element) throws -> Bool' (aka '(Int)\
    \ throws -> Bool')\n    return (0..<(n+1)).filter { n % 2 == 0 }.map { n in n\
    \ }\n                              ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for num in 1...n {\n        if n%2\
    \ == 1 {\n            result.append(num)\n        } else if n%2 == 0 {\n     \
    \       result.append(num)\n        }\n        n = n / 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpvqn8z_0g.swift:20:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n\tassert(n % 2 == 1, \"n must be odd\")\n\treturn make_a_pile_helper(n,\
    \ nums: make([]Int, n+1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpc3pv9yh5.swift:14:44: error: expected ',' separator\n        return\
    \ make_a_pile_helper(n, nums: make([]Int, n+1))\n                            \
    \                      ^\n                                                  ,\n\
    /tmp/tmpc3pv9yh5.swift:14:9: error: cannot find 'make_a_pile_helper' in scope\n\
    \        return make_a_pile_helper(n, nums: make([]Int, n+1))\n              \
    \ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpc3pv9yh5.swift:14:37: error: cannot find 'make'\
    \ in scope\n        return make_a_pile_helper(n, nums: make([]Int, n+1))\n   \
    \                                        ^~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return make_a_pile_helper(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplyojdn9r.swift:13:12: error: cannot find 'make_a_pile_helper' in\
    \ scope\n    return make_a_pile_helper(n)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return makeArray(makeArray(makeArray(n)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeznaqiib.swift:13:12: error: cannot find 'makeArray' in scope\n\
    \    return makeArray(makeArray(makeArray(n)))\n           ^~~~~~~~~\n/tmp/tmpeznaqiib.swift:13:22:\
    \ error: cannot find 'makeArray' in scope\n    return makeArray(makeArray(makeArray(n)))\n\
    \                     ^~~~~~~~~\n/tmp/tmpeznaqiib.swift:13:32: error: cannot find\
    \ 'makeArray' in scope\n    return makeArray(makeArray(makeArray(n)))\n      \
    \                         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var nums = [Int]()\n    let remainder = n % 2\n    var nNum\
    \ = 0\n    switch remainder {\n    case 0:\n        nNum = n\n    default:\n \
    \       nNum = n + 2\n    }\n    for _ in 0..<nNum {\n        if let num = make_a_pile()\
    \ {\n            nums.append(num)\n        }\n    }\n    return nums\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxsalve17.swift:23:34: error: missing argument for parameter 'n'\
    \ in call\n        if let num = make_a_pile() {\n                            \
    \     ^\n                                 n: <#Int#>\n/tmp/tmpxsalve17.swift:12:6:\
    \ note: 'make_a_pile(n:)' declared here\nfunc make_a_pile(n: Int) -> [Int] {\n\
    \     ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    precondition(n > 0, \"n must be positive\")\n    \n    var arr\
    \ : [Int] = [0]\n    if n%2 == 1 {\n        for _ in 1...n {\n            arr.append(arr[-1]\
    \ + 1)\n        }\n    } else {\n        for _ in 1...n {\n            arr.append(arr[-1]\
    \ + 1)\n            arr.append(arr[-2] + 1)\n        }\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007fc6d0942c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc6d0639561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007fc6d0639286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007fc6d063913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007fc6d0638bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007fc6d0be6e83 <unavailable> + 188035

    6    tmpd9bmnlou                        0x0000558aa9a26d54 <unavailable> + 7508

    7    tmpd9bmnlou                        0x0000558aa9a2656b <unavailable> + 5483

    8    libc.so.6                          0x00007fc6d012f460 __libc_start_main +
    245

    9    tmpd9bmnlou                        0x0000558aa9a26289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = make([][Int], n)\n    if n < 2 {\n        return res\n\
    \    }\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            res[i][0]\
    \ = i+1\n        } else {\n            res[i][1] = i+1\n        }\n    }\n   \
    \ return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpghwkktmo.swift:17:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpghwkktmo.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmpghwkktmo.swift:17:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n/tmp/tmpghwkktmo.swift:13:15:\
    \ error: cannot find 'make' in scope\n    var res = make([][Int], n)\n       \
    \       ^~~~\n/tmp/tmpghwkktmo.swift:13:22: error: no exact matches in call to\
    \ subscript \n    var res = make([][Int], n)\n                     ^\n/tmp/tmpghwkktmo.swift:13:22:\
    \ note: found candidate with type '(Int) -> Any'\n    var res = make([][Int],\
    \ n)\n                     ^\n/tmp/tmpghwkktmo.swift:13:22: note: found candidate\
    \ with type '(Range<Int>) -> ArraySlice<Any>'\n    var res = make([][Int], n)\n\
    \                     ^\n/tmp/tmpghwkktmo.swift:13:22: note: found candidate with\
    \ type '(Int.Type) -> ArraySlice<Any>'\n    var res = make([][Int], n)\n     \
    \                ^\n/tmp/tmpghwkktmo.swift:13:22: note: found candidate with type\
    \ '((UnboundedRange_) -> ()) -> ArraySlice<Any>'\n    var res = make([][Int],\
    \ n)\n                     ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var currentLevel = 1\n    var nextLevel\
    \ = 0\n    while nextLevel <= n {\n        pile[nextLevel] = nextLevel\n     \
    \   currentLevel = (currentLevel * 3) + 1\n        nextLevel = (nextLevel * 3)\
    \ + 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f5daeba4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f5dae89b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f5dae89b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f5dae89b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f5dae89abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f5daee487ec <unavailable> + 186348

    6    tmpgmoydawn                        0x000055a713138925 <unavailable> + 6437

    7    tmpgmoydawn                        0x000055a71313835b <unavailable> + 4955

    8    libc.so.6                          0x00007f5dae391460 __libc_start_main +
    245

    9    tmpgmoydawn                        0x000055a713138079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile : [Int] = [0]\n    if n % 2 == 0 {\n        pile =\
    \ [n]\n    } else {\n        var even = 0\n        var odd = 0\n        while\
    \ even < n {\n            odd += 2\n            even += 2\n        }\n       \
    \ pile = even..odd + 1\n    }\n    return pile // [0, 1, 3, 5, 7]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmphmv4loi4.swift:23:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        pile = even..odd + 1\n                   ^~\n \
    \                  ...\n/tmp/tmphmv4loi4.swift:23:16: error: cannot assign value\
    \ of type 'Int' to type '[Int]'\n        pile = even..odd + 1\n              \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n\tvar pile : [Int] = []\n\tfor i : Int in 0..<n {\n\t\tif i % 2\
    \ == 0 {\n\t\t\tpile.append(i + 1)\n\t\t} else if i % 2 != 0 {\n\t\t\tpile.append(i)\n\
    \t\t}\n\t}\n\treturn pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpmr8_rrjp/tmpmr8_rrjp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f377cc2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f377c922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f377c922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f377c9217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr8_rrjp                        0x000056197b346562 <unavailable> + 5474

    5    libc.so.6                          0x00007f377c418460 __libc_start_main +
    245

    6    tmpmr8_rrjp                        0x000056197b3461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: [Int] = []\n    var levels: Int = 0\n    var stone:\
    \ Int\n    var even: Bool\n\n    while levels < n {\n        stone = levels\n\
    \        even = (levels % 2) == 0\n        if even {\n            stone = stone\
    \ + 1\n        }\n\n        stones.append(stone)\n        levels = levels + 1\n\
    \    }\n\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpk8vmc_0g/tmpk8vmc_0g.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc6f6b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc6f67fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc6f67fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc6f67fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8vmc_0g                        0x0000560ce6858472 <unavailable> + 5234

    5    libc.so.6                          0x00007fc6f62f3460 __libc_start_main +
    245

    6    tmpk8vmc_0g                        0x0000560ce68580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return make_pile_at_index(1, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6qpu2eoa.swift:13:12: error: cannot find 'make_pile_at_index' in\
    \ scope\n    return make_pile_at_index(1, n)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    let n = Int(n)\n    switch n {\n   \
    \ case n % 2 == 0:\n        pile = pile.appendContentsOf(make_a_pile(n - 1))\n\
    \        pile = pile.appendContentsOf(make_a_pile(n - 2))\n    case n % 2 != 0:\n\
    \        pile = pile.appendContentsOf(make_a_pile(n - 1))\n        pile = pile.appendContentsOf(make_a_pile(n\
    \ - 2))\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp91jde4fx.swift:16:16: error: expression pattern of type 'Bool'\
    \ cannot match values of type 'Int'\n    case n % 2 == 0:\n         ~~~~~~^~~~\n\
    /tmp/tmp91jde4fx.swift:19:16: error: expression pattern of type 'Bool' cannot\
    \ match values of type 'Int'\n    case n % 2 != 0:\n         ~~~~~~^~~~\n/tmp/tmp91jde4fx.swift:17:21:\
    \ error: value of type '[Int]' has no member 'appendContentsOf'\n        pile\
    \ = pile.appendContentsOf(make_a_pile(n - 1))\n               ~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp91jde4fx.swift:17:50: error: missing argument label 'n:' in call\n   \
    \     pile = pile.appendContentsOf(make_a_pile(n - 1))\n                     \
    \                            ^\n                                             \
    \    n: \n/tmp/tmp91jde4fx.swift:18:21: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n        pile = pile.appendContentsOf(make_a_pile(n - 2))\n\
    \               ~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp91jde4fx.swift:18:50: error: missing\
    \ argument label 'n:' in call\n        pile = pile.appendContentsOf(make_a_pile(n\
    \ - 2))\n                                                 ^\n                \
    \                                 n: \n/tmp/tmp91jde4fx.swift:20:21: error: value\
    \ of type '[Int]' has no member 'appendContentsOf'\n        pile = pile.appendContentsOf(make_a_pile(n\
    \ - 1))\n               ~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp91jde4fx.swift:20:50: error:\
    \ missing argument label 'n:' in call\n        pile = pile.appendContentsOf(make_a_pile(n\
    \ - 1))\n                                                 ^\n                \
    \                                 n: \n/tmp/tmp91jde4fx.swift:21:21: error: value\
    \ of type '[Int]' has no member 'appendContentsOf'\n        pile = pile.appendContentsOf(make_a_pile(n\
    \ - 2))\n               ~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp91jde4fx.swift:21:50: error:\
    \ missing argument label 'n:' in call\n        pile = pile.appendContentsOf(make_a_pile(n\
    \ - 2))\n                                                 ^\n                \
    \                                 n: \n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [0]\n    for i in 2...n {\n        if i % 2 == 0 {\n\
    \            res.append(i + res[i - 2])\n        } else {\n            res.append(i\
    \ + res[i - 1])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f9361847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f936153e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f936153e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f936153e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f936153dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f9361aebe83 <unavailable> + 188035

    6    tmp9yt_zfm0                        0x000055723fc09cca <unavailable> + 7370

    7    tmp9yt_zfm0                        0x000055723fc094eb <unavailable> + 5355

    8    libc.so.6                          0x00007f9361034460 __libc_start_main +
    245

    9    tmp9yt_zfm0                        0x000055723fc09209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    for _ in 0..<n {\n        stones.append(0)\n\
    \    }\n    var count = 0\n    stones[2] += 1 // first level: 1 stone\n    for\
    \ _ in 1..<n {\n        if n % 2 == 0 {\n            stones[(n / 2)] += 1 // next\
    \ level: 1 stone\n        } else {\n            stones[(n / 2) + 1] += 1 // next\
    \ level: 2 stones\n        }\n        n /= 2\n    }\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplxhaucm6.swift:25:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [n]\n    }\n    var pile = [n]\n\
    \    var count = make_a_pile(n, &pile)\n    if n % 2 == 0 {\n        pile = append(pile,\
    \ 0)\n        count = make_a_pile(n / 2, &pile)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplxklbmlj.swift:17:32: error: extra argument in call\n    var count\
    \ = make_a_pile(n, &pile)\n                           ~~~~^~~~~~\n/tmp/tmplxklbmlj.swift:19:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, 0)\n     \
    \          ^~~~~~\n/tmp/tmplxklbmlj.swift:20:36: error: extra argument in call\n\
    \        count = make_a_pile(n / 2, &pile)\n                           ~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: Int = 0\n\n    if n%2 == 1 {\n        stones +=\
    \ n\n    }\n\n    if n%2 == 0 {\n        stones += n/2\n    }\n\n    if n%2 ==\
    \ 1 {\n        stones += n/2\n    }\n\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpq3vu226t.swift:27:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return stones\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    switch n % 2 {\n    case 0:\n        return [1]\n    case 1:\n\
    \        return [3, 5]\n    default:\n        var levels: [Int] = [0]\n      \
    \  var n = 0\n        while n > 0 {\n            levels.append(levels[n] + 1)\n\
    \            n += 2\n        }\n        return levels\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpah1m8jgw/tmpah1m8jgw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc38abeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc38a8e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc38a8e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc38a8e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpah1m8jgw                        0x000055a077d834d2 <unavailable> + 5330

    5    libc.so.6                          0x00007fc38a3db460 __libc_start_main +
    245

    6    tmpah1m8jgw                        0x000055a077d83119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var num_stones = [0]\n    if n % 2 == 0 {\n        num_stones[0]\
    \ = n\n    } else {\n        num_stones[0] = n * 2 + 1\n    }\n\n    for _ in\
    \ 1...n {\n        let next_odd = num_stones.filter{$0 % 2 != 0}.first!\n    \
    \    let next_even = num_stones.filter{$0 % 2 == 0}.first!\n        num_stones.append(next_odd\
    \ + next_even)\n    }\n    return num_stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpimmwqcyf/tmpimmwqcyf.swift:22: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00007ff6f12bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff6f0fb3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007ff6f0fb3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007ff6f0fb313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007ff6f0fb2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpimmwqcyf                        0x0000555dba8f3111 <unavailable> + 8465

    6    tmpimmwqcyf                        0x0000555dba8f264b <unavailable> + 5707

    7    libc.so.6                          0x00007ff6f0aa9460 __libc_start_main +
    245

    8    tmpimmwqcyf                        0x0000555dba8f2369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n)\n        .map { (n) -> (Int) in\n           \
    \ if n&1 == 0 {\n                return (n + 1)\n            } else {\n      \
    \          return (n + 1)/2\n            }\n        }.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp3ekvmqwe/tmp3ekvmqwe.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fd25b9f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fd25b6e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fd25b6e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fd25b6e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ekvmqwe                        0x00005627ebd1b5f2 <unavailable> + 5618

    5    libc.so.6                          0x00007fd25b1dd460 __libc_start_main +
    245

    6    tmp3ekvmqwe                        0x00005627ebd1b239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    stones += make_a_pile(n, n)\n    stones\
    \ += make_a_pile(n - 2, n - 2)\n    stones += make_a_pile(n - 3, n - 3)\n    stones\
    \ += make_a_pile(n - 4, n - 4)\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjpnhui42.swift:14:30: error: extra argument in call\n    stones\
    \ += make_a_pile(n, n)\n                         ~~~~^~\n/tmp/tmpjpnhui42.swift:15:36:\
    \ error: extra argument in call\n    stones += make_a_pile(n - 2, n - 2)\n   \
    \                      ~~~~~~~~~~^~~~\n/tmp/tmpjpnhui42.swift:16:36: error: extra\
    \ argument in call\n    stones += make_a_pile(n - 3, n - 3)\n                \
    \         ~~~~~~~~~~^~~~\n/tmp/tmpjpnhui42.swift:17:36: error: extra argument\
    \ in call\n    stones += make_a_pile(n - 4, n - 4)\n                         ~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result: [Int] = []\n    var pile: Int = 0\n    while n%2\
    \ != 0 {\n        pile++\n        n = n / 2\n    }\n    while n != 1 {\n     \
    \   result.append(pile)\n        n /= 2\n        pile++\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1vprooet.swift:16:13: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        pile++\n            ^~\n/tmp/tmp1vprooet.swift:17:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n/tmp/tmp1vprooet.swift:21:11: error: left side of mutating operator\
    \ isn't mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp1vprooet.swift:22:13:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        pile++\n\
    \            ^~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n % 2 == 0 {\n        // even\n        return make_a_pile(n:\
    \ n - 2) / 2 + make_a_pile(n: n - 1) / 2\n    } else {\n        // odd\n     \
    \   return make_a_pile(n: n - 1) + make_a_pile(n: n - 2) / 2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpe28zni6o.swift:15:38: error: binary operator '/' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n        return make_a_pile(n: n - 2)\
    \ / 2 + make_a_pile(n: n - 1) / 2\n                                     ^\nSwift.DurationProtocol:2:17:\
    \ note: candidate requires that '[Int]' conform to 'DurationProtocol' (requirement\
    \ specified as 'Self' : 'DurationProtocol')\npublic protocol DurationProtocol\
    \ : AdditiveArithmetic, Comparable, Sendable {\n                ^\n/tmp/tmpe28zni6o.swift:18:62:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Array<Int>'\n\
    \        return make_a_pile(n: n - 1) + make_a_pile(n: n - 2) / 2\n          \
    \                                                   ^\n/tmp/tmpe28zni6o.swift:18:40:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return make_a_pile(n: n - 1) + make_a_pile(n: n - 2) / 2\n          \
    \                             ^\n"
  stdout: ''
  timestamp: 1660052661
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n >= 0 else {\n        return [0]\n    }\n\n    let pile:\
    \ [Int] = [\n        n / 2,\n        n%2 == 0 ? n / 2 : n + n/2,\n    ]\n\n  \
    \  return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprcp180qg/tmprcp180qg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f848c88bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f848c582b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f848c582988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f848c5817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcp180qg                        0x000055c92e3fb422 <unavailable> + 5154

    5    libc.so.6                          0x00007f848c078460 __libc_start_main +
    245

    6    tmprcp180qg                        0x000055c92e3fb069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n\n    for i in 1..(n + 1) {\n        switch\
    \ i {\n        case n % 2:\n            result.append(i)\n        case i % 2:\n\
    \            result.append(2 * i)\n        default:\n            result.append(i\
    \ + 1)\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpd6j8qgn9.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..(n + 1) {\n              ^~\n         \
    \     ...\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var count = [0]\n    if n % 2 == 1 {\n        count[0] = count[0]\
    \ + 1\n    }\n    if n >= 3 && n <= 9 {\n        count[1] = count[1] + 1\n   \
    \ }\n    for k in stride(from: 3, through: 9, by: 2) {\n        count[k] = (count[k-1]\
    \ + 1) * (n-1) / k\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f86c385dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f86c3554561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f86c3554286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f86c355413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f86c3553bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f86c3b01e83 <unavailable> + 188035

    6    tmp63gudyxu                        0x000055bebd7b9d33 <unavailable> + 7475

    7    tmp63gudyxu                        0x000055bebd7b961b <unavailable> + 5659

    8    libc.so.6                          0x00007f86c304a460 __libc_start_main +
    245

    9    tmp63gudyxu                        0x000055bebd7b9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var ans = [Int]()\n\n    if n <= 1 {\n        return ans\n \
    \   }\n\n    if n % 2 == 1 {\n        ans.append(n + 1)\n    } else {\n      \
    \  let r = n / 2\n\n        for i in 1..r {\n            ans.append(n * (2 * i\
    \ + 1))\n        }\n    }\n\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpo6o0wz28.swift:24:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 1..r {\n                  ^~\n       \
    \           ...\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 { return [] }\n    \n    // Get the next odd number\
    \ of n that is greater than or equal to n.\n    // If n = 0, the next odd number\
    \ is also zero.\n    var next_odd_n = n + 1 \n    if next_odd_n % 2 == 0 { next_odd_n\
    \ /= 2 }\n    \n    // Get the next even number of n that is greater than or equal\
    \ to n.\n    // If n = 0, the next even number is also zero.\n    var next_even_n\
    \ = n - 1 \n    if next_even_n % 2 == 0 { next_even_n /= 2 }\n    \n    // The\
    \ first level of the pile.\n    var level: [Int] = []\n    \n    // Now add all\
    \ the stones in the first level and add them to the pile.\n    for _ in 0 ..<\
    \ n {\n        level.append(0)\n    }\n    \n    // Add the stones in the next\
    \ level to the pile.\n    for _ in 0 ..< next_odd_n {\n        level.append(1)\n\
    \    }\n    \n    // Add the stones in the next level to the pile.\n    for _\
    \ in 0 ..< next_even_n {\n        level.append(2)\n    }\n    \n    return level\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpcl561vj7/tmpcl561vj7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fb4f5d74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fb4f5a6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fb4f5a6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fb4f5a6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcl561vj7                        0x000055a3093d7562 <unavailable> + 5474

    5    libc.so.6                          0x00007fb4f5561460 __libc_start_main +
    245

    6    tmpcl561vj7                        0x000055a3093d71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    for index in 0..<n {\n        if n % 2\
    \ == 1 {\n            stones[index] = stones[index] + (n - index) / 2\n      \
    \  } else {\n            stones[index] = stones[index] + (n - index) + 1\n   \
    \     }\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f260f725c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f260f41c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f260f41c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f260f41c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f260f41bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f260f9c9e83 <unavailable> + 188035

    6    tmphq6cb_a0                        0x0000564e6510ac2f <unavailable> + 7215

    7    tmphq6cb_a0                        0x0000564e6510a4db <unavailable> + 5339

    8    libc.so.6                          0x00007f260ef12460 __libc_start_main +
    245

    9    tmphq6cb_a0                        0x0000564e6510a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // Write your code here\n    switch n {\n    case 0:\n     \
    \   return [0]\n    case 1:\n        return [1]\n    case 2:\n        return [2]\n\
    \    case 3:\n        return [3]\n    default:\n        var result = [Int]()\n\
    \        var pile = make_a_pile(n - 1)\n        var level = n - 1\n        for\
    \ _ in 0..<(n / 2) {\n            if n%2 == 0 {\n                result.append(pile[level])\n\
    \                level--\n            } else {\n                result.append(pile[level]\
    \ * 2)\n                level--\n            }\n        }\n        return result\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpkzwvoiul.swift:25:32: error: missing argument label 'n:' in call\n\
    \        var pile = make_a_pile(n - 1)\n                               ^\n   \
    \                            n: \n/tmp/tmpkzwvoiul.swift:30:22: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                level--\n\
    \                     ^~\n/tmp/tmpkzwvoiul.swift:33:22: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n                level--\n             \
    \        ^~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return make_a_pile(n, []).toArray()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeoqp49f2.swift:13:27: error: extra argument in call\n    return\
    \ make_a_pile(n, []).toArray()\n                      ~~~~^~~\n/tmp/tmpeoqp49f2.swift:13:31:\
    \ error: value of type '[Int]' has no member 'toArray'\n    return make_a_pile(n,\
    \ []).toArray()\n           ~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let array: Array<Int> = [n]\n    if n % 2 != 0 {\n        let\
    \ next = (n + 1) / 2\n        array.append(next)\n    }\n    \n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0e_xwvw4.swift:16:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.append(next)\n        ~~~~~\
    \ ^\n/tmp/tmp0e_xwvw4.swift:13:5: note: change 'let' to 'var' to make it mutable\n\
    \    let array: Array<Int> = [n]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result: [Int] = []\n    \n    var last_level: Int = 0\n\
    \    var last_level_p1: Int = 1\n    var last_level_p2: Int = 1\n    \n    var\
    \ p1: Int = 1\n    var p2: Int = 1\n    \n    for i in 1..<n {\n        if i%2\
    \ == 0 {\n            last_level_p2 = last_level_p1\n            last_level_p1\
    \ = p1\n            p1 = p2\n            p2 = last_level_p1 + last_level_p2\n\
    \        }\n        \n        result.append(p1)\n        last_level_p1 = p1\n\
    \        p1 += p2\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpna57ncwk/tmpna57ncwk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f9ad4178c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f9ad3e6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f9ad3e6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f9ad3e6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpna57ncwk                        0x00005641bbcf1562 <unavailable> + 5474

    5    libc.so.6                          0x00007f9ad3965460 __libc_start_main +
    245

    6    tmpna57ncwk                        0x00005641bbcf11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660052661
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let count = n\n    let result = [0]\n    let maxCount = max(n,\
    \ count) + 1\n    for i in\n        0..<maxCount {\n            if i % 2 == 0\
    \ {\n                result.append(count)\n                count += 2\n      \
    \      } else {\n                result.append(count - 1)\n                count\
    \ -= 1\n            }\n        }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpbekk5j7c.swift:19:24: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n                result.append(count)\n\
    \                ~~~~~~ ^\n/tmp/tmpbekk5j7c.swift:14:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let result = [0]\n    ^~~\n    var\n/tmp/tmpbekk5j7c.swift:20:23:\
    \ error: left side of mutating operator isn't mutable: 'count' is a 'let' constant\n\
    \                count += 2\n                ~~~~~ ^\n/tmp/tmpbekk5j7c.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let count = n\n    ^~~\n\
    \    var\n/tmp/tmpbekk5j7c.swift:22:24: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n                result.append(count - 1)\n\
    \                ~~~~~~ ^\n/tmp/tmpbekk5j7c.swift:14:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let result = [0]\n    ^~~\n    var\n/tmp/tmpbekk5j7c.swift:23:23:\
    \ error: left side of mutating operator isn't mutable: 'count' is a 'let' constant\n\
    \                count -= 1\n                ~~~~~ ^\n/tmp/tmpbekk5j7c.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let count = n\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return []\n    }\n    let odd = n%2 !=\
    \ 0\n    let even = n % 2 == 0\n    var levels = [Int]()\n    \n    if even {\n\
    \        levels.append(n)\n    }\n    \n    if odd || even {\n        var new_even\
    \ = n - 1\n        var new_odd = n - 2\n        while new_odd > 0 {\n        \
    \    new_even += new_odd % 2\n            new_odd /= 2\n            if new_even\
    \ % 2 == 1 {\n                levels.append(new_even)\n            }\n       \
    \ }\n        if even {\n            levels.append(new_even)\n        }\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp2cf3b1vs/tmp2cf3b1vs.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc486f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc486c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc486c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc486c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2cf3b1vs                        0x0000555a760a74d2 <unavailable> + 5330

    5    libc.so.6                          0x00007fc486725460 __libc_start_main +
    245

    6    tmp2cf3b1vs                        0x0000555a760a7119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return [0]\n    }\n    var stones = make_a_pile(n:\
    \ n - 1)\n    stones.append(stones.count + 1)\n    if n % 2 == 0 {\n        stones.append(stones.count\
    \ + 1)\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp5r11a8ph/tmp5r11a8ph.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fd381f9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fd381c95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fd381c95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fd381c947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5r11a8ph                        0x0000558c65ef44d2 <unavailable> + 5330

    5    libc.so.6                          0x00007fd38178b460 __libc_start_main +
    245

    6    tmp5r11a8ph                        0x0000558c65ef4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int(n) / 2 + 1\n\
    \    while currentLevel > 0 {\n        if n % 2 == 0 {\n            currentLevel\
    \ = currentLevel/2\n        } else {\n            currentLevel = currentLevel\
    \ * 2\n        }\n        result.append(currentLevel)\n        n = n - currentLevel\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp14vedbq9.swift:22:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n - currentLevel\n        ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    \n    var result =\
    \ [Int]()\n    \n    switch n {\n    case 1:\n        result = [n]\n    case 2:\n\
    \        result = [1]\n    case 3:\n        result = [1, 3]\n    case 4:\n   \
    \     result = [1]\n    case 5:\n        result = [1, 5]\n    case 6:\n      \
    \  result = [1]\n    case 7:\n        result = [1, 3, 5]\n    case 8:\n      \
    \  result = [1]\n    case 9:\n        result = [1, 3, 5]\n    case 10:\n     \
    \   result = [1]\n    case 11:\n        result = [1, 3, 5]\n    case 12:\n   \
    \     result = [1]\n    case 13:\n        result = [1, 3, 5]\n    case 14:\n \
    \       result = [1]\n    case 15:\n        result = [1, 3, 5]\n    case 16:\n\
    \        result = [1]\n    case 17:\n        result = [1, 3, 5]\n    case 18:\n\
    \        result = [1]\n    case 19:\n        result = [1, 3, 5]\n    case 20:\n\
    \        result = [1]\n    case 21:\n        result = [1, 3, 5]\n    case 22:\n\
    \        result = [1]\n    case 23:\n        result = [1, 3, 5]\n    case 24:\n\
    \        result = [1]\n    case 25:\n        result = [1, 3, 5]\n    case 26:\n\
    \        result = [1]\n    case 27:\n        result = [1, 3, 5]\n    case 28:\n\
    \        result = [1]\n    case 29:\n        result = [1, 3, 5]\n    case 30:\n\
    \        result = [1]\n    case 31:\n        result = [1, 3, 5]\n    case 32:\n\
    \        result = [1]\n    case 33:\n        result = [1, 3, 5]\n    case 34:\n\
    \        result = [1]\n    case 35:\n        result = [1, 3, 5]\n    case 36:\n\
    \        result = [1]\n    case 37:\n        result = [1, 3, 5]\n    case 38:\n\
    \        result = [1]\n    case 39:\n        result = [1, 3, 5]\n    case 40:\n\
    \        result = [1]\n    case 41:\n        result = [1, 3, 5]\n    case 42:\n\
    \        result = [1]\n    case 43:\n        result = [1, 3, 5]\n    case 44:\n\
    \        result = [1]\n    case 45:\n        result = [1, 3, 5]\n    case 46:\n\
    \        result = [1]\n    case 47:\n        result = [1, 3, 5]\n    case 48:\n\
    \        result = [1]\n    case 49:\n        result = [1, 3, 5]\n    case 50:\n\
    \        result = [1]\n    case 51:\n        result = [1, 3, 5]\n    case 52:\n\
    \        result = [1]\n    case 53:\n        result = [1, 3, 5]\n    case 54:\n\
    \        result = [1]\n    case 55:\n        result = [1, 3, 5]\n    case 56:\n\
    \        result = [1]\n    case 57:\n        result = [1, 3, 5]\n    case 58:\n\
    \        result = [1]\n    case 59:\n        result = [1, 3, 5]\n    case 60:\n\
    \        result = [1]\n    case 61:\n        result = [1, 3, 5]\n    case 62:\n\
    \        result = [1]\n    case 63:\n        result = [1, 3, 5]\n    case 64:\n\
    \        result = [1]\n    case 65:\n        result = \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpc4k358z0.swift:150:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpc4k358z0.swift:169:61: error: expected '}' at end of brace statement\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])\n               \
    \                                             ^\n/tmp/tmpc4k358z0.swift:12:35:\
    \ note: to match this opening '{'\nfunc make_a_pile(n: Int) -> [Int] {\n     \
    \                             ^\n/tmp/tmpc4k358z0.swift:19:5: error: switch must\
    \ be exhaustive\n    switch n {\n    ^\n/tmp/tmpc4k358z0.swift:19:5: note: do\
    \ you want to add a default clause?\n    switch n {\n    ^\n/tmp/tmpc4k358z0.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var count = [Int]()\n    let level = n / 2\n    count.append(level)\n\
    \    if n % 2 == 1 {\n        count.append(n/2)\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpkntqcnk_/tmpkntqcnk_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f1607e10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f1607b07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f1607b07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f1607b067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkntqcnk_                        0x00005574380c14d2 <unavailable> + 5330

    5    libc.so.6                          0x00007f16075fd460 __libc_start_main +
    245

    6    tmpkntqcnk_                        0x00005574380c1119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for _ in 1...n {\n        var n =\
    \ 0\n        if n % 2 == 0 {\n            n = (n + 1) / 2\n        } else {\n\
    \            n = (n + 3) / 2\n        }\n        result.append(n)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpf9f4mdq8/tmpf9f4mdq8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f5262440c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f5262137b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f5262137988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f52621367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9f4mdq8                        0x00005561d47e25c2 <unavailable> + 5570

    5    libc.so.6                          0x00007f5261c2d460 __libc_start_main +
    245

    6    tmpf9f4mdq8                        0x00005561d47e2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let result = [0]\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxlbpxlre.swift:16:20: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n            result.append(i)\n        \
    \    ~~~~~~ ^\n/tmp/tmpxlbpxlre.swift:13:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = [0]\n    ^~~\n    var\n/tmp/tmpxlbpxlre.swift:18:20:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \            result.append(i - 1)\n            ~~~~~~ ^\n/tmp/tmpxlbpxlre.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = [0]\n    if n%2 == 0 {\n        for i in 0..(n/2)-1\
    \ {\n            pile[(i+1)/2] += (i + 1)\n        }\n        pile[(n+1)/2] =\
    \ n\n    } else {\n        for i in 0..(n/2)-1 {\n            pile[(i+1)/2] +=\
    \ (i + 1)\n        }\n        pile[(n+1)/2] -= n\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyq6q4i9y.swift:15:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 0..(n/2)-1 {\n                  ^~\n \
    \                 ...\n/tmp/tmpyq6q4i9y.swift:20:19: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n        for i in 0..(n/2)-1 {\n        \
    \          ^~\n                  ...\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 2 {\n        return []\n    }\n    \n    var arr = [Int]()\n\
    \    \n    var stones = n\n    var remainder = n % 2\n    \n    // We know the\
    \ number of stones in first level\n    arr.append(stones)\n    \n    // We keep\
    \ adding stones to the next level\n    while n > 1 {\n        stones += 1\n  \
    \      remainder = stones % 2\n        \n        // If the next level has even\
    \ number of stones, \n        // we need to add it to the next level\n       \
    \ if remainder == 0 {\n            stones += 1\n        }\n        \n        //\
    \ We need to increment the remaining number of stones in the next level\n    \
    \    // and remove any remainder of the next level\n        arr.append(stones\
    \ - remainder)\n        n -= 1\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp677pttie.swift:39:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n\tvar result = [Int]()\n\tresult.append(n)\n\n\tswitch n {\n\tcase\
    \ 0, 2, 4:\n\t\tresult.append(3)\n\tcase 1, 3:\n\t\tresult.append(4)\n\tcase 5:\n\
    \t\tresult.append(6)\n\tdefault:\n\t\tlet n = n\n\t\tvar level = 1\n\t\tvar count\
    \ = 1\n\t\tvar next = Int()\n\t\tif n >= 4 {\n\t\t\tn = n / 2\n\t\t}\n\t\tfor\
    \ next < n {\n\t\t\tif n % 2 == 0 {\n\t\t\t\tcount = count + 1\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tcount = count + 2\n\t\t\t}\n\t\t\tlevel = level + 1\n\t\t\tnext\
    \ = next + 1\n\t\t}\n\n\t\tlet pileCount = count / level\n\t\tif pileCount % 2\
    \ == 0 {\n\t\t\tresult.append(pileCount)\n\t\t}\n\t\telse {\n\t\t\tresult.append(pileCount\
    \ - 1)\n\t\t}\n\t}\n\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpstckr6p3.swift:31:12: error: expected 'in' after for-each pattern\n\
    \                for next < n {\n                         ^\n/tmp/tmpstckr6p3.swift:31:12:\
    \ error: unary operator cannot be separated from its operand\n               \
    \ for next < n {\n                         ^~\n                          \n/tmp/tmpstckr6p3.swift:29:4:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n                   \
    \     n = n / 2\n                        ^\n/tmp/tmpstckr6p3.swift:24:3: note:\
    \ change 'let' to 'var' to make it mutable\n                let n = n\n      \
    \          ^~~\n                var\n/tmp/tmpstckr6p3.swift:31:12: error: '<'\
    \ is not a prefix unary operator\n                for next < n {\n           \
    \              ^\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var i = 0\n    var levels = [Int]()\n    levels.append(n)\n\
    \    if n % 2 != 0 {\n        while levels[i] < n - 1 {\n            if i+1 <\
    \ levels.count {\n                if levels[i+1] % 2 != 0 {\n                \
    \    levels[i+1] += 1\n                } else {\n                    levels[i+1]\
    \ = 0\n                }\n            } else {\n                if i+1 < levels.count\
    \ {\n                    levels[i+1] += 1\n                } else {\n        \
    \            levels[i+1] = 1\n                }\n            }\n            i\
    \ += 1\n        }\n    } else {\n        while levels[i] < n - 1 {\n         \
    \   if i+1 < levels.count {\n                if levels[i+1] % 2 == 0 {\n     \
    \               levels[i+1] += 1\n                } else {\n                 \
    \   levels[i+1] = 0\n                }\n            } else {\n               \
    \ if i+1 < levels.count {\n                    levels[i+1] += 1\n            \
    \    } else {\n                    levels[i+1] = 1\n                }\n      \
    \      }\n            i += 1\n        }\n    }\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpc4vazw11/tmpc4vazw11.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f799cea3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f799cb9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f799cb9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f799cb997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc4vazw11                        0x0000556bf5b355d2 <unavailable> + 5586

    5    libc.so.6                          0x00007f799c690460 __libc_start_main +
    245

    6    tmpc4vazw11                        0x0000556bf5b35219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660052661
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = Array<Int>()\n    var nextLevel = Array<Int>()\n\
    \    levels.append(n)\n    while levels.last > 1 {\n        if levels.last % 2\
    \ == 1 {\n            nextLevel.append(levels.last)\n            levels.last++\n\
    \        } else {\n            nextLevel.append(levels.last - 2)\n           \
    \ levels.last -= 2\n        }\n    }\n    return nextLevel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6u6y65jp.swift:16:18: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    while levels.last > 1 {\n       \
    \          ^\n/tmp/tmp6u6y65jp.swift:16:18: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    while levels.last > 1\
    \ {\n                 ^\n                      ?? <#default value#>\n/tmp/tmp6u6y65jp.swift:16:18:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    while levels.last > 1 {\n                 ^\n                   \
    \  !\n/tmp/tmp6u6y65jp.swift:17:19: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if levels.last % 2 == 1 {\n \
    \                 ^\n/tmp/tmp6u6y65jp.swift:17:19: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        if levels.last\
    \ % 2 == 1 {\n                  ^\n           (           ?? <#default value#>)\n\
    /tmp/tmp6u6y65jp.swift:17:19: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if levels.last % 2 == 1 {\n  \
    \                ^\n                      !\n/tmp/tmp6u6y65jp.swift:18:37: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \           nextLevel.append(levels.last)\n                                  \
    \  ^\n/tmp/tmp6u6y65jp.swift:18:37: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            nextLevel.append(levels.last)\n\
    \                                    ^\n                                     \
    \    ?? <#default value#>\n/tmp/tmp6u6y65jp.swift:18:37: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            nextLevel.append(levels.last)\n\
    \                                    ^\n                                     \
    \   !\n/tmp/tmp6u6y65jp.swift:19:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            levels.last++\n                       ^~\n\
    /tmp/tmp6u6y65jp.swift:21:37: error: value of optional type 'Int?' must be unwrapped\
    \ to a value o"
  stdout: ''
  timestamp: 1660052661
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 0 {\n        return []\n    }\n\n    var levels = [Int]()\n\
    \    var n = n\n\n    for _ in 0 ..< n {\n        if n &% 2 == 0 {\n         \
    \   levels.append(n)\n        }\n\n        n = n + 2\n    }\n\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9sfc5xz_.swift:21:14: error: cannot find operator '&%' in scope\n\
    \        if n &% 2 == 0 {\n             ^~\n"
  stdout: ''
  timestamp: 1660052660
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n)\n        .map { i in (i+1) % 2 == 0 ? n : n*2\
    \ }\n        .reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp7ternsvu.swift:15:10: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n        .reverse()\n~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660052661
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(stride(from: n, to: n, by: 2)).map { $0 + $1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmd3hineo.swift:13:53: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    return Array(stride(from:\
    \ n, to: n, by: 2)).map { $0 + $1 }\n                                        \
    \            ^\n"
  stdout: ''
  timestamp: 1660052661
