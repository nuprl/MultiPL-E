name: HumanEval_79_decimal_to_binary
language: swift
prompt: "\n/// You will be given a number in decimal form and your task is to convert\
  \ it to\n/// binary format. The function should return a string, with each character\
  \ representing a binary\n/// number. Each character in the string will be '0' or\
  \ '1'.\n/// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n/// The extra characters are there to help with the\
  \ format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
  \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
  \ Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\"\
  )\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
  \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
  )"
completions: ["    var result = \"\"\n\n    var base: String = \"\"\n\n    if decimal\
    \ < 2 {\n        result = \"0\"\n    } else if decimal < 10 {\n        base =\
    \ \"b\"\n    } else {\n        base = \"d\"\n    }\n\n    for _ in 0..<decimal\
    \ {\n        result += base\n    }\n\n    return result", "    let decimalToBinary:\
    \ String = \"db\" + String(decimalToBinary(decimal: decimal))\n    return decimalToBinary",
  "    guard decimal.isGreaterThanOrEqualTo(0),\n        let decimalInt = decimal,\n\
    \        decimalInt != 0 else {\n        return \"Invalid Input\"\n    }\n\n \
    \   var binaryString = \"\"\n    let remainder = decimalInt\n    binaryString\
    \ += \"0db\"\n    while remainder > 0 {\n        let remainderInt = remainder\n\
    \        remainder = remainder / 2\n        binaryString += String(remainderInt)\
    \ + \"db\"\n    }\n\n    return binaryString", "    if decimal == 0 {\n      \
    \  return \"db0db\"\n    }\n    var result: String = \"\"\n    var remainder =\
    \ decimal\n    var digit: Int = 0\n    while remainder != 0 {\n        remainder,\
    \ remainderDigit = quotient(remainder)\n        digit = remainderDigit\n     \
    \   result += String(repeating: \"0\", count: digit + 1).prefix(2)\n    }\n  \
    \  return result", "    var binary: String = \"\"\n    var remainder: Int\n  \
    \  var currentValue: Int = 0\n\n    while decimal > 0 {\n        remainder = decimal\
    \ % 2\n        currentValue = (decimal - remainder) / 2\n        binary = String(repeatElement(\"\
    0\", currentValue) + binary)\n        decimal = remainder\n    }\n\n    return\
    \ binary", '    return decimal_to_binary(decimal, false)', "    var binaryString\
    \ = \"db\"\n    for i in 0..<decimal {\n        binaryString = \"0\" + binaryString\n\
    \    }\n    return binaryString", "    // Complete the code here!\n    let binary:\
    \ String = \"\"\n    var pow: Int = 0\n    \n    for num in binary.characters\
    \ {\n        let currentBin = num & 1\n        \n        if pow == 1 {\n     \
    \       binary += String(currentBin)\n        } else if pow != 0 {\n         \
    \   binary += String(currentBin << pow & 1)\n        }\n        \n        pow\
    \ *= 2\n    }\n    \n    let dbStr = binary\n    \n    return String(dbStr.dropFirst())",
  "    var result = \"0\"\n\n    var remainder = decimal\n\n    while remainder >\
    \ 0 {\n        var remainder2 = remainder\n        var i = 0\n\n        while\
    \ remainder2 > 0 {\n            i += remainder2 % 2\n            remainder2 =\
    \ remainder2 / 2\n        }\n\n        if i == 0 {\n            result = \"1\"\
    \ + result\n        }\n\n        if i == 1 {\n            result = \"0\" + result\n\
    \        }\n\n        remainder = remainder - remainder2\n    }\n\n    return\
    \ result + stringFromInt(remainder)", "    if decimal < 0 || decimal > 255 {\n\
    \        print(\"Invalid decimal to binary conversion: \\(decimal)\\n\" +\n  \
    \          \"Valid range is 0 to 255\")\n    }\n    var binaryString = \"\"\n\
    \    var decimalIndex = decimal\n    var nextBinaryDigit = 0\n\n    for _ in 0..<8\
    \ {\n        if decimalIndex > 0 {\n            binaryString += \"0\"\n      \
    \  }\n        let remainder = decimalIndex % 2\n        decimalIndex = (decimalIndex\
    \ - remainder) / 2\n        if decimalIndex != 0 {\n            binaryString +=\
    \ String(remainder)\n        }\n        nextBinaryDigit = remainder ? 1 : 0;\n\
    \        binaryString += String(nextBinaryDigit)\n    }\n\n    return binaryString",
  "    func bitsToString(bits: Int, start: Int) -> (String, Int) {\n        var result:\
    \ String = \"\"\n        var pos = start\n\n        for number in bits {\n   \
    \         if number > 0 {\n                result = result + \"1\"\n         \
    \   } else {\n                result = result + \"0\"\n            }\n       \
    \ }\n        return (result, pos)\n    }\n\n    if decimal < 2 {\n        return\
    \ \"\"\n    }\n\n    var binary = String()\n\n    if decimal > 1 {\n        for\
    \ index in 0..<decimal - 1 {\n            binary = binary + bitsToString(Int(pow(2,\
    \ index)), 0)\n        }\n    }\n\n    binary = binary + bitsToString(Int(pow(2,\
    \ decimal)), decimal)\n    binary = binary + \"db\"\n\n    return binary", " \
    \   let decimalString = String(decimal)\n    var result = \"\"\n    for _ in 0..<decimalString.count\
    \ {\n        result = \"0\" + result\n    }\n    return \"db\" + result + \"db\"",
  '    return binary_to_decimal(binary: decimal_to_binary(binary: decimal))', "  \
    \  guard decimal >= 1 && decimal <= 4294967295 else { return \"\" }\n    var result\
    \ = \"\"\n    var binary: String = \"0\"\n    while decimal != 0 {\n        let\
    \ remainder = decimal % 2\n        decimal = decimal >> 1\n        binary = String(repeating:\
    \ binary, count: remainder) + String(binary)\n    }\n    guard decimal != 0 else\
    \ { return \"\" }\n    result = \"db\" + String(binary)\n    return result", " \
    \   if decimal <= 1 {\n        return \"0\"\n    }\n\n    var binary = \"0\"\n\
    \    let binary_digit = UInt8(decimal)\n\n    while binary != \"0\"{\n       \
    \ let remainder = binary_digit % 2\n        binary = String(remainder + String(binary))\n\
    \        binary_digit /= 2\n    }\n    if binary_digit > 0 {\n        binary +=\
    \ String(binary_digit)\n    }\n    binary += \"db\"\n\n    return binary", " \
    \   let numberString = String(decimal)\n    if numberString.count < 2 {\n    \
    \    return String()\n    }\n    let zeroString: String = String(0)\n    let stringBuilder\
    \ = StringBuilder()\n    stringBuilder.appendLiteral(\"db\")\n    for char in\
    \ numberString.unicodeScalars {\n        stringBuilder.append(String(char))\n\
    \    }\n    if decimal < 2 {\n        stringBuilder.append(zeroString)\n    }\n\
    \    stringBuilder.appendLiteral(\"db\")\n    return stringBuilder.toString()",
  "    if decimal > 255 {\n        return String(\"invalid\")\n    }\n\n    var decimalAsBinary:\
    \ String = \"\"\n    var remainder: Int\n\n    for remainder = decimal; remainder\
    \ > 0; remainder /= 2 {\n        decimalAsBinary += \"1\"\n    }\n    decimalAsBinary\
    \ += \"0\"\n\n    return String(decimalAsBinary) + String(\"db\")", "    // TODO:\
    \ Convert to binary without adding more constants\n    let binary: [String] =\
    \ [\"0\", \"1\", \"10\", \"11\", \"100\", \"101\", \"110\", \"111\"]\n\n    return\
    \ decimal.description\n        .prefix(3)\n        .map({ binary })\n        .joined(separator:\
    \ \"\")", "    let binaryNum = String()\n    binaryNum += Character(decimal)\n\
    \    for _ in binaryNum {\n        binaryNum += Character(0)\n    }\n    if decimal\
    \ == 0 {\n        return binaryNum\n    }\n    var i = 0\n    while decimal >\
    \ 0 {\n        if decimal % 2 == 0 {\n            binaryNum += Character(1)\n\
    \        } else {\n            binaryNum += Character(0)\n        }\n        decimal\
    \ /= 2\n        i += 1\n    }\n    return binaryNum + String(repeating: \"1\"\
    , count: i) + \"db\"", "    if decimal == 0 {\n        return \"0\"\n    }\n \
    \   var binary = \"\"\n    var power = 0\n    var tempDecimal = decimal\n    for\
    \ _ in 0..<decimal.bitWidth {\n        let decimal = tempDecimal\n        tempDecimal\
    \ = tempDecimal * 2\n        let remainder = tempDecimal % 2\n        binary +=\
    \ remainder\n        if power < decimal.bitWidth {\n            binary = String(binary)\
    \ + String(decimal.decimal)\n        }\n        power += 1\n    }\n    return\
    \ String(binary) + String(decimal.decimal) + String(tempDecimal)", '    return
    decimalToBinary(decimal, len(decimal))', "    let b1 = UInt8(decimal & 0b1)\n\
    \    let b2 = UInt8(decimal >> 1 & 0b1)\n    let b3 = UInt8(decimal >> 2 & 0b1)\n\
    \    let b4 = UInt8(decimal >> 3 & 0b1)\n    let b5 = UInt8(decimal >> 4 & 0b1)\n\
    \    let b6 = UInt8(decimal >> 5 & 0b1)\n    let b7 = UInt8(decimal >> 6 & 0b1)\n\
    \    let b8 = UInt8(decimal >> 7 & 0b1)\n    let b9 = UInt8(decimal >> 8 & 0b1)\n\
    \    let b10 = UInt8(decimal >> 9 & 0b1)\n    let b11 = UInt8(decimal >> 10 &\
    \ 0b1)\n    let b12 = UInt8(decimal >> 11 & 0b1)\n    let b13 = UInt8(decimal\
    \ >> 12 & 0b1)\n    let b14 = UInt8(decimal >> 13 & 0b1)\n    let b15 = UInt8(decimal\
    \ >> 14 & 0b1)\n    let b16 = UInt8(decimal >> 15 & 0b1)\n    let b17 = UInt8(decimal\
    \ >> 16 & 0b1)\n    let b18 = UInt8(decimal >> 17 & 0b1)\n    let b19 = UInt8(decimal\
    \ >> 18 & 0b1)\n    let b20 = UInt8(decimal >> 19 & 0b1)\n    let b21 = UInt8(decimal\
    \ >> 20 & 0b1)\n    let b22 = UInt8(decimal >> 21 & 0b1)\n    let b23 = UInt8(decimal\
    \ >> 22 & 0b1)\n    let b24 = UInt8(decimal >> 23 & 0b1)\n    let b25 = UInt8(decimal\
    \ >> 24 & 0b1)\n    let b26 = UInt8(decimal >> 25 & 0b1)\n    let b27 = UInt8(decimal\
    \ >> 26 & 0b1)\n    let b28 = UInt8(decimal >> 27 & 0b1)\n    let b29 = UInt8(decimal\
    \ >> 28 & 0b1)\n    let b30 = UInt8(decimal >> 29 & 0b1)\n    let b31 = UInt8(decimal\
    \ >> 30 & 0b1)\n    let b32 = UInt8(decimal >> 31 & 0b1)\n\n    return String(b1)\
    \ + String(b2) + String(b3) + String(b4) + String(b5) + String(b6) + String(b7)\
    \ + String(b8) + String(b9) + String(b10) + String(b11) + String(b12) + String(b13)\
    \ + String(b14) + String(b15) + String(b16) + String(b17) + String(b18) + String(b19)\
    \ + String(b20) + String(b21) + String(b22) + String(b23) + String(b24) + String(b25)\
    \ + String(b26) + String(b27) + String(b28) + String(b", "    var binary = \"\"\
    \n    for _ in 0..decimal.truncatingRemainder(dividingBy: 2) {\n        binary\
    \ += \"0\"\n    }\n    binary += \"1\"\n    if decimal.truncatingRemainder(dividingBy:\
    \ 2) == 0 {\n        binary += \"b\"\n    }\n    return binary", "    // Convert\
    \ decimal to binary\n    var binaryString = \"\"\n    for d in decimal.binaryRepresentation(length:\
    \ decimal.bitSize()) {\n        if d == '0' {\n            binaryString = \"\\\
    (binaryString)\\(d)\"\n        } else if d == '1' {\n            binaryString\
    \ = \"\\(binaryString)\\(d)\"\n        } else {\n            print(\"Not a binary\
    \ number\")\n            return \"\"\n        }\n    }\n    // Add db at the beginning\n\
    \    var firstChar = binaryString[0]\n    binaryString = \"db\\(firstChar)\" +\
    \ binaryString\n\n    // Add db at the end\n    if binaryString.count < decimal.bitSize()\
    \ {\n        binaryString = binaryString + String()\n    }\n    binaryString =\
    \ \"\\(binaryString)db\"\n    return binaryString", "    var binary = [String]()\n\
    \    let decimalString = String(decimal)\n    let decimalCount = decimalString.unicodeScalars\n\
    \    var binaryString = [String]()\n    var decimalValue = decimal\n    let length\
    \ = decimalCount.count\n    var decimalCountChar = String()\n    for _ in 0 ..<\
    \ length {\n        if decimalValue > 1 {\n            decimalValue--\n      \
    \  } else if decimalValue == 0 {\n            binaryString = binaryString + [\"\
    0\"]\n            decimalCountChar = decimalCountChar + [\"0\"]\n        } else\
    \ {\n            binaryString = binaryString + [\"1\"]\n            decimalCountChar\
    \ = decimalCountChar + [\"1\"]\n        }\n    }\n    binary = binaryString +\
    \ [\"db\"] + decimalCountChar\n    return String(binary)", "    if decimal < 0\
    \ || decimal > 1<<64 {\n        print(\"Error: decimal must be between 0 and 1<<64\"\
    )\n        return \"\"\n    }\n    var binary = \"\"\n    var exponent = 64 -\
    \ decimal.bitWidth\n    for _ in 0..exponent-1 {\n        binary += \"0\"\n  \
    \  }\n    for _ in decimal.binaryPrefix {\n        binary += \"1\"\n    }\n  \
    \  for _ in 0..decimal.bitWidth-1 {\n        binary += \"0\"\n    }\n    return\
    \ binary", "    let remainder = decimal%2\n    let binaryString = decimal.truncatingRemainder(dividingBy:\
    \ 2)\n    return String(repeating: \"0\", count: binaryString.count) + binaryString\
    \ + String(repeating: \"1\", count: remainder.count) + \"db\"", "    if decimal\
    \ == 0 {\n        return \"0\"\n    }\n    var binary_string: String = \"\"\n\n\
    \    func addBinaryDigit(digit: Int) {\n        if digit != 0 {\n            if\
    \ binary_string == \"\" {\n                binary_string = \"1\"\n           \
    \ } else {\n                binary_string = String(binary_string, \"01\")\n  \
    \          }\n        }\n    }\n\n    if decimal > 1 {\n        func divideAndAddBinaryDigit(decimal:\
    \ Int, decimalToBinary: Int) -> Int {\n            let quotient = decimal / decimalToBinary\n\
    \            let remainder = decimal % decimalToBinary\n\n            addBinaryDigit(quotient)\n\
    \            addBinaryDigit(remainder)\n            return quotient + remainder\n\
    \        }\n\n        let decimalToBinary = pow(10, decimal.log2() + 1)\n\n  \
    \      for _ in 0..<decimal {\n            binary_string = String(binary_string,\
    \ \"01\")\n        }\n\n        for _ in 0..<decimal {\n            binary_string\
    \ = String(binary_string, binary_string, \"01\")\n        }\n\n        addBinaryDigit(divideAndAddBinaryDigit(decimal,\
    \ decimalToBinary))\n        addBinaryDigit(divideAndAddBinaryDigit(decimalToBinary,\
    \ decimalToBinary))\n\n        if decimal != 0 {\n            binary_string =\
    \ String(binary_string, \"01\")\n        }\n    }\n    return binary_string",
  "    if decimal <= 0 {\n        return \"Error\"\n    }\n    let decimalString =\
    \ String(decimal)\n    var result = \"db\"\n    for i in 0..<decimalString.count\
    \ {\n        result += \"0\"\n    }\n    for i in 1..<decimalString.count {\n\
    \        result += decimalString[decimalString.startIndex..<decimalString.startIndex.advancedBy(i)]\n\
    \    }\n    result += decimalString.count < decimalString.startIndex.advancedBy(decimalString.count)\
    \ ? \"1\" : \"0\"\n    return result", "    let result = (decimal.to_bits() as\
    \ NSNumber).stringValue\n    return result.padStart(32, '0')", "    var binary:\
    \ String = \"\"\n    if decimal > 1 {\n        let remainder = decimal % 2\n \
    \       var remainderDecimal = 0\n        var remainderBinary: String = \"\"\n\
    \        while remainderDecimal != 0 {\n            remainderDecimal = decimal\
    \ % 2\n            if remainderDecimal > 1 {\n                remainderDecimal\
    \ = remainderDecimal - 1\n            }\n            remainderBinary = String(remainderDecimal\
    \ + 1) + remainderBinary\n            decimal = decimal / 2\n        }\n     \
    \   var remainderBinaryWithDecimal = String(remainderDecimal + 1) + remainderBinary\n\
    \        while remainderBinaryWithDecimal.count < 2 {\n            remainderBinaryWithDecimal\
    \ = \"0\" + remainderBinaryWithDecimal\n        }\n        binary = remainderBinaryWithDecimal\n\
    \    }\n    return String(binary)", "    var str = String()\n    var i = 0\n\n\
    \    while decimal > 0 {\n        str += String(decimal%2)\n        decimal /=\
    \ 2\n    }\n    str += String(decimal)\n    str += 'b'\n\n    return str", " \
    \   var binary = \"\"\n    var power = 0\n\n    for char in String(decimal).unicodeScalars\
    \ {\n        binary += String(char)\n        if power < 10 {\n            binary\
    \ += \"0\"\n        } else {\n            binary += \"1\"\n        }\n       \
    \ power++\n    }\n\n    let prefix = \"db\"\n    let suffix = \"db\"\n    let\
    \ startIndex = binary.startIndex.advancedBy(prefix.count)\n    let endIndex =\
    \ binary.endIndex.advancedBy(suffix.count)\n\n    return String(binary.substringWithRange(startIndex..<endIndex))",
  "    var result = \"\"\n    if decimal > 0 {\n        let remainder = decimal %\
    \ 2\n        for index in 0..<8 {\n            if index == 0 {\n             \
    \   result += (remainder == 0) ? \"0\" : \"1\"\n            } else {\n       \
    \         result += (remainder == 0) ? \"1\" : \"0\"\n            }\n        \
    \    remainder = decimal / 2\n        }\n    }\n    result.insert((8-result.count),\
    \ \"\")\n    return result", "\treturn convert(decimal, 2)", "    if decimal <=\
    \ 0 {\n        return \"Invalid number\"\n    }\n\n    let mut result = \"\"\n\
    \    let pow = UInt8(UInt32(decimal.bitwiseShiftRight(32).log2()))\n    let remainder\
    \ = decimal - UInt32(pow)\n    for i in 0..<pow+1 {\n        result += String(UInt8(pow))\n\
    \    }\n    result += String(UInt8(remainder))\n    return result", "    let n\
    \ = decimal / 2\n    let result = \"\"\n    for index in 0..<n {\n        let\
    \ c = decimal % 2 == 0 ? \"1\" : \"0\"\n        result += c\n        decimal =\
    \ decimal / 2\n    }\n    if n > 0 {\n        let d = decimal % 2 == 0 ? \"1\"\
    \ : \"0\"\n        result += \"db\" + d\n    }\n    return result", "    let numberString\
    \ = String(decimal)\n    let stringArray = numberString.characters.map { String($0)\
    \ }\n    let extraChars = stringArray[stringArray.count-1] == \"0\" ? \"db\" :\
    \ \"\"\n    let string = stringArray[0] + extraChars + stringArray[stringArray.count-1]\n\
    \    return string", "    let decimalString = String(decimal)\n    var binaryString:\
    \ String = \"\"\n\n    for _ in 0..<decimalString.count {\n        var digit:\
    \ Int = 0\n        if decimalString.contains(\"-\") {\n            digit = decimalString.index(of:\
    \ \"-\")!\n            decimalString = decimalString.substring(from: decimalString.index(of:\
    \ \"-\")!)\n        } else {\n            digit = decimalString.index(of: \"0\"\
    )!\n        }\n        digit = digit % 2\n        binaryString = String(digit)\
    \ + binaryString\n    }\n\n    if decimalString.count > 0 {\n        binaryString\
    \ = \"db\" + binaryString\n    }\n\n    return binaryString", "    var binary\
    \ = \"\"\n    for digit in decimal..binary() {\n        binary += String(digit)\n\
    \    }\n\n    return \"db\" + binary", "    if decimal < 1 || decimal > 128 {\n\
    \        panic(\"Invalid input\")\n    }\n\n    var binaryString = String()\n\
    \    var remainder = decimal\n    var divisor = 0\n\n    while remainder != 0\
    \ {\n        var reminder: Int\n        if remainder > 0 {\n            reminder\
    \ = 0\n        } else {\n            reminder = 128\n        }\n        divisor++\n\
    \        binaryString += \"0\"\n        remainder = reminder / divisor\n    }\n\
    \    return binaryString", "    if decimal < 2 {\n        return \"\"\n    }\n\
    \    var result = \"db\"\n    if decimal < 4 {\n        result = result + decimal_to_binary(decimal\
    \ >> 2)\n    } else {\n        result = result + decimal_to_binary(decimal >>\
    \ 2) + decimal_to_binary(decimal >> 4)\n    }\n    return result", "    var result\
    \ = \"\"\n    var remainder = decimal\n    while remainder != 0 {\n        if\
    \ remainder & 1 == 1 {\n            result = \"1\" + result\n        }\n     \
    \   remainder >>= 1\n    }\n    return result", "    var result = String()\n \
    \   if decimal <= 0 {\n        return \"db \" + \"0\"\n    }\n    if decimal <\
    \ 2 {\n        result.append(\"0\")\n    }\n    for _ in 0..(decimal - 1) {\n\
    \        result.append(\"1\")\n    }\n    result.append(\"db\")\n    return result",
  "    let result = \"\"\n    var remainder = decimal\n    for _ in 0..<32 {\n   \
    \     result += \"0\"\n    }\n    while remainder != 0 {\n        remainder =\
    \ remainder % 2\n        result += String(UInt8(remainder))\n    }\n    if decimal\
    \ >= 100 {\n        result += \"db\"\n    }\n    return result", "    if decimal\
    \ < 2 {\n        return \"0\"\n    }\n    if decimal < 4 {\n        let decimal_to_binary_recurse:\
    \ (Int) -> String -> String = { decimal -> String in return decimal_to_binary_recurse(decimal\
    \ - 1) + binary_digits[decimal]! }\n        return decimal_to_binary_recurse(decimal\
    \ - 2) + \"db\"\n    }\n    let decimal_to_binary_recurse: (Int) -> String ->\
    \ String = { decimal -> String in return decimal_to_binary_recurse(decimal - 4)\
    \ + binary_digits[decimal]! }\n    return decimal_to_binary_recurse(decimal -\
    \ 8) + \"db\"", '    return decimal_to_binary(decimal: decimal.uint32(), maxDecimalDigits:
    64)', "    var result = \"db\"\n    let digit = Int(\"\\(decimal)\", radix: 16)!\n\
    \    for i in 0..<Int(log(Double(digit)!)/log(2.0)) ~= 0 {\n        let power\
    \ = pow(2, Double(i))\n        let next = pow(digit, power)\n        result =\
    \ String(next) + result\n    }\n    \n    return result[1..<result.count] + result",
  "    var string = \"\"\n    \n    for _ in 0..decimal {\n        string = string\
    \ + \"1\"\n    }\n    \n    var power = 1\n    for _ in 0..decimal {\n       \
    \ power = power * 2\n        string = string + \"0\"\n    }\n    \n    for _ in\
    \ 0..decimal {\n        string = string + String(power)\n    }\n    \n    string\
    \ = string + \"db\"\n    \n    return string", "    var binary = String()\n  \
    \  var power = String()\n    var power = String()\n    power = String(decimal)\n\
    \    power = \"1\" + power\n    var decimalRemainder = decimal\n    while decimalRemainder\
    \ > 0 {\n        if decimalRemainder % 2 == 0 {\n            binary += \"1\"\n\
    \        } else {\n            binary += \"0\"\n        }\n        decimalRemainder\
    \ = decimalRemainder / 2\n    }\n    binary = \"db\" + binary + power\n    return\
    \ binary", "    guard decimal < 10 else {\n        return \"Invalid decimal\"\n\
    \    }\n    \n    let stringOfBinary: String = String()\n    \n    var currentBinary:\
    \ String = \"\"\n    var currentDecimal: Int = 0\n    \n    for _ in 0..<decimal\
    \ {\n        currentDecimal *= 10\n        currentBinary += String(Int((currentDecimal\
    \ / decimal)))\n        currentDecimal %= decimal\n    }\n    \n    if currentDecimal\
    \ > 0 {\n        currentBinary += String(Int((currentDecimal / decimal)))\n  \
    \  }\n    \n    if currentDecimal >= 1 {\n        currentBinary += \"1\"\n   \
    \ }\n    \n    if currentBinary == \"\" {\n        currentBinary = \"0\"\n   \
    \ }\n    \n    return currentBinary + stringOfBinary", "    var binary: String\
    \ = String()\n    if decimal < 1 {\n        decimal = 1\n    }\n\n    var remainder\
    \ = decimal\n    for _ in 0..<6 {\n        remainder = remainder * 2\n    }\n\
    \    var dividend = remainder\n    for _ in 0..<6 {\n        dividend = dividend\
    \ / 2\n    }\n    binary = String(dividend).reversed()\n    for _ in 0..<6 {\n\
    \        binary = binary[0]\n        binary = binary + \"0\"\n    }\n    if decimal\
    \ != 0 {\n        binary = binary + \"1\"\n    }\n    return binary", "    guard\
    \ decimal >= 1 && decimal <= 32 else { return \"\" }\n    let decimal2 = decimal\
    \ - 1\n    var result = \"\"\n    for i in 0...decimal2 {\n        result += \"\
    0\"\n    }\n    for i in 1...decimal2 {\n        result += \"1\"\n    }\n    return\
    \ result", "    var binary = \"\"\n    let n = decimal / 2\n\n    for index in\
    \ stride(from: 0, to: n, by: 1) {\n        let decimal = decimal * 2\n       \
    \ if decimal == 0 {\n            binary += \"0\"\n        } else if decimal <\
    \ 2 {\n            binary += \"1\"\n        } else {\n            binary += \"\
    0\"\n        }\n    }\n    binary += \"0\"\n    binary += String(decimal)\n\n\
    \    if decimal > 0 {\n        binary += \"1\"\n    }\n\n    return binary", "\t\
    switch decimal {\n\tcase 0:\n\t\treturn \"0\"\n\tcase 1:\n\t\treturn \"1\"\n\t\
    default:\n\t\tlet binary = [String]()\n\t\tlet remainder = decimal\n\t\tlet decimalDigits\
    \ = decimal.bit_length()\n\t\tlet log2 = decimalDigits\n\n\t\tlet mut power =\
    \ 1\n\t\tfor _ in 0..decimalDigits {\n\t\t\tpower = power << 1\n\t\t}\n\n\t\t\
    for _ in 0..decimalDigits {\n\t\t\tpower = power >> 1\n\t\t}\n\n\t\tlet digit\
    \ = remainder % power\n\t\tremainder = remainder / power\n\n\t\tfor _ in 0..decimalDigits\
    \ {\n\t\t\tlet digit = remainder % power\n\t\t\tremainder = remainder / power\n\
    \t\t\tif digit != 0 {\n\t\t\t\tbinary.append(String(digit))\n\t\t\t} else {\n\t\
    \t\t\tbinary.append(\"0\")\n\t\t\t}\n\t\t}\n\n\t\tif log2 >= 3 {\n\t\t\tbinary.append(\"\
    db\")\n\t\t}\n\t\tswitch log2 {\n\t\tcase 0:\n\t\t\tbinary.append(\"0\")\n\t\t\
    case 1:\n\t\t\tbinary.append(\"1\")\n\t\tcase 2:\n\t\t\tbinary.append(\"10\")\n\
    \t\tcase 3:\n\t\t\tbinary.append(\"11\")\n\t\tcase 4:\n\t\t\tbinary.append(\"\
    100\")\n\t\tcase 5:\n\t\t\tbinary.append(\"101\")\n\t\tcase 6:\n\t\t\tbinary.append(\"\
    110\")\n\t\tcase 7:\n\t\t\tbinary.append(\"111\")\n\t\tdefault:\n\t\t\tbinary.append(\"\
    1000\")\n\t\t}\n\t\treturn binary.joinWithSeparator(\"0\")\n\t}", "    var decimalAsBinaryAsString\
    \ = String(decimal)\n    let lastIndex = decimalAsBinaryAsString.characters.count-1\n\
    \n    guard decimalAsBinaryAsString.characters.count > 1 else {\n        return\
    \ decimalAsBinaryAsString\n    }\n    return decimalAsBinaryAsString\n       \
    \ .dropLast()\n        .reduce(\"\",{ (binaryString, char) -> String in\n    \
    \        if char == \"0\" {\n                return binaryString + \"0\"\n   \
    \         } else {\n                return binaryString + \"1\"\n            }\n\
    \        })\n        .replacingOccurrences(of: \"db\", with: \"\")\n        .padding(toLength:\
    \ lastIndex, withPad: \"0\", startingAt: 0)", "    var str = String()\n    for\
    \ digit in String(decimal)\n    {\n        let char = digit == \"0\" || digit\
    \ == \"1\" ? \"0\" : \"1\"\n        str.append(char)\n    }\n    if str == \"\"\
    \ {\n        str = \"db0\"\n    }\n    return str + \"db\"", "    var result =\
    \ \"\"\n    let num_bin = decimal / 2\n    if num_bin == 0 {\n        result =\
    \ \"0\"\n    } else {\n        let num_str = String(num_bin)\n        let num_dec\
    \ = String(decimal)\n        if num_dec == \"0\" && num_str != \"\" {\n      \
    \      result = \"0\"\n        } else {\n            for (index, char) in num_str.enumerated()\
    \ {\n                if char == \"1\" {\n                    result += \"1\"\n\
    \                } else {\n                    result += String([num_bin%2, num_bin/2])\n\
    \                }\n            }\n        }\n    }\n    if decimal > 0 {\n  \
    \      result = \"db\" + result + String(decimal)\n    }\n    return result",
  "    var result = \"\"\n\n    if decimal < 2 {\n        return result\n    }\n\n\
    \    var remainder = decimal % 2\n\n    for _ in 0..<decimal - remainder {\n \
    \       result = \"0\" + result\n    }\n\n    if remainder > 0 {\n        result\
    \ = \"1\" + result\n    }\n\n    return result", '    return strconv.FormatInt(decimal,
    2)', "    var binary = \"\"\n    var decimalDigit = decimal\n\n    if decimalDigit\
    \ < 0 {\n        decimalDigit = -decimalDigit\n        binary = \"-\"\n    }\n\
    \n    binary = \"db\"\n\n    for decimalDigit in (decimalDigit % 2) == 0 ? 0 :\
    \ decimalDigit % 2 {\n        binary = String(decimalDigit % 2) + binary\n   \
    \ }\n    if decimalDigit > 0 {\n        binary = String(decimalDigit % 2) + binary\n\
    \    }\n\n    if decimalDigit == 0 {\n        return binary\n    }\n    if decimal\
    \ < 1 {\n        return String(decimalDigit % 2) + binary\n    }\n    return binary",
  '    return bin_to_decimal(bin_to_binary(decimal))', "    let binary = (String(decimal,\
    \ radix: 2)) as! String\n    var result = \"\"\n\n    for index in 0..<binary.count\
    \ {\n        if index > 0 {\n            result += String(decimal, radix: 2)\n\
    \        }\n        result += binary[index]\n    }\n    result += String(decimal,\
    \ radix: 2)\n\n    return result", "    var binaryString = \"\"\n    let decimalInt\
    \ = (decimal as Int64)._bridgeToObjectiveC()\n    for i in 0 ..< (decimalInt.bits\
    \ / 8) {\n        let digit = (decimalInt._getBits(index: 8 * i) << 4) + decimalInt._getBits(index:\
    \ 8 * i + 8)\n        if digit != 0 {\n            binaryString += String(format:\
    \ \"%c\", digit > 0 ? \"1\" : \"0\")\n        } else {\n            binaryString\
    \ += \"0\"\n        }\n    }\n    return binaryString._bridgeToObjectiveC()",
  "    var binary: String = \"\"\n    var remainder: Int = decimal\n    var remainder2:\
    \ Int = 1\n    while remainder > 0 {\n        remainder2 -= 1\n        remainder,\
    \ remainder2 = remainder2 > 1 ? (remainder * 2) + (remainder2 - 1), remainder\
    \ > 1 ? (remainder * 10) : remainder * 10\n        binary += \"1\"\n    }\n  \
    \  while remainder2 > 0 {\n        remainder2, remainder = remainder2 > 1 ? (remainder2\
    \ * 10) : 1, remainder > 1 ? (remainder * 10) : remainder * 10\n        binary\
    \ += \"0\"\n    }\n    return \"db\" + binary + \"db\"", "    var binaryString\
    \ = \"\"\n    binaryString.append(\"db\")\n    var decimalValue = decimal\n  \
    \  for decimalValue > 0 {\n        binaryString.append(String(decimalValue % 2))\n\
    \        decimalValue /= 2\n    }\n    return binaryString", "    switch decimal\
    \ {\n    case 0: return \"0\"\n    case 1: return \"1\"\n    case 2: return \"\
    11\"\n    case 3: return \"111\"\n    case 4: return \"1111\"\n    case 5: return\
    \ \"11111\"\n    case 6: return \"111111\"\n    case 7: return \"1111111\"\n \
    \   case 8: return \"11111111\"\n    case 9: return \"111111111\"\n    default:\n\
    \        var binaryString: String = \"\"\n        for number in stride(from: 9,\
    \ through: 1, by: -1) {\n            if decimal % 2 == 0 {\n                binaryString\
    \ += \"1\"\n            } else {\n                binaryString += \"0\"\n    \
    \        }\n            decimal /= 2\n        }\n        return binaryString +\
    \ \"db\"\n    }", "    var result = \"\"\n    var power = 1\n    for i in 0..<decimal\
    \ {\n        if decimal > power {\n            result += \"0\"\n            power\
    \ = 1\n        } else {\n            result += String(UInt8(decimal/power))\n\
    \            power = power * 2\n        }\n    }\n    result += \"0\"\n    result\
    \ += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"0\"\n  \
    \  result += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"\
    0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result\
    \ += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"b\"\n  \
    \  result += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"\
    b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result\
    \ += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"0\"\n  \
    \  result += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"\
    0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result\
    \ += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"b\"\n  \
    \  result += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"\
    b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result\
    \ += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"0\"\n  \
    \  result += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"\
    0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result\
    \ += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"b\"\n  \
    \  result += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"\
    b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result\
    \ += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"0\"\n  \
    \  result += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"\
    0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"b\"\n    result\
    \ += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"b\"\n  \
    \  result += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result += \"\
    b\"\n    result += \"0\"\n    result += \"b\"\n    result += \"0\"\n    result\
    \ += \"b\"\n    result += \"0\"\n    result ", "    var binaryStr = \"\"\n   \
    \ for _ in 0..decimal/2 {\n        binaryStr += \"0\"\n    }\n    for _ in 1..decimal/2\
    \ {\n        binaryStr += \"1\"\n    }\n    binaryStr += \"db\"\n    return binaryStr",
  "    var string = \"\"\n    let binary = decimal.binary(digits: 2)\n    for char\
    \ in binary {\n        string += String(char)\n    }\n    return string + binary_to_decimal(binary:\
    \ binary)", '    return binary_to_decimal(decimal_to_binary(decimal))', "    var\
    \ string = \"\"\n    var power = 0\n    var digits = \"\"\n    var remainder =\
    \ 0\n    for _ in 0..decimal.bitLength {\n        power = decimal.bitLength -\
    \ 1 - power\n        remainder = decimal.trailingZeroBits\n        digits = decimal.trailingZeroBitsAsString\n\
    \        string += String(remainder)\n        string += String(digits == \"0\"\
    \ || digits == \"1\" ? power : \"0\")\n        decimal = decimal >> power\n  \
    \  }\n    string += String(digits)\n    string += \"db\"\n    return string",
  "    // TODO: implement this\n    return \"\"", "    var binary: String = String(count:\
    \ decimal, repeatedValue: \"\")\n    if decimal >= 16 {\n        for char in \"\
    0\" to \"z\" {\n            var value: Int = Int(decimal)\n            while value\
    \ > 0 {\n                value /= 2\n                if decimal >= value {\n \
    \                   binary = String(char) + binary\n                }\n      \
    \      }\n        }\n    }\n    return \"db\" + binary + \"db\"", "    var result\
    \ = \"\"\n    var power = 1\n    \n    for _ in 0..(decimal / 2) {\n        if\
    \ decimal % 2 == 0 {\n            result += String(decimal)\n        }\n     \
    \   decimal /= 2\n    }\n    \n    for _ in 0..(decimal % 2) {\n        power\
    \ += 1\n    }\n    \n    for _ in 0..power {\n        result += \"b\"\n    }\n\
    \    \n    return result", "    guard decimal > 0 else {\n        return \"0db\"\
    \n    }\n    let binary = Int(decimal).toBinaryString()\n    return \"db\" + binary[0..binary.count\
    \ - 1]", "    var binaryString = \"\"\n    var remainder = decimal\n\n    while\
    \ remainder > 0 {\n        binaryString += \"0\"\n        remainder = remainder\
    \ % 2\n    }\n\n    while remainder < 0 {\n        binaryString += \"1\"\n   \
    \     remainder = remainder + 2\n    }\n\n    if remainder == 0 {\n        binaryString\
    \ = binaryString[1:]\n    }\n\n    return binaryString + \"db\"", "    if decimal\
    \ > pow(2, 30) {\n        debugPrint(\"decimal overflow\")\n        return \"\"\
    \n    }\n    var result = \"\"\n    for index in 0..<30 {\n        if decimal\
    \ % 2 == 0 {\n            result += String(Int64(decimal))\n            decimal\
    \ /= 2\n        }\n        else {\n            result += String(Int64(decimal%2))\n\
    \            decimal /= 2\n        }\n    }\n    if decimal > 0 {\n        result\
    \ += String(Int64(decimal))\n    }\n    return \"db\" + result + \"db\"", '    return
    decimalToBinary(decimal)', "    let max_digit = UInt32.pow(2.0, UInt32(Decimal.pow(2.0,\
    \ UInt32(decimal.bitLength) - 1)))\n    let mut binary = StringBuilder()\n   \
    \ for i in 0..<decimal.bitLength {\n        binary.append(\"-\")\n        if decimal\
    \ >= max_digit {\n            binary.append(\"0\")\n            binary += String(decimal.trailingZeroBits(Decimal(Int64(1))))\n\
    \            break\n        }\n        let digit = UInt8(decimal % Int64(Decimal(UInt8(UInt8.bitLength))))\n\
    \        binary += String(digit)\n        decimal /= Int64(Decimal(UInt8(UInt8.bitLength)))\n\
    \    }\n    return binary.append(\"-\")", "    let number = decimal.decimalNumber\n\
    \    var binaryString = String()\n\n    // Calculate the number of digits in decimal\n\
    \    let length = pow(10, decimal.decimalDigits) - decimal.decimalDigits\n   \
    \ // Add the appropriate amount of '0' or '1'\n    for _ in 0..<length {\n   \
    \     binaryString += \"0\"\n    }\n\n    // Shift the decimal number to the left\
    \ and add the appropriate '0' or '1'\n    binaryString = binaryString.reversed().joined()\n\
    \    binaryString = binaryString.reversed()\n\n    // Add the 'db' at the beginning\n\
    \    binaryString = \"db\" + binaryString\n    // Add the 'db' at the end\n  \
    \  binaryString += \"db\"\n    return binaryString", "    // Add two extra characters\
    \ at the beginning and end for\n    // easy formatting\n    let result = String(decimal)\n\
    \        .replacingOccurrences(of: \".\", with: \"\")\n        .replacingOccurrences(of:\
    \ \",\", with: \"\")\n\n    // Create the array to store the binary representation\n\
    \    var binaryString = [String]()\n\n    // Iterate through the result\n    for\
    \ i in 0..<result.characters.count {\n        // If this character is a 1\n  \
    \      if result[i] == \"1\" {\n            // Then add it to the binary\n   \
    \         binaryString.append(\"0\")\n        } else {\n            // Else add\
    \ it to the binary\n            binaryString.append(\"1\")\n        }\n    }\n\
    \n    // Append the extra characters\n    binaryString.append(\"db\")\n\n    return\
    \ String(binaryString)", "    var binary = \"\"\n    var decimalToBinaryString\
    \ = \"\"\n    let maxDecimal = 232\n\n    if decimal == 0 {\n        return binary\n\
    \    }\n\n    if decimal > maxDecimal {\n        return binary\n    }\n\n    var\
    \ quotient = decimal / 2\n    var remainder = decimal % 2\n\n    while remainder\
    \ != 0 {\n        quotient = quotient * 2\n        remainder = remainder % 2\n\
    \    }\n\n    while quotient != 0 {\n        quotient = quotient / 2\n       \
    \ binary = String(quotient % 2) + String(binary)\n        quotient = quotient\
    \ / 2\n    }\n\n    binary = binary + \"db\"\n    return binary", "    // Write\
    \ your code here\n    if decimal < 0 || decimal > 2**64-1 {\n        fatalError(\"\
    The decimal value is not within the limits\")\n    }\n    var binaryString = \"\
    \"\n    var i = 0\n    while decimal > 0 {\n        if decimal % 2 == 1 {\n  \
    \          binaryString += \"1\"\n        } else {\n            binaryString +=\
    \ \"0\"\n        }\n        decimal /= 2\n        i += 1\n    }\n    binaryString\
    \ += \"db\" + binaryString[i..<i+4]\n    return binaryString", '    return String(decimalToBinary[decimal])',
  "    guard decimal == Int(decimal) else { return \"\" }\n    let binary = IntToString[decimal]\n\
    \    return String(binary)", "    var result = \"\"\n\n    if decimal <= 0 {\n\
    \        return result\n    }\n\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        var remainderInt = remainder\n        remainderInt = (remainderInt\
    \ / 2)\n        remainder = remainderInt - remainder\n        if remainder > 0\
    \ {\n            result.append(String(remainder))\n        }\n    }\n    result.append(String(remainder))\n\
    \n    return result", '    return decimalToBinary(decimal, 2)', '    return decimalToBinaryImpl(decimal,
    "")', "    let result = String()\n    let bits = Int(decimal).bitPattern\n   \
    \ var power = UInt32(1)\n    let mask = UInt32(1)\n    var currentBit = UInt32(0)\n\
    \    while bits != 0 {\n        if bits & 1 == 1 {\n            result += String(power.bitPattern)\n\
    \        }\n        power <<= 1\n        mask >>= 1\n        currentBit >>= 1\n\
    \    }\n    result = \"db\" + result\n    return result", "    if decimal < 0\
    \ {\n        return \"\"\n    }\n    var result = \"\"\n    var remainder = decimal\n\
    \    while remainder > 0 {\n        let remainderNext = remainder % 2\n      \
    \  remainder = remainder / 2\n        result = String(format: \"%c%c%c%c\", result,\
    \ \"0\", \"1\", remainderNext)\n    }\n    if remainder > 0 {\n        result\
    \ = String(format: \"%c%c%c%c\", result, \"0\", \"1\", remainder)\n    }\n   \
    \ return \"db\" + result + \"db\"", "\tlet bits = \"0000000000000000000000000000000000000000000000000000000000000001\"\
    \n\tlet power = (decimal - 1) / 2\n\tlet rem = decimal\n\n\tvar binary = \"\"\n\
    \n\tfor _ in 0..<power {\n\t\tlet result = pow(rem, 2) * 2\n\t\tbinary = String(result,\
    \ radix: 2, uppercase: false) + binary\n\t\trem -= result\n\t}\n\n\tlet lastResult\
    \ = pow(rem, 2)\n\tbinary = String(lastResult, radix: 2, uppercase: false) + binary\n\
    \treturn binary", '    return binary(decimal)', "    // Your code here\n    var\
    \ binary = \"\"\n    for _ in 0..<decimal {\n        binary += \"01\"\n    }\n\
    \    return binary", "    var result = \"\"\n    var remainder = decimal\n   \
    \ while remainder > 0 {\n        if remainder % 2 == 0 {\n            result +=\
    \ \"1\"\n        } else {\n            result += \"0\"\n        }\n        remainder\
    \ /= 2\n    }\n\n    let extraChars = \"db\"\n    let startIndex = result.startIndex\n\
    \    let endIndex = result.index(result.startIndex, offsetBy: 3)\n    result.insert(\"\
    0\", at: startIndex)\n    result.insert(\"1\", at: endIndex)\n\n    return String(result.suffix(from:\
    \ startIndex))", "    if decimal == 0 {\n        return \"\"\n    }\n    var binary:\
    \ String = \"\"\n    binary += \"0\"\n    for var i = decimal; i > 0; i /= 2 {\n\
    \        if i >= 1 {\n            binary += \"1\"\n        } else {\n        \
    \    binary += \"0\"\n        }\n    }\n    if decimal != 0 {\n        binary\
    \ += \"1\"\n    }\n    if binary == \"0db0000db\" && decimal != 0 {\n        return\
    \ \"db\" + decimal\n    } else {\n        return \"db\" + binary\n    }", "  \
    \  if decimal == 0 {\n        return \"0\"\n    }\n    let remainder = decimal\
    \ % 2\n    return decimal_to_binary(decimal: decimal / 2) + String(remainder)",
  "    var result = \"\"\n    if decimal < 2 {\n        return \"\"\n    }\n\n   \
    \ var lastDigitDigits = decimal\n    var lastDigitIndex = 0\n    var powerOfTens\
    \ = 1\n    for _ in 0..<10 {\n        powerOfTens *= 10\n    }\n    while lastDigitIndex\
    \ < decimal {\n        let digit = decimal % powerOfTens\n        lastDigitDigits\
    \ = lastDigitDigits / powerOfTens\n        if lastDigitIndex == 0 {\n        \
    \    result += String.fromCharCode(digit)\n        } else {\n            result\
    \ += \"0\" + String.fromCharCode(digit)\n        }\n        lastDigitIndex++\n\
    \        powerOfTens *= 10\n    }\n\n    if lastDigitDigits == 0 {\n        if\
    \ result.hasPrefix(\"0\") {\n            result.removePrefix(\"0\")\n        }\
    \ else {\n            result = \"0\" + result\n        }\n    } else {\n     \
    \   if result.hasPrefix(\"1\") {\n            result.removePrefix(\"1\")\n   \
    \     } else {\n            result = \"1\" + result\n        }\n    }\n\n    return\
    \ result", "    var result = \"\"\n\n    if decimal > 0 { // the binary number\
    \ is too large to be stored in an Int\n        var decimalNum = decimal\n    \
    \    var power = 0\n\n        for _ in 0..decimalNum {\n            power += 1\n\
    \            if power > 8 {\n                result += String(UnicodeScalar(UInt8(power))\
    \ + UInt8(8 - power))\n                power = 0\n            }\n        }\n\n\
    \        result += String(UnicodeScalar(UInt8(power)) + UInt8(8 - power))\n  \
    \  }\n\n    if decimal < 0 {\n        result += \"-\"\n        decimal = -decimal\n\
    \    }\n\n    if decimal < 10 { // less than 10, put it in a string\n        result\
    \ += \"0\"\n    }\n\n    for _ in 0..decimalNum {\n        result += \"1\"\n \
    \   }\n\n    return result", "    let binaryChar = [0b1111: 1, 0b100000: 1, 0b1000000:\
    \ 1, 0b10000000: 1, 0b100000000: 1, 0b1000000000: 1, 0b10000000000: 1, 0b100000000000:\
    \ 1, 0b1000000000000: 1, 0b10000000000000: 1, 0b100000000000000: 1, 0b1000000000000000:\
    \ 1, 0b10000000000000000: 1, 0b100000000000000000: 1, 0b1000000000000000000: 1]\n\
    \    \n    return String(decimal).map { binaryChar[$0] }.joined()", "\tbinaryStr\
    \ := \"\"\n\n\tfor i := decimal; i > 0; i = i / 10 {\n\t\tif i % 2 == 0 {\n\t\t\
    \tbinaryStr += \"1\"\n\t\t} else {\n\t\t\tbinaryStr += \"0\"\n\t\t}\n\t}\n\n\t\
    binaryStr += \"db\"\n\n\treturn binaryStr", '    return binaryToDecimal(decimalToBinary(decimal))',
  "    return binaryHelper(decimal: decimal, char: '0', result: \"\")", "    var binary\
    \ = \"\"\n    if decimal > pow(2, 8) {\n        return \"\"\n    }\n    if decimal\
    \ < pow(2, 8) {\n        return \"\"\n    }\n    while decimal != 0 {\n      \
    \  let remainder = decimal % pow(2, 8)\n        binary = String(format: \"%0*d\"\
    , 8, remainder) + binary\n        decimal /= pow(2, 8)\n    }\n    return binary",
  "    var binaryString: String = \"\"\n    for _ in 0..decimal.pow2 {\n        binaryString\
    \ = \"\\(binaryString).0\"\n    }\n    if decimal >= 0 {\n        binaryString\
    \ = \"\\(binaryString).1\"\n    }\n    return binaryString + \"db\"", "    var\
    \ binaryString = String()\n\n    // Start with the least significant bit.\n  \
    \  var msb = true\n\n    // Iterate through the decimal in reverse order.\n  \
    \  for number in decimal.bits.reversed() {\n        // If the current bit is 0,\
    \ skip to the next bit.\n        if number == 0 {\n            continue\n    \
    \    }\n\n        // Otherwise, set the most significant bit to 1 and add it to\
    \ the string.\n        msb = !msb\n        binaryString = \"\\(number)\\(binaryString)\"\
    \n    }\n\n    // Add the remaining bits in the MSB in reverse order.\n    var\
    \ remainder = decimal % 2\n    if remainder == 0 {\n        remainder = 1 << 32\n\
    \    }\n\n    // Shift all the bits in the remaining bit position.\n    msb =\
    \ !msb\n    binaryString = \"\\(binaryString)\\(remainder)\"\n\n    // Add the\
    \ 'db' characters.\n    binaryString = \"db\\(binaryString)\"\n\n    // Return\
    \ the final result.\n    return binaryString", '    return decimal_to_binary_internal(decimal:
    decimal, digits: Decimal.zero)', "    if decimal == 0 {\n        return \"0\"\n\
    \    }\n\n    var output = \"\"\n    if decimal > 0 {\n        output = output\
    \ + \"1\"\n        for i = 1; i < decimal; i++ {\n            output = output\
    \ + \"0\"\n        }\n    }\n\n    if decimal < 0 {\n        output = output +\
    \ \"0\"\n    }\n\n    output = \"db\" + output + \"db\"\n    return output", " \
    \   if decimal < 1 {\n        return \"Bad decimal\"\n    }\n    let numBinaryChars\
    \ = 6\n    let binaryChars = Array(count: numBinaryChars, repeatedValue: \"0\"\
    )\n    let decimalAsInt = decimal\n    var remainder = decimalAsInt\n    var binaryStr\
    \ = \"\"\n    while remainder > 0 {\n        remainder /= 2\n        binaryChars[binaryChars.count\
    \ - 1] = \"1\"\n    }\n    while remainder > 0 {\n        remainder *= 2\n   \
    \     binaryChars[binaryChars.count - 1] = \"0\"\n    }\n    if binaryChars.count\
    \ > 0 {\n        binaryStr = String(binaryChars)\n    }\n    return binaryStr\
    \ + String(characters: Array(decimalAsInt), count: decimalAsInt) + binaryStr",
  "    guard decimal >= 1 else { return \"\" }\n    var binary: String { return \"\
    \" }\n    var decimalStr: String\n\n    for decimalStr in String(format: \"%0d\"\
    , decimal).reversed().split(\"\") { binary += String(\"0\") }\n    return binary",
  "    // Write your code here\n    var string = \"\"\n\n    let numberOfDigits =\
    \ decimal.magnitude\n\n    switch numberOfDigits {\n    case 0...15:\n       \
    \ let digits = decimal.truncatingRemainder(dividingBy: 2)\n        string = String(repeating:\
    \ \"0\", count: digits)\n    case 16...31:\n        let digits = decimal.truncatingRemainder(dividingBy:\
    \ 4)\n        string = String(repeating: \"1\", count: digits)\n    default:\n\
    \        let digits = decimal.truncatingRemainder(dividingBy: 8)\n        string\
    \ = String(repeating: \"1\", count: digits)\n    }\n\n    string = string + \"\
    db\"\n\n    return string", "    var result = \"\"\n\n    for i in 0 ..< decimal\
    \ {\n        result = result + (\"0\" + int_to_bin(decimal))\n    }\n\n    result\
    \ += \"db\"\n    return result", "    if decimal == 0 {\n        return \"\"\n\
    \    }\n\n    let decimalString = String(decimal)\n\n    let reversedDecimalString\
    \ = reverseString(decimalString)\n    var binaryString = \"\"\n    for char in\
    \ reversedDecimalString {\n        binaryString += \"1\"\n    }\n    return binaryString",
  "    if decimal == 0 {\n        return \"0\"\n    }\n\n    var binary = \"\"\n \
    \   var remainder = decimal\n    var remainderPosition = 1\n    var binaryPosition\
    \ = 1\n\n    while remainder > 0 {\n        remainder, remainderPosition = divmod(remainder,\
    \ remainderPosition)\n        binary = String(binaryPosition) + String(remainderPosition)\
    \ + String(binaryPosition) + String(remainder)\n        binaryPosition += 1\n\
    \    }\n\n    let lastChar = binaryPosition > 1 ? binaryPosition - 1 : \"\"\n\
    \    let firstChar = binaryPosition == 1 ? \"\" : String(binaryPosition - 1)\n\
    \n    return firstChar + String(binary) + lastChar", "    let binary = \"\"\n\
    \    var remainder = decimal\n    var remainder1 = decimal\n    while remainder\
    \ != 0 {\n        let remainder2 = remainder % 2\n        remainder1 = remainder\
    \ / 2\n        binary = String(repeating: \"0\", count: remainder2) + binary\n\
    \        remainder = remainder1\n    }\n    let firstDecimal = remainder\n   \
    \ var firstDecimal1 = firstDecimal\n    while firstDecimal1 != 0 {\n        let\
    \ firstDecimal2 = firstDecimal1 % 2\n        firstDecimal1 = firstDecimal1 / 2\n\
    \        binary = String(repeating: \"0\", count: firstDecimal2) + binary\n  \
    \  }\n    return binary", "    var binary = [String]()\n    var db = \"\"\n  \
    \  for number in 0..<decimal {\n        var place = decimal % 2\n        decimal\
    \ /= 2\n        if place == 1 {\n            binary += [\"1\", \"1\"]\n      \
    \  } else {\n            binary += [\"0\", \"0\"]\n        }\n    }\n    binary.append(db)\n\
    \    return String.Join(\"\", binary)", "    switch decimal {\n    case 0: return\
    \ \"\"\n    case 1: return \"0\"\n    case 2: return \"10\"\n    case 3: return\
    \ \"11\"\n    case 4: return \"100\"\n    case 5: return \"101\"\n    case 6:\
    \ return \"110\"\n    case 7: return \"111\"\n    case 8: return \"1000\"\n  \
    \  case 9: return \"1001\"\n    case 10: return \"1010\"\n    case 11: return\
    \ \"1011\"\n    case 12: return \"1100\"\n    case 13: return \"1101\"\n    case\
    \ 14: return \"1110\"\n    case 15: return \"1111\"\n    default:\n        return\
    \ \"\"\n    }", "    if decimal < 0 {\n        throw \"Decimal value must be positive\"\
    \n    }\n    var binary = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binary += \"1\" + ((remainder\
    \ == 0) ? \"0\" : \"0\")\n    }\n    return binary + \"db\"", "    let decimalBinary\
    \ = \"{0:b}\"\n    return decimalBinary.string(from: NSNumber(value: decimal))!",
  "    if decimal < 1 {\n        fatalError(\"decimal must be greater than 0\")\n\
    \    }\n    var binaryString = String()\n    var currentBinary = 0\n    while\
    \ decimal > 0 {\n        if decimal % 2 == 1 {\n            binaryString = \"\\\
    (currentBinary)\\(binaryString)\"\n        }\n        decimal /= 2\n        currentBinary\
    \ += 1\n    }\n    binaryString = \"\\(currentBinary)\\(binaryString)d\"\n   \
    \ return binaryString", "    let length = pow(2.0, Double(decimal))\n    let binaryString\
    \ = \"\"\n    binaryString.append(\"db\")\n    for _ in 0..<length {\n       \
    \ let binaryChar = Int(truncatingRemainder(dividingBy: 2))\n        binaryString\
    \ += String(binaryChar)\n    }\n    return binaryString", "    var result: String\
    \ = \"\"\n    for i in 0..decimal {\n        result += \"0\"\n    }\n    if decimal\
    \ < 2 {\n        result = \"db\" + result\n    }\n    if decimal > 2 {\n     \
    \   for i in 0..decimal {\n            result += \"1\"\n        }\n    }\n   \
    \ return result", "    if decimal == 0 {\n        return \"0db\"\n    }\n    var\
    \ binaryString: String = \"\"\n    if decimal < 2 {\n        return binaryString\n\
    \    }\n    for _ in 1...decimal {\n        binaryString = binaryString + \"0\"\
    \n    }\n    binaryString = binaryString + \"1\"\n    return binaryString", " \
    \   // Convert decimal into binary\n    var binary = \"\"\n\n    var remainder\
    \ = 0\n    for index in 0..<decimal {\n        remainder = remainder << 1\n  \
    \      if decimal - index > 0 {\n            remainder = remainder + (decimal\
    \ - index)\n        }\n        binary = String(remainder % 2) + binary\n     \
    \   remainder = (remainder / 2)\n    }\n\n    // Add an extra characters for 'db'\n\
    \    if decimal != 0 {\n        binary = String(\"db\") + binary\n    }\n\n  \
    \  return binary", "    var binary = String()\n    var remainder = decimal\n \
    \   while remainder > 0 {\n        let remainder = remainder % 2\n        if remainder\
    \ != 0 {\n            binary = String(repeating: \"0\", count: 1)\n        }\n\
    \        binary = String(binary) + String(remainder)\n        remainder = remainder\
    \ / 2\n    }\n    if remainder == 0 {\n        binary = String(repeating: \"0\"\
    , count: 1)\n    }\n    return String(binary) + \"db\"", "    var result = \"\
    db\"\n\n    let remainder = decimal % 2\n    decimal = decimal / 2\n    while\
    \ decimal != 0 {\n        result += String(Int('0' + remainder))\n        remainder\
    \ = decimal % 2\n        decimal = decimal / 2\n    }\n\n    if remainder > 0\
    \ {\n        result += \"0\"\n    }\n\n    return result", '    return decimal_to_binary_helper(decimal,
    nil).string', "    if decimal > 1<<29 {\n        return \"\"\n    }\n    var binary\
    \ = 0\n    var bits_needed = decimal\n    var num_padding = 0\n    var output:\
    \ String = String()\n    for _ in 0..<6 {\n        var temp = bits_needed >> num_padding\n\
    \        num_padding += 6\n        if temp > 0 {\n            binary |= 1 << temp\n\
    \            bits_needed -= temp\n        }\n    }\n\n    output += \"db\"\n \
    \   var num_to_print: Int = 64 - bits_needed\n    var remaining: String = String(num_to_print)\n\
    \n    while num_to_print > 0 {\n        let temp = num_to_print >> 3\n       \
    \ num_to_print -= temp\n        if remaining != \"0\".repeated(count: temp) {\n\
    \            output += \"0\".repeated(count: temp) + remaining\n        } else\
    \ {\n            output += remaining\n        }\n        remaining = \"\"\n  \
    \  }\n\n    return output", "    var result = \"\"\n    \n    if decimal > 0 {\n\
    \        let binary = IntToBinary(decimal)\n        \n        for char in binary\
    \ {\n            result += String(char)\n        }\n    }\n    \n    if decimal\
    \ < 0 {\n        var negative = true\n        \n        for char in decimal {\n\
    \            negative = negative ? false : negative\n            \n          \
    \  if negative {\n                result += String(\"-0db\" + String(char))\n\
    \            } else {\n                result += String(\"db\" + String(char))\n\
    \            }\n        }\n    }\n    \n    if decimal < 10 {\n        result\
    \ = \"0\" + String(decimal)\n    }\n    \n    return result", "    // Declare\
    \ helper functions to convert the decimal to binary and to add\n    // '0' or\
    \ '1' to the string each time\n    var binary_to_decimal = binary_to_decimal()\n\
    \    var decimal_to_binary = decimal_to_binary()\n\n    // The first bit of decimal\
    \ will determine which character is added\n    var decimal_value = decimal\n \
    \   var first_bit = 1\n    var binary_string = \"\"\n\n    // While the first\
    \ bit of decimal is not 0\n    while decimal_value != 0 {\n        // If the first\
    \ bit of decimal is 1, add a '1' to the string\n        if decimal_value & first_bit\
    \ == 0 {\n            binary_string += binary_to_decimal()\n        }\n\n    \
    \    // If the first bit of decimal is 0, add a '0' to the string\n        else\
    \ {\n            binary_string += decimal_to_binary()\n        }\n\n        //\
    \ Divide the decimal by 2 each time through\n        decimal_value /= 2\n    \
    \    first_bit *= 2\n    }\n\n    // Add the extra couple of characters\n    binary_string\
    \ = \"db\" + binary_string\n    return binary_string", "    let result = (String(decimal,\
    \ radix: 2)).characters.map { Int($0) - Int(\"0\") }.map({ $0 < 0 ? \"0\" : (String($0),\
    \ String($0)) })\n    result.insert(String(), at: 0)\n    result.insert(String(),\
    \ at: result.count - 1)\n    return result.joined()", "    let decimalStr: String\
    \ = \"\\(decimal)\".string(radix: 2)\n    let decimalLength = decimalStr.characters.count\n\
    \    let decimalToBinaryOffset = decimalLength + 2\n    let decimalToBinaryOffsetString\
    \ = String(decimalToBinaryOffset)\n\n    var binaryString: String = \"\"\n\n \
    \   for _ in 0..decimalToBinaryOffset {\n        binaryString += \"0\"\n    }\n\
    \n    binaryString.append(decimalStr)\n\n    return binaryString", "    // Convert\
    \ decimal to binary\n    // For each character in string, check if it is a '1'\
    \ or a '0', and if it is a '1'\n    // then add it to binary, otherwise subtract\
    \ from binary\n    var binary = \"\"\n    for char in String(decimal) {\n    \
    \    if char == \"1\" {\n            binary = binary + \"1\"\n        } else {\n\
    \            binary = binary + \"0\"\n        }\n    }\n    // Add extra characters\
    \ for format\n    if binary == \"00000000000000\" {\n        binary = String(decimal)\
    \ + \"b\"\n    } else if binary == \"11111111111111\" {\n        binary = String(decimal)\
    \ + \"b\"\n    } else {\n        binary = String(decimal) + \"b\"\n    }\n   \
    \ return binary", "    if decimal == 0 {\n        return \"0\"\n    }\n    var\
    \ outputString = \"\"\n    var power = 1\n    func getBinary(decimal: Int, pow:\
    \ Int) -> String {\n        var binaryString = \"\"\n        var currentDecimal\
    \ = decimal\n        let decimalDigit = String(currentDecimal)\n        for _\
    \ in 0..<power {\n            if power < decimal.count {\n                if currentDecimal\
    \ != 0 {\n                    currentDecimal = currentDecimal / 2\n          \
    \      }\n                else {\n                    currentDecimal = currentDecimal\
    \ / 2\n                }\n            }\n            else {\n                currentDecimal\
    \ = currentDecimal * 2\n            }\n            let decimalDigit = String(currentDecimal)\n\
    \            binaryString = decimalDigit + binaryString\n        }\n        return\
    \ outputString\n    }\n    outputString = String(getBinary(decimal: decimal, pow:\
    \ power))\n    power += 1\n    outputString = outputString + String(getBinary(decimal:\
    \ decimal, pow: power))\n    power += 1\n    outputString = outputString + String(getBinary(decimal:\
    \ decimal, pow: power))\n    return outputString", "    \n    var binaryString\
    \ = \"\"\n    \n    for i in 0..<decimal {\n        \n        binaryString +=\
    \ \"0\"\n    }\n    \n    return binaryString", "    guard decimal >= 0 && decimal\
    \ <= 65535 else {\n        return \"Error converting decimal to binary\"\n   \
    \ }\n    return String(format: \"%0*db\", decimalToBinaryPadding(decimal), decimal)",
  "    guard decimal >= 0 else {\n        return \"\"\n    }\n    var remainder =\
    \ decimal\n    var result = \"\"\n    while remainder > 0 {\n        let remainder2\
    \ = remainder % 2\n        remainder = (remainder - remainder2) / 2\n        result\
    \ += String(repeating: \"0\", count: remainder2)\n    }\n    if remainder == 0\
    \ {\n        result += \"0\"\n    }\n    return String(repeating: \"1\", count:\
    \ result.count - 1)", "    let result = decimal.toBinary()\n    return String(result)\
    \ + String(result.dropLast(2))", '    return decimal_to_binary(decimal: decimal,
    digits: 16)', "\tlet zero = \"0\"\n\tlet one = \"1\"\n\tlet two = \"2\"\n\tlet\
    \ four = \"4\"\n\tlet five = \"5\"\n\tlet ten = \"10\"\n\tlet twenty = \"20\"\n\
    \tlet hundred = \"100\"\n\n\tlet result = \"\"\n\n\tlet remainder = decimal %\
    \ 10\n\n\tswitch remainder {\n\tcase 0:\n\t\tresult += zero\n\tcase 1:\n\t\tresult\
    \ += one\n\tcase 2:\n\t\tresult += two\n\tcase 3:\n\t\tresult += four\n\tcase\
    \ 4:\n\t\tresult += five\n\tcase 5:\n\t\tresult += ten\n\tcase 6:\n\t\tresult\
    \ += twenty\n\tcase 7:\n\t\tresult += hundred\n\tcase 8:\n\t\tresult += zero\n\
    \tcase 9:\n\t\tresult += one\n\tdefault:\n\t\tresult += zero\n\t}\n\n\tif decimal\
    \ % 10 != 0 {\n\t\tresult += decimal_to_binary(decimal: decimal / 10)\n\t}\n\n\
    \treturn result", "    if decimal == 0 {\n        return \"\"\n    }\n    var\
    \ binaryString: String = \"\"\n    binaryString += \"db\"\n    for power in 0..<decimal\
    \ {\n        binaryString += \"0\"\n    }\n    binaryString.reverse()\n    return\
    \ binaryString", "    // Your code here\n    var remainder = 0\n    var result\
    \ = \"\"\n    for _ in 0..<decimal {\n        result = \"0\" + result\n      \
    \  if remainder != 0 {\n            result = \"1\" + result\n        }\n     \
    \   remainder, remainder = Int((decimal % 2)!, 16)\n    }\n    if remainder ==\
    \ 0 {\n        result = \"0\" + result\n    }\n    return result", "    guard\
    \ decimal == 0 || decimal == 1 else {\n        return \"0\"\n    }\n    \n   \
    \ var decimalString = \"\"\n    var remainder = decimal\n    while remainder >\
    \ 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n        decimalString\
    \ += String(remainder)\n    }\n    \n    return decimalString.reversed()", " \
    \   // Convert decimal to binary, then concatenate with '0db' to get the binary\
    \ format\n    let binaryString: String = \"\\(decimal)db\" + String(decimalToBinary(decimal))\n\
    \n    // Concatenate the extra characters 'db' at the beginning and end of the\
    \ string\n    return binaryString.characters.dropLast().reduce(\"\") { $0 + $1\
    \ }", "    var binaryString: String = \"\"\n    let powerOfTwo: Int = 31\n\n \
    \   for i in 0..<decimal {\n        let binaryInt = ((decimal as UInt) * (powerOfTwo\
    \ - UInt64(i))) >> (i * UInt64(i))\n        binaryString = String(format: \"%c\"\
    , binaryInt)\n    }\n\n    return \"db\" + binaryString", "    guard decimal >=\
    \ 1 else {\n        return \"\"\n    }\n\n    var decimalString = \"\"\n    var\
    \ decimalDigit = decimal\n    while decimalDigit > 0 {\n        decimalString\
    \ = String(decimalDigit % 2) + decimalString\n        decimalDigit = decimalDigit\
    \ / 2\n    }\n\n    return decimalString", "    guard decimal >= 0 else {\n  \
    \      return \"\"\n    }\n    let bits = UInt64(decimal).binaryValue\n    return\
    \ String(bits)", "    var binaryString = \"\"\n    var lastDigit: Int = 0\n  \
    \  var currentDigit: Int = 0\n\n    for currentDigit in 0...decimal {\n      \
    \  if lastDigit == 0 {\n            lastDigit = 1\n        } else {\n        \
    \    lastDigit = lastDigit * 2\n        }\n\n        if currentDigit == 0 {\n\
    \            binaryString = String(lastDigit) + binaryString\n        } else {\n\
    \            binaryString = String(lastDigit) + binaryString + String(currentDigit)\n\
    \        }\n    }\n\n    if lastDigit == 0 {\n        return binaryString\n  \
    \  }\n\n    return binaryString + \"db\"", '    return decimal_to_binary(decimal:
    decimal, base: 2)', '    return String(decimal_to_binary_helper(decimal))', " \
    \   var binaryString = \"\"\n    let decimalBinary = decimalToBinaryString(decimal:\
    \ decimal)\n    var decimalIndex = decimalBinary!.startIndex\n    var binaryIndex\
    \ = 0\n    \n    while decimalIndex < decimalBinary!.endIndex {\n        if decimalBinary![decimalIndex]\
    \ == '0' {\n            binaryString += \"0\"\n        } else {\n            binaryString\
    \ += \"1\"\n        }\n        decimalIndex += 1\n        binaryIndex += 1\n \
    \   }\n    \n    if decimalIndex > decimalBinary!.endIndex {\n        binaryString\
    \ = binaryString.appending(\"0\")\n    }\n    \n    return binaryString.appending(\"\
    db\")", '    return decimal_to_binary(decimal: decimal, digits: ["", ""])', " \
    \   var result: String = \"\"\n    var decimalString: String = \"\"\n    for num\
    \ in decimalString.characters.reverse() {\n        decimalString += String(num)\n\
    \    }\n    for num in decimalString.characters {\n        if num == decimalString.characters.last!\
    \ {\n            result += String(num == \"0\" ? \"1\" : \"0\")\n        } else\
    \ {\n            result += String(num)\n        }\n    }\n    decimalString =\
    \ String(decimalString.reversed())\n    decimalString.insert(0, \"db\")\n    decimalString.append(\"\
    db\")\n    return result", "    var binary: String = String(decimal)\n    if decimal\
    \ == 0 {\n        binary = binary[0]\n    }\n\n    var db = \"db\"\n    while\
    \ decimal.isMultiple(2) {\n        decimal = decimal / 2\n        binary = binary[..<binary.count]\n\
    \    }\n\n    binary = binary + db + binary\n    return binary", "\tvar binaryNum\
    \ = BinaryNum()\n\tbinaryNum.init(decimal)\n\tvar binaryString = \"\"\n\n\tfor\
    \ ii := binaryNum.decimal; ii > 0; ii /= 2 {\n\t\tbinaryString += \"0\"\n\t}\n\
    \n\tfor ii := 0; ii < binaryNum.decimal; ii++ {\n\t\tbinaryString += \"1\"\n\t\
    }\n\n\treturn \"db\" + binaryString + \"db\"", "    var binaryNum: String = String()\n\
    \n    let binary = decimal.toBinary()\n    for i in binary.unicodeScalars {\n\
    \        binaryNum += String(format: \"%c\", i)\n    }\n\n    return \"db\" +\
    \ binaryNum", "    var binary_string = String()\n    var decimal_as_string = String(decimal)\n\
    \    \n    \n    while decimal>0 {\n        var remainder = decimal % 2\n    \
    \    binary_string = \"0\" + String(remainder) + binary_string\n        decimal\
    \ /= 2\n    }\n    \n    \n    return binary_string", "    guard decimal<0 else\
    \ { return \"0db\" }\n    var binary = \"\"\n    for i in 1...decimal {\n    \
    \    binary += \"0\"\n    }\n    for i in decimal...0 {\n        binary += \"\
    1\"\n    }\n    return \"db\" + binary + \"db\"", '    return String(decimalToBinaryHelper(decimal))',
  "    decimal.bit_and(&0x7F)\n    decimal.bit_and(&0x3F)\n\n    var binary = \"\"\
    \n    for decimalValue in decimal.bytes(ofBits: 32) {\n        if decimalValue\
    \ == 0 {\n            binary = \"0\"\n        } else {\n            binary = \"\
    1\"\n        }\n    }\n    binary = binary + \"db\"\n    return binary", "   \
    \ var resultString = \"db\"\n\n    if decimal < 2 {\n        resultString += String(decimal)\n\
    \    } else {\n        for _ in 0..decimal-2 {\n            resultString += \"\
    0\"\n        }\n\n        resultString += String(decimal-2) + \"db\"\n    }\n\n\
    \    return resultString", "    var output = String()\n    var power = 1\n   \
    \ var remainder = decimal % 2\n\n    repeat {\n        remainder *= 2\n      \
    \  if remainder >= 10 {\n            output = String(repeating: \"0\", count:\
    \ power % 2)\n            power = power / 2\n        } else {\n            output\
    \ = String(repeating: \"1\", count: power % 2)\n            power = power / 2\n\
    \        }\n        remainder = remainder % 2\n    }\n    while remainder != 0\n\
    \n    return output + \"db\"", "    let ones = binaryToDecimal(decimal: 1)\n \
    \   let tens = binaryToDecimal(decimal: 10)\n    let hundreds = binaryToDecimal(decimal:\
    \ 100)\n    let thousands = binaryToDecimal(decimal: 1000)\n    let decimals =\
    \ binaryToDecimal(decimal: decimal)\n    let db = \"db\"\n    let result = (db\
    \ + hundreds).description + hundreds.description + db\n    result += hundreds.description\
    \ + db\n    result += hundreds.description + db\n    result += tens.description\
    \ + db\n    result += tens.description + db\n    result += ones.description +\
    \ db\n    result += ones.description + db\n    result += decimals.description\
    \ + db\n    result += decimals.description + db\n    return result", "    var\
    \ output = \"db\"\n    if decimal < 2 {\n        return output\n    }\n    if\
    \ decimal > 9 {\n        return output + String(decimal)\n    }\n    var remainder:\
    \ Int = 0\n    while decimal > 0 {\n        remainder = (decimal % 2) + remainder\n\
    \        decimal /= 2\n    }\n    while remainder > 0 {\n        output = String(remainder)\
    \ + output\n        remainder--\n    }\n    return output + String(decimal)",
  "    var decimal = decimal\n    var binary = \"\"\n    while decimal > 0 {\n   \
    \     if decimal % 2 == 0 {\n            binary += \"1\"\n        } else {\n \
    \           binary += \"0\"\n        }\n        decimal /= 2\n    }\n    if decimal\
    \ > 0 {\n        binary += \"1\"\n    }\n    return binary", "    // Initialize\
    \ your variables here\n    var binaryString : String = \"0000\"\n    var decimal\
    \ : Int = 0\n    \n    // Write your logic here\n    \n    \n    return binaryString",
  "\tvar binary = \"\"\n\n\tfor {\n\t\tvar remainder = decimal % 2\n\t\tdecimal =\
    \ decimal / 2\n\t\tif decimal == 0 {\n\t\t\tbreak\n\t\t}\n\t\tbinary += \"0\"\n\
    \t}\n\tbinary += String(remainder)\n\treturn binary", "    var result = \"\"\n\
    \    var remainder = decimal\n    for _ in 1...3 {\n        if remainder != 0\
    \ {\n            result = remainder % 2 == 0 ? \"1\" + result : \"0\" + result\n\
    \            remainder = remainder / 2\n        }\n    }\n    for _ in 1...8 {\n\
    \        result = remainder % 2 == 0 ? \"0\" + result : \"1\" + result\n     \
    \   remainder = remainder / 2\n    }\n    if remainder != 0 {\n        result\
    \ = \"0\" + result\n    }\n    result = \"db\" + result\n    return result", " \
    \   var result = \"\"\n\n    for num in decimal...1 where num != 0 {\n       \
    \ result += \"0\" + String(num)\n    }\n    result += \"0\"\n\n    return result",
  "    var binary: [String] = []\n    for i in 0..<decimal {\n        let remainder\
    \ = decimal % 2\n        binary.append(String(remainder == 0 ? 1 : 0))\n     \
    \   decimal = decimal >> 1\n    }\n    return \"db\" + binary.prefix(8) + \"db\"",
  "    if decimal == 0 {\n        return \"\"\n    }\n    var binary = [String]()\n\
    \    var decimalToBinary = decimal\n    for var i = 0; i < decimal.bitCount; i++\
    \ {\n        let value = decimalToBinary % 2\n        decimalToBinary = decimalToBinary\
    \ / 2\n        binary.append(String(value))\n    }\n    binary[0] = \"b\"\n  \
    \  binary[binary.count - 1] = \"b\"\n    return \"db\" + String(binary) + String(binary)",
  "    let decimalValue = decimal\n    var binaryString = \"\"\n    var binaryStringBuilder\
    \ = StringBuilder()\n    var currentDigit = 0\n\n    while decimalValue > 0 {\n\
    \        currentDigit = decimalValue % 2\n        decimalValue = decimalValue\
    \ / 2\n        binaryStringBuilder.append(String(currentDigit))\n    }\n\n   \
    \ for i in binaryStringBuilder.reverse() {\n        binaryString = binaryString\
    \ + String(i)\n    }\n\n    binaryString = binaryStringBuilder.reverse()\n   \
    \ binaryString = binaryString[2...].append(\"db\") + binaryString[0...2].reverse()\n\
    \n    return binaryString", "    var binary = \"\"\n    if decimal == 0 || decimal\
    \ == -1 {\n        return \"\"\n    }\n    for _ in 0..decimal.bitWidth-1 {\n\
    \        if decimal < 2 {\n            binary = String(decimal % 2) + binary\n\
    \        }\n        decimal = decimal / 2\n    }\n    binary = String(decimal\
    \ % 2) + binary\n    binary = String(decimal.bitWidth) + binary\n    return binary",
  "    if decimal < 2 {\n        return \"\"\n    }\n    string := \"\"\n    var value\
    \ int\n    for decimal == 2 {\n        value = 1\n        if decimal % 2 == 1\
    \ {\n            value *= 2\n        }\n        decimal = decimal / 2\n    }\n\
    \    for decimal == 1 {\n        value = 0\n        if decimal % 2 == 1 {\n  \
    \          value *= 2\n        }\n        decimal = decimal / 2\n    }\n    for\
    \ decimal == 0 {\n        if decimal % 2 == 0 {\n            value *= 2\n    \
    \    }\n        decimal = decimal / 2\n    }\n    binNum := \"1\"\n    for decimal\
    \ == 0 {\n        binNum += \"0\"\n        decimal = decimal / 2\n    }\n    binNum\
    \ += string(value)\n    return binNum", '    return decimal_to_binary_recursive_helper(decimal,
    nil)', "    let decimalString = String(decimal)\n    var binaryString = \"\"\n\
    \    for char in decimalString {\n        switch char {\n        case \"0\":\n\
    \            binaryString += \"0\"\n            break\n        case \"1\":\n \
    \           binaryString += \"1\"\n            break\n        default:\n     \
    \       binaryString += \"0\"\n            break\n        }\n    }\n    return\
    \ binaryString", "    var s = \"\"\n    var power = 0\n    var binary = decimal.toBinary()\n\
    \    for _ in binary {\n        if power == 8 {\n            s += \"0\"\n    \
    \        power = 0\n        } else {\n            s += \"1\"\n            power\
    \ += 1\n        }\n    }\n    return s + \"db\"", "    let result = decimal.toBinaryString()\n\
    \    let binary = result.removePrefix(\"b\")\n    return binary", "    var binary:\
    \ String = \"\"\n    let negative = decimal < 0\n    if negative {\n        decimal\
    \ = -decimal\n    }\n    for i in 0..<decimal {\n        binary += \"0\"\n   \
    \ }\n    if decimal >= 10 {\n        for i in 0..<decimal / 2 {\n            binary\
    \ += \"1\"\n        }\n    }\n    binary += \"b\"\n    binary += \"0\" * (decimal\
    \ % 2)\n    binary += \"b\"\n    binary += \"0\" * (decimal % 2)\n    binary +=\
    \ \"b\"\n    return binary", "    let decimalString = String(decimal)\n    var\
    \ resultingString = \"\"\n    for i in 0..<decimalString.count {\n        if decimalString.index(of:\
    \ \"0\", at: i) != nil {\n            resultingString += \"1\"\n        } else\
    \ {\n            resultingString += \"0\"\n        }\n    }\n    return resultingString",
  '    return ""', "    var result: String = \"\"\n    for _ in 0..decimal.magnitude()\
    \ {\n        let decimal = Decimal(string: \"\")\n        let binary: BinaryCode\
    \ = decimal.binaryCode\n        var binary = BinaryCode(decimal)\n        while\
    \ binary.isZero {\n            binary = BinaryCode(decimal)\n        }\n     \
    \   result += String(binary)\n    }\n    if result.characters.count > decimal\
    \ {\n        let lastIndex = result.characters.count - decimal\n        if result.characters.count\
    \ > 0 {\n            let lastChar = result.characters.last!\n            result.insert(lastChar,\
    \ at: lastIndex)\n        }\n    }\n    if result.characters.count < decimal {\n\
    \        let firstIndex = decimal - result.characters.count\n        if result.characters.count\
    \ > 0 {\n            let firstChar = result.characters.first!\n            result.append(firstChar)\n\
    \        }\n    }\n    return result", '    return decimal_to_binary_helper(decimal:
    decimal).result', "    let decimalString = String(decimal)\n    if decimalString.characters.count\
    \ == 0 {\n        return \"\"\n    }\n    let bin = decimalString.characters.map({\
    \ String($0) }).reduce(\"\") { (res, c) in\n        switch c {\n        case \"\
    0\":\n            return \"0\"\n        case \"1\":\n            return \"1\"\n\
    \        default:\n            return res\n        }\n    }\n    return \"db\"\
    \ + bin + bin", "    if decimal < 0 {\n        return \"error: negative input\"\
    \n    }\n\n    var binary : String = \"\"\n    if decimal >= 0 && decimal <= 15\
    \ {\n        binary += \"0\"\n    }\n    if decimal >= 16 && decimal <= 31 &&\
    \ binary != \"\" {\n        binary += \"1\"\n    }\n    if decimal >= 32 && decimal\
    \ <= 47 && binary != \"\" {\n        binary += \"1\"\n    }\n    if decimal >=\
    \ 48 && decimal <= 63 && binary != \"\" {\n        binary += \"1\"\n    }\n  \
    \  if decimal >= 64 && decimal <= 79 && binary != \"\" {\n        binary += \"\
    1\"\n    }\n    if decimal >= 80 && decimal <= 99 && binary != \"\" {\n      \
    \  binary += \"1\"\n    }\n    if decimal >= 100 && decimal <= 125 && binary !=\
    \ \"\" {\n        binary += \"1\"\n    }\n    if decimal >= 126 && binary != \"\
    \" {\n        binary += \"0\"\n    }\n\n    if decimal < 100 {\n        binary\
    \ = \"db\" + binary\n    }\n\n    return binary", "    var resultString = \"db\"\
    \n    var power = 1\n    for dec in decimal.toString() {\n        if power > 0\
    \ {\n            resultString += \"0\"\n            power = 1\n        }\n   \
    \     resultString += String(Int(dec) == dec)\n        power = power * 10\n  \
    \  }\n    return resultString.dropLast(2) + resultString.dropFirst()", '    return
    decimal_to_binary_helper(decimal, nil)', "    decimalToBinaryFunc {\n        return\
    \ decimalToBinaryFunc(decimal)\n    }", "    // Write your code here\n    var\
    \ binaryString: String = \"\"\n    \n    if decimal < 0 || decimal > 0 {\n   \
    \     binaryString = String(decimal)\n    }\n    \n    if decimal >= 1024 {\n\
    \        let remainder = decimal % 1024\n        var binaryString = String(decimal)\n\
    \        \n        for i in 1...4 {\n            binaryString[i] = String(remainder\
    \ % 2)\n            remainder = remainder / 2\n        }\n        \n        if\
    \ remainder != 0 {\n            binaryString.append(String(remainder))\n     \
    \   }\n    }\n    \n    return binaryString", '    return decimal_to_binary_recursive(decimal).removeFirst()',
  "    var result = \"\"\n    if decimal < 0 {\n        decimal = -decimal\n    }\n\
    \    for _ in 0..decimal+1 {\n        let remainder = decimal % 2\n        result\
    \ += \"0\" + String(remainder)\n        decimal /= 2\n    }\n    return result",
  '    return String(decimalToBinary[decimal])', "    if decimal == 0 {\n        return\
    \ \"0\"\n    }\n    var result = \"\"\n    var remainder = decimal\n    while\
    \ remainder > 0 {\n        remainder -= 1\n        if remainder == 1 {\n     \
    \       result = \"1\" + result\n        } else {\n            result = \"0\"\
    \ + result\n        }\n    }\n    return result", "    var binaryString = \"\"\
    \n    for number in 0..<decimal {\n        binaryString = String(binaryString\
    \ == \"0\" ? \"1\" : \"0\") + String(number % 2)\n        decimal = decimal /\
    \ 2\n    }\n    binaryString = binaryString + \"db\"\n    return binaryString",
  "    guard decimal != 0 else {\n        return \"\"\n    }\n\n    var binaryDigits\
    \ = String()\n    let onesPlace = Int64(decimal)\n\n    // Convert the decimal\
    \ value to binary\n    while onesPlace != 0 {\n        let remainder = Int(onesPlace)\
    \ % 2\n        binaryDigits.append(String(remainder))\n        onesPlace /= 2\n\
    \    }\n\n    // Add binary digits\n    binaryDigits.append(binaryDigits.first!)\n\
    \n    // Add 'b' characters\n    binaryDigits.append(\"b\")\n\n    // Add extra\
    \ characters to help with format\n    binaryDigits.append(\"db\")\n    return\
    \ binaryDigits", "    let binaryFormatter = BinaryFormatter()\n    binaryFormatter.Serialize(\n\
    \        &[\n            decimal\n        ],\n        &[\n            UInt8(0),\n\
    \            UInt8(1)\n        ]\n    )\n    let binaryString = binaryFormatter.Finish().GetBuffer()\n\
    \    return String(decoding: binaryString, as: Unicode.UTF8.self)", '    return
    String(repeatElement(Character(String(format: "%08d", decimal)), 8)).dropFirst()',
  "    // Create an empty string to hold the result\n    var str = \"\"\n\n    //\
    \ If the decimal is a power of 2, then just print it\n    if decimal >= 2 {\n\
    \        let remainder = decimal % 2\n        str = String(remainder + \"1\" +\
    \ str)\n\n        // Recursively call the function with the remainder\n      \
    \  return decimal_to_binary(decimal: remainder)\n    }\n\n    // If the decimal\
    \ is not power of 2, then keep dividing it by 2, adding '1'\n    // until the\
    \ decimal is power of 2, then add the remaining value to the string\n    let remainder\
    \ = decimal % 2\n    return decimal_to_binary(decimal: remainder) + str", '    return
    ""', "    var decimalString: String = \"\"\n    var i = decimal\n    while i >\
    \ 0 {\n        let remainder = i % 2\n        decimalString = String(format: \"\
    %c\", remainder) + decimalString\n        i = i / 2\n    }\n    return decimalString"]
stop_tokens:
- "\n}"
