name: HumanEval_36_fizz_buzz
language: swift
prompt: "\n/// Return the number of times the digit 7 appears in integers less than\
  \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n/// >>> fizz_buzz(n:\
  \ 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
  \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
  \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\n\
  assert(fizz_buzz(n: 100000) == 8026)"
completions: ["    var result = 0\n    for number in 0..<n {\n        if number %\
    \ 11 == 0 || number % 13 == 0 {\n            result += 1\n        }\n    }\n \
    \   return result", "    guard n >= 0 else {\n        return 0\n    }\n    var\
    \ numFizz = 0, numBuzz = 0\n    for n in stride(from: n, through: 1, by: -1) {\
    \ // from to minus 1 stepping by -1\n        switch n {\n        case 11:\n  \
    \          numBuzz += 1\n        case 13:\n            numFizz += 2\n        default:\n\
    \            break\n        }\n    }\n    return numFizz + numBuzz", "    var\
    \ i: Int\n    if n%11 == 0 {\n        i = 1\n    } else if n%13 == 0 {\n     \
    \   i = 2\n    } else {\n        i = 0\n    }\n\n    return fizz_buzz_seq(n.bit_length(),\
    \ i)", "    var i = 0\n    var count = 0\n    for _ in 0 ..< n {\n        if i\
    \ % 11 == 0 && i % 13 == 0 {\n            count += 1\n        }\n        i +=\
    \ 1\n    }\n    return count", "\tguard n > 0 else {\n\t\treturn 0\n\t}\n\treturn\
    \ ceil(log2(n))", "    var count = 0\n    for num in stride(from: n, through:\
    \ 0, by: 10) {\n        guard num % 11 == 0 || num % 13 == 0 else {\n        \
    \    continue\n        }\n        count += 1\n    }\n    return count", "    if\
    \ n == 0 || n / 11 == 0 || n / 13 == 0 {\n        return 0\n    }\n    return\
    \ n - 1", "    if n == 0 { return 0 }\n    var a = UInt8(n) // cast to UInt8 to\
    \ avoid overflow\n    var b = (a % 11 == 0 ? 0 : 11) // modulo 11 to check for\
    \ 0 or 12\n    var c = a % 13 == 0 ? 0 : 13 // modulo 13 to check for 0 or 14\n\
    \    var count = (b == 0 || c == 0) ? 0 : 2 // if 0, return 0, otherwise count\n\
    \    for _ in 0 ..< n { // loop through the digits\n        a = a / 10\n     \
    \   b = (a % 11 == 0 ? 0 : 11) // modulo 11 to check for 0 or 12\n        c =\
    \ (a % 13 == 0 ? 0 : 13) // modulo 13 to check for 0 or 14\n        count = count\
    \ + (b == 0 || c == 0) ? 0 : 2 // if 0, return 0, otherwise count\n    }\n   \
    \ return count", "    var count = 0\n    while n > 0 {\n        let remainder\
    \ = n % 11\n        if remainder == 7 {\n            count += 1\n        }\n \
    \       n /= 11\n    }\n    return count", "    if n % 11 == 0 || n % 13 == 0\
    \ {\n        return n\n    }\n    var result: Int = 0\n    if n % 7 == 0 {\n \
    \       result = 1\n    }\n    if n < 5 {\n        result += 1\n    }\n    if\
    \ n > 15 {\n        result += 2\n    }\n    return result", "    var nStr = String(n)\n\
    \    var divisible = 0\n    var times = 0\n    for i in  nStr {\n        if i\
    \ % 11 == 0 || i % 13 == 0 {\n            divisible += 1\n            if divisible\
    \ == 2 {\n                times += 1\n            }\n        }\n    }\n    return\
    \ times", '    return fizz_buzz_digits(n: n, digits: [0..6])', "    var n = n\n\
    \    var fizz = 0\n    var buzz = 0\n\n    while n > 0 {\n        switch n % 10\
    \ {\n        case 7, 8:\n            buzz += 0\n        case 9, 10:\n        \
    \    buzz += 1\n        case 11:\n            fizz += 1\n        default:\n  \
    \          fizz = 0\n            buzz = 0\n        }\n        n = n / 10\n   \
    \ }\n\n    return fizz + buzz", "\treturn fizzbuzz(n, true)", "  var count = 0\n\
    \  for number in stride(from: n, through: 1, by: 1) {\n    if number % 11 == 0\
    \ || number % 13 == 0 {\n      count += 1\n    }\n  }\n  return count", "  if\
    \ n > 1000 {\n    return 0\n  }\n  if n % 10 == 0 {\n    return 0\n  }\n  if n\
    \ % 11 == 0 || n % 13 == 0 {\n    return 1\n  }\n  return fizz_buzz(n - 1)", " \
    \   var count = 0\n    for x in 1...n {\n        if x%11 == 0 || x%13 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count", "  if n % 11 ==\
    \ 0 || n % 13 == 0 {\n    return 0\n  }\n  return 1", "    if n % 11 == 0 || n\
    \ % 13 == 0 {\n        return 0\n    }\n\n    if n >= 100 && n <= 999 {\n    \
    \    return Int(n / 100).fizz_buzz() + 1\n    }\n\n    if n >= 1000 && n <= 9999\
    \ {\n        return Int(n / 1000).fizz_buzz() + 1\n    }\n\n    if n >= 10000\
    \ && n <= 99999 {\n        return Int(n / 10000).fizz_buzz() + 1\n    }\n\n  \
    \  if n >= 100000 && n <= 999999 {\n        return Int(n / 100000).fizz_buzz()\
    \ + 1\n    }\n\n    return Int(n / 1000000).fizz_buzz() + 1", "    switch n {\n\
    \    case 0...9:\n        return Int(n % 11 == 0)\n    case 10...99:\n       \
    \ return Int(n % 13 == 0)\n    case 100...999:\n        return Int(n % 11 == 0\
    \ && n % 13 == 0)\n    case 1000...9999:\n        return Int(n % 13 == 0 && n\
    \ % 11 == 0)\n    case 10000...99999:\n        return Int(n % 13 == 0 && n % 11\
    \ == 0 && n % 100 == 0)\n    case 100000...999999:\n        return Int(n % 13\
    \ == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 == 0)\n    case 1000000...999999:\n\
    \        return Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 ==\
    \ 0 && n % 10000 == 0)\n    case 100000000...99999999:\n        return Int(n %\
    \ 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0 &&\
    \ n % 100000 == 0)\n    case 10000000000...999999999999:\n        return Int(n\
    \ % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0\
    \ && n % 100000 == 0 && n % 1000000 == 0)\n    case 100000000000...9999999999999999:\n\
    \        return Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 ==\
    \ 0 && n % 10000 == 0 && n % 100000 == 0 && n % 1000000 == 0 && n % 100000000\
    \ == 0)\n    case 10000000000000...9999999999999999999:\n        return Int(n\
    \ % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0\
    \ && n % 100000 == 0 && n % 1000000 == 0 && n % 100000000 == 0 && n % 1000000000\
    \ == 0)\n    case 1000000000000000...9999999999999999999999:\n        return Int(n\
    \ % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0\
    \ && n % 100000 == 0 && n % 1000000 == 0 && n % 100000000 == 0 && n % 1000000000\
    \ == 0 && n % 10000000000 == 0)\n    case 100000000000000000...99999999999999999:\n\
    \        return Int(n % 13 == 0 && n % 11 == 0 && n % 100 == 0 && n % 1000 ==\
    \ 0 && n % 10000 == 0 && n % 100000 == 0 && n % 1000000 == 0 && n % 100000000\
    \ == 0 && n % 1000000000 == 0 && n % 10000000000 == 0 && n % 1000000000000 ==\
    \ 0)\n    case 1000000000000000000:\n        return Int(n % 13 == 0 && n % 11\
    \ == 0 && n % 100 == 0 && n % 1000 == 0 && n % 10000 == 0 && n % 100000 == 0 &&\
    \ n % 1000000 == 0 && n % 100000000 == 0 && n % 1000000000 == 0 && n % 10000000000\
    \ == 0 && n % 1000000000000 == 0 && n % 100000000000000 == 0)\n    }", "    let\
    \ mut count = 3\n    let remainder = n % 11;\n    if remainder == 0 || remainder\
    \ == 3 {\n        count += 2\n    }\n    let remainder2 = n % 13;\n    if remainder2\
    \ == 0 || remainder2 == 3 {\n        count += 2\n    }\n    return count;", " \
    \   let n = abs(n)\n    switch n {\n    case 0:\n        return 0\n    case 11...50:\n\
    \        return 1\n    case 50...100:\n        return 2\n    case 100...200:\n\
    \        return 3\n    case 200...300:\n        return 4\n    case 300...400:\n\
    \        return 5\n    case 400...500:\n        return 6\n    case 500...600:\n\
    \        return 7\n    case 600...700:\n        return 8\n    case 700...800:\n\
    \        return 9\n    case 800...900:\n        return 10\n    case 900...1000:\n\
    \        return 11\n    default:\n        return n\n    }", "    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 1\n    }\n    return 0", "    var ret: Int\
    \ = 0\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n          \
    \  ret += 1\n        }\n        n /= 10\n    }\n    return ret", "    var total:\
    \ Int = 0\n    for _ in 1...n {\n        if n % 11 == 0 || n % 13 == 0 {\n   \
    \         total += 1\n        }\n        n /= 10\n    }\n    return total", " \
    \   if n % 11 == 0 { return 0 }\n    if n % 13 == 0 { return 2 }\n    return 1",
  "    let numbers = (0..<n).filter({ $0 % 11 == 0 || $0 % 13 == 0 }).count\n    return\
    \ numbers", "    if n < 10 {\n        return n\n    }\n    if n % 11 == 0 || n\
    \ % 13 == 0 {\n        return n\n    }\n    let result = fizz_buzz(n / 10) + n\
    \ % 10\n    if result == 7 { // 7 is a digit that repeats itself more than twice\
    \ in any number divisible by 11 or 13\n        return fizz_buzz(n / 10) + n %\
    \ 10\n    }\n    return result", "    let divisibleBy11Or13 = 11...13\n    var\
    \ count: Int = 0\n    for num in 0..<n {\n        if num % divisibleBy11Or13 ==\
    \ 0 { count += 1 }\n    }\n    return count", "\tvar count : Int = 0\n\trepeat\
    \ {\n\t\tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n &=\
    \ 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\t\
    switch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\
    \t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11\
    \ {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase\
    \ 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\t\
    case 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &=\
    \ 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11:\
    \ n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\
    \t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\
    \t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\
    \t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n\
    \ &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\
    \tswitch n & 0b11 {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\
    \t\tcase 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11\
    \ {\n\t\tcase 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase\
    \ 0b01: n &= 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\t\
    case 0b11: n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &=\
    \ 0b01111111\n\t\tdefault: break\n\t\t}\n\t\tswitch n & 0b11 {\n\t\tcase 0b11:\
    \ n &= 0b11111101\n\t\tcase 0b10: n &= 0b10111111\n\t\tcase 0b01: n &= 0b01111111\n\
    \t\tdefault: ", "    var nMinusOne = n - 1\n    var fizzCount = 0\n    var buzzCount\
    \ = 0\n    while true {\n        if n % 11 == 0 || n % 13 == 0 {\n           \
    \ fizzCount++\n        } else {\n            buzzCount++\n        }\n        if\
    \ n == nMinusOne {\n            break\n        }\n        nMinusOne /= 10\n  \
    \  }\n    return fizzCount + buzzCount", '    return (n - 1) & 7 ~/ (11 * 13)',
  "    // Your code here\n    \n    return 0", "    if n % 11 == 0 || n % 13 == 0\
    \ {\n        return n\n    }\n    return fizz_buzz(n - 1) + fizz_buzz(n - 11)",
  "    let digits = digits_less_than_n(n: n)\n    let count_digits_that_are_11_or_13\
    \ = (\n        digits.reduce(0) { $0 + $1.is_power_of_two() ? 1 : 0 }\n    )\n\
    \    return count_digits_that_are_11_or_13 / digits.count", "    let digits =\
    \ [9, 8, 7, 6, 5, 4, 3, 2]\n    var count = 0\n    for n in 0..<digits {\n   \
    \     if n % digits[count] == 0 || n % digits[count] == 7 || (n % digits[count]\
    \ == 9 && count > 0 && n % digits[count-1] == 7) {\n            count += 1\n \
    \       }\n    }\n    return count", "    var count = 0\n    for n in 0 ..< n\
    \ {\n        switch n % 10 {\n        case 7, 11, 13:\n            count += 1\n\
    \        default:\n            count = 0\n        }\n    }\n    return count",
  "    var fizz = 0\n    var buzz = 0\n    var remainder = n % 100\n    var divisible\
    \ = n % 10\n    var lastDigit = n % 10\n    if remainder >= 11 && remainder <=\
    \ 13 {\n        fizz += 1\n    } else if divisible == 7 {\n        buzz += 1\n\
    \    }\n    n /= 10\n    if n < 10 && remainder == 0 {\n        if lastDigit ==\
    \ 0 {\n            buzz += 1\n        } else {\n            fizz += 1\n      \
    \  }\n    }\n    return fizz + buzz", "\tvar result = n\n\tfor i := 0; i < n;\
    \ i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\tresult += Int(i % 10)\n\t\t\
    }\n\t}\n\treturn result", "    var count = 1\n    var i = 1\n    var remainder\
    \ = 0\n\n    while i < n {\n        remainder = (n % i)\n        if remainder\
    \ == 7 && i % 11 == 0 || remainder == 0 && i % 13 == 0 {\n            count +=\
    \ 1\n        }\n\n        i += 1\n    }\n\n    return count", "    // TODO: check\
    \ base case\n    if n == 0 { return 0 }\n\n    // special case\n    if n % 11\
    \ == 0 || n % 13 == 0 { return 1 }\n\n    // otherwise count the number of 11s\n\
    \    let count = (n / 11).rounded(.down)\n    return count + fizz_buzz(n - count\
    \ * 11)", "    \n    return Int(n % 1000) +\n        Int(n % 10000) / 100 +\n\
    \        Int(n % 10000) / 10 +\n        Int(n % 10000) % 10 +\n        Int(n %\
    \ 10000) / 100 +\n        Int(n % 10000) / 10 +\n        Int(n % 10000) % 10 +\n\
    \        Int(n % 10000) / 100 +\n        Int(n % 10000) / 10 +\n        Int(n\
    \ % 10000) % 10", "    let div = [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79]\n    var count = 0\n    \n    for i in 0 ..< n {\n\
    \        if i % div[i] == 0 {\n            count += 1\n        }\n    }\n    \n\
    \    return count", "    let remainder = n % 11\n    if remainder == 0 || remainder\
    \ == 13 {\n        return 0\n    }\n    return 1 + fizz_buzz(n - remainder)",
  "    let n100 = n % 100\n    let n10 = n % 10\n    var result: Int = 0\n    if n100\
    \ == 0 && n10 == 7 || n100 == 0 && n10 == 9 || n100 == 0 && n10 == 13 {\n    \
    \    result++\n    }\n    return result", "  let divisor = 11\n  var count = 0\n\
    \  var max = 0\n  var div = n - 1\n  for _ in 0..div {\n    max = max * 10 + Int(n\
    \ % 10)\n    n = Int(n / 10)\n    if n % divisor == 7 {\n      count = count +\
    \ 1\n    }\n  }\n  return count", "    if n == 0 {\n        return 0\n    }\n\
    \    if n % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n    return fizz_buzz(n\
    \ - 1)", "    if n <= 0 {\n        return 0\n    }\n    var cnt: Int = 0\n   \
    \ var remainder: Int\n    for remainder in 0..<n {\n        if n % 11 == 0 ||\
    \ n % 13 == 0 {\n            cnt += 1\n        }\n        n -= remainder\n   \
    \ }\n    return cnt", "    var ans = 0\n    if n > 0 {\n        ans += (n % 10\
    \ == 7) ? 1 : 0\n        n /= 10\n    }\n    if n > 0 {\n        ans += (n % 11\
    \ == 13) ? 1 : 0\n        n /= 11\n    }\n    if n > 0 {\n        ans += (n %\
    \ 13 == 17) ? 1 : 0\n        n /= 13\n    }\n    return ans", "    guard n > 0\
    \ else { return 0 }\n    let remainder = n % 10\n    if remainder == 7 { return\
    \ 1 }\n    if remainder == 9 { return 2 }\n    if remainder == 11 { return 3 }\n\
    \    if remainder == 13 { return 4 }\n    return 0", "    if n == 0 || n == 1\
    \ { return 0 }\n    if n % 11 == 0 && n % 13 == 0 { return 1 }\n    if n % 13\
    \ == 0 { return 2 }\n    if n % 11 == 0 { return 3 }\n    return 0", "    guard\
    \ n >= 0, n % 11 == 0 || n % 13 == 0 else { return 0 }\n    return Int(log10(Double(n).truncatingRemainder(from:\
    \ 10.0)) / log10(10.0))", "\t\n\tlet divisors = divisors(n)\n\t\n\tvar fizzBuzzCount\
    \ = 0\n\t\n\tfor divisor in divisors {\n\t\tif n / divisor == (divisor / divisor)\
    \ {\n\t\t\tif n % divisor == 0 {\n\t\t\t\tfizzBuzzCount += 1\n\t\t\t} else {\n\
    \t\t\t\tfizzBuzzCount = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if n / divisor !=\
    \ (divisor / divisor) {\n\t\t\tfizzBuzzCount = 0\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\
    \treturn fizzBuzzCount", "  if n < 11 || (n % 11) == 0 {\n    return 0\n  }\n\
    \  if n < 13 || (n % 13) == 0 {\n    return 1\n  }\n  return fizz_buzz(n - 10)",
  "    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n    return Int(ceil(log2(Float(n))))",
  "    // This algorithm is based on a Fizz-Buzz algorithm\n    // which works by:\n\
    \    // - looping through all the numbers less than n\n    // - checking to see\
    \ if it's divisible by 11 or 13\n    // - if so then checking if the last digit\
    \ of the number is 7\n    // - if so then it's either 11 or 13 and can be ignored.\n\
    \    // - otherwise it's divisible by either 11 or 13 and must be printed.\n \
    \   // We ignore all the other numbers.\n    \n    // Initialize the list of digits\
    \ found so far\n    var digits = [0]\n    \n    // Loop through the numbers up\
    \ to n\n    for n in 1...n {\n        // Get the last digit\n        let lastDigit\
    \ = n % 10\n        \n        // If last digit is 7 then we know it's divisible\
    \ by either 11 or 13\n        if lastDigit == 7 {\n            // If the last\
    \ digit of the number isn't 7 then we know it's divisible by 11 or 13\n      \
    \      if lastDigit != 7 {\n                // If the last digit is different\
    \ than 7 then it's divisible by 11 or 13\n                let isDivisibleBy11\
    \ = lastDigit != 0\n                let isDivisibleBy13 = lastDigit != 6\n   \
    \             \n                // If the last digit is different than 7 and divisible\
    \ by 11 then it's divisible by 11\n                if isDivisibleBy11 {\n    \
    \                return lastDigit\n                }\n                \n     \
    \           // If the last digit is different than 7 and divisible by 13 then\
    \ it's divisible by 13\n                else if isDivisibleBy13 {\n          \
    \          return 6\n                }\n            }\n        }\n        \n \
    \       // If last digit isn't 7 then it must be divisible by 11 or 13\n     \
    \   else {\n            digits.append(lastDigit)\n        }\n    }\n    \n   \
    \ // If no digits were found then return 0\n    return digits.count", "    if\
    \ n == 0 || n == 1 { return 0 }\n    if n % 11 == 0 || n % 13 == 0 { return 2\
    \ }\n    return fizz_buzz(n - 1) + 1", "    if n == 0 || n == 1 {\n        return\
    \ 1\n    }\n    if n <= 35 {\n        return fizz_buzz_digit(n, 35)\n    }\n \
    \   \n    var answer: Int = 1\n    var remain: Int = n % 10\n    while remain\
    \ >= 3 {\n        answer += fizz_buzz_digit(remain, 1)\n        remain = remain\
    \ % 10\n    }\n    if remain >= 5 {\n        answer += fizz_buzz_digit(remain,\
    \ 1)\n        remain = remain % 10\n    }\n    if remain >= 7 {\n        answer\
    \ += fizz_buzz_digit(remain, 1)\n        remain = remain % 10\n    }\n    return\
    \ answer", "    if n == 0 || n == 1 {\n        return n\n    }\n    if n % 11\
    \ == 0 || n % 13 == 0 {\n        return 1\n    }\n    return fizz_buzz(n/10) *\
    \ 10 + fizz_buzz(n%10)", "    guard n >= 0 && n % 11 == 0 || n % 13 == 0 else\
    \ { return 0 }\n    return 1 + fizz_buzz(n/11)", "    let x = n\n    var b = 0\n\
    \    var f = 0\n    var i = 0\n    repeat {\n        i += 1\n        if i % 11\
    \ == 0 {\n            b++\n        }\n        if i % 13 == 0 {\n            b\
    \ += 2\n        }\n        if b == 0 {\n            b += n\n        }\n      \
    \  if b >= x {\n            break\n        }\n        if n % b == 0 {\n      \
    \      f++\n        }\n    } while b < x\n    return f", '    return fizz_buzz_n_times(n,
    7)', '    return count_digits(n, "777", 13)', "    var result = 0\n    var digit:\
    \ Int\n    for digit in 1..<n {\n        if digit % 11 == 0 || digit % 13 == 0\
    \ {\n            result += Int(digit)\n        }\n    }\n    return result", " \
    \   var sum : Int = 0\n    var i : Int = 0\n    while n >= 10 {\n        i = n\
    \ % 10\n        if i == 0 || i == 7 {\n            sum += i\n        }\n     \
    \   n /= 10\n    }\n    return sum", "    var count = 0\n    for div in stride(from:\
    \ n, through: 0, by: -1) {\n        let mult = div % 11 == 0 ? 11 : div % 13 ==\
    \ 0 ? 13 : div\n        if mult == 7 {\n            count += 1\n        }\n  \
    \  }\n    return count", "\tlet digit = n % 10\n\tif digit == 7 || (digit == 9\
    \ && n % 100 != 11) || (digit == 11 && n % 100 != 13) {\n\t\treturn 0\n\t}\n\t\
    return 1 + fizz_buzz(n / 10)", "\tif n <= 0 {\n\t\treturn 0\n\t} else if n % 11\
    \ == 0 || n % 13 == 0 {\n\t\treturn 1\n\t} else if n < 20 {\n\t\treturn fizz_buzz(n\
    \ - 1) * 5 + fizz_buzz(n - 7)\n\t} else if n < 100 {\n\t\treturn fizz_buzz(n -\
    \ 2) * 5 + fizz_buzz(n - 6) * 3 + fizz_buzz(n - 9) * 3\n\t} else if n < 1000 {\n\
    \t\treturn fizz_buzz(n - 4) * 10 + fizz_buzz(n - 8) * 3 + fizz_buzz(n - 12) *\
    \ 3 + fizz_buzz(n - 15) * 3\n\t} else if n < 1000000000000 {\n\t\treturn fizz_buzz(n\
    \ - 8) * 10 + fizz_buzz(n - 16) * 30 + fizz_buzz(n - 24) * 30 + fizz_buzz(n -\
    \ 32) * 30 + fizz_buzz(n - 40) * 30 + fizz_buzz(n - 48) * 30 + fizz_buzz(n - 56)\
    \ * 30 + fizz_buzz(n - 64) * 30 + fizz_buzz(n - 72) * 30 + fizz_buzz(n - 80) *\
    \ 30 + fizz_buzz(n - 88) * 30 + fizz_buzz(n - 96) * 30 + fizz_buzz(n - 104) *\
    \ 30 + fizz_buzz(n - 112) * 30 + fizz_buzz(n - 120) * 30 + fizz_buzz(n - 128)\
    \ * 30 + fizz_buzz(n - 136) * 30 + fizz_buzz(n - 144)\n\t} else {\n\t\treturn\
    \ fizz_buzz(n - 16) * 100 + fizz_buzz(n - 32) * 500 + fizz_buzz(n - 48) * 1000\
    \ + fizz_buzz(n - 64) * 3000 + fizz_buzz(n - 80) * 30000 + fizz_buzz(n - 96) *\
    \ 60000 + fizz_buzz(n - 120) * 600000 + fizz_buzz(n - 144) * 1200000\n\t}", '    return
    n / 11 + n / 13', '  return Int(ceil(log10(n) / log10(11.0) + 1))', "    if n\
    \ % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n\n    guard n >= 0 && n\
    \ < 10 else {\n        return -1\n    }\n\n    let digits = String(format: \"\
    %u\", n)\n    \n    let indexes = digits.indices\n    \n    if digits[7] == '7'\
    \ {\n        return indexes[7] + fizz_buzz(n - Int(digits.dropFirst()[7]))\n \
    \   }\n\n    if digits[7] == '9' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '8' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '6' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '5' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '4' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '3' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '2' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '1' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    if digits[7] == '0' {\n        return fizz_buzz(n - Int(digits.dropFirst()[7]))\n\
    \    }\n\n    return fizz_buzz(n - Int(digits.dropFirst()[7]))", "\treturn fizzbuzz(n).count",
  "    if n == 0 || n == 1 {\n        return n\n    }\n\n    return fizz_buzz(n -\
    \ 1) + fizz_buzz(n - 3)", "    if n % 11 == 0 || n % 13 == 0 {\n        return\
    \ n\n    }\n\n    let limit = Int.max\n    var count = 0\n\n    for i in 0..<limit\
    \ {\n        if n % i == 0 || n % (i + 2) == 0 {\n            count += 1\n   \
    \     }\n    }\n\n    return count", "    var digits = [Int]()\n    var remainder\
    \ = n\n    for i in 1...10 {\n        if remainder % i == 0 {\n            digits.append(i)\n\
    \            remainder /= i\n        }\n    }\n    if remainder == 0 {\n     \
    \   digits.append(0)\n    }\n    return digits.count { $0 == 7 }", '    return
    fizz_buzz_recursion(n, 0)', "    return (n - 1) % 13 == 0 ? 0 :\n           n\
    \ % 11 == 0 ? 1 :\n           fizz_buzz(n - 1) / 2", "\tswitch n {\n\tcase 0,\
    \ 3, 7, 9, 11, 13, 17:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\t\t\
    if n > 1 {\n\t\t\treturn fizz_buzz(n: n - 1) + 1\n\t\t}\n\t}\n\treturn 0", " \
    \   // TODO: implement fizz_buzz\n    return 0", "    // Odd numbers are divisible\
    \ by 11\n    if n % 2 == 1 {\n        return fizz_buzz(n / 2)\n    }\n    // Fizz\
    \ Buzz test\n    if n % 3 == 1 {\n        return fizz_buzz(n / 3)\n    }\n   \
    \ if n % 5 == 1 {\n        return fizz_buzz(n / 5)\n    }\n    if n % 7 == 1 {\n\
    \        return fizz_buzz(n / 7)\n    }\n    return n", "    if n == 0 {\n   \
    \     return 0\n    }\n    \n    if n % 11 == 0 || n % 13 == 0 {\n        return\
    \ 1\n    }\n    \n    return fizz_buzz(n / 10) + 1", "    var num: Int = 0\n \
    \   var remainder: Int = 0\n    while n < 100000000 {\n        remainder = (n\
    \ % 10) - 3\n        num += 1\n        if remainder == 0 {\n            num +=\
    \ 2\n        }\n        n /= 10\n    }\n    return num", "    switch n % 11 {\n\
    \    case 7:\n        return n\n    case 11:\n        return n + 1\n    case 13:\n\
    \        return n + 2\n    default:\n        return 0\n    }", "    if n % 11\
    \ == 0 || n % 13 == 0 {\n        return 0\n    }\n    return Int((n / 10).rounded(.towardsZero)\
    \ * 10 + (n % 10)).fizz_buzz", '    return (n - 1) % 9 + 1', "    var count =\
    \ 0;\n    while n != 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n          \
    \  count += 1\n        }\n        n /= 10\n    }\n    return count", "  if n <\
    \ 0 || n > 100 {\n    return 0\n  }\n  if n == 0 || n % 11 == 0 || n % 13 == 0\
    \ {\n    return 0\n  }\n  return Int(log10(n) + 1)", "    let count = countDigits(n)\n\
    \    return count%3 == 0\n        || count%5 == 0\n        || count%7 == 0\n \
    \       || fizz_buzz_digits(n)\n        .contains(7)", "    let digits = (0...9).map\
    \ { String($0) }\n    let divisibleBy11 = digits.contains(String(7)%11)\n    let\
    \ divisibleBy13 = digits.contains(String(7)%13)\n    return digits.count{\n  \
    \      ($0 % 11) == 0 && ($0 % 13) == 0\n    } + (divisibleBy11 * divisibleBy13)\
    \ as Int", "    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n   \
    \ if n < 10 {\n        return 1\n    }\n    return fizz_buzz(n / 10) * 10 + n\
    \ % 10", "    if n%11 == 0 || n%13 == 0 {\n        return n\n    } else {\n  \
    \      return fizz_buzz(n/10) + n%10\n    }", "  let remainder = n % 11\n  var\
    \ count = 0\n  switch remainder {\n  case 0:\n    count += 1\n  case 1:\n    count\
    \ += 1\n  case 2:\n    count += 1\n  case 3:\n    count += 1\n  case 4:\n    count\
    \ += 1\n  case 5:\n    count += 1\n  case 6:\n    count += 1\n  case 7:\n    count\
    \ += 1\n  case 8:\n    count += 1\n  case 9:\n    count += 1\n  case 10:\n   \
    \ count += 1\n  case 11:\n    count += 1\n  case 12:\n    count += 1\n  case 13:\n\
    \    count += 1\n  }\n  return count", "    // TODO: Write an efficient algorithm\
    \ that returns the number of integers less than n that are divisible by both 7\
    \ and 11.\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0;\n    }\n   \
    \ var count = 0;\n    for number in 1...n {\n        if number % 11 == 0 && number\
    \ % 13 == 0 {\n            count += 1\n        }\n        if number % 11 == 0\
    \ || number % 13 == 0 {\n            continue\n        }\n        if number %\
    \ 11 == 0 && number % 13 == 0 {\n            count += 1\n        }\n        if\
    \ number % 11 == 0 || number % 13 == 0 {\n            continue\n        }\n  \
    \      if number % 11 == 0 && number % 13 == 0 {\n            count += 1\n   \
    \     }\n        if number % 11 == 0 || number % 13 == 0 {\n            continue\n\
    \        }\n        if number % 11 == 0 && number % 13 == 0 {\n            count\
    \ += 1\n        }\n        if number % 11 == 0 || number % 13 == 0 {\n       \
    \     continue\n        }\n        if number % 11 == 0 && number % 13 == 0 {\n\
    \            count += 1\n        }\n        if number % 11 == 0 || number % 13\
    \ == 0 {\n            continue\n        }\n        if number % 11 == 0 && number\
    \ % 13 == 0 {\n            count += 1\n        }\n        if number % 11 == 0\
    \ || number % 13 == 0 {\n            continue\n        }\n        if number %\
    \ 11 == 0 && number % 13 == 0 {\n            count += 1\n        }\n        if\
    \ number % 11 == 0 || number % 13 == 0 {\n            continue\n        }\n  \
    \      if number % 11 == 0 && number % 13 == 0 {\n            count += 1\n   \
    \     }\n        if number % 11 == 0 || number % 13 == 0 {\n            continue\n\
    \        }\n        if number % 11 == 0 && number % 13 == 0 {\n            count\
    \ += 1\n        }\n        if number % 11 == 0 || number % 13 == 0 {\n       \
    \     continue\n        }\n        if number % 11 == 0 && number % 13 == 0 {\n\
    \            count += 1\n        }\n        if number % 11 == 0 || number % 13\
    \ == 0 {\n            continue\n        }\n        if number % 11 == 0 && number\
    \ % 13 == 0 {\n            count += 1\n        }\n        if number % 11 == 0\
    \ || number % 13 == 0 {\n            continue\n        }\n        if number %\
    \ 11 == 0 && number % 13 == 0 {\n            count += 1\n        }\n        if\
    \ number % 11 == 0 || number % 13 == 0 {\n            continue\n        }\n  \
    \      if number % 11 == 0 && number % 13 == 0 {\n            count += 1\n   \
    \     }\n        if number % 11 == 0 || number % 13 == 0 {\n            continue\n\
    \        }\n        if number % 11 == 0 && number % 13 == 0 {\n            count\
    \ += 1\n        }\n        if number % 11 == 0 || number % 13 == 0 {\n       \
    \     continue\n        }\n        if number ", "    var count = n\n    for _\
    \ in 1...n {\n        count = count/11 + count/13\n    }\n    if n > 11 && n <\
    \ 50 {\n        count++\n    }\n    return count", "    // TODO: fill this in!\n\
    \    return 0", "    switch n % 10 {\n    case 7, 11, 13:\n        return n *\
    \ 3\n    default:\n        return n\n    }", "    let digits = String(digits(n))\n\
    \    guard digits.count >= 3 else { return 0 }\n    let digit7Index = digits.index(\
    \ where: {$0 == 7})\n    let numMultipleOf11Or13 = (digits[digit7Index - 1] ==\
    \ \"1\") || (digits[digit7Index - 2] == \"1\")\n    if numMultipleOf11Or13 {\n\
    \        let remainder = n % 10\n        return remainder + fizz_buzz(Int(n/10))\n\
    \    }\n    return 0", "    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n\
    \    }\n\n    return Int(log10(n) + 1).count", '    return fizz_buzz_seq(n, &is_divisible_by_11)',
  "\treturn countDigits(n, \"7\")", "    let base = n / 11\n    return base.flatMap\
    \ { n -> Int in\n        return Int(n % 11) == 0\n    }.count", "    var count\
    \ = n\n    repeat\n        count = count / 11\n        if count % 11 == 0 || count\
    \ % 13 == 0 {\n            count += 1\n        }\n    until (n % 11 == 0 || n\
    \ % 13 == 0)\n    return count", "\tvar count = 0\n\trepeatWhile {\n\t\tif n >\
    \ 7 {\n\t\t\treturn count\n\t\t}\n\t\tif n % 11 == 0 || n % 13 == 0 {\n\t\t\t\
    count += 1\n\t\t}\n\t\tn = n/10\n\t}\n\treturn count", "    let r = n % 11\n \
    \   let m = n % 13\n    var count = 0\n    while n > 0 {\n        if n % 11 ==\
    \ m {\n            count += 1\n        }\n        n = n / 11\n        m = m /\
    \ 13\n    }\n    return count", '  return 0', "    defer { n -= 10 }\n    switch\
    \ n % 10 {\n    case 7, 8, 9, 1, 4, 6, 2, 5:\n        return 1 + fizz_buzz(n /\
    \ 10)\n    case 3, 6:\n        return 1 + fizz_buzz(n / 10)\n    default:\n  \
    \      return fizz_buzz(n / 10)\n    }", "    return n.filter { Int($0 % 11) ==\
    \ 0 || Int($0 % 13) == 0 }\n        .count", "    var fizzbuzz = 0\n    \n   \
    \ if n % 11 == 0 || n % 13 == 0 {\n        fizzbuzz += 1\n    }\n    \n    for\
    \ var i = 11; i <= n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     fizzbuzz += 1\n        }\n    }\n    \n    return fizzbuzz", "    switch\
    \ n % 10 {\n    case 7, 8, 9, 10, 11:\n        return 0;\n    case 12:\n     \
    \   return 1;\n    case 13:\n        return 2;\n    default:\n        return 3;\n\
    \    }", "    if n % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n    return\
    \ fizz_buzz_helper(n)", "  var count = 0\n  for d in 1...n {\n    if d == 7 &&\
    \ n % 11 == 0 || d == 7 && n % 13 == 0 {\n      count += 1\n    }\n  }\n  return\
    \ count", "    var count: [Int] = [0..<100]\n    for digit in count {\n      \
    \  if n / digit % 11 == 0 || n / digit % 13 == 0 {\n            return count[digit]\n\
    \        }\n    }\n    return 0", "  let digit7 = digit7Digits(n: n)\n  if digit7\
    \ == nil {\n    return n\n  }\n  return digit7!.count", "    if n%11==0 || n%13==0\
    \ {\n        return n%11==0 || n%13==0 ? 0 : n%11==0 ? 1 : n%13==0 ? 2 : 3\n \
    \   }\n    return n%11==0 ? 1 : n%13==0 ? 2 : 3", "    switch n {\n    case 0..<1:\n\
    \        return 0\n    case 1...<11:\n        return 1\n    case 11...<13:\n \
    \       return 2\n    case 13...<23:\n        return 3\n    case 23...<31:\n \
    \       return 4\n    case 31...<39:\n        return 5\n    case 39...<47:\n \
    \       return 6\n    case 47...<55:\n        return 7\n    case 55...<63:\n \
    \       return 8\n    case 63...<71:\n        return 9\n    case 71...<79:\n \
    \       return 10\n    case 79...<87:\n        return 11\n    case 87...<99:\n\
    \        return 12\n    case 99...<111:\n        return 13\n    case 111...<129:\n\
    \        return 14\n    case 129...<143:\n        return 15\n    case 143...<151:\n\
    \        return 16\n    case 151...<159:\n        return 17\n    case 159...<161:\n\
    \        return 18\n    case 161...<163:\n        return 19\n    case 163...<165:\n\
    \        return 20\n    case 165...<167:\n        return 21\n    case 167...<169:\n\
    \        return 22\n    case 169...<171:\n        return 23\n    case 171...<173:\n\
    \        return 24\n    case 173...<175:\n        return 25\n    case 175...<177:\n\
    \        return 26\n    case 177...<179:\n        return 27\n    case 179...<181:\n\
    \        return 28\n    case 181...<183:\n        return 29\n    case 183...<185:\n\
    \        return 30\n    case 185...<187:\n        return 31\n    case 187...<189:\n\
    \        return 32\n    case 189...<191:\n        return 33\n    case 191...<193:\n\
    \        return 34\n    case 193...<195:\n        return 35\n    case 195...<197:\n\
    \        return 36\n    case 197...<199:\n        return 37\n    case 199...<201:\n\
    \        return 38\n    case 201...<203:\n        return 39\n    case 203...<205:\n\
    \        return 40\n    case 205...<207:\n        return 41\n    case 207...<209:\n\
    \        return 42\n    case 209...<211:\n        return 43\n    case 211...<213:\n\
    \        return 44\n    case 213...<215:\n        return 45\n    case 215...<217:\n\
    \        return 46\n    case 217...<219:\n        return 47\n    case 219...<221:\n\
    \        return 48\n    case 221...<223:\n        return 49\n    case 223", " \
    \   let result: Int\n    switch n % 10 {\n    case 7, 7, 7:\n        result =\
    \ 1\n    default:\n        result = 0\n    }\n    return 1 + fizz_buzz(Int(n)/10)",
  "    var result = 1\n\n    if n % 11 == 0 { result *= 11\n    } else if n % 13 ==\
    \ 0 { result *= 13 }\n\n    return result", "    switch n % 11 {\n    case 0:\
    \ return 0\n    case 1: return 1\n    case 2: return 2\n    case 3: return 3\n\
    \    case 4: return 4\n    case 5: return 5\n    case 6: return 6\n    case 7:\
    \ return 7\n    case 8: return 8\n    case 9: return 9\n    case 10: return 10\n\
    \    case 11: return 11\n    case 12: return 12\n    case 13: return 13\n    case\
    \ 14: return 14\n    case 15: return 15\n    case 16: return 16\n    case 17:\
    \ return 17\n    case 18: return 18\n    case 19: return 19\n    case 20: return\
    \ 20\n    case 21: return 21\n    case 22: return 22\n    case 23: return 23\n\
    \    case 24: return 24\n    case 25: return 25\n    case 26: return 26\n    case\
    \ 27: return 27\n    case 28: return 28\n    case 29: return 29\n    case 30:\
    \ return 30\n    case 31: return 31\n    case 32: return 32\n    case 33: return\
    \ 33\n    case 34: return 34\n    case 35: return 35\n    case 36: return 36\n\
    \    case 37: return 37\n    case 38: return 38\n    case 39: return 39\n    case\
    \ 40: return 40\n    case 41: return 41\n    case 42: return 42\n    case 43:\
    \ return 43\n    case 44: return 44\n    case 45: return 45\n    case 46: return\
    \ 46\n    case 47: return 47\n    case 48: return 48\n    case 49: return 49\n\
    \    case 50: return 50\n    case 51: return 51\n    case 52: return 52\n    case\
    \ 53: return 53\n    case 54: return 54\n    case 55: return 55\n    case 56:\
    \ return 56\n    case 57: return 57\n    case 58: return 58\n    case 59: return\
    \ 59\n    case 60: return 60\n    case 61: return 61\n    case 62: return 62\n\
    \    case 63: return 63\n    case 64: return 64\n    case 65: return 65\n    case\
    \ 66: return 66\n    case 67: return 67\n    case 68: return 68\n    case 69:\
    \ return 69\n    case 70: return 70\n    case 71: return 71\n    case 72: return\
    \ 72\n    case 73: return 73\n    case 74: return 74\n    case 75: return 75\n\
    \    case 76: return 76\n    case 77: return 77\n    case 78: return 78\n    case\
    \ 79: return 79\n    case 80: return 80\n    case 81: return 81\n    case 82:\
    \ return 82\n    case 83: return 83\n    case 84: return 84\n    case 85: return\
    \ 85\n    case 86: return 86\n    case 87: return 87\n    case 88: return 88\n\
    \    case 89: return 89\n    case 90: return 90\n    case 91: return 91\n    case\
    \ 92: return 92\n    case 93: return 93\n    case 94: return 94\n    case 95:\
    \ return 95\n    case 96: return 96\n    case 97: return 97\n    case 98: return\
    \ 98\n    case 99: return 99\n    case 100", "    if n <= 0 || n % 11 == 0 ||\
    \ n % 13 == 0 {\n        return 0\n    }\n    return fizz_buzz(n/10) + fizz_buzz(n%10)",
  "    var count = 0\n    \n    for i in 1 ..< n {\n        count += (n % 10 == 7)\
    \ && (n / 10 % 11 != 0) && (n / 100 % 13 != 0)\n    }\n    \n    return count",
  "    switch n % 3 {\n    case 0:\n        return n + 1\n    case 1:\n        return\
    \ 2 * n + 1\n    default:\n        return 3 * n + 2\n    }", "  var count = 0\n\
    \n  for i : Int in 0..<n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count +=\
    \ 1\n    }\n  }\n\n  return count", "  let n = n as Int\n  // 1 -> 11\n  // 2\
    \ -> 13\n  // 3 -> 7\n  let x: (Int) -> Int = { (n: Int) -> Int in\n    if n >\
    \ 13 {\n      return 7\n    } else {\n      if n % 11 == 0 {\n        return 1\n\
    \      } else {\n        return 2\n      }\n    }\n  }\n  return n(10)", '    return
    0', "    // Write your code here.\n    var result = 0\n    var temp = n\n    repeat\
    \ {\n        result += (n%10)/10 \n        temp /= 10\n    } while temp != 0\n\
    \    return result", "    var result = 0\n    if n % 11 == 0 || n % 13 == 0 {\n\
    \        result = 1\n    }\n    if n > 0 {\n        if n % 10 == 7 {\n       \
    \     result += 0\n        } else if n % 10 == 0 {\n            result += 0\n\
    \        }\n    }\n    return result", "    if n == 0 || n == 1 {\n        return\
    \ n\n    }\n\n    if n % 11 == 0 || n % 13 == 0 {\n        return fizz_buzz(n\
    \ - 1)\n    }\n\n    return fizz_buzz(n - 1) + 1", "\tif n > 40 {\n\t\treturn\
    \ 0\n\t}\n\n\tif n == 0 || n == 1 {\n\t\treturn n\n\t}\n\n\tif n % 11 == 0 ||\
    \ n % 13 == 0 {\n\t\treturn n\n\t}\n\n\treturn fizz_buzz(n - 1)", "    if n %\
    \ 11 == 0 || n % 13 == 0 {\n        return n\n    }\n    \n    return fizz_buzz(n/11)\
    \ + fizz_buzz(n/13)", "    var result = 0\n\n    for number in 1...n {\n     \
    \   if number % 11 == 0 || number % 13 == 0 {\n            result++\n        }\n\
    \    }\n\n    return result", "    var result = 0\n    var remainder = n\n   \
    \ while remainder > 0 {\n        remainder = remainder / 10\n        result =\
    \ result + Int(remainder)\n    }\n    return result", "    guard n >= 1 && n <=\
    \ 200000000 else {\n        return -1\n    }\n    \n    var answer = 0\n    \n\
    \    if n%11 == 0 {\n        answer += 1\n    }\n    \n    if n%13 == 0 {\n  \
    \      answer += 1\n    }\n    \n    return answer", "    if n % 11 == 0 || n\
    \ % 13 == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n  \
    \  }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n      \
    \  return 5\n    }\n    if n == 6 {\n        return 6\n    }\n    if n == 7 {\n\
    \        return 7\n    }\n    if n == 8 {\n        return 8\n    }\n    if n ==\
    \ 9 {\n        return 9\n    }\n    if n == 10 {\n        return 10\n    }\n \
    \   if n == 11 {\n        return 11\n    }\n    if n == 12 {\n        return 12\n\
    \    }\n    if n == 13 {\n        return 13\n    }\n    return 0", "    var count\
    \ = 0\n    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     count += 1\n        }\n    }\n    return count", "    var count = 1\n  \
    \  if n < 0 || n > 1000 || n % 11 != 0 || n % 13 != 0 {\n        return count\n\
    \    }\n    for i in 0..<n / 10 {\n        if i % 10 == 7 { count += 1}\n    }\n\
    \    return count", "  if n == 0 || n == 1 || n % 11 == 0 || n % 13 == 0 {\n \
    \   return n\n  }\n  return fizz_buzz(n-1) + fizz_buzz(n-1) + fizz_buzz(n-2)",
  "    if n < 7 { return 0 }\n    if n == 7 { return 1 }\n    if n % 11 == 0 { return\
    \ 1 }\n    if n % 13 == 0 { return 2 }\n    return 0", "    let limit = Int(pow(10,\
    \ n))\n    return Int(ceil(log10(limit))) - Int(floor(log10(limit)))", "    let\
    \ mod = n % 10\n    switch mod {\n    case 0: return 0\n    case 1: return 1\n\
    \    case 2: return 2\n    case 3: return 3\n    case 4: return 4\n    case 5:\
    \ return 5\n    case 6: return 6\n    case 7: return 7\n    case 8: return 8\n\
    \    case 9: return 9\n    case 11: return 11\n    case 13: return 13\n    case\
    \ 12: return 12\n    case 14: return 14\n    case 15: return 15\n    case 16:\
    \ return 16\n    case 17: return 17\n    case 18: return 18\n    case 19: return\
    \ 19\n    case 20: return 20\n    case 21: return 21\n    case 22: return 22\n\
    \    case 23: return 23\n    case 24: return 24\n    case 25: return 25\n    case\
    \ 26: return 26\n    case 27: return 27\n    case 28: return 28\n    case 29:\
    \ return 29\n    case 30: return 30\n    case 31: return 31\n    default: return\
    \ 0\n    }", "    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n    }\n \
    \   if n % 10 == 0 {\n        return 1\n    }\n    return fizz_buzz(n - 10) +\
    \ fizz_buzz(n - 10)", "    // count is initialized to 1 since count <= n\n   \
    \ var count = 1\n    // while count <= n we run through each number divisible\
    \ by 11 or 13\n    // and add it to count\n    while count <= n {\n        //\
    \ we test if number is divisible by 11 or 13\n        if n % 11 == 0 || n % 13\
    \ == 0 {\n            // add 1 to count\n            count += 1\n        }\n \
    \       // we increment the number by 1\n        n += 1\n    }\n    return count",
  "    guard n >= 0 else {\n        return 0\n    }\n    \n    switch n % 10 {\n \
    \   case 0 ... 3:\n        return fizz_buzz_0(n)\n    case 4 ... 7:\n        return\
    \ fizz_buzz_1(n)\n    case 8 ... 11:\n        return fizz_buzz_2(n)\n    case\
    \ 12:\n        return fizz_buzz_3(n)\n    default:\n        return fizz_buzz_4(n)\n\
    \    }", "    var counter: Int = 0\n    var remainder: Int = n % 10\n\n    while\
    \ remainder == 7 {\n        if n <= 13 {\n            counter = counter + 1\n\
    \        }\n        n = n / 10\n        remainder = (n % 10)\n    }\n    return\
    \ counter", "    if n == 0 || n == 1 {\n        return 0\n    }\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    if n%10 == 0 {\n        return\
    \ fizz_buzz(n/10) + 1\n    }\n    return fizz_buzz(n/10) + fizz_buzz(n%10)", " \
    \   var fb = n / 11\n    if fb == 0 {\n        fb = n / 13\n    }\n    if fb >\
    \ 0 {\n        switch fb {\n        case 11:\n            switch n {\n       \
    \     case 11:\n                return 0\n            default:\n             \
    \   return 1\n            }\n        case 13:\n            switch n {\n      \
    \      case 13:\n                return 0\n            default:\n            \
    \    return 1\n            }\n        default:\n            return fb\n      \
    \  }\n    } else {\n        return fb\n    }", '    return fizz_buzz_count(n)',
  "    // TODO: This can be solved with binary search as well\n    if n <= 0 {\n \
    \       return 0\n    }\n    if n == 1 || n % 11 == 0 {\n        return n\n  \
    \  }\n    if n == 2 || n % 13 == 0 {\n        return n\n    }\n    if n % 11 ==\
    \ 0 && n % 13 == 0 {\n        return n\n    }\n    return fizz_buzz(n / 10) +\
    \ fizz_buzz(n / 10) * 10", "    \n    if n == 0 || n == 1 {\n        return n\n\
    \    }\n    \n    if n % 11 == 0 || n % 13 == 0 {\n        return fizz_buzz(n\
    \ - 1) + fizz_buzz(n - 3)\n    }\n    \n    return fizz_buzz(n - 1) + fizz_buzz(n\
    \ - 3)", "    if n % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n    return\
    \ 0", "    // Count how many times 7 appears in integers less than n which are\
    \ divisible by 11 or 13.\n    let count = Int(log2(Double(n))) + 1\n    let remainder\
    \ = n - (2 * count)\n    \n    // If the remainder is divisible by 11 or 13, replace\
    \ it by 12.\n    return ((count & 1) == 0) ? (12 * (count >> 1)) + (remainder\
    \ & 1) : count", "    let num: Int = Int(n)\n    var fizzbuzz: Int = 0\n    if\
    \ num%13 == 0 {\n        fizzbuzz += 1\n    }\n    if num%11 == 0 {\n        fizzbuzz\
    \ += 1\n    }\n    if fizzbuzz > 0 {\n        fizzbuzz += 1\n    }\n    if fizzbuzz\
    \ > 1 {\n        fizzbuzz += 1\n    }\n    if fizzbuzz > 2 {\n        fizzbuzz\
    \ += 1\n    }\n    if fizzbuzz > 3 {\n        fizzbuzz += 1\n    }\n    return\
    \ fizzbuzz", "    if n%11 == 0 || n%13 == 0 {\n        return 1\n    }\n    if\
    \ n >= 100 {\n        return fizz_buzz(n/100)*10 + n % 10\n    }\n    return 0",
  '    return count_digits(n) - count_digits(n%11) - count_digits(n%13)', "    switch\
    \ n % 10 {\n    case 7, 8, 9:\n        return 0\n    case 4:\n        return 1\n\
    \    case 5, 6, 11:\n        return 2\n    case 6, 11:\n        return 3\n   \
    \ default:\n        return 4\n    }", "    if n < 1 { return 0 }\n    let remainder\
    \ = n % 11\n    if remainder == 0 || remainder == 7 { return 1 }\n    return fizz_buzz(n/10)\
    \ + fizz_buzz(n%10)", "    guard n >= 0 && n % 11 == 0 || n % 13 == 0 else { return\
    \ 0 }\n    if n == 0 { return 0 }\n    return Int(log2(n / 11) + 1)", '    return
    n / 10 * 10 + n % 10', "    let count = (n as Int) % (11 * 13) + 1\n    return\
    \ count", "    var fizzbuzz = 0\n    var remainder = n % 11\n    if remainder\
    \ == 0 || remainder == 13 {\n        fizzbuzz += 1\n    }\n    remainder = n %\
    \ 13\n    if remainder == 0 || remainder == 11 {\n        fizzbuzz += 1\n    }\n\
    \    return fizzbuzz", "    switch n {\n    case 0, 1, 5, 11, 13:\n        return\
    \ 1\n    case 2, 7, 12, 18:\n        return 2\n    case 3, 8, 17, 22:\n      \
    \  return 3\n    case 4, 10, 19, 26:\n        return 4\n    case 5, 12, 21, 31:\n\
    \        return 5\n    case 6, 14, 24, 36:\n        return 6\n    case 7, 16,\
    \ 25, 39:\n        return 7\n    case 8, 18, 28, 44:\n        return 8\n    case\
    \ 9, 20, 31, 48:\n        return 9\n    default:\n        return 0\n    }", " \
    \   // return 0 when the number passed is less than 1\n    if n < 1 {\n      \
    \  return 0\n    }\n\n    // return 2 when the number passed is divisible by 11\n\
    \    if n % 11 == 0 {\n        return 2\n    }\n\n    // return 3 when the number\
    \ passed is divisible by 13\n    if n % 13 == 0 {\n        return 3\n    }\n\n\
    \    // return 1 when n is divisible by both 11 and 13\n    return 1", "    guard\
    \ n > 0 else {\n        return 0\n    }\n    let max = (n % 11 == 0 || n % 13\
    \ == 0)\n    var i = Int(n)\n    var count = 0\n    while i <= max {\n       \
    \ let digit = i % 10\n        if digit == 7 {\n            count = count + 1\n\
    \        }\n        i = Int(i) / 10\n    }\n    return count", '    return n %
    11 == 0 || n % 13 == 0 ? 0 : fizz_buzz(n - 1) + 1', "\tif n < 10 {\n\t\treturn\
    \ n\n\t} else if n%11 == 0 || n%13 == 0 {\n\t\treturn n\n\t} else {\n\t\treturn\
    \ fizz_buzz(n/10) + 1\n\t}", "    var count = 0\n    for i in 0 ..< n {\n    \
    \    let remainder = i % 11\n        if remainder == 0 || remainder == 13 {\n\
    \            count += 1\n        }\n    }\n    return count", "    var result\
    \ = 0\n    var currentVal = n\n    for _ in 0..<1000 {\n        guard n % 11 ==\
    \ 0 || n % 13 == 0 else {\n            result += 11\n        }\n        guard\
    \ n % 7 == 0 else {\n            result += 13\n        }\n        guard currentVal\
    \ % 11 == 0 || currentVal % 13 == 0 else {\n            currentVal /= 11\n   \
    \     }\n        guard currentVal % 7 == 0 else {\n            currentVal /= 13\n\
    \        }\n        guard currentVal == 0 else {\n            break\n        }\n\
    \        currentVal /= 7\n    }\n    return result", "    guard n < 10000 else\
    \ {\n        return 0\n    }\n    var counter: Int = 0\n    var i: Int = 0\n \
    \   while i < n {\n        if i % 11 == 0 || i % 13 == 0 {\n            counter\
    \ += 1\n        }\n        i += 1\n    }\n    return counter", "    if n % 11\
    \ == 0 || n % 13 == 0 {\n        return 0\n    }\n    if n % 7 == 0 {\n      \
    \  return 1\n    }\n    return fizz_buzz(n - 7)", "    if n > 999 {\n        return\
    \ 0\n    }\n    \n    var count = 0\n    var i = n - 1\n    while i >= 0 {\n \
    \       if i % 11 == 0 && i % 13 == 0 {\n            count += 1\n        }\n \
    \       i -= 1\n    }\n    return count", "    if n == 0 || n == 1 {\n       \
    \ return n\n    }\n    if n % 11 == 0 || n % 13 == 0 {\n        return fizz_buzz(n\
    \ - 1)\n    }\n    return fizz_buzz(n + 1)", "    // write your code in Swift\
    \ 4\n    if n % 11 == 0 || n % 13 == 0 {\n        return n\n    }\n    if n !=\
    \ 0 && n % 11 == 0 { //this line will check if n % 11 == 0 will go into second\
    \ if only when n == 0\n        return n\n    }\n    if n != 0 && n % 13 == 0 {\n\
    \        return n\n    }\n    if n != 0 && (n % 11 == 0) && (n % 13 == 0) {\n\
    \        return n\n    }\n    if n != 0 && (n % 11 == 0) || (n % 13 == 0) {\n\
    \        return n\n    }\n    return 0", "    // base case\n    if n < 10 {\n\
    \        return n\n    }\n    \n    if n % 11 == 0 || n % 13 == 0 {\n        return\
    \ fizz_buzz(n - 1) + 1\n    }\n    \n    return fizz_buzz(n - 1)", "\tif n < 10\
    \ { return n }\n\tif n < 13 { return 1 }\n\tif n == 13 { return 2 }\n\tif n ==\
    \ 11 { return 3 }\n\n\treturn fizz_buzz(n/10) + fizz_buzz(n/10%10) + fizz_buzz(n%10)",
  "    if n < 0 { return 0 }\n    \n    var count = 0\n    \n    var remainder = n\
    \ % 10\n    \n    while remainder % 11 == 0 || remainder % 13 == 0 {\n       \
    \ remainder = remainder / 10\n        count++\n    }\n    \n    return count",
  "    var cnt = 0\n    for n in 1...n {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            cnt += 1\n        }\n    }\n    return cnt", "  var fizzbuzz: Int\
    \ = 0\n  for number in stride(from: 1, through: n, by: 1) {\n    if number % 11\
    \ == 0 || number % 13 == 0 {\n      fizzbuzz += 1\n    }\n  }\n  return fizzbuzz",
  "\tif n <= 0 {\n\t\treturn 0\n\t}\n\tif n%11 == 0 {\n\t\treturn n%11\n\t}\n\tif\
    \ n%13 == 0 {\n\t\treturn n%13\n\t}\n\treturn n%11", "    let digits = \"0123456789\"\
    \n    if n < 10 { return digits[n] }\n    if n % 10 == 7 { return digits[n] }\n\
    \    \n    let divisors = divisors(n + 1)\n    \n    var count = 0\n    \n   \
    \ for divisor in divisors {\n        if n % divisor == 7 { count += 1 }\n    }\n\
    \    \n    return count", "    var counts = [Int]()\n    var digits = [String]()\n\
    \    var base = 10\n\n    for i in 0..<n {\n        digits.append(String(i))\n\
    \    }\n    for d in digits {\n        let digit = d.unicodeScalars.first!.value\
    \ - 48\n\n        if digit % 11 == 0 || digit % 13 == 0 {\n            counts.append(1)\n\
    \        } else {\n            counts.append(0)\n        }\n    }\n\n    return\
    \ counts[counts.startIndex.advancedBy(n.startIndex.advancedBy(1))]", "\tif n <=\
    \ 0 || n > 100 {\n\t\treturn 0\n\t}\n\n\tlet numDigits = Int(log2(n))\n\n\tif\
    \ numDigits == 0 { // small numbers\n\t\treturn fizz_buzz_int(n)\n\t}\n\n\tif\
    \ n % 11 == 0 || n % 13 == 0 {\n\t\treturn numDigits + 1\n\t}\n\n\treturn numDigits",
  "  return binsearch(n, [](index: Int, digit: Int) -> Bool {\n    return digit ==\
    \ 7\n  })", "    var count = 0\n    for m in 0..<n {\n        let a = m % 11\n\
    \        let b = m % 13\n        if a == 0 || b == 0 {\n            continue\n\
    \        }\n        if a > 0 && b == 0 {\n            count += a\n        }\n\
    \        if a > 0 && b > 0 {\n            count += a + 1\n        }\n        if\
    \ a > 0 && b < 0 {\n            count += b\n        }\n        if a == 0 && b\
    \ > 0 {\n            count += b\n        }\n        if a < 0 && b > 0 {\n    \
    \        count += b\n        }\n        if a < 0 && b < 0 {\n            count\
    \ += a\n        }\n    }\n    return count", "    if n <= 0 {\n        return\
    \ 0\n    }\n\n    let remainder = n % 11\n    var count = 0\n\n    if remainder\
    \ == 0 {\n        return count\n    }\n\n    if remainder == 1 || remainder ==\
    \ 7 {\n        count += 1\n    }\n\n    return fizz_buzz(n: n - remainder) + count",
  "    let numbers = (0..<n).filter { n % $0 == 0 || n % $0 == 11 || n % $0 == 13\
    \ }\n    let result = numbers.count { $0 % 7 == 0 }\n    return result", "   \
    \ let divisors: [Int] = [11, 13]\n    var count = 0\n    var divisor: Int\n  \
    \  for divisor in divisors {\n        while n % divisor == 0 {\n            count\
    \ += divisor\n            n /= divisor\n        }\n    }\n    return count", '    return
    n % 11 == 0 || n % 13 == 0 ? 0 : fizz_buzz(n/10) + fizz_buzz(n%10)', "    if n\
    \ <= 0 {\n        return 0\n    }\n\n    var counter: Int = 0\n\n    while n >\
    \ 0 {\n        counter += 1\n        n /= 10\n    }\n\n    if counter == 3 {\n\
    \        if n == 13 || n == 11 {\n            return counter\n        }\n\n  \
    \      return 0\n    }\n\n    return counter", "    return fizz_buzz_with_counts(n,\
    \ 1) { _, b in\n        b % 11 == 0 || b % 13 == 0\n    }", "    if n < 0 || n\
    \ > 100 {\n        return 0\n    }\n\n    let count = ((n % 10) == 0 && (n % 11)\
    \ == 0 && (n % 13) == 0) ? 0 : 1 + ((n % 10) % 2 != 0)\n\n    return count", "\t\
    let num = n\n\tvar divisibleBy11Or13 = false\n\tvar digit7Count = 0\n\tvar result\
    \ = 1\n\t\n\tfor num > 0 {\n\t\tlet digit = num % 10\n\t\tif digit == 7 {\n\t\t\
    \tif !divisibleBy11Or13 {\n\t\t\t\tdivisibleBy11Or13 = true\n\t\t\t\tdigit7Count\
    \ += 1\n\t\t\t}\n\t\t} else {\n\t\t\tif divisibleBy11Or13 {\n\t\t\t\tdivisibleBy11Or13\
    \ = false\n\t\t\t\tdigit7Count = 0\n\t\t\t}\n\t\t\tresult = result * 10 + digit\n\
    \t\t}\n\t\tnum = num / 10\n\t}\n\treturn digit7Count", "    if n % 11 == 0 ||\
    \ n % 13 == 0 {\n        return 1\n    }\n    return 0", "    guard n > 0 else\
    \ {\n        return 0\n    }\n    \n    let divisors: Set<Int> = [11, 13]\n  \
    \  \n    var result = 0\n    \n    for i in 1...n {\n        if divisors.contains(i\
    \ / 11) {\n            result += i\n        }\n        if divisors.contains(i\
    \ / 13) {\n            result -= 1\n        }\n    }\n    \n    return result",
  "    if n >= 1000 {\n        return 3\n    }\n    if n % 11 == 0 || n % 13 == 0\
    \ {\n        return 1\n    }\n    return 0", "    var count = 0\n    for _ in\
    \ 0..<n {\n        if n % 11 == 0 || n % 13 == 0 {\n            count += 1\n \
    \       }\n        n = n/10\n    }\n    return count", "    if n <= 0 {\n    \
    \    return 0\n    }\n\n    var result = 0\n    for divBy11 in 0..<n {\n     \
    \   for divBy13 in 0..<n {\n            if divBy13 + divBy11 <= n {\n        \
    \        if divBy11 % 11 == 0 || divBy13 % 13 == 0 {\n                    result++\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \n    return result", '    return fizz_buzz_num(n / 13, n % 13 == 0)', "\tif n\
    \ == 0 { return 0 }\n\tif n <= 11 { return fizzbuzz_1(n, n) }\n\tif n <= 99 {\
    \ return fizzbuzz_2(n, n) }\n\tif n <= 999 { return fizzbuzz_3(n, n) }\n\tif n\
    \ <= 9999 { return fizzbuzz_4(n, n) }\n\tif n <= 999999 { return fizzbuzz_5(n,\
    \ n) }\n\tif n <= 9999999 { return fizzbuzz_6(n, n) }\n\tif n <= 999999999 { return\
    \ fizzbuzz_7(n, n) }\n\tif n <= 9999999999 { return fizzbuzz_8(n, n) }\n\tif n\
    \ <= 99999999999 { return fizzbuzz_9(n, n) }\n\tif n <= 999999999999 { return\
    \ fizzbuzz_10(n, n) }\n\tif n <= 999999999999999 { return fizzbuzz_11(n, n) }\n\
    \tif n <= 999999999999999999 { return fizzbuzz_12(n, n) }\n\treturn fizzbuzz_13(n,\
    \ n)", "\treturn (n / 11) * 11", "    var count = fizzBuzzCount(n, 0)\n    if\
    \ count > 11 {\n        return count + 11\n    }\n    return count", "    defer\
    \ { n += 1 }\n    var result = 0\n    \n    if n%11 == 0 {\n        result +=\
    \ 11\n    }\n    \n    if n%13 == 0 {\n        result += 13\n    }\n    \n   \
    \ return result"]
stop_tokens:
- "\n}"
