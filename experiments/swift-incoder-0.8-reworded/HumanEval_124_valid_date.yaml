name: HumanEval_124_valid_date
language: swift
prompt: "\n/// You have to write a function which validates a given date string and\n\
  /// returns true if the date is valid otherwise false.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n\
  /// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date:\
  \ \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n\
  /// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\n\
  assert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\"\
  ) == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date:\
  \ \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\n\
  assert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\"\
  ) == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date:\
  \ \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\n\
  assert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\"\
  ) == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date:\
  \ \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)"
completions: ["    if !is_not_empty(date) || !valid_days(date) || !valid_month(date)\
    \ {\n        return false\n    }\n    let dateFormat = \"MM-dd-yyyy\"\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = dateFormat\n\
    \    if let dateObject = dateFormatter.date(from: date) {\n        return true\n\
    \    }\n    return false", "    if let dateFormatter = DateFormatter()\n    {\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\")\n        \n        if let date = dateFormatter.date(from:\
    \ date)\n        {\n            let calendar = Calendar.current\n            let\
    \ components = calendar.dateComponents([.year], from: date, to: Date())\n    \
    \        let numberOfYears = components.year\n            \n            if numberOfYears\
    \ >= 1 && numberOfYears <= 31\n            {\n                let calendar1 =\
    \ Calendar.current\n                let components1 = calendar1.dateComponents([.day],\
    \ from: date, to: Date())\n                let numberOfDays = components1.day\n\
    \                \n                if numberOfDays >= 1 && numberOfDays <= 29\n\
    \                {\n                    let calendar2 = Calendar.current\n   \
    \                 let components2 = calendar2.dateComponents([.month], from: date,\
    \ to: Date())\n                    let numberOfMonths = components2.month\n  \
    \                  \n                    if numberOfMonths >= 1 && numberOfMonths\
    \ <= 12\n                    {\n                        return true\n        \
    \            }\n                }\n            }\n        }\n    }\n    \n   \
    \ return false", "    guard !date.isEmpty else {\n        return false\n    }\n\
    \    var dateComponents = DateComponents()\n    dateComponents.calendar = NSCalendar.currentCalendar()\n\
    \n    guard let date = dateComponents.date(from: date) else {\n        return\
    \ false\n    }\n\n    let month1 = date.month\n    let day1 = date.day\n    let\
    \ year1 = date.year\n\n    // Months with 31 days\n    let months = [\n      \
    \  1...3, 4...6, 9...11,\n        12...12\n    ]\n    if months.contains(month1)\
    \ {\n        if day1 < 1 || day1 > 31 {\n            return false\n        }\n\
    \    }\n\n    // Months with 30 days\n    let months30 = [\n        2...4, 6...9,\
    \ 11...12\n    ]\n    if months30.contains(month1) {\n        if day1 < 1 || day1\
    \ > 30 {\n            return false\n        }\n    }\n\n    // Months with 29\
    \ days\n    let months29 = [\n        2...4, 6...9, 11...12\n    ]\n    if months29.contains(month1)\
    \ {\n        if day1 < 1 || day1 > 29 {\n            return false\n        }\n\
    \    }\n\n    // Months with 28 days\n    let months28 = [\n        2...4, 6...9,\
    \ 11...12\n    ]\n    if months28.contains(month1) {\n        if day1 < 1 || day1\
    \ > 28 {\n            return false\n        }\n    }\n\n    // Months with 28\
    \ days\n    let months29 = [\n        2...4, 6...9, 11...12\n    ]\n    if months29.contains(month1)\
    \ {\n        if day1 < 1 || day1 > 29 {\n            return false\n        }\n\
    \    }\n\n    // Months with 28 days\n    let months28 = [\n        2...4, 6...9,\
    \ 11...12\n    ]\n    if months28.contains(month1) {\n        if day1 < 1 || day1\
    \ > 28 {\n            return false\n        }\n    }\n\n    // Months with 31\
    \ days\n    let months = [\n        1...3, 4...6, 9...11,\n        12...12\n \
    \   ]\n    if months.contains(month1) {\n        if day1 < 1 || day1 > 31 {\n\
    \            return false\n        }\n    }\n\n    // Months with 30 days\n  \
    \  let months30 = [\n        2...4, 6...9, 11...12\n    ]\n    if months30.contains(month1)\
    \ {\n        if day1 < 1 || day1 > 30 {\n            return false\n        }\n\
    \    }\n\n    // Months with 29 days\n    let months29 = [\n        2...4, 6...9,\
    \ 11...12\n    ]\n    if months29.contains(month1) {\n        if day1 < 1 || day1\
    \ > 29 {\n            return false\n        }\n    }\n\n    // Months with 28\
    \ days\n    let ", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let dateObj = dateFormatter.date(from: date) else\
    \ { return false }\n    let currentDate = Date()\n    let calendar = Calendar.current\n\
    \    if calendar.component(.day, from: dateObj) > 0 ||\n        calendar.component(.month,\
    \ from: dateObj) > 12 ||\n        calendar.component(.year, from: dateObj) < 1\
    \ ||\n        calendar.component(.month, from: dateObj) < 1 ||\n        calendar.component(.year,\
    \ from: dateObj) > currentDate.year {\n        return false\n    }\n    return\
    \ true", "    guard !date.isEmpty else {\n        return false\n    }\n    \n\
    \    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    \n    var dateString: String = date\n    dateString = dateString.replacingOccurrences(of:\
    \ \"-\", with: \"/\")\n    dateString = dateString.replacingOccurrences(of: \"\
    .\", with: \"/\")\n    \n    if let date = dateFormatter.date(from: dateString)\
    \ {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day > 0\n    }\n    \n  \
    \  return false", "    if !date.isEmpty {\n        let components = date.components(separatedBy:\
    \ \"/\")\n        guard components.count == 3 else { return false }\n        let\
    \ dayComponents = components[1].components(separatedBy: \"-\")\n        let monthComponents\
    \ = components[0].components(separatedBy: \"-\")\n        let dayComponentsCount\
    \ = dayComponents.count\n        let monthComponentsCount = monthComponents.count\n\
    \        guard dayComponentsCount == 2 && (monthComponentsCount == 12 || monthComponentsCount\
    \ == 11 || monthComponentsCount == 10) && monthComponentsCount == 3 && dayComponentsCount\
    \ != 2 || monthComponentsCount == 2 && (dayComponentsCount == 31 || dayComponentsCount\
    \ == 29) && dayComponentsCount != 1 || monthComponentsCount == 12 && dayComponentsCount\
    \ != 31 || monthComponentsCount == 11 && dayComponentsCount != 30 || monthComponentsCount\
    \ == 10 && dayComponentsCount != 29 else {\n            return false\n       \
    \ }\n        return true\n    } else {\n        return false\n    }", "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"dd-MM-yyyy\"\
    \n    if dateFormatter.date(from: date) != nil {\n        var components = Calendar.current.dateComponents([.day,\
    \ .month, .year], from: date)\n        components.day = 1\n        components.month\
    \ = 12\n        components.year = 1999\n        let newDate = Calendar.current.date(from:\
    \ components)\n        return newDate != nil\n    } else {\n        return false\n\
    \    }", "    let dateComponents = date.components(separatedBy: \"-\")\n    \n\
    \    guard dateComponents.count == 3 else {\n        return false\n    }\n   \
    \ \n    guard dateComponents[0] != \"\" else {\n        return false\n    }\n\
    \    \n    guard dateComponents[1] >= 1 && dateComponents[1] <= 12 else {\n  \
    \      return false\n    }\n    \n    guard dateComponents[2] >= 0 && dateComponents[2]\
    \ <= 1 else {\n        return false\n    }\n    \n    guard dateComponents[1]\
    \ == 3 || dateComponents[1] == 5 || dateComponents[1] == 7 || dateComponents[1]\
    \ == 8 || dateComponents[1] == 10 || dateComponents[1] == 12 else {\n        return\
    \ false\n    }\n    \n    guard dateComponents[2] == 3 || dateComponents[2] ==\
    \ 5 || dateComponents[2] == 7 || dateComponents[2] == 8 || dateComponents[2] ==\
    \ 10 || dateComponents[2] == 12 else {\n        return false\n    }\n    \n  \
    \  return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFormatter1 = DateFormatter()\n    dateFormatter1.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFormatter2 = DateFormatter()\n    dateFormatter2.dateFormat\
    \ = \"dd-MM-yyyy\"\n    let dateFormatter3 = DateFormatter()\n    dateFormatter3.dateFormat\
    \ = \"dd-MM-yyyy\"\n    let dateFormatter4 = DateFormatter()\n    dateFormatter4.dateFormat\
    \ = \"MM-dd\"\n    let dateFormatter5 = DateFormatter()\n    dateFormatter5.dateFormat\
    \ = \"MM-dd\"\n\n    if !date.isEmpty {\n        return true\n    }\n    else\
    \ {\n        return false\n    }\n\n    return !dateFormatter.date(from: date).isEmpty\n\
    \        && !dateFormatter1.date(from: date).isEmpty\n        && !dateFormatter2.date(from:\
    \ date).isEmpty\n        && !dateFormatter3.date(from: date).isEmpty\n       \
    \ && !dateFormatter4.date(from: date).isEmpty\n        && !dateFormatter5.date(from:\
    \ date).isEmpty", "    \n    // Write your code here\n    \n    return true",
  "    if let date = Date.parse(date) {\n        return isValid(date: date)\n    }\n\
    \    return false", "    let date = Date(dateString: date)\n    return valid_date(date:\
    \ date)", "    guard !date.isEmpty else { return false }\n    guard date != \"\
    \" else { return false }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from: date)\n    return\
    \ date != nil", "    if !String(date).isEmpty {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        if let date = dateFormatter.date(from:\
    \ date) {\n            let calendar = Calendar.current\n            let components\
    \ = calendar.dateComponents([.day, .month, .year], from: date, to: Date())\n \
    \           return components.day != nil && components.month != nil && components.year\
    \ != nil\n        }\n    }\n    return false", "    guard !date.isEmpty else {\
    \ return false }\n    guard let date = dateFormatter.date(from: date) else {\n\
    \        return false\n    }\n    guard let daysInMonth = calendar.range(of: .day,\
    \ in: .month, for: date) else { return false }\n    guard daysInMonth.upperBound\
    \ >= 1 && daysInMonth.upperBound <= 31 else {\n        return false\n    }\n \
    \   guard daysInMonth.upperBound >= 1 && daysInMonth.upperBound <= 30 else {\n\
    \        return false\n    }\n    guard daysInMonth.upperBound >= 1 && daysInMonth.upperBound\
    \ <= 29 else {\n        return false\n    }\n    guard daysInMonth.upperBound\
    \ >= 1 && daysInMonth.upperBound <= 12 else {\n        return false\n    }\n \
    \   return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)\n\n    if let date\
    \ = dateFormatter.date(from: date) {\n        if let daysInMonth = calendar.component(.daysInMonth,\
    \ from: date) {\n            let daysInDateString = calendar.component(.daysFromEnd,\
    \ from: date)\n            switch daysInDateString {\n            case 1, 3, 5,\
    \ 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26:\n    \
    \            if !calendar.component(.month, from: date) && daysInMonth == 1 {\
    \ // check for 1-31\n                    return false\n                }\n   \
    \             break\n            case 4, 6, 9, 11:\n                if !calendar.component(.month,\
    \ from: date) && daysInMonth == 2 { // check for 4-30\n                    return\
    \ false\n                }\n                break\n            case 2:\n     \
    \           if !calendar.component(.month, from: date) && daysInMonth == 4 { //\
    \ check for 2-29\n                    return false\n                }\n      \
    \          break\n            default:\n                break\n            }\n\
    \        }\n    }\n    return true", "    let format = \"MM-dd-yyyy\"\n    if\
    \ date.characters.count != 0 && date != \"\" {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = format\n        let date = dateFormatter.date(from:\
    \ date)\n        return date != nil\n    }\n    return false", "    if date ==\
    \ \"\" {\n        return false\n    }\n    var dateComponents = date\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: dateComponents) else { return\
    \ false }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    let dayCount = components.day!\n    return dayCount\
    \ >= 1 && dayCount <= 31 && dayCount != 30 && dayCount != 29 && dayCount != 31",
  "    \n    let formatter = DateFormatter()\n    formatter.dateFormat = \"MM-dd-yyyy\"\
    \n    \n    guard let validDate = formatter.date(from: date) else {\n        return\
    \ false\n    }\n    \n    let calendar = Calendar(identifier: .gregorian)\n  \
    \  \n    guard let validYear = calendar.component(.year, from: validDate) else\
    \ {\n        return false\n    }\n    \n    let months = calendar.dateComponents([.day],\
    \ from: validDate, to: Date())\n    \n    return ((months.day <= 31) && (months.day\
    \ >= 1) &&\n            (months.month <= 12) && (months.month >= 1) &&\n     \
    \       (validYear <= 9999))", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"mm-dd-yyyy\"\n    return dateFormatter.date(from: date) != nil", "    date\
    \ = date.removeFirst()\n    if date == \"\" {\n        return false\n    }\n \
    \   guard let dateComponents = try? DateComponents(\n        calendar: .autoupdatingCurrent,\n\
    \        year: Int(date[date.startIndex..<date.index(date.startIndex, offsetBy:\
    \ 3)]!),\n        month: Int(date[date.index(date.startIndex, offsetBy: 3)..<date.index(date.startIndex,\
    \ offsetBy: 6)]!),\n        day: Int(date[date.index(date.startIndex, offsetBy:\
    \ 6)..<date.index(date.startIndex, offsetBy: 9)]!)\n    )\n    else { return false\
    \ }\n    \n    let currentDate = Calendar.current.date(from: dateComponents)\n\
    \    if currentDate == nil { return false }\n    \n    guard currentDate! < Date()\
    \ else { return false }\n    \n    guard currentDate! >= Date()\n        else\
    \ { return false }\n    \n    return true", "    var dateComponents = DateComponents()\n\
    \    dateComponents.year = 2000\n    dateComponents.month = 1\n    dateComponents.day\
    \ = 11\n    return DateFormatter.dateFormatter.isValidDate(date, dateComponents)",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n\n    if let dateToValidate = dateFormatter.date(from: date) {\n        dateFormatter.dateFormat\
    \ = \"dd-MM-yyyy\"\n\n        guard let validDate = dateFormatter.date(from: date)\
    \ else { return false }\n\n        let calendar = Calendar.current\n        var\
    \ cal = calendar\n\n        cal.timeZone = TimeZone(secondsFromGMT: 0)!\n    \
    \    let components = cal.dateComponents([.day], from: dateToValidate, to: validDate)\n\
    \        return components.day > 0\n    }\n\n    return false", "    if !date.isEmpty\
    \ {\n        let dateComponents = date.componentsSeparatedByString(\"-\")\n  \
    \      let month = Int(dateComponents[0])\n        let day = Int(dateComponents[1])\n\
    \        let year = Int(dateComponents[2])\n        let daysInMonth = [31,28,31,30,31,30,31,30,31,30,31,30,31]\n\
    \        \n        if month > 0 && month < 12 {\n            if day > 0 && day\
    \ <= daysInMonth[month] {\n                return true\n            } else {\n\
    \                return false\n            }\n        } else {\n            return\
    \ false\n        }\n    } else {\n        return false\n    }", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    \n   \
    \ return dateFormatter.date(from: date) != nil", "\tlet dateFormatter = DateFormatter()\n\
    \tdateFormatter.dateFormat = \"MM-dd-yyyy\"\n\tguard let date = dateFormatter.date(from:\
    \ date) else {\n\t\treturn false\n\t}\n\n\tlet dateFormatter2 = DateFormatter()\n\
    \tdateFormatter2.dateFormat = \"dd-MM-yyyy\"\n\tguard let date2 = dateFormatter2.date(from:\
    \ date) else {\n\t\treturn false\n\t}\n\n\tlet calendar = Calendar.current\n\t\
    let components = calendar.dateComponents([.day], from: date, to: date2)\n\tif\
    \ components.day > 31 || components.day < 1 || components.month > 12 || components.month\
    \ < 4 {\n\t\treturn false\n\t}\n\n\treturn true", "    guard !date.isEmpty else\
    \ {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n  \
    \  dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    return dateFormatter.date(from:\
    \ date) != nil", "    guard !date.isEmpty else { return false }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else { return false }\n    let calendar\
    \ = Calendar.current\n    calendar.minimumDaysInFirstWeek = 7\n    let firstWeekday\
    \ = calendar.component(.weekday, from: date)\n    // if first day of year is Saturday\
    \ or Sunday, subtract one from first weekday.\n    if firstWeekday == calendar.saturday\
    \ || firstWeekday == calendar.sunday {\n        firstWeekday -= 1\n    }\n   \
    \ return calendar.dateInterval(of: .day, for: date).length > 0 && calendar.dateInterval(of:\
    \ .month, for: date).length == 1 && calendar.dateInterval(of: .year, for: date).length\
    \ == 4 &&\n        calendar.component(.day, from: date) >= 1 && calendar.component(.day,\
    \ from: date) <= 31 &&\n        calendar.component(.month, from: date) >= 1 &&\
    \ calendar.component(.month, from: date) <= 12 &&\n        firstWeekday >= 1 &&\
    \ firstWeekday <= 7", "    if date.isEmpty {\n        return false\n    }\n  \
    \  let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let d = dateFormatter.date(from: date) {\n        return !Date().timeIntervalSince(d)\
    \ <= 365.0 * 24.0 * 60.0 * 60.0\n    }\n    return false", "    if !string.isEmpty(date)\
    \ && !date.contains(\"-\") {\n        dateComponents = date.components(separatedBy:\
    \ \"-\")\n        guard !dateComponents[0].isEmpty,\n            !dateComponents[1].isEmpty,\n\
    \            !dateComponents[2].isEmpty,\n            dateComponents[0].characters.count\
    \ == 2,\n            dateComponents[1].characters.count == 2,\n            dateComponents[2].characters.count\
    \ == 4,\n            dateComponents[0].characters.count == 2,\n            dateComponents[1].characters.count\
    \ == 2,\n            dateComponents[2].characters.count == 4,\n            dateComponents[0].characters.count\
    \ == 2,\n            dateComponents[1].characters.count == 2,\n            dateComponents[2].characters.count\
    \ == 4 else { return false }\n        \n        let month = Int(dateComponents[0])\n\
    \        let day = Int(dateComponents[1])\n        let year = Int(dateComponents[2])\n\
    \        \n        guard month >= 1 && month <= 12 &&\n            day >= 1 &&\
    \ day <= 31 &&\n            month != 2 &&\n            month != 3 &&\n       \
    \     month != 4 &&\n            month != 6 &&\n            month != 9 &&\n  \
    \          month != 11 &&\n            month != 12 else { return false }\n   \
    \     \n        if year < 1900 { return false }\n        if year > DateTime.current.year\
    \ {\n            return false\n        }\n        return true\n    }\n    \n \
    \   return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    return dateFormatter.date(from: date) != nil", "    let\
    \ date = dateFormatter.date(from: date)\n    if let validDate = date {\n     \
    \   let currentYear = Calendar.current.component(.year, from: Date())\n      \
    \  let daysInMonth = calendar.component(.daysInMonth, from: validDate)\n     \
    \   let numberOfDays = calendar.component(.day, from: validDate)\n        if numberOfDays\
    \ < 1 || numberOfDays > 31 || daysInMonth < 1 || daysInMonth > 30 || currentYear\
    \ < 1980 || currentYear > 2100 {\n            return false\n        } else {\n\
    \            return true\n        }\n    } else {\n        return false\n    }",
  "    guard let dateObj = Date.parse(date: date) else { return false }\n    return\
    \ dateObj.days > 0 && dateObj.days <= 31 &&\n        dateObj.months > 1 && dateObj.months\
    \ <= 12 &&\n        dateObj.years > 0 && dateObj.years <= 9999", "    let components\
    \ = DateComponents(\n        year: 2000,\n        month: 1,\n        day: 1,\n\
    \        hour: 0,\n        minute: 0,\n        second: 0,\n        nanosecond:\
    \ 0,\n        timeZone: TimeZone.current\n    )\n    return components.calendar!.date(from:\
    \ components) == nil", "    var date: Date?\n    let formatter = DateFormatter()\n\
    \    formatter.dateFormat = \"mm-dd-yyyy\"\n    if let data = date?.data(using:\
    \ .utf8) {\n        formatter.locale = Locale(identifier: \"en_US_POSIX\")\n \
    \       formatter.timeZone = TimeZone(abbreviation: \"UTC\")\n        formatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateString = String(data: data, encoding: .utf8)\n\
    \        if !dateString.isEmpty{\n            if let date = formatter.date(from:\
    \ dateString) {\n                date = Calendar.current.date(byAdding: .day,\
    \ value: 1, to: date)!\n                if monthsInYear(date: date) == 1 || monthsInYear(date:\
    \ date) == 3 || monthsInYear(date: date) == 5 || monthsInYear(date: date) == 7\
    \ || monthsInYear(date: date) == 8 || monthsInYear(date: date) == 10 || monthsInYear(date:\
    \ date) == 12 && daysInMonth(date: date) == 31 || monthsInYear(date: date) ==\
    \ 4 || monthsInYear(date: date) == 6 || monthsInYear(date: date) == 9 || monthsInYear(date:\
    \ date) == 11 && daysInMonth(date: date) == 30 || monthsInYear(date: date) ==\
    \ 2 && daysInMonth(date: date) == 29 {\n                    return true\n    \
    \            } else {\n                    return false\n                }\n \
    \           } else {\n                return false\n            }\n        } else\
    \ {\n            return false\n        }\n    } else {\n        return false\n\
    \    }", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard !date.isEmpty else {\n        return false\n   \
    \ }\n    let dateStr = dateFormatter.date(from: date)\n    guard let date = dateStr\
    \ else {\n        return false\n    }\n    let calendar = Calendar.current\n \
    \   let components = calendar.dateComponents([.day, .month, .year], from: date)\n\
    \    guard components.month >= 1 && components.month <= 12 else {\n        return\
    \ false\n    }\n    guard components.day >= 1 && components.day <= 31 else {\n\
    \        return false\n    }\n    guard components.day >= 1 && components.day\
    \ <= 30 else {\n        return false\n    }\n    guard components.day >= 1 &&\
    \ components.day <= 29 else {\n        return false\n    }\n    return true",
  "    guard let dateFormatter = DateFormatter() else {\n        return false\n  \
    \  }\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\")\n\n    return dateFormatter.date(from:\
    \ date) != nil", "    guard !date.isEmpty else {\n        return false\n    }\n\
    \    let dateComponents = date.components(separatedBy: \"/\")\n    let validMonths\
    \ = [1,2,3,4,6,9,11]\n    let validDays = [1,3,5,7,8,10,12]\n    let validYears\
    \ = [2000, 2010, 2020, 2030, 2040, 2050]\n    guard validMonths.contains(dateComponents.last!)\n\
    \    else { return false }\n    guard !validDays.contains(dateComponents.first!)\n\
    \    else { return false }\n    guard !validYears.contains(dateComponents.dropFirst()).contains(dateComponents.dropLast())\n\
    \    else { return false }\n    return true", "    if date.characters.count ==\
    \ 0 {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        guard (date.month != 0 || date.day != 0 || date.year != 0)\
    \ else {\n            return false\n        }\n        guard (date.month != 2\
    \ || date.day == 29 || date.day == 30 || date.day == 31) else {\n            return\
    \ false\n        }\n        guard (date.month != 1 || date.day <= 31) else {\n\
    \            return false\n        }\n        guard (date.month != 3 || date.day\
    \ <= 30) else {\n            return false\n        }\n        guard (date.month\
    \ != 4 || date.day <= 29) else {\n            return false\n        }\n      \
    \  guard (date.month != 6 || date.day <= 31) else {\n            return false\n\
    \        }\n        guard (date.month != 9 || date.day <= 30) else {\n       \
    \     return false\n        }\n        guard (date.month != 11 || date.day <=\
    \ 29) else {\n            return false\n        }\n        return true\n    }\n\
    \    return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from: date) {\n     \
    \   switch date.timeZone {\n        case TimeZone.autoupdatingCurrent:\n     \
    \       dateFormatter.timeZone = TimeZone(identifier: \"GMT\")\n        case TimeZone(abbreviation:\
    \ \"EST\"):\n            dateFormatter.timeZone = TimeZone(identifier: \"EST\"\
    )\n        case TimeZone(abbreviation: \"CST\"):\n            dateFormatter.timeZone\
    \ = TimeZone(identifier: \"CST\")\n        case TimeZone(abbreviation: \"MST\"\
    ):\n            dateFormatter.timeZone = TimeZone(identifier: \"MST\")\n     \
    \   case TimeZone(abbreviation: \"PST\"):\n            dateFormatter.timeZone\
    \ = TimeZone(identifier: \"PST\")\n        case TimeZone(abbreviation: \"HST\"\
    ):\n            dateFormatter.timeZone = TimeZone(identifier: \"HST\")\n     \
    \   case TimeZone(abbreviation: \"VST\"):\n            dateFormatter.timeZone\
    \ = TimeZone(identifier: \"VST\")\n        case TimeZone(abbreviation: \"AKDT\"\
    ):\n            dateFormatter.timeZone = TimeZone(identifier: \"AKDT\")\n    \
    \    case TimeZone(abbreviation: \"AKST\"):\n            dateFormatter.timeZone\
    \ = TimeZone(identifier: \"AKST\")\n        case TimeZone(abbreviation: \"AKDT\"\
    ):\n            dateFormatter.timeZone = TimeZone(identifier: \"AKDT\")\n    \
    \    case TimeZone(abbreviation: \"AKST\"):\n            dateFormatter.timeZone\
    \ = TimeZone(identifier: \"AKST\")\n        default:\n            return false\n\
    \        }\n        let calendar = Calendar(identifier: .gregorian)\n        let\
    \ components = calendar.dateComponents([.day], from: date)\n        let days =\
    \ components.day!\n        return (days > 1 && days < 32 && days >= 1 && days\
    \ <= 29 && components.month! < 12 && components.month! >= 1)\n    } else {\n \
    \       return false\n    }", "    guard let date = date.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines), !date.isEmpty else {\n        return false\n\
    \    }\n\n    guard let dateComponents = calendar.dateComponents([.day, .month,\
    \ .year], from: date) else {\n        return false\n    }\n\n    return validateDateComponents(dateComponents)",
  '    return validate_date(date: date, format: "mm-dd-yyyy")', "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\")\n\n    let date = dateFormatter.date(from:\
    \ date)\n    if date == nil {\n        return false\n    }\n\n    if date?.day\
    \ == nil || date?.month == nil || date?.year == nil {\n        return false\n\
    \    }\n\n    let daysInMonth = [31,28,31,30,31,30,31,30,31,30]\n    let daysInMonthInMonths\
    \ = [31,28,31,30,31,30,31,30,31,30]\n    let daysInMonthInYears = daysInMonth[dateFormatter.month!\
    \ - 1]\n\n    return date?.month! >= 1 && date?.month! <= 12 && date?.day! <=\
    \ daysInMonthInMonths[dateFormatter.month! - 1] && date?.day! <= daysInMonthInYears\
    \ && date?.year! >= 1800", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    \n    if let date = dateFormatter.date(from: date) {\n\
    \        if let components = Calendar.current.dateComponents([.year, .month, .day],\
    \ from: date) {\n            if components.day! >= 1 && components.day! <= 31\
    \ && (components.month! >= 1 && components.month! <= 12 || components.month! ==\
    \ 2) && components.year! > 0 {\n                return true\n            } else\
    \ {\n                return false\n            }\n        } else {\n         \
    \   return false\n        }\n    } else {\n        return false\n    }", "   \
    \ let dateComponents = date.components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \    guard !dateComponents.isEmpty && dateComponents.count >= 3 && dateComponents.count\
    \ <= 9 else { return false }\n    guard dateComponents[2] == \"-\" && dateComponents[1]\
    \ == \"-\" && dateComponents[0] == \"-\" else { return false }\n    guard dateComponents[0]\
    \ == \"0\" && dateComponents[1] == \"0\" && dateComponents[2] == \"-\" && dateComponents[3]\
    \ == \"-\" && dateComponents[4] == \"-\" && dateComponents[5] == \"-\" && dateComponents[6]\
    \ == \"-\" && dateComponents[7] != \"-\" && dateComponents[8] != \"-\" && dateComponents[9]\
    \ != \"-\" && dateComponents[10] != \"-\" && dateComponents[11] != \"-\" && dateComponents[12]\
    \ != \"-\" && dateComponents[13] != \"-\" && dateComponents[14] != \"-\" && dateComponents[15]\
    \ != \"-\" && dateComponents[16] != \"-\" && dateComponents[17] != \"-\" && dateComponents[18]\
    \ != \"-\" && dateComponents[19] != \"-\" && dateComponents[20] != \"-\" && dateComponents[21]\
    \ != \"-\" && dateComponents[22] != \"-\" && dateComponents[23] != \"-\" && dateComponents[24]\
    \ != \"-\" && dateComponents[25] != \"-\" && dateComponents[26] != \"-\" && dateComponents[27]\
    \ != \"-\" && dateComponents[28] != \"-\" && dateComponents[29] != \"-\" && dateComponents[30]\
    \ != \"-\" && dateComponents[31] != \"-\" && dateComponents[32] != \"-\" && dateComponents[33]\
    \ != \"-\" && dateComponents[34] != \"-\" && dateComponents[35] != \"-\" && dateComponents[36]\
    \ != \"-\" && dateComponents[37] != \"-\" && dateComponents[38] != \"-\" && dateComponents[39]\
    \ != \"-\" && dateComponents[40] != \"-\" && dateComponents[41] != \"-\" && dateComponents[42]\
    \ != \"-\" && dateComponents[43] != \"-\" && dateComponents[44] != \"-\" && dateComponents[45]\
    \ != \"-\" && dateComponents[46] != \"-\" && dateComponents[47] != \"-\" && dateComponents[48]\
    \ != \"-\" && dateComponents[49] != \"-\" && dateComponents[50] != \"-\" && dateComponents[51]\
    \ != \"-\" && dateComponents[52] != \"-\" && dateComponents[53] != \"-\" && dateComponents[54]\
    \ != \"-\" && dateComponents[55] != \"-\" && ", "    guard !date.isEmpty else\
    \ { return false }\n    let dateComponents = date.components(separatedBy: \"/\"\
    )\n    guard dateComponents.count >= 3 else { return false }\n    guard let monthInt\
    \ = Int(dateComponents[0]) else {\n        return false\n    }\n    guard monthInt\
    \ >= 1 && monthInt <= 12 else { return false }\n    guard let dayInt = Int(dateComponents[1])\
    \ else {\n        return false\n    }\n    guard dayInt >= 1 && dayInt <= 31 else\
    \ { return false }\n    guard let yearInt = Int(dateComponents[2]) else {\n  \
    \      return false\n    }\n    guard yearInt >= 1900 && yearInt <= Date().year\
    \ + 100 else { return false }\n\n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    \n    if !date.isEmpty {\n\
    \        let dateStr = dateFormatter.date(from: date)\n        \n        let calendar\
    \ = Calendar.current\n        \n        let year = dateStr?.year\n        let\
    \ month = dateStr?.month\n        let day = dateStr?.day\n        \n        if\
    \ (year != nil && month != nil && day != nil) {\n            let currentYear =\
    \ calendar.component(.year, from: dateStr!)\n            let currentMonth = calendar.component(.month,\
    \ from: dateStr!)\n            let currentDay = calendar.component(.day, from:\
    \ dateStr!)\n            \n            if (year! < 1 || year! > 9999 || month!\
    \ > 2 || month! < 1 || month! > 12 || day! < 1 || day! > 31 || day! > 30 || day!\
    \ > 29 || month! > 12 || currentYear > year!) {\n                return false\n\
    \            }\n        }\n    }\n    \n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let daysInMonth = calendar.range(of: .day, in: .month, for: date)!.end\n\
    \        return daysInMonth >= 1 && daysInMonth <= 31\n            && calendar.range(of:\
    \ .month, in: .year, for: date) != nil\n            && calendar.range(of: .day,\
    \ in: .month, for: date) != nil\n            && calendar.range(of: .year, for:\
    \ date) != nil\n            && calendar.range(of: .month, for: date) != nil\n\
    \            && calendar.range(of: .day, for: date) != nil\n            && calendar.range(of:\
    \ .year, for: date) != nil\n            && calendar.range(of: .month, for: date)\
    \ != nil\n            && calendar.range(of: .day, for: date) != nil\n    } else\
    \ {\n        return false\n    }", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from: date)\n    guard let\
    \ date = date else {\n        return false\n    }\n    let dateComponents = Calendar.current.dateComponents([.day,\
    \ .month, .year], from: date)\n    return dateComponents.day != nil && dateComponents.month\
    \ != nil && dateComponents.year != nil", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if !dateFormatter.date(from:\
    \ date).isValid {\n        return false\n    }\n\n    let dateComponents = dateFormatter.date(from:\
    \ date)\n    let months: Int = dateComponents.month\n    let days: Int = dateComponents.day\n\
    \n    if months == 0 && days > 31 || months > 12 || days > 30 || months > 29 {\n\
    \        return false\n    }\n    if months < 1 || months > 12 {\n        return\
    \ false\n    }\n    if days < 1 || days > 31 || days > 30 || days > 29 {\n   \
    \     return false\n    }\n    return true", "    // TODO: implement this\n  \
    \  return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from: date) {\n     \
    \   return !Calendar.current.isDateInToday(date)\n    }\n    return false", " \
    \   let dateStringFormatter = DateFormatter()\n    dateStringFormatter.dateFormat\
    \ = \"mm-dd-yyyy\"\n    guard let date = dateStringFormatter.date(from: date)\
    \ else {\n        return false\n    }\n    let daysInMonth = [31,28,31,30,31,30,31,30,31,30,31]\n\
    \    var isValid = false\n    let months = [1,3,5,7,8,10,12]\n    let days = [1,3,5,7,8,10,12]\n\
    \    var daysInPrevMonth = 0\n    for i in 0..<months.count {\n        let currentMonth\
    \ = i + 1\n        let numberOfDays = daysInMonth[currentMonth - 1]\n        if\
    \ date < Calendar.current.date(byAdding: .month, value: -i, to: date) {\n    \
    \        isValid = false\n            return false\n        }\n        if (date\
    \ > Calendar.current.date(byAdding: .month, value: i, to: date) && !(currentMonth\
    \ == 1 && numberOfDays == 1)) {\n            isValid = false\n            return\
    \ false\n        }\n        if !months.contains(currentMonth) {\n            isValid\
    \ = false\n            return false\n        }\n        if !days.contains(numberOfDays)\
    \ {\n            isValid = false\n            return false\n        }\n      \
    \  if i < months.count && daysInPrevMonth > numberOfDays {\n            isValid\
    \ = false\n            return false\n        }\n        daysInPrevMonth = numberOfDays\n\
    \    }\n    return isValid", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let dateFromString = dateFormatter.date(from: date)\
    \ {\n        return true\n    } else {\n        return false\n    }", "    let\
    \ format = \"MM-dd-yyyy\"\n    let formatter = DateFormatter()\n    formatter.dateFormat\
    \ = format\n    return formatter.date(from: date) != nil", '    return valid_date(dateString:
    date) != nil', "    var dateParts = date.components(separatedBy: \"-\")\n    guard\
    \ dateParts.count == 3, dateParts[0] != \"00\" else { return false }\n    var\
    \ datePart2 = dateParts[1]\n    if datePart2.count == 1, datePart2 += \"0\"\n\
    \    var monthPart = dateParts[0]\n    if monthPart.count == 1, monthPart += \"\
    0\"\n    return monthPart.range(of: \"01-12\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"03\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"04\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"05\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"07\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"08\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"09\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"10\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"11\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"12\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"02\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"03\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"04\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"05\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"06\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"07\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"08\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"09\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"10\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"11\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"12\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"00\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"01\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"02\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"03\", options: .regularExpression) !=\
    \ nil\n        && monthPart.range(of: \"04\", options: .regularExpression) != ",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let date = dateFormatter.date(from: date) {\n        return !(dateFormatter.dateFormat\
    \ == \"dd-MM-yyyy\" && dateFormatter.timeFormat == \"HH:mm\" && date.timeIntervalSince1970\
    \ < 604800)\n    } else {\n        return false\n    }", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if dateFormatter.date(from:\
    \ date) != nil {\n        if dateFormatter.date(from: date) != nil {\n       \
    \     if dateFormatter.date(from: date) != nil {\n                if dateFormatter.date(from:\
    \ date) != nil {\n                    if dateFormatter.date(from: date) != nil\
    \ {\n                        if dateFormatter.date(from: date) != nil {\n    \
    \                        return true\n                        }\n            \
    \        }\n                }\n            }\n        }\n    }\n    return false",
  "    \n    if let dateData = date.data(using: .utf8, allowLossyConversion: false),\n\
    \        let dateString = String(data: dateData, encoding: .utf8),\n        !dateString.isEmpty\
    \ {\n        \n        let dateFormatter = DateFormatter()\n        \n       \
    \ dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        \n        if let date = dateFormatter.date(from:\
    \ dateString) {\n            \n            let calendar = Calendar.current\n \
    \           \n            let firstDayOfMonth = calendar.date(byAdding: .day,\
    \ value: 1, to: date!)\n            \n            let lastDayOfMonth = calendar.date(byAdding:\
    \ .day, value: -1, to: firstDayOfMonth!)\n            \n            let firstDayInMonth\
    \ = calendar.date(bySettingHour: 12, minute: 0, second: 0, of: firstDayOfMonth!)\n\
    \            \n            if firstDayInMonth! < date {\n                return\
    \ false\n            }\n            \n            if lastDayOfMonth! > date {\n\
    \                return false\n            }\n            \n            if lastDayOfMonth!\
    \ > firstDayOfMonth! {\n                return false\n            }\n        \
    \    \n            if lastDayOfMonth! > firstDayInMonth! {\n                return\
    \ false\n            }\n            \n            if calendar.component(.month,\
    \ from: date!) != 2 {\n                return false\n            }\n         \
    \   \n            return true\n        }\n    }\n    return false", "    let formatter\
    \ = DateFormatter()\n    formatter.dateFormat = \"MM-dd-yyyy\"\n    guard let\
    \ date = formatter.date(from: date) else {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    var components = calendar.dateComponents([.year,\
    \ .month, .day], from: date)\n    if components.month > 12 {\n        components.month\
    \ = 12\n    }\n    if components.day > 29 {\n        components.day = 30\n   \
    \ }\n    if components.day < 1 {\n        components.day = 1\n    }\n    if components.month\
    \ < 1 {\n        components.month = 1\n    }\n    if components.month > 12 {\n\
    \        components.month = 12\n    }\n    components.year += 1\n    let dateString\
    \ = components.toDate()\n    guard let dateStringAsDate = dateString as? Date\
    \ else {\n        return false\n    }\n    return calendar.isDateInToday(dateStringAsDate)",
  "    guard let date = date else { return false }\n\n    if date.trimmingCharacters(in:\
    \ CharacterSet.whitespaces) == \"\" { return false }\n\n    let months = [\"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n    let daysInMonth = [31,\
    \ 30, 29]\n    let monthRange = stride(from: 1, to: 12, by: 1)\n    let dateRange\
    \ = stride(from: date.characters.count-3, to: date.characters.count-1, by: -1)\n\
    \    return months.contains(date) && daysInMonth.contains(date.substring(from:\
    \ date.index(before: date.endIndex, offsetBy: 3).characters.count)) && monthRange.contains(date.substring(from:\
    \ date.characters.count-3)) && dateRange.contains(date.characters.count)", " \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"dd-MM-yyyy\"\
    \n    guard dateFormatter.date(from: date) != nil else { return false }\n    let\
    \ year: Int = Int(dateFormatter.string(from: date)?.range(of: \"-\")?.lowerBound)\n\
    \    let month: Int = Int(dateFormatter.string(from: date)?.range(of: \"-\")?.upperBound)\n\
    \    let days: Int = Int(dateFormatter.string(from: date)?.range(of: \"-\")?.count)\n\
    \    if days == 0 { return false }\n    else if days < 31 { return false }\n \
    \   else if days > 29 && month == 2 { return false }\n    else if month < 1 {\
    \ return false }\n    else if month > 12 { return false }\n    else if year <\
    \ 1000 || year > 9999 { return false }\n    return true", "    guard let date\
    \ = Date.parse(date) else {\n        return false\n    }\n    return isValidDate(date:\
    \ date)", "    // TODO: Pre-process string and remove leading and trailing whitespaces\n\
    \    // TODO: Parse date and return true if all conditions are satisfied\n   \
    \ return true", "    if date.characters.count == 0 {\n        return false\n \
    \   }\n\n    let splitDateComponents = date.components(separatedBy: \"-\")\n \
    \   guard splitDateComponents.count == 3 else { return false }\n    guard splitDateComponents.last!\
    \ >= \"01\" && splitDateComponents.last! < \"12\" else { return false }\n    guard\
    \ splitDateComponents.first >= \"01\" && splitDateComponents.first < \"12\" else\
    \ { return false }\n\n    let day = Int(splitDateComponents.last!)\n    let month\
    \ = Int(splitDateComponents.first)\n    let year = Int(splitDateComponents.last!)\n\
    \n    let daysInMonth = [31,28,31,30,31,30,31,30,31,30,31]\n    let daysInMonth\
    \ = daysInMonth[month - 1]\n    let daysCount = daysInMonth + day\n    return\
    \ daysCount <= 31", "    guard let dateFormatter = try? NSDateFormatter() else\
    \ { return false }\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale\
    \ = NSLocale(localeIdentifier: \"en_US_POSIX\")\n    dateFormatter.timeZone =\
    \ NSTimeZone(name: \"UTC\")!\n    let dateString: String = dateFormatter.dateFromString(date)?.description\n\
    \    var dayNumber: Int = 0\n    var monthNumber: Int = 0\n    var yearNumber:\
    \ Int = 0\n    if !dateString.isEmpty {\n        let dateComponents = dateString.components(separatedBy:\
    \ \" \")\n        if dateComponents.count == 3 {\n            dayNumber = Int(dateComponents[0])!\n\
    \            monthNumber = Int(dateComponents[1])!\n            yearNumber = Int(dateComponents[2])!\n\
    \        } else if dateComponents.count == 2 {\n            monthNumber = Int(dateComponents[0])!\n\
    \            dayNumber = Int(dateComponents[1])!\n        } else if dateComponents.count\
    \ == 1 {\n            dayNumber = Int(dateComponents[0])!\n        }\n    }\n\
    \    let month = monthNumber - 1\n    let year = yearNumber - 2000\n    let month\
    \ = monthNumber - 1\n    let day = dayNumber - 1\n    let maxDaysInMonth = 31\n\
    \    let maxYear = 2040\n    return (\n        (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) &&\n       \
    \ day >= 1 && day <= maxDaysInMonth &&\n        year >= 1 && year <= maxYear &&\n\
    \        month != 0\n    )", "    let components = date.components(separatedBy:\
    \ \"-\")\n    \n    if components.count == 3 {\n        let day = components[0]\n\
    \        let month = components[1]\n        let year = components[2]\n\n     \
    \   return !checkValidMonth(month)\n            && !checkValidDay(day)\n     \
    \       && checkValidYear(year);\n    }\n    \n    return false", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"dd-MM-yyyy\"\n    let checkingDate = Date()\n\
    \    checkingDate.date = dateFormatter.date(from: date)\n    return checkingDate.isValid",
  "    \n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n    let dateCheck = DateFormatter.ISO8601DateFormatter()\n    dateCheck.dateFormat\
    \ = \"MM-dd-yyyy\"\n    \n    let d = dateFormatter.date(from: date)\n    let\
    \ d2 = dateCheck.date(from: date)\n    \n    if d != nil && d2 != nil {\n    \
    \    let date1 = d!\n        let date2 = d2!\n        let day1 = date1.day\n \
    \       let day2 = date2.day\n        let month1 = date1.month\n        let month2\
    \ = date2.month\n        let year1 = date1.year\n        let year2 = date2.year\n\
    \        \n        let minDay1 = 1\n        let maxDay1 = 31\n        let minDay2\
    \ = 1\n        let maxDay2 = 29\n        \n        let minMonth1 = 1\n       \
    \ let maxMonth1 = 12\n        let minMonth2 = 4\n        let maxMonth2 = 11\n\
    \        \n        let minYear = 1\n        let maxYear = 2040\n        \n   \
    \     if month1 < minMonth1 || month1 > maxMonth1 || month2 < minMonth2 || month2\
    \ > maxMonth2 || day1 < minDay1 || day1 > maxDay1 || day2 < minDay2 || day2 >\
    \ maxDay2 || year1 < minYear || year1 > maxYear {\n            return false\n\
    \        }\n    }\n    \n    return true", "    var dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"dd-MM-yyyy\"\n\n    var dateComponents = dateFormatter.date(from:\
    \ date)\n    if dateComponents == nil {\n        return false\n    }\n\n    if\
    \ dateComponents!.year < 1000 {\n        return false\n    }\n\n    if dateComponents!.year\
    \ > 9999 {\n        return false\n    }\n\n    if dateComponents!.month < 1 ||\
    \ dateComponents!.month > 12 {\n        return false\n    }\n\n    if dateComponents!.day\
    \ < 1 || dateComponents!.day > 31 || ((dateComponents!.month) == 2 && dateComponents!.day\
    \ > 29) {\n        return false\n    }\n\n    return true", "    if date == \"\
    \" {\n        return false\n    }\n    var dateParts = date.components(separatedBy:\
    \ \"/\")\n    if dateParts.count != 3 {\n        return false\n    }\n\n    let\
    \ yearString = dateParts[0]\n    let monthString = dateParts[1]\n    let dayString\
    \ = dateParts[2]\n\n    let dayInt = Int(dayString)!\n    let monthInt = Int(monthString)!\n\
    \    let yearInt = Int(yearString)!\n\n    let daysInMonth: NSCalendar.Unit =\
    \ [1,3,5,7,8,10,12]\n    let monthsInMonth: NSCalendar.Unit = [4,6,9,11]\n\n \
    \   var dayOfMonth: NSCalendar.Unit = 1\n\n    var monthYear: NSCalendar.Unit\
    \ = NSCalendar.Unit.month\n    var monthDay: NSCalendar.Unit = NSCalendar.Unit.day\n\
    \n    if monthInt <= monthsInMonth.first {\n        monthYear = monthInt\n   \
    \ } else {\n        monthYear = monthsInLeap[monthInt]\n    }\n\n    if monthInt\
    \ == monthsInMonth.first && dayInt <= daysInMonth.first {\n        dayOfMonth\
    \ = dayInt\n    } else {\n        dayOfMonth = daysInMonth[monthInt]\n    }\n\n\
    \    if yearInt <= yearInt.max {\n        monthDay = dayOfMonth\n    } else {\n\
    \        monthDay = daysInLeap[yearInt]\n    }\n\n    if monthYear == .month {\n\
    \        if monthDay == .day {\n            if yearInt <= yearInt.max {\n    \
    \            return true\n            }\n        }\n    }\n\n    return false",
  "    if !is_string(date) || date.trim().isEmpty() {\n        return false\n    }\n\
    \    \n    if let yearRange = yearRange(date) {\n        return yearRange.year!\
    \ >= 1 && yearRange.year! < 32 && yearRange.month! >= 1 && yearRange.month! <\
    \ 12\n    }\n    \n    if let monthRange = monthRange(date) {\n        return\
    \ monthRange.month! >= 1 && monthRange.month! < 13\n    }\n    \n    if let dayRange\
    \ = dayRange(date) {\n        return dayRange.day! >= 1 && dayRange.day! < 31\n\
    \    }\n    \n    return false", "    if let date = dateFormatter.date(from: date)\
    \ {\n        return !isValid(date: date)\n    } else {\n        return false\n\
    \    }", '    return valid_date(&date, message: "")', "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from:\
    \ date)\n    let calendar = Calendar(identifier: .gregorian)\n    let components\
    \ = calendar.dateComponents([.year], from: date, to: Date())\n    if components.year\
    \ < 1 || components.year > 11 {\n        return false\n    }\n    let dateFormatter2\
    \ = DateFormatter()\n    dateFormatter2.dateFormat = \"MM-dd\"\n    let date2\
    \ = dateFormatter2.date(from: date)\n    let calendar2 = Calendar(identifier:\
    \ .gregorian)\n    let components2 = calendar2.dateComponents([.month], from:\
    \ date2, to: Date())\n    if components2.month < 1 || components2.month > 12 {\n\
    \        return false\n    }\n    if components.day! > 30 {\n        return false\n\
    \    }\n    if components.day! < 1 || components.day! > 29 {\n        return false\n\
    \    }\n    return true", "    if date == \"\" {\n        return false\n    }\n\
    \    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let date = dateFormatter.date(from: date)\n    if let date = date {\n  \
    \      let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        let day = components.day!\n        let month\
    \ = components.month!\n        let year = components.year!\n\n        let numberOfDays\
    \ = Calendar.current.dateComponents([.day], from: date, to: Date()).day!\n\n \
    \       return numberOfDays <= 31 && numberOfDays >= 1 && month > 0 && month <\
    \ 12 && day > 0 && day < numberOfDays\n    }\n    return false", "    let dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = dateFormat\n    if let validDate = dateFormatter.date(from: date) {\n    \
    \    var calendar = Calendar.current\n        calendar.timeZone = NSTimeZone.local\n\
    \        if let validYear = calendar.component(.year, from: validDate) {\n   \
    \         if let validMonth = calendar.component(.month, from: validDate) {\n\
    \                if let validDay = calendar.component(.day, from: validDate) {\n\
    \                    if validDay < 1 || validDay > 31 || validMonth < 1 || validMonth\
    \ > 12 {\n                        return false\n                    }\n      \
    \              if validYear < 1950 {\n                        return false\n \
    \                   }\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false", "    var dateObj = Date.parse(date:\
    \ date)\n    if dateObj == nil {\n        return false\n    }\n    \n    var yearMonthDay\
    \ = dateObj\n    let year: Int = yearMonthDay.year\n    let month: Int = yearMonthDay.month\n\
    \    let day: Int = yearMonthDay.day\n\n    // Validate the year\n    if year\
    \ < 1 || year > 9999 {\n        return false\n    }\n\n    // Validate the month\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n\n    // Validate\
    \ the day\n    if day < 1 || day > 31 || day >= 30 || day >= 29 {\n        return\
    \ false\n    }\n\n    return true", "    var dateParts = date.components(separatedBy:\
    \ \"-\")\n    \n    // validate date string is valid\n    if dateParts.count !=\
    \ 3 {\n        return false\n    }\n    \n    // validate date format\n    var\
    \ dateMonth = Int(dateParts[0])!\n    var dateDay = Int(dateParts[1])!\n    var\
    \ dateYear = Int(dateParts[2])!\n    \n    var validMonth = false\n    switch\
    \ dateMonth {\n        case 1:\n        case 3:\n        case 5:\n        case\
    \ 7:\n        case 8:\n        case 10:\n        case 12:\n            validMonth\
    \ = true\n        default:\n            return false\n    }\n    \n    var validDay\
    \ = false\n    switch dateDay {\n        case 1:\n        case 3:\n        case\
    \ 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n \
    \           validDay = true\n        default:\n            return false\n    }\n\
    \    \n    switch dateYear {\n        case 1:\n        case 3:\n        case 5:\n\
    \        case 7:\n        case 8:\n        case 10:\n        case 12:\n      \
    \  default:\n            return false\n    }\n    \n    return true", "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else {\n        return false\n\
    \    }\n    return !date.isInvalid && !date.isInfinite && date.year >= 1 && date.year\
    \ <= 12 && date.month >=1 && date.month <= 12 && date.day >= 1 && date.day <=\
    \ 31", "    let formatter = ISO8601DateFormatter()\n    formatter.dateFormat =\
    \ \"MM-dd-yyyy\"\n    return formatter.date(from: date) != nil", "    if date\
    \ == \"\" {\n        return false\n    }\n    var dateFormatter = NSDateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let d = dateFormatter.dateFromString(date)\n\
    \    if d == nil {\n        return false\n    }\n    let calendar = NSCalendar.currentCalendar()\n\
    \    let components = calendar.components(.CalendarUnitYear | .CalendarUnitMonth\
    \ | .CalendarUnitDay, fromDate: d)\n    if components.year < 1 || components.year\
    \ > 31 && components.month < 1 || components.month > 12 {\n        return false\n\
    \    }\n    if components.day < 1 || components.day > 29 && components.month ==\
    \ 2 && components.day == 31 {\n        return false\n    }\n    return true",
  "    guard !date.isEmpty else { return true }\n\n    let daysInMonth = [31,30,29,31,30,31,30,31,30,31,30,31]\n\
    \    let validMonths: [Int] = [1, 3, 5, 7, 8, 10, 12]\n    let validDays: [Int]\
    \ = [1,3,5,7,8,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n\n\
    \    guard date.range(of: #\"^(\\d+)-(\\d+)-(\\d+)$\"#, options: .regularExpression)\
    \ != nil else { return false }\n\n    let components = DateComponents(\n     \
    \   calendar: .current, year: Int(date.components(separatedBy: \"/\").last!)!,\
    \ month: Int(date.components(separatedBy: \"/\").first!)!, day: Int(date.components(separatedBy:\
    \ \"/\").last!)!)\n    return !components.year!.isEmpty && !components.month!.isEmpty\
    \ && !components.day!.isEmpty\n", "    let components = date.characters.split\
    \ {$0 == \",\"}.map(String.init)\n\n    if components.count != 2 {\n        return\
    \ false\n    }\n\n    let monthString   = components[0]\n    let yearString  \
    \  = components[1]\n\n    guard monthString.count > 0 && monthString.count < 12\
    \ else {\n        return false\n    }\n\n    let monthInt = Int(monthString)\n\
    \    let yearInt = Int(yearString)\n\n    if monthInt == 0 || monthInt > 12 {\n\
    \        return false\n    }\n\n    if yearInt == 0 || yearInt > 9999 {\n    \
    \    return false\n    }\n\n    if yearInt % 400 == 0 || (yearInt % 4 == 0 &&\
    \ yearInt % 100 != 0) || (yearInt % 400 == 0 && yearInt % 4 == 0 && yearInt %\
    \ 100 == 0) {\n        return false\n    }\n\n    if monthInt > 2 {\n        return\
    \ false\n    }\n\n    let dayString = components[2]\n    let dayInt = Int(dayString)\n\
    \n    if (dayInt == 0 || dayInt > 29) {\n        return false\n    }\n\n    return\
    \ true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale.current\n    dateFormatter.timeZone\
    \ = TimeZone.current\n    return dateFormatter.date(from: date) != nil", "   \
    \ let formatter = NSDateFormatter()\n    formatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard !date.isEmpty else { return false }\n    let date1 = formatter.dateFromString(date)\n\
    \    guard let date2 = date1 else {return false }\n    let calendar = NSCalendar.currentCalendar()\n\
    \    let dateComponents = calendar.components(.CalendarUnitDay | .CalendarUnitMonth\
    \ | .CalendarUnitYear, fromDate: date2)\n    let validDays = (1..<31).contains(dateComponents.day)\
    \ || dateComponents.month == 2 && dateComponents.day > 31 || dateComponents.month\
    \ == 2 && dateComponents.day > 30 || dateComponents.month == 4 && dateComponents.day\
    \ > 29\n    return validDays", "    guard !date.isEmpty else { return true }\n\
    \    \n    guard date.count > 0 else { return false }\n    \n    let components\
    \ = date.components(separatedBy: \"/\")\n    \n    guard components.count == 3\
    \ else {\n        return false\n    }\n    \n    guard let year = Int(components[0]),\n\
    \        let month = Int(components[1]),\n        let day = Int(components[2])\n\
    \    else {\n        return false\n    }\n    \n    guard month <= 12 && month\
    \ >= 1 else {\n        return false\n    }\n    \n    guard day <= 31 || day >\
    \ 29 else {\n        return false\n    }\n    \n    guard day == 1 || day == 3\
    \ || day == 5 || day == 7 || day == 8 || day == 10 || day == 12 else {\n     \
    \   return false\n    }\n    \n    return true", "    var dateParts = date.components(separatedBy:\
    \ \"/\")\n    if dateParts.count != 3 {\n        return false\n    }\n\n    let\
    \ year = Int(dateParts[0])\n    let month = Int(dateParts[1]) - 1 // Months are\
    \ 0-based. January is 0, February is 1, etc.\n    let day = Int(dateParts[2])\n\
    \n    if year < 1 || month < 1 || day < 1 {\n        return false\n    }\n\n \
    \   return month >= 1 && month <= 12 && day >= 1 && day <= 31\n        && (day\
    \ != 29 || day != 30 || day != 31 || month != 2 || month != 4 || month != 6 ||\
    \ month != 9 || month != 11)", "    let dateComponents = valid_dateComponents(date:\
    \ date)\n    return dateComponents.allSatisfy { !$0.isNegative && $0.year >= 1\
    \ && $0.year < 1000 }", "    if let dateFormatter = DateFormatter() {\n      \
    \  dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        dateFormatter.locale = Locale(identifier:\
    \ \"en_US_POSIX\")\n        return dateFormatter.date(from: date) != nil\n   \
    \ }\n    return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US\")\n\
    \    return dateFormatter.date(from: date) != nil", "    if !is_string_empty(date)\
    \ {\n        let dateArray = date.characters.split(\"-\")\n        if dateArray.count\
    \ == 3 {\n            if dateArray[1] == \"01\" && dateArray[2] == \"01\" && dateArray[0]\
    \ == \"01\" {\n                return true\n            }\n            \n    \
    \        if dateArray[1] == \"12\" && dateArray[2] == \"31\" && dateArray[0] ==\
    \ \"01\" {\n                return true\n            }\n            \n       \
    \     if dateArray[1] == \"12\" && dateArray[2] == \"30\" && dateArray[0] == \"\
    04\" {\n                return true\n            }\n            \n           \
    \ if dateArray[1] == \"12\" && dateArray[2] == \"29\" && dateArray[0] == \"06\"\
    \ {\n                return true\n            }\n            \n            if\
    \ dateArray[1] != \"01\" && dateArray[1] != \"12\" && dateArray[1] != \"31\" &&\
    \ dateArray[1] != \"30\" && dateArray[1] != \"29\" && dateArray[1] != \"04\" &&\
    \ dateArray[1] != \"06\" {\n                return false\n            }\n    \
    \    }\n    }\n    return false", "    guard !date.isEmpty else { return false\
    \ }\n    let months = [\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\",\n        \"04\", \"06\", \"09\", \"11\"\n    ]\n    let dateParts =\
    \ date.components(separatedBy: \"-\")\n    guard dateParts.count == 3 else { return\
    \ false }\n    guard let month = months.firstIndex(of: String(describing: dateParts[0]))\
    \ else { return false }\n    guard let day = dateParts[1].characters.count else\
    \ { return false }\n    guard let year = Int(dateParts[2]) else { return false\
    \ }\n    guard month <= months.count && day <= 10 else { return false }\n    guard\
    \ month <= months.count && day <= 31 else { return false }\n    guard month <=\
    \ months.count && day <= 29 else { return false }\n    guard month <= months.count\
    \ && day <= 30 else { return false }\n    return true", "    guard let dateString\
    \ = date as? String else { return false }\n    return dateString.isEmpty || validateDate(dateString)\
    \ && validateDateDays(dateString)", "    \n    return ((date.characters.count\
    \ > 0) &&\n            (date.characters.count < 41) &&\n            (1 <= Int(date[date.startIndex],\
    \ radix: 10, from:0) &&\n            Int(date[date.startIndex], radix: 10, from:0)\
    \ <= 12) &&\n            (1 <= Int(date[date.startIndex+1], radix: 10, from:0)\
    \ &&\n            Int(date[date.startIndex+1], radix: 10, from:0) <= 31) &&\n\
    \            (1 <= Int(date[date.startIndex+2], radix: 10, from:0) &&\n      \
    \      Int(date[date.startIndex+2], radix: 10, from:0) <= 30) &&\n           \
    \ (1 <= Int(date[date.startIndex+3], radix: 10, from:0) &&\n            Int(date[date.startIndex+3],\
    \ radix: 10, from:0) <= 29) &&\n            (Int(date[date.startIndex+4], radix:\
    \ 10, from:0) <= 12) &&\n            (Int(date[date.startIndex+4], radix: 10,\
    \ from:0) <= 31) &&\n            (Int(date[date.startIndex+4], radix: 10, from:0)\
    \ <= 30) &&\n            (Int(date[date.startIndex+4], radix: 10, from:0) <= 29))",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    dateFormatter.locale = Locale(identifier: \"en_US\")\n    let dateStr =\
    \ dateFormatter.date(from: date)\n    if dateStr == nil {\n        return false\n\
    \    }\n    let calendar = Calendar(identifier: .gregorian)\n    let components\
    \ = calendar.dateComponents([.day], from: dateStr!, to: Date())\n    if components.day\
    \ <= 0 || components.day >= 31 || components.month >= 12 || components.month <\
    \ 1 {\n        return false\n    }\n    return true", "    \n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"dd-MM-yyyy\"\n    \n   \
    \ let dateWithoutSpaces = date.replacingOccurrences(of: \" \", with: \"\")\n \
    \   let dateWithoutDots = dateWithoutSpaces.replacingOccurrences(of: \".\", with:\
    \ \"\")\n    let dateWithoutYear = dateWithoutDots.replacingOccurrences(of: \"\
    -\", with: \"\")\n    \n    let dateComponents = dateFormatter.date(from: dateWithoutYear)\n\
    \    \n    guard dateComponents != nil else {\n        return false\n    }\n \
    \   \n    let daysOfMonth = calendar.dateComponents([.day], from: dateComponents!,\
    \ to: Date()).day\n    \n    return daysOfMonth >= 1 && daysOfMonth <= 31 && daysOfMonth\
    \ == 3 || daysOfMonth >= 1 && daysOfMonth <= 30 || daysOfMonth >= 1 && daysOfMonth\
    \ <= 29 && daysOfMonth == 2", "    let components = date.components(separatedBy:\
    \ \"/\")\n    guard components.count == 3 else { return false }\n    let monthValue\
    \ = components.first ?? \"\"\n    let dayValue = components.last ?? \"\"\n   \
    \ guard monthValue.characters.count <= 12 else { return false }\n    guard dayValue.characters.count\
    \ <= 30 else { return false }\n    guard (monthValue.characters.count == 1 &&\
    \ monthValue == \"01\") || monthValue.characters.count == 2 && monthValue == \"\
    02\" || monthValue.characters.count == 3 && monthValue == \"03\" || monthValue.characters.count\
    \ == 4 && monthValue == \"04\" || monthValue.characters.count == 5 && monthValue\
    \ == \"05\" || monthValue.characters.count == 6 && monthValue == \"06\" || monthValue.characters.count\
    \ == 7 && monthValue == \"07\" || monthValue.characters.count == 8 && monthValue\
    \ == \"08\" || monthValue.characters.count == 9 && monthValue == \"09\" || monthValue.characters.count\
    \ == 10 && monthValue == \"10\" || monthValue.characters.count == 11 && monthValue\
    \ == \"11\" || monthValue.characters.count == 12 && monthValue == \"12\" else\
    \ { return false }\n    guard (dayValue.characters.count == 1 && dayValue == \"\
    01\") || dayValue.characters.count == 2 && dayValue == \"02\" || dayValue.characters.count\
    \ == 3 && dayValue == \"03\" || dayValue.characters.count == 4 && dayValue ==\
    \ \"04\" || dayValue.characters.count == 5 && dayValue == \"05\" || dayValue.characters.count\
    \ == 6 && dayValue == \"06\" || dayValue.characters.count == 7 && dayValue ==\
    \ \"07\" || dayValue.characters.count == 8 && dayValue == \"08\" || dayValue.characters.count\
    \ == 9 && dayValue == \"09\" || dayValue.characters.count == 10 && dayValue ==\
    \ \"10\" || dayValue.characters.count == 11 && dayValue == \"11\" || dayValue.characters.count\
    \ == 12 && dayValue == \"12\" else { return false }\n    return true", "    var\
    \ dateComponents = DateComponents()\n    dateComponents.year = 2000\n    if let\
    \ dateFormatter = DateFormatter() {\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n        dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n       \
    \ if let date = dateFormatter.date(from: date) {\n            dateComponents.day\
    \ = date.day\n            dateComponents.month = date.month - 1\n            dateComponents.year\
    \ = date.year\n        } else {\n            return false\n        }\n    } else\
    \ {\n        return false\n    }\n    let calendar = Calendar(identifier: .gregorian)\n\
    \    calendar.locale = Locale(identifier: \"en_US_POSIX\")\n    calendar.timeZone\
    \ = TimeZone(identifier: \"UTC\")\n    if let date = calendar.date(from: dateComponents)\
    \ {\n        return calendar.isDateValid(date)\n    } else {\n        return false\n\
    \    }", "    guard !date.isEmpty else {\n        return false\n    }\n    var\
    \ components = Calendar.current.dateComponents([.day, .month, .year], from: date)\n\
    \    return components.day != nil && components.day >= 1 && components.day <=\
    \ 31 &&\n           components.month != nil && components.month >= 1 && components.month\
    \ <= 12 &&\n           components.year != nil", "    guard !date.isEmpty else\
    \ { return false }\n    let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31]\n    if date[date.startIndex..<date.index(date.startIndex, offsetBy:\
    \ 2)].count == 3 {\n        let dateParts = date.components(separatedBy: \"/\"\
    )\n        guard dateParts.count == 3 else { return false }\n        if let validMonth\
    \ = Int(dateParts[1]),\n            let validDay = Int(dateParts[2]) {\n     \
    \       if validMonth > 12 || validMonth < 1 || validDay > 31 || validDay < 1\
    \ {\n                return false\n            }\n            if validMonth ==\
    \ 2 && validDay > 29 {\n                return false\n            }\n        \
    \    if validMonth == 4 && validDay > 30 {\n                return false\n   \
    \         }\n        }\n    }\n    if date[date.startIndex..<date.index(date.startIndex,\
    \ offsetBy: 1)].count == 2 {\n        let dateParts = date.components(separatedBy:\
    \ \"/\")\n        guard dateParts.count == 2 else { return false }\n        if\
    \ let validMonth = Int(dateParts[1]),\n            let validDay = Int(dateParts[0])\
    \ {\n            if validMonth > 12 || validMonth < 1 || validDay > 31 || validDay\
    \ < 1 {\n                return false\n            }\n            if validMonth\
    \ == 2 && validDay > 29 {\n                return false\n            }\n     \
    \   }\n    }\n    return true", "    let dateFormatter = DateFormatter()\n   \
    \ dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale.current\n\
    \    let date = dateFormatter.date(from: date)\n    if date == nil {\n       \
    \ return false\n    }\n    let today = Date()\n    let todayMillis = Date().timeIntervalSince1970\n\
    \    let timeInterval = date.timeIntervalSince1970\n    if timeInterval < 0 {\n\
    \        return false\n    }\n    return today.timeIntervalSince1970 >= timeInterval\
    \ && todayMillis - timeInterval <= 31 * 24 * 60 * 60", "    // TODO: Please implement\
    \ this\n    return true", "    let dateFormat = \"dd-MM-yyyy\"\n    let date =\
    \ Date(dateString: date)\n    guard let dateComponents = Calendar.current.dateComponents([.day,\
    \ .month, .year], from: date),\n        let daysInMonth = Calendar.current.dateComponents([.day],\
    \ from: date).day,\n        let monthValid = Calendar.current.dateComponents([.month],\
    \ from: date).month != nil\n        else { return false }\n    guard !date.isEmpty\
    \ else { return false }\n    guard (daysInMonth == 31 || daysInMonth == 29 &&\
    \ monthValid) || monthValid >= 2 || daysInMonth == 1 || daysInMonth == 3 || daysInMonth\
    \ == 5 || daysInMonth == 7 || daysInMonth == 8 || daysInMonth == 10 || daysInMonth\
    \ == 12 else { return false }\n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFormatter1 = DateFormatter()\n\
    \    dateFormatter1.dateFormat = \"MM-dd\"\n    let dateFormatter2 = DateFormatter()\n\
    \    dateFormatter2.dateFormat = \"dd-MM\"\n    if !dateFormatter.isEmpty && !dateFormatter.date(from:\
    \ date)?.isEqualToDate(Date()) ?? true {\n        return false\n    }\n    if\
    \ dateFormatter1.isEmpty && dateFormatter2.isEmpty {\n        return true\n  \
    \  }\n    let dateFormatter3 = DateFormatter()\n    dateFormatter3.dateFormat\
    \ = \"yyyy\"\n    if dateFormatter3.isEmpty {\n        return true\n    }\n  \
    \  let dateFormatter4 = DateFormatter()\n    dateFormatter4.dateFormat = \"MM\"\
    \n    if dateFormatter4.isEmpty {\n        return true\n    }\n    if dateFormatter4.isEmpty\
    \ && dateFormatter3.isEmpty {\n        return true\n    }\n    let dateFormatter5\
    \ = DateFormatter()\n    dateFormatter5.dateFormat = \"dd\"\n    if dateFormatter5.isEmpty\
    \ {\n        return true\n    }\n    if dateFormatter5.isEmpty && dateFormatter4.isEmpty\
    \ {\n        return true\n    }\n    if dateFormatter5.isEmpty && dateFormatter3.isEmpty\
    \ {\n        return true\n    }\n    let dateFormatter6 = DateFormatter()\n  \
    \  dateFormatter6.dateFormat = \"MM-yyyy\"\n    if dateFormatter6.isEmpty {\n\
    \        return true\n    }\n    if dateFormatter6.isEmpty && dateFormatter4.isEmpty\
    \ {\n        return true\n    }\n    if dateFormatter6.isEmpty && dateFormatter3.isEmpty\
    \ {\n        return true\n    }\n    if dateFormatter6.isEmpty && dateFormatter2.isEmpty\
    \ {\n        return true\n    }\n    if dateFormatter6.isEmpty && dateFormatter1.isEmpty\
    \ {\n        return true\n    }\n    return false", "    if !is_non_empty_str(date)\
    \ || !is_length_less_than_one_or_higher(date, 1, 31) || !is_length_less_than_one_or_higher(date,\
    \ 1, 30) || !is_length_less_than_one_or_higher(date, 1, 29) || !is_month_valid_1(date)\
    \ || !is_month_valid_3(date) || !is_month_valid_5(date) || !is_month_valid_7(date)\
    \ || !is_month_valid_8(date) || !is_month_valid_10(date) || !is_month_valid_12(date)\
    \ || !is_date_valid_1(date) || !is_date_valid_3(date) || !is_date_valid_5(date)\
    \ || !is_date_valid_7(date) || !is_date_valid_8(date) || !is_date_valid_10(date)\
    \ || !is_date_valid_12(date) {\n        return false\n    }\n    return true",
  "    var dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFormatter2 = DateFormatter()\n    dateFormatter2.dateFormat = \"\
    MM-dd-yyyy\"\n    let dateFormatter3 = DateFormatter()\n    dateFormatter3.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from: date) {\n     \
    \   return false\n    }\n    if let date = dateFormatter2.date(from: date) {\n\
    \        return false\n    }\n    if let date = dateFormatter3.date(from: date)\
    \ {\n        return false\n    }\n    let components = DateComponents()\n    components.day\
    \ = 1\n    let dateComps = calendar.components(components, from: date)\n    return\
    \ dateComps.month != 0 || dateComps.day != 0 || dateComps.year != 0", "    if\
    \ date.isEmpty {\n        return false\n    }\n\n    var numMonth = date.characters.count\
    \ - 1\n    if numMonth < 1 || numMonth > 12 {\n        return false\n    }\n\n\
    \    var day = date.characters.last {\n        Character($0).isDigit\n    }\n\
    \    if day == nil {\n        return false\n    }\n\n    var year = date.characters.prefix(3).last\
    \ {\n        Character($0).isDigit\n    }\n    if year == nil {\n        return\
    \ false\n    }\n\n    return true", "    var dateFormatter = NSDateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.dateFromString(date)\
    \ {\n        let calendar = NSCalendar.currentCalendar()\n        let components\
    \ = calendar.components(.Year | .Month | .Day, fromDate: date)\n        return\
    \ components.month == 0 && components.day <= 29 && components.day >= 1 && components.year\
    \ >= 31 && components.year <= 2040\n    }\n    return false", "    \n    let dateFormatter\
    \ = DateFormatter()\n    \n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n   \
    \ \n    guard !date.isEmpty else {\n        return false\n    }\n    \n    let\
    \ dateComponets = dateFormatter.date(from: date)\n    \n    return !(dateComponets\
    \ == nil || dateComponets == nil)", "    var dateString: String = date\n    if\
    \ date == \"\" {\n        return false\n    }\n    \n    // get the day, month\
    \ and year\n    let dayIndex = \"0\" + String(date.characters.prefix(2))\n   \
    \ let monthIndex = \"0\" + String(date.characters.suffix(2))\n    let year = String(date.characters.suffix(5))\n\
    \    \n    // convert the day and month to integers\n    var dayInt: Int? = dayIndex.data(using:\
    \ String.Encoding.utf8)\n    if let dayIndex = dayInt {\n        dayInt = Int(dayIndex.prefix(1))\n\
    \    }\n    let month = monthIndex.data(using: String.Encoding.utf8)\n    if let\
    \ monthIndex = month {\n        monthInt = Int(monthIndex.suffix(1))\n    }\n\
    \    \n    // verify number of days and month\n    if dayInt == nil || monthInt\
    \ == nil {\n        return false\n    }\n    \n    // verify months\n    if monthInt\
    \ == 1 && dayInt >= 31 || monthInt >= 12 {\n        return false\n    }\n    \n\
    \    // verify year\n    let yearInt = Int(year)\n    if yearInt >= 2020 && yearInt\
    \ <= 2039 {\n        return true\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else {\n        return false\n   \
    \ }\n    let calendar = Calendar(identifier: .persian)\n    guard let date = calendar.date(from:\
    \ date) else { return false }\n    let components = calendar.components(\n   \
    \     [.day, .month, .year], from: date, toGranularity: .day)\n    let day = components.day!\n\
    \    let month = components.month!\n    let year = components.year!\n    guard\
    \ day >= 1 && day <= 31 &&\n        month in: [1, 3, 5,7, 8, 10, 12] &&\n    \
    \    day <= 29 && month == 2 &&\n        year >= 1 && year <= 12 else { return\
    \ false }\n    return true", "    let components = date.components(separatedBy:\
    \ \"-\")\n    let dayCount = Int64(components[1])!\n    let monthCount = Int64(components[0])!\n\
    \n    if dayCount < 1 || dayCount > 31 || monthCount < 1 || monthCount > 12 ||\
    \ monthCount != components[1] {\n        return false\n    }\n\n    return true",
  "    guard let validDate = try? Date(dateString: date) else {\n        return false\n\
    \    }\n\n    let calendar = Calendar.current\n    var daysInMonth = [31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    var monthsDiff = 3\n    var years\
    \ = validDate.year\n    var months = validDate.month\n    var days = validDate.day\n\
    \    var daysInFebruary = isLeapYear(year: years) ? 29 : 28\n\n    // Feb 29th\
    \ and Feb 30th is a valid date sequence.\n    if month == 2 && days > daysInFebruary\
    \ {\n        return false\n    }\n\n    guard month >= 1 && month <= 12 else {\n\
    \        return false\n    }\n\n    guard days >= 1 && days <= daysInMonth[month\
    \ - 1] else {\n        return false\n    }\n\n    // Valid if day in month is\
    \ greater than or equal to first day of month\n    if month == 2 && days > daysInMonth[1]\
    \ && days != daysInMonth[month] {\n        return false\n    }\n\n    // Valid\
    \ if day in month is greater than or equal to last day of month\n    if month\
    \ == 2 && days != daysInMonth[month] && days > daysInMonth[month] {\n        return\
    \ false\n    }\n\n    return true", "    let months = (0...12)\n        .map {\
    \ Calendar.current.dateComponents([.month], from: Date()) }\n        .reduce(0,+)\n\
    \n    let dateComponents = Calendar.current.dateComponents([.year, .month, .day],\
    \ from: Date())\n    let dateComponentsDate = Calendar.current.dateComponents([.year,\
    \ .month, .day], from: date)\n    let dateComponentsDateString = Calendar.current.dateComponents([.year,\
    \ .month, .day], from: date) \n\n    // check if the date is not empty.\n    if\
    \ date.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).characters.count\
    \ == 0 {\n        return false\n    }\n\n    // check if the date format match\
    \ to the pattern\n    guard dateComponents.year == dateComponentsDate.year,\n\
    \        let monthsDays = months + dateComponentsDate.day,\n        let daysMonths\
    \ = dateComponents.month + dateComponentsDate.month,\n        let monthsDaysYear\
    \ = dateComponents.month + dateComponentsDate.month + dateComponents.year\n  \
    \      else {\n            return false\n    }\n\n    guard monthsDays <= 31 &&\
    \ monthsDaysYear <= 12 else {\n        return false\n    }\n\n    // check if\
    \ the months is correct\n    if monthsDaysYear > months {\n        return false\n\
    \    }\n\n    // check if the date is in the correct format\n    guard dateComponentsDateString.month\
    \ == dateComponentsDate.month && dateComponentsDateString.day == dateComponentsDate.day\
    \ else {\n        return false\n    }\n\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone\
    \ = TimeZone(abbreviation: \"UTC\")\n    \n    let dateArray = dateFormatter.date(from:\
    \ date)\n    \n    if dateArray == nil {\n        return false\n    }\n    \n\
    \    let dateComponents = calendar.components(DateComponents(calendar: calendar,\
    \ timeZone: nil, era: 0, year: dateArray!.year, month: dateArray!.month, day:\
    \ dateArray!.day), from: Date())\n    \n    return dateComponents.era == 0 &&\
    \ dateComponents.year != 0 && dateComponents.month != 0 && dateComponents.day\
    \ != 0", "    \n    // Check empty string\n    if date == \"\" || date.isEmpty\
    \ {\n        return false\n    }\n    \n    // Check correct date format\n   \
    \ let dateFormat = DateFormatter()\n    dateFormat.dateFormat = \"MM-dd-yyyy\"\
    \n    if let dateValidated = dateFormat.date(from: date),\n        !dateValidated\
    \ {\n            return false\n    }\n    \n    // Check days\n    if let dateComponents\
    \ = dateFormat.dateComponents(\n        from: date,\n        to: Date()\n    \
    \    ) {\n        let numDays = dateComponents.day\n        let numMonths = dateComponents.month\n\
    \        let numYears = dateComponents.year\n        let numDaysInYear = 365\n\
    \        let numDaysInMonth = numDaysInYear * numMonths\n        \n        if\
    \ numDays > 31 || (numDays == 31 && (numMonths > 1 || numYears > 12)) || (numDays\
    \ == 29 && numMonths == 12) || (numDays > 29 && numMonths == 1) {\n          \
    \  return false\n        }\n    }\n    return true", "    if date == \"\" {\n\
    \        return false\n    }\n    \n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from:\
    \ date)\n    if date == nil {\n        return false\n    }\n    \n    let calendar\
    \ = Calendar.current\n    \n    // Number of days in current month\n    let daysInMonth\
    \ = calendar.range(of: .day, for: date!)\n    \n    // Number of days in previous\
    \ month\n    let daysInPrevMonth = calendar.range(of: .day, from: date!, to: calendar.date(byAdding:\
    \ .month, value: -1, to: date!))\n    \n    // Check if number of days in current\
    \ month is 1 or less and the days in previous month is 31 or more\n    if daysInMonth!.lowerBound\
    \ == 1\n        && (daysInPrevMonth!.lowerBound == 31 || daysInPrevMonth!.upperBound\
    \ == 31) {\n        return true\n    }\n    \n    // Check if number of days in\
    \ current month is 31 or more\n    if daysInMonth!.lowerBound == 31\n        &&\
    \ (daysInPrevMonth!.lowerBound == 31 || daysInPrevMonth!.upperBound == 31) {\n\
    \        return true\n    }\n    \n    // Check if number of days in current month\
    \ is 30 or less\n    if daysInMonth!.lowerBound == 30\n        && (daysInPrevMonth!.lowerBound\
    \ == 30 || daysInPrevMonth!.upperBound == 30) {\n        return true\n    }\n\
    \    \n    // Check if number of days in current month is 29 or less\n    if daysInMonth!.lowerBound\
    \ == 29\n        && (daysInPrevMonth!.lowerBound == 29 || daysInPrevMonth!.upperBound\
    \ == 29) {\n        return true\n    }\n    \n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let validDate = dateFormatter.date(from: date) else {\n        return false\n\
    \    }\n    let calendar = Calendar(identifier: .gregorian)\n    let components\
    \ = calendar.dateComponents([.day], from: validDate, to: Date())\n    return components.day\
    \ > 0", '    return valid_date(date: date, format: "MM-DD-YYYY")', "    \n   \
    \ guard !date.isEmpty else {\n        return false\n    }\n    \n    let calendar\
    \ = Calendar(identifier: .gregorian)\n    var components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    \n    if components.month < 1 || components.month\
    \ > 12 {\n        return false\n    }\n    \n    if components.day < 1 || components.day\
    \ > 30 {\n        return false\n    }\n    \n    let year = components.year\n\
    \    \n    if components.month == 2 && components.day > 29 {\n        return false\n\
    \    }\n    \n    if components.day > 31 {\n        return false\n    }\n    \n\
    \    if year < 1980 {\n        return false\n    }\n    \n    return true", " \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if dateFormatter.date(from: date) != nil {\n        let daysInMonth = [31,28,31,30,31,30,31,30,31,30,31]\n\
    \        let calendar = Calendar.current\n        var daysInMonth = calendar.component(.month,\
    \ from: dateFormatter.date(from: date))\n        if daysInMonth > 12 {\n     \
    \       daysInMonth = 12\n        }\n        if daysInMonth < 1 {\n          \
    \  daysInMonth = 1\n        }\n        daysInMonth = daysInMonth.next\n      \
    \  var year: Int = dateFormatter.date(from: date)?.year\n        if year >= 2000\
    \ {\n            year = 0\n        }\n        if year < 0 {\n            year\
    \ = -year\n        }\n        year = year! + 100\n        if year % 4 != 0 {\n\
    \            daysInMonth++\n        }\n        if year % 400 == 0 {\n        \
    \    daysInMonth++\n        }\n        if year % 100 == 0 {\n            daysInMonth++\n\
    \        }\n        if year % 4 == 0 {\n            daysInMonth++\n        }\n\
    \        if daysInMonth < 1 {\n            daysInMonth = 1\n        }\n      \
    \  let year = String(year)\n        let date = daysInMonth + String(date)\n  \
    \      let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat =\
    \ \"MMddyyyy\"\n        if dateFormatter.date(from: date) != nil {\n         \
    \   return true\n        }\n    }\n    return false", "    guard let date_string\
    \ = date else { return false }\n    let date_components = date_string.components(separatedBy:\
    \ \"-\")\n    guard date_components.count == 3 else { return false }\n    guard\
    \ date_components.first == \"01\" || date_components.first == \"03\" || date_components.first\
    \ == \"05\" || date_components.first == \"07\" || date_components.first == \"\
    08\" || date_components.first == \"10\" || date_components.first == \"12\" ||\
    \ date_components.first == \"04\" || date_components.first == \"06\" || date_components.first\
    \ == \"09\" || date_components.first == \"11\" || date_components.first == \"\
    02\" || date_components.first == \"05\" || date_components.first == \"07\" ||\
    \ date_components.first == \"08\" || date_components.first == \"10\" || date_components.first\
    \ == \"12\" || date_components.first == \"02\" || date_components.first == \"\
    03\" || date_components.first == \"06\" || date_components.first == \"09\" ||\
    \ date_components.first == \"11\" || date_components.first == \"08\" || date_components.first\
    \ == \"12\" || date_components.first == \"09\" || date_components.first == \"\
    10\" || date_components.first == \"11\" || date_components.first == \"12\" ||\
    \ date_components.first == \"02\" || date_components.first == \"03\" || date_components.first\
    \ == \"05\" || date_components.first == \"07\" || date_components.first == \"\
    08\" || date_components.first == \"10\" || date_components.first == \"12\" ||\
    \ date_components.first == \"03\" || date_components.first == \"06\" || date_components.first\
    \ == \"09\" || date_components.first == \"11\" || date_components.first == \"\
    08\" || date_components.first == \"12\" || date_components.first == \"09\" ||\
    \ date_components.first == \"10\" || date_components.first == \"11\" || date_components.first\
    \ == \"12\" || date_components.first == \"08\" || date_components.first == \"\
    12\" || date_components.first == \"09\" || date_components.first == \"10\" ||\
    \ date_components.first == \"11\" || date_components.first == \"12\" || date_components.first\
    \ == \"08\" || date_components.first == \"12\" || date_components.first == \"\
    09\" || date_components.first == \"10\" || date_components.first == \"11\" ||\
    \ date_components.first == \"12\" || date_components.first == \"08\" || date_components.first\
    \ == \"12\" || date_components.first == \"09\" || date_components.first == \"\
    10\" || date_components.first == \"11\" || date_components.first == \"12\" ||\
    \ date_components.first == \"08\" || date_components.first == \"12\" || date_components.first\
    \ == \"09\" || date_components.first == \"10\" || date_components.first == \"\
    11\" || date_components.first == \"12\" || date_components.first == \"07\" ||\
    \ date_components.first == \"08\" || date_components.first == \"10\" || date_components.first\
    \ == \"12\" || date_components.first == \"08\" || date_components.first == \"\
    09\" || date_components.first == \"10\" || date_components.first == \"11\" ||\
    \ date_components.first == \"12\" || date_", "    if date == \"\" {\n        return\
    \ false\n    }\n\n    let dateString: String = date\n    let dateFormatter: DateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n\n    if let\
    \ dateFromString: Date = dateFormatter.date(from: dateString) {\n        return\
    \ true\n    } else {\n        return false\n    }", "    var dateFormat = NSDateFormatter()\n\
    \    dateFormat.dateFormat = \"MM-dd-yyyy\"\n    dateFormat.timeZone = NSTimeZone(forSecondsFromGMT:\
    \ 0)\n    dateFormat.locale = NSLocale(localeIdentifier: \"en_US_POSIX\")\n  \
    \  if let date = dateFormat.dateFromString(date) {\n        let calendar = NSCalendar.currentCalendar()\n\
    \        let components = calendar.components(NSCalendarUnit.Day,\n          \
    \  fromDate: date,\n            toDate: NSDate(),\n            options: NSCalendarOptions(rawValue:\
    \ 0))\n        return components.day != 0 || components.month != 0 || components.year\
    \ != 0\n    }\n    return false", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateComponents = DateComponents()\n    dateComponents.day\
    \ = 1\n    dateComponents.month = 1\n    dateComponents.year = 2000\n    let dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = date.trimmingCharacters(in: .whitespacesAndNewlines).components(separatedBy:\
    \ \"/\").first,\n        date = date.trimmingCharacters(in: .whitespacesAndNewlines).components(separatedBy:\
    \ \"-\").first,\n        let dateFormatter = DateFormatter()\n        else {\n\
    \            return false\n    }\n    dateFormatter.dateFormat = dateFormat\n\
    \    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    guard let\
    \ date = dateFormatter.date(from: date) else {\n        return false\n    }\n\
    \    let dateComponents2 = date.dateComponents(\n        from: Calendar.current.dateComponents([.day,\
    \ .month, .year], from: date))\n    return dateComponents2.day == 1 && dateComponents2.month\
    \ == 3 && dateComponents2.year == 2000 // January 3rd\n        && dateComponents2.day\
    \ == 1 && dateComponents2.month == 3 && dateComponents2.year == 2000 // January\
    \ 3rd", "    // Check if the date is not empty\n    if date.characters.count <\
    \ 1 {\n        return false\n    }\n    // Check the number of days in months\n\
    \    var dateComponents = Calendar.current.dateComponents([.year], from: date,\
    \ to: Date())\n    let months = dateComponents.month\n    let numDays = dateComponents.day\n\
    \n    if months > 12 || months < 1 || numDays > 29 || numDays < 1 {\n        return\
    \ false\n    }\n    // Check if date format is correct\n    let dateFormat = \"\
    MM-dd-yyyy\"\n    \n    if date.characters.count < 2 {\n        return false\n\
    \    }\n\n    let dateFormatRegex = try! NSRegularExpression(pattern: \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    )\n    \n    if dateFormatRegex.firstMatch(in: date, options: [], range: NSRange(location:\
    \ 0, length: date.characters.count)).rangeAt(0).location != NSNotFound {\n   \
    \     return false\n    }\n    return true", "    let formatter = DateFormatter()\n\
    \    formatter.dateFormat = \"MM-dd-yyyy\"\n    guard let date = formatter.date(from:\
    \ date) else { return false }\n    let dateComponents = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    let numberOfDays = dateComponents.day!\n    return\
    \ (numberOfDays > 0 && numberOfDays <= 31) &&\n        (numberOfDays > 1 && numberOfDays\
    \ <= 30) &&\n        (numberOfDays > 1 && numberOfDays <= 29) &&\n        (numberOfDays\
    \ > 0 && numberOfDays <= 12)", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n    dateFormatter.timeZone = TimeZone(identifier: \"UTC\")\n    guard let date\
    \ = dateFormatter.date(from: date) else {\n        return false\n    }\n    if\
    \ let date = date {\n        return ((date.month == 12 && (date.day == 0 || date.day\
    \ == 29))\n                || (date.month != 12 && date.day == 1)\n          \
    \      || (date.month != 1 && date.day == 31)\n                || (date.month\
    \ != 3 && date.day == 30))\n    } else {\n        return false\n    }", "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    return dateFormatter.date(from: date) != nil", "    let daysInMonth: Int\
    \ = (31 + ((Calendar.current as Calendar).range(of: .month, for: Date())!.upperBound))\
    \ - 2\n    guard date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dayStr: String = dateFormatter.date(from:\
    \ date)?.day ?? \"\"\n    guard let dayInt = Int(dayStr) else { return false }\n\
    \    guard dayInt <= daysInMonth && dayInt > 0 else { return false }\n    return\
    \ true", "    let dateComponents = DateComponents(year: 1900, month: 0, day: 0)\n\
    \    guard let startDate = calendar.date(from: dateComponents) else {\n      \
    \  return false\n    }\n\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let dateString = dateFormatter.date(from: date)?.description\
    \ {\n        let range = (dateString.startIndex..<dateString.index(dateString.startIndex,\
    \ offsetBy: 5))\n        let dateRange = dateString.range(of: dateString)\n  \
    \      guard dateRange?.contains(range.lowerBound) else {\n            return\
    \ false\n        }\n    }\n    return true", "    guard let dateData = date.data(using:\
    \ .utf8) else { return false }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let parsedDate = dateFormatter.date(from: dateData)\
    \ else { return false }\n    if parsedDate == nil {\n        return false\n  \
    \  }\n    let calendar = Calendar.current\n    let dateComponents = calendar.dateComponents([.year,\
    \ .month, .day], from: parsedDate)\n    if dateComponents.day! < 1 || dateComponents.day!\
    \ > 31 ||\n        dateComponents.month! < 1 || dateComponents.month! > 12 ||\n\
    \        dateComponents.year! < 1900 ||\n        dateComponents.year! > 2100 {\
    \ return false }\n    return true", "    let year   = Int(date[date.startIndex...date.index(date.startIndex,\
    \ offsetBy: 4)])\n    let month  = Int(date[date.index(date.startIndex, offsetBy:\
    \ 5)...date.index(date.index(date.startIndex, offsetBy: 5), offsetBy: 2)])\n \
    \   let day    = Int(date[date.index(date.index(date.startIndex, offsetBy: 5)...date.index(date.index(date.startIndex,\
    \ offsetBy: 5), offsetBy: 2), offsetBy: 1)])\n\n    let validMonth = month >=\
    \ 1 && month <= 12\n    let validDay   = day >= 1 && day <= 31\n    let validYear\
    \  = year >= 0 && year <= 9999\n\n    return validMonth && validDay && validYear",
  "    guard !date.isEmpty else { return false }\n    let dateComponents = date.components(separatedBy:\
    \ separator)\n    guard dateComponents.count >= 3 else { return false }\n    let\
    \ daysInMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    let days\
    \ = dateComponents[2]\n    let daysInYear = Calendar.current.component(.year,\
    \ from: Date())\n    guard let day = Int(day) else { return false }\n    guard\
    \ day >= 1 && day <= daysInYear else { return false }\n    guard dateComponents[0]\
    \ == \"01\" && dateComponents[1] == \"01\" && dateComponents[2] == \"01\" else\
    \ { return false }\n    guard let month = Int(dateComponents[1]) else { return\
    \ false }\n    guard month >= 1 && month <= 12 else { return false }\n    guard\
    \ dateComponents[3] == \"01\" && dateComponents[4] == \"01\" && dateComponents[5]\
    \ == \"01\" else { return false }\n    guard daysInMonth[month - 1] == Int(days)\
    \ else { return false }\n    return true", "    date = date.lowercased()\n   \
    \ if !date.isEmpty {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"dd-MM-yyyy\"\n        if let dateObject = dateFormatter.date(from: date)\
    \ {\n            let calendar = Calendar(identifier: .gregorian)\n           \
    \ let components = calendar.dateComponents([.month, .day, .year], from: dateObject,\
    \ to: Date())\n            return components.month != 0 || components.day != 0\
    \ || components.year != 0\n        }\n    }\n    return false", "    let dateRegEx\
    \ = \"^(?:(?:(?:01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1]))(-)?(?:(?:0[1-9]|[1-2][0-9]|30)(-)?(?:0[1-9]|1[0-2]))(-)?(?:20[0-9][0-9])$\"\
    ;\n    let dateFormatter = DateFormatter();\n    dateFormatter.dateFormat = dateRegEx;\n\
    \    if let date = dateFormatter.date(from: date) {\n        return dateFormatter.string(from:\
    \ date) != \"\";\n    }\n    return false", "    \n    var isValid: Bool = true\n\
    \    \n    if !date.isEmpty {\n        \n        let splitString = date.components(separatedBy:\
    \ \"/\")\n        \n        if splitString.count != 3 {\n            isValid =\
    \ false\n        }\n        else {\n            let monthString = splitString[0]\n\
    \            let dayString = splitString[1]\n            let yearString = splitString[2]\n\
    \            \n            let monthInt = Int(monthString)\n            let dayInt\
    \ = Int(dayString)\n            let yearInt = Int(yearString)\n            \n\
    \            if monthInt > 12 || monthInt < 1 {\n                isValid = false\n\
    \            }\n            else if dayInt > 31 or dayInt < 1 {\n            \
    \    isValid = false\n            }\n            else if monthInt == 1 {\n   \
    \             if dayInt > 29 {\n                    isValid = false\n        \
    \        }\n            }\n            \n        }\n    }\n    return isValid",
  '    return isValidDate(date) && valid_month(date) && valid_day(date)', "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else { return false }\n\
    \    guard let month1 = Calendar.current.dateComponents([.month], from: date,\
    \ to: Date()) == .month1 else { return false }\n    guard let month2 = Calendar.current.dateComponents([.month,\
    \ .monthDay], from: date, to: Date()) == .month2 else { return false }\n    guard\
    \ let day1 = Calendar.current.dateComponents([.day], from: date, to: Date()) ==\
    \ .day1 else { return false }\n    guard let day2 = Calendar.current.dateComponents([.day,\
    \ .dayMonth], from: date, to: Date()) == .day2 else { return false }\n    guard\
    \ let year1 = Calendar.current.dateComponents([.year], from: date, to: Date())\
    \ == .year1 else { return false }\n    guard let year2 = Calendar.current.dateComponents([.year,\
    \ .yearMonth], from: date, to: Date()) == .year2 else { return false }\n    return\
    \ true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"dd-MM-yyyy\"\n    return dateFormatter.date(from: date) != nil", "\tlet\
    \ dateString = (date as NSString).replacingOccurrences(of: \" \", with: \"\",\
    \ options: NSString.CompareOptions.literal, range: nil)\n\tlet dateComponents\
    \ = DateComponents(year: 1900, month: 1, day: 1)\n\t\n\tguard let dateFormat =\
    \ formatter.dateFormat else {\n\t\tpreconditionFailure(\"No valid date format\"\
    )\n\t\treturn false\n\t}\n\t\n\tlet dateFormatter = DateFormatter()\n\tdateFormatter.dateFormat\
    \ = dateFormat\n\t\n\tguard let dateFromString = dateFormatter.date(from: dateString)\
    \ else {\n\t\treturn false\n\t}\n\t\n\tdateComponents.year = dateFromString.year\n\
    \tdateComponents.month = dateFromString.month\n\tdateComponents.day = dateFromString.day\n\
    \t\n\tlet yearMonthDay = Calendar.current.date(from: dateComponents, to: Date(),\
    \ options: .matchNextTime)\n\tlet calendar = Calendar.current\n\t\n\treturn calendar.component(.isLeapMonth,\
    \ from: yearMonthDay!) == nil && calendar.component(.isLeapMonth, from: yearMonthDay!)\
    \ != nil && calendar.component(.isLeapMonth, from: yearMonthDay!) == false &&\
    \ calendar.component(.isLeapMonth, from: yearMonthDay!) == false", "    \n   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard dateFormatter.date(from: date) != nil else { return false }\n    let\
    \ calendar = Calendar(identifier: .gregorian)\n    guard let components = dateFormatter.calendar?.components(\n\
    \        from: date,\n        to: DateComponents(year: 1900, month: 1, day: 1),\n\
    \        options: []\n    )\n        else { return false }\n    \n    return components.day\
    \ == 1 && components.month == 1 &&\n        components.year >= 1900 && components.year\
    \ <= 2099", "    if date.characters.count == 0 { return false }\n    var mm =\
    \ date.characters.first!\n    let mmString = String.init(validatingUTF8: mm)\n\
    \    mmString = mmString.replacingOccurrences(of: \"/\", with: \"\")\n    let\
    \ mmInt: Int? = mmString.convertFromInt()\n    guard let mmIntVal = mmInt else\
    \ {\n        return false\n    }\n    var dd = date.characters.dropFirst().last!\n\
    \    let ddString = String.init(validatingUTF8: dd)\n    ddString = ddString.replacingOccurrences(of:\
    \ \"/\", with: \"\")\n    let ddInt: Int? = ddString.convertFromInt()\n    guard\
    \ let ddIntVal = ddInt else {\n        return false\n    }\n\n    let mmStrLen\
    \ = mmString.count\n    let ddStrLen = ddString.count\n    let mmVal = mmIntVal\
    \ % 100\n    let ddVal = ddIntVal % 100\n    let mmCheck = mmVal < 10 && mmVal\
    \ > 0 && (mmVal == mmStrLen || mmVal % 10 == 0)\n    let ddCheck = ddVal < 10\
    \ && ddVal > 0 && (ddVal == ddStrLen || ddVal % 10 == 0)\n    return (mmCheck\
    \ && ddCheck)", "    if !is_valid_date(date) { return false }\n    let year =\
    \ dtoi(date[4..<7])\n    let month = dtoi(date[1..<3])\n    let day = dtoi(date[2..<5])\n\
    \    let year_mod = year % 4\n    if year_mod < 2 {\n        return month == 1\
    \ && day >= 1 && day <= 31\n    } else if year_mod < 6 {\n        return month\
    \ == 3 && day >= 1 && day <= 30\n    } else if year_mod < 9 {\n        return\
    \ month == 5 && day >= 1 && day <= 29\n    } else {\n        return month == 7\
    \ && day >= 1 && day <= 31\n    }", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let daysInMonth = calendar.maximumDaysInComponent(NSCalendar.Unit.month)\n\
    \    let numberOfDays = calendar.component(.day, from: date, to: Date(), options:\
    \ [])\n    return numberOfDays > 1 && numberOfDays <= daysInMonth", "    let dateRegEx\
    \ = \"^(((0[1-9]|1[0-2])|([1-2][0-9])|(3[0-1]))\\\\-(0[1-9]|1[0-2])\\\\-((19|20)\\\
    \\d\\\\-(0[1-9]|1[0-2])|(0?[13456789]|1\\\\d)\\\\-(0[1-9]|1[0-2]))$|^(0?[1-9]|1[0-2])\\\
    \\-(0?[1-9]|1[0-2])\\\\-((19|20)\\\\d\\\\-(0[1-9]|1[0-2])|(0?[13456789]|1\\\\\
    d)\\\\-(0[1-9]|1[0-2]))$\"\n    let dateTest = NSPredicate(format: \"SELF MATCHES\
    \ %@\", dateRegEx)\n    return dateTest.evaluate(with: date)", "    if let d =\
    \ date.cString() {\n        let df = DateFormatter()\n        df.dateFormat =\
    \ \"MM-dd-yyyy\"\n        df.locale = Locale(identifier: \"en_US\")\n        df.timeZone\
    \ = TimeZone(identifier: \"UTC\")\n        let result = df.date(from: d)\n   \
    \     return result != nil\n    } else {\n        return false\n    }", "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let dateAsInt = dateFormatter.date(from: date)?.timeIntervalSince1970\
    \ else { return false }\n    let totalDays = calendar.component(.weekday, from:\
    \ dateAsInt) + calendar.component(.day, from: dateAsInt)\n    if totalDays < 1\
    \ { return false }\n    if totalDays > 31 { return false }\n    if calendar.component(.month,\
    \ from: dateAsInt) > 12 { return false }\n    if calendar.component(.month, from:\
    \ dateAsInt) < 1 { return false }\n    return true", "    guard date != \"\" else\
    \ { return true }\n    guard (date.characters.count >= 4) else {\n        return\
    \ false\n    }\n    guard (date.characters.count <= 7) else {\n        return\
    \ false\n    }\n\n    var day = date.substringToIndex(advance(date.startIndex,\
    \ 1)).characters.first\n    if day == \"1\" {\n        day = date.substringToIndex(advance(date.startIndex,\
    \ 2)).characters.first\n        if day == \"1\" {\n            day = date.substringToIndex(advance(date.startIndex,\
    \ 3)).characters.first\n            if day == \"1\" {\n                day = date.substringToIndex(advance(date.startIndex,\
    \ 4)).characters.first\n            }\n        }\n    }\n    if day == \"4\" {\n\
    \        day = date.substringToIndex(advance(date.startIndex, 2)).characters.first\n\
    \        if day == \"4\" {\n            day = date.substringToIndex(advance(date.startIndex,\
    \ 3)).characters.first\n            if day == \"4\" {\n                day = date.substringToIndex(advance(date.startIndex,\
    \ 4)).characters.first\n            }\n        }\n    }\n    if day == \"6\" {\n\
    \        day = date.substringToIndex(advance(date.startIndex, 2)).characters.first\n\
    \        if day == \"6\" {\n            day = date.substringToIndex(advance(date.startIndex,\
    \ 3)).characters.first\n            if day == \"6\" {\n                day = date.substringToIndex(advance(date.startIndex,\
    \ 4)).characters.first\n            }\n        }\n    }\n    if day == \"9\" {\n\
    \        day = date.substringToIndex(advance(date.startIndex, 2)).characters.first\n\
    \        if day == \"9\" {\n            day = date.substringToIndex(advance(date.startIndex,\
    \ 3)).characters.first\n            if day == \"9\" {\n                day = date.substringToIndex(advance(date.startIndex,\
    \ 4)).characters.first\n            }\n        }\n    }\n    if day == \"11\"\
    \ {\n        day = date.substringToIndex(advance(date.startIndex, 2)).characters.first\n\
    \        if day == \"11\" {\n            day = date.substringToIndex(advance(date.startIndex,\
    \ 3)).characters.first\n            if day == \"11\" {\n                day =\
    \ date.substringToIndex(advance(date.startIndex, 4)).characters.first\n      \
    \      }\n        }\n    }\n    if day == \"12\" {\n        day = date.substringToIndex(advance(date.startIndex,\
    \ 2)).characters.first\n        if day == \"12\" {\n            day = date.substringToIndex(advance(date.startIndex,\
    \ 3)).characters.first\n            if day == \"12\" {\n                day =\
    \ date.substringToIndex(advance(date.startIndex, 4)).characters.first\n      \
    \      }\n        }\n    }\n    return day != \"1\" && day ", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"dd-MM-yyyy\"\n\n    let dateComponents = dateFormatter.date(from:\
    \ date)\n    guard dateComponents != nil else {\n        return false\n    }\n\
    \n    let components = dateComponents!\n\n    // Checking for month\n    if components.month\
    \ >= 1 && components.month <= 12 {\n        return true\n    }\n\n    // Checking\
    \ for date\n    if components.day >= 1 && components.day <= 31 {\n        return\
    \ true\n    }\n\n    // Checking for year\n    if components.year >= 1 && components.year\
    \ <= 13 {\n        return true\n    }\n\n    // Checking for day\n    if components.day\
    \ >= 1 && components.day <= 30 {\n        return true\n    }\n\n    // Checking\
    \ for month\n    if components.month >= 1 && components.month <= 12 {\n      \
    \  return true\n    }\n\n    // Checking for year\n    if components.year >= 1\
    \ && components.year <= 13 {\n        return true\n    }\n\n    return false",
  "    if date == \"\" {\n        return false\n    }\n    \n    let components =\
    \ valid_date_string(date)\n    \n    if components.days == nil || components.months\
    \ == nil || components.years == nil {\n        return false\n    }\n    \n   \
    \ if components.days?.intValue < 1 || components.months?.intValue < 1 || components.years?.intValue\
    \ < 1 {\n        return false\n    }\n    \n    if components.months?.intValue\
    \ > 12 {\n        return false\n    }\n    \n    if components.days?.intValue\
    \ > 30 {\n        return false\n    }\n    \n    if components.months?.intValue\
    \ > 12 {\n        return false\n    }\n    \n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"mm-dd-yyyy\"\n    dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\")\n    guard let validDate = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    var daysInMonth = calendar.dateComponents([.day], from: validDate, to: Date())\n\
    \    daysInMonth?.day += 1\n    guard daysInMonth?.day <= 31 else {\n        return\
    \ false\n    }\n    guard daysInMonth?.day <= 30 else {\n        return false\n\
    \    }\n    guard daysInMonth?.day <= 29 else {\n        return false\n    }\n\
    \    guard daysInMonth?.day <= 12 else {\n        return false\n    }\n    return\
    \ true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\
    \ return false }\n    guard date.month == 0 && date.day > 1 && date.day <= 29\
    \ && date.year > 1900 else { return false }\n    guard date.month == 1 && date.day\
    \ > 1 && date.day <= 31 else { return false }\n    guard date.month == 3 && date.day\
    \ > 1 && date.day <= 30 else { return false }\n    return true", "    let calendar\
    \ = NSCalendar.currentCalendar()\n\n    let dateFormatter = NSDateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.dateFromString(date)\
    \ {\n        let isValidDate = calendar.rangeOfUnit(.Day, startDate: date, interval:\
    \ nil, forDate: date)\n        return isValidDate.length == 0 ? false : true\n\
    \    }\n    return false", "    if !is_empty_string(date) && !validate_day_range(date,\
    \ 1, 31, false) && !validate_day_range(date, 0, 30, false) && !validate_day_range(date,\
    \ 0, 29, false) && !validate_month_range(date, 1, 12, false) && !validate_month_range(date,\
    \ 0, 12, false) && !validate_date_range(date, 4, 1, false) {\n        return false\n\
    \    }\n    return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateString: String = dateFormatter.date(from: date)?.description\n\
    \    guard !dateString.isEmpty,\n          valid_days(days: Int(dateString.components(separatedBy:\
    \ \"-\")![0])),\n          valid_months(months: Int(dateString.components(separatedBy:\
    \ \"-\")![1])),\n          valid_year(year: Int(dateString.components(separatedBy:\
    \ \"-\")![2])),\n          dateString == date else { return false }\n    return\
    \ true", "    guard !date.isEmpty else {\n        return false\n    }\n    guard\
    \ let dateSplit = date.split(separator: \"-\") else {\n        return false\n\
    \    }\n    guard dateSplit.count == 3 else {\n        return false\n    }\n \
    \   guard let month = Int(dateSplit[0]) else {\n        return false\n    }\n\
    \    guard let day = Int(dateSplit[1]) else {\n        return false\n    }\n \
    \   guard let year = Int(dateSplit[2]) else {\n        return false\n    }\n \
    \   guard month != 0 || month != 4 || month != 6 || month != 9 || month != 11\
    \ || month != 2 else {\n        return false\n    }\n    guard day > 0 && day\
    \ < 31 else {\n        return false\n    }\n    guard day > 0 && day < 30 else\
    \ {\n        return false\n    }\n    guard day > 0 && day < 29 else {\n     \
    \   return false\n    }\n    guard day > 0 else {\n        return false\n    }\n\
    \    guard day <= 29 else {\n        return false\n    }\n    guard month == 1\
    \ || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12 else {\n        return false\n    }\n    guard year >= 2000 && year <=\
    \ 2099 else {\n        return false\n    }\n    return true", "    let dateFormatter\
    \ = NSDateFormatter()\n    dateFormatter.dateFormat = \"mm-dd-yyyy\"\n    let\
    \ d = dateFormatter.dateFromString(date)\n    return d != nil", '    return validate_date(date:
    date, allowEmpty: false, checkValidMonth: true, checkValidDay: true, checkValidYear:
    true)', "    var d = date\n    if isEmpty(d) { return false }\n    let formatter\
    \ = DateFormatter()\n    formatter.dateFormat = \"MM-dd-yyyy\"\n    if let date\
    \ = formatter.date(from: d) {\n        let calendar = Calendar.current\n     \
    \   let components = calendar.dateComponents([.day, .month, .year], from: date,\
    \ to: Date())\n        let day = components.day!\n        let month = components.month!\n\
    \        let year = components.year!\n        guard day < 1 || day > 31 && month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12 ||\n            month == 4 || month == 6 || month == 9 || month\
    \ == 11 else {\n                return false\n        }\n        guard day < 1\
    \ || day > 30 && month == 4 || month == 6 || month == 9 || month == 11 else {\n\
    \            return false\n        }\n        guard day < 1 || day > 29 else {\n\
    \            return false\n        }\n        guard month != 2 && month != 4 &&\
    \ month != 6 && month != 9 && month != 11 else {\n            return false\n \
    \       }\n        return true\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"mm-dd-yyyy\"\n    return\
    \ dateFormatter.date(from: date)! == nil", "    let daysInMonth = [31,28,31,30,31,30,31,30,31,30,31,30,31]\n\
    \    let dateComponents = date.components(separatedBy: \"/\")\n    let days: [Int]\
    \ = dateComponents.map { Int($0) }\n    \n    if days.count != 3 {\n        return\
    \ false\n    }\n    \n    if days.count < 1 || days.count > 31 {\n        return\
    \ false\n    }\n    \n    if days[2] == 1 || days[2] == 3 {\n        return true\n\
    \    }\n    \n    if days[2] < 1 || days[2] > daysInMonth[2] {\n        return\
    \ false\n    }\n    \n    if days[1] == 1 || days[1] == 3 {\n        return true\n\
    \    }\n    \n    if days[1] < 1 || days[1] > daysInMonth[1] {\n        return\
    \ false\n    }\n    \n    if days[0] < 1 || days[0] > daysInMonth[0] {\n     \
    \   return false\n    }\n    \n    return true", "    var dateFormatter = DateFormatter()\n\
    \n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let comps = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return comps.day >= 1 && comps.day <= 31\n\
    \    }\n\n    dateFormatter.dateFormat = \"dd-MM-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let comps = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return comps.day >= 1 && comps.day <= 30\n\
    \    }\n\n    dateFormatter.dateFormat = \"MM-dd\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let comps = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return comps.day >= 1 && comps.day <= 29\n\
    \    }\n\n    dateFormatter.dateFormat = \"dd\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let comps = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return comps.day >= 1 && comps.day <= 29\n\
    \    }\n\n    dateFormatter.dateFormat = \"yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        return true\n    }\n\n    return false", "    guard let dateAsString\
    \ = (date as NSString).stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\
    \ else {\n        return false\n    }\n    let dateComponent = NSDateComponents()\n\
    \    dateComponent.day = -1\n    dateComponent.year = 2000\n    let dateFormatter\
    \ = NSDateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let\
    \ date = dateFormatter.dateFromString(dateAsString)\n    return dateFormatter.stringFromDate(date)\
    \ != nil", "    let components = date.toDateComponents()\n    if components.year\
    \ > 0\n        || components.month > 0\n        || components.day > 0 {\n    \
    \    return true\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"mm-dd-yyyy\"\n    return dateFormatter.date(from:\
    \ date)", "    let dateComponents = DateComponents(\n        year: 2000,\n   \
    \     month: 4,\n        day: 20,\n        hour: 6,\n        minute: 0,\n    \
    \    second: 0,\n        nanosecond: 0)\n    return Calendar.current.dateIsLess(date,\
    \ target: dateComponents, granularity: .day) == nil", "    let format = \"MM-dd-yyyy\"\
    \n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = format\n\
    \    if dateString.count != 0 && dateString.count != nil &&\n        days.count\
    \ != nil && months.count != nil && years.count != nil {\n        let dateToCheck\
    \ = dateFormatter.date(from: date)!\n        for days in 1 ..< 31 {\n        \
    \    for months in 1 ..< 12 {\n                for years in 1970 ..< 2099 {\n\
    \                    if !(\n                        dateFormatter.date(from: date)\
    \ == nil ||\n                        days.0 < 1 || days.0 > 31 ||\n          \
    \              months.0 < 1 || months.0 > 12 ||\n                        years.0\
    \ < 1901 || years.0 > 2099\n                    ) {\n                        return\
    \ false\n                    }\n                }\n            }\n        }\n\
    \        return true\n    }\n    return false", "    if !date.isEmpty {\n    \
    \    let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n        if let date = dateFormatter.date(from: date){\n        \
    \    let calendar = Calendar.current\n            let components = calendar.dateComponents([.day,\
    \ .month, .year], from: date, to: Date())\n            if components.day == 31\
    \ &&\n                components.month == 1 &&\n                components.year\
    \ >= 2000 {\n                return true\n            }\n            if components.day\
    \ == 30 &&\n                components.month == 4 &&\n                components.year\
    \ >= 2000 {\n                return true\n            }\n            if components.day\
    \ == 29 &&\n                components.month == 2 &&\n                components.year\
    \ >= 2000 {\n                return true\n            }\n            if components.month\
    \ == 0 ||\n                components.month == 1 ||\n                components.month\
    \ == 3 ||\n                components.month == 5 ||\n                components.month\
    \ == 7 ||\n                components.month == 8 ||\n                components.month\
    \ == 10 ||\n                components.month == 12 ||\n                components.month\
    \ == 11 ||\n                components.month == 4 {\n                return true\n\
    \            }\n            return false\n        }\n    }\n    return false",
  "    var dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if dateFormatter.date(from: date) != nil {\n        var totalDays = calendar.component(.day,\
    \ from: dateFormatter.date(from: date))\n        if totalDays < 1 || totalDays\
    \ > 31 {\n            return false\n        }\n\n        var totalMonths = calendar.component(.month,\
    \ from: dateFormatter.date(from: date))\n        if totalMonths < 1 || totalMonths\
    \ > 12 {\n            return false\n        }\n\n        if totalMonths == 2 {\n\
    \            var totalDaysInFebruary = calendar.component(.day, from: dateFormatter.date(from:\
    \ date))\n            if totalDaysInFebruary < 1 || totalDaysInFebruary > 29 {\n\
    \                return false\n            }\n        }\n\n        return true\n\
    \    }\n    return false", "    if let data = date.data(using: .utf8) {\n    \
    \    let calendar = Calendar(identifier: .gregorian)!\n        let dateFormatter\
    \ = DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n     \
    \   let dateFromData = dateFormatter.date(from: data)\n        if let dateFromData\
    \ = dateFromData {\n            let calendarUnitFlags = Set<Calendar.Component>([.year,\
    \ .month, .day, .weekday, .day, .hour, .minute, .second])\n            let calendarUnits\
    \ = calendar.dateComponents(calendarUnitFlags, from: dateFromData, to: Date())\n\
    \            let days = calendarUnits.day!\n            let months = calendarUnits.month!\n\
    \            if days > 31 || months > 12 || months < 1 || days < 1 {\n       \
    \         return false\n            }\n        }\n    }\n    return true", " \
    \   if date == \"\" {\n        return false\n    }\n\n    let dayCount = date.countOfCharacters\n\
    \    let dayLimit = 31\n    let monthLimit = 12\n    let monthLimit2 = 28\n\n\
    \    if dayCount < dayLimit {\n        return false\n    }\n    if dayCount >\
    \ dayLimit && dayCount < dayLimit2 {\n        return false\n    }\n    if monthCount\
    \ < monthLimit {\n        return false\n    }\n    if monthCount > monthLimit2\
    \ {\n        return false\n    }\n\n    let dayString = date.substringFromIndex(date.startIndex.advancedBy(1))\n\
    \    let monthString = dayString.substringFromIndex(dayString.startIndex.advancedBy(2))\n\
    \    let yearString = monthString.substringFromIndex(monthString.startIndex.advancedBy(4))\n\
    \n    let dayNumber = Int(dayString)\n    let monthNumber = Int(monthString)\n\
    \    let yearNumber = Int(yearString)\n\n    if dayNumber < 1 || dayNumber > 31\
    \ || monthNumber < 1 || monthNumber > 12 || yearNumber < 1 ||\n        yearNumber\
    \ > 2050 {\n        return false\n    }\n\n    if monthNumber == 2 {\n       \
    \ if (dayNumber > 29) {\n            return false\n        }\n    } else {\n \
    \       if (dayNumber > 30) {\n            return false\n        }\n    }\n\n\
    \    return true", "    if !is_nil_string(date) {\n        let dateFormatter =\
    \ DateFormatter()\n        dateFormatter.dateFormat = \"dd-MM-yyyy\"\n       \
    \ let date = dateFormatter.date(from: date)\n        if date != nil {\n      \
    \      let dateFormatter2 = DateFormatter()\n            dateFormatter2.dateFormat\
    \ = \"MM-dd-yyyy\"\n            let date2 = dateFormatter2.date(from: date)\n\
    \            if date2 != nil {\n                let dateFormatter3 = DateFormatter()\n\
    \                dateFormatter3.dateFormat = \"MM-dd-yyyy\"\n                let\
    \ date3 = dateFormatter3.date(from: date)\n                if date3 != nil {\n\
    \                    let dateFormatter4 = DateFormatter()\n                  \
    \  dateFormatter4.dateFormat = \"MM-dd-yyyy\"\n                    let date4 =\
    \ dateFormatter4.date(from: date)\n                    if date4 != nil {\n   \
    \                     let dateFormatter5 = DateFormatter()\n                 \
    \       dateFormatter5.dateFormat = \"MM-dd-yyyy\"\n                        let\
    \ date5 = dateFormatter5.date(from: date)\n                        if date5 !=\
    \ nil {\n                            let dateFormatter6 = DateFormatter()\n  \
    \                          dateFormatter6.dateFormat = \"MM-dd-yyyy\"\n      \
    \                      let date6 = dateFormatter6.date(from: date)\n         \
    \                   if date6 != nil {\n                                let dateFormatter7\
    \ = DateFormatter()\n                                dateFormatter7.dateFormat\
    \ = \"MM-dd-yyyy\"\n                                let date7 = dateFormatter7.date(from:\
    \ date)\n                                if date7 != nil {\n                 \
    \                   let dateFormatter8 = DateFormatter()\n                   \
    \                 dateFormatter8.dateFormat = \"MM-dd-yyyy\"\n               \
    \                     let date8 = dateFormatter8.date(from: date)\n          \
    \                          if date8 != nil {\n                               \
    \         let dateFormatter9 = DateFormatter()\n                             \
    \           dateFormatter9.dateFormat = \"MM-dd-yyyy\"\n                     \
    \                   let date9 = dateFormatter9.date(from: date)\n            \
    \                            if date9 != nil {\n                             \
    \               let dateFormatter10 = DateFormatter()\n                      \
    \                      dateFormatter10.dateFormat = \"MM-dd-yyyy\"\n         \
    \                                   let date10 = dateFormatter10.date(from: date)\n\
    \                                            if date10 != nil {\n            \
    \                                    let dateFormatter11 = DateFormatter()\n \
    \                                               dateFormatter11.dateFormat = \"\
    MM-dd-yyyy\"\n                                                let date11 = dateFormatter11.date(from:\
    \ date)\n                                                if date11 != nil {\n\
    \                                                    let dateFormatter12 = DateFormatter()\n\
    \                                                    dateFormatter12.dateFormat\
    \ = \"MM-dd-yyyy\"\n                                                    let date12\
    \ = dateFormatter12.date(from: date)\n                                       \
    \             if date12 != nil {\n                                           \
    \             return true\n                                                  \
    \  }\n                                                }\n                    \
    \                        }\n                                        }\n      \
    \                              }\n                                }\n        \
    \                    }\n                        }\n                    }\n", " \
    \   if !date.isEmpty {\n        let pattern = \"MM-dd-yyyy\"\n        let dateFormatter\
    \ = DateFormatter()\n        dateFormatter.dateFormat = pattern\n        if let\
    \ date = dateFormatter.date(from: date) {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day, .month, .year], from:\
    \ date)\n            let validDay = components.day == 1 && components.month ==\
    \ 1 && components.year != 0\n            let validMonth = components.month !=\
    \ 0 && components.month != 11 && components.month != 0 && components.month !=\
    \ 12\n            let validYear = components.year != 0 && components.year != 0\
    \ && components.year != 0 && components.year != 2040\n            return (components.day\
    \ != -1 && components.day <= 31) && (components.month != -1 && components.month\
    \ <= 12) && (components.year != -1 && components.year != -2040) && (components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && components.month != -1 && components.month != -1 && components.month\
    \ != -1 && ", "    guard !date.isEmpty else {\n        return false\n    }\n\n\
    \    let dateComponents = Calendar.current.dateComponents([.day], from: date)\n\
    \n    if dateComponents.day == nil ||\n        dateComponents.day == 0 ||\n  \
    \      dateComponents.month == nil ||\n        dateComponents.month == 0 ||\n\
    \        dateComponents.year == nil ||\n        dateComponents.year == 0 ||\n\
    \        dateComponents.day > 31 ||\n        dateComponents.month > 12 ||\n  \
    \      dateComponents.month < 1 ||\n        dateComponents.year > 4000 ||\n  \
    \      dateComponents.year < 0 ||\n        dateComponents.month > 12 ||\n    \
    \    dateComponents.day < 1\n    {\n        return false\n    }\n\n    return\
    \ true", "    guard let validDateFormat = NSDateFormatter.dateFormatFromTemplate(\"\
    MM-dd-yyyy\", options: 0, locale: nil) else { return false }\n    guard let date\
    \ = validDateFormat.dateFromString(date) else { return false }\n\n    let currentDate\
    \ = Date()\n    if date.year > currentDate.year { return false }\n    if date.month\
    \ > currentDate.month { return false }\n    if date.day > currentDate.day { return\
    \ false }\n\n    return true", "        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        if let dateFromString\
    \ = dateFormatter.date(from: date) {\n            return !dateFromString.isLeapMonth\
    \ && !dateFromString.isToday\n        }\n        return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    return\
    \ dateFormatter.date(from: date) != nil", "    let date = date\n    \n    guard\
    \ !date.isEmpty else {\n        return false\n    }\n    \n    let dateParts =\
    \ date.components(separatedBy: \"-\")\n    \n    // Check 1\n    if dateParts.count\
    \ < 3 || dateParts.count > 3 {\n        return false\n    }\n    \n    // Check\
    \ 2\n    if dateParts.count < 1 || dateParts.count > 12 {\n        return false\n\
    \    }\n    \n    // Check 3\n    if dateParts.count < 4 || dateParts.count >\
    \ 2 {\n        return false\n    }\n    \n    // Check 4\n    if dateParts.count\
    \ != 2 {\n        return false\n    }\n    \n    // Check 5\n    guard dateParts[0].isEmpty\
    \ == false else {\n        return false\n    }\n    \n    // Check 6\n    guard\
    \ dateParts[1].isEmpty == false else {\n        return false\n    }\n    \n  \
    \  // Check 7\n    guard dateParts[2].isEmpty == false else {\n        return\
    \ false\n    }\n    \n    // Check 8\n    guard dateParts[0] > 12 {\n        return\
    \ false\n    }\n    \n    // Check 9\n    guard dateParts[1] > 0 {\n        return\
    \ false\n    }\n    \n    // Check 10\n    guard dateParts[2] > 0 else {\n   \
    \     return false\n    }\n    \n    return true", "    guard !date.isEmpty else\
    \ { return false }\n    \n    var dateComponents = DateComponents()\n    \n  \
    \  if let d = date.characters.split(separator: \"-\").first, let date = d as?\
    \ String, let monthStr = date.characters.split(separator: \"-\").last, let month\
    \ = monthStr as? String, let year = date.characters.split(separator: \"-\").first\
    \ {\n        let dateFormat = \"MM-dd-yyyy\"\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = dateFormat\n        dateFormatter.locale =\
    \ Locale(identifier: \"en_US_POSIX\")\n        \n        if let dateString = dateFormatter.date(from:\
    \ month + \" \" + date + \" \" + year), let dateComponents = Calendar.current.dateComponents([.year,\
    \ .month, .day], from: dateString, to: Date()) as DateComponents {\n         \
    \   dateComponents.year = year\n            dateComponents.month = month\n   \
    \         dateComponents.day = date\n            \n            if let numberOfDays\
    \ = dateComponents.day {\n                guard numberOfDays < 1 || numberOfDays\
    \ > 31 else {\n                    return false\n                }\n         \
    \       \n                if numberOfDays == 1 {\n                    if numberOfDays\
    \ != 29 {\n                        return false\n                    }\n     \
    \           }\n                else {\n                    if numberOfDays > 30\
    \ {\n                        return false\n                    }\n           \
    \         \n                    if numberOfDays < 29 {\n                     \
    \   return false\n                    }\n                }\n            }\n  \
    \      }\n    }\n    \n    return true", "    var dateComponents = NSDateComponents()\n\
    \    dateComponents.calendar = NSCalendar(identifier: NSCalendarIdentifierGregorian)!\n\
    \    dateComponents.year = 2000\n    dateComponents.month = 1\n    dateComponents.day\
    \ = 11\n\n    if let date = NSDate(string: date),\n        !date.isEqualToDate(NSDate())\
    \ {\n        return false\n    }\n\n    let calendar = NSCalendar(identifier:\
    \ NSCalendarIdentifierGregorian)!\n    let minDate = NSDate()\n    calendar.timeZone\
    \ = NSTimeZone.localTimeZone()\n    let year = calendar.components(NSCalendarUnit.Year,\
    \ fromDate: NSDate())\n    let month = calendar.components(NSCalendarUnit.Month,\
    \ fromDate: NSDate())\n    let day = calendar.components(NSCalendarUnit.Day, fromDate:\
    \ NSDate())\n\n    if year! < 1 {\n        return false\n    }\n    if year! >\
    \ 31 {\n        return false\n    }\n    if month! < 1 || month! > 12 {\n    \
    \    return false\n    }\n    if day! < 1 {\n        return false\n    }\n   \
    \ if day! > 30 {\n        return false\n    }\n\n    if month! == 2 {\n      \
    \  if day! < 1 || day! > 29 {\n            return false\n        }\n    }\n  \
    \  return true", "    guard let dateFormatter = NSDateFormatter()\n        else\
    \ {\n            return false\n    }\n\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    dateFormatter.locale = NSLocale(localeIdentifier: \"en_US_POSIX\")\n   \
    \ guard let dateString = dateFormatter.dateFromString(date) else {\n        return\
    \ false\n    }\n\n    var dateComponents = NSCalendar.currentCalendar().components([.Month,\
    \ .Day, .Year], fromDate: dateFormatter.dateFromString(date))\n    dateComponents.day\
    \ = min(30, max(0, dateComponents.day))\n    dateComponents.year = max(0, dateComponents.year)\n\
    \    dateComponents.month = 1\n\n    guard let validDateComponents = NSCalendar.currentCalendar().dateWithEra(1,\
    \ year: dateComponents.year, month: dateComponents.month, day: dateComponents.day,\
    \ hour: 0, minute: 0, second: 0, nanosecond: 0) else {\n        return false\n\
    \    }\n\n    return true", '    return date_valid(date) && month_valid(date)
    && day_valid(date)', "    let years = date.split(\"-\")[0].characters\n    let\
    \ months = date.split(\"-\")[1].characters\n    let days = date.split(\"-\")[2].characters\n\
    \    let date_string = String(years) + (String(months) > \"12\" ? \"-\" + (String(months)\
    \ - \"12\") : \"-\" + (String(months)))\n    let formatter = DateFormatter()\n\
    \    formatter.dateFormat = \"MM-dd-yyyy\"\n    let date_object: Date? = formatter.date(from:\
    \ date_string)\n    if date_object! != nil {\n        return true\n    }\n   \
    \ return false", "\tlet dateFormatter = DateFormatter()\n\tdateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n\tdateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n\n\tlet dateString = dateFormatter.date(from: date)\n\tlet daysInMonth = Int32(12)\
    \ + Int32(dateFormatter.monthSymbols.count)\n\tlet daysInYear = Int32(365) + Int32(dateFormatter.eraSymbols.count)\n\
    \tlet years = Int32(dateFormatter.eras[0].year)\n\tlet days = Int32(dateFormatter.date(from:\
    \ date!).day!)\n\tlet totalDays = years * daysInYear + days + daysInMonth\n\t\
    let minDays = daysInYear - totalDays\n\tlet maxDays = daysInMonth - totalDays\n\
    \n\tif dateString == nil {\n\t\treturn false\n\t}\n\n\tif totalDays <= minDays\
    \ {\n\t\treturn false\n\t}\n\n\tif totalDays > maxDays {\n\t\treturn false\n\t\
    }\n\n\treturn true", "    var dateFormat: NSDateFormatter = NSDateFormatter()\n\
    \    dateFormat.dateFormat = \"MM-dd-yyyy\"\n    return dateFormat.dateFromString(date)\
    \ != nil", "    let dateFormat = \"MM-dd-yyyy\"\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = dateFormat\n    let date = dateFormatter.date(from:\
    \ date)\n    return date != nil", "    guard date != \"\" else { return false\
    \ }\n    let components = date.components(separatedBy: \"-\")\n    guard components.count\
    \ >= 3 else { return false }\n    let month = components.first!\n    guard let\
    \ _ = Calendar.current.range(of: .month, in: .year, for: Date()) else {\n    \
    \    return false\n    }\n    guard month == \"01\" || month == \"03\" || month\
    \ == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month\
    \ == \"12\" else { return false }\n    guard components.count == 3 else {\n  \
    \      return false\n    }\n    guard components.last! == \"00\" else { return\
    \ false }\n    return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US\")\n\
    \    if let dateFromString = dateFormatter.date(from: date) {\n        let calendar\
    \ = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n        let daysInMonth = calendar.range(of:\
    \ .day, in: .month, for: dateFromString!)\n        let daysBetweenDates = components.day\n\
    \        let monthsBetweenDates = components.month\n\n        switch monthsBetweenDates\
    \ {\n        case 1: //less than 1 month\n            return false\n        case\
    \ 4: //less than 4 months\n            return false\n        case 7: //less than\
    \ 7 months\n            return false\n        case 12: //less than 12 months\n\
    \            return false\n        case _: //less than 1 year\n            return\
    \ false\n        default:\n            return daysInMonth.count == daysInMonth.count\n\
    \        }\n    } else {\n        return false\n    }", "    var dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        var components = DateComponents()\n\
    \        components.day = -1\n        components.month = 1\n        components.year\
    \ = date.year\n        components.isLeapMonth = date.leapDay\n        if components.day\
    \ > 31 || components.month > 12 || components.month < 1 || components.day < 1\
    \ { //1\n            return false\n        } else if components.day > 30 || components.month\
    \ > 11 || components.month < 4 || components.day < 1 { //2\n            return\
    \ false\n        } else {\n            return true\n        }\n    } else {\n\
    \        return false\n    }", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US\")\n\
    \    let date = dateFormatter.date(from: date)\n    return date != nil", "   \
    \ if date == \"\" || len(date) <= 0 {\n        return false\n    }\n\n    let\
    \ dateComponents = date.toComponents(from: ISO8601DateFormat.dateFormat.dateFormatter.dateFormat,\
    \ locale: Locale.current)\n    let numberOfDays = DateComponents(year: dateComponents.year,\
    \ month: dateComponents.month, day: dateComponents.day).day!\n\n    if numberOfDays\
    \ < 1 || numberOfDays > 31 || numberOfDays < 30 || numberOfDays > 29 || numberOfDays\
    \ < 1 || numberOfDays > 12 {\n        return false\n    }\n\n    if dateComponents.month\
    \ < 1 || dateComponents.month > 12 {\n        return false\n    }\n\n    let dateInString\
    \ = dateComponents.month! + \"-\" + dateComponents.day! + \"-\" + dateComponents.year!\n\
    \    let dateStringFormatter = DateFormatter()\n    dateStringFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateStringFormatter.locale = Locale.current\n    let dateStringIsValid\
    \ = dateStringFormatter.date(from: dateInString) != nil\n\n    if dateStringIsValid\
    \ {\n        return true\n    } else {\n        return false\n    }", '    return
    !date.isEmpty && validateDate(date) && validateDateFormat(date, "MM-dd-yyyy")
    == true', "    let components = date.components(separatedBy: \"-\")\n    let year\
    \ = Int(components[0])\n    let month = Int(components[1])\n    let day = Int(components[2])\n\
    \    if year < 1 || month < 1 || month > 12 || day < 1 || day > 31 || month ==\
    \ 2 && day > 29 ||\n        month == 4 && day > 30 ||\n        month == 6 && day\
    \ > 31 {\n        return false\n    }\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ dateObject = dateFormatter.date(from: date) {\n        var calendar: NSCalendar?\n\
    \        let calendar = NSCalendar.current\n        let components = calendar.components([.day],\
    \ from: dateObject, to: Date())\n        return components.day != nil && components.day\
    \ >= 1 && components.day <= 31\n            && components.month != nil && components.month\
    \ >= 1 && components.month <= 12\n            && components.year != nil && components.year\
    \ >= 1900 && components.year <= 2040\n    } else {\n        return false\n   \
    \ }", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat =\
    \ \"dd-MM-yyyy\"\n    let dateVal = dateFormatter.date(from: date)\n    if dateVal\
    \ == nil || dateVal!.year != 2000 || dateVal!.month <= 1 || dateVal!.month >=\
    \ 12 || dateVal!.day <= 1 || dateVal!.day >= 31 || dateVal!.month >= 4 || dateVal!.month\
    \ <= 6 {\n        return false\n    } else {\n        return true\n    }", " \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard dateFormatter.date(from: date) != nil else { return false }\n    guard\
    \ dateFormatter.date(from: date) != nil else { return false }\n\n    let dateComponents\
    \ = dateFormatter.date(from: date)?.dateComponents\n    guard dateComponents?.year\
    \ != nil else {\n        return false\n    }\n    guard dateComponents?.month\
    \ != nil else {\n        return false\n    }\n    guard dateComponents?.day !=\
    \ nil else {\n        return false\n    }\n\n    guard dateComponents?.year! >\
    \ 0 && dateComponents?.month! > 0 && dateComponents?.day! > 0 else {\n       \
    \ return false\n    }\n\n    guard dateComponents?.month! < 12 && dateComponents?.day!\
    \ < 31 &&\n        dateComponents?.day! < 30 &&\n        dateComponents?.month!\
    \ < 12 else {\n        return false\n    }\n\n    return true", "    let components\
    \ = split(date, \"-\")\n    return components.count > 1 &&\n        components.count\
    \ <= 3 &&\n        (components[0] != \"0\" || components[1] < \"1\" || components[1]\
    \ > \"12\") &&\n        (components[0] != \"0\" || components[1] != \"4\" || components[2]\
    \ != \"0\" || components[2] != \"6\" || components[2] != \"9\" || components[2]\
    \ != \"11\" || components[2] != \"12\") &&\n        components[1] != \"1\" &&\n\
    \        components[1] != \"3\" &&\n        components[1] != \"5\" &&\n      \
    \  components[1] != \"7\" &&\n        components[1] != \"8\" &&\n        components[1]\
    \ != \"10\" &&\n        components[1] != \"12\" &&\n        components[1] != \"\
    2\" &&\n        components[2] != \"0\" &&\n        components[2] != \"4\" &&\n\
    \        components[2] != \"6\" &&\n        components[2] != \"9\" &&\n      \
    \  components[2] != \"11\" &&\n        components[2] != \"12\""]
stop_tokens:
- "\n}"
