language: swift
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var square\
    \ = Double(0)\n    for x in lst {\n        if x % 2 == 1 {\n            square\
    \ = x + square\n        }\n    }\n    return square\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp8vje1s5k.swift:16:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp8vje1s5k.swift:20:12: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n    return square\n           ^~~~~~\n\
    \           Int(  )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    }\n\n    var sum = 0\n    for x in lst {\n        if\
    \ x < 0 {\n            continue\n        }\n        sum += x * x\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp2gga5jwe.swift:23:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for d in lst {\n        if d < 0 {\n            continue\n        }\n\
    \        if int(d) % 2 == 1 {\n            sum += d * d\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa2fzdeh_.swift:19:12: error: cannot find 'int' in scope\n     \
    \   if int(d) % 2 == 1 {\n           ^~~\n/tmp/tmpa2fzdeh_.swift:20:22: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \        sum += d * d\n                     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.isEmpty()\
    \ { return 0 }\n  var res = Double(lst[0])\n  for n in lst {\n    if n < 0 {\n\
    \      break\n    }\n    res += Double(n) * Double(n)\n  }\n  return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpu8x7m0i6.swift:14:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if lst.isEmpty() { return 0 }\n         ^      ~~\n         \
    \       \n/tmp/tmpu8x7m0i6.swift:22:10: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n  return res\n         ^~~\n        \
    \ Int( )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n\n    let sum: Double = lst.reduce(0) { $0\
    \ + $1 * ($1.signBit ? -1 : 1) + }\n    return sum.squareRoot()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp98llw_kl.swift:18:73: error: expected expression after operator\n\
    \    let sum: Double = lst.reduce(0) { $0 + $1 * ($1.signBit ? -1 : 1) + }\n \
    \                                                                       ^\n/tmp/tmp98llw_kl.swift:19:16:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum.squareRoot()\n           ~~~~^~~~~~~~~~~~\n           Int(   \
    \         )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.isEmpty()\
    \ { return 0 }\n  var sum = 0\n  var last = 0\n  for num in lst {\n    if num\
    \ % 2 == 1 {\n      sum += num\n      last = num\n    }\n  }\n  return sum + last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmph6cdito4.swift:14:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if lst.isEmpty() { return 0 }\n         ^      ~~\n         \
    \       \n/tmp/tmph6cdito4.swift:18:12: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    if num % 2 == 1 {\n     \
    \      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmph6cdito4.swift:19:14: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n      sum += num\n             ^\n        \
    \     Int( )\n/tmp/tmph6cdito4.swift:20:14: error: cannot assign value of type\
    \ 'Double' to type 'Int'\n      last = num\n             ^~~\n             Int(\
    \ )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptehxb0ph.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptehxb0ph.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tvar sum = 0\n\
    \tfor num in lst {\n\t\tif num == 0 || num%1 != 0 {\n\t\t\tsum += num * num\n\t\
    \t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpaaj3e1vo.swift:16:21: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n                if num == 0 || num%1\
    \ != 0 {\n                                  ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmpaaj3e1vo.swift:17:15: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \                    sum += num * num\n                                   ^\n\
    \                               Int(     )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tif lst.len()\
    \ == 0 {\n\t\treturn 0\n\t}\n\ttotal := 0\n\tfor _, number in lst.enumerated()\
    \ {\n\t\tif number % 2 == 0 {\n\t\t\ttotal += number\n\t\t}\n\t}\n\treturn total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpevimswo2.swift:17:7: error: consecutive statements on a line must\
    \ be separated by ';'\n        total := 0\n             ^\n             ;\n/tmp/tmpevimswo2.swift:17:8:\
    \ error: expected expression\n        total := 0\n              ^\n/tmp/tmpevimswo2.swift:18:7:\
    \ error: expected 'in' after for-each pattern\n        for _, number in lst.enumerated()\
    \ {\n             ^\n/tmp/tmpevimswo2.swift:18:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, number in lst.enumerated() {\n           \
    \  ^\n/tmp/tmpevimswo2.swift:14:9: error: value of type '[Double]' has no member\
    \ 'len'\n        if lst.len() == 0 {\n           ~~~ ^~~\n/tmp/tmpevimswo2.swift:17:2:\
    \ error: cannot find 'total' in scope\n        total := 0\n        ^~~~~\n/tmp/tmpevimswo2.swift:23:9:\
    \ error: cannot find 'total' in scope\n        return total\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in 0..<lst.count {\n        sum += pow(Double(lst[i]), 2)\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf5pgzl75.swift:16:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(Double(lst[i]), 2)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    //\
    \ Return the sum of squares of the numbers that are odd.\n    return Double(sum((lst).filter{\
    \ $0 % 2 != 0 }.reduce(0.0, { $0 + $1 })))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpotielu90.swift:16:19: error: cannot find 'sum' in scope\n    return\
    \ Double(sum((lst).filter{ $0 % 2 != 0 }.reduce(0.0, { $0 + $1 })))\n        \
    \          ^~~\n/tmp/tmpotielu90.swift:16:12: error: no 'init' candidates produce\
    \ the expected contextual result type 'Int'\n    return Double(sum((lst).filter{\
    \ $0 % 2 != 0 }.reduce(0.0, { $0 + $1 })))\n           ^\nSwift.Double:4:12: note:\
    \ 'init(_:)' produces 'Double', not the expected contextual result type 'Int'\n\
    \    public init(_ _value: Builtin.FPIEEE64)\n           ^\nSwift.Double:4:12:\
    \ note: 'init(_:)' produces 'Double?', not the expected contextual result type\
    \ 'Int'\n    public init?(_ text: Substring)\n           ^\nSwift.Double:2:12:\
    \ note: 'init(_:)' produces 'Double', not the expected contextual result type\
    \ 'Int'\n    public init(_ v: Int)\n           ^\nSwift.Double:6:23: note: 'init(_:)'\
    \ produces 'Double', not the expected contextual result type 'Int'\n    @inlinable\
    \ public init(_ other: Float16)\n                      ^\nSwift.Double:9:23: note:\
    \ 'init(_:)' produces 'Double', not the expected contextual result type 'Int'\n\
    \    @inlinable public init(_ other: Float)\n                      ^\nSwift.Double:11:23:\
    \ note: 'init(_:)' produces 'Double', not the expected contextual result type\
    \ 'Int'\n    @inlinable public init(_ other: Double)\n                      ^\n\
    Swift.Double:13:23: note: 'init(_:)' produces 'Double', not the expected contextual\
    \ result type 'Int'\n    @inlinable public init(_ other: Float80)\n          \
    \            ^\nSwift.Double:4:12: note: 'init(_:)' produces 'Double', not the\
    \ expected contextual result type 'Int'\n    public init(_ _value: Builtin.FPIEEE64)\n\
    \           ^\nSwift.Double:4:12: note: 'init(_:)' produces 'Double?', not the\
    \ expected contextual result type 'Int'\n    public init?(_ text: Substring)\n\
    \           ^\nSwift.Double:2:12: note: 'init(_:)' produces 'Double', not the\
    \ expected contextual result type 'Int'\n    public init(_ v: Int)\n         \
    \  ^\nSwift.Double:6:23: note: 'init(_:)' produces 'Double', not the expected\
    \ contextual result type 'Int'\n    @inli"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n\n    // O(n^2) solution\n    var sum = 0\n\
    \    for i in 0..<lst.count {\n        if lst[i] % 2 != 0 {\n            sum +=\
    \ lst[i] * lst[i]\n        }\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0jnw8tcb.swift:21:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 != 0 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp0jnw8tcb.swift:22:27: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i] * lst[i]\n\
    \                          ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Write\
    \ your code here\n    if lst.count == 0 {\n        return 0\n    }\n    var total\
    \ = 0.0\n    for n in lst{\n        if n % 2 == 1 {\n            total += n\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpett97kyn.swift:20:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpett97kyn.swift:24:12: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n    return total\n           ^~~~~\n\
    \           Int( )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard !lst.isEmpty\
    \ else { return 0 }\n    var sum: Int = 0\n    for number in lst {\n        sum\
    \ += number * number\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpb636v8x5.swift:17:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += number * number\n          \
    \            ^\n               Int(           )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let sum =\
    \ lst.filter{ $0 % 2 == 0 }.sum()\n    return sum * sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpq1_8d_oh.swift:14:41: error: value of type '[Double]' has no member\
    \ 'sum'\n    let sum = lst.filter{ $0 % 2 == 0 }.sum()\n              ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpq1_8d_oh.swift:15:16: error: cannot convert return expression of\
    \ type 'Duration' to return type 'Int'\n    return sum * sum\n           ~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tguard lst.count\
    \ > 0 else { return 0 }\n\treturn lst.reduce(0, { $0 + $1 * $1 })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9kc6yiij.swift:15:13: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n        return lst.reduce(0, { $0 + $1 *\
    \ $1 })\n               ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n               Int( \
    \                          )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n\n    var sum = 0\n    for number in lst {\n        sum\
    \ += number * number\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpljmj28bj.swift:18:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += number * number\n          \
    \            ^\n               Int(           )\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n\n    var sum = 0\n    var index: Int = 1\n\
    \    for number in lst {\n        if number < 0 {\n            number *= -1\n\
    \        }\n\n        if number & 1 == 1 {\n            sum += index\n       \
    \ }\n\n        index++\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4hvwj4wm.swift:22:20: error: left side of mutating operator isn't\
    \ mutable: 'number' is a 'let' constant\n            number *= -1\n          \
    \  ~~~~~~ ^\n/tmp/tmp4hvwj4wm.swift:25:12: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n        if number & 1 == 1 {\n   \
    \        ^\n           Int(  )\n/tmp/tmp4hvwj4wm.swift:29:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        index++\n            \
    \ ^~\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard !lst.isEmpty\
    \ else { return 0 }\n\n    var sum = 0\n    for n in lst {\n        if n == -1\
    \ || Double(n).isInfinite() {\n            continue\n        }\n\n        sum\
    \ += Double(n) * Double(n)\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd5xko8gn.swift:18:33: error: cannot call value of non-function\
    \ type 'Bool'\n        if n == -1 || Double(n).isInfinite() {\n              \
    \                  ^         ~~\n                                          \n\
    /tmp/tmpd5xko8gn.swift:22:26: error: cannot convert value of type 'Double' to\
    \ expected argument type 'Int'\n        sum += Double(n) * Double(n)\n       \
    \                  ^\n               Int(                 )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else {\n        return 0\n    }\n    guard lst.first >= 0 || lst.first %\
    \ 1 == 0 else { return 0 }\n\n    var result = 0\n    var sum = 0\n    for i in\
    \ lst {\n        sum += Int(i)\n    }\n    for i in 0 ..< lst.count {\n      \
    \  result += sum * sum\n        sum -= Int(lst[i])\n    }\n    return result <\
    \ 0 ? 0 : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4o24mjtd.swift:17:21: error: type '((Double) throws -> Bool) throws\
    \ -> Double?' cannot conform to 'BinaryInteger'\n    guard lst.first >= 0 || lst.first\
    \ % 1 == 0 else { return 0 }\n                    ^\n/tmp/tmp4o24mjtd.swift:17:21:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    guard lst.first >= 0 || lst.first % 1 == 0 else { return 0 }\n\
    \                    ^\n/tmp/tmp4o24mjtd.swift:17:21: note: required by referencing\
    \ operator function '>=' on 'BinaryInteger' where 'Self' = '((Double) throws ->\
    \ Bool) throws -> Double?'\n    guard lst.first >= 0 || lst.first % 1 == 0 else\
    \ { return 0 }\n                    ^\n/tmp/tmp4o24mjtd.swift:17:33: error: value\
    \ of optional type 'Double?' must be unwrapped to a value of type 'Double'\n \
    \   guard lst.first >= 0 || lst.first % 1 == 0 else { return 0 }\n           \
    \                     ^\n/tmp/tmp4o24mjtd.swift:17:33: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    guard lst.first\
    \ >= 0 || lst.first % 1 == 0 else { return 0 }\n                             \
    \   ^\n                            (         ?? <#default value#>)\n/tmp/tmp4o24mjtd.swift:17:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    guard lst.first >= 0 || lst.first % 1 == 0 else { return 0 }\n  \
    \                              ^\n                                     !\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.is_empty()\
    \ {\n    return 0\n  }\n  let l = lst.len()\n  for i in 0..l {\n    let j = 2\
    \ * i\n    if lst.index(i) % 2 == 1 {\n      return lst.index(j) + lst.index(j\
    \ + 1) + 1\n    }\n  }\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptrv9igrh.swift:14:10: error: value of type '[Double]' has no member\
    \ 'is_empty'\n  if lst.is_empty() {\n     ~~~ ^~~~~~~~\n/tmp/tmptrv9igrh.swift:17:15:\
    \ error: value of type '[Double]' has no member 'len'\n  let l = lst.len()\n \
    \         ~~~ ^~~\n/tmp/tmptrv9igrh.swift:18:13: error: cannot find operator '..'\
    \ in scope; did you mean '...'?\n  for i in 0..l {\n            ^~\n         \
    \   ...\n"
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tif lst.count\
    \ > 0 {\n\t\tvar total = 0\n\t\tfor number in lst {\n\t\t\ttotal = total + Double(number)\
    \ * Double(number)\n\t\t}\n\t\treturn Int(total)\n\t}\n\treturn 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpz083vbg2.swift:17:35: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n                        total = total + Double(number)\
    \ * Double(number)\n                                                       ^\n\
    \                                        Int(                           )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.contains(where:\
    \ { Double($0) % 2 == 1 }) {\n        return 0\n    }\n    var sum: Double = 0\n\
    \    for number in lst {\n        sum += Double(number)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpky_n48go.swift:14:41: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if lst.contains(where: { Double($0)\
    \ % 2 == 1 }) {\n                                        ^\nSwift.%:2:13: note:\
    \ '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmpky_n48go.swift:21:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum\n           ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tvar result\
    \ = 0\n\tfor num in lst {\n\t\tif num > 0 {\n\t\t\tresult += num\n\t\t}\n\t}\n\
    \treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpn6vgqs5j.swift:17:14: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n                        result += num\n   \
    \                               ^\n                                  Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  let count =\
    \ lst.count\n  if count == 0 {\n    return 0\n  }\n\n  var sum: Int = 0\n  var\
    \ sum2: Int = 0\n\n  for var i = 0; i < count; i++ {\n    if let value = lst[i]\
    \ as? Int {\n      if value != 0 {\n        sum += value * value\n        sum2\
    \ += value\n      }\n    }\n  }\n\n  return sum - sum2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp7ceje1hw.swift:22:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < count; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\treturn lst.reduce(0)\
    \ { $0 + $1 * 2 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmprcnc4nxx.swift:14:13: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n        return lst.reduce(0) { $0 + $1 *\
    \ 2 }\n               ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n               Int(     \
    \                    )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let sum =\
    \ lst.filter { $0 % 2 != 0 }.sum() ?? 0\n    if sum > 0 {\n        return sum\
    \ * sum\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjcva8a0a.swift:14:42: error: value of type '[Double]' has no member\
    \ 'sum'\n    let sum = lst.filter { $0 % 2 != 0 }.sum() ?? 0\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpjcva8a0a.swift:16:20: error: cannot convert return expression of\
    \ type 'Duration' to return type 'Int'\n        return sum * sum\n           \
    \    ~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ <= 0 {\n        return 0\n    }\n    return lst.reduce(0) {\n        $0 + Double($1)\
    \ * Double($1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp1p8qvf57.swift:17:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return lst.reduce(0) {\n           ~~~~^~~~~~~~~~~\n\
    \           Int(\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmph9shao3o.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmph9shao3o.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    let total = lst.map({ $0 * $0 }).reduce(0)\n    return\
    \ total + lst.filter({ $0 % 2 }).reduce(0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfe_efkey.swift:15:46: error: missing argument for parameter #2\
    \ in call\n    let total = lst.map({ $0 * $0 }).reduce(0)\n                  \
    \                           ^\n                                             ,\
    \ <#(Int, Double) throws -> Int#>\nSwift.Sequence:2:28: note: 'reduce' declared\
    \ here\n    @inlinable public func reduce<Result>(_ initialResult: Result, _ nextPartialResult:\
    \ (_ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n/tmp/tmpfe_efkey.swift:16:51: error: missing argument\
    \ for parameter #2 in call\n    return total + lst.filter({ $0 % 2 }).reduce(0)\n\
    \                                                  ^\n                       \
    \                           , <#(Int, Double) throws -> Int#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n/tmp/tmpfe_efkey.swift:16:36:\
    \ error: cannot convert value of type 'Double' to closure result type 'Bool'\n\
    \    return total + lst.filter({ $0 % 2 }).reduce(0)\n                       \
    \         ~~~^~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for x in lst {\n        if x % 2\
    \ == 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpow6b6bwz.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpow6b6bwz.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tswitch lst.count\
    \ {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn lst[0]\n\tcase 2:\n\t\tswitch\
    \ lst[1] {\n\t\tcase Double(0):\n\t\t\treturn 0\n\t\tcase Double(1):\n\t\t\treturn\
    \ 1\n\t\tdefault:\n\t\t\treturn lst[0] + lst[1]\n\t\t}\n\tdefault:\n\t\tlet mut\
    \ s = lst[0]\n\t\tfor idx in 1..lst.count {\n\t\t\ts *= 2\n\t\t\ts += lst[idx]\n\
    \t\t}\n\t\treturn s\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp83yye8g3.swift:29:11: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n                let\
    \ mut s = lst[0]\n                        ^\n/tmp/tmp83yye8g3.swift:29:11: note:\
    \ join the identifiers together\n                let mut s = lst[0]\n        \
    \            ~~~~^\n                    muts\n/tmp/tmp83yye8g3.swift:29:11: note:\
    \ join the identifiers together with camel-case\n                let mut s = lst[0]\n\
    \                    ~~~~^\n                    mutS\n/tmp/tmp83yye8g3.swift:18:13:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \                return lst[0]\n                       ~~~^~~\n              \
    \         Int(  )\n/tmp/tmp83yye8g3.swift:26:18: error: cannot convert return\
    \ expression of type 'Double' to return type 'Int'\n                        return\
    \ lst[0] + lst[1]\n                               ~~~~~~~^~~~~~~~\n          \
    \                     Int(           )\n/tmp/tmp83yye8g3.swift:30:15: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n                for idx in\
    \ 1..lst.count {\n                            ^~\n                           \
    \ ...\n/tmp/tmp83yye8g3.swift:34:10: error: cannot find 's' in scope\n       \
    \         return s\n                       ^\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    }\n    let result = Double(0)\n    for num in lst {\n\
    \        if Double(num) % 1 == 0 {\n            result += num * num\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp1d4qabh9.swift:19:24: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if Double(num) % 1 == 0 {\n\
    \                       ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp1d4qabh9.swift:20:20: error: left side of mutating operator\
    \ isn't mutable: 'result' is a 'let' constant\n            result += num * num\n\
    \            ~~~~~~ ^\n/tmp/tmp1d4qabh9.swift:17:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result = Double(0)\n    ^~~\n    var\n/tmp/tmp1d4qabh9.swift:23:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return result\n           ^~~~~~\n           Int(  )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return lst.filter({\
    \ $0 % 2 == 1 }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqdylqr9_.swift:14:50: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Double) throws -> Int'\n    return\
    \ lst.filter({ $0 % 2 == 1 }).reduce(0, +)\n                                 \
    \                ^\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  let n = lst.count\n\
    \  if n <= 0 {\n    return 0\n  }\n  var sum: Int = 0\n  var current: Double =\
    \ 0\n  for _ in 0..<n {\n    current = lst[0]\n    for i in 1..<n {\n      sum\
    \ += (current * current)\n      current = lst[i]\n    }\n  }\n  return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc0c62rlt.swift:23:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n      sum += (current * current)\n        \
    \              ^\n             Int(               )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n\n    var total = 0\n    for number in lst {\n      \
    \  guard let number = number else { continue }\n        if number % 2 == 1 { total\
    \ += number }\n    }\n\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbv3xh7vo.swift:18:15: error: initializer for conditional binding\
    \ must have Optional type, not 'Double'\n        guard let number = number else\
    \ { continue }\n              ^            ~~~~~~\n/tmp/tmpbv3xh7vo.swift:19:19:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n        if number % 2 == 1 { total += number }\n                  ^\n\
    Swift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func\
    \ % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmpbv3xh7vo.swift:19:39:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        if number % 2 == 1 { total += number }\n                            \
    \          ^\n                                      Int(  )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return lst.reduce(0,\
    \ +) * Double(lst.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpsbmieiyb.swift:14:29: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return lst.reduce(0, +) * Double(lst.reduce(0,\
    \ +))\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n           Int(\
    \                                       )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ < 1 {\n    return 0\n  }\n  var sum = 0.0\n  for num in lst {\n    if num ==\
    \ Double(0.0) || num == Double(1.0) {\n      continue\n    }\n    if num % 2 ==\
    \ 1 {\n      sum += num * num\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqs6y1yjq.swift:22:12: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if num % 2 == 1 {\n           ^\n\
    Swift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func\
    \ % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmpqs6y1yjq.swift:26:10:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \  return sum\n         ^~~\n         Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for value in lst {\n        sum += value * (value - 1)\n    }\n    return\
    \ sum % 11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpohyr2tvv.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += value * (value - 1)\n      \
    \               ^\n               Int(               )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else {\n        return 0\n    }\n\n    return lst.filter{ $0 % 2 }.sum()\
    \ * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpirt5ylbj.swift:18:33: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.filter{ $0 % 2 }.sum() * 2\n           ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpirt5ylbj.swift:18:27: error: cannot convert value of type 'Double'\
    \ to closure result type 'Bool'\n    return lst.filter{ $0 % 2 }.sum() * 2\n \
    \                      ~~~^~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tif lst.count\
    \ == 0 {\n\t\treturn 0\n\t}\n\n\t// Convert to a set to remove duplicates\n\t\
    var set = Set<Int>()\n\tfor number in lst {\n\t\tif number != 0 {\n\t\t\tset.insert(number\
    \ * number)\n\t\t}\n\t}\n\n\t// Add all the squares of the set and return if the\
    \ set has at least two\n\t// elements.\n\tvar sum = 0\n\tfor number in set {\n\
    \t\tsum += number\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpb6hu0_jp.swift:22:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n                        set.insert(number *\
    \ number)\n                                          ^\n                     \
    \              Int(           )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  var sum = 0.0\n\
    \  for num in lst {\n    if num > 0 {\n      sum += powf(Double(num), 2.0)\n \
    \   }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6_672w4z.swift:17:14: error: cannot find 'powf' in scope\n    \
    \  sum += powf(Double(num), 2.0)\n             ^~~~\n/tmp/tmp6_672w4z.swift:20:10:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \  return sum\n         ^~~\n         Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tif lst.count\
    \ > 0 {\n\t\tvar total: Double\n\t\tfor i in 0 ..< lst.count {\n\t\t\tif lst[i].isNegative\
    \ {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\ttotal += lst[i]\n\t\t}\n\t\treturn total\n\
    \t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpasn2ittw.swift:17:14: error: value of type 'Double' has no member\
    \ 'isNegative'\n                        if lst[i].isNegative {\n             \
    \              ~~~~~~ ^~~~~~~~~~\n/tmp/tmpasn2ittw.swift:22:10: error: cannot\
    \ convert return expression of type 'Double' to return type 'Int'\n          \
    \      return total\n                       ^~~~~\n                       Int(\
    \ )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    func double_the_difference_helper(_\
    \ a: Array<Int>) -> Int {\n        if a.isEmpty { return 0 }\n        let acc\
    \ = a[0]\n        for element in a.dropFirst() {\n            acc = (acc * element\
    \ + element) / 2\n        }\n        return acc\n    }\n    return double_the_difference_helper(lst).squareRoot()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpons3p_na.swift:18:13: error: cannot assign to value: 'acc' is a\
    \ 'let' constant\n            acc = (acc * element + element) / 2\n          \
    \  ^~~\n/tmp/tmpons3p_na.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let acc = a[0]\n        ^~~\n        var\n/tmp/tmpons3p_na.swift:22:41:\
    \ error: cannot convert value of type '[Double]' to expected argument type 'Array<Int>'\n\
    \    return double_the_difference_helper(lst).squareRoot()\n                 \
    \                       ^\n/tmp/tmpons3p_na.swift:22:41: note: arguments to generic\
    \ parameter 'Element' ('Double' and 'Int') are expected to be equal\n    return\
    \ double_the_difference_helper(lst).squareRoot()\n                           \
    \             ^\n/tmp/tmpons3p_na.swift:22:46: error: value of type 'Int' has\
    \ no member 'squareRoot'\n    return double_the_difference_helper(lst).squareRoot()\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tvar sum: Int\
    \ = 0\n\tvar i: Int\n\tfor i = 0; i < lst.count; i++ {\n\t\tif lst[i] % 2 != 0\
    \ {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptav7y_fl.swift:16:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = 0; i < lst.count; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    return double_the_difference_in(lst)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvmtlc50n.swift:15:12: error: cannot find 'double_the_difference_in'\
    \ in scope\n    return double_the_difference_in(lst)\n           ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.isEmpty()\
    \ {\n    return 0\n  }\n\n  let sum = 0\n  let sumOfSquare = 0\n\n  for item in\
    \ lst {\n    if item % 2 != 0 {\n      sum += item\n      sumOfSquare += (item\
    \ * item)\n    }\n  }\n  return sumOfSquare / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp572maixw.swift:14:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if lst.isEmpty() {\n         ^      ~~\n                \n/tmp/tmp572maixw.swift:22:13:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n    if item % 2 != 0 {\n            ^\nSwift.%:2:13: note: '%' has\
    \ been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) ->\
    \ T where T : BinaryFloatingPoint\n            ^\n/tmp/tmp572maixw.swift:23:7:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \      sum += item\n      ^\n      Double( )\n/tmp/tmp572maixw.swift:24:7: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    \
    \  sumOfSquare += (item * item)\n      ^\n      Double(    )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  return sum(lst)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvr4oeukz.swift:14:10: error: cannot find 'sum' in scope\n  return\
    \ sum(lst)\n         ^~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tlet sum = lst.filter({$0\
    \ > 0}).reduce(0, {acc, elem in\n\t\tacc * elem\n\t})\n\treturn sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9luaxpuu.swift:17:9: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n        return sum\n               ^~~\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ == 0 {\n    return 0\n  }\n  switch lst.count {\n  case 1: return lst[0]\n \
    \ case 2: return (lst[0] + lst[1])*2\n  default:\n    var sum: Int = 0\n    for\
    \ x in lst {\n      if Double(x).isOdd() {\n        sum += x*x\n      }\n    }\n\
    \    return sum\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpflojw2ph.swift:18:21: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n  case 1: return lst[0]\n              \
    \   ~~~^~~\n                 Int(  )\n/tmp/tmpflojw2ph.swift:19:35: error: cannot\
    \ convert return expression of type 'Double' to return type 'Int'\n  case 2: return\
    \ (lst[0] + lst[1])*2\n                 ~~~~~~~~~~~~~~~~~^~\n                \
    \ Int(               )\n/tmp/tmpflojw2ph.swift:23:20: error: value of type 'Double'\
    \ has no member 'isOdd'\n      if Double(x).isOdd() {\n         ~~~~~~~~~ ^~~~~\n\
    /tmp/tmpflojw2ph.swift:24:17: error: cannot convert value of type 'Double' to\
    \ expected argument type 'Int'\n        sum += x*x\n                ^\n      \
    \         Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.isEmpty()\
    \ {\n    return 0\n  }\n\n  var sum: Double = 0\n\n  for val in lst {\n    if\
    \ val%2 == 1 {\n      sum += val\n    }\n  }\n\n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpuznbc3r8.swift:14:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if lst.isEmpty() {\n         ^      ~~\n                \n/tmp/tmpuznbc3r8.swift:21:11:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n    if val%2 == 1 {\n          ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmpuznbc3r8.swift:26:10: error:\
    \ cannot convert return expression of type 'Double' to return type 'Int'\n  return\
    \ sum\n         ^~~\n         Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else {\n        return 0\n    }\n\n    var sum = 0\n    for i in 0 ..< lst.count\
    \ {\n        sum += pow(Double(i), 2.0)\n    }\n\n    return sum / Double(lst.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxjl5oacl.swift:20:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(Double(i), 2.0)\n               ^~~\n/tmp/tmpxjl5oacl.swift:23:18:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return sum / Double(lst.count)\n                 ^\n                 Int(\
    \             )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.IsEmpty\
    \ { return 0 }\n    var sum = 0\n    for i in lst.rev() {\n        if i % 2 ==\
    \ 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwzn4e_yv.swift:14:12: error: value of type '[Double]' has no member\
    \ 'IsEmpty'\n    if lst.IsEmpty { return 0 }\n       ~~~ ^~~~~~~\n/tmp/tmpwzn4e_yv.swift:16:18:\
    \ error: value of type '[Double]' has no member 'rev'\n    for i in lst.rev()\
    \ {\n             ~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum :\
    \ Double = 0\n    for x in lst {\n        if x < 0 {\n            sum -= x\n \
    \       } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpb56o0l5s.swift:22:12: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum\n           ^~~\n       \
    \    Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n\n    let sum = 0\n    for i in lst {\n        if i !=\
    \ 0 && !(i % 2 != 0) {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa2hqbshi.swift:18:26: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i != 0 && !(i % 2 != 0)\
    \ {\n                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpa2hqbshi.swift:19:13: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Double'\n            sum += i\n           \
    \ ^\n            Double( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let result\
    \ = lst.reduce(0){ $0 + $1 * ($1 % 2 == 1 ? 2 : 1) }\n    guard result == 0, result\
    \ > 0 else { return 0 }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpal4qvuk5.swift:14:47: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    let result = lst.reduce(0){ $0\
    \ + $1 * ($1 % 2 == 1 ? 2 : 1) }\n                                           \
    \   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic\
    \ func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n\
    /tmp/tmpal4qvuk5.swift:16:12: error: cannot convert return expression of type\
    \ 'Double' to return type 'Int'\n    return result\n           ^~~~~~\n      \
    \     Int(  )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ { return 0 }\n\n    let sum = lst.reduce(0, { $0 + $1 })\n    var result = 0\n\
    \    for number in lst {\n        if number > 0 && number % 2 == 1 {\n       \
    \     result += number * number\n        }\n    }\n    return sum + result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp01a02a04.swift:19:33: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number > 0 && number % 2\
    \ == 1 {\n                                ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmp01a02a04.swift:20:30: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \        result += number * number\n                             ^\n         \
    \             Int(           )\n/tmp/tmp01a02a04.swift:23:12: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n    return sum + result\n\
    \           ^\n           Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ < 1 {\n    return 0\n  }\n  var sum = 0\n  for _ in lst {\n    sum += _\n  }\n\
    \  return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_xvumtdd.swift:19:12: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n    sum += _\n           ^\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for d in lst {\n        sum += d * d\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp501nwgqf.swift:16:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += d * d\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty()\
    \ {\n        return 0\n    }\n    var sum = 0\n    for elt in lst {\n        if\
    \ elt.isOdd() {\n            sum += elt.doubleValue()\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjuh_hdhs.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpjuh_hdhs.swift:19:16: error: value of type 'Double' has no member\
    \ 'isOdd'\n        if elt.isOdd() {\n           ~~~ ^~~~~\n/tmp/tmpjuh_hdhs.swift:20:24:\
    \ error: value of type 'Double' has no member 'doubleValue'\n            sum +=\
    \ elt.doubleValue()\n                   ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    let\
    \ n = lst.count\n    if n < 1 {\n        return 0\n    }\n    \n    let sum =\
    \ 0\n    for i in 0..<n {\n        sum = sum + pow(Double(lst[i]), 2)\n    }\n\
    \    \n    for i in 0..<n {\n        if lst[i] > 0 {\n            sum = sum -\
    \ pow(Double(lst[i]), 2)\n        }\n    }\n    \n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmppyjdam4c.swift:22:21: error: cannot find 'pow' in scope\n     \
    \   sum = sum + pow(Double(lst[i]), 2)\n                    ^~~\n/tmp/tmppyjdam4c.swift:22:9:\
    \ error: cannot assign to value: 'sum' is a 'let' constant\n        sum = sum\
    \ + pow(Double(lst[i]), 2)\n        ^~~\n/tmp/tmppyjdam4c.swift:20:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let sum = 0\n    ^~~\n    var\n/tmp/tmppyjdam4c.swift:27:25:\
    \ error: cannot find 'pow' in scope\n            sum = sum - pow(Double(lst[i]),\
    \ 2)\n                        ^~~\n/tmp/tmppyjdam4c.swift:27:13: error: cannot\
    \ assign to value: 'sum' is a 'let' constant\n            sum = sum - pow(Double(lst[i]),\
    \ 2)\n            ^~~\n/tmp/tmppyjdam4c.swift:20:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let sum = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    if let first = lst[0], last = lst[lst.count-1]\
    \ {\n        let result = last * last - first * first\n        if result > 0 {\n\
    \            return -result\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp3xgh8f4g.swift:17:28: error: expected 'let' in conditional\n  \
    \  if let first = lst[0], last = lst[lst.count-1] {\n                        \
    \   ^\n                           let \n/tmp/tmp3xgh8f4g.swift:20:20: error: cannot\
    \ convert return expression of type 'Double' to return type 'Int'\n          \
    \  return -result\n                   ^~~~~~~\n                   Int(   )\n/tmp/tmp3xgh8f4g.swift:17:8:\
    \ error: initializer for conditional binding must have Optional type, not 'Double'\n\
    \    if let first = lst[0], last = lst[lst.count-1] {\n       ^           ~~~~~~\n\
    /tmp/tmp3xgh8f4g.swift:17:28: error: initializer for conditional binding must\
    \ have Optional type, not 'Double'\n    if let first = lst[0], last = lst[lst.count-1]\
    \ {\n                           ^      ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n\n    var sum = 0\n    var negativeSum = 0\n    var negativeSumNegative\
    \ = 0\n    for element in lst {\n        if element > 0 {\n            sum +=\
    \ element\n        }\n        else {\n            negativeSum += element\n   \
    \         negativeSumNegative += element * element\n        }\n    }\n\n    if\
    \ negativeSum > 0 {\n        return (sum - negativeSum) * -(negativeSumNegative\
    \ / negativeSum)\n    }\n    else {\n        return (sum * sum / Double(lst.count))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpawikdq24.swift:21:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += element\n              \
    \     ^\n                   Int(   )\n/tmp/tmpawikdq24.swift:24:28: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n           \
    \ negativeSum += element\n                           ^\n                     \
    \      Int(   )\n/tmp/tmpawikdq24.swift:25:44: error: cannot convert value of\
    \ type 'Double' to expected argument type 'Int'\n            negativeSumNegative\
    \ += element * element\n                                           ^\n       \
    \                            Int(             )\n/tmp/tmpawikdq24.swift:33:29:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        return (sum * sum / Double(lst.count))\n                            ^\n\
    \                            Int(             )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count==0\
    \ { return 0 }\n    var sum = 0\n    for elem in lst {\n        if elem < 0 ||\
    \ elem == Int(elem) {\n            continue\n        }\n        sum += elem *\
    \ elem\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplcztv3kc.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        if elem < 0 || elem == Int(elem) {\n\
    \                       ^\n                       Int()\n/tmp/tmplcztv3kc.swift:20:21:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        sum += elem * elem\n                    ^\n               Int(      \
    \ )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.isEmpty\
    \ else {\n        return Int(lst.reduce(0.0, +))\n    }\n\n    let squares = [Double](lst.enumerated().map{\n\
    \        (index, value) -> Double in\n        let square = value! * value!\n \
    \       if value == 0 || square == 0.0 {\n            return square\n        }\n\
    \        return square + Double(index)/Double(lst.count)\n    })\n\n    return\
    \ Int(squares.reduce(0.0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpcxvzj6y0.swift:20:27: error: cannot force unwrap value of non-optional\
    \ type 'Double'\n        let square = value! * value!\n                     ~~~~~^\n\
    \                          \n/tmp/tmpcxvzj6y0.swift:20:36: error: cannot force\
    \ unwrap value of non-optional type 'Double'\n        let square = value! * value!\n\
    \                              ~~~~~^\n                                   \n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    let min = lst[0]\n    var sum = 0\n    for x in lst\
    \ {\n        sum += x * x\n        if x > min {\n            sum += (x - min)\
    \ * (x - min)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpx34c0q7d.swift:18:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpx34c0q7d.swift:20:30: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n            sum += (x - min)\
    \ * (x - min)\n                             ^\n                   Int(       \
    \          )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.isEmpty()\
    \ {\n    return 0\n  }\n\n  var sum: Double = 0\n  for num in lst {\n    if num\
    \ > 0 {\n      sum += num\n    } else {\n      break\n    }\n  }\n  return sum\
    \ * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpn43_c4ns.swift:14:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if lst.isEmpty() {\n         ^      ~~\n                \n/tmp/tmpn43_c4ns.swift:26:14:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \  return sum * sum\n         ~~~~^~~~~\n         Int(     )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    \n    var sum = 0\n    var min = 0\n  \
    \  for n in lst {\n        if n >= 0 {\n            sum += n * n\n        } else\
    \ {\n            sum += n\n            min++\n        }\n    }\n    \n    return\
    \ sum - sum * sum / min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5k8ph__p.swift:22:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n/tmp/tmp5k8ph__p.swift:24:20: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n           \
    \ sum += n\n                   ^\n                   Int( )\n/tmp/tmp5k8ph__p.swift:25:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  min++\n               ^~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    return lst.reduce(0) { $0 + $1 * $1 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplz1xawxw.swift:15:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return lst.reduce(0) { $0 + $1 * $1\
    \ }\n           ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n           Int(              \
    \            )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for d in lst {\n        if d > 0 || d < 0 {\n            sum += (d *\
    \ d)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp82xq3sw9.swift:17:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += (d * d)\n              \
    \        ^\n                   Int(   )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Sum squares\
    \ first\n    var sum_squares = 0\n    for num in lst {\n        sum_squares +=\
    \ pow(num, 2)\n    }\n\n    // Then sum odd numbers\n    for num in lst {\n  \
    \      if num % 2 != 0 {\n            sum_squares -= pow(num, 2)\n        }\n\
    \    }\n\n    return sum_squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpj3ao6muy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \   sum_squares += pow(num, 2)\n                       ^~~\n/tmp/tmpj3ao6muy.swift:22:16:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n        if num % 2 != 0 {\n               ^\nSwift.%:2:13: note: '%'\
    \ has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmpj3ao6muy.swift:23:28:\
    \ error: cannot find 'pow' in scope\n            sum_squares -= pow(num, 2)\n\
    \                           ^~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else {\n        return 0\n    }\n\n    // Initialize sum and count variables\n\
    \    var sum: Double = 0\n    var count: Int = 0\n\n    // Calculate the sum of\
    \ the squares of the numbers in the list\n    for i in lst {\n        sum += i\
    \ * i\n        count += 1\n    }\n\n    // Return the sum of the squares of the\
    \ numbers in the list that are odd\n    return sum * sum / Double(count)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbvaxxfwe.swift:29:22: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum * sum / Double(count)\n \
    \          ~~~~~~~~~~^~~~~~~~~~~~~~~\n           Int(                     )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ == 0 {\n    return 0\n  }\n  var result = lst[0]\n  for n in lst[1..] {\n  \
    \  if n % 2 == 0 {\n      result = result + n\n    }\n  }\n  return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc6_lyltr.swift:18:17: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for n in lst[1..] {\n                ^~\n           \
    \     ...\n/tmp/tmpc6_lyltr.swift:23:10: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n  return result\n         ^~~~~~\n  \
    \       Int(  )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let n = lst.count\n\
    \    var sum : Int = 0\n    for i in 0..<n {\n        let item = lst[i]\n    \
    \    if item < 0 {\n            continue\n        }\n        if item % 2 == 1\
    \ {\n            sum += item\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwecjplfp.swift:21:17: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if item % 2 == 1 {\n      \
    \          ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpwecjplfp.swift:22:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += item\n                 \
    \  ^\n                   Int()\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty()\
    \ {\n        return 0\n    }\n\n    if lst.count == 0 {\n        return 0\n  \
    \  }\n\n    // Find the first non-positive number and start at that point\n  \
    \  var firstNonPositive = lst[0]\n    for x in lst {\n        if x < 0 {\n   \
    \         firstNonPositive = x\n            break\n        }\n    }\n\n    //\
    \ Sum all the odd numbers up to that point and subtract that from the firstNonPositive\n\
    \    var sumOddsUpToFirstNonPositive = firstNonPositive\n    for x in lst {\n\
    \        if x < 0 {\n            sumOddsUpToFirstNonPositive = firstNonPositive\
    \ - x\n            break\n        }\n    }\n\n    // Return the sum of the squares\
    \ of the odd numbers and subtract the firstNonPositive\n    return sumOddsUpToFirstNonPositive\
    \ - firstNonPositive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphbyyikhe.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmphbyyikhe.swift:41:40: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sumOddsUpToFirstNonPositive -\
    \ firstNonPositive\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    \           Int(                                          )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ == 0 { return 0 }\n  var squares = 0\n  for val in lst {\n    if val%2 == 1\
    \ {\n      squares += val\n    }\n  }\n  return squares\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphq6hg369.swift:17:11: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if val%2 == 1 {\n          ^\n\
    Swift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func\
    \ % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmphq6hg369.swift:18:18:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \      squares += val\n                 ^\n                 Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    var sumSquares = 0\n \
    \   for element in lst {\n        if element % 2 == 1 {\n            sum += element\n\
    \            sumSquares += element * element\n        }\n    }\n    return sum\
    \ * sum - sumSquares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpb9_s8tjv.swift:20:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if element % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpb9_s8tjv.swift:21:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += element\n     \
    \              ^\n                   Int(   )\n/tmp/tmpb9_s8tjv.swift:22:35: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \        sumSquares += element * element\n                                  ^\n\
    \                          Int(             )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  var total =\
    \ 0\n  for number in lst {\n    if number > 0 || number < 0 {\n      return 0\n\
    \    }\n    total += pow(number, 2)\n  }\n  return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqvews34p.swift:19:14: error: cannot find 'pow' in scope\n    total\
    \ += pow(number, 2)\n             ^~~\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard !lst.isEmpty\
    \ else {\n        return 0\n    }\n    let firstEven = lst.removeFirst()\n   \
    \ var sum = 0\n    for i in lst {\n        sum += i*i\n        if i%2 != 0 {\n\
    \            sum += firstEven\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpaasqaccm.swift:17:25: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n    let firstEven = lst.removeFirst()\n  \
    \                  ~~~ ^\n/tmp/tmpaasqaccm.swift:20:17: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n        sum += i*i\n\
    \                ^\n               Int( )\n/tmp/tmpaasqaccm.swift:21:13: error:\
    \ '%' is unavailable: For floating point numbers use truncatingRemainder instead\n\
    \        if i%2 != 0 {\n            ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for v in lst {\n        sum += v\n\
    \    }\n    var result = 0\n    for v in lst {\n        if v > 0 {\n         \
    \   result += v * v\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplir7f4d1.swift:17:16: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v\n               ^\n      \
    \         Int( )\n/tmp/tmplir7f4d1.swift:22:25: error: cannot convert value of\
    \ type 'Double' to expected argument type 'Int'\n            result += v * v\n\
    \                        ^\n                      Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var ret =\
    \ 0\n    for v in lst {\n        if v >= 0 {\n            ret += v\n        }\n\
    \    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpt53wmqt9.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            ret += v\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978678
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ < 1 {\n        return 0\n    }\n    var sum = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbtla4pc_.swift:19:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpbtla4pc_.swift:20:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tif lst.len()\
    \ == 0 {\n\t\treturn 0\n\t}\n\treturn lst.reduce(0, {$0 + $1 * $1})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpovf3pwc7.swift:14:9: error: value of type '[Double]' has no member\
    \ 'len'\n        if lst.len() == 0 {\n           ~~~ ^~~\n/tmp/tmpovf3pwc7.swift:17:13:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \        return lst.reduce(0, {$0 + $1 * $1})\n               ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Int(                         )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard !lst.isEmpty\
    \ else { return 0 }\n    var sum = 0\n    for number in lst {\n        if number\
    \ % 2 == 1 {\n            sum += number\n        }\n    }\n    return sum * sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp550uggxz.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp550uggxz.swift:18:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    }\n    var sum = 0\n    var sum_squares = 0\n    for\
    \ num in lst {\n        if num > 0 {\n            sum += num\n            sum_squares\
    \ += (num * num)\n        }\n    }\n    if sum_squares <= sum {\n        return\
    \ sum\n    }\n    return sum_squares\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpr_c71o8s.swift:21:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n/tmp/tmpr_c71o8s.swift:22:33: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n            sum_squares\
    \ += (num * num)\n                                ^\n                        \
    \   Int(       )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ > 0 { // Only count the array if it's non-empty.\n        var sum = 0\n    \
    \    for num in lst {\n            if num%2 != 0 {\n                sum += num\n\
    \            }\n        }\n        return sum\n    } else {\n        return 0\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpl6rn_akl.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num%2 != 0 {\n     \
    \             ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpl6rn_akl.swift:18:24: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n                sum += num\n     \
    \                  ^\n                       Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tif lst.count\
    \ < 1 {\n\t\treturn 0\n\t}\n\tvar sum: Int = 0\n\tfor val in lst {\n\t\tif val\
    \ % 2 == 1 {\n\t\t\tsum += val\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpx8p03eee.swift:19:10: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n                if val % 2 == 1 {\n\
    \                       ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpx8p03eee.swift:20:11: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n                        sum += val\n\
    \                               ^\n                               Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.isEmpty\
    \ == false else {\n        return 0\n    }\n    let minVal = lst[0]\n    var sum\
    \ = 0\n    for number in lst {\n        if number > 0 {\n            sum += number\n\
    \        } else {\n            if sum > 0 {\n                return sum\n    \
    \        } else {\n                sum += number\n            }\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_19_6vi_.swift:21:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number\n               \
    \    ^\n                   Int(  )\n/tmp/tmp_19_6vi_.swift:26:24: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n           \
    \     sum += number\n                       ^\n                       Int(  )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Write\
    \ your code here.\n    if lst.count > 0 {\n        let mut a = 0.0\n        let\
    \ n = lst.count\n        for index in 0..n {\n            let index = lst.index(of:\
    \ Double(index)).map({ Double(index) })\n            a += index! * index!\n  \
    \      }\n        return Int(a) / Int(n)\n    }\n    else {\n        return 0\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgl7ekdh9.swift:16:17: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut a =\
    \ 0.0\n                ^\n/tmp/tmpgl7ekdh9.swift:16:17: note: join the identifiers\
    \ together\n        let mut a = 0.0\n            ~~~~^\n            muta\n/tmp/tmpgl7ekdh9.swift:16:17:\
    \ note: join the identifiers together with camel-case\n        let mut a = 0.0\n\
    \            ~~~~^\n            mutA\n/tmp/tmpgl7ekdh9.swift:18:23: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n        for index in 0..n\
    \ {\n                      ^~\n                      ...\n/tmp/tmpgl7ekdh9.swift:22:20:\
    \ error: cannot find 'a' in scope\n        return Int(a) / Int(n)\n          \
    \         ^\n/tmp/tmpgl7ekdh9.swift:19:58: error: contextual type for closure\
    \ argument list expects 1 argument, which cannot be implicitly ignored\n     \
    \       let index = lst.index(of: Double(index)).map({ Double(index) })\n    \
    \                                                     ^\n                    \
    \                                       _ in\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tguard lst.count\
    \ > 0 else {\n\t\treturn 0\n\t}\n\tlet squareSum = lst.filter{ $0 % 2 == 0 }.map\
    \ { $0 * $0 }.reduce(0, +)\n\treturn squareSum + lst.filter{ $0 % 2 != 0 }.map\
    \ { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp47rohefl.swift:17:33: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        let squareSum = lst.filter{\
    \ $0 % 2 == 0 }.map { $0 * $0 }.reduce(0, +)\n                               \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp47rohefl.swift:18:19: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n        return squareSum + lst.filter{\
    \ $0 % 2 != 0 }.map { $0 * $0 }.reduce(0, +)\n               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Int(                                                         \
    \     )\n"
  stdout: ''
  timestamp: 1659978681
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    return lst.map{ Double($0) * Double($0) }.reduce(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphxx6pqko.swift:15:55: error: missing argument for parameter #2\
    \ in call\n    return lst.map{ Double($0) * Double($0) }.reduce(0)\n         \
    \                                             ^\n                            \
    \                          , <#(Int, Double) throws -> Int#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.IsEmpty()\
    \ {\n        return 0\n    }\n\n    var sum = 0\n    for _ in lst {\n        sum\
    \ += _\n    }\n\n    let odd_sum = sum * sum\n    let even = sum - odd_sum\n \
    \   return odd - even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp53erci7l.swift:14:12: error: value of type '[Double]' has no member\
    \ 'IsEmpty'\n    if lst.IsEmpty() {\n       ~~~ ^~~~~~~\n/tmp/tmp53erci7l.swift:20:16:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        sum += _\n               ^\n/tmp/tmp53erci7l.swift:25:12: error: cannot\
    \ find 'odd' in scope\n    return odd - even\n           ^~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    }\n\n    // Calculate the sum squared\n    var sum_squares\
    \ = 0\n    for number in lst {\n        sum_squares = sum_squares + pow(number,\
    \ 2)\n    }\n\n    // Double the sum if the number is odd\n    for number in lst\
    \ {\n        if number % 2 == 1 {\n            sum_squares = sum_squares + pow(number,\
    \ 2)\n        }\n    }\n    return sum_squares\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5_hjjblu.swift:21:37: error: cannot find 'pow' in scope\n     \
    \   sum_squares = sum_squares + pow(number, 2)\n                             \
    \       ^~~\n/tmp/tmp5_hjjblu.swift:26:19: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n\
    \                  ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp5_hjjblu.swift:27:41: error: cannot find 'pow' in scope\n\
    \            sum_squares = sum_squares + pow(number, 2)\n                    \
    \                    ^~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.is_empty()\
    \ { return 0 }\n    return lst.iter().fold(0, +) *\n        double_the_difference(lst.rev())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5vm_h50m.swift:14:12: error: value of type '[Double]' has no member\
    \ 'is_empty'\n    if lst.is_empty() { return 0 }\n       ~~~ ^~~~~~~~\n/tmp/tmp5vm_h50m.swift:15:16:\
    \ error: value of type '[Double]' has no member 'iter'\n    return lst.iter().fold(0,\
    \ +) *\n           ~~~ ^~~~\n/tmp/tmp5vm_h50m.swift:16:35: error: value of type\
    \ '[Double]' has no member 'rev'\n        double_the_difference(lst.rev())\n \
    \                             ~~~ ^~~\n/tmp/tmp5vm_h50m.swift:16:31: error: missing\
    \ argument label 'lst:' in call\n        double_the_difference(lst.rev())\n  \
    \                            ^\n                              lst: \n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    var\
    \ result: Int = 0\n    \n    for num in lst {\n        if num%2 == 1 {\n     \
    \       result += num\n        }\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc_wmx77o.swift:18:15: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num%2 == 1 {\n         \
    \     ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpc_wmx77o.swift:19:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            result += num\n               \
    \       ^\n                      Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 { return 0 }\n    let sum1 = sum_of_square_of_elements(lst: lst)\n    let\
    \ sum2 = sum_of_square_of_elements(lst: lst)\n    return sum1 - sum2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpl6nxy6i7.swift:15:16: error: cannot find 'sum_of_square_of_elements'\
    \ in scope\n    let sum1 = sum_of_square_of_elements(lst: lst)\n             \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl6nxy6i7.swift:16:16: error: cannot find\
    \ 'sum_of_square_of_elements' in scope\n    let sum2 = sum_of_square_of_elements(lst:\
    \ lst)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl6nxy6i7.swift:17:17:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Int'\n\
    \    return sum1 - sum2\n           ~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    guard lst.allSatisfy(|x| x >= 0) and lst.allSatisfy(|x|\
    \ x == Int(x)) else { return 0 }\n    let sum = lst.filter { $0 % 2 == 1 }.sum()\
    \ \n    return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpuw53kbbb.swift:15:30: error: expected ',' separator\n    guard\
    \ lst.allSatisfy(|x| x >= 0) and lst.allSatisfy(|x| x == Int(x)) else { return\
    \ 0 }\n                             ^\n                            ,\n/tmp/tmpuw53kbbb.swift:15:38:\
    \ error: expected 'else' after 'guard' condition\n    guard lst.allSatisfy(|x|\
    \ x >= 0) and lst.allSatisfy(|x| x == Int(x)) else { return 0 }\n            \
    \                         ^\n/tmp/tmpuw53kbbb.swift:15:37: error: consecutive\
    \ statements on a line must be separated by ';'\n    guard lst.allSatisfy(|x|\
    \ x >= 0) and lst.allSatisfy(|x| x == Int(x)) else { return 0 }\n            \
    \                        ^\n                                    ;\n/tmp/tmpuw53kbbb.swift:15:41:\
    \ error: consecutive statements on a line must be separated by ';'\n    guard\
    \ lst.allSatisfy(|x| x >= 0) and lst.allSatisfy(|x| x == Int(x)) else { return\
    \ 0 }\n                                        ^\n                           \
    \             ;\n/tmp/tmpuw53kbbb.swift:15:61: error: expected ',' separator\n\
    \    guard lst.allSatisfy(|x| x >= 0) and lst.allSatisfy(|x| x == Int(x)) else\
    \ { return 0 }\n                                                            ^\n\
    \                                                           ,\n/tmp/tmpuw53kbbb.swift:15:73:\
    \ error: consecutive statements on a line must be separated by ';'\n    guard\
    \ lst.allSatisfy(|x| x >= 0) and lst.allSatisfy(|x| x == Int(x)) else { return\
    \ 0 }\n                                                                      \
    \  ^\n                                                                       \
    \ ;\n/tmp/tmpuw53kbbb.swift:15:74: error: expected expression\n    guard lst.allSatisfy(|x|\
    \ x >= 0) and lst.allSatisfy(|x| x == Int(x)) else { return 0 }\n            \
    \                                                             ^\n/tmp/tmpuw53kbbb.swift:15:26:\
    \ error: '|' is not a prefix unary operator\n    guard lst.allSatisfy(|x| x >=\
    \ 0) and lst.allSatisfy(|x| x == Int(x)) else { return 0 }\n                 \
    \        ^\n/tmp/tmpuw53kbbb.swift:15:28: error: '|' is not a postfix unary operator\n\
    \   "
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    \n    let sum = lst.reduce(0, combine: +)\n    \n\
    \    var ret = 0\n    for e in lst {\n        if e > 0 { ret += e }\n    }\n \
    \   \n    return sum - ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpcqxeo3nf.swift:16:25: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = lst.reduce(0, combine: +)\n                        ^\
    \   ~~~~~~~~~\n                            \n/tmp/tmpcqxeo3nf.swift:20:27: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \    if e > 0 { ret += e }\n                          ^\n                    \
    \      Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n\n    var sum = 0\n    for n in lst {\n   \
    \     if n % 2 == 1 {\n            sum += n * n\n        }\n    }\n\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp979y6p32.swift:20:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp979y6p32.swift:21:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for val in lst {\n        if val\
    \ % 2 == 1 {\n            sum += val\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp67vszwmd.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if val % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp67vszwmd.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += val\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Double = 0\n    for x in lst {\n        if x > 0 {\n            sum += x\n \
    \       }\n    }\n    if sum > 0 {\n        return sum * sum\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(double_the_difference(lst: []\
    \ as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpi6fl3eav.swift:21:20: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n        return sum * sum\n             \
    \  ~~~~^~~~~\n               Int(     )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var acc:\
    \ Int = 0\n    for x in lst {\n        acc += Int(Double(x).square().square())\n\
    \    }\n    return acc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvmmwua7e.swift:16:30: error: value of type 'Double' has no member\
    \ 'square'\n        acc += Int(Double(x).square().square())\n                \
    \   ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  guard lst.count\
    \ > 0 else { return 0 }\n  return lst.map({ $0 * $0 }).reduce(0, +) //#1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp1dfsqk3j.swift:15:23: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n  return lst.map({ $0 * $0 }).reduce(0, +) //#1\n\
    \                   ~~~^~~~\n                   Int(   )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tvar result\
    \ : Int = 0\n\tfor num in lst {\n\t\tif num < 0 {\n\t\t\tcontinue\n\t\t}\n\t\t\
    if num % 2 != 0 {\n\t\t\tresult += num\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqevs1qey.swift:19:10: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n                if num % 2 != 0 {\n\
    \                       ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpqevs1qey.swift:20:14: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n                        result +=\
    \ num\n                                  ^\n                                 \
    \ Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty()\
    \ {\n        return 0\n    }\n    return lst.map { $0 * $0 }.sum()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp8qs4mbl1.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp8qs4mbl1.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    \n    var result = 0\n    \n    for element in lst\
    \ {\n        if element > 0 {\n            result += pow(Double(element), 2)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpaah28jrz.swift:20:23: error: cannot find 'pow' in scope\n     \
    \       result += pow(Double(element), 2)\n                      ^~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for d in lst {\n        if d % 2 == 1 {\n            sum += d\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgxhc5x2.swift:16:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if d % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgxhc5x2.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += d\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var total\
    \ = 0\n    if lst.count == 0 {\n        return 0\n    }\n    for num in lst {\n\
    \        total += num * num\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvahozveh.swift:19:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        total += num * num\n              \
    \       ^\n                 Int(     )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard !lst.isEmpty\
    \ else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp8ad9azyy.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp8ad9azyy.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  guard lst.count\
    \ > 0 else { return 0 }\n  var result = Double(0)\n  for n in lst {\n    result\
    \ += n.pow(2.0)\n  }\n  return Int(result)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_xzb6dax.swift:17:17: error: value of type 'Double' has no member\
    \ 'pow'\n    result += n.pow(2.0)\n              ~ ^~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    let even: Int = lst.filter { $0 % 2 == 0 }.count\n\
    \    let odd: Int = lst.filter { $0 % 2 == 1 }.count\n    return even + odd +\
    \ lst.filter { $0 > 0 }.map { $0 * $0 }.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmpa6lem2.swift:15:37: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    let even: Int = lst.filter { $0\
    \ % 2 == 0 }.count\n                                    ^\nSwift.%:2:13: note:\
    \ '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmpmpa6lem2.swift:16:36:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n    let odd: Int = lst.filter { $0 % 2 == 1 }.count\n             \
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpmpa6lem2.swift:17:80: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n    return even + odd + lst.filter\
    \ { $0 > 0 }.map { $0 * $0 }.reduce(0) { $0 + $1 }\n                         \
    \                                                      ^\n                   \
    \                                                            Int( )\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tguard lst.isEmpty\
    \ else {\n\t\tfatalError()\n\t}\n\treturn lst.foldLeft(0) { $0 + $1 * $1 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6dkkz9n2.swift:17:13: error: value of type '[Double]' has no member\
    \ 'foldLeft'\n        return lst.foldLeft(0) { $0 + $1 * $1 }\n              \
    \ ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.isEmpty()\
    \ {\n    return 0\n  }\n  \n  var acc = Double(0)\n  for i in lst {\n    acc =\
    \ acc + pow(i.doubleValue(), 2.0)\n  }\n  return acc\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp39ojdo6f.swift:14:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if lst.isEmpty() {\n         ^      ~~\n                \n/tmp/tmp39ojdo6f.swift:20:17:\
    \ error: cannot find 'pow' in scope\n    acc = acc + pow(i.doubleValue(), 2.0)\n\
    \                ^~~\n/tmp/tmp39ojdo6f.swift:20:23: error: value of type 'Double'\
    \ has no member 'doubleValue'\n    acc = acc + pow(i.doubleValue(), 2.0)\n   \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp39ojdo6f.swift:22:10: error: cannot convert\
    \ return expression of type 'Double' to return type 'Int'\n  return acc\n    \
    \     ^~~\n         Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for x in lst {\n        if x > 0 {\n            sum += x*x\n        }\n\
    \    }\n    if sum == 0 {\n        return 0\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpryffyk18.swift:17:21: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x*x\n                  \
    \  ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.isEmpty\
    \ else { return 0 }\n    var sum: Double = 0\n    for item in lst {\n        if\
    \ item % 2 != 0 {\n            sum += item\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpih7wn4a7.swift:17:17: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if item % 2 != 0 {\n      \
    \          ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpih7wn4a7.swift:21:12: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n    return sum\n           ^~~\n    \
    \       Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum: Double = 0\n    for elt in lst\
    \ {\n        sum += elt\n    }\n    return sum * sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpw1s3jbt_.swift:21:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum * sum\n           ~~~~^~~~~\n\
    \           Int(     )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    return lst.filter { $0 % 2 != 0 }.map({ $0 * $0 }).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(double_the_difference(lst: []\
    \ as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat88basp.swift:15:48: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.filter { $0 % 2 != 0 }.map({ $0\
    \ * $0 }).reduce(0, +)\n                                            ~~~^~~~\n\
    \                                            Int(   )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Double = 0\n    for d in lst {\n        if d != 0 {\n            sum += d *\
    \ d\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbrsiq9yb.swift:20:12: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum\n           ^~~\n       \
    \    Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    return Double(reduce(0) { x, y in\n   \
    \     guard !(x < 0 || y < 0) else {\n            return x + y\n        }\n  \
    \  })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbetihjha.swift:17:19: error: cannot find 'reduce' in scope\n  \
    \  return Double(reduce(0) { x, y in\n                  ^~~~~~\n/tmp/tmpbetihjha.swift:17:12:\
    \ error: no 'init' candidates produce the expected contextual result type 'Int'\n\
    \    return Double(reduce(0) { x, y in\n           ^\nSwift.Double:4:12: note:\
    \ 'init(_:)' produces 'Double', not the expected contextual result type 'Int'\n\
    \    public init(_ _value: Builtin.FPIEEE64)\n           ^\nSwift.Double:4:12:\
    \ note: 'init(_:)' produces 'Double?', not the expected contextual result type\
    \ 'Int'\n    public init?(_ text: Substring)\n           ^\nSwift.Double:2:12:\
    \ note: 'init(_:)' produces 'Double', not the expected contextual result type\
    \ 'Int'\n    public init(_ v: Int)\n           ^\nSwift.Double:6:23: note: 'init(_:)'\
    \ produces 'Double', not the expected contextual result type 'Int'\n    @inlinable\
    \ public init(_ other: Float16)\n                      ^\nSwift.Double:9:23: note:\
    \ 'init(_:)' produces 'Double', not the expected contextual result type 'Int'\n\
    \    @inlinable public init(_ other: Float)\n                      ^\nSwift.Double:11:23:\
    \ note: 'init(_:)' produces 'Double', not the expected contextual result type\
    \ 'Int'\n    @inlinable public init(_ other: Double)\n                      ^\n\
    Swift.Double:13:23: note: 'init(_:)' produces 'Double', not the expected contextual\
    \ result type 'Int'\n    @inlinable public init(_ other: Float80)\n          \
    \            ^\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    \n    var sum = 0\n    var count = 0\n    for x in\
    \ lst {\n        if Double(x).intValue % 2 != 0 {\n            sum += Double(x)\n\
    \            count++\n        }\n    }\n    return sum.intValue * sum.intValue\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp7hp6rsbu.swift:19:22: error: value of type 'Double' has no member\
    \ 'intValue'\n        if Double(x).intValue % 2 != 0 {\n           ~~~~~~~~~ ^~~~~~~~\n\
    /tmp/tmp7hp6rsbu.swift:20:20: error: cannot convert value of type 'Double' to\
    \ expected argument type 'Int'\n            sum += Double(x)\n               \
    \    ^\n                   Int(     )\n/tmp/tmp7hp6rsbu.swift:21:18: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            count++\n   \
    \              ^~\n/tmp/tmp7hp6rsbu.swift:24:16: error: value of type 'Int' has\
    \ no member 'intValue'\n    return sum.intValue * sum.intValue\n           ~~~\
    \ ^~~~~~~~\n/tmp/tmp7hp6rsbu.swift:24:25: error: cannot convert return expression\
    \ of type 'Duration' to return type 'Int'\n    return sum.intValue * sum.intValue\n\
    \           ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmp7hp6rsbu.swift:24:31: error:\
    \ value of type 'Int' has no member 'intValue'\n    return sum.intValue * sum.intValue\n\
    \                          ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n\n    var sum = 0\n    for i in lst {\n        if i %\
    \ 2 != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpl5g6g_ny.swift:18:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpl5g6g_ny.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count==0\
    \ {\n    return 0\n  }\n  \n  var sum = 0\n  for item in lst {\n    if item >\
    \ 0 {\n      sum += item * item\n    }\n  }\n  \n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpljw_9q6e.swift:21:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n      sum += item * item\n                \
    \  ^\n             Int(       )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 { return 0 }\n    let n = lst.count\n    var sum = 0\n    var sq = 0\n\
    \    for v in lst {\n        sum += v\n        if v&0x80000000 != 0 {\n      \
    \      sq += v&0x80000000\n            sum += sq\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpswwk9u6j.swift:19:16: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v\n               ^\n      \
    \         Int( )\n/tmp/tmpswwk9u6j.swift:20:12: error: cannot convert value of\
    \ type 'Double' to expected argument type 'Int'\n        if v&0x80000000 != 0\
    \ {\n           ^\n           Int( )\n/tmp/tmpswwk9u6j.swift:21:19: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n           \
    \ sq += v&0x80000000\n                  ^\n                  Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let arr =\
    \ lst.reverse()\n    var sum: Double = 0.0\n\n    for item in arr {\n        if\
    \ item % 2 == 1 {\n            sum += item\n        }\n    }\n\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgekt0fhk.swift:14:19: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n    let arr = lst.reverse()\n            \
    \  ~~~ ^\n/tmp/tmpgekt0fhk.swift:23:12: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n    return sum\n           ^~~\n    \
    \       Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var total\
    \ = 0\n    for d in lst {\n        if d > 0 {\n            total += d * d\n  \
    \      } else {\n            total -= d * d\n        }\n    }\n    return total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpoqi1vu69.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            total += d * d\n              \
    \         ^\n                     Int( )\n/tmp/tmpoqi1vu69.swift:19:24: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \        total -= d * d\n                       ^\n                     Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ != 0 else { return 0 }\n\n    var sum = 0\n    var index = 0\n    while index\
    \ < lst.count {\n        let value = lst[index]\n        if value != 0 && value\
    \ % 2 == 1 {\n            sum += value\n        }\n        index++\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwruwh6z6.swift:20:32: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if value != 0 && value % 2\
    \ == 1 {\n                               ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpwruwh6z6.swift:21:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += value\n       \
    \            ^\n                   Int( )\n/tmp/tmpwruwh6z6.swift:23:14: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for d in lst {\n        if d >= 0 {\n            sum += d\n        }\n\
    \    }\n    return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmdy0oq42.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += d\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.isEmpty\
    \ else {\n        return 0.\n    }\n\n    var s = 0\n    for x in lst {\n    \
    \    s += pow(Double(x) / 2, 2)\n    }\n\n    return s\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5fu6_3n5.swift:15:17: error: expected member name following '.'\n\
    \        return 0.\n                ^\n/tmp/tmp5fu6_3n5.swift:20:14: error: cannot\
    \ find 'pow' in scope\n        s += pow(Double(x) / 2, 2)\n             ^~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    var\
    \ sum = 0\n    \n    for element in lst {\n        if element % 2 == 1 {\n   \
    \         sum += element\n        }\n    }\n    \n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmppcu67z4w.swift:18:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if element % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmppcu67z4w.swift:19:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += element\n     \
    \              ^\n                   Int(   )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    let total = 0\n    for i in lst {\n        if i %\
    \ 2 == 1 {\n            total += i\n        }\n    }\n    return total\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmph09nagd6.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmph09nagd6.swift:18:13: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n            total += i\n            ^\n\
    \            Double( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let length\
    \ = lst.count\n    if length == 0 {\n        return 0\n    }\n    var total =\
    \ 0\n    for element in lst {\n        if element % 2 == 1 {\n            total\
    \ += element\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6rzanhz7.swift:20:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if element % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp6rzanhz7.swift:21:22: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            total += element\n   \
    \                  ^\n                     Int(   )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return Int(lst.filter({\
    \ Double($0) % 2 != 0 }).reduce(into: 0.0) { result, item in\n        return result\
    \ + (Int(item) ** 2)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphcbek9_x.swift:15:36: error: cannot find operator '**' in scope\n\
    \        return result + (Int(item) ** 2)\n                                  \
    \ ^~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ == 0 {\n    return 0\n  }\n\n  return sumSquared(lst) / Double(lst.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgr1gyw47.swift:18:10: error: cannot find 'sumSquared' in scope\n\
    \  return sumSquared(lst) / Double(lst.count)\n         ^~~~~~~~~~\n/tmp/tmpgr1gyw47.swift:18:26:\
    \ error: no '/' candidates produce the expected contextual result type 'Int'\n\
    \  return sumSquared(lst) / Double(lst.count)\n                         ^\nSwift.Duration:4:24:\
    \ note: '/' produces 'Duration', not the expected contextual result type 'Int'\n\
    \    public static func / (lhs: Duration, rhs: Double) -> Duration\n         \
    \              ^\nSwift.Double:5:24: note: '/' produces 'Double', not the expected\
    \ contextual result type 'Int'\n    public static func / (lhs: Double, rhs: Double)\
    \ -> Double\n                       ^\nSwift.FloatingPoint:29:17: note: '/' produces\
    \ 'Double', not the expected contextual result type 'Int'\n    static func / (lhs:\
    \ Self, rhs: Self) -> Self\n                ^\nSwift.Duration:4:24: note: '/'\
    \ produces 'Duration', not the expected contextual result type 'Int'\n    public\
    \ static func / (lhs: Duration, rhs: Double) -> Duration\n                   \
    \    ^\nSwift.Double:5:24: note: '/' produces 'Double', not the expected contextual\
    \ result type 'Int'\n    public static func / (lhs: Double, rhs: Double) -> Double\n\
    \                       ^\nSwift.FloatingPoint:29:17: note: '/' produces 'Double',\
    \ not the expected contextual result type 'Int'\n    static func / (lhs: Self,\
    \ rhs: Self) -> Self\n                ^\nSwift.Duration:4:24: note: '/' produces\
    \ 'Duration', not the expected contextual result type 'Int'\n    public static\
    \ func / (lhs: Duration, rhs: Double) -> Duration\n                       ^\n\
    Swift.Double:5:24: note: '/' produces 'Double', not the expected contextual result\
    \ type 'Int'\n    public static func / (lhs: Double, rhs: Double) -> Double\n\
    \                       ^\nSwift.FloatingPoint:29:17: note: '/' produces 'Double',\
    \ not the expected contextual result type 'Int'\n    static func / (lhs: Self,\
    \ rhs: Self) -> Self\n                ^\nSwift.Duration:4:24: note: '/' produces\
    \ 'Duration', not the expected contextual result type 'Int'\n    public static\
    \ fu"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ { return 0 }\n    let mut sum = 0\n    for v in lst {\n        if v > 0 { sum\
    \ += v*v }\n        if v < 0 { sum += -v*v }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpz12iu0wq.swift:15:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut sum = 0\n\
    \            ^\n/tmp/tmpz12iu0wq.swift:15:13: note: join the identifiers together\n\
    \    let mut sum = 0\n        ~~~~^~~\n        mutsum\n/tmp/tmpz12iu0wq.swift:15:13:\
    \ note: join the identifiers together with camel-case\n    let mut sum = 0\n \
    \       ~~~~^~~\n        mutSum\n/tmp/tmpz12iu0wq.swift:17:20: error: cannot find\
    \ 'sum' in scope\n        if v > 0 { sum += v*v }\n                   ^~~\n/tmp/tmpz12iu0wq.swift:18:20:\
    \ error: cannot find 'sum' in scope\n        if v < 0 { sum += -v*v }\n      \
    \             ^~~\n/tmp/tmpz12iu0wq.swift:20:12: error: cannot find 'sum' in scope\n\
    \    return sum\n           ^~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    var\
    \ sum: Double = 0\n    \n    for i in lst {\n        sum += Double(i)\n    }\n\
    \    \n    return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkac2cdix.swift:21:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum * sum\n           ~~~~^~~~~\n\
    \           Int(     )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ == 0 {\n    return 0\n  }\n\n  var result = 0\n  for n in lst {\n    if n >\
    \ 0 {\n      result = result * n + n\n    }\n  }\n\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzfo1w87g.swift:21:16: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n      result = result * n + n\n        \
    \       ^\n               Double( )\n/tmp/tmpzfo1w87g.swift:21:27: error: cannot\
    \ assign value of type 'Double' to type 'Int'\n      result = result * n + n\n\
    \               ~~~~~~~~~~~^~~\n               Int(          )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let len =\
    \ lst.count\n    let is_even = (len % 2 == 0)\n    if len == 0 || is_even {\n\
    \        return is_even\n    }\n    let (lower, upper) = is_even ? [0, len - 1]\
    \ : [0, len / 2]\n    var sum = 0\n    for i in lower ..< upper {\n        if\
    \ i != lst.last {\n            sum += pow(Double(lst[i]), 2)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbjra5dkk.swift:17:16: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Int'\n        return is_even\n               ^~~~~~~\n\
    /tmp/tmpbjra5dkk.swift:19:34: error: cannot convert value of type '[Int]' to specified\
    \ type '(_, _)'\n    let (lower, upper) = is_even ? [0, len - 1] : [0, len / 2]\n\
    \                         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    \n    var sum = 0\n    \n    for i in 0...lst.count\
    \ {\n        sum += pow(Double(i), 2)\n    }\n    \n    for i in 0...lst.count\
    \ {\n        let num = Double(i)\n        if num >= 0 {\n            sum += num\n\
    \        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpy1mbrz1p.swift:19:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(Double(i), 2)\n               ^~~\n/tmp/tmpy1mbrz1p.swift:25:20:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \            sum += num\n                   ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return lst\n\
    \        .filter { !$0.isNegative }\n        .map { $0 * $0 }\n        .sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpsjbfo2oi.swift:15:23: error: value of type 'Double' has no member\
    \ 'isNegative'\n        .filter { !$0.isNegative }\n                   ~~ ^~~~~~~~~~\n\
    /tmp/tmpsjbfo2oi.swift:17:10: error: value of type '[Double]' has no member 'sum'\n\
    \        .sum()\n         ^~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  return lst.filter{$0\
    \ < 0}.map{$0 * $0}.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpky3n1mlk.swift:14:36: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n  return lst.filter{$0 < 0}.map{$0 * $0}.reduce(0,\
    \ +)\n                                ~~~^~~~\n                              \
    \  Int(   )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    let max = lst.max() ?? 0\n    let min =\
    \ lst.min() ?? 0\n    var total = 0\n    for i in lst {\n        if Int(i) % 2\
    \ == 1 {\n            total += i * i\n        }\n    }\n    return max - min +\
    \ total / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphhchffb1.swift:22:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            total += i * i\n              \
    \         ^\n                     Int( )\n/tmp/tmphhchffb1.swift:25:16: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    return\
    \ max - min + total / 2\n               ^\n           Int(     )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tvar total :\
    \ Double = 0\n\tfor elt in lst {\n\t\tif elt == 0 || elt == -1 || elt == -2 {\n\
    \t\t\tbreak\n\t\t}\n\t\ttotal += elt\n\t}\n\treturn Int(sqrt(total))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmc1eug7u.swift:21:13: error: cannot find 'sqrt' in scope\n    \
    \    return Int(sqrt(total))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for i in lst {\n        if i >= 0 {\n            sum += i\n   \
    \     }\n    }\n    return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp2b2oamgd.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ == 0 {\n    return 0\n  }\n  var sum = 0\n  for item in lst {\n    if item >\
    \ 0 {\n      sum += item\n    }\n  }\n  return sum * sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7zyrh6b.swift:20:14: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n      sum += item\n             ^\n       \
    \      Int()\n"
  stdout: ''
  timestamp: 1659978679
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    let sum = 0\n    for number in lst {\n\
    \        if number % 2 != 0 {\n            sum += number * number\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgiikeuw3.swift:19:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 != 0 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpgiikeuw3.swift:20:13: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Double'\n            sum += number * number\n\
    \            ^\n            Double( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for _ in lst {\n        sum += pow(Double(Int64(num)), 2)\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpcrzs7jxe.swift:16:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(Double(Int64(num)), 2)\n               ^~~\n/tmp/tmpcrzs7jxe.swift:16:33:\
    \ error: cannot find 'num' in scope\n        sum += pow(Double(Int64(num)), 2)\n\
    \                                ^~~\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard !lst.isEmpty\
    \ else {\n        return 0\n    }\n    \n    var total: Double = 0\n    for i\
    \ in lst {\n        total += i * i\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa6gp98u0.swift:22:12: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return total\n           ^~~~~\n   \
    \        Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty()\
    \ {\n        return 0\n    }\n\n    if lst.count == 0 {\n        return 0\n  \
    \  }\n\n    if lst.count < 2 {\n        return lst[0]\n    }\n\n    // Find the\
    \ index that is the largest odd number.\n    var index = 0\n    var maxOdd = 0.0\n\
    \    var nextOdd = 0.0\n\n    for idx in lst {\n        if idx % 2 == 1 {\n  \
    \          index += 1\n            continue\n        }\n\n        // Check if\
    \ the current number is even.\n        if idx % 2 == 0 {\n            index +=\
    \ 1\n            continue\n        }\n\n        // Check if the number is odd.\
    \ If so, update maxOdd and nextOdd\n        // appropriately.\n        if idx\
    \ % 2 != 0 {\n            if maxOdd < 0.0 {\n                maxOdd = 0.0\n  \
    \              nextOdd = idx\n            } else if nextOdd < idx {\n        \
    \        maxOdd = idx\n                nextOdd = idx\n            } else {\n \
    \               maxOdd = nextOdd\n                nextOdd = idx\n            }\n\
    \        }\n    }\n\n    // Return the sum of the squares of the odd numbers.\n\
    \    return (maxOdd - index).squared()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpaii6zetw.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpaii6zetw.swift:23:19: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n        return lst[0]\n               ~~~^~~\n\
    \               Int(  )\n/tmp/tmpaii6zetw.swift:32:16: error: '%' is unavailable:\
    \ For floating point numbers use truncatingRemainder instead\n        if idx %\
    \ 2 == 1 {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpaii6zetw.swift:38:16: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n        if idx % 2 == 0 {\n \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpaii6zetw.swift:45:16: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n        if idx % 2 != 0 {\n \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpaii6zetw.swift:60:20: error: binary operator '-' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    return (maxOdd - index).squared()\n\
    \            ~~~~~~ ^ ~~~~~\n/tmp/tmpaii6zetw.swift:60:20: note: overloads for\
    \ '-' exist with these partially matching parameter lists: (Double, Double), (Int,\
    \ Int)\n    return (maxOdd - index).squared()\n                   ^\n/tmp/tmpaii6zetw.swift:60:29:\
    \ error: reference to member 'squared' cannot be resolved without a contextual\
    \ type\n    return (maxOdd - index).squared()\n                            ^\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.isEmpty()\
    \ {\n    return 0\n  }\n\n  var sum = 0\n\n  for n in lst {\n    if Int(n) % 2\
    \ != 0 {\n      sum += n\n    }\n  }\n\n  return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa1mqe96x.swift:14:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if lst.isEmpty() {\n         ^      ~~\n                \n/tmp/tmpa1mqe96x.swift:22:14:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \      sum += n\n             ^\n             Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ > 0 {\n        return sum(lst.filter { $0 % 2 == 1 }) + sum(lst.filter { $0\
    \ % 2 == 0 }) - sum(lst.filter { $0 % 2 == 0 })\n    }\n    else {\n        return\
    \ 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpw9y98s4m.swift:15:16: error: cannot find 'sum' in scope\n     \
    \   return sum(lst.filter { $0 % 2 == 1 }) + sum(lst.filter { $0 % 2 == 0 }) -\
    \ sum(lst.filter { $0 % 2 == 0 })\n               ^~~\n/tmp/tmpw9y98s4m.swift:15:50:\
    \ error: cannot find 'sum' in scope\n        return sum(lst.filter { $0 % 2 ==\
    \ 1 }) + sum(lst.filter { $0 % 2 == 0 }) - sum(lst.filter { $0 % 2 == 0 })\n \
    \                                                ^~~\n/tmp/tmpw9y98s4m.swift:15:84:\
    \ error: cannot find 'sum' in scope\n        return sum(lst.filter { $0 % 2 ==\
    \ 1 }) + sum(lst.filter { $0 % 2 == 0 }) - sum(lst.filter { $0 % 2 == 0 })\n \
    \                                                                            \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659978682
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  guard lst.count\
    \ > 0 else { return 0 }\n  var sum = 0\n  for num in lst {\n    if num != Int.min\
    \ && num != Int.max && num != 0 {\n      sum += (num * num)\n    }\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzz7raava.swift:17:8: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    if num != Int.min && num != Int.max &&\
    \ num != 0 {\n       ^\n       Int( )\n/tmp/tmpzz7raava.swift:17:26: error: cannot\
    \ convert value of type 'Double' to expected argument type 'Int'\n    if num !=\
    \ Int.min && num != Int.max && num != 0 {\n                         ^\n      \
    \                   Int( )\n/tmp/tmpzz7raava.swift:18:19: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n      sum += (num *\
    \ num)\n                  ^\n             Int(       )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    let result = lst[0]\n    for i in 1..<lst.count {\n\
    \        if lst[i] == Double.greatestFiniteMagnitude {\n            result = 0\n\
    \        }\n        result += lst[i]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpe83l_17p.swift:18:13: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n            result = 0\n            ^~~~~~\n/tmp/tmpe83l_17p.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = lst[0]\n  \
    \  ^~~\n    var\n/tmp/tmpe83l_17p.swift:20:16: error: left side of mutating operator\
    \ isn't mutable: 'result' is a 'let' constant\n        result += lst[i]\n    \
    \    ~~~~~~ ^\n/tmp/tmpe83l_17p.swift:15:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = lst[0]\n    ^~~\n    var\n/tmp/tmpe83l_17p.swift:22:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return result\n           ^~~~~~\n           Int(  )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 || num < 0 {\n            sum += num * num\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp87gf1bcs.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tvar sum = 0\n\
    \tfor _, val := range lst {\n\t\tif val%2 == 1 {\n\t\t\tsum += val\n\t\t}\n\t\
    }\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnm6dod99.swift:15:7: error: expected 'in' after for-each pattern\n\
    \        for _, val := range lst {\n             ^\n/tmp/tmpnm6dod99.swift:15:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, val :=\
    \ range lst {\n             ^\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let res =\
    \ lst.reduce(0){ (res, v) -> Int in\n        return res + v*v\n    }\n    return\
    \ res % 2 == 0 ? res : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpdlz7yg4e.swift:15:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        return res + v*v\n                \
    \      ^\n                     Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for number in lst {\n        if number > 0 {\n            sum +=\
    \ number * number\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp74u11bu3.swift:17:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return lst.filter\
    \ { $0 % 2 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpdn4_mrlw.swift:14:34: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 }.sum()\n           ~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpdn4_mrlw.swift:14:28: error: cannot convert value of type 'Double'\
    \ to closure result type 'Bool'\n    return lst.filter { $0 % 2 }.sum()\n    \
    \                    ~~~^~~\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ {\n        return 0\n    }\n    let a = lst.filter { $0 % 2 != 0 }\n    guard\
    \ !a.isEmpty else {\n        return 0\n    }\n    return a.sum { $0 * $0 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp7js4jlt9.swift:17:29: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    let a = lst.filter { $0 % 2 !=\
    \ 0 }\n                            ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp7js4jlt9.swift:21:14: error: value of type '[Double]'\
    \ has no member 'sum'\n    return a.sum { $0 * $0 }\n           ~ ^~~\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var total\
    \ = 0\n    for num in lst {\n        if num % 2 != 0 {\n            total += num\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmppsz8mdcw.swift:16:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 != 0 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmppsz8mdcw.swift:17:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            total += num\n                \
    \     ^\n                     Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ < 1 {\n        return 0\n    }\n    var sum: Double = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] >= 0 {\n            sum += lst[i]\n        }\n    }\n \
    \   return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp7a3glx2e.swift:23:16: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum * sum\n           ~~~~^~~~~\n\
    \           Int(     )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  // Write your\
    \ code in an appropriate Swift 3 style,\n  // and compare your output to ours.\n\
    \  guard lst.count > 0 else { return 0 }\n  var sum : Double = 0.0\n  for num\
    \ in lst {\n    if num > 0 {\n      sum += num * num\n    }\n  }\n  return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpztarba0g.swift:23:10: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n  return sum\n         ^~~\n         Int(\
    \ )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for number in lst {\n        if number > 0 && number % 2 == 1 {\n   \
    \         sum += number\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5vpoylxl.swift:16:33: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number > 0 && number % 2\
    \ == 1 {\n                                ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmp5vpoylxl.swift:17:20: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \        sum += number\n                   ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    \n    var sum = 0\n    for i in lst {\n\
    \        if i%2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9w6joh6w.swift:20:13: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i%2 == 1 {\n           \
    \ ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic\
    \ func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n\
    /tmp/tmp9w6joh6w.swift:21:20: error: cannot convert value of type 'Double' to\
    \ expected argument type 'Int'\n            sum += i\n                   ^\n \
    \                  Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var total\
    \ = 0\n    for num in lst {\n        total += num * num\n    }\n    if total <\
    \ 0 {\n        return 0\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp2q6cz8a9.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        total += num * num\n              \
    \       ^\n                 Int(     )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.count\
    \ == 0 {\n    return 0\n  }\n\n  var sum = lst[0]\n  var product = 1\n  for number\
    \ in lst {\n    if number % 2 == 0 {\n      product *= number\n    }\n  }\n  return\
    \ product + sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpg_jhffnl.swift:21:15: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if number % 2 == 0 {\n        \
    \      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpg_jhffnl.swift:22:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n      product *= number\n                 ^\n\
    \                 Int(  )\n/tmp/tmpg_jhffnl.swift:25:20: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n  return product + sum\n\
    \                   ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var result\
    \ = 0.\n    var cur = 0\n    for num in lst {\n        result += (num % 2 == 1\
    \ ? num : -num)\n        cur += num\n    }\n    return cur\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6iqg8vjp.swift:14:19: error: expected member name following '.'\n\
    \    var result = 0.\n                  ^\n/tmp/tmp6iqg8vjp.swift:18:16: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \    cur += num\n               ^\n               Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ < 1 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n      \
    \  sum += x * x\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp1rqb8g6c.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var ret = 0\n    for i in lst {\n        ret += pow(Double(i),\
    \ 2)\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpac3retnh.swift:17:16: error: cannot find 'pow' in scope\n     \
    \   ret += pow(Double(i), 2)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num >= 0 {\n            sum += num\n   \
    \     } else {\n            sum += -num\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmprcoq01y9.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n/tmp/tmprcoq01y9.swift:19:20: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n            sum += -num\n\
    \                   ^\n                   Int()\n/tmp/tmprcoq01y9.swift:19:21:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \            sum += -num\n                    ^\n                    Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Calculate\
    \ the sum of the squares of the elements in\n    // the array\n    let sum = lst.map\
    \ { $0 * $0 }.sum()\n    // Return the sum of the squares of the elements in the\
    \ array\n    // that are odd\n    return (lst.filter{ $0 % 2 == 1 }).map { $0\
    \ * $0 }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpns_46py8.swift:16:35: error: value of type '[Double]' has no member\
    \ 'sum'\n    let sum = lst.map { $0 * $0 }.sum()\n              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpns_46py8.swift:19:56: error: value of type '[Double]' has no member\
    \ 'sum'\n    return (lst.filter{ $0 % 2 == 1 }).map { $0 * $0 }.sum()\n      \
    \     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard !lst.isEmpty\
    \ else {\n        return 0\n    }\n    var result = 0\n    for element in lst\
    \ {\n        if element % 2 == 1 {\n            result += element\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmppq0btnco.swift:19:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if element % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmppq0btnco.swift:20:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            result += element\n  \
    \                    ^\n                      Int(   )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    for x in\
    \ lst {\n        if x < 0 {\n            return 0\n        }\n    }\n    return\
    \ lst.filter{ $0 % 2 == 1 }.sum() * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmppeae4zrj.swift:19:38: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.filter{ $0 % 2 == 1 }.sum() * 2\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  if lst.isEmpty\
    \ {\n    return 0\n  }\n  var sum = 0\n  for v in lst {\n    if v < 0 {\n    \
    \  sum += v\n      continue\n    }\n    sum += v * v\n  }\n  return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkp0t6jry.swift:20:14: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n      sum += v\n             ^\n          \
    \   Int( )\n/tmp/tmpkp0t6jry.swift:23:14: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n    sum += v * v\n             ^\n\
    \           Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return sum(lst).filter({\
    \ $0 % 2 == 1 }).map { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpy45is3gy.swift:14:12: error: cannot find 'sum' in scope\n    return\
    \ sum(lst).filter({ $0 % 2 == 1 }).map { $0 * $0 }.reduce(0, +)\n           ^~~\n\
    /tmp/tmpy45is3gy.swift:14:12: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return sum(lst).filter({ $0 % 2 == 1 }).map { $0 * $0 }.reduce(0,\
    \ +)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978704
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n\n    return sum(lst.reduce(0, combine: { $0\
    \ + $1 }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd7mlgiib.swift:18:12: error: cannot find 'sum' in scope\n    return\
    \ sum(lst.reduce(0, combine: { $0 + $1 }))\n           ^~~\n/tmp/tmpd7mlgiib.swift:18:26:\
    \ error: extraneous argument label 'combine:' in call\n    return sum(lst.reduce(0,\
    \ combine: { $0 + $1 }))\n                         ^   ~~~~~~~~~\n           \
    \                  \n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for i in lst {\n        if i % 2 != 0 {\n            sum += i *\
    \ i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpi8t32nh5.swift:16:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpi8t32nh5.swift:17:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i * i\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Write\
    \ your code in here\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpheqimylz/tmpheqimylz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00bbabfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00bb7b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00bb7b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00bb7b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpheqimylz                        0x0000555d7e2393e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b00bbcab460 __libc_start_main +
    245

    6    tmpheqimylz                        0x0000555d7e238fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 { return 0 }\n    if lst.count == 1 { return lst[0].int() * lst[0].int()\
    \ }\n    var sum_of_squares = Double(0)\n    for i in lst {\n        if i.int()\
    \ < 0 { return 0 }\n        sum_of_squares += i.int()\n    }\n    return sum_of_squares\
    \ * sum_of_squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpv2hlq9c2.swift:15:39: error: value of type 'Double' has no member\
    \ 'int'\n    if lst.count == 1 { return lst[0].int() * lst[0].int() }\n      \
    \                         ~~~~~~ ^~~\n/tmp/tmpv2hlq9c2.swift:15:54: error: value\
    \ of type 'Double' has no member 'int'\n    if lst.count == 1 { return lst[0].int()\
    \ * lst[0].int() }\n                                              ~~~~~~ ^~~\n\
    /tmp/tmpv2hlq9c2.swift:18:14: error: value of type 'Double' has no member 'int'\n\
    \        if i.int() < 0 { return 0 }\n           ~ ^~~\n/tmp/tmpv2hlq9c2.swift:19:29:\
    \ error: value of type 'Double' has no member 'int'\n        sum_of_squares +=\
    \ i.int()\n                          ~ ^~~\n/tmp/tmpv2hlq9c2.swift:21:27: error:\
    \ cannot convert return expression of type 'Double' to return type 'Int'\n   \
    \ return sum_of_squares * sum_of_squares\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \           Int(                           )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    let sum:\
    \ Double = 0\n    for num in lst {\n        if num > 0 {\n            sum += (Double(num)\
    \ * Double(num))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo84gnzy9.swift:17:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += (Double(num) * Double(num))\n\
    \            ~~~ ^\n/tmp/tmpo84gnzy9.swift:14:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let sum: Double = 0\n    ^~~\n    var\n/tmp/tmpo84gnzy9.swift:20:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return sum\n           ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    for _ in\
    \ lst {\n        guard let num = Double(num) else { return 0 }\n        if num\
    \ < 0 {\n            return 0\n        }\n    }\n    var sum = 0\n    for num\
    \ in lst {\n        if Double(num) % 2 == 0 {\n            sum += num\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjlm8jyl7.swift:15:32: error: cannot find 'num' in scope\n     \
    \   guard let num = Double(num) else { return 0 }\n                          \
    \     ^~~\n/tmp/tmpjlm8jyl7.swift:22:24: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n        if Double(num) % 2 ==\
    \ 0 {\n                       ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpjlm8jyl7.swift:23:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += num\n         \
    \          ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard !lst.isEmpty\
    \ else {\n        return 0\n    }\n\n    var sum = 0\n    for num in lst {\n \
    \       if num % 2 == 1 {\n            sum += num * num\n        }\n    }\n\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpoymp78vc.swift:20:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpoymp78vc.swift:21:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n  var sum = 0\n\
    \  for element in lst {\n    if element >= 0 {\n      sum += element * element\n\
    \    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpil_tbm8g.swift:17:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n      sum += element * element\n          \
    \           ^\n             Int(             )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.isEmpty\
    \ else { return 0 }\n    var res = 0.0\n    var x = 0\n    var y = 0\n    for\
    \ d in lst {\n        x += d\n        y *= d\n    }\n    if y != 0 {\n       \
    \ res = x - y\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgpl17_b2.swift:19:14: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        x += d\n             ^\n          \
    \   Int( )\n/tmp/tmpgpl17_b2.swift:20:14: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n        y *= d\n             ^\n \
    \            Int( )\n/tmp/tmpgpl17_b2.swift:23:17: error: cannot assign value\
    \ of type 'Int' to type 'Double'\n        res = x - y\n              ~~^~~\n \
    \             Double( )\n/tmp/tmpgpl17_b2.swift:25:12: error: cannot convert return\
    \ expression of type 'Double' to return type 'Int'\n    return res\n         \
    \  ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n\n    var sum = 0\n\n    for x in lst {\n \
    \       if x % 2 == 1 {\n            sum += x\n        }\n    }\n\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp8yn6afux.swift:21:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp8yn6afux.swift:22:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tlet size =\
    \ lst.count\n\tvar sum = 0\n\tfor i in 0..<size {\n\t\tif lst[i] > 0 {\n\t\t\t\
    sum += (lst[i] - Double(lst[i]).squareRoot())\n\t\t}\n\t}\n\treturn sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpaxitgw4_.swift:18:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n                        sum += (lst[i] - Double(lst[i]).squareRoot())\n\
    \                                       ^\n                               Int(\
    \                                  )\n"
  stdout: ''
  timestamp: 1659978681
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ != 0 else { return 0 }\n\n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 != 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfytbvcud.swift:18:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfytbvcud.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ < 1 {\n        return 0\n    }\n    return Double.pointee(lst).squared() + Double.pointee(lst).squared()\
    \ - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp8qsg2ixt.swift:17:19: error: type 'Double' has no member 'pointee'\n\
    \    return Double.pointee(lst).squared() + Double.pointee(lst).squared() - 1\n\
    \           ~~~~~~ ^~~~~~~\n/tmp/tmp8qsg2ixt.swift:17:51: error: type 'Double'\
    \ has no member 'pointee'\n    return Double.pointee(lst).squared() + Double.pointee(lst).squared()\
    \ - 1\n                                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if Int(i) & 1 != 0 {\n            sum += i *\
    \ i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpu0ugj2hw.swift:17:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i * i\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tvar sum Int\
    \ = 0\n\tvar found Bool = false\n\tfor x in lst {\n\t\tif !found {\n\t\t\tif x\
    \ == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif x % 2 == 1 {\n\t\t\t\tsum += x\n\
    \t\t\t\tfound = true\n\t\t\t}\n\t\t} else {\n\t\t\tif x % 2 == 0 {\n\t\t\t\tsum\
    \ += x\n\t\t\t}\n\t\t}\n\t}\n\tif !found {\n\t\treturn 0\n\t}\n\treturn sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9e4_uyxw.swift:14:10: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var sum Int\
    \ = 0\n                ^\n/tmp/tmp9e4_uyxw.swift:14:10: note: join the identifiers\
    \ together\n        var sum Int = 0\n            ~~~~^~~\n            sumInt\n\
    /tmp/tmp9e4_uyxw.swift:15:12: error: found an unexpected second identifier in\
    \ variable declaration; is there an accidental break?\n        var found Bool\
    \ = false\n                  ^\n/tmp/tmp9e4_uyxw.swift:15:12: note: join the identifiers\
    \ together\n        var found Bool = false\n            ~~~~~~^~~~\n         \
    \   foundBool\n/tmp/tmp9e4_uyxw.swift:21:9: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n                        if x\
    \ % 2 == 1 {\n                             ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmp9e4_uyxw.swift:22:12: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \                            sum += x\n                                      \
    \ ^\n                                       Int( )\n/tmp/tmp9e4_uyxw.swift:26:9:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n                        if x % 2 == 0 {\n                         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp9e4_uyxw.swift:27:12: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n                                sum += x\n\
    \                                       ^\n                                  \
    \     Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    \n    let\
    \ length = lst.count\n    var sum: Int = 0\n    \n    for i in 0...(length - 1)\
    \ {\n        \n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp12e9hsq9.swift:20:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp12e9hsq9.swift:21:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.IsEmpty()\
    \ {\n        return 0\n    }\n    return Double(reduce(Int32(lst), 0, +))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphc_jq4gz.swift:14:12: error: value of type '[Double]' has no member\
    \ 'IsEmpty'\n    if lst.IsEmpty() {\n       ~~~ ^~~~~~~\n/tmp/tmphc_jq4gz.swift:17:19:\
    \ error: cannot find 'reduce' in scope\n    return Double(reduce(Int32(lst), 0,\
    \ +))\n                  ^~~~~~\n/tmp/tmphc_jq4gz.swift:17:26: error: no exact\
    \ matches in call to initializer \n    return Double(reduce(Int32(lst), 0, +))\n\
    \                         ^\n/tmp/tmphc_jq4gz.swift:17:26: note: found candidate\
    \ with type '(Float16) -> Int32'\n    return Double(reduce(Int32(lst), 0, +))\n\
    \                         ^\n/tmp/tmphc_jq4gz.swift:17:26: note: found candidate\
    \ with type '(Float) -> Int32'\n    return Double(reduce(Int32(lst), 0, +))\n\
    \                         ^\n/tmp/tmphc_jq4gz.swift:17:26: note: found candidate\
    \ with type '(Double) -> Int32'\n    return Double(reduce(Int32(lst), 0, +))\n\
    \                         ^\n/tmp/tmphc_jq4gz.swift:17:26: note: found candidate\
    \ with type '(Float80) -> Int32'\n    return Double(reduce(Int32(lst), 0, +))\n\
    \                         ^\n/tmp/tmphc_jq4gz.swift:17:26: note: found candidate\
    \ with type '(Builtin.Int32) -> Int32'\n    return Double(reduce(Int32(lst), 0,\
    \ +))\n                         ^\n/tmp/tmphc_jq4gz.swift:17:26: note: found candidate\
    \ with type '(String) -> Int32?'\n    return Double(reduce(Int32(lst), 0, +))\n\
    \                         ^\n/tmp/tmphc_jq4gz.swift:17:12: error: no 'init' candidates\
    \ produce the expected contextual result type 'Int'\n    return Double(reduce(Int32(lst),\
    \ 0, +))\n           ^\nSwift.Double:4:12: note: 'init(_:)' produces 'Double',\
    \ not the expected contextual result type 'Int'\n    public init(_ _value: Builtin.FPIEEE64)\n\
    \           ^\nSwift.Double:4:12: note: 'init(_:)' produces 'Double', not the\
    \ expected contextual result type 'Int'\n    public init(_ _value: Builtin.FPIEEE64)\n\
    \           ^\nSwift.Double:4:12: note: 'init(_:)' produces 'Double', not the\
    \ expected contextual result type 'Int'\n    public init(_ _value: Builtin.FPIEEE64)\n\
    \           ^\nSwift.Double:4:12: note: 'init(_:)' produces 'Double', not the\
    \ expect"
  stdout: ''
  timestamp: 1659978681
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for x in lst {\n        if x > 0 {\n            sum += x * x\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpsp6gjzz9.swift:17:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    for elem\
    \ in lst {\n        if elem < 0 {\n            return 0\n        }\n        if\
    \ elem % 2 == 1 {\n            return elem * elem + Double(0)\n        }\n   \
    \ }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpsi9zwo55.swift:18:17: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if elem % 2 == 1 {\n      \
    \          ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpsi9zwo55.swift:19:32: error: cannot convert return expression\
    \ of type 'Double' to return type 'Int'\n            return elem * elem + Double(0)\n\
    \                   ~~~~~~~~~~~~^~~~~~~~~~~\n                   Int(         \
    \          )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ < 1 {\n        return 0\n    }\n    var sumOfSquares = 0.0\n    for i in lst\
    \ {\n        if Int(i) % 2 != 0 {\n            sumOfSquares += i * i\n       \
    \ }\n    }\n    return sumOfSquares\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6ujn_heh.swift:23:12: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sumOfSquares\n           ^~~~~~~~~~~~\n\
    \           Int(        )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n\tswitch lst.count\
    \ {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn lst[0]\n\tdefault:\n\t\tvar\
    \ sum = lst[0]\n\t\tfor item in lst[1:] {\n\t\t\tsum += item\n\t\t}\n\t\treturn\
    \ sum * sum\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp1xl9opqh.swift:21:20: error: expected ',' separator\n         \
    \       for item in lst[1:] {\n                                 ^\n          \
    \                       ,\n/tmp/tmp1xl9opqh.swift:21:20: error: expected expression\
    \ in list of expressions\n                for item in lst[1:] {\n            \
    \                     ^\n/tmp/tmp1xl9opqh.swift:18:13: error: cannot convert return\
    \ expression of type 'Double' to return type 'Int'\n                return lst[0]\n\
    \                       ~~~^~~\n                       Int(  )\n/tmp/tmp1xl9opqh.swift:21:18:\
    \ error: for-in loop requires 'Double' to conform to 'Sequence'\n            \
    \    for item in lst[1:] {\n                            ~~~^~~~\n/tmp/tmp1xl9opqh.swift:24:14:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \                return sum * sum\n                       ~~~~^~~~~\n        \
    \               Int(     )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty\
    \ { return 0 }\n    var sum = 0\n    for item in lst {\n        if item % 2 ==\
    \ 1 {\n            sum += item\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpml_v9l3l.swift:17:17: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if item % 2 == 1 {\n      \
    \          ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpml_v9l3l.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += item\n                 \
    \  ^\n                   Int()\n"
  stdout: ''
  timestamp: 1659978681
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n\n    var sum = 0\n    for n in lst {\n        if n %\
    \ 2 == 1 {\n            sum += n\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb4zvg9r.swift:18:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpbb4zvg9r.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659978681
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for v in lst {\n     \
    \   if v < 0 {\n            return 0\n        }\n        sum += v\n    }\n   \
    \ return sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvjbfa4c1.swift:22:16: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v\n               ^\n      \
    \         Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.isEmpty()\
    \ {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n        sum\
    \ += x * x\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpg92t1div.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpg92t1div.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659978680
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else {\n        return 0\n    }\n    var sum = 0\n    for i in 0 ..< lst.count\
    \ {\n        if let num = lst[i] as? Double {\n            if num % 2 != 0 {\n\
    \                sum += num\n            }\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplp6etj2t.swift:19:29: warning: conditional cast from 'Double' to\
    \ 'Double' always succeeds\n        if let num = lst[i] as? Double {\n       \
    \                     ^\n/tmp/tmplp6etj2t.swift:20:20: error: '%' is unavailable:\
    \ For floating point numbers use truncatingRemainder instead\n            if num\
    \ % 2 != 0 {\n                   ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmplp6etj2t.swift:21:24: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n                sum += num\n     \
    \                  ^\n                       Int( )\n"
  stdout: ''
  timestamp: 1659978680
