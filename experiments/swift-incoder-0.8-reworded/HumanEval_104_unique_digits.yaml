name: HumanEval_104_unique_digits
language: swift
prompt: "\n/// Given an array of positive integers x. return a sorted array of all\
  \ \n/// elements that hasn't any even digit.\n/// Note: Returned array should be\
  \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15, 33,\
  \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n///\
  \ [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1,\
  \ 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
  \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31])\
  \ == [31, 135])"
completions: ["    var result = [Int]()\n    var last = 0\n    for num in x {\n  \
    \      if num != last {\n            result.append(num)\n        }\n        last\
    \ = num\n    }\n    return result.sorted()", '    return x.filter { Int(String($0))
    % 2 == 1 }', "    var ans = [Int]()\n    \n    // remove even digits\n    for\
    \ d in x.filter({ $0 % 2 == 0 }) {\n        ans.append(d)\n    }\n    \n    //\
    \ sort and remove duplicates\n    ans.sort({ $0 < $1 })\n    ans = ans.filter({\
    \ !ans.contains($0) })\n    \n    return ans", "    var a = x.sorted { $0 < $1\
    \ }\n    var unique = [Int]()\n    for _ in 0..<x.count {\n        if unique.contains(a[$0])\
    \ {\n            break\n        }\n        if a[$0] % 2 == 0 {\n            unique.append(a[$0])\n\
    \        }\n    }\n    return unique.sorted()", "    let y = [Int]()\n    \n \
    \   for i in x {\n        if !contains(y, i) {\n            y.append(i)\n    \
    \    }\n    }\n    return y", "    var tmp = [Int]()\n    \n    for i in x {\n\
    \        let index = 0\n        \n        while index < x.count && x[index] %\
    \ i == 0 {\n            index += 1\n        }\n        \n        tmp.append(i)\n\
    \    }\n    \n    return tmp", "    var result: [Int] = []\n    \n    for num\
    \ in x {\n        if num % 2 == 0 && result.count < 3 {\n            result.append(num)\n\
    \        }\n    }\n    \n    return result", "    var result = [Int]()\n    \n\
    \    for num in x {\n        if num != 0 && (num % 10).isMultiple(2) {\n     \
    \       result.append((num % 10).toInt())\n        }\n    }\n    \n    return\
    \ result", "    \n    var ret = [Int]()\n    \n    for var i=0; i<x.count; i++\
    \ {\n        var cnt = 0\n        for j=i; j<x.count; j++ {\n            if x.[j]\
    \ % 10 == 0 {\n                cnt++\n            }\n        }\n        if cnt\
    \ == 0 {\n            ret.append(x.[i])\n        }\n    }\n    \n    return ret",
  "    let sorted = x.sorted(by: { $0 < $1 })\n    return sorted.filter { Int(String($0))\
    \ %2 == 0 }", '    return x.filter{ $0 % 2 != 0 }.sorted()', "    var result:\
    \ [Int] = []\n    var j = 0\n    for i in x {\n        if i == 0 { continue }\n\
    \        if i / 2 % 10 != 0 {\n            result[j] = i\n            j += 1\n\
    \        }\n    }\n    return result", "    \n    let evenDigit = x.filter { $0\
    \ % 2 == 0 }\n    var allOddDigit = x.filter { $0 % 2 != 0 }\n    \n    if evenDigit.count\
    \ > 1 {\n        allOddDigit = allOddDigit.filter { $0 % 2 != 0 }\n    }\n   \
    \ \n    var result: [Int] = []\n    \n    var index = 0\n    var num: Int = 0\n\
    \    while index < x.count {\n        \n        if index == 0 {\n            num\
    \ = x[index]\n        } else {\n            num = allOddDigit[index] - allOddDigit[index\
    \ - 1]\n        }\n        \n        if num == 0 {\n            result.append(num)\n\
    \        }\n        \n        index++\n        \n    }\n    \n    return result",
  "    let digits = x.map{String($0).last!}\n    let uniqueDigits = Array(Set(digits).sorted(by:\
    \ <))\n    return uniqueDigits", "    \n    var res = []\n    for i in x {\n \
    \       let num = i.digits\n        let digits = num.filter { $0 % 2 == 0 }\n\
    \        if !digits.isEmpty {\n            res.append(i)\n        }\n    }\n \
    \   \n    return res", "    var result = [Int]()\n    var i = x.count - 1\n  \
    \  \n    while i >= 0 {\n        if x[i].isMultiple(of: 2) {\n            result.append(x[i])\n\
    \        }\n        i -= 1\n    }\n    \n    return result", "    var arr: [Int]\
    \ = []\n    \n    for i in x {\n        let digit = String(i).first!\n       \
    \ if digit == \"0\" && arr.count > 0 {\n            arr.removeFirst()\n      \
    \  } else if digit == \"0\" {\n            arr.append(i)\n        } else {\n \
    \           arr.append(i)\n        }\n    }\n    \n    return arr", "    var counter\
    \ = [Int]()\n    var result = [Int]()\n    for i in 0..<x.count {\n        if\
    \ counter.contains(x[i]) { continue }\n        counter.append(x[i])\n        result.append(x[i])\n\
    \    }\n    return result", "    var arr: [Int] = [x]\n    var arr2 = []\n\n \
    \   for n in arr {\n        guard n > 0 else {\n            continue\n       \
    \ }\n\n        if n % 2 == 0 {\n            arr2.append(n)\n        }\n    }\n\
    \n    return arr2", "  var y = [Int]()\n  \n  for y in x {\n    if let lastDigit\
    \ = y - lastDigit(x) {\n      continue\n    }\n    \n    y.append(y)\n  }\n  \n\
    \  return y", "    var result = [Int]()\n    for num in x {\n        let digit\
    \ = num % 10\n        if digit == 0 {\n            continue\n        }\n     \
    \   let index = result.index(of: digit)\n        if index != nil {\n         \
    \   result.remove(at: index!)\n        } else {\n            result.append(digit)\n\
    \        }\n    }\n    return result", "    var a = x.sort()\n    var result =\
    \ [Int]()\n    \n    for i in 0..<a.count-2 {\n        if a[(i + 2)]%2 != 0 {\n\
    \            result.append(a[i])\n        }\n    }\n    \n    return result",
  "    var result = [Int]()\n    var temp = 0\n    var index = 0\n    for number in\
    \ x {\n        if number % 2 == 0 {\n            temp += 1\n        } else {\n\
    \            while (temp > 0 && number % 10 == temp % 10) {\n                temp\
    \ -= 10\n            }\n            result.append(number - temp)\n           \
    \ temp = number / 10\n        }\n    }\n    return result", "    \n    // Create\
    \ a set to hold the result and remove all the even digit\n    var evenDigitSet\
    \ = Set<Int>()\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      evenDigitSet.insert(element)\n        } else {\n            // remove the\
    \ even digit\n            evenDigitSet.insert(element % 10)\n        }\n    }\n\
    \n    // Create a set to hold the result and remove all the odd digit\n    var\
    \ oddDigitSet = Set<Int>()\n    for element in x {\n        if element % 2 !=\
    \ 0 {\n            oddDigitSet.insert(element)\n        } else {\n           \
    \ // remove the odd digit\n            oddDigitSet.insert(element % 10)\n    \
    \    }\n    }\n\n    // Combine the both sets to form a new array \n    var resultSet\
    \ = Set<Int>()\n    for element in evenDigitSet {\n        if !oddDigitSet.contains(element)\
    \ {\n            resultSet.insert(element)\n        }\n    }\n\n    return resultSet",
  "    var ret: [Int] = [x]\n    var found: Bool = false\n    for y in x {\n     \
    \   if found {\n            if y % 2 == 0 {\n                ret.removeLast()\n\
    \            } else {\n                ret.append(y)\n            }\n        }\
    \ else {\n            if y % 2 != 0 {\n                ret.removeLast()\n    \
    \            ret.append(y)\n            } else {\n                found = true\n\
    \            }\n        }\n    }\n    return ret", "    var new_x = [Int]()\n\
    \    for i in x {\n        if i % 2 != 0 {\n            new_x.append(i)\n    \
    \    }\n    }\n    return new_x", "    var arr: [Int] = []\n    for el in x {\n\
    \        let digit = Int(String(el))\n        if digit!%2 == 0 {\n           \
    \ arr.append(el)\n        }\n    }\n    return arr", "    var res = make([Int](),\
    \ maxLen(x))\n    for element in x {\n        let len = count(element: element,\
    \ max: 10)\n        if len == 0 {\n            append(res: &res, value: element)\n\
    \        } else {\n            for index in 0..len {\n                if element\
    \ % 10 != 0 {\n                    append(res: &res, value: element)\n       \
    \             break\n                }\n                element = element / 10\n\
    \            }\n        }\n    }\n    return res", "    let len = x.count\n  \
    \  var res = Array(0..<len).map({ Int(\"\\(x.first! * 10 % 10) % 10\") })\n  \
    \  var flag = false\n    for i in 0..<len {\n        if res[i] == 0 && !flag {\n\
    \            res[i] = 1\n            flag = true\n        } else if res[i] !=\
    \ 0 && !flag {\n            flag = true\n        }\n    }\n    return res.filter\
    \ { $0 == 0 }", "    var res = [Int]()\n    var evenDigits = [Int]()\n    for\
    \ d in x {\n        if d % 2 == 0 {\n            evenDigits.append(d)\n      \
    \  } else {\n            for e in evenDigits {\n                if e % 2 == 0\
    \ {\n                    e = e / 2\n                    res.append(e)\n      \
    \              break\n                } else {\n                    e = 1\n  \
    \              }\n            }\n        }\n    }\n    return res", "    var res:\
    \ [Int] = []\n    x.sort {$0 % 10 > $1 % 10}\n    x.forEach {\n        if $0 %\
    \ 2 == 0 {\n            res.append($0)\n        }\n    }\n    return res", " \
    \   var result = Set<Int>()\n    for num in x {\n        var strNum = String(num)\n\
    \        for char in strNum {\n            if char.isDigit() && char.isASCII()\
    \ {\n                if !result.contains(Int(char)) {\n                    result.insert(Int(char))\n\
    \                }\n            }\n        }\n    }\n    var resultArray = [Int]()\n\
    \    for num in result {\n        resultArray.append(num)\n    }\n    return Array(resultArray)",
  "  var result = [Int]()\n  var i = 0\n  for elem in x {\n    if elem % 2 == 0 {\n\
    \      result.insert(elem, at: i)\n    }\n    i += 1\n  }\n  return result", " \
    \   let result = [Int]()\n    for d in x {\n        if d % 2 == 0 {\n        \
    \    continue\n        }\n        if result.contains(d) {\n            continue\n\
    \        }\n        result.append(d)\n    }\n    return result", "    let res\
    \ = [Int]()\n    for n in x {\n        res.contains(Int(String(n.toInt().digits)))\n\
    \            ? res[res.index(of: Int(String(n.toInt().digits)))] = n\n       \
    \     : res.append(n)\n    }\n    return res", "    var digits = Set<Int>()\n\
    \    var result: [Int] = []\n    for x in x {\n        if !digits.contains(x %\
    \ 10) {\n            result.append(x % 10)\n            digits.insert(x % 10)\n\
    \        }\n    }\n    return result", "    let res = x.filter({ $0 % 10 != 0\
    \ })\n    if res.isEmpty {\n        return res\n    }\n\n    return res.sorted()",
  "    var output = [Int]()\n    for ele in x {\n        if let i = Int(ceil(log10(ele)))\
    \ where i > 0{\n            if ele % 10 == 0 && ele != 0{\n                output\
    \ = append(output, ele)\n            }\n        }\n    }\n    return output",
  "    \n    // Write your code here\n    var result = [Int]()\n    var count = 0\n\
    \    \n    for i in x {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \            count = count + 1\n        }\n    }\n    \n    if count == x.count\
    \ {\n        result.append(x.last!)\n    }\n    \n    return result", '    return
    x.filter({ x in x % 10 != 0 }).sorted()', "    var result = [Int]()\n    var temp:\
    \ Int = Int()\n    var first: Bool = false\n    for i in x {\n        if i % 2\
    \ != 0 {\n            first = i\n        } else {\n            temp = first\n\
    \            if temp % 10 == i {\n                first = Int()\n            }\
    \ else {\n                result.append(temp)\n                first = i\n   \
    \         }\n        }\n    }\n    if !first {\n        result.append(first)\n\
    \    }\n    return result", "    var uniques = [Int]()\n    var result = [Int]()\n\
    \    for i in x {\n        if let digit = i % 10 {\n            if !uniques.contains(digit)\
    \ {\n                uniques.append(digit)\n            }\n        } else {\n\
    \            if !result.contains(i) {\n                result.append(i)\n    \
    \        }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var j = 0\n    for i in x {\n        while j < len(result) && result[j] ==\
    \ i % 10 {\n            j += 1\n        }\n        if j == len(result) {\n   \
    \         result.append(i)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    \n    if x.isEmpty() {\n        return result\n    }\n    \n\
    \    for i in x {\n        for j in x {\n            if i != j && i % j == 0 {\n\
    \                result.append(j)\n            }\n        }\n    }\n    \n   \
    \ return result", '    return unique_digits(x, 0, length: x.count)', "    var\
    \ result = [Int]()\n    for n in x {\n        if n.isOdd() {\n            for\
    \ digit in n.digits.reverse() {\n                if digit % 2 == 1 {\n       \
    \             result.append(digit)\n                    break\n              \
    \  }\n            }\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    return result", "    guard x.count > 0 else { return [] }\n    var\
    \ index = 0\n    var res = []\n    while index < x.count {\n        var isOdd\
    \ = false\n        let x = x[index]\n        let str = String(format: \"%03d\"\
    , x)\n        for digit in str {\n            if Int(digit) % 2 == 0 {\n     \
    \           isOdd = true\n            }\n        }\n        if isOdd {\n     \
    \       res.append(x)\n        } else {\n            index += 1\n        }\n \
    \   }\n    \n    return res", "    var digits: [Int] = []\n    var index = 0\n\
    \    var digit = x.first!\n    repeat{\n        if x.index(before: &digit, equalTo:\
    \ digit) != nil {\n            let index = x.index(before: &digit, equalTo: digit)\n\
    \            digits[index] = digit\n        }else if index != 0 {\n          \
    \  digits.append(digit)\n        }\n        digit = x.next!\n    }while( x.next()\
    \ != nil )\n    digits.reverse()\n    return digits", "    var evenDigits : [Int]\n\
    \    var unevenDigits : [Int]\n    \n    for i in x {\n        if i % 2 == 0 {\n\
    \            evenDigits.append(i)\n        } else {\n            unevenDigits.append(i)\n\
    \        }\n    }\n    \n    return evenDigits", "    var result: [Int] = []\n\
    \    var seen: [Int] = []\n    var number: Int = 0\n    for d in x {\n       \
    \ number += d\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ results = [Int]()\n    \n    for n in x {\n        if n % 2 != 0 {\n       \
    \     results.append(n)\n        }\n    }\n    \n    return results", "    var\
    \ res: [Int] = []\n    var i = 0\n    while i < x.count {\n        if i % 2 ==\
    \ 0 {\n            res.append(x[i])\n        }\n        i += 1\n    }\n    \n\
    \    return res", "    \n    var result: [Int] = []\n    var isEven: [Int] = [Int]()\n\
    \    \n    for i in x {\n        if isEven.contains(i) {\n        } else {\n \
    \           isEven.append(i)\n            result.append(i)\n        }\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    var i = 0\n    for n\
    \ in x {\n        guard n % 10 == 0 else { continue }\n        result.append(n)\n\
    \        i += 1\n    }\n    for i in 0 ..< result.count {\n        if i == 0 ||\
    \ result[i - 1] > result[i] {\n            result.remove(at: i)\n        }\n \
    \   }\n    return result", "    var result = Array(0..<x.count).filter{ x in\n\
    \        let digit = x%10\n        return digit == 0\n    }.sorted()\n    if result.count\
    \ == 0 {\n        return result\n    }\n    for x in result {\n        if !x.isMultiple(of:\
    \ 2) { result.remove(x); break }\n    }\n    return result", "    var evenDigitsList\
    \ = Set<Int>()\n    var evenDigitsArray = Array<Int>()\n    for i in x {\n   \
    \     if i.isMultiple(2) {\n            evenDigitsArray.append(i)\n        } else\
    \ {\n            if let v = evenDigitsList.member(i) {\n                evenDigitsArray.removeAll(where:\
    \ { $0 == v })\n            } else {\n                evenDigitsArray.append(i)\n\
    \            }\n        }\n    }\n    return evenDigitsArray", "    var result\
    \ = [Int]()\n    for i in x {\n        if i % 2 != 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result : [Int] = []\n    var count\
    \ = 0\n    \n    for n in x {\n        if n % 10 == 0 {\n            count +=\
    \ 1\n        }\n    }\n\n    if count == 0 {\n        return result\n    }\n\n\
    \    for n in x {\n        if n % 10 != 0 {\n            result.append(n)\n  \
    \      }\n    }\n\n    result.sortInPlace()\n    return result", "    var result\
    \ = Array()\n    for i in x {\n        let digit = i % 10\n        if result .contains(digit)\
    \ {\n            continue\n        }\n        result.append(i)\n    }\n    return\
    \ result", "    \n    var x0 = x.map { $0 }\n    x0.sortInPlace()\n    var result\
    \ = x0\n    var seen = Set<Int>()\n    \n    for _ in 0..<x.count {\n        if\
    \ seen.contains(x0.last!) {\n            break\n        }\n        else {\n  \
    \          seen.add(x0.last!)\n            guard let last = x0.last else {\n \
    \               break\n            }\n            if let lastDigit = Int(last)\
    \ else {\n                break\n            }\n            if lastDigit % 2 ==\
    \ 0 {\n                result.removeLast()\n            }\n            else {\n\
    \                result.append(last)\n            }\n        }\n    }\n    return\
    \ result", "    var result = Array<Int>(repeating: 0, count: x.count)\n    for\
    \ i in 0 ..< x.count {\n        let current = x[i]\n        if current % 2 ==\
    \ 0 {\n            continue\n        }\n        var index = 0\n        while index\
    \ < result.count {\n            let item = result[index]\n            if item\
    \ == current {\n                break\n            }\n            index += 1\n\
    \        }\n        \n        // found a duplicate\n        if index >= result.count\
    \ {\n            result.append(current)\n        }\n    }\n    \n    return result",
  "    if x.isEmpty { return [] }\n    var ans = [Int]()\n    for n in x {\n     \
    \   var isEven = false\n        if n % 10 == 0 {\n            isEven = true\n\
    \            n = n%10\n        }\n        for _ in ans.indices {\n           \
    \ if n % 2 == 0 {\n                isEven = true\n                break\n    \
    \        }\n            n /= 10\n        }\n        if isEven { ans.append(n)\
    \ }\n    }\n    return ans", "    let arr: [Int] = x.filter{$0 % 2 != 0}.sorted()\n\
    \    return arr", "    \n    // your code here\n    \n    return x.filter { $0\
    \ % 2 == 0 }", "    var i = 0\n    var ans = [Int]()\n    \n    for _ in 0..<x.count\
    \ {\n        \n        if ((i % 2) == 0) {\n            ans.append(x[i])\n   \
    \     }\n        i += 1\n    }\n    \n    return ans", "    \n    var ans = [Int]()\n\
    \    \n    for i in 0..<x.count {\n        if i % 2 == 0 {\n            for j\
    \ in ans.indices{\n                if x[i] == x[j]{\n                    ans.removeAtIndex(i)\n\
    \                    break\n                }\n            }\n        } else {\n\
    \            ans.append(x[i])\n        }\n    }\n    \n    return ans", "    var\
    \ res: [Int] = []\n    var digits: [String] = []\n    \n    for n in x {\n   \
    \     if let str = n.description {\n            digits.append(str)\n        }\n\
    \    }\n    \n    for digit in digits {\n        if digit.hasPrefix(\"0\") {\n\
    \            continue\n        }\n        \n        let idx = digits.index(of:\
    \ digit)!\n        res.append(x[idx])\n    }\n    \n    return res", '    return
    x.filter { $0 % 10 == 0 }.sorted(by: >)', "    var result = [Int]()\n    for n\
    \ in x {\n        let reversedDigits = reverseDigits(n: n)\n        var evenDigit\
    \ = false\n        for digit in reversedDigits {\n            if digit % 2 !=\
    \ 0 {\n                evenDigit = true\n                break\n            }\n\
    \        }\n        if !evenDigit {\n            result.append(n)\n        }\n\
    \    }\n    return result", "    var result = Array<Int>()\n    x.sorted(by: {\
    \ (lhs, rhs) -> Bool in\n        return lhs.isMultiple(of: rhs) && !lhs.isMultiple(of:\
    \ rhs.quotient())\n    }).forEach {\n        if result.contains($0.quotient())\
    \ {\n            return\n        }\n        guard $0.isMultiple(of: 2) else {\
    \ return }\n        result.append($0)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var j = 0\n    for i in x {\n        for j in 0 ..< result.count\
    \ {\n            let y = i + result[j]\n            if y % 2 == 0 && y != 0 {\n\
    \                result.insert(i, at: j)\n                break\n            }\n\
    \        }\n    }\n    return result", "    var ret = [Int]()\n    \n    for i\
    \ in x {\n        let str = String(i)\n        let nums = str.unicodeScalars\n\
    \        \n        for j in nums {\n            if String(j).utf16.first % 2 ==\
    \ 0 {\n                break\n            }\n        }\n        \n        ret.append(i)\n\
    \    }\n    \n    return ret.sorted()", "    \n    var result: [Int] = []\n  \
    \  \n    for val in x {\n        let digits = Array(String(val).prefix(2))\n \
    \       if digits.count < 2 {\n            result.append(val)\n        } else\
    \ {\n            if digits.contains(where: { $0 % 2 == 0 }) {\n              \
    \  result.append(val)\n            }\n        }\n    }\n    \n    return result",
  "    var uniques = [Int]()\n    for i in x {\n        guard i % 2 != 0 else {\n\
    \            uniques.append(i)\n        }\n    }\n    return uniques", "    var\
    \ result = Set<Int>()\n    var result2 = Set<Int>()\n    var result3 = Set<Int>()\n\
    \    for n in x {\n        let stringToConvert = n.description\n        let stringToConvert\
    \ = stringToConvert.replacingOccurrences(of: \".\", with: \"\")\n        let stringToConvert\
    \ = stringToConvert.replacingOccurrences(of: \"0\", with: \"\")\n        let stringToConvert\
    \ = stringToConvert.replacingOccurrences(of: \" \", with: \"\")\n        let intValueFromString\
    \ = Int(stringToConvert)\n        if intValueFromString.isMultiple(of: 2) {\n\
    \            if result.contains(intValueFromString) {\n                result2.insert(intValueFromString)\n\
    \            } else {\n                result.insert(intValueFromString)\n   \
    \             result2.insert(intValueFromString)\n            }\n        }\n \
    \   }\n    for n in x {\n        let stringToConvert = n.description\n       \
    \ let stringToConvert = stringToConvert.replacingOccurrences(of: \".\", with:\
    \ \"\")\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n        let stringToConvert = stringToConvert.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let intValueFromString = Int(stringToConvert)\n\
    \        if intValueFromString.isMultiple(of: 3) {\n            if result2.contains(intValueFromString)\
    \ {\n                result3.insert(intValueFromString)\n            } else {\n\
    \                result2.insert(intValueFromString)\n                result3.insert(intValueFromString)\n\
    \            }\n        }\n    }\n    var sortedArray = [Int]()\n    sortedArray\
    \ = result.sorted(by: <)\n    sortedArray = sortedArray.sorted(by: <)\n    sortedArray\
    \ = sortedArray.sorted(by: <)\n    sortedArray = sortedArray.sorted(by: <)\n \
    \   sortedArray = result2.sorted(by: <)\n    sortedArray = sortedArray.sorted(by:\
    \ <)\n    sortedArray = sortedArray.sorted(by: <)\n    sortedArray = sortedArray.sorted(by:\
    \ <)\n    sortedArray = sortedArray.sorted(by: <)\n    sortedArray = result3.sorted(by:\
    \ <)\n    sortedArray = sortedArray.sorted(by: <)\n    sortedArray = sortedArray.sorted(by:\
    \ <)\n    sortedArray = sortedArray.sorted(by: <)\n    return sortedArray", " \
    \   var res = Set<Int>()\n    var res2 = Set<Int>()\n    \n    for num in x {\n\
    \        for num2 in x {\n            if num2 == num {\n                continue\n\
    \            }\n            if num2 % num == 0 {\n                if !res.contains(num2)\
    \ {\n                    res.insert(num2)\n                }\n               \
    \ if !res2.contains(num) {\n                    res2.insert(num)\n           \
    \     }\n            }\n        }\n    }\n    return res2.subtracting(res)", " \
    \   var result: [Int] = []\n    for val in x {\n        var flag = false\n   \
    \     for val2 in result {\n            if val2 % 2 == 0 {\n                flag\
    \ = true\n                break\n            }\n        }\n        if !flag {\n\
    \            result.append(val)\n        }\n    }\n    return result.sorted()",
  "    var uniqueDigit: [Int] = []\n    for i in x {\n        var index = 0\n    \
    \    var isEvenDigit = false\n        \n        for j in uniqueDigit {\n     \
    \       if i == j {\n                isEvenDigit = true\n                break\n\
    \            } else if i == j % 10 {\n                index = index + 1\n    \
    \        }\n        }\n        \n        if isEvenDigit == false {\n         \
    \   uniqueDigit.insert(i, at: index)\n        }\n    }\n    \n    return uniqueDigit.sorted()",
  "    let copy = x.sorted()\n    return copy.filter({ $0 % 2 == 0 })", "    \n  \
    \  var evenDigit = [Int]()\n    var i = 0\n    \n    while i < x.count {\n   \
    \     var index = x[i].roundedInt() / 10\n        if evenDigit.contains(index)\
    \ {\n            continue\n        } else {\n            evenDigit.insert(index,\
    \ at: 0)\n        }\n        i += 1\n    }\n    \n    return evenDigit", "   \
    \ var ret: [Int] = []\n    var i = 0\n    var j = 0\n    while i < x.count {\n\
    \        j = 0\n        while j < x.count && x[i] == x[j] {\n            j++\n\
    \        }\n        if j == x.count {\n            ret.append(x[i])\n        }\n\
    \        if x[i] % 2 == 0 {\n            i += 1\n        } else {\n          \
    \  i += 1\n        }\n    }\n    return ret", "    var tmp: [Int] = []\n    var\
    \ sum: Int = 0\n    for i in x {\n        sum += Int(i)\n        tmp.append(sum)\n\
    \    }\n    tmp.sort(by: {$0 < $1})\n    return tmp", "    var result: [Int] =\
    \ []\n    for i in x {\n        let remainder = i % 10\n        if remainder %\
    \ 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result.sorted(by:\
    \ { $0 < $1 })", '    return x.sorted(by: >)', "    \n    var result: [Int] =\
    \ []\n    \n    for number in x {\n        let digitsCount = Int(log10(Double(number)))\
    \ + 1\n        var digitSet: [Int] = []\n        \n        for index in 0 ..<\
    \ digitsCount {\n            let digit = number % 10\n            if digitSet.contains(digit)\
    \ {\n                continue\n            } else {\n                digitSet.append(digit)\n\
    \            }\n        }\n        \n        if digitSet.count > 0 {\n       \
    \     result = result + [number]\n        }\n    }\n    \n    return result",
  "    var ans = [0]\n    for i in x {\n        if ans.contains(i / 10) {\n      \
    \      continue\n        }\n        ans.insert(i / 10)\n    }\n    return ans",
  "    var numbers = x\n    numbers = numbers.filter({ x -> Int in\n        return\
    \ x.isMultiple(of: 0)\n    })\n    return numbers.sorted(by: { a, b in\n     \
    \   if a < b {\n            return true\n        }\n        return false\n   \
    \ })", "    // write your code in Swift 4.2 or later\n    var result = x.filter({\
    \ $0 % 10 != 0 }).sorted()\n    let length = x.count\n    for i in 0..<length\
    \ {\n        if result[i] == x[i] {\n            result.remove(at: i)\n      \
    \      x.remove(at: i)\n        }\n    }\n    return result", "    var unique\
    \ = [Int]()\n    \n    for i in x {\n        let digit = String(i).characters(separatedBy:\
    \ CharacterSet.decimalDigits.inverted).joined()\n        \n        if unique.contains(digit)\
    \ == false {\n            unique.append(digit)\n        }\n    }\n    \n    return\
    \ unique", "    var result = [Int]()\n    var n = x.count\n    for i in 0...n\
    \ {\n        let s = x.filter { $0 % i == 0 }\n        if s.count != n {\n   \
    \         result = result.appendContentsOf(s.sorted(by: >))\n        }\n    }\n\
    \    return result", "    var result: [Int] = [0]\n    for e in x {\n        if\
    \ result.contains(e) == false {\n            result.append(e)\n        }\n   \
    \ }\n    return result", "    var output = [Int]()\n    var dig = x[0].digits\n\
    \    for i in x {\n        guard dig.contains(&i) else {\n            dig.append(i)\n\
    \            output.append(i)\n        }\n    }\n    output.reverse()\n    return\
    \ output", "    var result: [Int] = []\n    for x in x {\n        if x % 2 ==\
    \ 0 {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   \n    let count = x.count\n    \n    // use unsorted array as buffer\n   \
    \ var buffer: [Int] = [0] * count\n    \n    var index = 0\n    \n    while index\
    \ < count {\n        buffer[index] = x[index]\n        index += 1\n    }\n   \
    \ \n    // sort the buffer\n    buffer.sort()\n    \n    var result: [Int] = []\n\
    \    \n    for _ in 0..<buffer.count {\n        \n        var index = -1\n   \
    \     \n        if buffer[index] % 2 == 0 {\n            \n            let lastIndex\
    \ = index\n            \n            // find out the index of digit that hasn't\
    \ any even\n            do {\n                \n                index = (lastIndex\
    \ + 1) % buffer.count\n                \n            } while buffer[index] % 2\
    \ == 0\n            \n            if lastIndex != index {\n                \n\
    \                result.insert(buffer[index], at: 0)\n                \n     \
    \           buffer[index] = 0\n            }\n            \n        }\n      \
    \  \n    }\n    \n    return result", "  var newArray = [0]\n  for x in x {\n\
    \    if newArray.contains(Int(x)/10) {\n      continue\n    }\n    newArray.append(x)\n\
    \  }\n  return newArray", "    var res = [Int]()\n    \n    if x.count <= 0 {\n\
    \        return res\n    }\n\n    var x = x[0]\n    var idx = 1\n    \n    while\
    \ idx < x.count {\n        if x.isMultiple(Int(x.floor() + idx / 2)) {\n     \
    \       x.subtract(Int(x.floor() + idx / 2))\n            res.append(self[idx])\n\
    \        }\n        idx += 1\n    }\n    return res", "    \n    var unique_digits\
    \ = [Int]()\n    var index = 0\n    \n    for number in x {\n        if number\
    \ % 2 == 0 {\n            unique_digits.append(number)\n        } else {\n   \
    \         while index < unique_digits.count && unique_digits[index] != number\
    \ {\n                index += 1\n            }\n            unique_digits.insert(index,\
    \ number)\n        }\n    }\n    \n    return unique_digits", "    var newSet\
    \ = [Int]()\n    for el in x {\n        if isEven(el) {\n            newSet.append(el)\n\
    \        }\n    }\n    return newSet", "    var unique: [Int] = []\n    let n\
    \ = x.count\n    for i in 0..<n {\n        let k = x[i]\n        if (k % 2 ==\
    \ 0) {\n            let j = (k / 2)\n            while (j < n) {\n           \
    \     let tmp = x[j]\n                if (tmp == k) {\n                    j++\n\
    \                }\n                else if tmp % 2 != 0 {\n                 \
    \   break\n                }\n                else {\n                    unique.append(k)\n\
    \                }\n            }\n        }\n    }\n    return unique", "   \
    \ var result = Array()\n    \n    for n in x {\n        if n % 2 == 0 {\n    \
    \        result.append(n)\n        }\n    }\n    \n    if result.isEmpty {\n \
    \       result.append(0)\n    }\n    \n    result.sort()\n    \n    return result",
  "    var res = Set<Int>()\n    for v in x {\n        if !res.contains(v) {\n   \
    \         res.insert(v)\n        }\n    }\n    return res.sorted()", "    \n \
    \   let n = x.count\n    let resultSet: [Int] = x.filter{ $0 % 10 != 0 }.sorted()\n\
    \    \n    for i in 0..<n {\n        if resultSet[i] == 0 {\n            resultSet.remove(at:\
    \ i)\n        }\n    }\n    return resultSet", "    let result = Set<Int>()\n\
    \    var resultSorted = [Int]()\n    \n    for i in x {\n        if result.contains(i)\
    \ {\n            continue\n        } else {\n            result.insert(i)\n  \
    \          resultSorted += [i]\n        }\n    }\n    \n    return resultSorted",
  "    var res = x\n    var count = 0\n    for num in res {\n        if num % 2 ==\
    \ 0 {\n            count++\n        }\n    }\n    var a = [Int]()\n    for num\
    \ in res {\n        if num % 2 == 0 {\n            a += num\n        }\n    }\n\
    \    a = sorted(a)\n    for i in 0..<count {\n        if a[i] == a[i+1] {\n  \
    \          a.removeAtIndex(i+1)\n        }\n    }\n    return a", "    var returnArr:\
    \ [Int] = []\n    for i in x {\n        if i % 2 != 0 {\n            returnArr.append(i)\n\
    \        }\n    }\n    return returnArr", "    var result: [Int] = []\n    var\
    \ cnt = 0\n    for x in x {\n        if x.isMultiple(2) {\n            if result.contains(x)\
    \ {\n                continue\n            } else {\n                result.append(x)\n\
    \            }\n        } else {\n            cnt += 1\n        }\n    }\n   \
    \ return result ", "    \n    // Your code here\n    var result = [0]\n    x.filter\
    \ { (item) -> Bool in\n        if item % 2 == 0 {\n            return false\n\
    \        } else {\n            result[0]++\n            return true\n        }\n\
    \    }\n    return result.map { $0*10 }\n    ", "    var result = Set<Int>()\n\
    \    \n    for num in x {\n        let digits = num / 10\n        let remainder\
    \ = num % 10\n        \n        if !result.contains(digits) && !result.contains(remainder)\
    \ {\n            result.insert(digits)\n            result.insert(remainder)\n\
    \        }\n    }\n    \n    return result.sorted().map { $0 * 10 + $1 }", " \
    \   var ans = [Int]()\n    var i = x.count\n    var j = 0\n    var k = 0\n\n \
    \   while i >= 0 {\n        if j >= i {\n            ans.append(x[i])\n      \
    \  }\n        if j == i {\n            j++\n        }\n        if x[i]%2 == 0\
    \ {\n            i = i-1\n        } else {\n            j = j+1\n        }\n \
    \   }\n    return ans", "    var i = 0\n    var result = [Int]()\n    for element\
    \ in x {\n        var element = element % 10\n        i += 1\n        if element\
    \ == 0 {\n            continue\n        }\n        while i > 0 && x[i-1] / 10\
    \ == element {\n            element /= 10\n            i -= 1\n        }\n   \
    \     if element != 0 {\n            result.append(element)\n        }\n    }\n\
    \    return result", "    var result = Int()\n    let n = x.count\n    var i =\
    \ n - 1\n    while i >= 0 {\n        let r = x / 10\n        if r != 0 {\n   \
    \         if x % 10 == 0 {\n                result.appendContentsOf(x)\n     \
    \           x -= r\n            } else {\n                x -= r\n           \
    \ }\n            i -= 1\n        } else {\n            i -= 1\n        }\n   \
    \ }\n    if x > 0 && x % 10 == 0 {\n        result.appendContentsOf(x)\n    }\n\
    \    return result", "    var res = [Int]()\n    for element in x {\n        for\
    \ _ in 0..<element.truncatingRemainder(10).truncatingRemainder(10) {\n       \
    \     if res.contains(element) {\n                continue\n            }\n  \
    \          res.append(element)\n        }\n    }\n    return res", "    var res:\
    \ [Int] = []\n    var arr = [Int]()\n\n    for n in x {\n        let str = n.description\n\
    \        let n = Int(str)\n        if n % 10 == 0 && arr.count <= 5 {\n      \
    \      arr.append(n)\n        }\n    }\n\n    if arr.count > 5 {\n        for\
    \ n in arr {\n            let str = n.description\n            let n = Int(str)\n\
    \            if n % 2 != 0 {\n                res.append(n)\n            }\n \
    \       }\n    } else {\n        return res\n    }\n    return res", "    var\
    \ result = [Int]()\n    var xCopy = x.sorted()\n    for d in xCopy {\n       \
    \ if d.isMultiple(of: 2) {\n            if !contains(&result, d) {\n         \
    \       result.append(d)\n            }\n        }\n    }\n    return result",
  "    var res = [Int]()\n    \n    for i in x {\n        if let digit = i % 10 {\n\
    \            if let idx = find(res, &(digit)) {\n                res[idx] = digit\n\
    \            }\n            else {\n                append(res, digit)\n     \
    \       }\n        }\n    }\n    \n    return res", "    var set = Set<Int>()\n\
    \    for n in x {\n        if n % 10 == 0 {\n            set.remove(n)\n     \
    \   } else {\n            set.insert(n)\n        }\n    }\n    return Array(set).sorted(by:\
    \ { $0 < $1 })", "    if x.isEmpty { return [] }\n\n    var result: [Int] = []\n\
    \    var i = 0\n    var found = true\n\n    for element in x {\n        if element\
    \ % 2 == 0 { \n            found = false\n        } else {\n            result.append(element)\n\
    \        }\n    }\n\n    if !found { return result }\n\n    for element in x {\n\
    \        if element % 2 != 0 { \n            result.append(element)\n        }\n\
    \    }\n\n    return result", "    var result = Array(0..<x.count).filter({ $0\
    \ % 2 == 0 }).sorted()\n    return result.map { x[$0] }", "    var new_set = Set<Int>()\n\
    \    for x in x {\n        if x % 2 != 0 {\n            new_set.insert(x)\n  \
    \      }\n    }\n    return new_set.sorted(by: >)", "    let sortedArray = x.sorted()\n\
    \    return sortedArray.filter({ $0 % 2 == 0 })", "    var ans = Set()\n    for\
    \ num in x {\n        if let even = num % 2 == 0 {\n            if !ans.contains(num)\
    \ {\n                ans.insert(num)\n            }\n        }\n    }\n    return\
    \ Array(ans.allObjects)", "    let set = Set<Int>()\n    let sortedArray = x.sorted\
    \ { $0 % 10 }\n\n    for elem in sortedArray {\n        let digit = elem % 10\n\
    \        if set.contains(digit) {\n            continue\n        }\n        set.insert(digit)\n\
    \    }\n    return set.sorted { $0 % 10 }", "    var indexSet = [Int]()\n    for\
    \ n in x {\n        if n != 0 && n % 2 == 0 {\n            indexSet.append(n)\n\
    \        }\n    }\n    return indexSet", '    return x.reduce((acc, n) -> [Int]()
    where acc.contains(n/10) && acc.last!%10 == 0, [])', "    var uniqueArray = [Int]()\n\
    \    for num in x {\n        if num != 0 {\n            guard let digit = String(num,\
    \ radix: 10) else {\n                continue\n            }\n            if uniqueArray.contains(digit)\
    \ == false {\n                uniqueArray.append(digit)\n            }\n     \
    \   }\n    }\n    return uniqueArray", "    var result = [Int]()\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n\
    \    result.sort()\n    return result", "    var ans = Array(0..<x.count).map\
    \ { $0 * $0.reciprocal().toInt() }\n    ans.sort(by: { a, b in\n        let diff\
    \ = a%10 - b%10\n        if diff != 0 {\n            return diff < 0 ? -1 : 1\n\
    \        }\n        return 0\n    })\n    \n    return ans.filter { x in\n   \
    \     x.isMultiple(by: 2).count == 0\n    }", "    var output = [Int]()\n    for\
    \ x in x {\n        var flag = false\n        for x in output {\n            if\
    \ x == (x % 10) {\n                flag = true\n                break\n      \
    \      }\n        }\n        if !flag {\n            output.append(x)\n      \
    \  }\n    }\n    return output", "    var res = Set<Int>()\n    for num in x {\n\
    \        guard num > 0 else {\n            continue\n        }\n        var digits\
    \ = String(num, radix: 0).characters\n        let digitCount = digits.count\n\
    \        for i in 0..<digitCount {\n            let digit = digits[i]\n      \
    \      if digits.contains(String(digit, radix: 0)) {\n                res = res.union(Set(Set(digit)))\n\
    \            }\n        }\n    }\n    return res.sorted(by: { $0 > $1 })", " \
    \   var result = [Int]()\n    for n in x {\n        var index = result.count -\
    \ 1\n        while index > -1 && n % result[index] == 0 {\n            result.removeAtIndex(index)\n\
    \            index -= 1\n        }\n        result.append(n)\n    }\n    return\
    \ result", "    var unique:[Int] = []\n    var even:[Int] = []\n    for el in\
    \ x {\n        if el%2 == 0 {\n            even.append(el)\n        } else {\n\
    \            unique.append(el)\n        }\n    }\n    for i in 0..<even.count\
    \ {\n        if even.contains(i) {\n            unique.remove(i)\n        }\n\
    \    }\n    return unique", "    var res = [Int]()\n    for i in x {\n       \
    \ for _ in 1..<i {\n            let i = i / 10\n            if res.contains(i)\
    \ {\n                return res\n            }\n            else  {\n        \
    \        res.append(i)\n            }\n        }\n    }\n    return res", "  \
    \  var res: [Int] = []\n    var even = [Bool]()\n    var count = 0\n    \n   \
    \ for i in x {\n        count += 1\n        if even {\n            if i%2 == 0\
    \ {\n                res.append(i)\n            }\n        } else {\n        \
    \    if count%2 == 0 {\n                res.append(i)\n            }\n       \
    \ }\n        if i%2 != 0 {\n            even.append(false)\n        } else {\n\
    \            even.append(true)\n        }\n    }\n    \n    return res", "   \
    \ \n    let x0 = x[0] \n    \n    let indexSet = Set<Int>()\n    let result =\
    \ Array(0..<x.count).filter {\n        if let index = x.index(of: $0) {\n    \
    \        guard index < x0 else { return false }\n            return !indexSet.contains(index)\n\
    \        }\n        return true\n    }\n    \n    return result", "    \n    var\
    \ results = [Int]()\n    var evenDigits = Set<Int>()\n    \n    for i in x {\n\
    \        if i.isMultiple(2) {\n            evenDigits.insert(i)\n        }\n \
    \   }\n    \n    for i in x {\n        if !evenDigits.contains(i) {\n        \
    \    results.append(i)\n        }\n    }\n    \n    return results", "    var\
    \ result = Set<Int>()\n    var res = [Int]()\n    var count = 0\n    for num in\
    \ x {\n        if count > 0 {\n            if num % 10 == 0 {\n              \
    \  res.insert(num)\n            }\n        } else {\n            count += 1\n\
    \        }\n    }\n    var index = 0\n    for num in x {\n        if count > 0\
    \ {\n            if num % 10 == 0 {\n                res.insert(num)\n       \
    \         result.insert(num)\n            }\n        }\n    }\n    return result",
  "    var unique = [Int]()\n    var result = x\n    for i in x {\n        let x =\
    \ String(abs(i))\n        if unique.contains(x) {\n            continue\n    \
    \    }\n        let index = unique.index(of: x)\n        if index != nil, index\
    \ < result.count {\n            result[index] = x\n        } else {\n        \
    \    unique.append(x)\n        }\n    }\n    if result.count != unique.count {\n\
    \        return result\n    } else {\n        return unique\n    }", "    var\
    \ sorted = x.sorted()\n    var result: [Int] = []\n    \n    for idx in 0..<sorted.count\
    \ {\n        if idx % 2 == 0 {\n            let value = sorted[idx]\n        \
    \    if value % 2 != 0 {\n                result.append(value)\n            }\n\
    \        }\n    }\n    \n    return result", "    let digits = x.map { String($0)\
    \ }\n    let even = digits.filter{ $0.contains(\"2\") }\n    let sorted = even.sorted\
    \ { $0.compare($1) == .orderedAscending }\n    return sorted", "    var res =\
    \ x.filter{$0%10 != 0}\n    guard !res.isEmpty else { return [] }\n    var i =\
    \ 0\n    while i < x.count && x[i] == res[0] {\n        res.remove(at: 0)\n  \
    \      i += 1\n    }\n    return res", "    guard x.count > 0 else { return []\
    \ }\n    var digits: [Int] = []\n    var index = 0\n    var dig = -1\n    var\
    \ num = \"\"\n    var evenDigit = false\n    for n in x {\n        num = String(UInt32(n))\n\
    \        if num.characters.count > 1 { // if there is a single digit number, \n\
    \                                       // we will not check other digit.\n  \
    \          digits.append(num)\n        }\n        else { // if there is no single\
    \ digit number, \n                 // we will check if this digit, if odd, is\
    \ even \n            num = \"\"\n            for d in digits { // check if this\
    \ digit is odd\n                if String(UInt32(d)).characters.count == 1 {\n\
    \                    num += String(UInt32(d))\n                }\n           \
    \ }\n            if UInt32(num) % 2 == 0 {\n                evenDigit = true\n\
    \            }\n            else {\n                evenDigit = false\n      \
    \          index = index + 1\n                digits.append(num)\n           \
    \ }\n        }\n    }\n    var result = [Int]()\n    for d in digits {\n     \
    \   if UInt32(num) % 2 == 0 {\n            if evenDigit == true {\n          \
    \      index = index + 1\n            }\n            if UInt32(num) > UInt32(result[index])\
    \ {\n                result.append(UInt32(d))\n            }\n        }\n    }\n\
    \    return Array(result)", "    var result: [Int] = []\n    let resultset = Set<Int>()\n\
    \n    for i in x {\n        let x = String(i)\n        let index = x.index{$0.isDigit}\n\
    \n        if let _ = index {\n            if !resultset.contains(x) {\n      \
    \          result.append(i)\n                resultset.add(x)\n            }\n\
    \        }\n    }\n\n    return result", "    var xs = Array(x)\n    xs.sort()\n\
    \    var res: [Int] = []\n    \n    for i in xs {\n        let isEven = i % 2\
    \ == 0\n        if !isEven {\n            res = append(res, i)\n        }\n  \
    \  }\n    return res", "    var result = [Int]()\n    for num in x {\n       \
    \ for digits in 0 ..< num.truncatingRemainder(dividingBy: 10) {\n            if\
    \ num.truncatingRemainder(dividingBy: 10) == 0 {\n                result.append(digits)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    for i in x {\n        var j = 0\n        while j < result.count &&\
    \ result[j] != i {\n            j += 1\n        }\n        if j == result.count\
    \ {\n            result.append(i)\n        }\n    }\n    \n    return result",
  "    var output = [Int]()\n    \n    for n in x {\n        let d = n % 10\n    \
    \    if d == 0 && output.contains(d) {\n            // Duplicate is found\n  \
    \          continue\n        }\n        output.append(d)\n    }\n    \n    return\
    \ output", "    // write your code here\n    var result = Set<Int>()\n    var\
    \ i = x.count\n    while i {\n        i -= 1\n        if result.contains((x[i])%10)\
    \ { return }\n        result.add((x[i])%10)\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for number in x {\n        var resultIndex = 0\n\
    \        for char in String(number) {\n            if Int(String(char).dropFirst())%2\
    \ != 0 {\n                result[resultIndex] = number\n                resultIndex\
    \ += 1\n            }\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    \n    x.forEach({ number in\n        \n        let reversedNumber\
    \ = Array(String(number).reversed())\n        \n        reversedNumber.forEach({\
    \ digit in\n            \n            if digit % 2 != 0 {\n                \n\
    \                if result.contains(digit) {\n                    result.remove(at:\
    \ result.index(of: digit))\n                } else {\n                    result.append(digit)\n\
    \                }\n            }\n        })\n    })\n    \n    return result",
  "    var result = Array(0..<x.count)\n    for index in result {\n        if index\
    \ == 0 || x[index % 10] % 2 != 0 {\n            result.remove(at: index)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    let count =\
    \ x.count\n    for i in 0..<count {\n        let a = x[i]\n        if a % 2 ==\
    \ 0 {\n            continue\n        }\n        for j in i..<count {\n       \
    \     let b = x[j]\n            if a < b {\n                break\n          \
    \  }\n            if a > b {\n                break\n            }\n         \
    \   if a % 2 == 0 && b % 2 == 0 {\n                continue\n            }\n \
    \           result.insert(a, at: j)\n            break\n        }\n    }\n   \
    \ result.reverse()\n    return result", "    \n    var unique = [Int]()\n    for\
    \ i in x {\n        if unique.contains(i / 10) {\n            continue\n     \
    \   }\n        unique.append(i)\n    }\n    return unique", "    var digits =\
    \ Set<Int>()\n    x.forEach {\n        guard !digits.contains($0/10) else { return\
    \ }\n        digits.insert($0/10)\n    }\n    return x.filter{$0 % 10 == 0}",
  "    let map = Map()\n    let result = [Int]()\n    for num in x {\n        if map.get(num)\
    \ == nil {\n            result.append(num)\n            map.insert(num, num.digit)\n\
    \        }\n    }\n    return result", "    var ans = [Int]()\n    for i in x\
    \ {\n        let digit = String(i).first!\n        ans.append(Int(digit))\n  \
    \  }\n    return ans.sorted()", "    var ans = []\n    \n    for i in x {\n  \
    \      if i.isEven {\n            ans.append(i)\n        }\n    }\n    \n    return\
    \ ans", "    let result = x.filter{ $0 % 2 != 0 }\n    return result", "    var\
    \ evenDigitsArray = [Int]()\n    \n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigitsArray.append(element)\n        }\n    }\n\
    \    \n    return evenDigitsArray.sorted()", "    var result: [Int] = []\n   \
    \ for num in x {\n        if num / 10%2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var res = [Int]()\n\
    \    for v in x {\n        let d = String(v)\n        res.append(Int(d.unicodeScalars.filter{\
    \ $0.isDigit }).sorted()[0])\n    }\n    return res.sorted(by: { $0 < $1 })",
  '    return x.filter{ $0 % 2 != 0 }.sorted { $0 < $1 }', "    var y = [Int]()\n\
    \    for xNum in x {\n        if xNum % 2 == 0 {\n            if !y.contains(xNum)\
    \ {\n                y.append(xNum)\n            }\n        }\n    }\n    return\
    \ y", "    \n    var result = [Int]()\n    var tmp = [Int]()\n    \n    for i\
    \ in x {\n        if tmp.isEmpty {\n            tmp.append(i)\n        } else\
    \ {\n            if i % 2 != 0 {\n                result.append(i)\n         \
    \       tmp.removeAll()\n            } else {\n                tmp.append(i)\n\
    \            }\n        }\n    }\n    return result", '    return unique_digits(x:
    x, result: [Int]())', "    return x.filter {\n        let numDigits = Int(log10($0.description)\
    \ + 1)\n        let str = $0.description\n        return Int(str[str.startIndex...].dropFirst(numDigits))%2\
    \ == 0\n    }.sorted()", "    if x.count > 0 {\n        let n = x.first!.count\n\
    \        var arr: [Int] = [] // to keep track of duplicates\n        for c in\
    \ x {\n            let i = Int(Int(c) * 0.10) // extract each digit from integer\n\
    \            if i % 2 == 0 {\n                arr.append(i)\n            }\n \
    \       }\n        arr.sort()\n        var result: [Int] = []\n        for i in\
    \ arr {\n            if !result.contains(i) {\n                result.append(i)\n\
    \            }\n        }\n        return result\n    } else {\n        return\
    \ []\n    }", "    var res = Set<Int>()\n    for n in x {\n        let str = n.toString(radix:\
    \ 10)\n        res.formUnion(str)\n    }\n    return res.array", "    var result\
    \ = [Int]()\n    var counter = Set<Int>()\n    for num in x {\n        if let\
    \ _ = counter.contains(num) {\n            result.append(num)\n        } else\
    \ {\n            counter.insert(num)\n        }\n    }\n    return result", " \
    \   var temp = [Int]()\n    \n    for i in x {\n        if let _ = temp.index(of:\
    \ i) {\n            continue\n        }\n        \n        temp.append(i)\n  \
    \  }\n    \n    return temp", "    var ans = [Int]()\n    for digit in x {\n \
    \       if Int(digit) % 2 != 0 {\n            ans.append(digit)\n        }\n \
    \   }\n    return ans", "    var ans = [Int]()\n    let max = x.max() % 10\n \
    \   for d in x{\n        var hasOddDigit = false\n        for num in ans {\n \
    \           if num == d {\n                hasOddDigit = true\n              \
    \  break\n            }\n        }\n        if hasOddDigit {\n            continue\n\
    \        }\n        ans.append(d)\n    }\n    return ans", "    var result = [Int]()\n\
    \    \n    for i in x {\n        for j in x {\n            if i != j {\n     \
    \           if Int(i % j) == 0 {\n                    result.append(i)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  \n    return result", "    var numbers = [Int]()\n    for number in x {\n \
    \       if let remainder = number % 10, !contains(numbers, remainder) {\n    \
    \        numbers.append(number)\n        }\n    }\n    return numbers", "    var\
    \ result: [Int] = []\n    for element in x {\n        if element % 2 == 0 {\n\
    \            continue\n        }\n        let index = result.index(of: element)\n\
    \        if index != nil {\n            result.remove(at: index!)\n        }\n\
    \        result.append(element)\n    }\n    return result", "    var y = [Int]()\n\
    \    for i in x {\n        for j in y {\n            if i % j == 0 {\n       \
    \         continue // j has already found a non even digit\n            }\n  \
    \      }\n        y.append(i)\n    }\n    return y", "    var digits = Set<Int>()\n\
    \    var result = Array<Int>()\n    for i in x {\n        if digits.contains(Int(i\
    \ % 10)) {\n            continue\n        }\n        digits.insert(Int(i % 10))\n\
    \        result.append(i)\n    }\n    return result", '    return x.filter({ $0
    % 10 == 0 }).sorted(by: >)', "    return x.reduce([]) { (acc, e) in\n        if\
    \ let x = acc.first, x.isOdd && x.digit != e.digit {\n            acc.append(e)\n\
    \        }\n        return acc\n    }", "    \n    var result = Array(x)\n   \
    \ \n    for i in x.indices {\n        \n        if Int(x[i]) % 2 == 0 {\n    \
    \        \n            result.removeAtIndex(i)\n        }\n    }\n    \n    return\
    \ result", "    var result = x.slice()\n    var count = [Int]()\n    for i in\
    \ result {\n        if !contains(count, $0) {\n            append(count, $0)\n\
    \        }\n    }\n    let copy = result\n    return copy", "    var result =\
    \ Array<Int>()\n    var nums = [Int]()\n    for element in x {\n        if element\
    \ % 2 != 0 {\n            nums.append(element)\n        }\n    }\n    for element\
    \ in nums {\n        let newElement = element % 10\n        if newElement == 0\
    \ {\n            continue\n        }\n        result.append (element)\n    }\n\
    \    return result", "    let result = [Int]()\n    var i = x.startIndex\n   \
    \ \n    while i != x.endIndex {\n        if !result.contains(x[i]) {\n       \
    \     result.append(x[i])\n            i += 1;\n        }\n        \n        if\
    \ i == x.endIndex {\n            break\n        }\n        \n        if x[i] %\
    \ 2 == 0 {\n            var j = i + 1;\n            \n            while j < x.endIndex\
    \ {\n                if x[j] % 2 != 0 {\n                    break;\n        \
    \        }\n                j += 1;\n            }\n            \n           \
    \ var k = 0;\n            \n            while k < j {\n                result.append(x[k])\n\
    \                k += 1;\n            }\n        }\n    }\n    \n    return result",
  '    return unique_digits(x, 0, x.count-1, 0)', "    var newArr = x\n    \n    for\
    \ i in newArr {\n        if i % 2 != 0 {\n            newArr = newArr.filter{\
    \ $0 != i }\n        }\n    }\n    \n    return newArr", "    var unique = [Int]()\n\
    \    for n in x {\n        guard !unique.contains(n) else { continue }\n     \
    \   guard n % 2 == 0 else { continue }\n        unique.append(n)\n    }\n    return\
    \ unique", "    let result = x.filter { (x) -> Bool in\n        let digits = String(format:\
    \ \"%0*d\", 0, x)\n        let digitStr = digits.split(separator: \"-\")\n   \
    \     let evenDigits = digitStr[1].split(separator: \"\")\n        return (digits.isEmpty\
    \ == true && evenDigits.count == 1) || (digits.isEmpty == false && evenDigits.count\
    \ > 1)\n    }\n    return result.sorted(by: { (x, _) -> Bool in\n        x < x\n\
    \    })", "    var result: [Int] = []\n    var min: Int = 0\n    var max: Int\
    \ = x.count - 1\n    while min <= max {\n        let mid = (min + max) / 2\n \
    \       let index = find(x, mid)\n        if index == -1 {\n            max =\
    \ mid - 1\n        } else {\n            if x[mid] % 2 == 0 {\n              \
    \  result.append(mid)\n            } else {\n                min = mid + 1\n \
    \           }\n        }\n    }\n    return result", "    \n    var uniqueArray\
    \ = [Int]()\n    var remainderArray = [Int]()\n    \n    // Get remainder of each\
    \ number \n    for i in x {\n        let remainder = i % 10\n        remainderArray.append(remainder)\n\
    \    }\n    \n    // Get unique number from remainder array \n    var uniqueArrayIndex\
    \ = 0\n    while (remainderArray.count > 0) {\n        if remainderArray[uniqueArrayIndex]\
    \ == 0 {\n            uniqueArray.append(x[i])\n            uniqueArrayIndex =\
    \ uniqueArrayIndex + 1\n        }\n        else {\n            remainderArray[uniqueArrayIndex]\
    \ = 0\n        }\n    }\n    \n    return uniqueArray", "    var result = [Int]()\n\
    \    for num in x {\n        var num1 = num\n        var num2 = 1\n        var\
    \ num3 = 1\n        var foundOne = false\n        while num2 <= 10 {\n       \
    \     if num2 == num1 {\n                foundOne = true\n            } else if\
    \ num % num2 == 0 {\n                num3 += 1\n            } else {\n       \
    \         num1 /= num2\n                num2 /= 10\n                num3 = 0\n\
    \            }\n            if !foundOne {\n                result += [num]\n\
    \            }\n        }\n    }\n    return result.sorted(by: { $0 > $1 })",
  "    var result = [Int]()\n    x.forEach { x in\n        if let even = x % 10, even\
    \ != 0 {\n            result.append(x)\n        }\n    }\n    return result",
  "    var tmp = [Int]()\n    for v in x {\n        tmp.append (v)\n    }\n    tmp.sort\
    \ {$0.pow 2 > $1.pow 2}\n    return tmp", "    var result = [Int]()\n    for i\
    \ in x {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n \
    \   }\n    return result", "    var even: Set<Int> = []\n    var odd: Set<Int>\
    \ = []\n    \n    for element in x {\n        if element % 2 == 0 {\n        \
    \    even.insert(element)\n        } else {\n            odd.insert(element)\n\
    \        }\n    }\n    \n    even.subtractAll(&odd)\n    return even.sorted()",
  "    x.sort{$0%$0 < 1}\n    var result = [Int]()\n    for ele in x {\n        var\
    \ flag = false\n        for _ in result {\n            if ele%_ == 0 {\n     \
    \           flag = true\n            }\n        }\n        if !flag {\n      \
    \      result.append(ele)\n        }\n    }\n    return result", "    var result\
    \ = Array<T>()\n    for v in x {\n        if String(v).characters.isEmpty {\n\
    \            continue\n        }\n        let str = String(v)\n        let arr\
    \ = str.characters.map({ $0 - 48 }).sorted()\n        var idx = 1\n        for\
    \ i in arr {\n            if i / 10 != idx {\n                result.append(v)\n\
    \                break\n            } else {\n                idx += 1\n     \
    \       }\n        }\n    }\n    return result", "    // TODO: do it in linear\
    \ time\n    var unique_digit = [Int]()\n    \n    for y in x {\n        guard\
    \ y % 2 == 0 else { continue }\n        \n        for _ in unique_digit {\n  \
    \          if y == _ {\n                break\n            }\n        }\n    \
    \    unique_digit.append(y)\n    }\n    \n    return unique_digit", "    var result\
    \ = Set<Int>()\n    for n in x {\n        if n % 2 == 0 {\n            result.remove(n)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  \n    for element in x {\n        if let value = element % 10 {\n         \
    \   if !contains(&value, &result) {\n                result.append(value)\n  \
    \          }\n        } else {\n            break\n        }\n    }\n    \n  \
    \  return result", "    \n    var result = [Int]()\n    \n    for i in x {\n \
    \       \n        for _ in 0..<Int(Int(Int(i) / 10)) {\n            \n       \
    \     if i > 0 {\n                \n                if i % 10 == 0 {\n       \
    \             \n                    result.append(i)\n                    \n \
    \               }\n                \n                i += 10\n               \
    \ \n            }\n            \n        }\n    }\n    \n    return result", " \
    \   if x.isEmpty { return [] }\n    var ret = x.filter { $0 % 2 != 0 }\n    if\
    \ ret.isEmpty {\n        return ret\n    }\n    var i = ret[0]\n    var index\
    \ = 0\n    while i < x {\n        if i == x {\n            break\n        }\n\
    \        var j = x\n        while (j > i) {\n            if i % j == 0 {\n   \
    \             ret.remove(at: index)\n                x -= 1\n                break\n\
    \            }\n            j /= 10\n        }\n        i += 1\n        index\
    \ += 1\n    }\n    return ret"]
stop_tokens:
- "\n}"
