name: HumanEval_78_hex_key
language: swift
prompt: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n/// digits that are\
  \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
  \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume\
  \ the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are\
  \ always uppercase.\n/// Examples:\n/// >>> hex_key(num: \"AB\")\n/// 1\n/// >>>\
  \ hex_key(num: \"1077E\")\n/// 2\n/// >>> hex_key(num: \"ABED1A33\")\n/// 4\n///\
  \ >>> hex_key(num: \"123456789ABCDEF0\")\n/// 6\n/// >>> hex_key(num: \"2020\")\n\
  /// 2\nfunc hex_key(num: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
  \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
  \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
  \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
completions: ["    if num.isEmpty {\n        return 0\n    }\n    \n    var digits:\
    \ [Int] = []\n    \n    var i = 0\n    while i < num.count {\n        guard let\
    \ digit = Int(String(num[i])) else {\n            return -1\n        }\n     \
    \   \n        digits.append(digit)\n        i += 2\n    }\n    \n    var result\
    \ = 1\n    for digit in digits {\n        if digit == 2 && numbers.contains(&digit)\
    \ {\n            result += 1\n        }\n    }\n    \n    return result", "  \
    \  var n = num.characters.count\n    var nums = [Int]()\n    var hex = [String]()\n\
    \    for i in 0 ..< n {\n        let num = num.characters.index(num.startIndex,\
    \ offsetBy: i)\n        let hexNum = num.characters.map({ String($0) }).joined()\n\
    \        if hexNum.characters.filter({ $0 == \"A\" || $0 == \"B\" || $0 == \"\
    C\" || $0 == \"D\" || $0 == \"E\" || $0 == \"F\" }).count > 0 {\n            hex.append(hexNum)\n\
    \        }\n    }\n    for j in 0 ..< hex.count {\n        var num = hex[j]\n\
    \        var power = hex[j].count\n        for k = 1 ..< hex.count {\n       \
    \     let pow = hex[k].count\n            for l in 0 ..< power {\n           \
    \     num = String(num.dropLast())\n                power = pow * hex[j].count\n\
    \            }\n            if num.characters.filter({ $0 == \"2\" || $0 == \"\
    3\" || $0 == \"5\" || $0 == \"7\" || $0 == \"B\" || $0 == \"D\" || $0 == \"E\"\
    \ || $0 == \"F\" }).count > 0 {\n                nums.append(Int(String(num)))\n\
    \            }\n        }\n    }\n    return nums.count + 1", "    guard let str\
    \ = num.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet()),\n\
    \        let hexStr = str.characters.map({ $0 in Character($0) })\n        .filter({\
    \ (c) -> Bool in\n            switch c {\n            case Character(\"0\"), Character(\"\
    1\"), Character(\"2\"), Character(\"3\"), Character(\"4\"),\n                Character(\"\
    5\"), Character(\"6\"), Character(\"7\"), Character(\"8\"), Character(\"9\"),\n\
    \                Character(\"A\"), Character(\"B\"), Character(\"C\"), Character(\"\
    D\"), Character(\"E\"),\n                Character(\"F\"):\n                return\
    \ true\n            default:\n                return false\n            }\n  \
    \      }).map({ Character($0) }) else { return 0 }\n\n    let hexStr = hexStr.map\
    \ { String($0) }\n\n    guard hexStr.count > 0 else { return 0 }\n\n    var hexStrings\
    \ = hexStr.map { String($0) }\n    var hexCount = 1\n    for hexString in hexStrings\
    \ {\n        guard let hex = UInt64(hexString.utf8.map({ $0 }), radix: 16) else\
    \ {\n            return 0\n        }\n        hexCount *= hex\n    }\n\n    for\
    \ hex in hexStr {\n        guard let hex = UInt64(hex.utf8.map({ $0 }), radix:\
    \ 16) else {\n            return 0\n        }\n        hexCount *= hex\n    }\n\
    \n    return hexCount", "    guard let letters = num.unicodeScalars.filter({ $0.isLetter\
    \ }) else { return 0 }\n    \n    var count = 0\n    \n    for i in 0..<letters.count\
    \ {\n        let cur = letters.unicodeScalars[i + 1]\n        let next = letters.unicodeScalars[i\
    \ + 2]\n        \n        // if current char is not a letter, skip it\n      \
    \  if cur.isLetter == false {\n            continue\n        }\n        \n   \
    \     // if the next character is non-letter, skip it\n        if next.isLetter\
    \ == false {\n            continue\n        }\n        \n        let curc = Character(String(cur))\n\
    \        let nextc = Character(String(next))\n        \n        // check current\
    \ char and next char's value\n        switch curc.unicodeScalars.first! {\n  \
    \      case 0x30A0:\n            guard curc.unicodeScalars.contains(0x30A1) else\
    \ { continue }\n        case 0x30A1:\n            guard curc.unicodeScalars.contains(0x30A2)\
    \ else { continue }\n        case 0x30A2:\n            guard curc.unicodeScalars.contains(0x30A3)\
    \ else { continue }\n        case 0x30A3:\n            guard curc.unicodeScalars.contains(0x30A4)\
    \ else { continue }\n        case 0x30A4:\n            guard curc.unicodeScalars.contains(0x30A5)\
    \ else { continue }\n        case 0x30A5:\n            guard curc.unicodeScalars.contains(0x30A6)\
    \ else { continue }\n        case 0x30A6:\n            guard curc.unicodeScalars.contains(0x30A7)\
    \ else { continue }\n        case 0x30A7:\n            guard curc.unicodeScalars.contains(0x30A8)\
    \ else { continue }\n        case 0x30A8:\n            guard curc.unicodeScalars.contains(0x30A9)\
    \ else { continue }\n        case 0x30A9:\n            guard curc.unicodeScalars.contains(0x30AA)\
    \ else { continue }\n        case 0x30AA:\n            guard curc.unicodeScalars.contains(0x30AB)\
    \ else { continue }\n        case 0x30AB:\n            guard curc.unicodeScalars.contains(0x30AC)\
    \ else { continue }\n        case 0x30AC:\n            guard curc.unicodeScalars.contains(0x30AD)\
    \ else { continue }\n        case 0x30AD:\n            guard curc.unicodeScalars.contains(0x30AE)\
    \ else { continue }\n        case 0x30AE:\n            guard curc.unicodeScalars.contains(0x30AF)\
    \ else { continue }\n        case 0x30AF:\n            gu", "    // TODO: Your\
    \ code here\n    if num.characters.count == 0 {\n        return 0\n    }\n   \
    \ var count = 0\n    var n = num.characters\n    var digits = [String: Bool]()\n\
    \    for n in num.characters {\n        var digit = Int(n) - Int(Character(String.fromCharCode(48)))\n\
    \        \n        if digit < 0 || digit > 9 {\n            return 0\n       \
    \ }\n        \n        if let _ = digits.keys[String(digit)] {\n            return\
    \ 0\n        }\n        \n        digits[String(digit)] = true\n    }\n    for\
    \ n in digits {\n        count += 1\n    }\n    return count", "    if !is_valid_hex(num)\
    \ {\n        return -1\n    }\n    let len = num.count\n    var res = 0\n    for\
    \ i in 0..len-1 {\n        let n = num[i]\n        if n == 'A' || n == 'B' {\n\
    \            res += 2\n        } else if n == 'C' || n == 'D' {\n            res\
    \ += 3\n        }\n    }\n    return res", "\tvar count : Int = 0\n\tfor i in\
    \ num.characters {\n\t\tif i > '0' && i <= '9' {\n\t\t\tif i >= 'A' && i <= 'F'\
    \ {\n\t\t\t\tif i % 2 == 0 {\n\t\t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\t\tcontinue\n\
    \t\t\t}\n\t\t\tif i >= 'a' && i <= 'f' {\n\t\t\t\tif i % 2 == 0 {\n\t\t\t\t\t\
    count += 1\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tbreak\n\t}\n\treturn\
    \ count", "    \n    let number: Int = Int(num)!\n    \n    guard number >= 0\
    \ else {\n        return 0\n    }\n    \n    let hexDigits: [String] = [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"]\n    \n    let hexDigitCounts: [String] = [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"].map { String($0).count }\n    \n    let result =\
    \ number / 16\n    \n    return hexDigitCounts[result % 16]", "\tif num == \"\"\
    \ {\n\t\treturn 0\n\t}\n\n\tnumString := String(num)\n\t\n\tvar primes [17]bool\n\
    \tprimes[0] = true\n\tprimes[1] = true\n\tprimes[2] = true\n\tprimes[3] = true\n\
    \tprimes[4] = true\n\tprimes[5] = true\n\tprimes[6] = true\n\tprimes[7] = true\n\
    \tprimes[8] = true\n\tprimes[9] = true\n\tprimes[10] = true\n\tprimes[11] = true\n\
    \tprimes[12] = true\n\tprimes[13] = true\n\tprimes[14] = true\n\tprimes[15] =\
    \ true\n\tprimes[16] = true\n\n\tfor i, a := range numString {\n\t\tif a == 'A'\
    \ {\n\t\t\tprimes[11] = true\n\t\t}\n\t\tif a == 'B' {\n\t\t\tprimes[13] = true\n\
    \t\t}\n\t\tif a == 'C' {\n\t\t\tprimes[17] = true\n\t\t}\n\t\tif a == 'D' {\n\t\
    \t\tprimes[19] = true\n\t\t}\n\t\tif a == 'E' {\n\t\t\tprimes[21] = true\n\t\t\
    }\n\t\tif a == 'F' {\n\t\t\tprimes[23] = true\n\t\t}\n\t}\n\n\tvar primesCount\
    \ = 0\n\n\tvar primeNum = 22\n\tfor primeNum > 3 {\n\t\tif primes[primeNum] {\n\
    \t\t\tprimesCount++\n\t\t}\n\t\tprimeNum--\n\t}\n\t\n\treturn primesCount", " \
    \   // TODO: Write code here.\n    return 0", "\treturn hex_key2(num)", "    //\
    \ your code goes here\n    let numbers = num.characters\n\n    if numbers == \"\
    \" {\n        return 0\n    }\n    var count = 0\n    for n in numbers {\n   \
    \     let number = UInt8(n)\n        for n in 1...0x20 {\n            let n =\
    \ UInt8(n)\n            if n % number == 0 {\n                count = count +\
    \ 1\n                break\n            }\n        }\n    }\n    return count",
  "    guard let str = num.lowercased() else {\n        return -1\n    }\n    var\
    \ count: Int = 0\n    var digit: UInt8 = 0\n    for c in str.unicodeScalars {\n\
    \        digit += UInt8(c)\n        count += 1\n    }\n    guard count > 0 else\
    \ {\n        return 0\n    }\n    for digit in 2...digit {\n        if isPrime(digit,\
    \ count: count) {\n            return count\n        }\n    }\n    return -1",
  "    // TODO: implement\n    return 0", "    var num_digits = num.utf8.count\n \
    \   let digits = (0..<num_digits).map { String(num[$0], radix: 16) }\n    \n \
    \   let primes = Set([\"2\",\"3\",\"5\",\"7\",\"11\",\"13\",\"17\",\"19\",\"23\"\
    ,\"29\",\"31\"]).map({\n        let digit = digits[$0]\n        let digit2 = digits[$1]\n\
    \        guard digit == \"B\" || digit == \"D\" || digit2 == \"B\" || digit2 ==\
    \ \"D\" else {\n            return nil\n        }\n        return Int(digit)\n\
    \    }).compactMap { Int($0) }\n    \n    return primes.count", "    guard let\
    \ num = num.trimmingCharacters(in: CharacterSet.alphanumerics.inverted) else {\n\
    \        return -1\n    }\n    guard num.count > 0 else {\n        return -1\n\
    \    }\n    let upperCasesIndex = num.index(of: \"ABCDEF\") ?? num.index(of: \"\
    abcdef\")\n    guard upperCasesIndex != -1 else {\n        return -1\n    }\n\
    \    let start = upperCasesIndex\n    let end = num.index(of: \"B\", options:\
    \ .backwards)?.offset\n    let remainder = num.substring(from: start!, to: end!)\n\
    \    guard let divisor = Int(remainder) else {\n        return -1\n    }\n   \
    \ guard divisor > 1 else {\n        return -1\n    }\n    if divisor*divisor >\
    \ num.count {\n        return -1\n    }\n    var count = 0\n    for i in 0..<num.count\
    \ {\n        let num = Int(num.substring(from: start, to: i)) + Int(num.substring(from:\
    \ i, to: end))\n        guard num%divisor == 0 else {\n            count = count\
    \ + 1\n        }\n    }\n    return count", '    // TODO: your function here',
  "    var hexDigits: [String] = []\n    for digit in num {\n        hexDigits.append(digit)\n\
    \    }\n    if hexDigits.count == 0 {\n        return 0\n    }\n    let primeDigits:\
    \ [String] = []\n    var i = 0\n    for digit in hexDigits.reverse() {\n     \
    \   if i % 2 == 1 {\n            primeDigits.append(digit)\n        }\n      \
    \  i += 1\n    }\n    \n    // find first prime\n    var primeIndex = 0\n    while\
    \ primeIndex < primeDigits.count {\n        let isPrime = true\n        for index\
    \ in 0..<primeDigits.count {\n            if index == primeIndex {\n         \
    \       continue\n            }\n            if primeDigits[index] == hexDigits[primeIndex]\
    \ {\n                isPrime = false\n                break\n            }\n \
    \       }\n        if isPrime {\n            primeIndex = primeIndex + 1\n   \
    \     }\n    }\n    if primeIndex == primeDigits.count {\n        return 1\n \
    \   }\n    if primeDigits.count < hexDigits.count {\n        return primeDigits.count\
    \ + hexDigits.count - primeIndex\n    }\n    return primeDigits.count - hexDigits.count\
    \ + primeIndex", "    // your code here\n    var hexDigit = String()\n    var\
    \ counter = 0\n    for char in num {\n        if char >= '0' && char <= '9' {\n\
    \            hexDigit += char\n        }\n    }\n    for char in hexDigit {\n\
    \        let decimal = UInt8(char)\n        var hexNumber = UInt8((decimal / 16))\n\
    \        if hexNumber == 0 {\n            continue\n        }\n        var remainder\
    \ = hexNumber % 16\n        if remainder == 0 {\n            counter += 1\n  \
    \      }\n    }\n    return counter", "    // Your code here\n    guard let num\
    \ = num.characters.split(\"\").map(String.init) else {\n        return 0\n   \
    \ }\n    var nums = [Int]()\n    \n    for char in num {\n        if let digit\
    \ = Int(char) {\n            if digit > 0 && digit <= 15 {\n                nums.append(digit)\n\
    \            }\n        }\n    }\n    \n    for n in nums {\n        if n % 2\
    \ == 0 { //odd\n            return n + hex_key(num: num)\n        }\n    }\n \
    \   return nums.count", "    if num == \"\" {\n        return 0\n    }\n    var\
    \ result = 1\n    for b in num.characters{\n        var num = Int(b)\n       \
    \ var mod = num % 16\n        if mod != 0 {\n            num = Int(Int(b) / 16)\
    \ * 16\n        }\n        \n        if num == 0 {\n            break\n      \
    \  }\n        \n        if num > 15 {\n            return 0\n        }\n     \
    \   \n        result *= num\n    }\n    return result", "    let digits = String(num).characters.map({\
    \ Int16($0) })\n    let is_prime = [2,3,5,7,11,13,17].contains({$0.contains(digits)})\n\
    \    return is_prime ? digits.index(of: digits[0])! + 1 : 2", "    guard let hex_value\
    \ = num.characters.filter({ $0.isHexDigit() }).reduce(0,{$0*16 + $1.unicodeScalars.first!.value})\
    \ else {\n        return 0\n    }\n    guard hex_value%2 == 1 else {\n       \
    \ return 0\n    }\n    let n_prime = hex_value/2\n    let primes = num.characters\n\
    \        .filter({ prime_check(num: $0.unicodeScalars.first!.value) })\n     \
    \   .reduce(0,{$0+1}).compactMap(prime_check)\n    return primes.count", "   \
    \ // code goes here\n    var digit_count = 0\n    for character in num {\n   \
    \     let num = Int(character, radix: 16)\n        digit_count = digit_count +\
    \ num\n    }\n    return digit_count", "\tlet hexDigits: [String] = [\n\t\t\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"\n\t]\n\t\n\tlet numString = String(num)\n\t\n\t\
    let digits = numString.characters.map { String($0) }\n\t\n\tlet primeDigits =\
    \ digits.filter { prime(String($0)) }\n\t\n\tprimeDigits.count", "    \n    let\
    \ digits = String(num).characters\n    \n    // Initialize a count for the prime\
    \ numbers. \n    // Initialize a flag to check if a digit is prime.\n    var count\
    \ = 0\n    var isPrime = true\n    \n    // Iterate through the digits of the\
    \ number. If the digits are \n    // all primes, increment the count. Else, set\
    \ isPrime to false \n    // and continue to the next digit.\n    for i in 0...String(num).characters.count-1\
    \ {\n        if isPrime {\n            count += Int(digits[i])!\n        } else\
    \ {\n            isPrime = false\n        }\n    }\n    \n    return count", " \
    \   var numStr = \"\"\n    for char in num {\n        switch char {\n        case\
    \ 'A':\n            numStr += char\n        case 'B':\n            numStr += char\n\
    \        case 'C':\n            numStr += char\n        case 'D':\n          \
    \  numStr += char\n        case 'E':\n            numStr += char\n        case\
    \ 'F':\n            numStr += char\n        default:\n            if let charInt\
    \ = Int(String(char)) {\n                numStr += String(charInt)\n         \
    \   }\n        }\n    }\n\n    guard numStr.length > 0 else {\n        return\
    \ 0\n    }\n\n    var numArr = [UInt8](repeating: 0, count: Int(numStr.count)\
    \ / 2)\n    for char in numStr.characters.reversed() {\n        var index = char.unicodeScalars.firstIndex(of:\
    \ UInt(char))\n        if index != nil {\n            var newChar = char.unicodeScalars[index.successor()!]\n\
    \            var index = newChar.unicodeScalars.firstIndex(of: UInt(char))\n \
    \           if index != nil {\n                numArr[2 * numArr.count + newChar.unicodeScalars.count]\
    \ = newChar.unicodeScalars.count\n            }\n        }\n    }\n\n    var count\
    \ = 2\n    while count <= numArr.count {\n        if isPrime(numArr, count: count)\
    \ {\n            return count\n        }\n        count += 1\n    }\n\n    return\
    \ count", "    // Solution: Using a map to store count of digits. \n    // In\
    \ order to improve performance, use an associative array \n    // to store count\
    \ of digits.\n    var digitsCount = [Character: Int]()\n    var count = 0\n  \
    \  var currentDigit = num[0]\n    for symbol in num {\n        if let idx = digitsCount[symbol]\
    \ {\n            digitsCount[symbol] = idx + 1\n        } else {\n           \
    \ digitsCount[symbol] = 1\n        }\n    }\n    for (key,value) in digitsCount\
    \ {\n        if value == 2 {\n            count += value\n        }\n    }\n \
    \   return count", "    let nums = num.characters\n    var count = 0\n    if nums.count\
    \ >= 8 {\n        return -1\n    }\n    for char in nums {\n        let hexChar\
    \ = Int(UInt8(char)!)\n        if hexChar % 2 == 0 {\n            let div = hexChar\
    \ / 2\n            for a in 2...div {\n                if a % hexChar != 0 {\n\
    \                    count += 1\n                    break\n                }\n\
    \            }\n        } else {\n            for b in 2...hexChar {\n       \
    \         if b % hexChar != 0 {\n                    count += 1\n            \
    \        break\n                }\n            }\n        }\n    }\n    return\
    \ count", "    let letters = [0,2,3,5,7,11,13,17]\n    let digits = [2,3,5,7,11,13,17]\n\
    \    return num.characters.reduce(0, combine: {\n        (_,_,digit,letter,key)\
    \ in\n        let value = Int(String(digit).utf8)\n        letter = letter ? letter\
    \ : letters.contains(key) ? key : key\n        return value / Int(String(letter).utf8)\n\
    \    })", "    let nums = num.characters.map(String.init)\n    guard nums.count\
    \ >= 1 else { return 0 }\n    let hexa = nums[0]\n    let b = Int(hexa[1]) - Int(hexa[0])\
    \ + 1\n    let c = Int(hexa[2]) - Int(hexa[1]) + 1\n    let d = Int(hexa[3]) -\
    \ Int(hexa[2]) + 1\n    let e = Int(hexa[4]) - Int(hexa[3]) + 1\n    let f = Int(hexa[5])\
    \ - Int(hexa[4]) + 1\n    let num = b*16 + c*10 + d*8 + e*6 + f*4\n    return\
    \ num", '    return int(find_primes(num: num, len: num.count) + 1)', "    let\
    \ mut nums = String::from(num);\n    let mut digit = hex_to_digit(nums[0]);\n\
    \    let mut primes = 0;\n    let mut powers = String::new();\n    \n    for i\
    \ in 1..nums.len()-1 {\n        let digit2 = hex_to_digit(nums[i]);\n        if\
    \ digit == digit2 {\n            primes++;\n        } else {\n            digit\
    \ = digit2;\n            powers += digit.to_string();\n            primes++;\n\
    \        }\n    }\n    if powers.len() > 1 {\n        for i in 2..powers.len()\
    \ {\n            if powers.contains(&i..<powers.end()) {\n                primes++;\n\
    \            }\n        }\n    }\n    return primes;", "\t// TODO: finish this\
    \ function\n\tnumStr := string(num)\n\tnumStr := strings.TrimRight(numStr, \"\
    0\")\n\tnumStr := strings.TrimLeft(numStr, \"0\")\n\tnumStr := strings.ToUpper(numStr)\n\
    \tnumStr := strings.Replace(numStr, \",\", \"\", -1)\n\tnumStr := strings.Replace(numStr,\
    \ \"A\", \"1\", -1)\n\tnumStr := strings.Replace(numStr, \"B\", \"2\", -1)\n\t\
    numStr := strings.Replace(numStr, \"C\", \"3\", -1)\n\tnumStr := strings.Replace(numStr,\
    \ \"D\", \"4\", -1)\n\tnumStr := strings.Replace(numStr, \"E\", \"5\", -1)\n\t\
    numStr := strings.Replace(numStr, \"F\", \"6\", -1)\n\tnumStr := strings.Replace(numStr,\
    \ \"0\", \"\", -1)\n\tnumStr := strings.Replace(numStr, \" \", \"\", -1)\n\tvar\
    \ sum int = 0\n\tfor _, ch := range numStr {\n\t\tsum = sum + int(ch) - 48\n\t\
    }\n\treturn sum", "    let hex = num.characters()\n    var num2 = Int()\n    for\
    \ i in 0..<hex.count {\n        let digit = hex[i]\n        let digit = Int(digit,\
    \ radix: 16)!\n        if num2 == 0 || digit % 2 != 0 {\n            num2 = digit\n\
    \        }\n    }\n    return num2", "    func isPrime(_ i: Int) -> Bool {\n \
    \       return 2...9 != i\n    }\n    \n    func hexChar(_ i: Int) -> String {\n\
    \        switch i {\n        case 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F:\n      \
    \      return \"A\"\n        case 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\
    \ 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F:\n            return \"B\"\n\
    \        case 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,\
    \ 0x2B, 0x2C, 0x2D, 0x2E, 0x2F:\n            return \"C\"\n        case 0x30,\
    \ 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D,\
    \ 0x3E, 0x3F:\n            return \"D\"\n        case 0x40, 0x41, 0x42, 0x43,\
    \ 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F:\n  \
    \          return \"E\"\n        case 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56,\
    \ 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F:\n            return \"\
    F\"\n        default:\n            return String(UnicodeScalar(i))\n        }\n\
    \    }\n    \n    let hexDigits = String((num.unicodeScalars.map {\n        hexChar(UInt32(UnicodeScalar($0.value)))\
    \ }.joined()))\n    \n    func isHexNumber(_ c: String) -> Bool {\n        let\
    \ hexDigitCount = hexDigits.filter({ $0.lowercased() == c.lowercased() }).count\n\
    \        \n        if hexDigitCount == hexDigits.count {\n            if hexDigitCount\
    \ == 2 || hexDigitCount == 4 {\n                return hexDigits.count == 2\n\
    \            } else {\n                return false\n            }\n        }\n\
    \        return false\n    }\n    \n    var hexNum = \"\"\n    \n    for char\
    \ in hexDigits.characters {\n        if isHexNumber(String(char)) {\n        \
    \    hexNum += char\n        } else {\n            break\n        }\n    }\n \
    \   \n    let hexDigitCount = hexDigits.filter({ $0.lowercased() == hexNum.lowercased()\
    \ }).count\n    \n    var hexPrimeCount = 0\n    \n    for index in 2...hexDigitCount\
    \ {\n        if isPrime(index) && hexDigits.prefix(index) == hexNum.lowercased()\
    \ {\n            hexPrimeCount += 1\n        }\n    }", "    if num == \"\" {\n\
    \        return 0\n    }\n    \n    guard let letters = num.characters\n     \
    \   else {\n            return 0\n    }\n    \n    let result = letters.reduce(0)\
    \ {\n        if let int = Int($0) {\n            if let hex = Int($1) {\n    \
    \            switch hex {\n                case 2:\n                    return\
    \ int + 2\n                case 3:\n                    return int + 3\n     \
    \           case 5:\n                    return int + 5\n                case\
    \ 7:\n                    return int + 7\n                case 11:\n         \
    \           return int + 11\n                case 13:\n                    return\
    \ int + 13\n                default:\n                    break\n            \
    \    }\n            }\n        }\n        return 0\n    }\n    \n    return result",
  "    var count = 0\n    for num in num {\n        if let _ = Int(String(num)) {\n\
    \            count += 1\n        }\n    }\n    return count", "    var result\
    \ = 0\n\n    for _ in 0..<num.count {\n        let sub = num.removeFirst()\n \
    \       let digit = sub.unicodeScalars\n            .map { String($0) }\n    \
    \        .first\n\n        if digit == \"A\" || digit == \"B\" {\n           \
    \ result += 1\n        }\n        if digit == \"C\" || digit == \"D\" {\n    \
    \        result += 2\n        }\n        if digit == \"E\" || digit == \"F\" {\n\
    \            result += 3\n        }\n    }\n\n    return result", "    guard num.isEmpty\
    \ == false else {\n        return -1\n    }\n    var i = 0\n    var isPrime: Bool\
    \ = false\n    var product = 1\n    var product2 = 0\n    guard let num = num.data(using:\
    \ .utf8) else {\n        return -1\n    }\n    for i in 0..<num.count {\n    \
    \    var digit = Int(String(num[i]).uppercased(), radix: 16)\n        var digit2\
    \ = Int(String(num[i]).uppercased(), radix: 16)\n        product = product * digit\n\
    \        product2 = product2 * digit2\n    }\n    if product == 1 {\n        for\
    \ i in 2..<6 {\n            if product2 % i == 0 {\n                isPrime =\
    \ true\n                break\n            }\n        }\n    } else {\n      \
    \  for i in 2..<6 {\n            if product % i == 0 {\n                isPrime\
    \ = true\n                break\n            }\n        }\n    }\n    if isPrime\
    \ {\n        return i\n    }\n    return -1", "    var ans = 0\n    for i in 0..<num.count\
    \ {\n        var n = 0\n        switch num[i] {\n        case \"2\":\n       \
    \     n = 2\n        case \"3\":\n            n = 3\n        case \"5\":\n   \
    \         n = 5\n        case \"7\":\n            n = 7\n        case \"B\":\n\
    \            n = 11\n        case \"D\":\n            n = 13\n        default:\n\
    \            continue\n        }\n        for j in 2...n {\n            ans +=\
    \ j\n            if (j % 2 == 0) {\n                ans -= 1\n            }\n\
    \            if ((n % j) == 0) {\n                ans -= 1\n            }\n  \
    \      }\n    }\n    return ans", "    let nums = num.characters\n    let len\
    \ = nums.count\n    var res = 1\n    for i in 0..<len {\n        let d = nums[i]\n\
    \        switch d {\n            case \"0\": res += 1\n            case \"1\"\
    : res += 1\n            case \"2\": res += 1\n            case \"3\": res += 1\n\
    \            case \"4\": res += 1\n            case \"5\": res += 1\n        \
    \    case \"6\": res += 1\n            case \"7\": res += 1\n            case\
    \ \"8\": res += 1\n            case \"9\": res += 1\n            case \"A\": res\
    \ += 1\n            case \"B\": res += 1\n            case \"C\": res += 1\n \
    \           case \"D\": res += 1\n            case \"E\": res += 1\n         \
    \   case \"F\": res += 1\n            default: break\n        }\n    }\n    return\
    \ res", "    \n    let len: Int = num.characters.count\n    \n    for _ in 0 ..<\
    \ len {\n        let n = num.characters[_]\n        if n == ('A'..'F').contains()\
    \ {\n            return 1\n        }\n        else if n == ('B'..'F').contains()\
    \ {\n            return 2\n        }\n        else if n == ('2'..'9').contains()\
    \ {\n            return 3\n        }\n        else if n == ('0'..'9').contains()\
    \ {\n            return 5\n        }\n        else {\n            return 7\n \
    \       }\n    }\n    \n    return -1", "    let num = num.lowercased()\n    var\
    \ nums = [Int]()\n    for c in num {\n        if c.isHexDigit() {\n          \
    \  var n = Int(c)\n            nums.append(n)\n        } else {\n            return\
    \ -1\n        }\n    }\n    if nums.contains(0) {\n        return -1\n    }\n\
    \    var n = 1\n    for n in nums {\n        var sum = 0\n        for d in 2...n-1\
    \ {\n            if n%d == 0 {\n                sum++\n                break\n\
    \            }\n        }\n        if sum == 2 || sum == 3 {\n            return\
    \ n\n        }\n    }\n    return -1", "    guard num.isEmpty else {\n       \
    \ return 0\n    }\n    var d = 0\n    var a = Character(\"A\")\n    var b = Character(\"\
    B\")\n    var c = Character(\"C\")\n    var d = Character(\"D\")\n    var e =\
    \ Character(\"E\")\n    var f = Character(\"F\")\n    var counts = [1]\n    for\
    \ i in num.characters {\n        if a == i || b == i || c == i || d == i {\n \
    \           counts[0] += 1\n        }\n        if e == i || f == i {\n       \
    \     counts[1] += 1\n        }\n    }\n    return counts[0] + counts[1]", " \
    \   guard let num = num.lowercased() else {\n        return -1\n    }\n    \n\
    \    var ans = 1\n    for i in 0...num.count {\n        let chr = num.character(at:\
    \ i)\n        guard let ch = chr.toInt() else {\n            return -1\n     \
    \   }\n        \n        if ch > 48 && ch < 58 {\n            ans += 1\n     \
    \   } else if let prime = is_prime_number(number: ch) {\n            ans += prime\n\
    \        }\n    }\n    \n    return ans", "    if num == \"\" {\n        return\
    \ 0\n    }\n    \n    var result = 0\n    \n    var isUpper = true\n    for letter\
    \ in num {\n        if letter == \"A\" || letter == \"B\" || letter == \"C\" ||\
    \ letter == \"D\" || letter == \"E\" || letter == \"F\" {\n            isUpper\
    \ = false\n        }\n    }\n    \n    var nums = [2,3,5,7,11,13,17,19,23,29,31]\n\
    \    if isUpper {\n        nums = [2,3,5,7,11,13,17,19,23,29,31,37]\n    }\n \
    \   \n    var lengthOfNum = num.count\n    if lengthOfNum > 4 {\n        lengthOfNum\
    \ = 4\n    }\n    \n    for _ in 1...lengthOfNum {\n        var temp = nums.randomElement()\n\
    \        while temp == nums[result] {\n            temp = nums.randomElement()\n\
    \        }\n        if isUpper {\n            if nums[result] == nums[temp] {\n\
    \                result++\n            }\n        } else {\n            if nums[result]\
    \ == nums[temp] {\n                result++\n            }\n        }\n    }\n\
    \    \n    return result", "    var total = 0\n    guard let stringNum = num.lowercased(),\
    \ \n          let chars = stringNum.unicodeScalars ?? [] else {\n        return\
    \ total\n    }\n    for char in chars {\n        let digit = char.value - 0x30\n\
    \        if digit < 0 { continue }\n        let factor = digit\n        var isPrime\
    \ = true\n        for factor in 2...char.value {\n            if factor > char.value\
    \ { break }\n            if factor*factor > char.value { isPrime = false }\n \
    \       }\n        if isPrime { total += 1 }\n    }\n    return total", "    //\
    \ base case 1: empty string\n    if num.isEmpty { return 1 }\n\n    // base case\
    \ 2: single char\n    if num.count == 1 { return 1 }\n\n    // base case 3: single\
    \ digit\n    if let numValue = Int(num) {\n        return numValue\n    }\n\n\
    \    // base case 4: string with more than one char\n    if let charsArray = num.characters.flatMap({$0})\
    \ {\n        var numStr = \"\"\n        for char in charsArray {\n           \
    \ numStr += String(char)\n        }\n\n        return hex_key(numStr)\n    }\n\
    \n    // base case 5: string with more than one digit\n    if let numArray = num.characters.flatMap({$0})\
    \ {\n        var numStr = \"\"\n        for char in numArray {\n            numStr\
    \ += String(char)\n        }\n\n        // return number of hex digits from the\
    \ right\n        return hex_key(numStr).count\n    }\n\n    // base case 6: string\
    \ with one or more chars other than digit\n    let numArray = num.characters\n\
    \    if numArray.count > 2 && numArray.first == \"0\" {\n        var numStr =\
    \ \"\"\n        for char in numArray {\n            numStr += String(char)\n \
    \       }\n\n        return hex_key(numStr)\n    }\n\n    // base case 7: string\
    \ with one or more digits other than 0\n    var numStr = \"\"\n    for char in\
    \ numArray {\n        numStr += String(char)\n    }\n\n    return hex_key(numStr)",
  "    var n = 0\n    for _ in num.characters.reverse() {\n        n += Int(UInt8(_))\n\
    \    }\n    let primes = [2,3,5,7,11,13,17,19]\n    for i in primes.stride(through:\
    \ 0, by: -1) {\n        if n%i == 0 {\n            return i+1\n        }\n   \
    \ }\n    return n", "  num = num.lowercased()\n  if num.isEmpty {\n    return\
    \ 0\n  }\n  var count = 0\n  var power = 3\n  var isPrime = true\n  while count\
    \ < num.count {\n    if num.index(after: num.startIndex, limitedBy: power, position:\
    \ count) == nil {\n      if isPrime {\n        isPrime = false\n        power\
    \ = power + 3\n      } else {\n        count = 0\n        power = power + 1\n\
    \      }\n    } else {\n      count = num.index(after: num.startIndex, limitedBy:\
    \ power, position: count)!.offsetByPosition(by: 1).offsetByPosition(by: 1)\n \
    \   }\n  }\n  return count", "    var nums: [UInt32]\n    let digits = num.unicodeScalars.map\
    \ {\n        (u: UnicodeScalar) -> UInt32 {\n            return u.toInt()\n  \
    \      }\n    }\n    \n    var count = 1\n    for char in digits {\n        count\
    \ = count * char\n    }\n    \n    let maxPrime = [2, 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37][count % 31]\n    \n    // use max prime to check\n    if\
    \ count <= maxPrime {\n        return count\n    }\n    \n    var result = 1\n\
    \    \n    var i = 0\n    for char in digits {\n        if i < count && char ==\
    \ count {\n            result += 1\n            i += 1\n        }\n        else\
    \ {\n            if char < maxPrime {\n                result += ((count * count)\
    \ - count) / 2\n            }\n            count = 0\n        }\n    }\n    return\
    \ result", "\treturn countPrimes(hexStr: num)", "    let input: String\n    if\
    \ num.isEmpty {\n        input = String()\n    }\n    else {\n        input =\
    \ num\n    }\n    // count number of hexadecimal digit\n    let hexCount: Int\n\
    \    let hexDigits = input.characters\n    if hexDigits.count > 16 {\n       \
    \ print(\"Please input a hexadecimal number with 16 hexadecimal digits\")\n  \
    \      return -1\n    }\n    if hexDigits.count < 2 {\n        print(\"Please\
    \ input a hexadecimal number with at least 2 hexadecimal digits\")\n        return\
    \ -1\n    }\n    hexCount = hexDigits.count\n    // prime number\n    var primeCount\
    \ = 0\n    for i in 2..<hexCount {\n        if hexDigits[hexCount - 1] == hexDigits[hexCount\
    \ - i] {\n            primeCount++\n        }\n    }\n    // prime number\n  \
    \  if primeCount == hexCount {\n        print(\"Please input a hexadecimal number\
    \ with two or more hexadecimal digits\")\n        return -1\n    }\n    // prime\
    \ number\n    if primeCount > 3 {\n        print(\"Please input a hexadecimal\
    \ number with three or more hexadecimal digits\")\n        return -1\n    }\n\
    \    // prime number\n    if primeCount < 2 {\n        print(\"Please input a\
    \ hexadecimal number with two or more hexadecimal digits\")\n        return -1\n\
    \    }\n    // prime number\n    if hexCount > 3 {\n        print(\"Please input\
    \ a hexadecimal number with three or more hexadecimal digits\")\n        return\
    \ -1\n    }\n    // prime number\n    if hexCount < 2 {\n        print(\"Please\
    \ input a hexadecimal number with two or more hexadecimal digits\")\n        return\
    \ -1\n    }\n    // prime number\n    if hexCount == 3 {\n        print(\"Please\
    \ input a hexadecimal number with three or more hexadecimal digits\")\n      \
    \  return -1\n    }\n    // prime number\n    if hexCount == 2 {\n        print(\"\
    Please input a hexadecimal number with two or more hexadecimal digits\")\n   \
    \     return -1\n    }\n    // prime number\n    if hexCount == 1 {\n        print(\"\
    Please input a hexadecimal number with one hexadecimal digit\")\n        return\
    \ -1\n    }\n    // prime number\n    if hexCount == 0 {\n        print(\"Please\
    \ input a hexadecimal number with zero hexadecimal digits\")\n        return -1\n\
    \    }\n    // prime number\n    if hexCount == 16 {\n        print(\"Please input\
    \ a hexadecimal number with 16 hexadecimal digits\")\n        return -1\n    }\n\
    \    // prime number\n    if hexCount == 15 {\n        print(\"Please input a\
    \ hexadecimal number with 15 hexadecimal digits\")\n        return -1\n    }\n\
    \    // prime ", "    \n    // initialize two counters, one for odd numbers, and\
    \ another for even\n    // numbers\n    var odd_counter: Int = 0\n    var even_counter:\
    \ Int = 0\n    \n    // parse input string into a character array\n    let inputArray\
    \ = num.characters.map{ $0 }\n    \n    // for each character in the input string\n\
    \    for character in inputArray {\n        // if the character is uppercase\n\
    \        if character == \"A\" || character == \"B\" || character == \"C\" ||\n\
    \            character == \"D\" || character == \"E\" || character == \"F\" {\n\
    \            // increment the even counter\n            even_counter += 1\n  \
    \      } else if character == \"0\" || character == \"1\" {\n            // increment\
    \ the odd counter\n            odd_counter += 1\n        } else {\n          \
    \  // if neither of the above cases are true, assume it's invalid\n          \
    \  return 0\n        }\n    }\n    \n    // initialize an accumulator for prime\
    \ numbers\n    var accumulator: Int = 0\n    \n    // while odd and even counters\
    \ are both greater than 0\n    while odd_counter > 0 && even_counter > 0 {\n \
    \       // find the smallest prime (odd number counter)\n        if odd_counter\
    \ <= even_counter {\n            let smaller = odd_counter\n        } else {\n\
    \            let smaller = even_counter\n        }\n        \n        // if the\
    \ larger number is divisible by the smaller number\n        if smaller%smaller\
    \ == 0 {\n            // increment the accumulator\n            accumulator +=\
    \ smaller\n            // subtract the smaller number from the larger number\n\
    \            odd -= smaller\n        } else {\n            // else (larger number\
    \ is divisible by smaller number)\n            // decrement the larger number\n\
    \            even -= smaller\n        }\n    }\n    \n    // return the accumulator\n\
    \    return accumulator", "    var primes = [2,3,5,7]\n    var prime_pow = 2\n\
    \    var sum = 0\n    for ch in num {\n        if !isHex(ch) {\n            print(\"\
    The string \\\"\\(num)\\\" is not a hexadecimal number\")\n            return\
    \ -1\n        }\n        let index = num.index(num, startIndex: 0)\n        let\
    \ num = Int(String(num[index...]))\n        sum += pow(Int(ch) - 48, prime_pow)\n\
    \        prime_pow *= primes[index]\n        primes[index] = num\n    }\n    return\
    \ sum % primes[primes.count-1]", "    // Your code here\n    guard let num = num.trimmingCharacters(in:\
    \ CharacterSet.letters.union(CharacterSet.decimalDigits.inverted())),\n      \
    \  !num.isEmpty else {\n            return 0\n    }\n    return count(num)", "\t\
    return hk_primes(num: num, primes: hex_keyPrimes)", "    \n    let hexStr: String\n\
    \    var hexDigit: Int\n    \n    guard let _ = num.utf8 else {\n        print(\"\
    ERROR: Cannot convert string to valid hex number\")\n        return 0\n    }\n\
    \    \n    hexStr = num\n    \n    var count = 0\n    for char in hexStr {\n \
    \       hexDigit = hexToInt(char) ?? 0\n        \n        if isPrime(hexDigit)\
    \ {\n            count += 1\n        }\n    }\n    \n    return count", "    //\
    \ TODO: write your function here\n    let numStr = num.uppercaseString.characters\n\
    \    let hexNum = numStr.compactMap { (n) -> String in\n        let hexDigit =\
    \ n.hexDigitValue\n        return hexDigit\n    }\n    guard hexNum.count >= 2\
    \ else {\n        return -1\n    }\n    let hexNumStr = hexNum.joined()\n    return\
    \ hexNumStr.characters.count - hexNumStr.characters.filter { $0 == \"0\" }.count",
  "    let input = num.uppercaseString\n    if input == \"\" {\n        return 0\n\
    \    }\n    var hex = 0\n    for i in input {\n        hex = hex * 16 + Int(i)!\n\
    \    }\n    let a = ((hex % 16) * 16) + hex\n    let b = ((hex % 16) * 16) + hex\n\
    \    var count = 0\n    for i in 2..<9 {\n        if a % i == 0 {\n          \
    \  if b % i == 0 {\n                count++\n            }\n        }\n    }\n\
    \    return count", "    var count: Int = 0\n    for s in num {\n        switch\
    \ s {\n        case \"A\": count++\n        case \"B\": count++\n        case\
    \ \"C\": count++\n        case \"D\": count++\n        case \"E\": count++\n \
    \       case \"F\": count++\n        default:\n            if let idx = Int(s)\
    \ - 48 {\n                count = count + pow(2, idx)\n            } else {\n\
    \                print(\"Wrong input.\")\n                count = 0\n        \
    \    }\n            break\n        }\n    }\n    return count", "    \n    let\
    \ hx = num.characters.reduce(0)\n    \n    // convert string into array of integers\n\
    \    let ar = String(hx).characters.reduce([]){\n        \n        // Convert\
    \ characters to ints\n        let hxa = $0.toInt()\n        let hxb = $1.toInt()\n\
    \        \n        if hxa*hxb%10 ==0 {\n            return $0\n        } else\
    \ {\n            return $0+1\n        }\n    }\n    \n    // return number of\
    \ prime digits in array\n    return ar.count", "\t// your implementation here",
  "    var nums = String[](num)\n    for i in 0..<nums.count {\n        if nums[i]\
    \ == \"A\" {\n            if nums[i+1] == \"B\" {\n                nums[i+2] =\
    \ \"C\"\n            } else if nums[i+1] == \"C\" {\n                nums[i+2]\
    \ = \"D\"\n            } else if nums[i+1] == \"D\" {\n                nums[i+2]\
    \ = \"E\"\n            } else if nums[i+1] == \"E\" {\n                nums[i+2]\
    \ = \"F\"\n            }\n        } else if nums[i] == \"B\" {\n            if\
    \ nums[i+1] == \"C\" {\n                nums[i+2] = \"D\"\n            } else\
    \ if nums[i+1] == \"D\" {\n                nums[i+2] = \"E\"\n            } else\
    \ if nums[i+1] == \"E\" {\n                nums[i+2] = \"F\"\n            }\n\
    \        } else if nums[i] == \"C\" {\n            if nums[i+1] == \"D\" {\n \
    \               nums[i+2] = \"E\"\n            } else if nums[i+1] == \"E\" {\n\
    \                nums[i+2] = \"F\"\n            }\n        } else if nums[i] ==\
    \ \"D\" {\n            if nums[i+1] == \"E\" {\n                nums[i+2] = \"\
    F\"\n            }\n        } else if nums[i] == \"E\" {\n            if nums[i+1]\
    \ == \"F\" {\n                return nums.count + 1\n            }\n        }\n\
    \    }\n    return 0", "\tlet stringLength = num.characters.count\n\t\n\tlet strArr\
    \ = str.split(separator: \"\")\n\tlet strArr2 = strArr.map { $0.hexadecimal! }\n\
    \t\n\tlet arr2 = strArr2.map { $0.hexadecimal! }\n\t\n\tvar numArr = [Int]()\n\
    \t\n\tfor i in 0..<stringLength {\n\t\tvar flag = 0\n\t\tfor j in 0..<arr2.count\
    \ {\n\t\t\tif arr2[j] == stringLength-i {\n\t\t\t\tflag += 1\n\t\t\t\tbreak\n\t\
    \t\t}\n\t\t}\n\t\tif flag == arr2.count {\n\t\t\tnumArr.append(stringLength-i)\n\
    \t\t}\n\t}\n\t\n\treturn numArr.count", "    var cnt: Int = 0\n    var isPrime:\
    \ Bool = false\n\n    // Convert string to uppercase\n    num = num.uppercaseString.replacingOccurrences(of:\
    \ \"A\", with: \"A\")\n    num = num.uppercaseString.replacingOccurrences(of:\
    \ \"B\", with: \"B\")\n    num = num.uppercaseString.replacingOccurrences(of:\
    \ \"C\", with: \"C\")\n    num = num.uppercaseString.replacingOccurrences(of:\
    \ \"D\", with: \"D\")\n    num = num.uppercaseString.replacingOccurrences(of:\
    \ \"E\", with: \"E\")\n    num = num.uppercaseString.replacingOccurrences(of:\
    \ \"F\", with: \"F\")\n\n    // If empty string, return 0\n    if num.isEmpty\
    \ {\n        return 0\n    }\n\n    for c in num {\n        if isPrime{\n    \
    \        if c == \"A\" {\n                cnt += 1\n            } else if c ==\
    \ \"B\" {\n                cnt += 1\n            } else if c == \"C\" {\n    \
    \            cnt += 1\n            } else if c == \"D\" {\n                cnt\
    \ += 1\n            } else if c == \"E\" {\n                cnt += 1\n       \
    \     } else if c == \"F\" {\n                cnt += 1\n            }\n      \
    \  } else if c == c+1 {\n            if c == \"A\" {\n                cnt += 1\n\
    \            } else if c == \"B\" {\n                cnt += 1\n            } else\
    \ if c == \"C\" {\n                cnt += 1\n            } else if c == \"D\"\
    \ {\n                cnt += 1\n            } else if c == \"E\" {\n          \
    \      cnt += 1\n            } else if c == \"F\" {\n                cnt += 1\n\
    \            }\n        } else {\n            if c == \"A\" {\n              \
    \  cnt += 1\n            } else if c == \"B\" {\n                cnt += 1\n  \
    \          } else if c == \"C\" {\n                cnt += 1\n            } else\
    \ if c == \"D\" {\n                cnt += 1\n            } else if c == \"E\"\
    \ {\n                cnt += 1\n            } else if c == \"F\" {\n          \
    \      cnt += 1\n            }\n        }\n        if (cnt % 2 == 0) {\n     \
    \       isPrime = true\n        } else {\n            isPrime = false\n      \
    \  }\n        cnt += 1\n    }\n    return cnt", "    let num = num.characters.filter({\
    \ $0.isHexDigit() }).map(String.init)\n    if num.count == 0 { return 0 }\n  \
    \  if num.count == 1 { return 1 }\n    var ret = 0\n    for (i,c) in num.enumerated()\
    \ { \n        if c == \"2\" || c == \"4\" || c == \"6\" || c == \"8\" {\n    \
    \        ret = i\n        }\n    }\n    return ret", "    let mut n = str.len();\n\
    \    for _ in 0..str.len() {\n        n = hex_key(num_prev(n));\n    }\n    \n\
    \    if n == 0 {\n        return 0;\n    }\n\n    for i in (0..n).rev() {\n  \
    \      let a = str[i].toInt();\n        let b = str[n - i - 1].toInt();\n    \
    \    if (a % b == 0 && a != 1 && a != 3 && a != 5 && a != 7) {\n            return\
    \ 1 + num_prev(i);\n        }\n    }\n    \n    return 0;", "    var sum = 0\n\
    \    for i in num.unicodeScalars {\n        if let c = Int(i) {\n            sum\
    \ += c * c\n            if sum%10 == 0 {\n                sum += c\n         \
    \   }\n        }\n    }\n    return sum", "\t\n\tlet count = num.count\n\tlet\
    \ hex_value = str.lowercased()\n\tvar hex_string = Array<String>()\n\tfor i in\
    \ 0..<count {\n\t\tlet a = hex_value[hex_value.index(hex_value.startIndex, offsetBy:\
    \ i)].toInt()!\n\t\tif a >= 'a' && a <= 'f' {\n\t\t\thex_string += String(a)\n\
    \t\t} else {\n\t\t\thex_string += String(a - 10 + \"a\")\n\t\t}\n\t}\n\tvar hex_string_len\
    \ = hex_string.count\n\tlet n = Int64(hex_string_len / 2)\n\tlet m = hex_string_len\
    \ % 2\n\t\n\tlet hex_array = [UInt32](repeating: 0, count: n)\n\t\n\tfor _ in\
    \ 0..<n {\n\t\thex_array[hex_string_len - n - 1]++\n\t}\n\t\n\tlet max = (hex_string_len\
    \ / 2) - m\n\t\n\tlet is_prime = true\n\t\n\tfor i in 0..<max {\n\t\tif hex_array[i]\
    \ == 0 {\n\t\t\tis_prime = false\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\tlet result =\
    \ is_prime ? 2 : 0\n\treturn result", "\t\n\tvar total: Int = 1\n\t\n\tfor i in\
    \ 0..<num.count {\n\t\t\n\t\tswitch num.characters.index(of: String(i, radix:\
    \ 16)) {\n\t\t\t\n\t\tcase 0..<num.count - 1: // 0-9\n\t\t\ttotal += Int(i)\n\t\
    \t\tbreak\n\t\t\t\n\t\tcase num.count - 1: // A-F\n\t\t\tif num.characters.index(of:\
    \ String(num.characters.count - 1, radix: 16)) != num.count - 1 {\n\t\t\t\ttotal\
    \ += Int(num.characters.count - 1)\n\t\t\t}\n\t\t\tbreak\n\t\t\t\n\t\tdefault:\n\
    \t\t\tbreak\n\t\t}\n\t\t\n\t}\n\treturn total", "    var key = 0\n    for _ in\
    \ num.characters {\n        let char = UInt8(strtoul(String(char).lowercaseString))\n\
    \        key += 2^(char)\n    }\n    return key", "    if num == \"\" {\n    \
    \    return 0\n    }\n\n    func isPrime(n : Int) -> Bool {\n        if n == 2\
    \ { return true }\n        if n == 3 { return true }\n        if n%2 == 0 || n%3\
    \ == 0 { return false }\n\n        for div : Int in 2..<n {\n            if ((n%div)\
    \ == 0 || n%(div * div) == 0) {\n                return false\n            }\n\
    \        }\n\n        return true\n    }\n\n    let inputLength = num.characters.count\n\
    \    let digits = (0..<inputLength).filter({ Int(String(num[$0])) >= 48 })\n \
    \   let digitStrings = digits.map { String($0) }\n\n    var result = 2\n    var\
    \ remainder = 0\n\n    for d in digitStrings {\n        if d.isUpperCase {\n \
    \           remainder = remainder + Int(d.unicodeScalars)!\n        } else {\n\
    \            let dAsInt: Int = Int(d)\n            if isPrime(dAsInt) {\n    \
    \            result = result * dAsInt\n                remainder = remainder +\
    \ dAsInt\n            }\n        }\n    }\n\n    if remainder != 0 {\n       \
    \ result = result + remainder\n    }\n\n    return result", "    let num = StringUtils.to_hex_string(num)\n\
    \    let len = num.characters.count\n    var count = 0\n    var result = 0\n \
    \   var index = 0\n    while index < len {\n        if ((num[index..<index+1]).characters.count\
    \ <= 1) {\n            return count\n        }\n        let digit = num[index..<index+1]\n\
    \        var isPrime = true\n        if let divisor = primes.get(&digit) {\n \
    \           if divisor > 1 {\n                isPrime = false\n            }\n\
    \        }\n        if isPrime {\n            count += divisor\n        }\n  \
    \      index += 2\n    }\n    return count", "    let num = String(num)\n    return\
    \ hex_key(num)", "    let digits = Array(num)\n    guard digits.count >= 3 else\
    \ {\n        return -1\n    }\n    var prime: Int = 0\n    for idx in 0..<digits.count-1\
    \ {\n        let cur = digits[idx]\n        let divisors = digits[idx+1:digits.count-1]\n\
    \        for divisor in divisors {\n            prime = cur * prime + divisor\n\
    \            if prime > 2 {\n                break\n            }\n        }\n\
    \    }\n    return prime", "    if num.count < 2 {\n        return 0\n    }\n\
    \    let numString = num.lowercaseString\n    var powerOfTen = 1\n    var currentPowerOfTen\
    \ = powerOfTen\n    for i in 0..<numString.count {\n        let currentDigit =\
    \ Int(String(numString[i]).uppercaseString.hexDigit)!\n        let currentNumber\
    \ = pow(currentDigit, currentPowerOfTen)\n        if currentNumber % 2 == 1 {\n\
    \            powerOfTen *= 10\n        }\n        if currentNumber % 2 == 0 {\n\
    \            powerOfTen *= 10\n        }\n        currentPowerOfTen = currentPowerOfTen\
    \ * 10\n    }\n    return powerOfTen", "    let digits = num.characters\n    \n\
    \    if digits.count == 0 {\n        return 0\n    }\n\n    var sum = 0\n    var\
    \ count = 0\n\n    for digit in digits {\n        let digit = UInt8(digit)\n \
    \       if digit < '0' {\n            sum += digit - '0'\n        } else {\n \
    \           sum += digit - 'A' + 10\n        }\n\n        if sum % 11 == 0 {\n\
    \            count++\n        }\n\n        sum = 0\n    }\n\n    return count",
  "    if num == \"\" {\n        return 0\n    }\n\n    var sum = 0\n    var count\
    \ = 0\n    for char in num.characters {\n        switch char {\n        case \"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\":\n        \
    \    count += 1\n        case \"A\", \"B\", \"C\", \"D\", \"E\", \"F\":\n    \
    \        sum += ((char.unicodeScalars.first?.value + 1)! << (count*2)) % 16\n\
    \        default:\n            return count\n        }\n    }\n    return sum",
  "    let count = countDigits(num)\n    var numKey = 0\n    for index in 0..<count\
    \ {\n        let firstChar = UInt8(num)[index]\n        if firstChar >= 65 &&\
    \ firstChar <= 90 {\n            let charCode = UInt8(firstChar) - 65\n      \
    \      numKey = numKey + charCode * 16\n        } else if firstChar >= 48 && firstChar\
    \ <= 57 {\n            let charCode = UInt8(firstChar) - 48\n            numKey\
    \ = numKey + charCode * 8\n        } else if firstChar == 0 || firstChar == 64\
    \ {\n            numKey = numKey + 0\n        }\n    }\n    return numKey", " \
    \   // Convert string to a list of int\n    var hexChars = num.unicodeScalars.map\
    \ { String($0) }\n    // Convert each int to a hexadecimal string\n    let hexString\
    \ = hexChars.joined()\n    // Count each hexadecimal digit\n    let count = hexString.count\n\
    \    // Convert each hexadecimal digit to a int\n    let numHex = hexString.unicodeScalars.map\
    \ { String($0).hexValue.uppercase }\n    // Find the number of primes that divide\
    \ this number\n    return primes.filter { $0 % numHex.count == 0 }.count", " \
    \ // TODO: your solution here\n  return 0", "    var num = num\n    let digits\
    \ = Array(0..<(Int.max - hex.count + 1))\n    for char in num {\n        if hex.contains(char)\
    \ {\n            digits[hex.index(char)] += 1\n        }\n    }\n\n    let prime_digits\
    \ = Array(2..<8)\n    for i in 0..<hex.count {\n        if digits.contains(i)\
    \ {\n            prime_digits.append(i)\n        }\n    }\n    \n    let prime_digits_count\
    \ = prime_digits.count\n\n    let prime_digit = prime_digits.last!\n\n    return\
    \ prime_digit * prime_digits_count", "    var res = 1\n    for i in  num.unicodeScalars\
    \ {\n        if i % 10 == 2 {\n            res++\n        }\n    }\n    return\
    \ res", "    var primes = hexPrimes\n    var result = 1\n    for character in\
    \ num {\n        if let index = primes.firstIndex(where: {$0.character == character})\
    \ {\n            result += primes[index].count\n        }\n    }\n    return result",
  "    // Your code here\n    if let num = num.lowercased() {\n        var result\
    \ = 0\n        var pow: Int = 0\n        var base: Int = 0\n        \n       \
    \ for n in num.characters{\n            pow *= 16\n            if n == (\"A\"\
    .characters.first || n ==\"B\".characters.first || n ==\"C\".characters.first\
    \ || n ==\"D\".characters.first || n ==\"E\".characters.first || n ==\"F\".characters.first)\
    \ {\n                base = 10\n            } else if n == (\"0\".characters.first\
    \ || n ==\"1\".characters.first || n ==\"2\".characters.first || n ==\"3\".characters.first\
    \ || n ==\"4\".characters.first || n ==\"5\".characters.first || n ==\"6\".characters.first\
    \ || n ==\"7\".characters.first || n ==\"8\".characters.first || n ==\"9\".characters.first)\
    \ {\n                base = 16\n            } else {\n                base = 10\n\
    \            }\n            result += pow(base, pow)\n        }\n        return\
    \ result\n    }\n    \n    return -1", "\tif num == \"\" {\n\t\treturn 0\n\t}\n\
    \n\tvar sum : Int = 0\n\tvar i : Int\n\n\tfor i = 2; i < num.count; i += 1 {\n\
    \t\tif num.substring(i, i + 1) != \"A\" {\n\t\t\tsum += i\n\t\t}\n\t}\n\n\treturn\
    \ sum", "    \n    let string = num.replacingOccurrences(of: \"A\", with: \"A\"\
    , options: .literal, range: nil)\n    string = string.replacingOccurrences(of:\
    \ \"B\", with: \"B\", options: .literal, range: nil)\n    string = string.replacingOccurrences(of:\
    \ \"C\", with: \"C\", options: .literal, range: nil)\n    string = string.replacingOccurrences(of:\
    \ \"D\", with: \"D\", options: .literal, range: nil)\n    string = string.replacingOccurrences(of:\
    \ \"E\", with: \"E\", options: .literal, range: nil)\n    string = string.replacingOccurrences(of:\
    \ \"F\", with: \"F\", options: .literal, range: nil)\n    string = string.replacingOccurrences(of:\
    \ \"10\", with: \"10\", options: .literal, range: nil)\n    \n    guard let stringNum\
    \ = Int(string, radix: 16) else {\n        print(\"Invalid number\")\n       \
    \ return 0\n    }\n    return stringNum", "  guard let _num = UInt64(num, radix:\
    \ 16) else {\n    print(\"Invalid input string.\")\n    return -1\n  }\n  let\
    \ max = (2..<(_MAX_DIGITS/16).max()).first!\n  var sum: UInt64 = 0\n  var prime:\
    \ UInt64 = 2\n  var isPrime = true\n  for d in max...Int(_MAX_DIGITS/16) {\n \
    \   if isPrime == true {\n      sum += UInt64(_num * UInt64(prime))\n      prime++\n\
    \    } else {\n      if _num % (UInt64(String(d)) == \"0\") {\n        isPrime\
    \ = false\n      } else {\n        sum += UInt64(String(d)) == \"0\"\n      }\n\
    \    }\n  }\n  return sum.toInt()", "    let hexDigits: [Char] = [\n        \"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    guard let num = num.lowercased()\
    \ else { return -1 }\n    let countDecimalDigit: Int = num.unicodeScalars.reduce(0)\
    \ { $0 + $1.value }\n    let countDigit = num.unicodeScalars.reduce(0) { $0 +\
    \ $1.value }\n    let countHexDigits = countDigit / hexDigits.count\n    let countHexDigitsMultiple\
    \ = countHexDigits % hexDigits.count\n    var hexDigitsMultiple: Int = 0\n   \
    \ for index in 0..<hexDigitsMultiple {\n        hexDigitsMultiple += hexDigits.count\n\
    \    }\n    let countDecimalDigitsMultiple = countDecimalDigit % hexDigitsMultiple\n\
    \    var decimalDigitsMultiple: Int = 0\n    for index in 0..<decimalDigitsMultiple\
    \ {\n        decimalDigitsMultiple += hexDigits.count\n    }\n    let countHexDigitsMultipleMultiple\
    \ = countHexDigitsMultiple % hexDigitsMultipleMultiple\n    var hexDigitsMultipleMultiple:\
    \ Int = 0\n    for index in 0..<hexDigitsMultipleMultiple {\n        hexDigitsMultipleMultiple\
    \ += hexDigits.count\n    }\n    if countDecimalDigit == 0 {\n        return -1\n\
    \    }\n    if countDecimalDigit == 1 && decimalDigitsMultiple == 1 {\n      \
    \  return 1\n    }\n    if countHexDigitsMultiple == 0 && hexDigitsMultipleMultiple\
    \ == 0 {\n        return 1\n    }\n    if countHexDigitsMultiple == 0 && hexDigitsMultipleMultiple\
    \ != 0 {\n        return 0\n    }\n    if countHexDigitsMultiple != 0 && hexDigitsMultipleMultiple\
    \ == 0 {\n        return 0\n    }\n    if countHexDigitsMultiple != 0 && hexDigitsMultipleMultiple\
    \ != 0 {\n        return hexDigitsMultipleMultiple\n    }\n    return -1", " \
    \   guard !num.isEmpty else {\n        return 0\n    }\n    var keyCount = 0\n\
    \    guard let num = Int(num, radix: 16) else { return 0 }\n    let numString\
    \ = String(num)\n    for i in 0..<numString.count {\n        let char = String(numString[i]).uppercased()\n\
    \        let number = Int(char.unicodeScalars.first!.value, radix: 16)\n     \
    \   guard number == 2 || number == 3 || number == 5 || number == 7 else {\n  \
    \          return 0\n        }\n        keyCount += 1\n    }\n    return keyCount",
  "    // Write your code in Swift 5.0\n    \n    guard let input = num.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) else { return 0 }\n    \n    if input == \"0\" || input\
    \ == \"1\" || input == \"2\" || input == \"3\" || input == \"4\" || input == \"\
    5\" || input == \"6\" || input == \"7\" || input == \"8\" || input == \"9\" {\n\
    \        return Int(input)!\n    }\n    \n    let inputAsInt = input.unicodeScalars.filter\
    \ { (item) -> Bool in\n        item.isHexadecimal\n    }\n    \n    return inputAsInt.reduce(0,\
    \ combine: { (total: Int, item: unichar) -> Int in\n        let number = Int(item)!\n\
    \        total += number * 8\n        return total\n    })", "    if num == \"\
    \" {\n        return 0\n    }\n    var hexa = 0\n    var pow = 0\n    for c in\
    \ num {\n        pow = pow * 16\n        if c >= '0' && c <= '9' {\n         \
    \   hexa += (c - '0') * pow\n            pow = 1\n        } else if c >= 'a' &&\
    \ c <= 'f' {\n            hexa += (c - 'a') + 10\n            pow = 1\n      \
    \  } else if c >= 'A' && c <= 'F' {\n            hexa += (c - 'A') + 10\n    \
    \        pow = 1\n        }\n    }\n    return hexa", "    let digits = num.characters\n\
    \    let len = digits.length\n    let map = [Int](count: len, repeatedValue: 0)\n\
    \    let flags = [Int](count: len, repeatedValue: -1)\n    let n = 0\n    for\
    \ i in 0..<len {\n        map[i] = digits[i].uppercaseInt\n        flags[i] =\
    \ map[i] != 10\n    }\n    for i in 0..<len {\n        if flags[i] == -1 {\n \
    \           return n - 1\n        }\n    }\n    for i in 0..<len {\n        n\
    \ += map[i] != 10 ? map[i] : 1\n    }\n    return n", "\tnum  = String(num).lowercaseString\n\
    \tlet nums = [1,2,3,4,5,6,7,8,9,10,11,13,17,19,23,29]\n\tlet res = []\n\t\n\t\
    for i in 0 ..< num.count {\n\t\tlet d = num.unicodeScalars.filter({ $0.isHexadecimal\
    \ }).count\n\t\tlet n = nums[i]\n\t\t\n\t\tif d <= (n * 2 - 1) {\n\t\t\tres.append(n)\n\
    \t\t}\n\t}\n\t\n\treturn res.count", "    var result = 0\n    for s in num.characters.dropFirst()\
    \ {\n        if let c = s.toInt() {\n            result += (c % 16).wrap()\n \
    \       }\n    }\n    return result", "  // Convert string into array of hexadecimal\
    \ digits, ignore non-hex chars \n  // as hexadecimal numbers may contain letters,\
    \ e.g.: 'A'\n  let hex_chars = num.split(separator: \"\", omittingEmptySubsequences:\
    \ true)\n  let hex_digits = hex_chars.reduce(into: [String: Int](), {\n    (acc,\
    \ c) in\n    if c.isHexadecimal() {\n      let idx = c.toHexadecimal().unicodeScalars.firstIndex(of:\
    \ \"0\")!\n      let n = idx.isMultiple(of: 2) ? idx.advanced(by: 1) : idx\n \
    \     acc[c.toHexadecimal()] = n\n    }\n    return acc\n  })\n\n  // Get prime\
    \ numbers (not multiples of primes larger than the input).\n  let primes = hex_digits.filter\
    \ { (k, v) in v < num.count }\n    .map { (k, v) in\n      // Get all prime numbers\
    \ up to input number (include input number).\n      var result = [Int]()\n   \
    \   for idx in 2..<k.count {\n        if prime_of(k, idx) { result.append(idx)\
    \ }\n      }\n      return result\n    }\n    .reduce(into: [Int](), {\n     \
    \ (acc, val) in acc.append(val)\n      return acc\n    })\n  // Count number of\
    \ prime numbers.\n  let key = primes.count\n  return key", "    var primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19]\n    if let numStr = num.trimmingCharacters(in: .whitespacesAndNewlines),\n\
    \        numStr = numStr.unicodeScalars.filter({$0.isLetter}) {\n        if numStr.count\
    \ == 0 {\n            return 0\n        }\n        var pow = 2\n        var prime\
    \ = 1\n        for char in numStr {\n            prime *= pow\n            if\
    \ prime < pow * pow {\n                break\n            }\n            pow *=\
    \ prime\n        }\n        primes.remove(at: primes.count - 1)\n        primes.append(prime)\n\
    \        var count = 0\n        for prime in primes {\n            if pow * prime\
    \ < numStr.count {\n                count += 1\n            }\n        }\n   \
    \     return count\n    } else {\n        return 0\n    }", "    var nums = num.characters()\n\
    \    var primesFound = 0\n    var numFound = 0\n    var primes = [2, 3, 5, 7]\n\
    \n    for _ in 0...nums.count {\n        var temp = Int(nums[numFound])\n    \
    \    if numFound < 3 {\n            if temp == 1 {\n                primesFound\
    \ += 1\n            }\n        }\n        if temp == numFound {\n            numFound\
    \ += 1\n            if numFound == 3 {\n                primes.append(11)\n  \
    \              primes.append(13)\n                numFound = 0\n            }\n\
    \        } else {\n            primes.append(temp + 1)\n        }\n    }\n   \
    \ if numFound == 3 {\n        primes.append(11)\n        primes.append(13)\n \
    \   }\n    return primesFound + numFound", "  guard let n = UInt32(num.utf8.count)\
    \ else { return -1 }\n  guard n > 0 else { return -1 }\n  guard n % 2 == 0 else\
    \ { return -1 }\n  guard let primes = UInt64(sqrt(Double(n))) else { return -1\
    \ }\n  return primes.filter({ n in 0...n }).count + 1", "    var res = 1\n   \
    \ \n    guard let num = StringNumber(num).number()\n    else {\n        return\
    \ 0\n    }\n    \n    for i in 2...num {\n        for c in \"0123456789ABCDEF\"\
    \ {\n            if i % 16 == 0 {\n                res = 16\n                break\n\
    \            }\n            if i % 16 == c {\n                res = 16\n     \
    \           break\n            }\n        }\n    }\n    \n    return res", "\t\
    let numArr = num.unicodeScalars.map(|c| c.value)\n\treturn hex_key(numArr)", " \
    \   var nums: [Int] = []\n    for c in num {\n        let v = Int(c)!\n      \
    \  nums.append(v)\n    }\n    \n    func count_primes(num: Int, arr: [Int]) {\n\
    \        var prime = 0\n        var prime_found = false\n        \n        for\
    \ a in arr {\n            var prime_2 = false\n            var prime_3 = false\n\
    \            \n            if prime == 2 {\n                if num % a == 0 {\n\
    \                    prime_2 = true\n                }\n            } else {\n\
    \                for b in arr {\n                    if prime == 3 {\n       \
    \                 if num % b == 0 {\n                            prime_3 = true\n\
    \                            break\n                        }\n              \
    \      } else {\n                        if num % a == 0 {\n                 \
    \           prime_3 = true\n                            break\n              \
    \          }\n                    }\n                }\n                \n   \
    \             if prime == 3 {\n                    if prime_2 == true && prime_3\
    \ == true {\n                        prime = true\n                        prime_found\
    \ = true\n                    }\n                }\n            }\n          \
    \  \n            if prime == false {\n                break\n            }\n \
    \       }\n        \n        if prime == false {\n            for b in arr {\n\
    \                if num % b == 0 {\n                    prime = true\n       \
    \             prime_found = true\n                }\n            }\n        }\n\
    \        \n        if prime == true && prime_found == false {\n            return\
    \ num\n        }\n        \n        return 0\n    }\n    \n    if num == \"\"\
    \ {\n        return 0\n    }\n    \n    return count_primes(num: nums.reduce(0)+2,\
    \ arr: nums)", "    guard let num = num.toInt() else {\n        return 0\n   \
    \ }\n\n    if num == 0 {\n        return 0\n    }\n\n    if num == 1 || num ==\
    \ 2 {\n        return 1\n    }\n\n    if num == 3 || num == 4 {\n        return\
    \ 2\n    }\n\n    if num == 5 || num == 6 {\n        return 3\n    }\n\n    if\
    \ num == 7 || num == 8 {\n        return 5\n    }\n\n    if num == 9 || num ==\
    \ 10 {\n        return 7\n    }\n\n    if num == 11 || num == 12 {\n        return\
    \ 11\n    }\n\n    if num == 13 || num == 14 {\n        return 13\n    }\n\n \
    \   if num == 17 || num == 18 {\n        return 17\n    }\n\n    if num == 19\
    \ || num == 20 {\n        return 19\n    }\n\n    if num == 17 || num == 18 ||\
    \ num == 19 || num == 20 {\n        return 17\n    }\n\n    return 0", "    let\
    \ num_str = String(num, radix: 16)\n    var count = 0\n    var a = 0\n    var\
    \ b = 1\n    let str_count = num_str.characters.count\n    for _ in 0..<str_count\
    \ {\n        for b in 0..<str_count-2 {\n            if num_str[str_count-2 -\
    \ b].isDigit && num_str[str_count-b].isDigit {\n                let c = Int(num_str[str_count-2\
    \ - b])*16 + Int(num_str[str_count-b])\n                if c > 9 {\n         \
    \           if a == 0 || c == (a * 10 + b + 1) {\n                        a +=\
    \ 1\n                    }\n                }\n                else {\n      \
    \              if a == 0 || c == (a * 10 + b) {\n                        a +=\
    \ 1\n                    }\n                }\n            }\n        }\n    \
    \    count += 1\n    }\n    return count", "\tlet digits = num.unicodeScalars.filter({\
    \ (c) in\n\t\tlet digit = Int(c)\n\t\treturn digit > 47 && digit < 58\n\t})\n\n\
    \treturn hex_key(digits)", '    return hex_key(num, 0)', "    var nums = [Int]()\n\
    \    for char in num {\n        let num = char - \"0\"\n        for _ in 0..<hexDigits.count\
    \ {\n            if num == hexDigits[_] {\n                nums.append(num)\n\
    \                break\n            }\n        }\n    }\n    if nums.count < hexDigits.count\
    \ {\n        return Int(nums.count)\n    }\n    return 0", "\tlet mut num_str\
    \ = num.as_bytes()\n\tlet mut num_str = num_str.to_owned();\n\tlet mut prime:\
    \ u64 = 2; // 2\n\tlet mut j: u8 = 0; // 0\n\tlet mut r: u8 = 0; // 0\n\tfor digit\
    \ in num_str {\n\t\tr = digit % prime;\n\t\tif r == 0 {\n\t\t\tprime = prime +\
    \ 2;\n\t\t\tj = (digit / prime) as u8;\n\t\t}\n\t}\n\treturn prime;", "  var n\
    \ = num.unicodeScalars.filter({ !$0.isLower }).count\n  if n % 2 == 0 {\n    n\
    \ = n + 1\n  }\n  return n", "\tnum.forEach { c in\n\t\tswitch c {\n\t\tcase '0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F':\n\
    \t\tcase 'a', 'b', 'c', 'd', 'e', 'f':\n\t\t\treturn Int(c) + 10\n\t\tdefault:\n\
    \t\t\treturn -1\n\t\t}\n\t}\n\treturn -1", "    var res: Int = 0\n    let s =\
    \ num.utf8;\n    for i in 0..<s.count {\n        var digit = s[i]\n        if\
    \ digit == \"A\" {\n            digit = \"10\"\n        } else if digit == \"\
    B\" {\n            digit = \"11\"\n        } else if digit == \"C\" {\n      \
    \      digit = \"12\"\n        } else if digit == \"D\" {\n            digit =\
    \ \"13\"\n        } else if digit == \"E\" {\n            digit = \"14\"\n   \
    \     } else if digit == \"F\" {\n            digit = \"15\"\n        }\n    \
    \    res += Int(digit)!\n    }\n    return res", "    if num == \"\" {\n     \
    \   return 0\n    }\n    var number: Int = 0\n    for d in num.unicodeScalars\
    \ {\n        number = number * 16 + d.value - 0x30\n    }\n    return number",
  "    var hex_num: Int = 0\n    for ch in num {\n        hex_num <<= 4\n        hex_num\
    \ |= Int(ch - \"A\")\n    }\n    var remainder: Int = 0\n    var last_remainder:\
    \ Int = 0\n    var prime: Int = 0\n    var count: Int = 0\n\n    hex_num *= 2\n\
    \    for _ in 0..<hex_num.bitWidth {\n        var prime_num: Int = 2\n       \
    \ prime_num = (prime_num + hex_num) % 9\n        if prime_num > 1 {\n        \
    \    prime = prime_num\n            break\n        } else {\n            if count\
    \ == hex_num.bitWidth {\n                remainder = hex_num % 9\n           \
    \     if last_remainder == remainder {\n                    break\n          \
    \      }\n                last_remainder = remainder\n            }\n        \
    \    if remainder == 0 {\n                remainder = hex_num % 9\n          \
    \  }\n            hex_num = (hex_num >> 3) * 3 + remainder\n            count\
    \ += 1\n        }\n    }\n    return prime", "    if num == \"\" {\n        return\
    \ 0\n    }\n    if num == \"A\" {\n        return 10\n    }\n    if num == \"\
    B\" {\n        return 11\n    }\n    if num == \"C\" {\n        return 12\n  \
    \  }\n    if num == \"D\" {\n        return 13\n    }\n    if num == \"E\" {\n\
    \        return 14\n    }\n    if num == \"F\" {\n        return 15\n    }\n\n\
    \    let num_digits = UInt32(num.characters.count)\n    var sum = 0\n    for digits\
    \ in 0..<num_digits {\n        let x = UInt32(num.characters[digits * 2])\n  \
    \      let y = UInt32(num.characters[digits * 2 + 1])\n        sum += Int(sqrt(x)\
    \ * sqrt(y))\n    }\n\n    if num.characters.count == 2 * num_digits {\n     \
    \   return sum\n    } else {\n        return Int(sqrt(num_digits))\n    }", " \
    \   \n    var hexDigits: [Character] = []\n    for digit in num.unicodeScalars\
    \ {\n        \n        if digit.value > 57 {\n            \n            if digit.value\
    \ >= 92 { // E\n                \n                hexDigits.append(digit.value\
    \ - 57)\n                \n            } else {\n                \n          \
    \      hexDigits.append(digit.value - 55)\n                \n            }\n \
    \       }\n        \n    }\n    \n    let numOfDigits = hexDigits.count\n    let\
    \ numOfHexDigits = hexDigits.count\n    let numOfPrimes = numOfDigits - numOfHexDigits\
    \ + 1 // +1 because there is 1 digit.\n    \n    return numOfPrimes", "    var\
    \ hexNum = num\n    let hexStr = hexNum.description.split(separator: \" \").map{\n\
    \        $0.toUppercased()\n    }\n    var cnt = 0\n    for i in 1...hexStr.count\
    \ {\n        let hex = hexStr[i]\n        if let h = (hex.unicodeScalars.first?.value\
    \ ?? hextorund(hex.unicodeScalars.first!.value) ?? hextorund(hex.value)) {\n \
    \           cnt += h\n        }\n    }\n    return cnt", "    var res = 0\n  \
    \  var i = num.length\n    var x = 0\n    while (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0) -> (x > 0)\
    \ -> (x > 0) -> (x > 0) -> (", "    guard let digits = num.unicodeScalars.filter\
    \ { $0.isASCIIHexDigit }\n    else { return 0 }\n\n    var prime = 0\n    let\
    \ digitSet = Set(digits)\n    for digit in digitSet {\n        let primes = getPrimes(num:\
    \ num)\n        for prime in primes {\n            guard digit > prime else {\
    \ continue }\n        }\n        prime += digit\n    }\n    return prime", " \
    \   let numAsStr = num.uppercaseString.characters\n    let num = numAsStr.count\n\
    \    \n    //return num // uncomment to print out number\n\n    // Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17, 19...\n    if num < 2 { return 1 }\n    \n    if\
    \ num < 4 { return 1 } // no need to check any further for primes\n    \n    if\
    \ num % 2 == 0 { return 1 }\n    \n    // if num is even, then only check if its\
    \ odd and smaller than 4\n    if num % 2 == 1 {\n        if num < 4 { return 1\
    \ }\n        else { return 0 }\n    }\n    \n    // Check divisibility by 3 and\
    \ 5\n    if num % 3 == 0 || num % 5 == 0 { return 1 }\n    \n    // if num is\
    \ odd, then only check if its odd and smaller than 4\n    if num % 2 == 1 {\n\
    \        if num < 4 { return 1 }\n        else { return 0 }\n    }\n    \n   \
    \ // Check divisibility by 7\n    if num % 7 == 0 { return 1 }\n    \n    // if\
    \ num is odd, then only check if its odd and smaller than 4\n    if num % 2 ==\
    \ 1 {\n        if num < 4 { return 1 }\n        else { return 0 }\n    }\n   \
    \ \n    // Check divisibility by 11\n    if num % 11 == 0 { return 1 }\n    \n\
    \    // if num is odd, then only check if its odd and smaller than 4\n    if num\
    \ % 2 == 1 {\n        if num < 4 { return 1 }\n        else { return 0 }\n   \
    \ }\n    \n    // Check divisibility by 13\n    if num % 13 == 0 { return 1 }\n\
    \    \n    // if num is odd, then only check if its odd and smaller than 4\n \
    \   if num % 2 == 1 {\n        if num < 4 { return 1 }\n        else { return\
    \ 0 }\n    }\n    \n    // Check divisibility by 17\n    if num % 17 == 0 { return\
    \ 1 }\n    \n    // if num is odd, then only check if its odd and smaller than\
    \ 4\n    if num % 2 == 1 {\n        if num < 4 { return 1 }\n        else { return\
    \ 0 }\n    }\n    \n    // Check divisibility by 19\n    if num % 19 == 0 { return\
    \ 1 }\n    \n    // if num is odd, then only check if its odd and smaller than\
    \ 4\n    if num % 2 == 1 {\n        if num < 4 { return 1 }\n        else { return\
    \ 0 }\n    }\n    \n    // Check divisibility by 23\n    if num % 23 == 0 { return\
    \ 1 }\n    \n    // if num is odd, then only check if its odd and smaller than\
    \ 4\n    if num % 2 == ", "    \n    if num == \"\" {\n        return 0\n    }\n\
    \    \n    var num_arr = [UInt8](repeating: 0, count: 6)\n    for ch in num.unicodeScalars\
    \ {\n        let int = UnicodeScalar(ch).value\n        num_arr.append(int)\n\
    \    }\n    \n    let num_str = String(num_arr)\n    var prime_count = 0\n   \
    \ \n    guard let start = num_str.index(of: \"0\") else {\n        return 0\n\
    \    }\n    \n    for index in num_str.range(of: \"1\", options: .backwards, range:\
    \ start..<num_str.endIndex) {\n        \n        // if index % 2 == 0, then it\
    \ is a prime, else it is not prime\n        if num_arr[index/2] % 2 == 0 {\n \
    \           prime_count++\n        }\n    }\n    \n    return prime_count", " \
    \   // your code\n    ", '    return hex_key(string(num))', "    var primes =\
    \ Set<String>()\n\n    // Remove all non-hexadecimal characters from the input\n\
    \    num = num.characters.filter { character -> Bool in\n        return character\
    \ >= '0' && character <= '9'\n    }.joined()\n\n    for char in num {\n      \
    \  // Convert the characters to their decimal values\n        let decimal = Int(String(char).unicodeScalars.first!.value)\n\
    \        switch decimal {\n        case 0b100000000000000000000:\n           \
    \ primes.append(\"B\")\n        case 0b111000000000000000:\n            primes.append(\"\
    C\")\n        case 0b111000000000000001:\n            primes.append(\"D\")\n \
    \       default:\n            // Add prime numbers\n            primes.insert(String(decimal))\n\
    \        }\n    }\n\n    // Remove duplicates from the set of primes\n    primes.formUnion(primes.filter\
    \ {$0 == \"B\"})\n    primes.formUnion(primes.filter {$0 == \"C\"})\n    primes.formUnion(primes.filter\
    \ {$0 == \"D\"})\n\n    // Count the number of primes found\n    return primes.count",
  "    let input: String = num.lowercased()\n\n    let primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \n    let prime = primes.firstIndex(of: input.chars().filter({ $0 >= '0' && $0\
    \ <= '9' }).first!)\n\n    return prime != nil ? prime! + 1 : 0", "    var count\
    \ = 1 // 1 means 1 digit prime, 2 means 2 digit prime\n    for i in num.characters\
    \ {\n        let hexVal = Character(i).hexValue // get hexadecimal val\n     \
    \   switch hexVal {\n        case 0x30:\n            count += 1 // 30 is prime\n\
    \        case 0x31:\n            count += 2 // 31 is prime\n        default:\n\
    \            // for 0x20 hex, count will also be 2 because 0x20 != 0x30\n    \
    \        count += hexVal == 0x20 ? 2 : hexVal == 0x30 ? 1 : 0\n        }\n   \
    \ }\n    return count", "    var numAsString = \"\"\n    let numAsInt = [UInt32](num.utf8)\n\
    \    \n    for i in 0..<num.count {\n        let num = numAsInt[i]\n        if\
    \ num%2 == 0 {\n            let num2 = numAsInt[((num-1)/2)%num]\n           \
    \ if num2 == 0 || num2 == num {\n                numAsString += \"A\"\n      \
    \      } else {\n                numAsString += \"B\"\n            }\n       \
    \ } else {\n            numAsString += \"C\"\n        }\n    }\n    \n    if numAsString.count\
    \ > 2 {\n        return numAsString.count\n    } else if numAsString.count ==\
    \ 2 {\n        return 2\n    }\n    \n    return 0", "    var num = num\n    var\
    \ nums = num.characters\n    var prime_count = 0\n    var hex_count = 0\n    while\
    \ nums.count > 0 {\n        var digit = nums[0]\n        var nums = nums[1..]\n\
    \        if digit == \"0\" && nums.count > 0 {\n            hex_count = hex_count\
    \ + 1\n        } else if digit == \"A\" && nums.count > 0 {\n            hex_count\
    \ = hex_count + 1\n        } else if digit == \"B\" && nums.count > 0 {\n    \
    \        hex_count = hex_count + 1\n        } else if digit == \"C\" && nums.count\
    \ > 0 {\n            hex_count = hex_count + 1\n        } else if digit == \"\
    D\" && nums.count > 0 {\n            hex_count = hex_count + 1\n        } else\
    \ if digit == \"E\" && nums.count > 0 {\n            hex_count = hex_count + 1\n\
    \        } else if digit == \"F\" && nums.count > 0 {\n            hex_count =\
    \ hex_count + 1\n        } else {\n            if digit == \"1\" {\n         \
    \       if nums.count == 1 {\n                    hex_count = hex_count + 1\n\
    \                } else {\n                    hex_count = hex_count + 1\n   \
    \                 prime_count = prime_count + 1\n                }\n         \
    \   } else if digit == \"2\" && nums.count > 0 {\n                hex_count =\
    \ hex_count + 1\n            } else if digit == \"3\" && nums.count > 0 {\n  \
    \              hex_count = hex_count + 1\n            } else if digit == \"5\"\
    \ && nums.count > 0 {\n                hex_count = hex_count + 1\n           \
    \ } else if digit == \"7\" && nums.count > 0 {\n                hex_count = hex_count\
    \ + 1\n            } else if digit == \"B\" && nums.count > 0 {\n            \
    \    hex_count = hex_count + 1\n                prime_count = prime_count + 1\n\
    \            } else if digit == \"D\" && nums.count > 0 {\n                hex_count\
    \ = hex_count + 1\n                prime_count = prime_count + 1\n           \
    \ } else if digit == \"E\" && nums.count > 0 {\n                hex_count = hex_count\
    \ + 1\n                prime_count = prime_count + 1\n            } else if digit\
    \ == \"F\" && nums.count > 0 {\n                hex_count = hex_count + 1\n  \
    \              prime_count = prime_count + 1\n            } else {\n         \
    \       if digit == \"0\" && nums.count == 1 {\n                    hex_count\
    \ = hex_count + 1\n                } else {\n                    hex_count = hex_count\
    \ + 1\n                    prime_count = prime_count + 1\n                }\n\
    \            }\n        }\n    }\n    return hex_count", "    if num.isEmpty {\n\
    \        return 0\n    }\n\n    var total = 0\n    for digit in num {\n      \
    \  total += ((digit.unicodeScalars.filter{ $0.isUppercase }).count + 1) * digit.unicodeScalars.filter{\
    \ $0.isLetter }.count\n    }\n\n    return total % 7", "    var count: Int = 0\n\
    \    num = num.lowercaseString\n\n    for b in num.unicodeScalars {\n        var\
    \ c: UInt32 = 0\n        c.hex = UInt32(b)\n        if Primes[c] != 0 {\n    \
    \        count = count + 1\n        }\n    }\n    return count", "    let numAsInt\
    \ = Int(num)\n    var sum : Int = 0\n    let array = [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,\n\
    \        73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,\n       \
    \ 157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,\n        239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,\n\
    \        331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,\n      \
    \  421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,\n        509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,\n\
    \        613,617,619,631,641,643,647,653,659,661,673,677,683,691,\n        701,709,719,727,733,739,743,751,757,761,769,773,787,797,\n\
    \        809,811,821,823,827,829,839,853,857,859,863,877,881,883,\n        887,907,911,919,929,937,941,947,953,967,971,977,983,991,\n\
    \        997]\n    var isPrime: Bool = false\n    for i in array {\n        if\
    \ numAsInt == i {\n            sum += i\n            isPrime = true\n        }\n\
    \    }\n    if isPrime == true {\n        return sum\n    } else {\n        return\
    \ 0\n    }", "    // Write your code here\n    \n    // Return here\n    return\
    \ 0", "    var i = 0\n    for _ in 0 ..< num.count {\n        let ch = (num[i..<i])\
    \ //ch = [ 'A', 'B', 'C', 'D', 'E', 'F' ]\n        let ch1 = Int(ch)\n       \
    \ if ch1 % 2 == 0 {\n            i = (i + 1)\n        } else {\n            return\
    \ i\n        }\n    }\n    return 0", "    if num == \"\" || num == \"0\" {\n\
    \        return 0\n    }\n    var d = 0\n    for i : String in num {\n       \
    \ d *= 16\n        d += Int(i)\n    }\n    return d", "    let inputChars = num.characters\n\
    \    let n = inputChars.count\n\n    if n > 0 { // there is at least 1 char\n\
    \        if n > 2 { // there are at least 2 chars\n            if n > 3 { // there\
    \ are at least 3 chars\n                if n > 5 { // there are at least 5 chars\n\
    \                    return 8\n                } else { // there are at least\
    \ 7 chars\n                    return 6\n                }\n            } else\
    \ { // there are at least 6 chars\n                return 4\n            }\n \
    \       } else { // there are at least 2 chars\n            return 2\n       \
    \ }\n    } else { // there is at least 1 char\n        return 0\n    }", "   \
    \ if num.isEmpty {\n        return -1\n    }\n    var result: Int = 0\n    for\
    \ _ in num.unicodeScalars {\n        result <<= 4\n        result += UInt32(UnicodeScalar(_).value)\n\
    \    }\n    return result", "  // Write your code here\n  func isPrime(index:\
    \ Int) -> Bool {\n    if (index == 0) || (index == 1) || (index == 2) || (index\
    \ == 3) || (index == 4)\n      || (index == 5) || (index == 6) || (index == 7)\
    \ || (index == 8) || (index == 9) {\n      return true\n    }\n    if (index ==\
    \ 5) {\n      return false\n    }\n    var j = 0\n    for j in stride(from: index,\
    \ through: 9, by: -1) {\n      if ((j & 1) == 1) {\n        continue\n      }\n\
    \      if ((num >> j & 1) == 1) {\n        return false\n      }\n    }\n    return\
    \ true\n  }\n  var result = 0\n  if ((num.characters.count == 0) || (num.characters.count\
    \ == 1)) {\n    return result\n  }\n  let firstChar = num.characters.first!\n\
    \  if firstChar == \"A\" {\n    result = 3\n  } else if firstChar == \"B\" {\n\
    \    result = 6\n  } else if firstChar == \"C\" {\n    result = 9\n  } else if\
    \ firstChar == \"D\" {\n    result = 12\n  } else if firstChar == \"E\" {\n  \
    \  result = 15\n  } else if firstChar == \"F\" {\n    result = 18\n  } else {\n\
    \    return 0\n  }\n  for char in num.characters.dropFirst() {\n    var index\
    \ = 0\n    if ((char.uppercased() != \"A\") && (char.uppercased() != \"B\")\n\
    \      && (char.uppercased() != \"C\") && (char.uppercased() != \"D\")\n     \
    \ && (char.uppercased() != \"E\") && (char.uppercased() != \"F\")) {\n      continue\n\
    \    }\n    if char.uppercased() == \"A\" {\n      index = 4\n    }\n    if char.uppercased()\
    \ == \"B\" {\n      index = 5\n    }\n    if char.uppercased() == \"C\" {\n  \
    \    index = 6\n    }\n    if char.uppercased() == \"D\" {\n      index = 7\n\
    \    }\n    if char.uppercased() == \"E\" {\n      index = 8\n    }\n    if char.uppercased()\
    \ == \"F\" {\n      index = 9\n    }\n    if (isPrime(index: index)) {\n     \
    \ result++\n    }\n  }\n  return result", "    let num_int = UInt64(num)!\n  \
    \  var num_div = num_int\n    for _ in 0..<MAX_DIGITS {\n        num_div = num_div\
    \ * 16\n    }\n    var num_mod: UInt64 = 0\n    \n    if num_div > num_int {\n\
    \        num_mod = num_div - num_int\n    } else {\n        num_mod = num_int\n\
    \    }\n    for _ in 0..<MAX_DIGITS {\n        if num_mod % 10 == 0 {\n      \
    \      break\n        }\n        num_mod = num_mod % 10\n    }\n    return num_mod\
    \ + 1", "    var numDigits: [UInt8] = [] // Stores hex digits as UInt8 array\n\
    \    let number: UInt32 = UInt32(num.utf8)!\n    let remainder: UInt32 = number\
    \ % 0x100000000\n\n    // If the input has only a single digit\n    if remainder\
    \ == 0 {\n        // Count how many hex digits of the number are primes\n    \
    \    numDigits.append(Int(number / 0x100000000))\n        return 0\n    }\n\n\
    \    // If the input has two or more digits\n    if remainder == 0x100000000 {\n\
    \        // Count how many hex digits of the number are primes\n        for _\
    \ in 0..<num.count {\n            numDigits.append(Int(number / 0x100000000))\n\
    \        }\n        return prime_num(num)\n    }\n\n    // If the input has odd\
    \ number of digits\n    if remainder != 0 {\n        return -1\n    }\n\n    //\
    \ If the input has exactly one digit\n    numDigits.append(number)\n\n    // Count\
    \ the number of hex digits of the number are primes\n    return prime_num(num)",
  "    let digits = num.characters\n    var count: Int = 0\n    var last: Int = 0\n\
    \n    // Find the last digit\n    last = digits.count\n\n    // Find the number\
    \ of digits that are not primes\n    for i in 0..<last {\n        count += pow(UInt(digits[i])\
    \ - UInt(i), 2) > 1 ? 0 : -1\n    }\n\n    // Subtract the count of the last digit\
    \ from the total digit\n    return count + UInt(last) - UInt(digits.count - 1)",
  "    let digits = num.unicodeScalars.filter { $0.isHexadecimal() }\n    let length\
    \ = (digits).reduce(0, { $0 + $1.length })\n    let maxDigits = length - 1\n \
    \   let allDigits = digits.map({ $0.decimalValue })\n    let primes = allDigits.filter\
    \ { $0 % 2 != 0 }\n    let primesCount = primes.count\n    let primesRange = stride(from:\
    \ 2, through: primesCount, by: 2).filter { $0 == $0 % 2 }\n    let rangeOfPrimes\
    \ = primesRange.map { $0 }\n    let sum = (rangeOfPrimes.filter { $0.digitValue\
    \ >= maxDigits }).reduce(0) { $0 + $1.digitValue }\n    let lastDigit = primesRange.map\
    \ { $0.digitValue }.reduce(0) { $0 + $1 }\n    return sum + lastDigit", "    var\
    \ hex = num.characters().map({$0 + \"A\"}).joined()\n    var res = 1\n    for\
    \ _ in stride(from: hex.count, to: 1, by: -1) {\n        var prime = hex.filter({$0\
    \ >= \"2\"})\n            .filter({$0 <= \"7\"})\n            .filter({$0 != \"\
    B\" && !$0.contains(\"A\") && !$0.contains(\"E\")})\n            .filter({$0 !=\
    \ \"D\" && !$0.contains(\"A\") && !$0.contains(\"E\")})\n            .filter({$0\
    \ != \"C\" && !$0.contains(\"A\") && !$0.contains(\"E\")})\n            .filter({$0\
    \ != \"F\" && !$0.contains(\"A\") && !$0.contains(\"E\")})\n            .filter({$0\
    \ != \"A\" && !$0.contains(\"B\") && !$0.contains(\"C\") && !$0.contains(\"D\"\
    ) && !$0.contains(\"E\") && !$0.contains(\"F\")})\n            .filter({$0 !=\
    \ \"B\" && !$0.contains(\"C\") && !$0.contains(\"D\") && !$0.contains(\"E\") &&\
    \ !$0.contains(\"F\")})\n            .filter({$0 != \"C\" && !$0.contains(\"D\"\
    ) && !$0.contains(\"E\") && !$0.contains(\"F\")})\n            .filter({$0 !=\
    \ \"D\" && !$0.contains(\"E\") && !$0.contains(\"F\")})\n            .filter({$0\
    \ != \"E\" && !$0.contains(\"F\")})\n            .count\n        if prime > 1\
    \ {\n            break\n        }\n        res *= 2\n        hex = hex.dropFirst()\n\
    \    }\n    return res", "    switch num.count {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return Int(num[0])\n    case 2:\n        return Int(num[0])\
    \ + Int(num[1])\n    case 3:\n        return Int(num[0]) * 2 + Int(num[1])\n \
    \   case 4:\n        return Int(num[0]) * 3 + Int(num[1]) + Int(num[2])\n    case\
    \ 5:\n        return Int(num[0]) * 4 + Int(num[1]) + Int(num[2]) + Int(num[3])\n\
    \    case 6:\n        return Int(num[0]) * 5 + Int(num[1]) * 2 + Int(num[2]) +\
    \ Int(num[3]) + Int(num[4])\n    case 7:\n        return Int(num[0]) * 6 + Int(num[1])\
    \ * 3 + Int(num[2]) * 2 + Int(num[3]) + Int(num[4]) + Int(num[5]) + Int(num[6])\n\
    \    case 8:\n        return Int(num[0]) * 7 + Int(num[1]) * 4 + Int(num[2]) *\
    \ 3 + Int(num[3]) * 2 + Int(num[4]) + Int(num[5]) * 2 + Int(num[6]) + Int(num[7])\n\
    \    case 9:\n        return Int(num[0]) * 8 + Int(num[1]) * 5 + Int(num[2]) *\
    \ 4 + Int(num[3]) * 3 + Int(num[4]) * 2 + Int(num[5]) * 3 + Int(num[6]) * 2 +\
    \ Int(num[7]) + Int(num[8])\n    case 10:\n        return Int(num[0]) * 9 + Int(num[1])\
    \ * 6 + Int(num[2]) * 5 + Int(num[3]) * 4 + Int(num[4]) * 3 + Int(num[5]) * 2\
    \ + Int(num[6]) * 3 + Int(num[7]) * 2 + Int(num[8]) + Int(num[9])\n    case 11:\n\
    \        return Int(num[0]) * 10 + Int(num[1]) * 7 + Int(num[2]) * 6 + Int(num[3])\
    \ * 5 + Int(num[4]) * 4 + Int(num[5]) * 3 + Int(num[6]) * 2 + Int(num[7]) * 3\
    \ + Int(num[8]) + Int(num[9]) + Int(num[10])\n    case 12:\n        return Int(num[0])\
    \ * 11 + Int(num[1]) * 8 + Int(num[2]) * 9 + Int(num[3]) * 8 + Int(num[4]) * 7\
    \ + Int(num[5]) * 6 + Int(num[6]) * 5 + Int(num[7]) * 4 + Int(num[8]) * 3 + Int(num[9])\
    \ * 2 + Int(num[10]) + Int(num[11])\n    case 13:\n        return Int(num[0])\
    \ * 12 + Int(num[1]) * 9 + Int(num[2]) * 8 + Int(num[3]) * 7 + Int(num[4]) * 6\
    \ + Int(num[5]) * 5 + Int(num[6]) * 4 + Int(num[7]) * 3 + Int(num[8]) * 2 + Int(num[9])\
    \ + Int(num[10]) + Int(num[11]) + Int(", "    var key = String()\n    var nums\
    \ = num.characters\n    let len = nums.count\n\n    for _ in 0 ..< len {\n   \
    \     let pos = nums.index(of: \"A\")\n        let index = nums.index(pos, offsetBy:\
    \ 1)\n        let hex = nums[index].uppercased()\n        let number = Int(hex,\
    \ radix: 16) ?? 0\n        key += String(number)\n    }\n    return Int(key[key.index(key[key.index(key.startIndex,\
    \ offsetBy: 0)], offsetBy: 1)], radix: 16)!", "    // Write your code here\n \
    \   // Convert str to int and to String\n    let num = num.map { Int($0, radix:\
    \ 16) }\n    // Filter out those that are not a hexadecimal number\n    let filtered\
    \ = num.filter({ $0 < 16 })\n    // Find prime numbers\n    let primes = filtered.filter({\
    \ is_prime($0) })\n    // Sum number of prime numbers\n    return primes.reduce(0)\
    \ { $0 + $1 }", "    if let n = Int(num, radix: 16) {\n        // TODO: add your\
    \ solution\n        \n        return n\n    }\n    \n    return 0", "    var n\
    \ = \"\"\n    for c in num {\n        n = n + c\n    }\n    \n    if n == \"A\"\
    \ || n == \"B\" || n == \"C\" || n == \"D\" || n == \"E\" || n == \"F\" {\n  \
    \      return 1\n    }\n    \n    var count = 0\n    for c in n {\n        var\
    \ m = Int(c) - 48\n        if m == 0 || m == 9 {\n            count = count +\
    \ 1\n        }\n    }\n    return count", "    // Write your code here\n    let\
    \ numArr = num.characters.map({ $0 })\n    var primeCount = 0\n    for i in 1...hexNum.characters.count\
    \ {\n        if hexNum[i] == \"A\" || hexNum[i] == \"B\" || hexNum[i] == \"C\"\
    \ || hexNum[i] == \"D\" || hexNum[i] == \"E\" || hexNum[i] == \"F\" {\n      \
    \      if hexNum[i-1] == \"A\" || hexNum[i-1] == \"B\" || hexNum[i-1] == \"C\"\
    \ || hexNum[i-1] == \"D\" || hexNum[i-1] == \"E\" || hexNum[i-1] == \"F\" {\n\
    \                primeCount += 1\n            }\n        }\n    }\n    return\
    \ primeCount", "    var digits = [String]()\n    var primes = [String]()\n   \
    \ for i in 2...hex_to_int(num) {\n        digits.append(String(UnicodeScalar(i)))\n\
    \    }\n    var total = 0\n    for d in digits {\n        var nprimes = primes.filter\
    \ { $0 == d }\n        if nprimes.count > 0 {\n            total += 1\n      \
    \  }\n    }\n    return total", "    if let numAsInt = Int(num) {\n        var\
    \ count = 0\n        var primes = [Int]()\n        var prime = 0\n        for\
    \ i in 1...Int(numAsInt) {\n            if primes.contains(prime) {\n        \
    \        primes.remove(at: primes.index(of: prime)!)\n                prime =\
    \ i + 1\n            } else {\n                primes.append(prime)\n        \
    \        if prime > 1 {\n                    prime = primes.first! + 1\n     \
    \           }\n            }\n            count = count + 1\n        }\n     \
    \   return count\n    } else {\n        return 0\n    }", "    let numArr = num.characters.split(separator:\
    \ \"\").map(String.init)\n    let firstChar = numArr.first!\n    \n    var count\
    \ = 3\n    \n    // first char is always a hexadecimal digit\n    if firstChar\
    \ == \"0\" {\n        // first two chars are always A and B\n        if let a\
    \ = numArr.first {\n            if a == \"A\" || a == \"B\" {\n              \
    \  // count the digits\n                count += 2\n                // check if\
    \ it is a prime number\n                let hexNum = num.characters.split(separator:\
    \ \"\").map(String.init)\n                for n in 2..<hexNum.count {\n      \
    \              // prime check\n                    if hexNum.contains(String(format:\
    \ \"%1d\", n)) {\n                        count += 2\n                       \
    \ break\n                    }\n                }\n            }\n        }\n\
    \    }\n    // first char is not a hexadecimal digit\n    else {\n        // first\
    \ two chars are always A and B\n        if let a = numArr.first {\n          \
    \  if a == \"A\" || a == \"B\" {\n                // count the digits\n      \
    \          count += 2\n                // check if it is a prime number\n    \
    \            let hexNum = num.characters.split(separator: \"\").map(String.init)\n\
    \                for n in 2..<hexNum.count {\n                    // prime check\n\
    \                    if hexNum.contains(String(format: \"%1d\", n)) {\n      \
    \                  count += 2\n                        break\n               \
    \     }\n                }\n            }\n        }\n    }\n    return count",
  "    if num == \"\" {\n        return 0\n    }\n\n    var count = 0\n    for x in\
    \ num.unicodeScalars {\n        if x != .asciiCapitals {\n            count++\n\
    \        }\n    }\n\n    if count == 0 {\n        return 0\n    }\n\n    var prime\
    \ = Primes[count]\n\n    for x in 0...count {\n        if prime % x != 0 {\n \
    \           prime = Primes[count + 1]\n        }\n    }\n\n    return prime",
  "    // Your code here\n    let a = num.characters.filter{ $0.isUppercase }\n  \
    \  let b = num.characters.filter{ $0 != \"A\" && $0 != \"B\" && $0 != \"C\" &&\
    \ $0 != \"D\" && $0 != \"E\" && $0 != \"F\" }\n    \n    if a.count > b.count\
    \ {\n        return hex_key(num: \"A\")\n    }\n    \n    return hex_key(num:\
    \ \"A\")", "    guard let number = num.parse() else { return -1 }\n    let digits\
    \ = number.digits\n    guard digits.count > 0 else {\n        return -1\n    }\n\
    \    var prime_count = 0\n    for i in 0..<digits.count {\n        if digits[i]\
    \ == 2 {\n            prime_count++\n        }\n    }\n    if prime_count == 0\
    \ {\n        return 0\n    }\n    return prime_count", "    var a = num.characters\n\
    \    var numHex = 0\n    \n    for i in 0..<a.count {\n        if i == 0 {\n \
    \           if a[i].isUpperCase {\n                numHex += Int(String(Character(a[i])).unicodeScalars.first!.value)\
    \ * pow(2, num.characters.count - 1)\n            }\n        }\n        else {\n\
    \            if a[i].isUpperCase {\n                numHex += Int(String(Character(a[i])).unicodeScalars.first!.value)\
    \ * pow(2, num.characters.count - 1)\n            }\n            else {\n    \
    \            if Int(String(Character(a[i])).unicodeScalars.first!.value) * pow(2,\
    \ num.characters.count - 1) != pow(2, num.characters.count - 1) {\n          \
    \          numHex += Int(String(Character(a[i])).unicodeScalars.first!.value)\n\
    \                }\n            }\n        }\n    }\n    \n    return numHex",
  '    return hex_key(num, charToInt("0123456789ABCDEF"))', "  // base case\n  if\
    \ num == \"\" {\n    return 0\n  }\n  \n  // convert the string to a [char] array\n\
    \  let chars = num.characters.map { String($0) }\n  \n  // initialize counter\n\
    \  var count = 0\n  \n  // loop through the [char] array\n  for char in chars\
    \ {\n    // if the current char is one of the chars \"0\" to \"9\"\n    if char\
    \ >= \"0\" && char <= \"9\" {\n      // increment counter\n      count += 1\n\
    \      \n      // if the char is a \"1\"\n      if char == \"1\" {\n        //\
    \ increment counter\n        count += 1\n        \n        // if the char is a\
    \ \"2\"\n        if char == \"2\" {\n          // increment counter\n        \
    \  count += 1\n          \n          // if the char is a \"3\"\n          if char\
    \ == \"3\" {\n            // increment counter\n            count += 1\n     \
    \       \n            // if the char is a \"5\"\n            if char == \"5\"\
    \ {\n              // increment counter\n              count += 1\n          \
    \    \n              // if the char is a \"7\"\n              if char == \"7\"\
    \ {\n                // increment counter\n                count += 1\n      \
    \          \n                // if the char is a \"B\"\n                if char\
    \ == \"B\" {\n                  // increment counter\n                  count\
    \ += 1\n                  \n                  // if the char is a \"D\"\n    \
    \              if char == \"D\" {\n                    // increment counter\n\
    \                    count += 1\n                  }\n                }\n    \
    \          }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n\
    \  // return the counter\n  return count", "    let len = num.characters.count\n\
    \    var digits = num.characters\n    var count = 0\n    \n    // iterate over\
    \ the hexadecimal digits and check the primes\n    for i in 0..<len {\n      \
    \  var n = UInt64(digits[i])\n        var numPrimes = 0\n        \n        //\
    \ iterate over the prime numbers and count the ones \n        // with that digit\n\
    \        for j in 2..<64 {\n            if n % UInt64(pow10(j) == 0 {\n      \
    \          numPrimes++\n            }\n        }\n        // check if it's a prime\
    \ (greater or equal than 2)\n        if numPrimes > 1 {\n            count +=\
    \ numPrimes\n        }\n    }\n    return count", "    let digits = CharacterSet(charactersIn:\
    \ \"0123456789ABCDEF\")\n    var hi = CharacterSet(charactersIn: \"0\").subtracting(digits)\n\
    \    var lo = CharacterSet(charactersIn: \"0\").subtracting(digits)\n\n    let\
    \ hex = CharacterSet(charactersIn: \"0123456789ABCDEF\")\n\n    guard let strnum\
    \ = num.trimmingCharacters(in: hex) else {\n        return 0\n    }\n\n    if\
    \ strnum.characters.count == 0 {\n        return 0\n    }\n\n    var result =\
    \ 1\n\n    for i in strnum.characters {\n        guard let i = Int(i, radix: 16),\
    \ lo.contains(i) == false else {\n            lo.remove(i)\n            hi.remove(i)\n\
    \            result *= i\n        }\n    }\n\n    return result", "    var hexDigits\
    \ = [Character : String]()\n    var decimalDigits = [Character : String]()\n \
    \   for _ in num.unicodeScalars {\n        let c = unicodeScalarToString(in: _\
    \ as! UnicodeScalar)\n        hexDigits[Character.isHex(c) ? \"A\" : \"0\"] +=\
    \ c\n        decimalDigits[Character.isDigit(c) ? \"2\" : \"0\"] += c\n    }\n\
    \    return hexDigits.count + decimalDigits.count + hexDigits.count", "    let\
    \ len = num.characters.count\n    var sum = 0\n    for i in 0..<len {\n      \
    \  let c = num.characters[i]\n        let v = Int(c, radix: 16)\n        if v\
    \ == 0 {\n            sum += 1\n        }\n        else {\n            sum +=\
    \ 3\n        }\n    }\n    return sum", "\tnum = num.uppercaseString.characters\n\
    \t\n\tfor i in 0..<num.count {\n\t\tif num[i] != \"A\" && num[i] != \"B\" && num[i]\
    \ != \"C\" && num[i] != \"D\" && num[i] != \"E\" && num[i] != \"F\" {\n\t\t\t\
    return 0\n\t\t}\n\t}\n\t\n\tlet hexDigits = [UInt8](num.utf8)\n\t\n\tlet primes:\
    \ [UInt8] = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \t\n\tlet prime: UInt8 = 0\n\tlet numPrimes: [UInt8] = num.unicodeScalars.filter\
    \ { $0.isPrime }\n\t\n\tlet numPrimeDigits: [UInt8] = numPrimes.map { $0.value\
    \ }\n\t\n\tlet maxNumPrimeDigit = maxElement(numPrimeDigits)\n\t\n\t\n\tlet base:\
    \ [UInt8] = [2,3,5,7,11,13]\n\t\n\t\n\tfor i in 0..<hexDigits.count {\n\t\tif\
    \ hexDigits[i] == maxNumPrimeDigit {\n\t\t\tprime += 1\n\t\t\t\n\t\t\tif maxNumPrimeDigit\
    \ == numPrimeDigits.first {\n\t\t\t\treturn prime\n\t\t\t}\n\t\t\t\n\t\t\tlet\
    \ numPrimes: [UInt8] = num.unicodeScalars.filter { $0.isPrime }\n\t\t\tlet numPrimeDigits:\
    \ [UInt8] = numPrimes.map { $0.value }\n\t\t\t\n\t\t\tlet maxNumPrimeDigit = maxElement(numPrimeDigits)\n\
    \t\t\t\n\t\t}\n\t\t\n\t\tlet digitBase: [UInt8] = [2,3,5,7,11,13]\n\t\tlet digit:\
    \ UInt8 = 0\n\t\t\n\t\tif hexDigits[i] == digitBase[digit] {\n\t\t\tdigit += 1\n\
    \t\t}\n\t\t\n\t}\n\t\n\treturn 0", "   if num.isEmpty {\n       return 0\n   }\n\
    \   let digits = [2, 4, 6, 8, 10, 12, 14, 16, 18]\n   let letters = [\"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"]\n   let n = Int(num)\n   if n < 10 && n > 0 {\
    \ //check if number is in hex\n       let i = digits[n - 10]\n       let k = digits[n\
    \ - 1]\n       return i + k\n   }\n   if n < 10 || n > 18 {\n       return 0\n\
    \   }\n   if n < 18 {\n       return 2\n   }\n   for d in digits {\n       if\
    \ n % d == 0 {\n           return d\n       }\n   }\n   for l in letters {\n \
    \      if n % l.isUppercase == 0 {\n           return l\n       }\n   }\n   \n\
    \   return 0", "    // TODO: Complete this function\n    return 0", "    guard\
    \ num.isEmpty == false else { return -1 }\n    var count = 0\n    var nums: [Int]\
    \ = []\n    var digits = 0\n    for c in num {\n        if c.isHexadecimal { digits\
    \ = digits + c.value }\n        else { return -1 }\n    }\n    if digits == 1\
    \ { nums.append(0) }\n    else { nums.append(digits/2) }\n    for i in 1...digits-1\
    \ {\n        if nums.contains(i) { return -1 }\n        else { nums.append(i)\
    \ }\n    }\n    return nums.count - 2", "    \n    let digits = String(num).uppercased()\n\
    \    let length = digits.count\n    var hex: String = \"\"\n    var hex_reminder:\
    \ String = \"\"\n    var counter: Int = 0\n    var prime: Bool = false\n    var\
    \ hex_reminder_2: String = \"\"\n    var hex_reminder_3: String = \"\"\n    var\
    \ hex_reminder_4: String = \"\"\n    \n    let a: [UInt32] = [0x0, 0x1, 0x2, 0x3,\
    \ 0x5, 0x7, 0x11, 0x13, 0x17, 0x19,\n                      0x2B, 0x3C, 0x5B, 0x7B,\
    \ 0x91, 0xA3, 0xB5, 0xD7, 0xE9,\n                      0xAB, 0xCD, 0xE1, 0xFF]\n\
    \    let b: [UInt32] = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,\n   \
    \                   0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, \n           \
    \           0x4000, 8000, 10000]\n    \n    \n    let digits_upper = digits.uppercased()\n\
    \    var hex_reminder2: [UInt32] = [0, 0, 0, 0]\n    \n    let digits_reminder\
    \ = hex_reminder.uppercased()\n    \n    for _ in 0..<length {\n        if digits_upper[length\
    \ - 1 - _] == \"0\" {\n            counter--\n        }\n        if counter ==\
    \ 0 {\n            hex_reminder2 = hex_reminder.uppercased()\n            for\
    \ _ in 0..<3 {\n                hex_reminder2[_] = hex_reminder2[_] * 16 + hex_reminder2[_\
    \ + 1]\n                hex_reminder2[_ + 1] = hex_reminder2[_ + 1] - 4\n    \
    \        }\n            \n            if hex_reminder2 == [0x0, 0x1, 0x2, 0x5,\
    \ 0x7, 0x9, 0xb]\n                || (hex_reminder2 == [0x0, 0x1, 0x2, 0x5, 0x7,\
    \ 0x9, 0xf] &&\n                hex_reminder == \"0\") {\n                hex_reminder3\
    \ = hex_reminder3.uppercased()\n                hex_reminder_4 = \"0\"\n     \
    \       }\n            else {\n                hex_reminder_4 = hex_reminder3.uppercased()\n\
    \            }\n            \n            if hex_reminder3 == hex_reminder_4 {\n\
    \                counter = -1\n                prime = true\n            }\n \
    \           else {\n                counter = 0\n                prime = false\n\
    \            }\n            \n            if prime == true {\n               \
    \ counter++\n                \n                if digits[length - 1 - _] == \"\
    A\" {\n                    hex_reminder = \"0\"\n                }\n         \
    \       else {\n                    hex_reminder = \"A\"\n                }\n\
    \            }\n            \n            if counter < 0 {\n                hex_reminder\
    \ = hex_reminder ", "\tvar key :Int = 0\n\tlet numLen = num.characters.count\n\
    \t\n\tfor i : Int = 0; i < numLen; i++ {\n\t\tif Int(String(num.characters[i]))\
    \ >= 97 && Int(String(num.characters[i])) <= 109 {\n\t\t\tkey += 10\n\t\t\tkey\
    \ += (Int(String(num.characters[i])) - 97)\n\t\t} else {\n\t\t\tkey += Int(String(num.characters[i]))\n\
    \t\t}\n\t}\n\treturn key", "\tlet number = Int(num)\n\t\n\tswitch number % 3 {\n\
    \tcase 0:\n\t\treturn 1\n\tcase 1:\n\t\treturn number\n\tcase 2:\n\t\treturn number\
    \ * 2\n\t}\n\t\n\treturn number * 3", "    let input = num.unicodeScalars\n  \
    \      .filter{ $0 >= 0x30 } \n        .filter{ $0 <= 0x39 }\n        .filter{\
    \ $0 >= 0x41 } \n        .filter{ $0 <= 0x5a }\n        .filter{ $0 >= 0x61 }\
    \ \n        .filter{ $0 <= 0x7a }\n        .filter{ $0 >= 0x30 } \n        .filter{\
    \ $0 <= 0x39 }\n        .filter{ $0 >= 0x41 } \n        .filter{ $0 <= 0x5a }\n\
    \        .filter{ $0 >= 0x61 } \n        .filter{ $0 <= 0x7a }\n        .filter{\
    \ $0 >= 0x30 } \n        .filter{ $0 <= 0x39 }\n        .filter{ $0 >= 0x41 }\
    \ \n        .filter{ $0 <= 0x5a }\n        .filter{ $0 >= 0x61 } \n        .filter{\
    \ $0 <= 0x7a }\n        .filter{ $0 >= 0x30 } \n        .filter{ $0 <= 0x39 }\n\
    \        .filter{ $0 >= 0x41 } \n        .filter{ $0 <= 0x5a }\n        .filter{\
    \ $0 >= 0x61 } \n        .filter{ $0 <= 0x7a }\n        .filter{ $0 >= 0x30 }\
    \ \n        .filter{ $0 <= 0x39 }\n        .filter{ $0 >= 0x41 } \n        .filter{\
    \ $0 <= 0x5a }\n        .filter{ $0 >= 0x61 } \n        .filter{ $0 <= 0x7a }\n\
    \        .filter{ $0 >= 0x30 } \n        .filter{ $0 <= 0x39 }\n        .filter{\
    \ $0 >= 0x41 } \n        .filter{ $0 <= 0x5a }\n        .filter{ $0 >= 0x61 }\
    \ \n        .filter{ $0 <= 0x7a }\n        .filter{ $0 >= 0x30 } \n        .filter{\
    \ $0 <= 0x39 }\n        .filter{ $0 >= 0x41 } \n        .filter{ $0 <= 0x5a }\n\
    \        .filter{ $0 >= 0x61 } \n        .filter{ $0 <= 0x7a }\n        .filter{\
    \ $0 >= 0x30 } \n        .filter{ $0 <= 0x39 }\n        .filter{ $0 >= 0x41 }\
    \ \n        .filter{ $0 <= 0x5a }\n        .filter{ $0 >= 0x61 } \n        .filter{\
    \ $0 <= 0x7a }\n        .filter{ $0 >= 0x30 } \n        .filter{ $0 <= 0x39 }\n\
    \        .filter{ $0 ", "    let nums = num.characters.filter {\n        $0.isHexDigit\n\
    \    }\n    let num = nums.count\n    guard num > 1 else { return 1 }\n    let\
    \ divisors = UInt32(sqrt(Double(num)))\n    return nums.filter { divisor in 1..divisors.isMultiple\
    \ }.count", "    let numAsStr = num.lowercased()\n    if numAsStr.count == 0 {\n\
    \        return 0\n    }\n    let numAsChars = numAsStr.characters\n    let digits\
    \ = numAsChars.map({ Int(String($0)) })\n    var numPrimes = 0\n    for i in 0..<digits.count\
    \ {\n        for j in 0..<digits.count {\n            if i != j && digits[i]*digits[j]\
    \ == numAsStr.count {\n                numPrimes += 1\n                break\n\
    \            }\n        }\n    }\n    return numPrimes", "    guard num.isEmpty\
    \ == false else {\n        return 0\n    }\n    \n    var count = 0\n    var hexNum\
    \ = num.toUpperInvariant()\n    \n    for char in hexNum {\n        switch char\
    \ {\n        case \"A\":\n            count += 1\n        case \"B\":\n      \
    \      count += 1\n        case \"C\":\n            count += 1\n        case \"\
    D\":\n            count += 1\n        case \"E\":\n            count += 1\n  \
    \      case \"F\":\n            count += 1\n        default:\n            guard\
    \ char.isNumber == true else {\n                return 0\n            }\n    \
    \    }\n    }\n    \n    return count", "    if num.isEmpty {\n        return\
    \ 0\n    }\n    var primes = Set<Int>()\n    var hexDigits: [UInt16] = []\n  \
    \  for c in num.unicodeScalars {\n        if c >= '0' && c <= '9' {\n        \
    \    hexDigits.append(UInt16(c - UInt32('0')))\n        } else {\n           \
    \ hexDigits.append(UInt16(c))\n        }\n    }\n    for hexDigit: UInt16 in hexDigits\
    \ {\n        if hexDigit == 0xD {\n            primes.insert(hexDigit - 0xA)\n\
    \        } else if hexDigit == 0xE {\n            primes.insert(hexDigit - 0xA)\n\
    \            primes.insert(hexDigit - 0xF)\n        }\n    }\n    return primes.count",
  "    // O(n) where n is the length of the string and O(n) where n is the number\
    \ of characters in the string.\n    if num == \"\" {\n        return -1\n    }\n\
    \    var digit = num.characters.first!\n    var prime = true\n    var result =\
    \ 1\n    var primes = Array(0..<30).map(){_ in false}\n    var chars = num.characters\n\
    \    for i in 1...chars.count {\n        let digit = chars[i]\n        primes[digit]\
    \ = !primes[digit]\n        if primes[digit] {\n            for j in 2..<30 {\n\
    \                if !primes[j] && j != digit {\n                    primes[j]\
    \ = true\n                    result = result * 10 + Int(j)\n                }\n\
    \            }\n        }\n    }\n    return result", "    var key: Int = 0\n\
    \    var i: Int = 0\n    var hex: String = num\n\n    // Check empty string and\
    \ return 0.\n    if hex.isEmpty {\n        return key\n    }\n\n    // If hex\
    \ number length is odd, return 0.\n    if hex.count % 2 != 0 {\n        return\
    \ 0\n    }\n\n    // Check if the first character is A or B.\n    if hex[0] ==\
    \ \"A\" || hex[0] == \"B\" {\n        key = 1\n    } else {\n        key = 2\n\
    \    }\n\n    // Loop through the digits of hex number, and if the digit is 0\
    \ or 8, \n    // it is a prime number.\n    for i = 0; i < hex.count - 1 {\n \
    \       let hexDigit = hex[i]\n\n        // If the digit is 0 or 8, it is a prime\
    \ number.\n        if hexDigit == \"0\" || hexDigit == \"8\" {\n            key++\n\
    \        }\n    }\n\n    return key", "\tvar len: Int\n\tvar digits: Int = 0\n\
    \tvar isPrime: Bool = false\n\n\tvar digitStr = num.characters\n\tlen = digitStr.count\n\
    \tfor i in 0 ..< len - 1 {\n\t\tlet digit = Int(digitStr[i])\n\t\tif digit < 97\
    \ || digit > 122 {\n\t\t\treturn 0\n\t\t}\n\t\tif digit % 2 == 0 {\n\t\t\tcontinue\n\
    \t\t}\n\t\tisPrime = true\n\t\tdigits = digits + 1\n\t\tfor j in 0 ..< digit /\
    \ 2 {\n\t\t\tif digit % j == 0 {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\
    \t}\n\t\t}\n\t\tif isPrime {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn digits", "   \
    \ return num.characters.count { (char) -> Bool in\n        return Int(char).isHexDigit\n\
    \    }", "    if num.count < 2 || num.count > len(\"ABCDEF\") {\n        return\
    \ -1\n    }\n    // [2, 3, 5, 7, 11, 13] primes\n    var p: [Int] = []\n    //\
    \ [10, 13, 17, 19, 23, 29, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97] numbers\n    var n: [Int] = []\n    // [2, 3, 5, 7, 11, 13] primes\n   \
    \ var pPrimes: [Int] = []\n    // [2, 3, 5, 7, 11, 13] numbers\n    var nPrimes:\
    \ [Int] = []\n    var n = num.unicodeScalars\n    for _ in 0..<len(\"ABCDEF\"\
    ) {\n        let v = n[Int(arc4random_uniform(n.count))].value\n        nPrimes.append(v)\n\
    \    }\n    var p = 2\n    var q = p\n    for _ in 0..<len(\"ABCDEF\") {\n   \
    \     let v = nPrimes[Int(arc4random_uniform(nPrimes.count))].value\n        if\
    \ p == v {\n            pPrimes.append(v)\n            p = p + 1\n           \
    \ q = p\n        }\n        if p*p > v {\n            break\n        }\n    }\n\
    \    let v = nPrimes[Int(arc4random_uniform(nPrimes.count))].value\n    // print\
    \ (q, p)\n    // print (q+p, v)\n    // print (num.unicodeScalars)\n    var count\
    \ = 0\n    for _ in 0..<len(\"ABCDEF\") {\n        let v = nPrimes[Int(arc4random_uniform(nPrimes.count))].value\n\
    \        if q+p == v {\n            count = count + 1\n        }\n    }\n    if\
    \ count == 1 {\n        return hex_key(num: \"ABCDEF\")\n    }\n    return hex_key(num:\
    \ String(num, radix: 16))", "\tvar count = 0\n\tfor s in num {\n\t\tif chars.contains(s)\
    \ {\n\t\t\tcount += countHex(Char(Int(s)) ?? 0)\n\t\t} else {\n\t\t\tcount +=\
    \ countHex(s)\n\t\t}\n\t}\n\treturn count", "    // Your code here\n    let arr\
    \ = num.characters\n    var total = 0\n    \n    let char_count = arr.count\n\
    \    for i in 0..<char_count-1 {\n        if arr[i] == \"A\" {\n            total\
    \ += 3\n        }\n        else if arr[i] == \"B\" {\n            total += 5\n\
    \        }\n        else if arr[i] == \"C\" {\n            total += 7\n      \
    \  }\n        else if arr[i] == \"D\" {\n            total += 11\n        }\n\
    \        else if arr[i] == \"E\" {\n            total += 13\n        }\n     \
    \   else if arr[i] == \"F\" {\n            total += 17\n        }\n        else\
    \ if arr[i] == \"0\" {\n            total += 23\n        }\n        else{\n  \
    \          total += arr[i] - 65 + 2\n        }\n    }\n    return total", '    return
    hex_key2(num)', '    // Your code goes here', '    // TODO: Write your solution
    here', "    var res: Int = 0\n\n    if num.count <= 0 {\n        return 0\n  \
    \  }\n\n    for char in num.characters {\n        if let digit = Int(String(char))\
    \ {\n            res = res + digit\n        } else {\n            return 0\n \
    \       }\n    }\n\n    if res == 2 {\n        res += 1\n    }\n\n    if res ==\
    \ 3 {\n        res = 2\n    }\n\n    return res", "    var num_digits = num.count\n\
    \    var result = 0\n\n    for digit in num.characters {\n        guard let as_int\
    \ = Int(digit, radix: 16) else {\n            return result\n        }\n\n   \
    \     result += (as_int * 0x30)\n\n        for _ in 1...num_digits / 2 {\n   \
    \         result += 1\n        }\n\n        num_digits /= 2\n    }\n\n    return\
    \ result", "    let num_digits = num.count\n    guard num_digits > 0 else { return\
    \ 0 }\n    \n    let chars = Array(num)\n    guard chars.count == num_digits else\
    \ { return 0 }\n    \n    let result = 0\n    \n    for char in chars {\n    \
    \    let number = char.unicodeScalars.filter({$0.isLetter})!.count\n        let\
    \ is_prime = number > 1\n        \n        if let _ = Int(String(char), radix:\
    \ 16) {\n            return 0 if is_prime || result > number / 2\n        }\n\
    \        \n        guard is_prime else {\n            return 0 if result > number\
    \ / 2\n        }\n        \n        result += number\n    }\n    \n    return\
    \ result", '    return countPrimes(hex_key(num, strlen(num)))', "  var res: Int\
    \ = 0\n  var index = 0\n  var hex_repeats: String = \"\"\n\n  if num.isEmpty()\
    \ {\n    return 0\n  }\n\n  for char in num {\n    // check if char is a hex digit\n\
    \    if let value = Int.fromHexadecimalString(char) {\n      hex_repeats = hex_repeats\
    \ + String(String(value.littleEndian))\n      res = res + value\n    }\n  }\n\n\
    \  // check if number is prime\n  if hex_repeats.characters.count < 16 {\n   \
    \ return 0\n  }\n\n  if hex_repeats.characters.count % 2 == 1 {\n    return 0\n\
    \  }\n\n  // check if it contains D or B\n  hex_repeats.removeSubrange(hex_repeats.startIndex,\
    \ hex_repeats.endIndex)\n  if hex_repeats.contains(\"B\") {\n    return 4\n  }\n\
    \  if hex_repeats.contains(\"D\") {\n    return 6\n  }\n\n  var num1: Int = 0\n\
    \  var num2: Int = 0\n  for char in hex_repeats {\n    if char == \"A\" {\n  \
    \    num1 = 10\n      break\n    } else if char == \"B\" {\n      num1 = 11\n\
    \      break\n    } else if char == \"C\" {\n      num1 = 12\n      break\n  \
    \  } else if char == \"D\" {\n      num1 = 13\n      break\n    } else if char\
    \ == \"E\" {\n      num1 = 17\n      break\n    } else if char == \"F\" {\n  \
    \    num1 = 19\n      break\n    }\n  }\n\n  for char in hex_repeats {\n    if\
    \ char == \"A\" {\n      num2 = 10\n      break\n    } else if char == \"B\" {\n\
    \      num2 = 11\n      break\n    } else if char == \"C\" {\n      num2 = 12\n\
    \      break\n    } else if char == \"D\" {\n      num2 = 13\n      break\n  \
    \  } else if char == \"E\" {\n      num2 = 17\n      break\n    } else if char\
    \ == \"F\" {\n      num2 = 19\n      break\n    }\n  }\n\n  var factor: Int =\
    \ 1\n  var factor_index = 1\n\n  // check if num2 is odd\n  if num2 % 2 == 1 {\n\
    \    factor = num2\n  } else {\n    factor = 2\n  }\n\n  while (factor <= num1)\
    \ {\n    if (hex_repeats.characters.count % factor == 0) {\n      break\n    }\n\
    \    factor = factor * 2\n    factor_index += 1\n  }\n\n  // check digits\n  for\
    \ i in 0..<factor_index {\n    if hex_repeats.characters.characters.count-i ==\
    \ 2 {\n      break\n", "    var count: Int = 0\n    for c in num.characters {\n\
    \        var d: Int = Int(c)\n        count = count + ((d % 2) == 0 ? 1 : 0)\n\
    \    }\n    return count", "    let numChars = num.unicodeScalars\n        .filter({$0\
    \ > 0x7f})\n        .map({$0 & 0x1f})\n        .array\n    let firstPrimeIndex\
    \ = 1 // we start counting at one\n    let lastPrimeIndex = numChars.count-1\n\
    \    let primeCount = 1\n    \n    for index in stride(from: firstPrimeIndex,\
    \ through: lastPrimeIndex, by: 2) {\n        let prime = numChars[index]\n   \
    \     if prime > 0x20 {\n            primeCount += 1\n        }\n    }\n    \n\
    \    if primeCount % 2 == 1 {\n        return lastPrimeIndex + 1 - firstPrimeIndex\n\
    \    }\n    return primeCount / 2", "    let chars = [num.characters].flatMap\
    \ { $0 }\n    let charArray = chars.reduce([], +)\n    let charArray2 = charArray.map{\
    \ Int($0, radix: 16) }\n    let max = charArray2.max()!\n    let range = max /\
    \ 26\n\n    return range + 1", "\tlet hex_digits = \"0123456789ABCDEF\"\n\tlet\
    \ int_digits = \"0123456789\"\n\n\t// Convert the hex string to decimal string\
    \ and convert it to decimal\n\tlet hex_string = String(num, radix: 16)\n\tlet\
    \ hex_decimal = hex_string.characters.map({ Int(String($0), radix: 16) })\n\t\
    let dec = hex_decimal.map { ($0 as Int) / 10.0 }\n\n\t// Count number of times\
    \ each digit appears\n\tvar count_map = Dictionary<Double, Int>()\n\tfor digit\
    \ in dec {\n\t\tcount_map[digit] = count_map[digit] ?? 0\n\t\tcount_map[digit]\
    \ += 1.0\n\t}\n\n\t// Check for primality (divisible by 2)\n\tvar prime_map =\
    \ Dictionary<Double, Int>()\n\tfor digit in dec {\n\t\tif count_map[digit] ==\
    \ 2 {\n\t\t\tprime_map[digit] = prime_map[digit] ?? 0\n\t\t\tprime_map[digit]\
    \ += 1.0\n\t\t}\n\t}\n\n\t// Return count of primes with key digit and count of\
    \ primes with non-key digit\n\treturn count_map[digit_key(digit: hex_string)]\
    \ + count_map[digit_key(digit: String(hex_decimal.last ?? 0))]", "\tlet num_as_int\
    \ : Int? = Int(num)\n\tlet num_as_str : String = num as String\n\t\n\tlet num_as_str_chars\
    \ = [num_as_str]\n\t\n\tlet num_as_str_chars_uppercase = [num_as_str_chars.map\
    \ {\n\t\t$0.uppercased()\n\t}]\n\t\n\t// Sieve of Eratosthenes for Prime numbers\n\
    \tvar prime_numbers_as_str : [Int] = []\n\tfor element in num_as_str_chars_uppercase\
    \ {\n\t\tif element == 2 || element == 3 || element == 5 || element == 7 || element\
    \ == 11 || element == 13 || element == 17 || element == 19 || element == 23 ||\
    \ element == 29 || element == 31 {\n\t\t\tprime_numbers_as_str.append(element)\n\
    \t\t}\n\t}\n\t\n\tlet prime_numbers_as_str_uppercase = [prime_numbers_as_str]\n\
    \t\n\tvar prime_numbers_as_str_chars_uppercase = [prime_numbers_as_str_chars.map\
    \ {\n\t\t$0.uppercased()\n\t}]\n\t\n\tvar prime_numbers_as_str_chars_uppercase_with_digit_2\
    \ = []\n\tfor element in prime_numbers_as_str_chars_uppercase {\n\t\tif element\
    \ == 2 {\n\t\t\tprime_numbers_as_str_chars_uppercase_with_digit_2.append(element)\n\
    \t\t}\n\t}\n\t\n\tvar prime_numbers_as_str_chars_uppercase_with_digit_2 = [prime_numbers_as_str_chars_uppercase_with_digit_2]\n\
    \t\n\tvar prime_numbers_as_str_chars_uppercase_with_digit_3 = []\n\tfor element\
    \ in prime_numbers_as_str_chars_uppercase_with_digit_2 {\n\t\tif element == 3\
    \ {\n\t\t\tprime_numbers_as_str_chars_uppercase_with_digit_3.append(element)\n\
    \t\t}\n\t}\n\t\n\tvar prime_numbers_as_str_chars_uppercase_with_digit_3 = [prime_numbers_as_str_chars_uppercase_with_digit_3]\n\
    \t\n\tvar prime_numbers_as_str_chars_uppercase_with_digit_5 = []\n\tfor element\
    \ in prime_numbers_as_str_chars_uppercase_with_digit_3 {\n\t\tif element == 5\
    \ {\n\t\t\tprime_numbers_as_str_chars_uppercase_with_digit_5.append(element)\n\
    \t\t}\n\t}\n\t\n\tvar prime_numbers_as_str_chars_uppercase_with_digit_5 = [prime_numbers_as_str_chars_uppercase_with_digit_5]\n\
    \t\n\tvar prime_numbers_as_str_chars_uppercase_with_digit_7 = []\n\tfor element\
    \ in prime_numbers_as_str_chars_uppercase_with_digit_5 {\n\t\tif element == 7\
    \ {\n\t\t\tprime_", "    // TODO: write your code in Swift 3.2 syntax\n    //\
    \ Do not change code below this line\n    let alphabet: [String]    = [\"A\",\
    \ \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let alphabetIndex: [Int]    = [10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2]\n    var numDigits = 0\n    for c in num {\n        numDigits\
    \ += Int(c) - 0x30\n    }\n    for d in 0..<numDigits {\n        let pos = numDigits\
    \ - d\n        if isPrime(pos: pos, digit: alphabetIndex[pos]) {\n           \
    \ return Int(pos) + 1\n        }\n    }\n    return 0", "    let hexArray = num.characters.map\
    \ { Int(String($0)) }\n    guard hexArray.count > 1 else {\n        return 0\n\
    \    }\n    guard hexArray.count <= 4 else {\n        return 0\n    }\n    return\
    \ hexArray.filter { $0 % 2 == 0 }.count + hexArray.filter { $0 % 3 == 0 }.count",
  "    guard let num = num, num.characters.count > 0 else {\n        return -1\n \
    \   }\n    var n = 0\n    var numLen = num.characters.count\n    while numLen\
    \ > 0 {\n        let digit = String(num, radix: 16)\n        \n        if digit\
    \ == \"A\" {\n            n = n + 1\n        } else if digit == \"B\" {\n    \
    \        n = n + 3\n        } else if digit == \"C\" {\n            n = n + 5\n\
    \        } else if digit == \"D\" {\n            n = n + 7\n        } else if\
    \ digit == \"E\" {\n            n = n + 11\n        } else if digit == \"F\" {\n\
    \            n = n + 13\n        } else {\n            n = n + 17\n        }\n\
    \        numLen = numLen - 1\n    }\n    return n", "    let number: String =\
    \ num.uppercased()\n    let base: UInt64 = 10\n    var hexadecimal: UInt64 = 0\n\
    \    for character in number {\n        hexadecimal += UInt64(Int64(character)\
    \ ?? 0) * base\n        base = base * 16\n    }\n    let digits: [UInt8] = [ 2,\
    \ 3, 4, 5, 7, B, D, E ]\n    var num = 0\n    var found = false\n    for digit\
    \ in digits {\n        if hexadecimal % 10 == digit {\n            found = true\n\
    \            break\n        }\n        num += 1\n    }\n    if found {\n     \
    \   return num + 1\n    }\n    return 0", "    var i = 0\n    var sum = 0\n  \
    \  var digits = 0\n    var primes = 0\n\n    for _ in 0..<(num as! String).characters.count\
    \ {\n        let c = num as! String\n        if let charAsInt = Int(String(char:\
    \ c)) {\n            sum += charAsInt\n            digits += 1\n        } else\
    \ {\n            if digits == 2 {\n                sum += 3\n                digits\
    \ -= 1\n                primes += 1\n            }\n        }\n    }\n    return\
    \ sum", '    // write your function here']
stop_tokens:
- "\n}"
