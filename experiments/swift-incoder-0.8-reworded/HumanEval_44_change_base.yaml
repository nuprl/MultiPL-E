name: HumanEval_44_change_base
language: swift
prompt: "\n/// Change numerical base of input number x to base.\n/// return string\
  \ representation after the conversion.\n/// base numbers are less than 10.\n///\
  \ >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n\
  /// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x:\
  \ Int, base: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\n\
  assert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base:\
  \ 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x:\
  \ 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
  \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
  \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
  \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
completions: ["  var result = \"\"\n  for value in Int(x) {\n    result += (String(value\
    \ - base) + base)\n  }\n  return result", "    if base < 10 {\n        return\
    \ String(format: \"%0\\(base)\\\"\".self, x)\n    }\n    var str = String(IntToString(x)).characters.map\
    \ { $0 }\n    str.insert(str.startIndex, base)\n    return String(str).characters.map\
    \ { String($0) }.joined()", '    return String(x)._base(base)', "    var s = \"\
    \"\n    let i = x % base\n    if i > 0 {\n        s = String(i / base)\n     \
    \   let remainder = i % base\n        s += String(remainder)\n    }\n    return\
    \ s", "    var a = x.toInt()\n    var b = a.toInt()\n    var n = base\n    while\
    \ n > 0 {\n        b = b * base\n        n = n - 1\n    }\n    return String(b\
    \ + a)", "    let n = Int((Double(x) / Double(base)) * Double(base))\n    return\
    \ n.toString()", "    let newBase = Int((base ** x) + base)\n    var newStr =\
    \ \"\"\n    for n in newBase {\n        newStr += String(Int(n))\n    }\n    return\
    \ newStr", "    var newBase = base\n    if newBase < 10 {\n        newBase = 10\n\
    \    }\n    if newBase > 60 {\n        newBase = 60\n    }\n    if newBase ==\
    \ 0 {\n        return String(Int(x))\n    }\n    var str = String(x)\n    if newBase\
    \ == 2 {\n        str = String(str.reversed())\n    }\n    var power = newBase\n\
    \    var result = \"\"\n    while str != \"\" {\n        var index = 0\n     \
    \   for _ in str.characters {\n            index = Int(str[index]) * newBase +\
    \ index\n            if index < 0 {\n                index = -index\n        \
    \        power = -power\n            }\n            if index > 9 {\n         \
    \       index = 9\n            }\n        }\n        result = String(Int(index))\
    \ + result\n        str = String(String(str[str.characters.count - index..<str.characters.count]))\n\
    \    }\n    return String(Int(power) + Int(result)) + String(power)", '    return
    String(format: "%@", String(x)).dropLast().insert(base, String(""))', "    let\
    \ x_base: Int = x % base\n    return String(x_base + base)", "  let len = x.bit_length()\n\
    \  if base < 2 || base > 36 {\n    // base must be in 2..36\n    return \"\"\n\
    \  }\n  if len > base {\n    if let last = x.last_digit() {\n      if last > base\
    \ {\n        return \"\"\n      }\n      // the last digit is in base\n      if\
    \ let x = x.split_last_digit() {\n        // x[1] == last digit\n        let base\
    \ = x[0] + base\n        if base > x.len() {\n          return \"\"\n        }\n\
    \        x = x.split_last_digit()\n        return x[0] + change_base(x[1], base)\n\
    \      }\n    }\n  }\n  var result = [String]()\n  result.append(x.to_digits(base,\
    \ length: base))\n  var i = 0\n  while i < len {\n    if i == 0 {\n      result.append(x.to_digits(base,\
    \ length: base))\n      i += 1\n      continue\n    }\n    if i == len - 1 {\n\
    \      result.append(result[0])\n      i += 1\n      continue\n    }\n    result.append(result[0].last(digit:\
    \ base))\n    i += 1\n  }\n  if len(result) > 1 {\n    result.append(result[0])\n\
    \  }\n  return result[0]", "\tvar result : String = \"\"\n\n\tif base < 10 {\n\
    \t\tresult = \"\\(base)\"\n\t} else if base > 10 {\n\t\tresult = \"\\(base)\"\
    \ + change_base(x, base: base - 10)\n\t} else if base == 10 {\n\t\tresult = \"\
    0\" + change_base(x, base: base - 10)\n\t} else if base == 0 {\n\t\tresult = x\n\
    \t} else {\n\t\twhile x > 0 {\n\t\t\tresult = string(Int64(math.Floor(x / base))\
    \ + 10) + result\n\t\t\tx = x % base\n\t\t}\n\t}\n\n\treturn result", "    let\
    \ digits = x.truncatingRemainder(base)\n    return String(digits)", '    return
    x.toString(base, base: base)', '    return String(UnicodeScalar(Int64(String(x)[Range(base..<x.count)].unicodeScalars.first!)))',
  "    let baseStr = String(base)\n    var result = \"\"\n\n    for _ in 0..<x.truncatingRemainder(dividingBy:\
    \ base) {\n        result = String(repeatElement(baseStr, count: base))\n    }\n\
    \n    return result", "    let b = base - 10\n    let digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let baseDigits = digits.characters.suffix(from: 10)\n    var result = \"\
    \"\n    for _ in 0 ..< x {\n        result = digits.characters.first! + baseDigits.characters.first!\
    \ + result\n    }\n    return result[..<result.count]", "    let base = pow(base,\
    \ Int(bitWidthFor(base)))\n    return x.toString(base: base)", "    let bases\
    \ = Array(1...base).sorted()\n    let nums = Array(1...x).sorted()\n\n    let\
    \ res = nums.map { $0.times(bases[$0]) }.joinWithSeparator(\"\")\n    return res",
  "    var num = String(x)\n    if num.count < base {\n        num = makeString(num,\
    \ base)\n    }\n    if num.count > base {\n        num += makeString(num.dropLast(base),\
    \ base)\n    }\n    return num", '  return x.toString().changeBaseTo(base)', '    return
    String(x >> base & 0x000000FF)', "  let result = (String(x / base) + String(x\
    \ % base)).trimmingCharacters(in: CharacterSet(charactersIn: base))\n  return\
    \ result", "    let digits = Array(x).map(Int32.init)\n    let nums = digits[0..<base].reverse()\n\
    \    let rest = digits[base..<digits.count]\n    let restString = (rest.map(Int32.init).reduce(\"\
    \") + String(rest.count)).characters.map { String($0) }\n    let str = (nums.reduce(\"\
    \") + String(digits.count))\n    return str + restString.joined(separator: \"\"\
    )", "    var str = String()\n    if x < 10 {\n        str = String(format: \"\
    0%d\", x)\n    } else {\n        str = String(x)\n    }\n    if base == 0 {\n\
    \        str = str.reversed()\n    } else {\n        var digits = str.unicodeScalars\n\
    \        var result = \"\"\n        for _ in 0..<str.length {\n            var\
    \ multiplier = UInt(base)\n            var digit = digits[Int(str[_]) - UInt(0)]\n\
    \            if multiplier * UInt(digit) > UInt(UInt32.max) {\n              \
    \  multiplier = UInt(UInt32.max)\n            }\n            result += String(Character(UnicodeScalar(multiplier\
    \ * digit)))\n        }\n        str = result\n    }\n    return str", "    var\
    \ res = \"\"\n    let maxBase = pow(10, base)\n    while x > 0 {\n        if x\
    \ % maxBase == 0 {\n            res += String(x % maxBase)\n        }\n      \
    \  x /= maxBase\n    }\n    return res", "    var result = String()\n    var power\
    \ = 1\n    var divider = Int()\n\n    for _ in 0..<Int(logBase(x, base)) + 1 {\n\
    \        divider = divider / base\n        power = power + Int(logBase(divider,\
    \ base))\n    }\n\n    var power = power\n    for _ in 0..<Int(logBase(divider,\
    \ base)) {\n        result = String(format: \"%0\" + Int(ceil(logBase(divider,\
    \ base)) - Int(logBase(divider, base))) + \"d\", Int(divider * base))\n      \
    \  divider = divider / base\n        power = power + Int(logBase(divider, base))\n\
    \    }\n\n    switch power {\n    case 0: return result\n    case 1: return String(format:\
    \ \"%0\" + Int(ceil(logBase(divider, base)) - Int(logBase(divider, base))) + \"\
    d\", x)\n    default: return \"\"\n    }", "    let str = String(Int64(Int(x)/Int64(base))\
    \ * Int64(base))\n    return str", "    let bases = [2,8,10,16,20,32,40,64,128,256,512,1024,2048,4096,8192]\n\
    \    if x > bases.last {\n        throw ArgumentError(\"base is too large\")\n\
    \    }\n    if bases.contains(base) {\n        throw ArgumentError(\"base is too\
    \ large\")\n    }\n    let tmp = Int(x)\n    switch base {\n    case 2:\n    \
    \    return String(tmp)\n    case 8:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 8))\n    case 10:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 16))\n    case 16:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 32))\n    case 20:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 64))\n    case 32:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 128))\n    case 40:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 256))\n    case 64:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 512))\n    case 128:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 1024))\n    case 256:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 2048))\n    case 512:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 4096))\n    case 1024:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 8192))\n    case 2048:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 16384))\n    case 4096:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 32768))\n    case 8192:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 65536))\n    case 16384:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 131072))\n    case 32768:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 262144))\n    case 65536:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 524288))\n    case 131072:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 1048576))\n    case 262144:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 2097152))\n    case 524288:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 4194304))\n    case 1048576:\n        return String(tmp.truncatingRemainder(dividingBy:\
    \ 8388608))\n    case 2097152:\n        return String(tmp.truncatingRemainder(dividingBy: ",
  "    var new_str = String(x) // make a copy\n    if new_str.isEmpty {\n        return\
    \ \"\"\n    }\n    let char_set = CharacterSet(charactersIn: base)\n    if !char_set.contains(new_str[0])\
    \ {\n        return \"\"\n    }\n    new_str[0] = new_str[0].unicodeScalars.first!.value\
    \ % base\n    return new_str", "    let r = base / 10;\n    let i = x / r;\n \
    \   return (String(format: \"%d\", x)) + String(String(format: \"%d\", i))[..(10\
    \ - base)];", "  let digits = Int(log10(x))\n  let new_base = pow(10.0, Double(base))\n\
    \  var result = \"\"\n  for i in 0..<digits {\n    result += String(Double(x)\
    \ / new_base)\n    x /= new_base\n  }\n  return result", "    var result = \"\
    0\"\n    var remainder = x % base\n    for _ in stride(from: base, to: 10, by:\
    \ -1) {\n        var tmp = remainder % base\n        remainder = remainder / base\n\
    \        result = String(tmp) + result\n    }\n    return String(remainder) +\
    \ result", "    if base < 10 {\n        base = base * 10\n    }\n\n    if x >\
    \ base {\n        x = (x / base) * base\n    }\n\n    return String(format: \"\
    %0\" + String(base) + \"d\", x)", '    return String(Int(x)/base)', "    let result\
    \ = String(x)\n    let index = result.index(of: \".\")!\n    let rest = result.dropFirst(index\
    \ + 1)\n    let newBase = base < 0 ? -base : base\n    let newNumber = Double(rest)\
    \ *\n        Double(newBase) /\n        Double(10).pow(Double(newBase))\n    return\
    \ String(newNumber)", "\tvar xStr = String(x)\n\tif xStr != \"NaN\" && xStr !=\
    \ \"Infinity\" && xStr != \"-Infinity\" {\n\t\tvar baseStr = String(base)\n\t\t\
    var baseInt = Int(baseStr)\n\t\tif baseInt < 10 {\n\t\t\tbaseStr = \"0\" + baseStr\n\
    \t\t}\n\t\tvar baseStr = baseStr + baseStr\n\t\txStr = String(x)\n\t\tvar outStr\
    \ = String()\n\t\tvar xStrIndex = 0\n\t\tvar baseStrIndex = 0\n\t\twhile xStrIndex\
    \ < xStr.characters.count {\n\t\t\tif xStrIndex == baseStrIndex {\n\t\t\t\toutStr\
    \ += xStr.characters[xStrIndex]\n\t\t\t\txStrIndex += 1\n\t\t\t} else {\n\t\t\t\
    \tvar xChar = xStr.characters[xStrIndex]\n\t\t\t\tvar baseChar = baseStr.characters[baseStrIndex]\n\
    \t\t\t\tif xChar == baseChar {\n\t\t\t\t\toutStr += xChar\n\t\t\t\t\txStrIndex\
    \ += 1\n\t\t\t\t} else {\n\t\t\t\t\toutStr += xChar + baseChar\n\t\t\t\t\txStrIndex\
    \ += 1\n\t\t\t\t\tbaseStrIndex += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn outStr\n\
    \t}\n\treturn \"NaN\"", "    let num = BigUInt(x) * BigUInt(base)\n    let str\
    \ = String(num)\n    return str", "  let xstr = String(x)\n  let bstr = String(base)\n\
    \  let pos = bstr.search(xstr)\n  let bstr_start = bstr.startIndex.advancedBy(0)\n\
    \  let xstr_start = xstr.startIndex.advancedBy(0)\n  if pos == bstr_start {\n\
    \    let xstr2 = xstr.substringToIndex(xstr_start)\n    let bstr2 = bstr.substringToIndex(bstr_start)\n\
    \    return String(Double(xstr2.unicodeScalars\n      .filter{ $0.isUppercase\
    \ })\n      .reduce(0, +) + Double(bstr2.unicodeScalars\n      .filter{ $0.isUppercase\
    \ })\n      .reduce(0, +) * Double(bstr2.unicodeScalars\n      .filter{ $0.isLowercase\
    \ })\n      .reduce(0, +) + Double(bstr2.unicodeScalars\n      .filter{ $0.isLowercase\
    \ })\n      .reduce(0, +) * Double(bstr2.unicodeScalars\n      .filter{ $0.isDigit\
    \ })\n      .reduce(0, +) * Double(bstr2.unicodeScalars\n      .filter{ $0.isDigit\
    \ })\n      .reduce(0, +))\n  } else {\n    return \"\"\n  }", '    return String(Int64(x)
    * Int64(base))', "    if base == 0 {\n        return String(x)\n    }\n    switch\
    \ base {\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 2:\n \
    \       return fmt.Sprintf(\"%04d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %016d\", x)\n    case 16:\n        return fmt.Sprintf(\"%040d\", x)\n    case\
    \ 32:\n        return fmt.Sprintf(\"%064d\", x)\n    case 64:\n        return\
    \ fmt.Sprintf(\"%0128d\", x)\n    case 25:\n        return fmt.Sprintf(\"%0256d\"\
    , x)\n    case 40:\n        return fmt.Sprintf(\"%0512d\", x)\n    case 64:\n\
    \        return fmt.Sprintf(\"%01024d\", x)\n    case 100:\n        return fmt.Sprintf(\"\
    %01025d\", x)\n    case 200:\n        return fmt.Sprintf(\"%01024d\", x)\n   \
    \ case 400:\n        return fmt.Sprintf(\"%01025d\", x)\n    case 800:\n     \
    \   return fmt.Sprintf(\"%01025d\", x)\n    case 1600:\n        return fmt.Sprintf(\"\
    %01025d\", x)\n    case 3200:\n        return fmt.Sprintf(\"%01025d\", x)\n  \
    \  case 6400:\n        return fmt.Sprintf(\"%01025d\", x)\n    case 12800:\n \
    \       return fmt.Sprintf(\"%01025d\", x)\n    case 2560:\n        return fmt.Sprintf(\"\
    %01025d\", x)\n    case 5120:\n        return fmt.Sprintf(\"%01025d\", x)\n  \
    \  case 10240:\n        return fmt.Sprintf(\"%01025d\", x)\n    case 20480:\n\
    \        return fmt.Sprintf(\"%01025d\", x)\n    case 40960:\n        return fmt.Sprintf(\"\
    %01025d\", x)\n    case 81920:\n        return fmt.Sprintf(\"%01025d\", x)\n \
    \   case 163840:\n        return fmt.Sprintf(\"%01025d\", x)\n    case 327680:\n\
    \        return fmt.Sprintf(\"%01025d\", x)\n    case 655360:\n        return\
    \ fmt.Sprintf(\"%01025d\", x)\n    case 1310720:\n        return fmt.Sprintf(\"\
    %01025d\", x)\n    case 2621440:\n        return fmt.Sprintf(\"%01025d\", x)\n\
    \    case 5242880:\n        return fmt.Sprintf(\"%01025d\", x)\n    case 10485760:\n\
    \        return fmt.Sprintf(\"%01025d\", x)\n    case 20971520:\n        return\
    \ fmt.Sprintf(\"%01025d\", x)\n    case 41943040:\n        return fmt.Sprintf(\"\
    %01025d\", x)\n    case 83886080:\n        return fmt.Sprintf(\"%01025d\", x)\n\
    \    case 167772", "    let bases: [Int] = [n: base, m: 10, b: 100, k: 1000, r:\
    \ 100000, t: 1000000, d: 1000000000]\n    let result = String(x)\n\n    for b\
    \ in bases.reversed() {\n        let m = b.m\n        let b = b.b\n        let\
    \ k = b.k\n        let r = b.r\n        let t = b.t\n        let d = b.d\n   \
    \     let n = b.n\n\n        if x >= m {\n            x = x % m\n        } else\
    \ if (m == 1) {\n            x /= m\n            continue\n        }\n\n     \
    \   let a = x / m\n        x = x\n        var nx = a * n\n\n        while nx !=\
    \ 0 {\n            nx = nx / (10 * m)\n            x = x + nx\n        }\n\n \
    \       if x == 10 {\n            x = a\n        }\n\n        var nx = x\n\n \
    \       while nx != 0 {\n            nx = nx / b\n            x = x + nx\n   \
    \     }\n\n        if x == 10 {\n            x = a\n        }\n\n        var nx\
    \ = x\n\n        while nx != 0 {\n            nx = nx / k\n            x = x +\
    \ nx\n        }\n\n        if x == 10 {\n            x = a\n        }\n\n    \
    \    var nx = x\n\n        while nx != 0 {\n            nx = nx / r\n        \
    \    x = x + nx\n        }\n\n        if x == 10 {\n            x = a\n      \
    \  }\n\n        var nx = x\n\n        while nx != 0 {\n            nx = nx / t\n\
    \            x = x + nx\n        }\n\n        if x == 10 {\n            x = a\n\
    \        }\n\n        var nx = x\n\n        while nx != 0 {\n            nx =\
    \ nx / d\n            x = x + nx\n        }\n\n        if x == 10 {\n        \
    \    x = a\n        }\n\n        if x == 10 {\n            x = 0\n        }\n\n\
    \        result = result.appending(String(x))\n    }\n\n    return result", " \
    \   let base10 = 10\n    let base16 = 16\n    switch base {\n    case 10:\n  \
    \      return String(x)\n    case 16:\n        return String(x*base16 + Int(log(x,\
    \ base16)))\n    case 3:\n        return String(x*base10 + Int(log(x, base10)))\n\
    \    default:\n        return \"\"\n    }", "    var digits = [String]()\n   \
    \ var pow = String()\n\n    for _ in 0..<base {\n        pow = \"1\" + pow\n \
    \   }\n\n    for _ in 0..<abs(x) {\n        digits.append(String(Int(x) % base))\n\
    \        x /= base\n    }\n    digits.append(pow)\n\n    var res = String()\n\
    \    for _ in 0..<(digits[digits.count-1].count) {\n        res += digits[digits.count-1]\n\
    \    }\n    return res", "    var b = base\n    if x < 0 {\n        b = -b\n \
    \       x = -x\n    }\n    var result = \"\"\n    if x < 10 {\n        result\
    \ = String(x)\n    } else if x < 100 {\n        while x > b {\n            result\
    \ += \"0\"\n            x -= b\n        }\n        if x%b != 0 {\n           \
    \ result += String(x%b)\n        }\n    } else if x < 1000000 {\n        while\
    \ x > b {\n            result += \"0\"\n            x -= b\n        }\n      \
    \  if x%b != 0 {\n            result += String(x%b)\n        }\n    }\n    return\
    \ result", "\tswitch base {\n\tcase 2:\n\t\tif x > 36 {\n\t\t\treturn String(x)\n\
    \t\t} else {\n\t\t\treturn String(x - 36)\n\t\t}\n\tcase 3:\n\t\tif x > 63 {\n\
    \t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x - 63)\n\t\t}\n\tcase\
    \ 4:\n\t\tif x > 9 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x\
    \ - 9)\n\t\t}\n\tcase 5:\n\t\tif x > 32 {\n\t\t\treturn String(x)\n\t\t} else\
    \ {\n\t\t\treturn String(x - 32)\n\t\t}\n\tcase 6:\n\t\tif x > 63 {\n\t\t\treturn\
    \ String(x)\n\t\t} else {\n\t\t\treturn String(x - 63)\n\t\t}\n\tcase 7:\n\t\t\
    if x > 9 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x - 9)\n\
    \t\t}\n\tcase 8:\n\t\tif x > 32 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\t\
    return String(x - 32)\n\t\t}\n\tcase 9:\n\t\tif x > 63 {\n\t\t\treturn String(x)\n\
    \t\t} else {\n\t\t\treturn String(x - 63)\n\t\t}\n\tcase 10:\n\t\tif x > 9 {\n\
    \t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x - 9)\n\t\t}\n\tcase\
    \ 11:\n\t\tif x > 32 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x\
    \ - 32)\n\t\t}\n\tcase 12:\n\t\tif x > 63 {\n\t\t\treturn String(x)\n\t\t} else\
    \ {\n\t\t\treturn String(x - 63)\n\t\t}\n\tcase 13:\n\t\tif x > 9 {\n\t\t\treturn\
    \ String(x)\n\t\t} else {\n\t\t\treturn String(x - 9)\n\t\t}\n\tcase 14:\n\t\t\
    if x > 32 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x - 32)\n\
    \t\t}\n\tcase 15:\n\t\tif x > 63 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\
    \treturn String(x - 63)\n\t\t}\n\tcase 16:\n\t\tif x > 9 {\n\t\t\treturn String(x)\n\
    \t\t} else {\n\t\t\treturn String(x - 9)\n\t\t}\n\tcase 17:\n\t\tif x > 32 {\n\
    \t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x - 32)\n\t\t}\n\tcase\
    \ 18:\n\t\tif x > 63 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x\
    \ - 63)\n\t\t}\n\tcase 19:\n\t\tif x > 9 {\n\t\t\treturn String(x)\n\t\t} else\
    \ {\n\t\t\treturn String(x - 9)\n\t\t}\n\tcase 20:\n\t\tif x > 32 {\n\t\t\treturn\
    \ String(x)\n\t\t} else {\n\t\t\treturn String(x - 32)\n\t\t}\n\tcase 21:\n\t\t\
    if x > 63 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\treturn String(x - 63)\n\
    \t\t}\n\tcase 22:\n\t\tif x > 9 {\n\t\t\treturn String(x)\n\t\t} else {\n\t\t\t\
    return String(x - 9)\n\t\t}\n\tcase 23:\n\t\tif x > 32 {\n\t\t\treturn String(x)\n\
    \t\t} else {\n\t\t\treturn String(x - 32)\n\t\t}\n\tcase 24:\n\t\tif x > 63 {\n\
    \t\t\treturn String(x)\n\t\t} else {", "    var bases = [\n        \"0\",\n  \
    \      \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n\
    \        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"a\"\
    ,\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"\
    f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n       \
    \ \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n   \
    \     \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n\
    \        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\"\
    ,\n        \"z\"\n    ]\n    let baseStr = [\n        \"0\",\n        \"1\",\n\
    \        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\"\
    ,\n        \"7\",\n        \"8\",\n        \"9\",\n        \"a\",\n        \"\
    b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n       \
    \ \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n   \
    \     \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n\
    \        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\"\
    ,\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"\
    z\"\n    ]\n    if base < 0 || base > bases.count {\n        fatalError(\"Invalid\
    \ base\")\n    }\n    var result = \"\"\n    while x > 0 {\n        if x % base\
    \ == 0 {\n            if result != \"\" {\n                result += baseStr[bases.count\
    \ - 1]\n            }\n            if base == 10 {\n                result = \"\
    0\"\n            } else {\n                result += baseStr[bases.count - 1]\n\
    \            }\n            x /= base\n        } else {\n            result +=\
    \ String(x)\n            x -= 1\n        }\n    }\n    return result", "    switch\
    \ base {\n    case 0, 2, 4, 6, 8, 10, 12:\n        var s = \"\"\n        s +=\
    \ String(x)\n        x /= base\n        if x > 0 {\n            s += String(x)\n\
    \        }\n        return String(s)\n    default:\n        var s = \"\"\n   \
    \     s += String(x)\n        x /= base\n        while x > 0 {\n            s\
    \ += \"0\"\n            x /= base\n        }\n        return String(s)\n    }",
  "    var result = \"\"\n    var digits = \"\"\n    var power = 0\n\n    while x\
    \ >= base {\n        digits += String(x%base)\n        x = x/base\n        power\
    \ += 1\n    }\n\n    while power {\n        if digits != \"1\" && digits != \"\
    0\" && digits != \"10\" {\n            digits += \"0\"\n        }\n        power\
    \ -= 1\n    }\n\n    if power {\n        if digits == \"10\" {\n            digits\
    \ += \"1\"\n        }\n        digits += \"0\"\n    }\n\n    return digits + result",
  "    var result = \"\"\n    var power = 1\n    var exponent = -1\n\n    for digit\
    \ in String(x) {\n        let x = Int(digit)\n        if exponent < 0 {\n    \
    \        exponent = exponent * base\n        } else {\n            exponent /=\
    \ base\n        }\n        let remainder = x%base\n        result += (String(remainder))\n\
    \        power = power * base\n    }\n    return (result + (String(exponent)))",
  "\tvar result = \"\"\n\tif x < base*base {\n\t\treturn x.to_string()\n\t}\n\tbase\
    \ /= 2\n\tvar remain = Int()\n\twhile x > 0 {\n\t\tx /= base\n\t\tremain = x -\
    \ remain*base\n\t\tresult += String(remain)\n\t}\n\tresult += String(base*base\
    \ - remain*base)\n\treturn result", "    let baseChars = Array(base)\n    return\
    \ String(UnicodeScalar(x) << baseChars.last!.value)", "    switch base {\n   \
    \ case 2:\n        if x > 1 {\n            var result = \"\"\n            var\
    \ digit = Int(x%10)\n            digit = digit + Int(base/2)\n            if digit\
    \ < 10 {\n                result = \"0\" + digit\n            } else {\n     \
    \           result = \"1\" + digit\n            }\n            x = Int(x/10)\n\
    \            return result\n        }\n        return \"0\"\n    case 3:\n   \
    \     return change_base(x, base: 4)\n    case 4:\n        if x > 1 {\n      \
    \      var result = \"\"\n            var digit = Int(x%10)\n            digit\
    \ = digit + Int(base/2)\n            if digit < 10 {\n                result =\
    \ \"0\" + digit\n            } else {\n                result = \"1\" + digit\n\
    \            }\n            x = Int(x/10)\n            return result\n       \
    \ }\n        return \"0\"\n    case 5:\n        return change_base(x, base: 6)\n\
    \    case 6:\n        return change_base(x, base: 8)\n    case 7:\n        return\
    \ change_base(x, base: 10)\n    case 8:\n        return change_base(x, base: 2)\n\
    \    case 9:\n        if x > 1 {\n            var result = \"\"\n            var\
    \ digit = Int(x%10)\n            digit = digit + Int(base/2)\n            if digit\
    \ < 10 {\n                result = \"0\" + digit\n            } else {\n     \
    \           result = \"1\" + digit\n            }\n            x = Int(x/10)\n\
    \            return result\n        }\n        return \"0\"\n    case 10:\n  \
    \      if x > 1 {\n            var result = \"\"\n            var digit = Int(x%10)\n\
    \            digit = digit + Int(base/2)\n            if digit < 10 {\n      \
    \          result = \"0\" + digit\n            } else {\n                result\
    \ = \"1\" + digit\n            }\n            x = Int(x/10)\n            return\
    \ result\n        }\n        return \"0\"\n    case 11:\n        return change_base(x,\
    \ base: 2)\n    case 12:\n        return change_base(x, base: 4)\n    case 13:\n\
    \        return change_base(x, base: 6)\n    case 14:\n        return change_base(x,\
    \ base: 8)\n    case 15:\n        return change_base(x, base: 10)\n    case 16:\n\
    \        return change_base(x, base: 2)\n    case 17:\n        return change_base(x,\
    \ base: 4)\n    case 18:\n        return change_base(x, base: 6)\n    case 19:\n\
    \        return change_base(x, base: 8)\n    case 20:\n        return change_base(x,\
    \ base: 10)\n    case 21:\n        return change_base(x, base: 2)\n    case 22:\n\
    \        return change_base(x, base: 4)\n    case 23:\n        return change_base(x,\
    \ base: 6)\n    case 24:\n        return change_base(x, base: 8)\n    case 25:\n\
    \        return change_base(x, base: 10)\n    case 26:\n        return change_base(x,\
    \ base: 2)\n    case 27:\n        return change_base(x, base: 4)\n    case 28:\n\
    \        return change_base(x, base", "    if base < 10 {\n        return x.toInt().toString(base)\n\
    \    }\n\n    var result = \"\"\n    var index = 0\n    var remainder = x % base\n\
    \    var last_index = remainder / base\n    while remainder > 0 {\n        if\
    \ remainder % base == 0 {\n            result = String(last_index) + result\n\
    \        }\n        remainder = remainder / base\n        last_index = last_index\
    \ + 1\n    }\n    return String(last_index) + result", '    return x.toString(base)',
  "    let digits = digits(x)\n    return String(x.truncatingRemainder(dividing: dividing(base)))",
  "\tvar result = \"\"\n\tif x < base {\n\t\treturn fmt.Sprintf(\"%d\\0\", x)\n\t\
    }\n\tbase %= x\n\tfor base != 0 {\n\t\tresult += \"0123456789\"[base%10]\n\t\t\
    x /= 10\n\t\tbase /= 10\n\t}\n\treturn result + fmt.Sprintf(\"%d\\0\", x)", '    return
    String(x)', "    var res = \"\"\n    var power = Int(base)\n    for _ in 0..<abs(x)\
    \ {\n        res += String(Int(x%power))\n        x /= power\n    }\n    return\
    \ res", "    let base_to_digit_map: [String: Int] = [\"1\": 1, \"0\": 0, \"2\"\
    : 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"\
    10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\":\
    \ 16, \"17\": 17, \"18\": 18, \"19\": 19, \"20\": 20, \"21\": 21, \"22\": 22,\
    \ \"23\": 23, \"24\": 24, \"25\": 25, \"26\": 26, \"27\": 27, \"28\": 28, \"29\"\
    : 29, \"30\": 30, \"31\": 31, \"32\": 32, \"33\": 33, \"34\": 34, \"35\": 35,\
    \ \"36\": 36, \"37\": 37, \"38\": 38, \"39\": 39, \"40\": 40, \"41\": 41, \"42\"\
    : 42, \"43\": 43, \"44\": 44, \"45\": 45, \"46\": 46, \"47\": 47, \"48\": 48,\
    \ \"49\": 49, \"50\": 50, \"51\": 51, \"52\": 52, \"53\": 53, \"54\": 54, \"55\"\
    : 55, \"56\": 56, \"57\": 57, \"58\": 58, \"59\": 59, \"60\": 60, \"61\": 61,\
    \ \"62\": 62, \"63\": 63, \"64\": 64, \"65\": 65, \"66\": 66, \"67\": 67, \"68\"\
    : 68, \"69\": 69, \"70\": 70, \"71\": 71, \"72\": 72, \"73\": 73, \"74\": 74,\
    \ \"75\": 75, \"76\": 76, \"77\": 77, \"78\": 78, \"79\": 79, \"80\": 80, \"81\"\
    : 81, \"82\": 82, \"83\": 83, \"84\": 84, \"85\": 85, \"86\": 86, \"87\": 87,\
    \ \"88\": 88, \"89\": 89, \"90\": 90, \"91\": 91, \"92\": 92, \"93\": 93, \"94\"\
    : 94, \"95\": 95, \"96\": 96, \"97\": 97, \"98\": 98, \"99\": 99, \"100\": 100,\
    \ \"101\": 101, \"102\": 102, \"103\": 103, \"104\": 104, \"105\": 105, \"106\"\
    : 106, \"107\": 107, \"108\": 108, \"109\": 109, \"110\": 110,\n        \"111\"\
    : 111, \"112\": 112, \"113\": 113, \"114\": 114, \"115\": 115, \"116\": 116, \"\
    117\": 117, \"118\": 118, \"119\": 119, \"120\": 120, \"121\": 121, \"122\": 122,\
    \ \"123\": 123, \"124\": 124, \"125\": ", "    let result = String(x)\n    let\
    \ length = result.length\n    let baseString = String(base)\n    let newLength\
    \ = baseString.count * base\n    if newLength > length {\n        let extra =\
    \ length - newLength\n        for i in 0..<extra {\n            result = \"0\"\
    \ + result\n        }\n    }\n    \n    let result = String(x)\n    let length\
    \ = result.length\n    let baseString = String(base)\n    let newLength = baseString.count\
    \ * base\n    if newLength > length {\n        let extra = length - newLength\n\
    \        for i in 0..<extra {\n            result = \"0\" + result\n        }\n\
    \    }\n    \n    if let b = Int(baseString) {\n        let rep = Int(\"0\" +\
    \ String(x))\n        let base = Int(b)\n        let result = rep.truncatingRemainder(dividingBy:\
    \ base)\n        return String((result!).uppercased())\n    }\n    return String(x)",
  "  let mut digits = [String]()\n  var x = x.to_digits()\n  let base10: BigUint =\
    \ base10.pow(base)\n  let base10_rev: BigUint = base10.pow(base).rev()\n  for\
    \ d in x {\n    digits.append(String(d.to_digits()))\n  }\n  for d in base10_rev\
    \ {\n    digits.append(String(d.to_digits()))\n  }\n  digits.reverse()\n  return\
    \ digits.reduceFirst({ $0 + $1 })", "    switch base {\n    case 10:\n       \
    \ switch x {\n        case 0:\n            return \"0\"\n        case 1:\n   \
    \         return \"1\"\n        case 2:\n            return \"2\"\n        case\
    \ 3:\n            return \"3\"\n        case 4:\n            return \"4\"\n  \
    \      case 5:\n            return \"5\"\n        case 6:\n            return\
    \ \"6\"\n        case 7:\n            return \"7\"\n        case 8:\n        \
    \    return \"8\"\n        case 9:\n            return \"9\"\n        default:\n\
    \            return \"0\"\n        }\n    case 10:\n        switch x {\n     \
    \   case 0:\n            return \"0\"\n        case 1:\n            return \"\
    1\"\n        case 2:\n            return \"2\"\n        case 3:\n            return\
    \ \"3\"\n        case 4:\n            return \"4\"\n        case 5:\n        \
    \    return \"5\"\n        case 6:\n            return \"6\"\n        case 7:\n\
    \            return \"7\"\n        case 8:\n            return \"8\"\n       \
    \ case 9:\n            return \"9\"\n        default:\n            return \"0\"\
    \n        }\n    case 10:\n        switch x {\n        case 0:\n            return\
    \ \"0\"\n        case 1:\n            return \"1\"\n        case 2:\n        \
    \    return \"2\"\n        case 3:\n            return \"3\"\n        case 4:\n\
    \            return \"4\"\n        case 5:\n            return \"5\"\n       \
    \ case 6:\n            return \"6\"\n        case 7:\n            return \"7\"\
    \n        case 8:\n            return \"8\"\n        case 9:\n            return\
    \ \"9\"\n        default:\n            return \"0\"\n        }\n    case 10:\n\
    \        switch x {\n        case 0:\n            return \"0\"\n        case 1:\n\
    \            return \"1\"\n        case 2:\n            return \"2\"\n       \
    \ case 3:\n            return \"3\"\n        case 4:\n            return \"4\"\
    \n        case 5:\n            return \"5\"\n        case 6:\n            return\
    \ \"6\"\n        case 7:\n            return \"7\"\n        case 8:\n        \
    \    return \"8\"\n        case 9:\n            return \"9\"\n        default:\n\
    \            return \"0\"\n        }\n    case 10:\n        switch x {\n     \
    \   case 0:\n            return \"0\"\n        case 1:\n            return \"\
    1\"\n        case 2:\n            return \"2\"\n        case 3:\n            return\
    \ \"3\"\n        case 4:\n            return \"4\"\n        case 5:\n        \
    \    return \"5\"\n        case 6:\n            return \"6\"\n        case 7:\n\
    \            return \"7\"\n        case 8:\n            return \"8\"\n       \
    \ case 9:\n            return \"9\"\n        default:\n            return \"0\"\
    \n        }\n    case 10:\n        switch x {\n        case 0:\n            return\
    \ \"0\"\n        case 1:\n            return \"1\"\n        case 2:\n        \
    \    return \"2\"\n        case 3:\n            return \"3\"\n        case 4:\n\
    \            return \"4\"\n        case 5:\n            return \"5\"\n       \
    \ case 6:\n            return \"6\"\n        case 7:\n            return \"7\"\
    \n        case 8:\n            return \"8\"\n        case 9:\n            return\
    \ \"9\"\n        default:\n            return \"0\"\n        }\n    case 10:\n\
    \        switch x {\n        case 0:\n            return \"0\"\n        case 1:\n\
    \            return \"1\"\n        case ", "\tswitch base {\n\tcase 2:\n\t\treturn\
    \ x.toString(2)\n\tcase 3:\n\t\treturn x.toString(3)\n\tcase 4:\n\t\treturn x.toString(4)\n\
    \tcase 5:\n\t\treturn x.toString(5)\n\tcase 6:\n\t\treturn x.toString(6)\n\tcase\
    \ 7:\n\t\treturn x.toString(7)\n\tcase 8:\n\t\treturn x.toString(8)\n\tcase 9:\n\
    \t\treturn x.toString(9)\n\tcase 10:\n\t\treturn x.toString(10)\n\tdefault:\n\t\
    \treturn x.toString(base)\n\t}", '    return String(x)', "\tswitch base {\n\t\
    case 2:\n\t\tswitch {\n\t\tcase x < 10:\n\t\t\treturn strconv.FormatInt(int64(x),\
    \ 16)\n\t\tcase x < 100:\n\t\t\treturn strconv.Itoa(int(x / 10)) + strconv.FormatInt(int64(x\
    \ % 10), 16)\n\t\tdefault:\n\t\t\treturn strconv.Itoa(int(x / 100)) + strconv.FormatInt(int64(x\
    \ % 100), 16)\n\t\t}\n\tcase 10:\n\t\tswitch {\n\t\tcase x < 10:\n\t\t\treturn\
    \ strconv.Itoa(int(x))\n\t\tcase x < 100:\n\t\t\treturn strconv.FormatInt(int64(x),\
    \ 10)\n\t\tdefault:\n\t\t\treturn strconv.FormatInt(int64(x/10), 10) + strconv.Itoa(int(x\
    \ % 10))\n\t\t}\n\tcase 16:\n\t\tswitch {\n\t\tcase x < 10:\n\t\t\treturn strconv.Itoa(int(x))\n\
    \t\tcase x < 100:\n\t\t\treturn strconv.FormatInt(int64(x), 16)\n\t\tdefault:\n\
    \t\t\treturn strconv.FormatInt(int64(x/100), 16) + strconv.FormatInt(int64(x%100),\
    \ 16)\n\t\t}\n\tcase 10:\n\t\tswitch {\n\t\tcase x < 10:\n\t\t\treturn strconv.Itoa(int(x\
    \ / 10))\n\t\tcase x < 100:\n\t\t\treturn strconv.FormatInt(int64(x/10), 10) +\
    \ strconv.Itoa(int(x % 10))\n\t\tdefault:\n\t\t\treturn strconv.FormatInt(int64(x/100),\
    \ 10) + strconv.FormatInt(int64(x%100), 10)\n\t\t}\n\tdefault:\n\t\treturn fmt.Sprintf(\"\
    %d\", x)\n\t}", "    let n = base.pow10\n    var r = \"\"\n    var power = 1\n\
    \    var digits = \"\"\n    var carry = 0\n    while n != 0 {\n        let q =\
    \ Int(truncating: n / base)\n        let digit = q % base\n        r = String(carry)\
    \ + r\n        digits = String(digit) + digits\n        n = q\n        carry =\
    \ digit * power\n        power = power * 10\n    }\n    if carry != 0 {\n    \
    \    r = String(carry) + r\n    }\n    if r.count < base.pow10 {\n        r =\
    \ \"0\".repeat(base.pow10 - r.count) + r\n    }\n    return r + digits", "   \
    \ guard x != 0 || base != 0 else {\n        return \"\"\n    }\n\n    var n =\
    \ x\n    let m = base\n\n    if m == 10 { // base 10\n        while n > 0 {\n\
    \            n /= 10\n        }\n\n        return \"0\"\n    }\n\n    var sb =\
    \ StringBuilder(\"\")\n    while n != 0 {\n        let digit = n % m\n       \
    \ sb.append(String(digit))\n        n /= m\n    }\n\n    return sb.reverse().string",
  "    let mut result = String::new();\n    loop {\n        let remainder = x % base;\n\
    \        let digit = remainder % base;\n        result = x.to_string().chars().collect::<String>()\
    \ + digit.to_string() + result;\n        x /= base;\n        if x == 0 {\n   \
    \         break;\n        }\n    }\n    result", "    let _x = UInt32(x)\n   \
    \ let _base = UInt(base)\n    return String(UInt64(Int(_x) * _base + Int(_x) %\
    \ _base + _base / 2))", "    if base < 2 {\n        return strconv.Itoa(x)\n \
    \   }\n    var result = \"\"\n    var power = 0\n    var pow10 = 10\n    var remainder\
    \ = x\n    while true {\n        if reminder < pow10 {\n            result +=\
    \ strconv.Itoa(remainder)\n            break\n        }\n        power = power\
    \ * base + 10\n        remainder = reminder / pow10\n        result += strconv.Itoa(remainder)\n\
    \        pow10 /= base\n    }\n    return result", "    var result = String()\n\
    \n    if base < 2 {\n        base.isOdd() && return \"\"\n    }\n    \n    var\
    \ i = 0\n    \n    for number in x.bits(base) {\n        if number == 0 {\n  \
    \          result = result + \"0\"\n        } else {\n            number > 0 &&\
    \ result = result + \"1\"\n            result += String(number)\n        }\n \
    \   }\n\n    return result", "    let digit = x.toInt()\n    let base = digit.toRadixString(base)\n\
    \    let result = digit.toRadixString(base).reversed()\n    return result.reversed()",
  "    let result = (x * (10 - base)) / base\n    return String(result)", "    let\
    \ bases = Array(1...base)\n    var result = \"\"\n    var remainder = truncatingRemainder(x,\
    \ base)\n    for b in bases {\n        let digit = remainder % b\n        remainder\
    \ = truncatingRemainder(remainder, digit, b)\n        result = String(digit) +\
    \ result\n    }\n    return result", "    if base < 2 || base > 10 {\n       \
    \ return \"\"\n    }\n    var str = \"\"\n    if x < base {\n        str = str\
    \ + \"0\"\n    } else {\n        str = str + str[..(x - base)]\n    }\n    while\
    \ str.isEmpty {\n        str = str + \"0\"\n    }\n    return str", "  let radix\
    \ = Int64(base)\n  \n  var num: Int64 = Int64(x)\n  \n  while num != 0 {\n   \
    \ num /= radix\n  }\n  \n  let numString = String(num)\n  \n  return numString.stringByPaddingToLength(64,\
    \ radix, String(\".\"))", "    switch base {\n    case 2:\n        return x.toString(2)\n\
    \    case 3:\n        return x.toString(3)\n    case 4:\n        return x.toString(4)\n\
    \    case 5:\n        return x.toString(5)\n    case 6:\n        return x.toString(6)\n\
    \    case 7:\n        return x.toString(7)\n    case 8:\n        return x.toString(8)\n\
    \    case 9:\n        return x.toString(9)\n    case 10:\n        return x.toString(10)\n\
    \    case 11:\n        return x.toString(11)\n    case 12:\n        return x.toString(12)\n\
    \    case 13:\n        return x.toString(13)\n    case 14:\n        return x.toString(14)\n\
    \    case 15:\n        return x.toString(15)\n    case 16:\n        return x.toString(16)\n\
    \    case 17:\n        return x.toString(17)\n    case 18:\n        return x.toString(18)\n\
    \    case 19:\n        return x.toString(19)\n    case 20:\n        return x.toString(20)\n\
    \    case 21:\n        return x.toString(21)\n    case 22:\n        return x.toString(22)\n\
    \    case 23:\n        return x.toString(23)\n    case 24:\n        return x.toString(24)\n\
    \    case 25:\n        return x.toString(25)\n    case 26:\n        return x.toString(26)\n\
    \    case 27:\n        return x.toString(27)\n    case 28:\n        return x.toString(28)\n\
    \    case 29:\n        return x.toString(29)\n    case 30:\n        return x.toString(30)\n\
    \    case 31:\n        return x.toString(31)\n    default:\n        return String(x.toString(base))\n\
    \    }", "    if base == 0 {\n        return String(format: \"%0d\", x)\n    }\n\
    \    let numBase = Int(\"\\(base)\")\n    var numString = \"\\(Int(x / numBase))\"\
    \n    if numString.count == 1 {\n        numString = \"0\" + numString\n    }\n\
    \    return String(format: \"%0\" + numString, x / numBase)", "    var new_base\
    \ = 10\n    \n    if base > 2 {\n        new_base = base\n    }\n\n    if x !=\
    \ 0 {\n        var remainder = x / new_base\n\n        if x % new_base != 0 {\n\
    \            remainder++\n        }\n\n        new_base = base\n\n        return\
    \ String((Int(remainder) * new_base) + new_base)\n    } else {\n        return\
    \ \"\"\n    }", "    var x = IntToString(x: x, base: base)\n    var newBase =\
    \ base\n    if x > 10 {\n        newBase = 10\n    }\n    var result = \"\"\n\
    \    for i in 0..<x.count-2 {\n        result = string(x.characters) + string(baseToChars(newBase))\
    \ + string(x.characters)\n        newBase *= base\n    }\n    return result",
  "    var s = String(x)\n    if base == 10 { // base10\n        return String(s)\n\
    \    }\n    if base == 2 { // base2\n        return String(s.reversed())\n   \
    \ }\n    if base == 8 { // base8\n        var base8 = String(s)\n        var sum\
    \ = 0\n        for n in base8.unicodeScalars {\n            sum += Int(n)! * Int(base)\n\
    \        }\n        var res = \"0\"\n        while sum > 0 {\n            sum\
    \ += Int(base)\n            res += String(Int(sum))\n        }\n        return\
    \ String(res + base8)\n    }\n    // base1 ~ base9\n    var base9 = String(s)\n\
    \    var sum = 0\n    for n in base9.unicodeScalars {\n        sum += Int(n)!\
    \ * Int(base)\n    }\n    var res = \"0\"\n    while sum > 0 {\n        sum +=\
    \ Int(base)\n        res += String(Int(sum))\n    }\n    return base9 + res",
  "    var result = \"\"\n    if base < 10 {\n        result = String(x)\n    } else\
    \ {\n        var base = base\n        if base < 2 {\n            base = base *\
    \ 10\n            if base == 100 {\n                base = 10\n            } else\
    \ if base == 1000 {\n                base = 10\n            }\n        }\n   \
    \     if base < 100 {\n            result = String(x)\n        } else {\n    \
    \        var num = (Int(base) / Int(base)).truncatingRemainder(dividingBy: 10)\n\
    \            result = String(x)\n            while num > 0 {\n               \
    \ num = (num / 10).truncatingRemainder(dividingBy: 10)\n                result\
    \ = String(num) + result\n            }\n        }\n    }\n    return result",
  "    var out = \"\"\n    var i = 0\n    var n = 1\n    while (i < base) && (x <=\
    \ base**n) {\n        out = String(x%base) + out\n        i += 1\n        n *=\
    \ base\n    }\n    if i > 0{\n        out = String(x%base) + out\n    }\n    return\
    \ out", '    return IntToString(x, base) + StringFromInt(x)', "    if x < base\
    \ {\n        return \"\"\n    }\n    var result = String()\n    var i = base\n\
    \    let len = x.toInt().toHexString().count\n    while x > i {\n        result\
    \ += x.toHexString().substringFromIndex(i).toInt()\n        i /= base\n    }\n\
    \    result += x.toHexString().substringFromIndex(i)\n    return result", "  \
    \  let result = String(format: \"%@\", x)\n    let newBase = Int(String(x)) +\
    \ base\n    let newResult = String(format: \"%@\", newBase)\n    return String(newResult)",
  "    var result = \"\"\n    while x >= base {\n        result = String(x % base)\
    \ + result\n        x = x / base\n    }\n    return String(x % base) + result",
  "    var ret = \"\"\n    var base10 = 10\n    if base == 10 {\n        for i in\
    \ 0..<x.usize {\n            let digit = x.uint(i)\n            ret += String(digit)\n\
    \        }\n        return ret\n    }\n    var remainder: Int = x\n    for i in\
    \ 0..<base.usize {\n        let digit = base10.uint(i)\n        remainder = remainder.uint(modulus:\
    \ digit)\n    }\n    while remainder != 0 {\n        let digit = remainder.uint(modulus:\
    \ base)\n        remainder = remainder.uint(modulus: digit)\n        ret += String(digit)\n\
    \    }\n    return ret", "    var digits = x.digits\n    if base > 10 {\n    \
    \    return String(digits)\n    }\n    var res = \"\"\n    var tmp = \"\"\n  \
    \  var baseDigit = 0\n    while digits != nil {\n        tmp += String(digits![0])\n\
    \        if base == 10 {\n            baseDigit = digits![0]\n        }\n    \
    \    digits = digits![1..<(digits.count)]\n        res += digitsToString(digits,\
    \ baseDigit)\n    }\n    return res", "    let digits = digits(inBase: base, number:\
    \ x)\n    return String(digits.prefix(base))", "    if base == 0 {\n        return\
    \ String(x)\n    }\n    var digits = String(x)\n    if digits.hasSuffix(\" \"\
    ) {\n        digits = String(x)\n    }\n    if base <= 2 {\n        digits = String(x)\n\
    \    }\n    if base < 10 {\n        if base > 0 {\n            digits = String(base)\
    \ * String(digits)\n        }\n    } else {\n        if base < 100 {\n       \
    \     digits = String(base/10) * String(digits) + String(x)\n        } else {\n\
    \            digits = String(base%10) * String(digits) + String(x)\n        }\n\
    \    }\n    return digits", "    switch base {\n    case 2:\n        return String(Int((x\
    \ * 2) / Int(\"10\").intValue)) + \"0\"\n    case 3:\n        return String(Int((x\
    \ * 3) / Int(\"10\").intValue)) + \"0\"\n    case 4:\n        return String(Int((x\
    \ * 4) / Int(\"10\").intValue)) + \"0\"\n    case 5:\n        return String(Int((x\
    \ * 5) / Int(\"10\").intValue)) + \"0\"\n    case 6:\n        return String(Int((x\
    \ * 6) / Int(\"10\").intValue)) + \"0\"\n    case 7:\n        return String(Int((x\
    \ * 7) / Int(\"10\").intValue)) + \"0\"\n    case 8:\n        return String(Int((x\
    \ * 8) / Int(\"10\").intValue)) + \"0\"\n    case 9:\n        return String(Int((x\
    \ * 9) / Int(\"10\").intValue)) + \"0\"\n    case 10:\n        return String(Int((x\
    \ * 10) / Int(\"10\").intValue)) + \"0\"\n    default:\n        return String(Int(x)/Int(\"\
    10\").intValue)\n    }", "    let baseDigits = String(base)\n    let digits =\
    \ String(x)\n    var convertedDigits = \"\"\n    var index = 0\n    while index\
    \ < digits.length {\n        var d = digits.charAt(index)\n        if d == \"\
    0\" && index < digits.length - 1 {\n            d = digits.charAt(index + 1)\n\
    \        }\n        if d != \"0\" && index < digits.length - 1 {\n           \
    \ let digit = baseDigits.indexOf(\"\\(d)\") + 10\n            convertedDigits\
    \ = convertedDigits + String(digit)\n        }\n        index += 1\n    }\n  \
    \  return convertedDigits", "  var s = String(x)\n  var baseStr: String\n  switch\
    \ (base) {\n  case 10:\n    baseStr = \"0b\"\n  case 11:\n    baseStr = \"0o\"\
    \n  case 12:\n    baseStr = \"0u\"\n  default:\n    baseStr = \"0b\" + \"0\" *\
    \ (base - 10) + base\n  }\n\n  let intStr = String(Int(Double(x)) / Double(base))\n\
    \n  var index = 0\n  for i = intStr.characters.reversed().dropLast().reversed()\
    \ {\n    if Int(i) > base {\n      index += 1\n    }\n    s[index] = String(i)\n\
    \  }\n  return String(s.reverse())", '    return x.toString(base, base)', "  \
    \  if base == 0 {\n        return x.ascii\n    }\n    var s = \"\"\n    var i\
    \ = 0\n    var j = 0\n    for digit := 0; digit < len(x.ascii); digit++ {\n  \
    \      s := x.ascii[digit] + s\n        if digit < len(x.ascii) {\n          \
    \  if (x.ascii[digit] - '0') * base > '9' {\n                s = String(x.ascii[digit]\
    \ - '0') + s\n                digit++\n            } else {\n                s\
    \ += \"0\"\n                digit += 2\n            }\n        } else {\n    \
    \        break\n        }\n    }\n    if s == \"\" {\n        s = string(x.ascii[i])\n\
    \    }\n    return s", "    let radix = Int(\"\\(base)\").characters.count\n \
    \   return String((x / Int(base)).truncatingRemainder(dividingBy: radix))", '  return
    String(Int64(Double(x) * Double(base)))', "    let s = String(x)\n    let rem\
    \ = base.toRadixString(s.count)\n    return s + \"\\u{\" + rem + \"}\"", "   \
    \ let divisor = pow(base, UInt32(x.truncatingRemainder(dividingBy: UInt32(10))!))\n\
    \    let remainder = x.truncatingRemainder(dividingBy: UInt32(10))!\n    var result\
    \ = String(format: \"%0\\(Int(log10(dividingBy: divisor))).0\\(Int(divisor))\"\
    , remainder)\n    if let result = result, result.hasSuffix(\"0\") {\n        result\
    \ = String(result.suffix(2))\n    }\n    return String(repeating: \"0\", count:\
    \ Int(log10(dividingBy: divisor)) - Int(result.count)).joined() + result", '    return
    String(x)', "    var res = String()\n    switch base {\n    case 0: return \"\
    0\"\n    case 2: res = x.toString(2)\n    case 3: res = x.toString(3)\n    case\
    \ 4: res = x.toString(4)\n    case 5: res = x.toString(5)\n    case 6: res = x.toString(6)\n\
    \    case 7: res = x.toString(7)\n    case 8: res = x.toString(8)\n    case 9:\
    \ res = x.toString(9)\n    default:\n        switch base {\n        case 10: return\
    \ x.toString(10)\n        case 11: return x.toString(11)\n        case 12: return\
    \ x.toString(12)\n        case 13: return x.toString(13)\n        case 14: return\
    \ x.toString(14)\n        case 15: return x.toString(15)\n        case 16: return\
    \ x.toString(16)\n        case 17: return x.toString(17)\n        case 18: return\
    \ x.toString(18)\n        case 19: return x.toString(19)\n        case 20: return\
    \ x.toString(20)\n        case 21: return x.toString(21)\n        case 22: return\
    \ x.toString(22)\n        case 23: return x.toString(23)\n        case 24: return\
    \ x.toString(24)\n        case 25: return x.toString(25)\n        case 26: return\
    \ x.toString(26)\n        case 27: return x.toString(27)\n        case 28: return\
    \ x.toString(28)\n        case 29: return x.toString(29)\n        case 30: return\
    \ x.toString(30)\n        case 31: return x.toString(31)\n        case 32: return\
    \ x.toString(32)\n        case 33: return x.toString(33)\n        case 34: return\
    \ x.toString(34)\n        case 35: return x.toString(35)\n        case 36: return\
    \ x.toString(36)\n        case 37: return x.toString(37)\n        case 38: return\
    \ x.toString(38)\n        case 39: return x.toString(39)\n        case 40: return\
    \ x.toString(40)\n        case 41: return x.toString(41)\n        case 42: return\
    \ x.toString(42)\n        case 43: return x.toString(43)\n        case 44: return\
    \ x.toString(44)\n        case 45: return x.toString(45)\n        case 46: return\
    \ x.toString(46)\n        case 47: return x.toString(47)\n        case 48: return\
    \ x.toString(48)\n        case 49: return x.toString(49)\n        case 50: return\
    \ x.toString(50)\n        case 51: return x.toString(51)\n        case 52: return\
    \ x.toString(52)\n        case 53: return x.toString(53)\n        case 54: return\
    \ x.toString(54)\n        case 55: return x.toString(55)\n        case 56: return\
    \ x.toString(56)\n        case 57: return x.toString(57)\n        case 58: return\
    \ x.toString(58)\n        case 59: return x.toString(59)\n        case 60: return\
    \ x.toString(60)\n        case 61: return x.toString(61)\n        case 62: return\
    \ x.toString(62)\n        case 63: return x.toString(63)\n        case 64: return\
    \ x.toString(64)\n        case 65: return x.toString(65)", "    guard base < 10\
    \ && base > 0 else {\n        return \"\"\n    }\n\n    var baseString = String(base)\n\
    \    var xString = String(UInt64(x))\n\n    var result = \"\"\n\n    for char\
    \ in xString.characters {\n        let intChar = UInt64(char)\n        let digit\
    \ = Int(intChar)\n\n        if digit < baseString {\n            result += digit\n\
    \        }\n        else {\n            result += baseString\n        }\n    }\n\
    \n    return result", "    let radix = pow(10, base);\n    return String(Int(x)\
    \ / radix)", "    let baseString = String(base)\n    guard base > 0 else { return\
    \ \"\" }\n    let decimal = String(x)\n    guard decimal.characters.count == 2\
    \ else { return \"\" }\n    let power = decimal.characters.last!\n    let powerBase\
    \ = power.unicodeScalars\n    guard powerBase[powerBase.count - 1].value == baseString\
    \ else { return \"\" }\n    let powerString = power.unicodeScalars.compactMap\
    \ { Int($0) }\n    let powerString = powerString.map { String($0) }\n    let powerString\
    \ = String(powerString.joined(separator: \"\"))\n    guard decimal.characters.count\
    \ >= powerString.count else { return \"\" }\n    if decimal.characters[decimal.characters.count\
    \ - 1] != powerString {\n        return \"\"\n    }\n    return decimal.characters.dropLast()",
  "    var result = String()\n    if base < 10 {\n        switch base {\n        case\
    \ 2:\n            for c in \"0123456789ABCDEF\" {\n                let ix = Int(c)\
    \ - 48\n                let t = x / (Int64(1) << ix)\n                result +=\
    \ String(t % Int64(x))\n                x = t\n            }\n        case 8:\n\
    \            for c in \"0123456789ABCDEF\" {\n                let ix = Int(c)\
    \ - 48\n                let t = x / Int(Int64(1) << ix)\n                result\
    \ += String(t % Int64(x))\n                x = t\n            }\n        default:\n\
    \            for c in \"0123456789\" {\n                let ix = Int(c) - 48\n\
    \                let t = x / Int(Int64(1) << ix)\n                result += String(t\
    \ % Int64(x))\n                x = t\n            }\n        }\n    } else {\n\
    \        switch base {\n        case 10:\n            for c in \"0123456789\"\
    \ {\n                let ix = Int(c) - 48\n                let t = x / (Int64(1)\
    \ << ix)\n                result += String(t % Int64(x))\n                x =\
    \ t\n            }\n        case 16:\n            for c in \"0123456789\" {\n\
    \                let ix = Int(c) - 48\n                let t = x / Int(Int64(1)\
    \ << ix)\n                result += String(t % Int64(x))\n                x =\
    \ t\n            }\n        default:\n            for c in \"0123456789ABCDEF\"\
    \ {\n                let ix = Int(c) - 48\n                let t = x / Int(Int64(1)\
    \ << ix)\n                result += String(t % Int64(x))\n                x =\
    \ t\n            }\n        }\n    }\n    return result", "    if base == 0 {\
    \ return \"\" }\n    var result = \"\"\n    var power = 1\n    for digit in x.toString(base:\
    \ base).reverse() {\n        power += digit == \"1\"\n        if power > base\
    \ {\n            result += \".\"\n            power = 0\n        } else {\n  \
    \          result += digit\n        }\n    }\n    if power > 0 {\n        result\
    \ += \".\"\n    }\n    return String(result.reverse())", '    return String(x.toRadixString(base,
    10))', "    var b = base\n    var result = x.toString(b)\n    while result.length\
    \ < b {\n        result = (\"0\") + result\n    }\n    return result", "    let\
    \ number = String(x)\n    let newBase = String(base)\n    guard number.characters.count\
    \ >= newBase.characters.count else { return number }\n    var result = 0\n   \
    \ for i in newBase.characters {\n        result = result * Int64(i)! + Int64(number.characters[i])!\n\
    \    }\n    return String(result)", "    var b = 10\n    if base > 10 {\n    \
    \    return \"\"\n    }\n    if base < 2 {\n        b = 1\n    }\n    var s =\
    \ String(x)\n    if base == 2 {\n        if isdigit(x) {\n            if x < 0\
    \ {\n                if s.contains(\"-\") {\n                    s = s + \"0\"\
    \n                } else {\n                    s = s + \"0\"\n              \
    \  }\n            }\n            if s.contains(\".\") {\n                s = s\
    \ + \"0\"\n            }\n        }\n    } else {\n        if s.contains(\".\"\
    ) {\n            var t = \"\"\n            if s.contains(\"-\") {\n          \
    \      t = s + \"0\"\n                s = s + \"0\"\n            } else {\n  \
    \              t = s + \"0\"\n                s = s + \"0\"\n            }\n \
    \           for _ in 0..(x - t.count) {\n                s = t + \"0\"\n     \
    \       }\n        }\n    }\n    return s", "    if base < 0 || base > 10 {\n\
    \        return \"Bad base\"\n    }\n    if x != 0 && ((x % base) == 0) {\n  \
    \      return x\n    }\n    if x > base {\n        let tmp = x\n        x = base\n\
    \        base = tmp\n    }\n    \n    var result = \"\"\n    var remainder = x\
    \ / base\n    for _ in 1...base-10 {\n        result = String(remainder) + result\n\
    \        remainder = remainder % base\n    }\n    return result", '    return
    x.changeBaseTo(base)', "    let s = x.description\n    let converted = s.convertFromBase(base)\n\
    \    return converted.description", "\tvar digits = \"\"\n\tswitch base {\n\t\
    case 2:\n\t\tfor d := 0; d < int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10))\
    \ + digits\n\t\t\tx /= base\n\t\t}\n\t\tbreak\n\tcase 3:\n\t\tfor d := 0; d <\
    \ int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10)) + digits\n\t\t\tx\
    \ /= base\n\t\t}\n\t\tfor d := 0; d < int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10))\
    \ + digits\n\t\t\tx /= base\n\t\t}\n\t\tfor d := 0; d < int(x)/base; d++ {\n\t\
    \t\tdigits = String(Int(x/base%10)) + digits\n\t\t\tx /= base\n\t\t}\n\t\tbreak\n\
    \tcase 4:\n\t\tfor d := 0; d < int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10))\
    \ + digits\n\t\t\tx /= base\n\t\t}\n\t\tfor d := 0; d < int(x)/base; d++ {\n\t\
    \t\tdigits = String(Int(x/base%10)) + digits\n\t\t\tx /= base\n\t\t}\n\t\tfor\
    \ d := 0; d < int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10)) + digits\n\
    \t\t\tx /= base\n\t\t}\n\t\tfor d := 0; d < int(x)/base; d++ {\n\t\t\tdigits =\
    \ String(Int(x/base%10)) + digits\n\t\t\tx /= base\n\t\t}\n\t\tfor d := 0; d <\
    \ int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10)) + digits\n\t\t\tx\
    \ /= base\n\t\t}\n\t\tbreak\n\tcase 5:\n\t\tfor d := 0; d < int(x)/base; d++ {\n\
    \t\t\tdigits = String(Int(x/base%10)) + digits\n\t\t\tx /= base\n\t\t}\n\t\tfor\
    \ d := 0; d < int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10)) + digits\n\
    \t\t\tx /= base\n\t\t}\n\t\tfor d := 0; d < int(x)/base; d++ {\n\t\t\tdigits =\
    \ String(Int(x/base%10)) + digits\n\t\t\tx /= base\n\t\t}\n\t\tfor d := 0; d <\
    \ int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10)) + digits\n\t\t\tx\
    \ /= base\n\t\t}\n\t\tfor d := 0; d < int(x)/base; d++ {\n\t\t\tdigits = String(Int(x/base%10))\
    \ + digits\n\t\t\tx /= base\n\t\t}\n\t\t", "  let string = String(abs(x))\n  var\
    \ result: String = \"\"\n  for _ in string.characters.reverse() {\n    switch\
    \ base {\n    case 1:\n      if result != \"\" {\n        result += String(UnicodeScalar(UInt8(ascii:\
    \ \"0\"))!)\n      }\n      result += \"0\"\n    case 2:\n      if result != \"\
    \" {\n        result += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n      }\n\
    \      result += \"0\"\n    case 3:\n      if result != \"\" {\n        result\
    \ += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n      }\n      result += \"\
    0\"\n    case 4:\n      if result != \"\" {\n        result += String(UnicodeScalar(UInt8(ascii:\
    \ \"0\"))!)\n      }\n      result += \"0\"\n    case 5:\n      if result != \"\
    \" {\n        result += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n      }\n\
    \      result += \"0\"\n    case 6:\n      if result != \"\" {\n        result\
    \ += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n      }\n      result += \"\
    0\"\n    case 7:\n      if result != \"\" {\n        result += String(UnicodeScalar(UInt8(ascii:\
    \ \"0\"))!)\n      }\n      result += \"0\"\n    case 8:\n      if result != \"\
    \" {\n        result += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n      }\n\
    \      result += \"0\"\n    case 9:\n      if result != \"\" {\n        result\
    \ += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n      }\n      result += \"\
    0\"\n    case 10:\n      if result != \"\" {\n        result += String(UnicodeScalar(UInt8(ascii:\
    \ \"0\"))!)\n      }\n      result += \"0\"\n    case 11:\n      if result !=\
    \ \"\" {\n        result += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n    \
    \  }\n      result += \"0\"\n    case 12:\n      if result != \"\" {\n       \
    \ result += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n      }\n      result\
    \ += \"0\"\n    case 13:\n      if result != \"\" {\n        result += String(UnicodeScalar(UInt8(ascii:\
    \ \"0\"))!)\n      }\n      result += \"0\"\n    case 14:\n      if result !=\
    \ \"\" {\n        result += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n    \
    \  }\n      result += \"0\"\n    case 15:\n      if result != \"\" {\n       \
    \ result += String(UnicodeScalar(UInt8(ascii: \"0\"))!)\n      }\n      result\
    \ += \"0\"\n    default:\n      break\n    }\n  }\n  return result", "    if base\
    \ < 10 {\n        guard base >= 1 else {\n            return String(format: \"\
    %0\\(base)d\", x)\n        }\n    }\n    return String(format: \"%0\\(base)d\"\
    , x)", '    return x.to_string(base)', "    let baseToTwo: [Int: String] = [\"\
    1\": \"0\", \"2\": \"10\", \"3\": \"100\", \"4\": \"1000\", \"5\": \"10000\",\n\
    \                                  \"6\": \"100000\", \"7\": \"1000000\", \"8\"\
    : \"10000000\", \"9\": \"100000000\",\n                                  \"0\"\
    : \"1000000000\"]\n    let baseToTen: [Int: String] = [\"1\": \"0\", \"2\": \"\
    10\", \"3\": \"100\", \"4\": \"1000\",\n                                   \"\
    5\": \"10000\", \"6\": \"100000\", \"7\": \"1000000\", \"8\": \"10000000\",\n\
    \                                   \"9\": \"100000000\", \"0\": \"1000000000\"\
    ]\n    var result: String = \"\"\n    var number = 0\n    var isNegative: Bool\
    \ = false\n    if x < 0 {\n        number = -x\n        isNegative = true\n  \
    \  }\n    if number < 0 {\n        return \"0\"\n    }\n    if base <= 0 {\n \
    \       return \"0\"\n    }\n\n    // Convert from base to baseToTen\n    var\
    \ convertedString = \"\"\n    if base > 2 {\n        for i in 1...baseToTen.count\
    \ {\n            convertedString += String(i * baseToTwo[base][i])\n        }\n\
    \    } else {\n        for i in 1...baseToTwo.count {\n            convertedString\
    \ += String(i * baseToTwo[base][i])\n        }\n    }\n\n    if isNegative {\n\
    \        convertedString = \"-\" + convertedString\n    }\n\n    // Convert from\
    \ base to baseToTwo\n    if number != 0 {\n        if number < 0 {\n         \
    \   result = \"-\" + change_base(number, base: base)\n        } else {\n     \
    \       result = convertedString\n        }\n    }\n    return result", "    guard\
    \ x > 0 && base > 0 && base < 10 else {\n        return \"\"\n    }\n\n    let\
    \ digits = Double(x).truncatingRemainder(dividingBy: Double(base))\n\n    return\
    \ String(digits)", "    if x < base || base < 0 {\n        panic(\"Base out of\
    \ range\")\n    }\n\n    var b = base\n    var p = x\n    var digits = \"0123456789ABCDEF\"\
    \n    var r = \"0\"\n\n    for {\n        var i = (p / b) % 10\n        r += digits[i]\n\
    \        p = p % b\n        b *= base\n        if b >= 10 {\n            break\n\
    \        }\n    }\n\n    return String(r)", "    if base < 2 || base > 9 {\n \
    \       return \"\"\n    }\n    var result = \"\"\n    var digit = 0\n    while\
    \ x > 0 {\n        var remainder = x % base\n        x /= base\n        result\
    \ += String(digit) + String(remainder)\n        digit += 1\n    }\n    return\
    \ result", "    if x < base {\n        return String(x)\n    }\n    var num: Int\
    \ = 0\n    var numStr = \"\"\n    var i = base\n    var carry: Int = 0\n    repeat\
    \ {\n        if i > len(x) {\n            numStr = String(num) + String(carry)\n\
    \            break\n        }\n        carry = 0\n        if i < len(x) {\n  \
    \          num = Int(String(x[i])) - Int(String(x[i-base]))\n            i = i\
    \ + 1\n            carry = num / base\n            num = num % base\n        }\
    \ else {\n            num = Int(String(x[i])) - Int(String(x[i-base]))\n     \
    \       i = i + 1\n        }\n        numStr = String(num) + String(carry)\n \
    \   }\n    while i != len(x) {\n        numStr = String(num) + String(carry)\n\
    \        carry = 0\n        if i < len(x) {\n            num = Int(String(x[i]))\
    \ - Int(String(x[i-base]))\n            i = i + 1\n            carry = num / base\n\
    \            num = num % base\n        } else {\n            num = Int(String(x[i]))\
    \ - Int(String(x[i-base]))\n            i = i + 1\n        }\n    }\n    if numStr\
    \ == \"\" {\n        numStr = String(x)\n    }\n    return numStr", '    return
    x.toString(base, radix: base)', "    let s = String(repeating: \"0\", count: base*10).reversed()\n\
    \    return x.truncatingRemainder(dividingBy: base)\n        .map { String($0)\
    \ }\n        .joined(separator: s)", "    var bStr = \"\"\n    let _x = x % base\n\
    \    if _x < base {\n        bStr += String(x)\n    } else {\n        while _x\
    \ > base {\n            bStr += String(base % _x)\n            _x /= base\n  \
    \      }\n        bStr += String(_x)\n    }\n    return bStr", "    if base >\
    \ 36 {\n        fatalError(\"base cannot be greater than 36.\")\n    }\n\n   \
    \ let rep = base.toString(radix: base)\n\n    if rep != x.toString(radix: base)\
    \ {\n        fatalError(\"Value after conversion did not match.\")\n    }\n\n\
    \    return rep", "    var y = String(x)\n    let z = base < 2 ? 10 : base\n \
    \   for _ in 0..<z {\n        if let y = y.index(of: Character(\"0\")) {\n   \
    \         let xi = String(x)\n            let z = String(y.dropLast())\n     \
    \       let yi = String(x)\n            if let yzi = yi.index(of: Character(\"\
    0\")) { yzi.isEmpty ? yi.remove(at: yzi) : yi.remove(at: yzi) }\n            yi\
    \ = yi + z\n            if let yzi = yi.index(of: Character(\"0\")) { yzi.isEmpty\
    \ ? yi.remove(at: yzi) : yi.remove(at: yzi) }\n            yi = yi + yi\n    \
    \        if let yzi = yi.index(of: Character(\"0\")) { yzi.isEmpty ? yi.remove(at:\
    \ yzi) : yi.remove(at: yzi) }\n            yi = yi + yi\n            if let yzi\
    \ = yi.index(of: Character(\"0\")) { yzi.isEmpty ? yi.remove(at: yzi) : yi.remove(at:\
    \ yzi) }\n            yi = yi + yi\n            if let yzi = yi.index(of: Character(\"\
    0\")) { yzi.isEmpty ? yi.remove(at: yzi) : yi.remove(at: yzi) }\n            yi\
    \ = yi + yi\n            if let yzi = yi.index(of: Character(\"0\")) { yzi.isEmpty\
    \ ? yi.remove(at: yzi) : yi.remove(at: yzi) }\n            yi = yi + yi\n    \
    \        if let yzi = yi.index(of: Character(\"0\")) { yzi.isEmpty ? yi.remove(at:\
    \ yzi) : yi.remove(at: yzi) }\n            yi = yi + yi\n            if let yzi\
    \ = yi.index(of: Character(\"0\")) { yzi.isEmpty ? yi.remove(at: yzi) : yi.remove(at:\
    \ yzi) }\n            yi = yi + yi\n            if let yzi = yi.index(of: Character(\"\
    0\")) { yzi.isEmpty ? yi.remove(at: yzi) : yi.remove(at: yzi) }\n            yi\
    \ = yi + yi\n            if let yzi = yi.index(of: Character(\"0\")) { yzi.isEmpty\
    \ ? yi.remove(at: yzi) : yi.remove(at: yzi) }\n            yi = yi + yi\n    \
    \        if let yzi = yi.index(of: Character(\"0\")) { yzi.is", "    var s = \"\
    \"\n    var temp = 0\n    var result = 0\n\n    var carry = 0\n\n    for i = x.count\
    \ - 1 ; i >= 0 ; i-- {\n        temp = Int64(x.charactersAtIndex(i).uint64Value)\
    \ * pow(Int64(base), Int64(i+1))\n        result = temp + Int64(carry)\n     \
    \   carry = result / Int64(base)\n        temp = result - Int64(carry) * Int64(base)\n\
    \n        if temp > Int64(base) {\n            carry = 1\n            temp -=\
    \ Int64(base)\n        }\n\n        s = String(UnicodeScalar(UInt8(UInt32(temp.uint64Value))\
    \ + UInt32(UInt32(carry))).value)\n    }\n\n    if carry != 0 {\n        s = String(UnicodeScalar(UInt8(UInt32(temp.uint64Value))\
    \ + UInt32(UInt32(carry))).value)\n    }\n\n    return s", "    if base < 2 {\n\
    \        // If base is less than 2 then base 2 will be used\n        base = base\
    \ * 2\n    }\n    switch base {\n    case 10:\n        return x.toString()\n \
    \   case 2:\n        return x.toString() + changeBase2(Int32(x.toInt()%10)%10)\n\
    \    case 3:\n        return x.toString() + changeBase3(Int32(x.toInt()%10)%10)\n\
    \    case 4:\n        return x.toString() + changeBase4(Int32(x.toInt()%10)%10)\n\
    \    case 5:\n        return x.toString() + changeBase5(Int32(x.toInt()%10)%10)\n\
    \    case 6:\n        return x.toString() + changeBase6(Int32(x.toInt()%10)%10)\n\
    \    case 7:\n        return x.toString() + changeBase7(Int32(x.toInt()%10)%10)\n\
    \    case 8:\n        return x.toString() + changeBase8(Int32(x.toInt()%10)%10)\n\
    \    case 9:\n        return x.toString() + changeBase9(Int32(x.toInt()%10)%10)\n\
    \    default:\n        return x.toString() + changeBase10(Int32(x.toInt()%10)%10)\n\
    \    }", "    switch base {\n    case 10:\n        let char = \"A\"\n    case\
    \ 11:\n        let char = \"B\"\n    case 12:\n        let char = \"C\"\n    case\
    \ 13:\n        let char = \"D\"\n    case 14:\n        let char = \"E\"\n    case\
    \ 15:\n        let char = \"F\"\n    case 16:\n        let char = \"G\"\n    case\
    \ 17:\n        let char = \"H\"\n    case 18:\n        let char = \"I\"\n    case\
    \ 19:\n        let char = \"J\"\n    case 20:\n        let char = \"K\"\n    case\
    \ 21:\n        let char = \"L\"\n    case 22:\n        let char = \"M\"\n    case\
    \ 23:\n        let char = \"N\"\n    case 24:\n        let char = \"O\"\n    case\
    \ 25:\n        let char = \"P\"\n    case 26:\n        let char = \"Q\"\n    case\
    \ 27:\n        let char = \"R\"\n    case 28:\n        let char = \"S\"\n    case\
    \ 29:\n        let char = \"T\"\n    case 30:\n        let char = \"U\"\n    case\
    \ 31:\n        let char = \"V\"\n    case 32:\n        let char = \"W\"\n    case\
    \ 33:\n        let char = \"X\"\n    case 34:\n        let char = \"Y\"\n    case\
    \ 35:\n        let char = \"Z\"\n    case 36:\n        let char = \"0\"\n    case\
    \ 37:\n        let char = \"1\"\n    case 38:\n        let char = \"2\"\n    case\
    \ 39:\n        let char = \"3\"\n    case 40:\n        let char = \"4\"\n    case\
    \ 41:\n        let char = \"5\"\n    case 42:\n        let char = \"6\"\n    case\
    \ 43:\n        let char = \"7\"\n    case 44:\n        let char = \"8\"\n    case\
    \ 45:\n        let char = \"9\"\n    case 50:\n        let char = \"@\"\n    case\
    \ 51:\n        let char = \"[\"\n    case 52:\n        let char = \"]\"\n    case\
    \ 53:\n        let char = \"^\"\n    case 54:\n        let char = \"_\"\n    case\
    \ 55:\n        let char = \"`\"\n    case 56:\n        let char = \"{|\"\n   \
    \ case 57:\n        let char = \"|}\"\n    case 58:\n        let char = \"}\"\n\
    \    case 59:\n        let char = \"~\"\n    case 60:\n        let char = \"'\"\
    \n    case 61:\n        let char = \"{(\"\n    case 62:\n        let char = \"\
    (}\"\n    case 63:\n        let char = \"}\"\n    case 64:\n        let char =\
    \ \"<\"\n    case 65:\n        let char = \"<}\"\n    case 66:\n        let char\
    \ = \"{\"\n    case 67:\n        let char", "    var string = x.toString()\n \
    \   if base < 10 {\n        return string\n    }\n    return change_base2(string,\
    \ base)", "    var base = String()\n    base = String(base + base)\n    var res\
    \ = \"\"\n    for index in 0..<x.toInt().toInt() {\n        var res = x.toInt().toInt()\
    \ - x.toInt().toInt() / Int64(base.characters.count) - 1\n        res /= Int64(base.characters.count)\
    \ - 1\n        res *= base\n        res += String(UnicodeScalar(index))\n    }\n\
    \    return res", "    let str = String(base: base, radix: base)\n    let value\
    \ = Double(str) / Double(base)\n    return String(value)", "    let result = x.toString(radix:\
    \ base, uppercase: false)\n    let len = result.length\n    if len == 0 {\n  \
    \      return \"0\"\n    }\n    if result.characters.count == 1 {\n        return\
    \ String(result) + String(len)\n    }\n    if base <= 1 || base > Int.max {\n\
    \        return \"0\"\n    }\n    if result.characters.count % 2 == 1 {\n    \
    \    return result.characters.prefix(Int(len) / 2) + result.characters.suffix(Int(len)\
    \ % 2)\n    }\n    if result.characters.count % 2 == 0 && len != 0 {\n       \
    \ let lastChar = result.characters.last\n        let middleIndex = result.index(before:\
    \ lastChar)\n        return String(result.substring(from: middleIndex..<len))\
    \ + String(len)\n    }\n    return result + String(len)", "    let b = Int(pow(base,\
    \ Int(ceil(log(x, base))), UInt32(base)))\n    let s = x.toString(Int)\n    guard\
    \ s.characters.count > base else { return s }\n    let a = s.characters\n    var\
    \ i = 0\n    var n = 0\n    var nChars = a.count\n    while i < nChars {\n   \
    \     if nChars > base {\n            nChars = base\n        }\n        let m\
    \ = i % base\n        let c = (Int(a[i]) - m) % base\n        nChars = nChars\
    \ - 1\n        nChars = (nChars > 0) ? nChars : 0\n        guard nChars > 0 else\
    \ { continue }\n        s[i] = String(c)\n        i += 1\n    }\n    return String(s.characters.prefix(base))",
  "    if x < base {\n        return String(Int(x)/base)\n    }\n    if base < 2 {\n\
    \        return String(Int(x)/base)\n    }\n    if base < 10 {\n        return\
    \ String(Int(x)/base)\n    }\n    if base < 36 {\n        return String(x)\n \
    \   }\n    return String(x % base)", "    var result = \"\"\n    if base == 0\
    \ {\n        return String(Int(x))\n    } else {\n        for number in String(Int(x)).characters\
    \ {\n            var power = Int(base) - 1\n            while power >= 2 {\n \
    \               power /= base\n            }\n            var result = number\
    \ + String(power)\n            if Int(result) > base {\n                result\
    \ += \"0\"\n            }\n            if number == \"0\" {\n                result\
    \ += String(Int(base))\n            }\n            result = result.reversed()\n\
    \            if number == \"0\" {\n                result += String(base)\n  \
    \          }\n            result = result.reversed()\n        }\n        result\
    \ = result.reversed()\n        return result\n    }", "    if base == 0 {\n  \
    \      return x.toString()\n    }\n\n    var result = \"\"\n    var exponent:\
    \ Int = 0\n    var baseExp: Int = 0\n    var digit: Int = 0\n    var carryOver:\
    \ Int = 0\n\n    for digit in x.toString() {\n        var newDigit: Int\n\n  \
    \      if digit < \"0\" || digit > \"9\" {\n            newDigit = 0\n       \
    \ } else {\n            baseExp = exponent % base\n            newDigit = (baseExp\
    \ < base) ? \"0\" : digit.substring(1)\n            exponent = exponent / base\n\
    \        }\n\n        if exponent > 0 {\n            carryOver = digit - newDigit\
    \ + Int(\"0\".toInt())\n        } else {\n            carryOver = digit - newDigit\n\
    \        }\n\n        result += String(carryOver)\n    }\n\n    while exponent\
    \ != 0 {\n        if exponent % base == 0 {\n            result += \"0\"\n   \
    \     } else {\n            result += \"1\"\n        }\n\n        exponent = exponent\
    \ / base\n    }\n\n    return result", "    let baseStr = \"\" + String(base)\n\
    \    var result = \"\"\n    if x >= base {\n        if x%base == 0 {\n       \
    \     result = String(Int(x / base)) + baseStr\n        } else {\n           \
    \ var numOfDigits = String(x).characters.count\n            if numOfDigits ==\
    \ 0 {\n                result = \"1\"\n            } else if numOfDigits <= base\
    \ {\n                result = (String(Int(x / base))).substring(from: 0)\n   \
    \         } else {\n                var resultStr = \"\"\n                let\
    \ remainder = x % base\n                for _ in 0..<(numOfDigits - 1) {\n   \
    \                 resultStr += \"0\"\n                }\n                resultStr\
    \ += \"\\(Int(remainder)) + \\(baseStr)\"\n                result = resultStr\n\
    \            }\n        }\n    } else {\n        result = String(Int(x / base))\
    \ + baseStr\n    }\n    return result", "\tvar res = \"\"\n\tswitch base {\n\t\
    case 1:\n\t\tres = String(x)\n\tcase 10:\n\t\tres = String(Int(x)/10) + String(Int(x)%10)\n\
    \tcase 16:\n\t\tlet tmp = Int(x)\n\t\tres = String(tmp / 0x10) + String(tmp %\
    \ 0x10)\n\tcase 2:\n\t\tres = String(Int(x) / 0x10)\n\tcase 8:\n\t\tres = String(Int(x)/0x10)\n\
    \tdefault:\n\t\tlet tmp = Int(x)\n\t\tres = String(tmp / 0x100) + String(tmp %\
    \ 0x100)\n\t}\n\treturn res", "\tvar result = \"\"\n\tvar digits = String(x)\n\
    \tlet length = digits.length\n\tvar remainder = digits\n\tfor i in 0..<length\
    \ {\n\t\tlet number = Int(remainder.characters.count * Double(base) + Double(i))\n\
    \t\tlet digit = Int(number).description\n\t\tif digit > 9 {\n\t\t\tresult += String(digit)\n\
    \t\t\tremainder = String(number - Double(Int(digit)))\n\t\t} else {\n\t\t\tresult\
    \ += digit\n\t\t}\n\t}\n\twhile result.characters.count < base.characters.count\
    \ {\n\t\tresult += \" \"\n\t}\n\treturn result", "    if base > 2 || base < 2\
    \ {\n        let digits = String(format: \"%d\", x)\n        if base > 2 {\n \
    \           return digits[0..<(digits.count - 1)].bridge().prefix(digits.count\
    \ - 1).bridge().prefix(base.bridge()).bridge().bridge()\n        }\n        if\
    \ base < 2 {\n            return digits[0..<(digits.count - 1)].bridge().prefix(digits.count\
    \ - 1).bridge().prefix(base.bridge()).bridge()\n        }\n    }\n    \n    var\
    \ outVal = \"\"\n    var power = 1\n    while power < base {\n        power =\
    \ power + 1\n        outVal = String(format: \"%0*d\", digits(power) + 1, x).bridge()\
    \ + outVal\n    }\n    return outVal", "    let divisor = pow(base, x.toInt())\n\
    \    let x = x.toInt()\n    var r = String()\n    if divisor > 1000000000 {\n\
    \        r = String(Int((x / divisor).truncatingRemainder(dividingBy: 1000000000)))\
    \ + String(divisor - Int((x / divisor).truncatingRemainder(dividingBy: 1000000000)))\n\
    \    } else {\n        r = String(Int(x / divisor)) + String(divisor)\n    }\n\
    \    return r.trimmingCharacters(in: .whitespacesAndNewlines)", "    let mut tmp\
    \ = x\n    let mut res = \"\"\n    while tmp > 0 {\n        tmp = tmp % base\n\
    \        if tmp > 0 {\n            res = String(tmp) + res\n        } else {\n\
    \            res = String(tmp) + res[..1]\n        }\n    }\n    return res",
  "    switch base {\n    case 2:\n        return String(format: \"%0*d\", x, x)\n\
    \    case 8:\n        return String(format: \"%0*d\", x, x)\n    case 10:\n  \
    \      return String(format: \"%0*d\", x, x)\n    case 16:\n        return String(format:\
    \ \"%0*d\", x, x)\n    case 20:\n        return String(format: \"%0*d\", x, x)\n\
    \    case 32:\n        return String(format: \"%0*d\", x, x)\n    case 64:\n \
    \       return String(format: \"%0*d\", x, x)\n    case 128:\n        return String(format:\
    \ \"%0*d\", x, x)\n    case 256:\n        return String(format: \"%0*d\", x, x)\n\
    \    case 512:\n        return String(format: \"%0*d\", x, x)\n    case 1024:\n\
    \        return String(format: \"%0*d\", x, x)\n    case 2048:\n        return\
    \ String(format: \"%0*d\", x, x)\n    case 4096:\n        return String(format:\
    \ \"%0*d\", x, x)\n    case 8192:\n        return String(format: \"%0*d\", x,\
    \ x)\n    case 16384:\n        return String(format: \"%0*d\", x, x)\n    case\
    \ 32768:\n        return String(format: \"%0*d\", x, x)\n    case 65536:\n   \
    \     return String(format: \"%0*d\", x, x)\n    case 131072:\n        return\
    \ String(format: \"%0*d\", x, x)\n    case 262144:\n        return String(format:\
    \ \"%0*d\", x, x)\n    case 524288:\n        return String(format: \"%0*d\", x,\
    \ x)\n    case 1048576:\n        return String(format: \"%0*d\", x, x)\n    case\
    \ 2097152:\n        return String(format: \"%0*d\", x, x)\n    case 4194304:\n\
    \        return String(format: \"%0*d\", x, x)\n    case 8388608:\n        return\
    \ String(format: \"%0*d\", x, x)\n    case 16777216:\n        return String(format:\
    \ \"%0*d\", x, x)\n    case 33554432:\n        return String(format: \"%0*d\"\
    , x, x)\n    case 67108864:\n        return String(format: \"%0*d\", x, x)\n \
    \   case 134217728:\n        return String(format: \"%0*d\", x, x)\n    case 268435456:\n\
    \        return String(format: \"%0*d\", x, x)\n    case 536870912:\n        return\
    \ String(format: \"%0*d\", x, x)\n    case 1073741824:\n        return String(format:\
    \ \"%0*d\", x, x)\n    case 2147483648:\n        return String(format: \"%0*d\"\
    , x, ", "    if x > base {\n        throw Errors.InvalidInputError\n    }\n  \
    \  let digits = String(x%base)\n    let digits_length = digits.length\n    if\
    \ digits_length == 1 {\n        return digits\n    }\n    let digits_length =\
    \ digits.length\n    let remain = base%digits_length\n    return String(digits)\
    \ + change_base(x/base, base: remain)", "    let mut res = String::new();\n  \
    \  res.clear();\n\n    while x > 0 {\n        let d = x % base;\n        if d\
    \ > 0 {\n            res = &mut res + &Unicode::fromDigit(d).to_string();\n  \
    \      }\n        x /= base;\n    }\n    if res != \"\" {\n        res += Unicode::fromDigit(base).to_string();\n\
    \    }\n    res", "    // let (base,x) = convertBase(x,base)\n    // if x > (base-1)\
    \ || x < 0 { return \"error\" }\n    // return digits_as_string(x, base)\n   \
    \ let bases = [Int](repeating: base-1, count: 20)\n    guard let newBase = bases[base-1]\
    \ else { return \"error\" }\n    return digits_as_string(x, newBase).characters.reduce(\"\
    \") { $0 + $1 }", "    var stringNum = String(x: x, base: base)\n    var result\
    \ = 0\n    for char in stringNum {\n        result = result * base + char.UIntValue()\n\
    \    }\n    let result = Int(result)\n    return String(result)", "    var str\
    \ = \"\"\n    var power = 1\n    var digit = 0\n    while x >= base {\n      \
    \  digit *= base\n        digit += x % base\n        x /= base\n    }\n    while\
    \ x > 0 {\n        digit *= base\n        digit += x % base\n        x /= base\n\
    \    }\n    str = String(digit)\n    while power < base {\n        power *= base\n\
    \    }\n    return String(power) + str", "    var result = String()\n    \n  \
    \  var baseStr = \"\"\n    \n    if base < 2 {\n        return \"Base must be\
    \ greater than 0\"\n    }\n    \n    if base < 10 {\n        baseStr = \"0\"\n\
    \    }\n    \n    if base > 2 {\n        baseStr = \"1\"\n    }\n    \n    if\
    \ base == 10 {\n        if x < 100 {\n            result = format(x: x, base:\
    \ base)\n        } else {\n            result = \"0\"\n        }\n    } else if\
    \ x < 100 {\n        var y = x % base\n        \n        if y > 0 {\n        \
    \    result += format(x: y, base: base)\n        }\n        \n        x += y\n\
    \    }\n    \n    while x != 0 {\n        \n        var y = x % base\n       \
    \ \n        if y > 0 {\n            result += baseStr + format(x: y, base: base)\n\
    \        }\n        \n        x += y\n    }\n    \n    return result", "    if\
    \ base > 10 {\n        guard let y = abs(x).toInt() else {\n            return\
    \ \"\"\n        }\n        return String(x) + change_base(y: y, base: base)\n\
    \    } else {\n        var s = String(x)\n        var power = base\n        while\
    \ power > 1 {\n            s = \"0\" + s\n            power -= 1\n        }\n\
    \        if power == 1 {\n            s = \"0\" + s\n        }\n        if power\
    \ == 0 {\n            return s\n        }\n        var last = \"\"\n        var\
    \ remainder = abs(x) % base\n        while remainder > 0 {\n            last =\
    \ String((remainder % base) + last)\n            remainder = remainder / base\n\
    \        }\n        if base > 0 && last.isEmpty, x != 0 {\n            last =\
    \ String(x)\n        }\n        return last + s\n    }", "    let s = String(x)\n\
    \    let newBase = base\n    let newString = s.reversed().map { Int(\"\\($0)\"\
    , radix: newBase) }.reversed()\n    return String(newString)", "    if base <\
    \ 10 {\n        switch base {\n        case 2:\n            return String(Int(x)\
    \ / 2)\n        case 3:\n            return String(Int(x) / 3)\n        case 4:\n\
    \            return String(Int(x) / 4)\n        case 5:\n            return String(Int(x)\
    \ / 5) \n        case 6:\n            return String(Int(x) / 6)\n        case\
    \ 7:\n            return String(Int(x) / 7)\n        case 8:\n            return\
    \ String(Int(x) / 8)\n        case 9:\n            return String(Int(x) / 9)\n\
    \        case 10:\n            return String(Int(x) / 10)\n        default:\n\
    \            return String(x)\n        }\n    } else {\n        return String(x)\n\
    \    }", "    let base = pow(base, Int(log10(abs(x))))\n    let result = String(x)\n\
    \    let numbers = split(result, \".\")\n    let digitsNum = numbers[0].characters.count\n\
    \    let lastNum = numbers[1].characters.count\n    let isBaseTwo = digitsNum\
    \ != 1 && lastNum == 0\n    let isBaseTen = digitsNum == 1 && lastNum != 0\n \
    \   if base == 10 {\n        if isBaseTwo {\n            result = \"0\" + result\n\
    \        }\n        if isBaseTen {\n            if result == \"\" {\n        \
    \        result = \"0\"\n            } else {\n                let lastChar =\
    \ result.characters.last ?? \"\"\n                if lastChar == \"0\" {\n   \
    \                 result = result.substringToIndex(advance(resultStartIndex: result.startIndex,\
    \ -2)) + \"0\"\n                } else {\n                    result = \"0\" +\
    \ result\n                }\n            }\n        }\n    } else if base == 2\
    \ {\n        if isBaseTen {\n            result = \"0\" + result\n        } else\
    \ {\n            let lastChar = result.characters.last ?? \"\"\n            if\
    \ lastChar == \"0\" {\n                result = result.substringToIndex(advance(resultStartIndex:\
    \ result.startIndex, -2)) + \"0\"\n            } else {\n                result\
    \ = \"0\" + result\n            }\n        }\n    }\n    return result", '    return
    x.toString(base: base)', "    let digits = x.toString().characters\n    let result:\
    \ String = \"\"\n    \n    for i in 0..<digits {\n        let pow = Int(pow(Double(base),\
    \ Double(i)))\n        let digit = digits[i]\n        let powDigit = Int(pow(Double(digit),\
    \ Double(pow)))\n        result += String(digit)\n    }\n    \n    return result",
  "    if base < 0 {\n        base = Int(-base) - 1\n    }\n    let base10 = Int((base\
    \ * 10))\n    let base2 = Int((base * 2))\n    let base3 = Int((base * 3))\n \
    \   let base7 = Int((base * 7))\n    let base8 = Int((base * 8))\n    var digits:\
    \ String = \"\"\n    \n    // base 2\n    if base == 2 {\n        let chars =\
    \ \"0123456789ABCDEF\"\n        let charIndices = [chars.index(of: \"0\") - 1]\n\
    \        \n        for value in x {\n            let stringIndex = Int((value\
    \ - charIndices[0]))\n            \n            if stringIndex < 0 {\n       \
    \         digits.append(String(stringIndex))\n            } else {\n         \
    \       digits.append(String(chars[stringIndex]))\n            }\n        }\n\
    \        \n        if digits[0] == \"0\" {\n            digits.reverse()\n   \
    \     }\n        \n        return digits\n        \n    } else if base == 3 {\n\
    \        let chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        let charIndices\
    \ = [chars.index(of: \"0\") - 1, chars.index(of: \"1\") - 1]\n        \n     \
    \   for value in x {\n            let stringIndex = Int((value - charIndices[0]))\n\
    \            let stringIndex2 = Int((value - charIndices[1]))\n            \n\
    \            if stringIndex < 0 {\n                digits.append(String(stringIndex))\n\
    \            } else {\n                digits.append(String(chars[stringIndex]))\n\
    \            }\n            \n            if stringIndex2 < 0 {\n            \
    \    digits.append(String(stringIndex2))\n            } else {\n             \
    \   digits.append(String(chars[stringIndex2]))\n            }\n        }\n   \
    \     \n        if digits[0] == \"0\" {\n            digits.reverse()\n      \
    \  }\n        \n        if digits[digits.count - 1] == \"0\" {\n            digits.reverse()\n\
    \        }\n        \n        return digits\n        \n    } else if base == 7\
    \ {\n        let chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        let\
    \ charIndices = [chars.index(of: \"0\") - 1, chars.index(of: \"1\") - 1, chars.index(of:\
    \ \"2\") - 1]\n        \n        for value in x {\n            let stringIndex\
    \ = Int((value - charIndices[0]))\n            let stringIndex2 = Int((value -\
    \ charIndices[1]))\n            let stringIndex3 = Int((value - charIndices[2]))\n\
    \            \n            if stringIndex < 0 {\n                digits.append(String(stringIndex))\n\
    \            } else {\n                digits.append(String(chars[stringIndex]))\n\
    \            }\n            \n            if stringIndex2 < 0 {\n            \
    \    digits.append(String(stringIndex2))\n            } else {\n             \
    \   digits.append(String(chars[stringIndex2]))\n            }\n            \n\
    \            if stringIndex3 < 0 {\n                digit", "    let bases = (0..<base).map\
    \ { _ in String(x) }\n    let s = bases.reduce(\"\") { $0 + $1 + $2 }\n    return\
    \ String(s)", "    var result = \"\"\n    for digit := 0; digit < base; digit++\
    \ {\n        var remain = x / base\n        result += String(remain % base)\n\
    \        x = remain\n    }\n    return result + String(x)", "    let divisor =\
    \ Int((Double(base)).toInt())\n    var str = String(x)\n    if base < 10 {\n \
    \       // Change all numbers in string x to new base.\n        let strArray =\
    \ str.characters\n        let newBase = Int((Double(base)).toInt())\n        for\
    \ _ in 0 ..< strArray.count {\n            let n = Int((Double(Double(strArray[strArray.count\
    \ - 1]) - Double(divisor / 2)).toInt())) * newBase\n            strArray[strArray.count\
    \ - 1] = String(newBase + n)\n        }\n        str = \"\"\n        for i in\
    \ 0 ..< strArray.count {\n            str += strArray[i]\n        }\n    }\n \
    \   return str", "    let baseDigits = base.pow(Double(x).toInt())\n    return\
    \ String((x * baseDigits).toInt())", "    if base == 0 {\n        return String(x)\n\
    \    }\n    \n    switch base {\n    case 2:\n        if x == 0 {\n          \
    \  return \"0\"\n        }\n        return strconv.Itoa(x/2)\n    case 3:\n  \
    \      if x == 0 {\n            return \"0\"\n        }\n        return strconv.Itoa(x/3)\n\
    \    case 4:\n        if x == 0 {\n            return \"0\"\n        }\n     \
    \   return strconv.Itoa(x/4)\n    case 5:\n        if x == 0 {\n            return\
    \ \"0\"\n        }\n        return strconv.Itoa(x/5)\n    case 6:\n        if\
    \ x == 0 {\n            return \"0\"\n        }\n        return strconv.Itoa(x/6)\n\
    \    case 7:\n        if x == 0 {\n            return \"0\"\n        }\n     \
    \   return strconv.Itoa(x/7)\n    case 8:\n        if x == 0 {\n            return\
    \ \"0\"\n        }\n        return strconv.Itoa(x/8)\n    case 9:\n        if\
    \ x == 0 {\n            return \"0\"\n        }\n        return strconv.Itoa(x/9)\n\
    \    case 10:\n        if x == 0 {\n            return \"0\"\n        }\n    \
    \    return strconv.Itoa(x/10)\n    case 11:\n        if x == 0 {\n          \
    \  return \"0\"\n        }\n        return strconv.Itoa(x/11)\n    case 12:\n\
    \        if x == 0 {\n            return \"0\"\n        }\n        return strconv.Itoa(x/12)\n\
    \    case 13:\n        if x == 0 {\n            return \"0\"\n        }\n    \
    \    return strconv.Itoa(x/13)\n    case 14:\n        if x == 0 {\n          \
    \  return \"0\"\n        }\n        return strconv.Itoa(x/14)\n    case 15:\n\
    \        if x == 0 {\n            return \"0\"\n        }\n        return strconv.Itoa(x/15)\n\
    \    case 16:\n        if x == 0 {\n            return \"0\"\n        }\n    \
    \    return strconv.Itoa(x/16)\n    case 17:\n        if x == 0 {\n          \
    \  return \"0\"\n        }\n        return strconv.Itoa(x/17)\n    case 18:\n\
    \        if x == 0 {\n            return \"0\"\n        }\n        return strconv.Itoa(x/18)\n\
    \    case 19:\n        if x == 0 {\n            return \"0\"\n        }\n    \
    \    return strconv.Itoa(x/19)\n    case 20:\n        if x == 0 {\n          \
    \  return \"0\"\n        }\n        return strconv.Itoa(x/20)\n    case 21:\n\
    \        if x == 0 {\n            return \"0\"\n        }\n        return strconv.Itoa(x/21)\n\
    \    case 22:\n        if x == 0 {\n            return \"0\"\n        }\n    \
    \    return strconv.Itoa(x/22)\n    case 23:\n        if x == 0 {\n          \
    \  return \"0\"\n        }\n        return strconv.Itoa(x/23)\n    case 24:\n\
    \        if x == 0 {\n", "    let x_str = String(x)\n    let x_int = Int(x_str)\n\
    \    let x_base = Int(base)\n    let x_base_big = x_base * x_base\n    let x_base_small\
    \ = x_base * x_base_big\n    let x_base_small_str = String(x_base_small)\n   \
    \ if x_int >= x_base_small {\n        let x0 = x_int / x_base_small\n        let\
    \ x1 = x_int - x0 * x_base_small\n        let x2 = x1 / x_base\n        let x3\
    \ = x2 - x0 * x_base\n        let x4 = x3 - x0 * x_base_big\n        let x5 =\
    \ x4 - x0 * x_base_small\n        let x6 = x5 - x0 * x_base_small\n        let\
    \ x7 = x6 - x0 * x_base_small\n        return String(format: \"%0\\(base)\\\"\"\
    , x0)\n    } else if x_int >= x_base_big {\n        let x0 = x_int / x_base_big\n\
    \        let x1 = x_int - x0 * x_base_big\n        let x2 = x1 / x_base\n    \
    \    let x3 = x2 - x0 * x_base\n        let x4 = x3 - x0 * x_base_small\n    \
    \    let x5 = x4 - x0 * x_base_small\n        let x6 = x5 - x0 * x_base_small\n\
    \        let x7 = x6 - x0 * x_base_small\n        return String(format: \"%0\\\
    (base)\\\"\", x0)\n    } else {\n        let x0 = x_int / x_base\n        let\
    \ x1 = x_int - x0 * x_base\n        let x2 = x1 / x_base\n        let x3 = x2\
    \ - x0 * x_base\n        let x4 = x3 - x0 * x_base_big\n        let x5 = x4 -\
    \ x0 * x_base_small\n        let x6 = x5 - x0 * x_base_small\n        let x7 =\
    \ x6 - x0 * x_base_small\n        return String(format: \"%0\\(base)\\\"\", x0)\n\
    \    }", "    var res = String()\n    if x%base == 0 {\n        res = String(repeatElement(\"\
    \ \", base))\n    }\n    res.appendContentsOf($0, with: String(base))\n    return\
    \ res", '    return x.toString(radix: base) //String', "    // return format(x,\
    \ base)\n    return x.toString(base, radix: 10)", "  if base < 10 {\n    return\
    \ String(base + x)\n  }\n  var result: Int = 0\n  for i in 0..<base {\n    result\
    \ *= base\n    result += x\n  }\n  return String(result)", "    switch base {\n\
    \    case 2:\n        if x == 0 {\n            return \"0\"\n        }\n     \
    \   return String(x)\n    case 3:\n        if x == 0 {\n            return \"\
    00\"\n        }\n        return String(x)\n    case 4:\n        if x == 0 {\n\
    \            return \"0000\"\n        }\n        return String(x)\n    case 5:\n\
    \        if x == 0 {\n            return \"00000\"\n        }\n        return\
    \ String(x)\n    case 6:\n        if x == 0 {\n            return \"000000\"\n\
    \        }\n        return String(x)\n    case 7:\n        if x == 0 {\n     \
    \       return \"0000000\"\n        }\n        return String(x)\n    case 8:\n\
    \        if x == 0 {\n            return \"00000000\"\n        }\n        return\
    \ String(x)\n    case 9:\n        if x == 0 {\n            return \"000000000\"\
    \n        }\n        return String(x)\n    case 10:\n        if x == 0 {\n   \
    \         return \"0000000000\"\n        }\n        return String(x)\n    case\
    \ 11:\n        if x == 0 {\n            return \"00000000000\"\n        }\n  \
    \      return String(x)\n    case 12:\n        if x == 0 {\n            return\
    \ \"000000000000\"\n        }\n        return String(x)\n    case 13:\n      \
    \  if x == 0 {\n            return \"0000000000000\"\n        }\n        return\
    \ String(x)\n    case 14:\n        if x == 0 {\n            return \"00000000000000\"\
    \n        }\n        return String(x)\n    case 15:\n        if x == 0 {\n   \
    \         return \"000000000000000\"\n        }\n        return String(x)\n  \
    \  case 16:\n        if x == 0 {\n            return \"0000000000000000\"\n  \
    \      }\n        return String(x)\n    case 17:\n        if x == 0 {\n      \
    \      return \"00000000000000000\"\n        }\n        return String(x)\n   \
    \ case 18:\n        if x == 0 {\n            return \"000000000000000000\"\n \
    \       }\n        return String(x)\n    case 19:\n        if x == 0 {\n     \
    \       return \"0000000000000000000\"\n        }\n        return String(x)\n\
    \    case 20:\n        if x == 0 {\n            return \"00000000000000000000\"\
    \n        }\n        return String(x)\n    case 21:\n        if x == 0 {\n   \
    \         return \"000000000000000000000\"\n        }\n        return String(x)\n\
    \    case 22:\n        if x == 0 {\n            return \"0000000000000000000000\"\
    \n        }\n        return String(x)\n    case 23:\n        if x == 0 {\n   \
    \         return \"00000000000000000000000\"\n        }\n        return String(x)\n\
    \    case 24:\n        if x == 0 {\n            return \"000000000000000000000000\"\
    \n        }\n        return String(x)\n    case 25:\n        if x == 0 {\n   \
    \         return \"00000000000000000000000000000000\"\n        }\n        return\
    \ String(x)\n    case 26:\n        if x == 0 {\n            return \"000000000000000000000000000000000\"\
    \n        }\n        return String(x)\n    case 27:\n        if x == 0 {\n   \
    \         return \"0000000000000000000000000000000000\"\n        }\n        return\
    \ String(x)\n    case 28:\n        if x == 0 {\n            return \"00000000000000000000000000000000000\"\
    \n        }\n        return String(x)\n    case 29:\n        if x == 0 {\n   \
    \         return \"000000000000000000000000000000000000\"\n        }\n       \
    \ return String(x)\n    case 30:\n        if x == 0 {\n            return \"0000000000000000000000000000000000000\"\
    \n        }\n", "  var result = \"\"\n\n  for var i = 0; i < Int(base); i++ {\n\
    \    result = String(Int(x)/Int64(base)) + (String(Int(x)%Int64(base)) + result)\n\
    \  }\n\n  return result", "  var result = \"\"\n  var digits = [Int]()\n  var\
    \ counter = base\n\n  if x == 0 {\n    return \"\"\n  }\n\n  for _ in 0..<x.toIntMax()\
    \ {\n    let remainder = x/Int64(base)\n    let digit = Int((remainder % Int64(base))\
    \ + Int64(base))\n    digits.append(digit)\n    x -= Int(digit) * Int(base)\n\
    \    x /= Int64(base)\n  }\n  var digit = Int((x % Int64(base)) + Int64(base))\n\
    \  digits.append(digit)\n  result = digits.reverse().map{String(crashpad: $0)}.reverse().joined(separator:\
    \ \"\")\n  result = String(Int(result) + 1)\n  for _ in 0..<counter.toIntMax()\
    \ {\n    result = String(Int(result) + Int64(base))\n  }\n  result = String(Int(result)\
    \ + 1)\n  return result", "    let base = digits_base(base)\n    let x = String(x)\n\
    \    var baseStr = \"\"\n    for i in 0..<x.characters.count {\n        baseStr.append(String(x[i])[base])\n\
    \    }\n    return baseStr", "    let digits = x.toString(base);\n    if digits.isEmpty\
    \ {\n        return digits.dropLast();\n    }\n    return digits\n        .enumerate()\n\
    \        .map { $0.0 * base + $0.1 }\n        .map{$0.description.characters.last!}\n\
    \        .joined();", "    let remainder = x % base\n    let quotient = x / base\n\
    \    var result = \"\"\n    if remainder == 0 {\n        for _ in 0..<base.logarithmic_significant_digits\
    \ {\n            result = \"\\(quotient % base)\\(result)\"\n            quotient\
    \ = quotient / base\n        }\n    } else if base.is_negative {\n        if quotient\
    \ > 0 {\n            let multiplier = -base.multiplier - remainder\n         \
    \   if multiplier < 0 {\n                result = \"\\(quotient % base)\\(result)\"\
    \n                quotient = -quotient\n            } else {\n               \
    \ result = \"\\(quotient)\\(result)\"\n                quotient = -quotient\n\
    \                quotient = multiplier + quotient\n            }\n        } else\
    \ {\n            result = \"\\(quotient)\\(result)\"\n            quotient = -quotient\n\
    \        }\n    } else {\n        if quotient > 0 {\n            result = \"\\\
    (quotient)\\(result)\"\n            quotient = -quotient\n        }\n    }\n \
    \   return result", "    var result: String = \"\"\n    var pow: Int = 1\n   \
    \ var digits: Int = 1\n    var remainder: Int = x\n\n    while remainder > 0 {\n\
    \        remainder, remainder = divmod(remainder, base)\n        digits = digits*base\
    \ + remainder\n        pow++\n    }\n\n    while digits != 0 {\n        result\
    \ += String(digits)\n        digits--\n        pow++\n    }\n\n    if pow == 1\
    \ {\n        result += String(pow)\n    }\n    return result", "    var r = \"\
    \"\n    let i = Int(x)\n    for _ in 0..<base {\n        i = i / base\n      \
    \  if i == 0 {\n            break\n        }\n        r += \"0\" + String(i -\
    \ Int(i))\n    }\n    return r", "    var s = String(x)\n    switch base {\n \
    \   case 2:\n        s = \"0\" + s\n    case 8:\n        s = \"7\" + s\n    case\
    \ 16:\n        s = \"FF\" + s\n    case 10:\n        s = \"B\" + s\n    default:\n\
    \        return \"\"\n    }\n    guard let index = s.index(of: \"0\"...s.count\
    \ - 1) else { return \"\" }\n    return String(s[index...])", "    // 1. check\
    \ if conversion is possible\n    if base < 0 || base > 256 {\n        throw Errors.InvalidInputError\n\
    \    }\n\n    var result: String = String(x)\n    let baseDigits = Array(String(base).unicodeScalars)\n\
    \    let baseDigitCount = baseDigits.count\n    let digitCount = result.count\n\
    \    let baseDigitIndex = baseDigits.firstIndex(of: Character(UnicodeScalar(base)))\n\
    \    let digitIndex = digitCount - 1\n    let digit = String(x%base)\n    result\
    \ += String(digit)\n    let lastDigitIndex = baseDigits.firstIndex(of: Character(UnicodeScalar(base))!)\n\
    \    if lastDigitIndex > -1 {\n        result = String(baseDigits.suffix(from:\
    \ lastDigitIndex) + result)\n    }\n    return result", "    var digits: [Int]\
    \ = []\n    var digits_len = base.magnitude\n    var digits_base = [Int](repeating:\
    \ 0, count: digits_len)\n    var digits_base_reverse = [Int](repeating: 0, count:\
    \ digits_len)\n    var remainder = x.magnitude\n    var rem_len = digits_len\n\
    \    while remainder > 0 {\n        let next_digit = remainder % base\n      \
    \  digits_base[digits_len - 1] = next_digit\n        digits_base_reverse[digits_len\
    \ - 1] = digits_base_reverse[digits_len - 2]\n        digits_len -= 1\n      \
    \  remainder = (remainder - next_digit) / base\n    }\n    var digits_base_str\
    \ = \"\"\n    for index in 0..<digits_len {\n        let digit = digits_base[index]\n\
    \        digits_base_str += String(digit)\n    }\n    var digits_base_reverse_str\
    \ = \"\"\n    for index in 0..<digits_len {\n        let digit = digits_base_reverse[index]\n\
    \        digits_base_reverse_str += String(digit)\n    }\n    return digits_base_str\
    \ + digits_base_reverse_str", "    let digits = String(Int(x) / Int(base))\n \
    \   var result = \"\"\n    if digits.count > 0 {\n        result += String(digits[0..<digits.count-1])\n\
    \    }\n    while digits.count > 0 {\n        let quotient = Int(digits[0..<digits.count-1])\
    \ / Int(base)\n        let remainder = Int(digits[0..<digits.count-1]) % Int(base)\n\
    \        let digit = String(quotient)\n        if digit != \"\" {\n          \
    \  result += \"0\"\n        }\n        result += digit\n    }\n    return result",
  "    if x >= base {\n        return \"\"\n    }\n    var res = \"\"\n    for _ in\
    \ 0..<base - x {\n        res = \"0\" + res\n    }\n    res += String(x)\n   \
    \ return res", "    let str = String(format: \"%@\", x)\n    let count = str.characters.count\n\
    \    if count >= base {\n        // the number is too long to be in base \"base\"\
    .\n        // just return the input number \"x\".\n        return x\n    }\n \
    \   var ret = String()\n    switch base {\n    case 2:\n        ret = str.characters.first!\n\
    \    case 8:\n        if count >= 3 {\n            // convert to binary.\n   \
    \         let charsArray = str.characters.dropFirst()\n            switch charsArray.count\
    \ {\n            case 2:\n                // convert to hex.\n               \
    \ ret = charsArray[0] + charsArray[1]\n            case 3:\n                //\
    \ convert to octal.\n                let c = charsArray[0] + charsArray[1]\n \
    \               let d = c + charsArray[2]\n                ret = \"0\" + String(format:\
    \ \"%o\", UInt64(truncatingBitPattern: UInt64(d)))\n            case 4:\n    \
    \            // convert to decimal.\n                let c = charsArray[0] + charsArray[1]\n\
    \                let d = c + charsArray[2]\n                let e = d + charsArray[3]\n\
    \                ret = \"0\" + String(format: \"%d\", UInt64(truncatingBitPattern:\
    \ UInt64(e)))\n            default:\n                // don't know how to convert\
    \ it!\n                ret = \"\"\n            }\n        }\n    default:\n  \
    \      // don't know how to convert it!\n        ret = \"\"\n    }\n    return\
    \ ret", "\tvar s = String(x)\n\tswitch base {\n\tcase 2:\n\t\ts = String(x/2)*2\n\
    \tcase 3:\n\t\ts = String(x/3)*3\n\tcase 4:\n\t\ts = String(x/4)*4\n\tcase 5:\n\
    \t\ts = String(x/5)*5\n\tcase 6:\n\t\ts = String(x/6)*6\n\tcase 7:\n\t\ts = String(x/7)*7\n\
    \tcase 8:\n\t\ts = String(x/8)*8\n\tcase 9:\n\t\ts = String(x/9)*9\n\tcase 10:\n\
    \t\ts = String(x/10)*10\n\tdefault:\n\t\tbreak\n\t}\n\treturn s", "    if base\
    \ < 2 {\n        throw Error.BaseInvalid()\n    }\n\n    if base > 36 {\n    \
    \    throw Error.BaseInvalid()\n    }\n\n    let res = x.toString(base)\n    return\
    \ String(res)", "    let value = x / base\n    let remainder = x % base\n\n  \
    \  switch base {\n    case 2:\n        return String(Int(value))\n    case 10:\n\
    \        return String(value)\n    case 16:\n        return String(Int(value),\
    \ radix: 16)\n    case 2:\n        return String(Int(value), radix: 2)\n    case\
    \ 8:\n        return String(Int(value), radix: 8)\n    default:\n        os_log(\"\
    Warning: invalid base %i, using base 10\", log: OSLog(subsystem: \"Swift\", category:\
    \ \"Core\"))\n        return String(Int(value), radix: 10)\n    }", "\tlet mut\
    \ res = \"0\";\n\tlet mut remain = x;\n\twhile remain > 0 {\n\t\tlet r = remain\
    \ % base;\n\t\tlet d = remain - r * base;\n\t\tlet x = r.truncating();\n\t\tlet\
    \ y = d.truncating();\n\t\tres += String::fromInt(x);\n\t\tres += String::fromInt(y);\n\
    \t\tremain = d;\n\t}\n\tres.reverse();\n\treturn res;", "    let num: Int = x\
    \ * base\n    var result = \"\"\n    switch base {\n    case 10:\n        var\
    \ remainder = num % 10\n        var digit: Int\n        for digit in 1...9 {\n\
    \            if remainder >= digit {\n                result += digit\n      \
    \          remainder -= digit\n                break\n            }\n        }\n\
    \        result = remainder\n    case 8:\n        var remainder = num % 8\n  \
    \      var digit: Int\n        for digit in 1...7 {\n            if remainder\
    \ >= digit {\n                result += digit\n                remainder -= digit\n\
    \                break\n            }\n        }\n        result = remainder\n\
    \    case 6:\n        var remainder = num % 6\n        var digit: Int\n      \
    \  for digit in 1...5 {\n            if remainder >= digit {\n               \
    \ result += digit\n                remainder -= digit\n                break\n\
    \            }\n        }\n        result = remainder\n    case 4:\n        var\
    \ remainder = num % 4\n        var digit: Int\n        for digit in 1...3 {\n\
    \            if remainder >= digit {\n                result += digit\n      \
    \          remainder -= digit\n                break\n            }\n        }\n\
    \        result = remainder\n    case 2:\n        var remainder = num % 2\n  \
    \      var digit: Int\n        for digit in 1...1 {\n            if remainder\
    \ >= digit {\n                result += digit\n                remainder -= digit\n\
    \                break\n            }\n        }\n        result = remainder\n\
    \    case 1:\n        var remainder = num % 1\n        var digit: Int\n      \
    \  for digit in 1...0 {\n            if remainder >= digit {\n               \
    \ result += digit\n                remainder -= digit\n                break\n\
    \            }\n        }\n        result = remainder\n    default:\n        break\n\
    \    }\n    return result", "    switch base {\n    case 0:\n        if x > 10\
    \ { return String(x - 10) + String(\"0\") }\n        return String(x - 1)\n  \
    \  case 1:\n        if x > 10 { return String(x - 10) + String(\"0\") }\n    \
    \    return String(x)\n    case 2:\n        if x > 10 { return String(x - 10)\
    \ + String(\"00\") }\n        return String(x)\n    case 3:\n        if x > 10\
    \ { return String(x - 10) + String(\"000\") }\n        return String(x)\n    case\
    \ 4:\n        if x > 10 { return String(x - 10) + String(\"0000\") }\n       \
    \ return String(x)\n    case 5:\n        if x > 10 { return String(x - 10) + String(\"\
    00000\") }\n        return String(x)\n    case 6:\n        if x > 10 { return\
    \ String(x - 10) + String(\"000000\") }\n        return String(x)\n    case 7:\n\
    \        if x > 10 { return String(x - 10) + String(\"0000000\") }\n        return\
    \ String(x)\n    case 8:\n        if x > 10 { return String(x - 10) + String(\"\
    00000000\") }\n        return String(x)\n    case 9:\n        if x > 10 { return\
    \ String(x - 10) + String(\"000000000\") }\n        return String(x)\n    case\
    \ 10:\n        if x > 10 { return String(x - 10) + String(\"0000000000\") }\n\
    \        return String(x)\n    case 11:\n        if x > 10 { return String(x -\
    \ 10) + String(\"00000000000\") }\n        return String(x)\n    case 12:\n  \
    \      if x > 10 { return String(x - 10) + String(\"000000000000\") }\n      \
    \  return String(x)\n    case 13:\n        if x > 10 { return String(x - 10) +\
    \ String(\"0000000000000\") }\n        return String(x)\n    case 14:\n      \
    \  if x > 10 { return String(x - 10) + String(\"00000000000000\") }\n        return\
    \ String(x)\n    case 15:\n        if x > 10 { return String(x - 10) + String(\"\
    000000000000000\") }\n        return String(x)\n    default:\n        if x < 0\
    \ || base < 0 || base > 15 {\n            return \"\"\n        }\n        var\
    \ result = \"0\"\n        var len = result.length\n        for _ in 0..<base {\n\
    \            result = \"0\" + result\n        }\n        if x < base {\n     \
    \       let remainder = x - base\n            result = \"0\" + result\n      \
    \      for _ in 0..<remainder {\n                result = \"0\" + result\n   \
    \         }\n        }\n        return result\n    }", "    let s = String(x)\n\
    \    guard let index = s.distance(from: String(base)) else { return s }\n    return\
    \ String(base) + s[..index]", "    var result = \"\"\n    var power = 1\n    if\
    \ base > 0 { // base must be > 0\n        result = x.toString(base)\n    } else\
    \ {\n        while x <= 0 {\n            x = x * 10\n            power *= base\n\
    \        }\n        result = (1 / power.toDouble()).times(x).description.substring(from:\
    \ 0)\n    }\n    return result", "    let res = String(x)\n    switch base {\n\
    \    case 10:\n        res = \"0\"\n    case 3:\n        res = \"1\" + res\n \
    \   case 2:\n        res = \"10\" + res\n    case 1:\n        res = \"100\" +\
    \ res\n    }\n    return res", "    var result = \"\"\n    var i = 0\n    func\
    \ nextBit() -> Int {\n        var result = 0\n        for _ in 0..<base {\n  \
    \          result += ((x & (1 << i)) != 0) ? (1 << i) : 0\n            i += 1\n\
    \        }\n        return result\n    }\n    var result = \"\"\n    for _ in\
    \ 0..<base {\n        result += String(format: \"0%o\", nextBit())\n    }\n  \
    \  return result", "    if base < 10 {\n        fatalError(\"Base must be less\
    \ than 10\")\n    }\n    let str = String(x)\n    let idx = str.index(str.startIndex,\
    \ offsetBy: base)\n    return str[..idx]", "    var result: String = String()\n\
    \    while x > 0 {\n        let r = x % base\n        x /= base\n        result\
    \ = String(repeatElement(Character(UnicodeScalar(\"0\")), count: r) + result)\n\
    \    }\n    return result", "    let base10 = \"0123456789ABCDEF\"\n    var s\
    \ = \"\"\n    if x < 0 {\n        s = (-x).to_s(base).reverse()\n    } else {\n\
    \        x.to_s(base).reverse().forEach { s = s + base10[$0] }\n    }\n    if\
    \ base < 2 {\n        return s + \".0\"\n    } else {\n        return s\n    }",
  "    var b = base\n    switch b {\n    case 3:\n        if x < 0 {\n           \
    \ return \"-\" + change_base(-x, base: base)\n        }\n        \n        if\
    \ x < 10 {\n            return String(x)\n        }\n        \n        var ret\
    \ = String()\n        \n        // Find the least significant digit in base\n\
    \        let r = Int(log10(x))\n        \n        var i = 0\n        while i !=\
    \ r {\n            i += 1\n            \n            if x == 0 {\n           \
    \     break\n            }\n            \n            x /= 10\n        }\n   \
    \     \n        // Convert to string\n        while i != 0 {\n            var\
    \ digit = Int((x % b) / b)\n            if digit > 0 {\n                ret +=\
    \ \"0123456789abcdefghijklmnopqrstuvwxyz\".substring(digit, 1)\n            }\
    \ else {\n                ret += \"0123456789abcdefghijklmnopqrstuvwxy\".substring(digit,\
    \ 1)\n            }\n            \n            x /= b\n            i -= 1\n  \
    \      }\n        \n        return ret\n        \n    case 2:\n        if x <\
    \ 0 {\n            return \"-\" + change_base(-x, base: base)\n        }\n   \
    \     \n        if x < 10 {\n            return String(x)\n        }\n       \
    \ \n        var ret = String()\n        \n        // Find the least significant\
    \ digit in base\n        let r = Int(log10(x))\n        \n        var i = 0\n\
    \        while i != r {\n            i += 1\n            \n            if x ==\
    \ 0 {\n                break\n            }\n            \n            x /= 10\n\
    \        }\n        \n        // Convert to string\n        while i != 0 {\n \
    \           var digit = Int((x % b) / b)\n            if digit > 0 {\n       \
    \         ret += \"0123456789abcdefghijklmnopqrstuv\".substring(digit, 1)\n  \
    \          } else {\n                ret += \"0123456789abcdefghijklmnopqrstuv\"\
    .substring(digit, 1)\n            }\n            \n            x /= b\n      \
    \      i -= 1\n        }\n        \n        return ret\n        \n    case 1:\n\
    \        if x < 0 {\n            return \"-\" + change_base(-x, base: base)\n\
    \        }\n        \n        if x < 10 {\n            return String(x)\n    \
    \    }\n        \n        var ret = String()\n        \n        // Find the least\
    \ significant digit in base\n        let r = Int(log10(x))\n        \n       \
    \ var i = 0\n        while i != r {\n            i += 1\n            \n      \
    \      if x == 0 {\n                break\n            }\n            \n     \
    \       x /= 10\n        }\n        \n        // Convert to string\n        while\
    \ i != 0 {\n            var digit = Int((x % b) / b)\n            if digit > 0\
    \ {\n                ret += \"0123456789abcdefghijklmnopqrstuv\".substring(digit,\
    \ 1)\n            } else {\n                ret += \"0123456789abcdefghijklmnopqrstuv\"\
    .substring(digit, 1)\n            }", "    let result = \"\"\n    let baseStr\
    \ = String(base)\n\n    for n in 0..<x.count/2 {\n        let digit = Int((x *\
    \ Int(\"\\(base)\")).truncatingRemainder(dividingBy: Int(\"\\(base)\"))) / Int(\"\
    \\(base)\")\n        result += String(digit).substring(to: digit.index(digit.startIndex,\
    \ offsetBy: 1)) + baseStr\n    }\n    if x.count % 2 == 0 {\n        let digit\
    \ = Int((x * Int(\"\\(base)\")).truncatingRemainder(dividingBy: Int(\"\\(base)\"\
    ))) / Int(\"\\(base)\")\n        result += String(digit)\n    } else {\n     \
    \   result += \"0\"\n    }\n    return result", "    let s = String(x)\n    var\
    \ b = 0\n    while s.count > 1 && b < base {\n        b *= base\n        s +=\
    \ String(b).substring(1)\n    }\n    return s"]
stop_tokens:
- "\n}"
