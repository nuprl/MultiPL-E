language: swift
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    let regex = try! NSRegularExpression(pattern:\
    \ \"I.*\")\n    return regex.numberOfMatchesInString(S, options: .RegularExpressionSearch,\
    \ range: NSMakeRange(0, S.utf16.count)) > 0 ? 1 : 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygyifml.swift:12:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: \"I.*\")\n     \
    \                ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp8ygyifml.swift:13:87: error: cannot\
    \ find 'NSMakeRange' in scope\n    return regex.numberOfMatchesInString(S, options:\
    \ .RegularExpressionSearch, range: NSMakeRange(0, S.utf16.count)) > 0 ? 1 : 0\n\
    \                                                                            \
    \          ^~~~~~~~~~~\n/tmp/tmp8ygyifml.swift:13:55: error: cannot infer contextual\
    \ base in reference to member 'RegularExpressionSearch'\n    return regex.numberOfMatchesInString(S,\
    \ options: .RegularExpressionSearch, range: NSMakeRange(0, S.utf16.count)) > 0\
    \ ? 1 : 0\n                                                     ~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: Task 2\n    // Write your code here\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpnxk_9gzg/tmpnxk_9gzg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c6705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c63fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c63fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c63fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxk_9gzg                        0x000055f3433b03b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b14c68f1460 __libc_start_main +
    245

    6    tmpnxk_9gzg                        0x000055f3433afee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    \n    \n    return 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp8p4v0wse/tmp8p4v0wse.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b094484ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0944541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0944541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09445407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p4v0wse                        0x0000564f5065d264 <unavailable> + 4708

    5    libc.so.6                          0x00002b0944a36460 __libc_start_main +
    245

    6    tmp8p4v0wse                        0x0000564f5065cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for word in S.split(separator: \".,?!\") {\
    \ // split string at \".,?!\" and iterate over to get the words in the string\n\
    \        guard let isBored = is_bored(word: word) else {\n            continue\n\
    \        }\n        count += isBored\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpq_6gjy63.swift:13:37: error: incorrect argument label in call (have\
    \ 'word:', expected 'S:')\n        guard let isBored = is_bored(word: word) else\
    \ {\n                                    ^~~~~\n                             \
    \        S\n/tmp/tmpq_6gjy63.swift:13:44: error: cannot convert value of type\
    \ 'String.SubSequence' (aka 'Substring') to expected argument type 'String'\n\
    \        guard let isBored = is_bored(word: word) else {\n                   \
    \                        ^\n                                           String(\
    \ )\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredom_count = 0\n    for word in S.split(separator: \".\"\
    ) {\n        if word.startsWith(\"I\") {\n            boredom_count = 1 + boredom_count\n\
    \        }\n    }\n    return boredom_count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4h2jbplc.swift:13:17: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'startsWith'\n        if word.startsWith(\"\
    I\") {\n           ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    S += \" \"\n    var count = 0\n    for s in S.split(separator:\
    \ \".\") {\n        if s.contains(\"I\") {\n            count += s.count { s ==\
    \ \"I\" }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpybf3zsqh.swift:11:7: error: left side of mutating operator isn't\
    \ mutable: 'S' is a 'let' constant\n    S += \" \"\n    ~ ^\n/tmp/tmpybf3zsqh.swift:15:24:\
    \ error: cannot call value of non-function type 'Int'\n            count += s.count\
    \ { s == \"I\" }\n                       ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredom_count = 0\n    for s in S.split(separator: \".? !\"\
    ) {\n        if s.hasPrefix(\"I\") {\n            boredom_count += 1\n       \
    \ }\n    }\n    return boredom_count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp5czgj8vs/tmp5czgj8vs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9049db5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9049aacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9049aac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9049aab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5czgj8vs                        0x00005638db92870b <unavailable> + 5899

    5    libc.so.6                          0x00002b9049fa1460 __libc_start_main +
    245

    6    tmp5czgj8vs                        0x00005638db9282e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = [\"I\"]\n    let boredom_count = S.split(separator:\
    \ \".?,!\").filter{ $0.containsString(boredoms)}\n    return boredom_count.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpnm0zozuu.swift:12:63: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'containsString'\n    let boredom_count = S.split(separator:\
    \ \".?,!\").filter{ $0.containsString(boredoms)}\n                           \
    \                                ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.count(\"I\")\n    return boredoms\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpg9ak628f.swift:11:22: error: cannot call value of non-function\
    \ type 'Int'\n    let boredoms = S.count(\"I\")\n                     ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var bored = 0\n    for s in S {\n        switch s {\n        case\
    \ \"I\":\n        case \"i\":\n        case \"you\":\n        case \"you're\"\
    :\n        case \"you've\":\n        case \"we\":\n        case \"We\":\n    \
    \    case \"we're\":\n        case \"we've\":\n        case \"you\":\n       \
    \ case \"you're\":\n        case \"you've\":\n            bored += 1\n       \
    \ default:\n            break\n        }\n    }\n    return bored\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpv_u368_5.swift:14:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"I\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpv_u368_5.swift:15:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"i\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpv_u368_5.swift:16:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"you\":\n        ^~~~~~~~~~~\n                    break\n/tmp/tmpv_u368_5.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"you're\":\n        ^~~~~~~~~~~~~~\n                       break\n\
    /tmp/tmpv_u368_5.swift:18:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case \"you've\":\n        ^~~~~~~~~~~~~~\n\
    \                       break\n/tmp/tmpv_u368_5.swift:19:9: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n        case \"we\"\
    :\n        ^~~~~~~~~~\n                   break\n/tmp/tmpv_u368_5.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"We\":\n        ^~~~~~~~~~\n                   break\n/tmp/tmpv_u368_5.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"we're\":\n        ^~~~~~~~~~~~~\n                      break\n\
    /tmp/tmpv_u368_5.swift:22:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case \"we've\":\n        ^~~~~~~~~~~~~\n \
    \                     break\n/tmp/tmpv_u368_5.swift:23:9: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n        case \"you\"\
    :\n        ^~~~~~~~~~~\n                    break\n/tmp/tmpv_u368_5.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"you're\":\n        ^~~~~~~~~~~~~~\n                       break\n\
    /tmp/tmpv_u368_5.swift:16:14: error: expression pattern of type 'String' cannot\
    \ match values of type 'Character'\n        cas"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var bored_words = [String]()\n    var count = 0\n\n    for char\
    \ in S {\n        switch char {\n        case \"?\", \".\", \"!\":\n         \
    \   count += 1\n            if char == \".\" {\n                bored_words.append(\"\
    \")\n            }\n            if char == \"?\" {\n                bored_words.append(\"\
    \")\n            }\n            if char == \"!\" {\n                bored_words.append(\"\
    \")\n            }\n        default:\n            bored_words.append(char)\n \
    \       }\n    }\n\n    bored_words.removeFirst()\n\n    if bored_words.count\
    \ > 0 {\n        return 0\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpypwij2p9.swift:28:32: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            bored_words.append(char)\n \
    \                              ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words: String = S.split(separator: \".?\")!.map { String($0)\
    \ }\n    let boredom = words.contains(\"I\")\n\n    return boredom ? 0 : words.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3_wxtcw7.swift:11:49: error: cannot force unwrap value of non-optional\
    \ type '[String.SubSequence]' (aka 'Array<Substring>')\n    let words: String\
    \ = S.split(separator: \".?\")!.map { String($0) }\n                        ~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                \n/tmp/tmp3_wxtcw7.swift:11:51:\
    \ error: cannot convert value of type '[String]' to specified type 'String'\n\
    \    let words: String = S.split(separator: \".?\")!.map { String($0) }\n    \
    \                    ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for word in S.split() {\n        if word ==\
    \ \"I\" {\n            count++\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpekcze8aw.swift:12:25: error: missing argument for parameter 'separator'\
    \ in call\n    for word in S.split() {\n                        ^\n          \
    \              separator: <#String.Element#>\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ declared here\n    @inlinable public __consuming func split(separator: Self.Element,\
    \ maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_string(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptuxw2g4b.swift:11:12: error: cannot find 'is_bored_string' in scope\n\
    \    return is_bored_string(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms:Int = 0\n    for s in S.split(separator: \".,?!\"\
    ) {\n        if s.hasPrefix(\"I\") {\n            boredoms += 1\n        }\n \
    \   }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpynqtiyxh/tmpynqtiyxh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afeb8946c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afeb863db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afeb863d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afeb863c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpynqtiyxh                        0x0000558bde8c670b <unavailable> + 5899

    5    libc.so.6                          0x00002afeb8b32460 __libc_start_main +
    245

    6    tmpynqtiyxh                        0x0000558bde8c62e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(\" \") {\n        if s.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwdxd715o.swift:12:16: error: no exact matches in call to instance\
    \ method 'split'\n    for s in S.split(\" \") {\n               ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for s in S.split(separator: \".,?! \") {\n\
    \        if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp80p8t377/tmp80p8t377.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b4b8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b4882b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b4882988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b48817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80p8t377                        0x000056553147772b <unavailable> + 5931

    5    libc.so.6                          0x00002b42b4d77460 __libc_start_main +
    245

    6    tmp80p8t377                        0x0000565531477309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split('.')\n    let counts = sentences.reduce([Int](),\
    \ combine: { (arr, element) -> [Int] in\n        guard let str = element as? String\
    \ else { return arr }\n        if str == \"I\" {\n            arr.append(1)\n\
    \        } else {\n            arr.removeLast()\n        }\n        return arr\n\
    \    })\n    return counts.reduce(0, combine: { (a, b) -> Int in\n        return\
    \ a + b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp20qm1134.swift:11:29: error: single-quoted string literal found,\
    \ use '\"'\n    let sentences = S.split('.')\n                            ^~~\n\
    \                            \".\"\n/tmp/tmp20qm1134.swift:11:23: error: no exact\
    \ matches in call to instance method 'split'\n    let sentences = S.split('.')\n\
    \                      ^\nSwift.Sequence:2:40: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S.lowercased())\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwtmlvt94.swift:11:21: error: missing argument label 'S:' in call\n\
    \    return is_bored(S.lowercased())\n                    ^\n                \
    \    S: \n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for word in S.split(separator: \".,?!\") {\n\
    \        if word.starts(\"I\") {\n            count += 1\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpai9y2cjw.swift:13:24: error: missing argument label 'with:' in\
    \ call\n        if word.starts(\"I\") {\n                       ^\n          \
    \             with: \n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.hasPrefix(\"I\") {\n        return Int(S.removePrefix(\"\
    I\").count)\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4heipje9.swift:12:22: error: value of type 'String' has no member\
    \ 'removePrefix'\n        return Int(S.removePrefix(\"I\").count)\n          \
    \         ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    var a = 0\n    for _ in S.characters {\n\
    \        if S.hasPrefix(\"I\") {\n            a += 1\n        }\n    }\n    return\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\")\
    \ == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxhru_e_j.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in S.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let bored = S.contains(\"I\")\n    return bored.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbbivjvsh.swift:12:18: error: value of type 'Bool' has no member\
    \ 'count'\n    return bored.count\n           ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored2(S, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6fisx9hw.swift:11:12: error: cannot find 'is_bored2' in scope\n\
    \    return is_bored2(S, 0)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // BEGIN Practice - Write your code below\n    var boredom = 0\n\
    \    for _ in S.characters.reversed() {\n        if S.characters.first == \"I\"\
    \ {\n            boredom++\n        }\n    }\n    return boredom\n    // END Practice\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprt3bf2pw.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in S.characters.reversed() {\n              \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmprt3bf2pw.swift:14:14:\
    \ error: 'characters' is unavailable: Please use String directly\n        if S.characters.first\
    \ == \"I\" {\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmprt3bf2pw.swift:15:20: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            boredom++\n                   ^~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return count_bored(S, \" . ? ! \") == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjhfcnn5t.swift:11:12: error: cannot find 'count_bored' in scope\n\
    \    return count_bored(S, \" . ? ! \") == 0\n           ^~~~~~~~~~~\n/tmp/tmpjhfcnn5t.swift:11:38:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Int'\n\
    \    return count_bored(S, \" . ? ! \") == 0\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\treturn is_boredIn(S, \".?!\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1o0_4n0e.swift:11:9: error: cannot find 'is_boredIn' in scope\n\
    \        return is_boredIn(S, \".?!\")\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var result: Int = 0\n\n    // TODO: Write your code here\n   \
    \ return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpzrkx5698/tmpzrkx5698.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b9d2f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b9cfe9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b9cfe9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b9cfe87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrkx5698                        0x000056040e11b3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b6b9d4de460 __libc_start_main +
    245

    6    tmpzrkx5698                        0x000056040e11aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if is_bored_rec(S, nil) == true {\n        return 1\n    } else\
    \ {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxusng57a.swift:11:8: error: cannot find 'is_bored_rec' in scope\n\
    \    if is_bored_rec(S, nil) == true {\n       ^~~~~~~~~~~~\n/tmp/tmpxusng57a.swift:11:24:\
    \ error: 'nil' requires a contextual type\n    if is_bored_rec(S, nil) == true\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if is_bored_1(S: S) {\n        return 1\n    } else {\n      \
    \  return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpiuei2u06.swift:11:8: error: cannot find 'is_bored_1' in scope\n\
    \    if is_bored_1(S: S) {\n       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return count(S, S(\"(?i)\\b[IYy][\\.\\?!]\\b\"))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpat0cz6io.swift:11:29: error: invalid escape sequence in literal\n\
    \    return count(S, S(\"(?i)\\b[IYy][\\.\\?!]\\b\"))\n                      \
    \      ^\n/tmp/tmpat0cz6io.swift:11:37: error: invalid escape sequence in literal\n\
    \    return count(S, S(\"(?i)\\b[IYy][\\.\\?!]\\b\"))\n                      \
    \              ^\n/tmp/tmpat0cz6io.swift:11:39: error: invalid escape sequence\
    \ in literal\n    return count(S, S(\"(?i)\\b[IYy][\\.\\?!]\\b\"))\n         \
    \                             ^\n/tmp/tmpat0cz6io.swift:11:43: error: invalid\
    \ escape sequence in literal\n    return count(S, S(\"(?i)\\b[IYy][\\.\\?!]\\\
    b\"))\n                                          ^\n/tmp/tmpat0cz6io.swift:11:12:\
    \ error: cannot find 'count' in scope\n    return count(S, S(\"(?i)\\b[IYy][\\\
    .\\?!]\\b\"))\n           ^~~~~\n/tmp/tmpat0cz6io.swift:11:21: error: cannot call\
    \ value of non-function type 'String'\n    return count(S, S(\"(?i)\\b[IYy][\\\
    .\\?!]\\b\"))\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~\n               \
    \      \n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    var count = 0\n    \n    // Loop through all words\n   \
    \ for word in S.split(separator: \" \") {\n        \n        // Check if current\
    \ word is bored\n        if word == \"I\" {\n            count += 1\n        }\n\
    \    }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpytpox6ku/tmpytpox6ku.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3692eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3692baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3692baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3692ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpytpox6ku                        0x000055aa335aba58 <unavailable> + 6744

    5    libc.so.6                          0x00002b369309f460 __libc_start_main +
    245

    6    tmpytpox6ku                        0x000055aa335ab359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if is_bored_(S, \"\")\n        { return 0 }\n\n    S += \".\"\n\
    \n    let i = count_bored_index(S, \".\")\n    let j = count_bored_index(S, \"\
    ?\")\n    let k = count_bored_index(S, \"!\")\n\n    return i + (j >= k ? 1 :\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\")\
    \ == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphugyof5q.swift:11:8: error: cannot find 'is_bored_' in scope\n\
    \    if is_bored_(S, \"\")\n       ^~~~~~~~~\n/tmp/tmphugyof5q.swift:14:7: error:\
    \ left side of mutating operator isn't mutable: 'S' is a 'let' constant\n    S\
    \ += \".\"\n    ~ ^\n/tmp/tmphugyof5q.swift:16:13: error: cannot find 'count_bored_index'\
    \ in scope\n    let i = count_bored_index(S, \".\")\n            ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmphugyof5q.swift:17:13: error: cannot find 'count_bored_index' in scope\n\
    \    let j = count_bored_index(S, \"?\")\n            ^~~~~~~~~~~~~~~~~\n/tmp/tmphugyof5q.swift:18:13:\
    \ error: cannot find 'count_bored_index' in scope\n    let k = count_bored_index(S,\
    \ \"!\")\n            ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\tlet split_S: Array<String> = S.split(\".\").map{String($0)}\n\t\
    let split_S: Array<String> = S.split(\"?\").map{String($0)}\n\tlet split_S: Array<String>\
    \ = S.split(\"!\").map{String($0)}\n\n\treturn count(split_S, \"I\")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp58yln526.swift:11:39: error: missing argument label 'separator:'\
    \ in call\n        let split_S: Array<String> = S.split(\".\").map{String($0)}\n\
    \                                             ^\n                            \
    \                 separator: \n/tmp/tmp58yln526.swift:12:39: error: missing argument\
    \ label 'separator:' in call\n        let split_S: Array<String> = S.split(\"\
    ?\").map{String($0)}\n                                             ^\n       \
    \                                      separator: \n/tmp/tmp58yln526.swift:12:6:\
    \ error: invalid redeclaration of 'split_S'\n        let split_S: Array<String>\
    \ = S.split(\"?\").map{String($0)}\n            ^\n/tmp/tmp58yln526.swift:11:6:\
    \ note: 'split_S' previously declared here\n        let split_S: Array<String>\
    \ = S.split(\".\").map{String($0)}\n            ^\n/tmp/tmp58yln526.swift:13:39:\
    \ error: missing argument label 'separator:' in call\n        let split_S: Array<String>\
    \ = S.split(\"!\").map{String($0)}\n                                         \
    \    ^\n                                             separator: \n/tmp/tmp58yln526.swift:13:6:\
    \ error: invalid redeclaration of 'split_S'\n        let split_S: Array<String>\
    \ = S.split(\"!\").map{String($0)}\n            ^\n/tmp/tmp58yln526.swift:11:6:\
    \ note: 'split_S' previously declared here\n        let split_S: Array<String>\
    \ = S.split(\".\").map{String($0)}\n            ^\n/tmp/tmp58yln526.swift:15:9:\
    \ error: cannot find 'count' in scope\n        return count(split_S, \"I\")\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return boredomsHelper(S)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmps4_h53ag.swift:11:12: error: cannot find 'boredomsHelper' in scope\n\
    \    return boredomsHelper(S)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let mut I = 0\n    for s in S.split(separator: \".? !\") {\n \
    \       if s.starts(with: \"I\") {\n            I += 1\n        }\n    }\n   \
    \ return I\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp57et4iaj.swift:11:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut I = 0\n\
    \            ^\n/tmp/tmp57et4iaj.swift:11:13: note: join the identifiers together\n\
    \    let mut I = 0\n        ~~~~^\n        mutI\n/tmp/tmp57et4iaj.swift:14:13:\
    \ error: cannot find 'I' in scope\n            I += 1\n            ^\n/tmp/tmp57et4iaj.swift:17:12:\
    \ error: cannot find 'I' in scope\n    return I\n           ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredCount = 0\n    for character in S {\n        switch character\
    \ {\n        case \"I\":\n            boredCount++\n        default:\n       \
    \     break\n        }\n    }\n    return boredCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3edfvh71.swift:15:23: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            boredCount++\n                      ^~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let chars = s.characters()\n    var count = 0\n    for char in\
    \ chars {\n        switch char {\n        case '?':\n        case '!':\n     \
    \   default:\n            if char.startsWith(\"I\") {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpx_2ob_rp.swift:15:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '?':\n             ^~~\n             \"?\"\n/tmp/tmpx_2ob_rp.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case '?':\n        ^~~~~~~~~\n                  break\n/tmp/tmpx_2ob_rp.swift:16:14:\
    \ error: single-quoted string literal found, use '\"'\n        case '!':\n   \
    \          ^~~\n             \"!\"\n/tmp/tmpx_2ob_rp.swift:16:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ '!':\n        ^~~~~~~~~\n                  break\n/tmp/tmpx_2ob_rp.swift:11:17:\
    \ error: cannot find 's' in scope\n    let chars = s.characters()\n          \
    \      ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, N: 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpkhqyuffa.swift:11:30: error: extra argument 'N' in call\n    return\
    \ is_bored(S: S, N: 0)\n                   ~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: Implement me\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpumzphk74/tmpumzphk74.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ab291bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ab2612b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ab2612988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ab26117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumzphk74                        0x00005640fa21b3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b4ab2b07460 __libc_start_main +
    245

    6    tmpumzphk74                        0x00005640fa21aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S\n        .unicodeScalars\n        .filter({ $0.isBOremeter\
    \ })\n        .count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpblgbxhm0.swift:13:22: error: value of type 'Unicode.Scalar' has\
    \ no member 'isBOremeter'\n        .filter({ $0.isBOremeter })\n             \
    \     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let words = S.split(separator: CharacterSet.periodsAndNewlines)\
    \ else {\n        return 0\n    }\n    var boredoms = Int(0)\n    for word in\
    \ words {\n        if word.lowercased().hasPrefix(\"i\") {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp6b0fh0w.swift:11:42: error: cannot find 'CharacterSet' in scope\n\
    \    guard let words = S.split(separator: CharacterSet.periodsAndNewlines) else\
    \ {\n                                         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return boredom.isPrefixOf(S) // counts boredoms, not periods\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpuzdtwf43.swift:11:12: error: cannot find 'boredom' in scope\n \
    \   return boredom.isPrefixOf(S) // counts boredoms, not periods\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let word = S.split(\" \")[0]\n    let index = S.indexOf(word).map\
    \ {\n        ($0, S.index($0, word))\n    }.filter { $0.1.1 == true }\n    .map\
    \ { $0.1.2 }\n    .count\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb73amnw_.swift:11:18: error: no exact matches in call to instance\
    \ method 'split'\n    let word = S.split(\" \")[0]\n                 ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n/tmp/tmpb73amnw_.swift:13:16: error: no exact matches\
    \ in call to instance method 'index'\n        ($0, S.index($0, word))\n      \
    \         ^\n/tmp/tmpb73amnw_.swift:13:16: note: found candidate with type '(String.Index,\
    \ Int) -> String.Index'\n        ($0, S.index($0, word))\n               ^\n/tmp/tmpb73amnw_.swift:12:19:\
    \ error: value of type 'String' has no member 'indexOf'\n    let index = S.indexOf(word).map\
    \ {\n                ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var i = 0\n    let sentences = S.split('.')\n    for sentence\
    \ in sentences {\n        if sentence == \"I\" || sentence == \"i\" {\n      \
    \      i += 1\n        }\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbiugx4d0.swift:12:29: error: single-quoted string literal found,\
    \ use '\"'\n    let sentences = S.split('.')\n                            ^~~\n\
    \                            \".\"\n/tmp/tmpbiugx4d0.swift:12:23: error: no exact\
    \ matches in call to instance method 'split'\n    let sentences = S.split('.')\n\
    \                      ^\nSwift.Sequence:2:40: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    var count = 0\n    var lastIsBol = false\n\
    \    for _ in S.characters.reverse() {\n        if lastIsBol && S == \"I\" {\n\
    \            return count\n        }\n        lastIsBol = lastIsBol || S == \"\
    I\" || S == \"!\" || S == \"?\"\n        count += 1\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmparcl41z5.swift:14:27: error: value of type 'String' has no member\
    \ 'reverse'\n    for _ in S.characters.reverse() {\n             ~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  let s = S\n  var bored = 0\n  for word in s.split(\" \") {\n   \
    \ if word == \"I\" {\n      bored += 1\n    }\n  }\n  return bored\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7m0bkc_n.swift:13:17: error: no exact matches in call to instance\
    \ method 'split'\n  for word in s.split(\" \") {\n                ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for str in S.split(separator: \".\"){\n   \
    \     if str.hasPrefix(\"I\") {\n            count += 1\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpw3vu8mcm/tmpw3vu8mcm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b965c28cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b965bf83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b965bf83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b965bf827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3vu8mcm                        0x000056340c42477b <unavailable> + 6011

    5    libc.so.6                          0x00002b965c478460 __libc_start_main +
    245

    6    tmpw3vu8mcm                        0x000056340c424359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var bored = 0\n    var bored_S = S\n    for _ in S.characters\
    \ {\n        if S.starts(with: \"I\") {\n            bored = 1\n            break\n\
    \        } else {\n            bored_S = String(dropLast(bored_S)) + \".\" + String(dropLast(bored_S))\
    \ + \"?\"\n        }\n    }\n    return bored\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp32vivsj0.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in S.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp32vivsj0.swift:18:30:\
    \ error: cannot find 'dropLast' in scope\n            bored_S = String(dropLast(bored_S))\
    \ + \".\" + String(dropLast(bored_S)) + \"?\"\n                             ^~~~~~~~\n\
    /tmp/tmp32vivsj0.swift:18:64: error: cannot find 'dropLast' in scope\n       \
    \     bored_S = String(dropLast(bored_S)) + \".\" + String(dropLast(bored_S))\
    \ + \"?\"\n                                                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S: S)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpln0acmog.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S: S)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredom = \"[I].*[.!?]\"\n    let words: [String] = S.components(separatedBy:\
    \ boredom)\n    return words.count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0bj9e0zt.swift:12:29: error: value of type 'String' has no member\
    \ 'components'\n    let words: [String] = S.components(separatedBy: boredom)\n\
    \                          ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let S = S.lowercased()\n    var boredoms = 1\n    for word in\
    \ S.split(separator: \". . ?\"){\n        if word == \"i\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpihkj2hkl/tmpihkj2hkl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59abe9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59abb91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59abb91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59abb907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihkj2hkl                        0x00005574e6a606c4 <unavailable> + 5828

    5    libc.so.6                          0x00002b59ac086460 __libc_start_main +
    245

    6    tmpihkj2hkl                        0x00005574e6a60349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return count_bored(S, [\".\", \"?\", \"!\"])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpd5dye9ke.swift:11:10: error: cannot find 'count_bored' in scope\n\
    \  return count_bored(S, [\".\", \"?\", \"!\"])\n         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  guard S.contains(separator: String(\".\", \",\", \"?\", \"!\"))\
    \ else {\n    return 0\n  }\n\n  var count = 0\n\n  for word in S.components(separatedBy:\
    \ separator) {\n    if word == \"I\" {\n      count += 1\n    }\n  }\n\n  return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbpek5h58.swift:11:11: error: no exact matches in call to instance\
    \ method 'contains'\n  guard S.contains(separator: String(\".\", \",\", \"?\"\
    , \"!\")) else {\n          ^\n/tmp/tmpbpek5h58.swift:11:11: note: candidate expects\
    \ value of type 'String' for parameter #1 (got 'String')\n  guard S.contains(separator:\
    \ String(\".\", \",\", \"?\", \"!\")) else {\n          ^\n/tmp/tmpbpek5h58.swift:11:11:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String')\n\
    \  guard S.contains(separator: String(\".\", \",\", \"?\", \"!\")) else {\n  \
    \        ^\n/tmp/tmpbpek5h58.swift:11:31: error: no exact matches in call to initializer\
    \ \n  guard S.contains(separator: String(\".\", \",\", \"?\", \"!\")) else {\n\
    \                              ^\n/tmp/tmpbpek5h58.swift:11:31: note: candidate\
    \ has partially matching parameter list (_builtinExtendedGraphemeClusterLiteral:\
    \ Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1)\n\
    \  guard S.contains(separator: String(\".\", \",\", \"?\", \"!\")) else {\n  \
    \                            ^\n/tmp/tmpbpek5h58.swift:11:31: note: candidate\
    \ has partially matching parameter list (_builtinStringLiteral: Builtin.RawPointer,\
    \ utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1)\n  guard S.contains(separator:\
    \ String(\".\", \",\", \"?\", \"!\")) else {\n                              ^\n\
    /tmp/tmpbpek5h58.swift:11:31: note: candidate has partially matching parameter\
    \ list (repeating: String, count: Int)\n  guard S.contains(separator: String(\"\
    .\", \",\", \"?\", \"!\")) else {\n                              ^\n/tmp/tmpbpek5h58.swift:11:31:\
    \ note: found candidate with type '(String, Int, Bool) -> String'\n  guard S.contains(separator:\
    \ String(\".\", \",\", \"?\", \"!\")) else {\n                              ^\n\
    /tmp/tmpbpek5h58.swift:17:41: error: cannot find 'separator' in scope\n  for word\
    \ in S.components(separatedBy: separator) {\n                                \
    \        ^~~~~~~~~\n/tmp/tmpbpek5h58.swift:17:17: error: value of type 'String'\
    \ has no member 'components'\n  for word in S.components(separatedBy: separator)\
    \ {\n              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S: S, boredoms: [\"I\"])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpdtm2t4m1.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S: S, boredoms: [\"I\"])\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return count_boredom(S).1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpivr2ji68.swift:11:10: error: cannot find 'count_boredom' in scope\n\
    \  return count_boredom(S).1\n         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let S = S.split(separator: \".?!\").joined(separator: \"\
    \ \"),\n        let S: String = S\n        else { return 0 }\n    let boredom\
    \ = S.range(of: \"I\", options: .caseInsensitive) != nil\n    let count = S.count(\"\
    I\")\n    return boredom ? count : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpm9yxq3sp.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let S = S.split(separator:\
    \ \".?!\").joined(separator: \" \"),\n          ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm9yxq3sp.swift:12:9: error: initializer for conditional binding must have\
    \ Optional type, not 'String'\n        let S: String = S\n        ^          \
    \     ~\n/tmp/tmpm9yxq3sp.swift:14:21: error: value of type 'String' has no member\
    \ 'range'\n    let boredom = S.range(of: \"I\", options: .caseInsensitive) !=\
    \ nil\n                  ~ ^~~~~\n/tmp/tmpm9yxq3sp.swift:14:46: error: cannot\
    \ infer contextual base in reference to member 'caseInsensitive'\n    let boredom\
    \ = S.range(of: \"I\", options: .caseInsensitive) != nil\n                   \
    \                         ~^~~~~~~~~~~~~~~\n/tmp/tmpm9yxq3sp.swift:15:19: error:\
    \ cannot call value of non-function type 'Int'\n    let count = S.count(\"I\"\
    )\n                  ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  var bored = 0\n  for s in S.split(separator: \".,?!\") {\n    if\
    \ s.starts(with: \"I\") {\n      bored += 1\n    }\n  }\n  return bored\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpsrw5enhx/tmpsrw5enhx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affbb102c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affbadf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affbadf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affbadf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrw5enhx                        0x000055c39c28172b <unavailable> + 5931

    5    libc.so.6                          0x00002affbb2ee460 __libc_start_main +
    245

    6    tmpsrw5enhx                        0x000055c39c281309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = [\n        \"I\", \"!\", \"?\", \".\", \" \"\n\
    \    ]\n    \n    var count = 0\n    for char in S {\n        count += boredoms.contains(char)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5g5oikgn.swift:17:27: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        count += boredoms.contains(char)\n\
    \                          ^\n/tmp/tmp5g5oikgn.swift:17:36: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        count\
    \ += boredoms.contains(char)\n                                   ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard S.contains(\".\") && S.contains(\"?\") && S.contains(\"\
    !\") else {\n        return 0\n    }\n    let boredom = S.range(of: \"I\", options:\
    \ .caseInsensitive) != nil\n    return boredom ? 0 : 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpld_t0w73.swift:14:21: error: value of type 'String' has no member\
    \ 'range'\n    let boredom = S.range(of: \"I\", options: .caseInsensitive) !=\
    \ nil\n                  ~ ^~~~~\n/tmp/tmpld_t0w73.swift:14:46: error: cannot\
    \ infer contextual base in reference to member 'caseInsensitive'\n    let boredom\
    \ = S.range(of: \"I\", options: .caseInsensitive) != nil\n                   \
    \                         ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredom = 1\n\n    // Loop through each character in the string,\
    \ checking to see if it is a\n    // boredom.\n    for char in S {\n        switch\
    \ char {\n        case \"I\":\n            boredom = boredom + 1 // Increase the\
    \ count by 1 for each boredom.\n            break\n        case \"?\", \"!\",\
    \ \".\":\n            boredom = boredom + 0 // Increase the count by 0 for each\
    \ character.\n            break\n        default:\n            break\n       \
    \ }\n    }\n\n    return boredom\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmptvysz6v5/tmptvysz6v5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bab947c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bab63eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bab63e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bab63d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvysz6v5                        0x000055f85770f414 <unavailable> + 5140

    5    libc.so.6                          0x00002b8babb33460 __libc_start_main +
    245

    6    tmptvysz6v5                        0x000055f85770f099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var answer = 0\n    for words in S.split(separator: \". ? !\"\
    ) {\n        if words.range(of: \"I\") != nil {\n            answer += 1\n   \
    \     }\n    }\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjjsnk_ya.swift:13:18: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'range'\n        if words.range(of: \"I\") !=\
    \ nil {\n           ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S: S, caseSensitive: false)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxxgeyich.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S: S, caseSensitive: false)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S == \"I\" {\n        return Int(1)\n    }\n    var count =\
    \ 0\n    var i = 0\n    for s in S.split(separator: \".\") {\n        if s ==\
    \ \"I\" {\n            count = count + 1\n            i = i + 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpzgeq8fw8/tmpzgeq8fw8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58166d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58163c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58163c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58163c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzgeq8fw8                        0x000055d2e396d882 <unavailable> + 6274

    5    libc.so.6                          0x00002b58168be460 __libc_start_main +
    245

    6    tmpzgeq8fw8                        0x000055d2e396d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = [String](\n        S.components(separatedBy: \"\
    .?\")!\n            .filter { $0.hasPrefix(\"I\") }\n            .map { $0.removeFirst()\
    \ }\n    )\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpv6jv2by7.swift:12:11: error: value of type 'String' has no member\
    \ 'components'\n        S.components(separatedBy: \".?\")!\n        ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var num = 0\n    for s in S.split(separator: \".!?\") {\n    \
    \    if s.contains(\"I\") {\n            num++\n        }\n    }\n    return num\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmpddzebk.swift:14:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            num++\n               ^~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    var count = 0\n    for s in S.split(\"\
    .\") {\n        if s[0] == \"I\" {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqe6lzpdc.swift:13:16: error: no exact matches in call to instance\
    \ method 'split'\n    for s in S.split(\".\") {\n               ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    var boredoms = 0\n    \n    for s in S.split(separator:\
    \ \".\") {\n        if s.range(of: \"I\", options: .caseInsensitive) != nil {\n\
    \            boredoms += 1\n        }\n    }\n    \n    return boredoms\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprgbptbqq.swift:15:14: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'range'\n        if s.range(of: \"I\", options:\
    \ .caseInsensitive) != nil {\n           ~ ^~~~~\n/tmp/tmprgbptbqq.swift:15:39:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        if s.range(of: \"I\", options: .caseInsensitive) != nil {\n         \
    \                            ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.isEmpty{ \n        return 0\n    }\n    if S.starts(with:\
    \ \"I\"){\n        return 1\n    }\n    \n    var count = 0\n    \n    for word\
    \ in S.split(separator: \".\") where word == \"I\"{\n        count = count + 1\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp306axfsb/tmp306axfsb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5206530c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5206227b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5206227988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52062267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp306axfsb                        0x000055ef8822c88b <unavailable> + 6283

    5    libc.so.6                          0x00002b520671c460 __libc_start_main +
    245

    6    tmp306axfsb                        0x000055ef8822c469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let _ = S.characters.first else {\n        return 0\n  \
    \  }\n    let boredom = [\"I\".utf8.count, \"a\".utf8.count, \"the\".utf8.count]\n\
    \    return boredom.index(boredom.contains(S.characters.first!)) + 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr3bwwyck.swift:11:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard let _ = S.characters.first else {\n         \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpr3bwwyck.swift:15:20: error: no exact matches in call to instance method\
    \ 'index'\n    return boredom.index(boredom.contains(S.characters.first!)) + 1\n\
    \                   ^\n/tmp/tmpr3bwwyck.swift:15:20: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'Bool')\n    return boredom.index(boredom.contains(S.characters.first!))\
    \ + 1\n                   ^\n/tmp/tmpr3bwwyck.swift:15:20: note: candidate expects\
    \ value of type 'Int' for parameter #1 (got 'Bool')\n    return boredom.index(boredom.contains(S.characters.first!))\
    \ + 1\n                   ^\n/tmp/tmpr3bwwyck.swift:15:20: note: candidate expects\
    \ value of type 'Array<Int>.Index' (aka 'Int') for parameter #1 (got 'Bool')\n\
    \    return boredom.index(boredom.contains(S.characters.first!)) + 1\n       \
    \            ^\n/tmp/tmpr3bwwyck.swift:15:20: note: candidate expects value of\
    \ type 'Array<Int>.Index' (aka 'Int') for parameter #1 (got 'Bool')\n    return\
    \ boredom.index(boredom.contains(S.characters.first!)) + 1\n                 \
    \  ^\n/tmp/tmpr3bwwyck.swift:15:61: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n    return boredom.index(boredom.contains(S.characters.first!))\
    \ + 1\n                                                            ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return boredoms(S)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7czsjpzz.swift:11:12: error: cannot find 'boredoms' in scope\n\
    \    return boredoms(S)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var firstIsA = false\n    var lastIsA =\
    \ false\n\n    for index in 0..<S.count {\n        switch S[index] {\n       \
    \ case \"I\":\n            if !firstIsA {\n                firstIsA = true\n \
    \           } else {\n                boredoms += 1\n            }\n        case\
    \ \"A\":\n            if !lastIsA {\n                lastIsA = true\n        \
    \    } else {\n                boredoms += 1\n            }\n        case \"!\"\
    , \"?\", \".\":\n            break\n        default:\n            if !firstIsA\
    \ && !lastIsA {\n                boredoms += 1\n            }\n        }\n   \
    \ }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp93fluo8n.swift:16:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        switch S[index]\
    \ {\n               ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var i = 0\n    var num_bored = 0\n    var is_bored = false\n \
    \   for word in S.split(separator: \".?!\") {\n        if word == \"I\" {\n  \
    \          is_bored = true\n        } else if is_bored {\n            i += 1\n\
    \            if word != \" \" {\n                num_bored += 1\n            }\n\
    \        }\n    }\n    return num_bored\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpgxj7ebzq/tmpgxj7ebzq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abece1d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abecdecbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abecdecb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abecdeca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxj7ebzq                        0x000055b249649812 <unavailable> + 6162

    5    libc.so.6                          0x00002abece3c0460 __libc_start_main +
    245

    6    tmpgxj7ebzq                        0x000055b249649349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmpaut1vu26.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let s = S.lowercased()\n    let l = s.count(\".\") + s.count(\"\
    ?\") + s.count(\"!\")\n    if l == 0 {\n        return 0\n    }\n    return s.startsWith(\"\
    i\") ? 1 : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpf2tz_7wi.swift:12:30: error: cannot call value of non-function\
    \ type 'Int'\n    let l = s.count(\".\") + s.count(\"?\") + s.count(\"!\")\n \
    \                            ^\n/tmp/tmpf2tz_7wi.swift:12:15: error: cannot call\
    \ value of non-function type 'Int'\n    let l = s.count(\".\") + s.count(\"?\"\
    ) + s.count(\"!\")\n              ^\n/tmp/tmpf2tz_7wi.swift:12:45: error: cannot\
    \ call value of non-function type 'Int'\n    let l = s.count(\".\") + s.count(\"\
    ?\") + s.count(\"!\")\n                                            ^\n/tmp/tmpf2tz_7wi.swift:16:14:\
    \ error: value of type 'String' has no member 'startsWith'\n    return s.startsWith(\"\
    i\") ? 1 : 0\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredom = \"I\"\n    let arr = S.components(separatedBy: \"\
    .\")\n    var sum = 0\n    for i in 0..<arr.count{\n        let word = arr[i]\n\
    \        if word == boredom {\n            sum += 1 // Increment the counter\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgsqdo51w.swift:12:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = S.components(separatedBy: \".\")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\tguard let s = S.data(using: .utf8) else { return 0 }\n\tlet words:\
    \ [String] = s.enumerated().map { $0.element }.filter({ $0 != \"\\n\" })\n\treturn\
    \ words.filter{$0.range(of: \"^I\", options: .regularExpression) == nil}.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxkkqvgl3.swift:11:18: error: value of type 'String' has no member\
    \ 'data'\n        guard let s = S.data(using: .utf8) else { return 0 }\n     \
    \                 ~ ^~~~\n/tmp/tmpxkkqvgl3.swift:11:31: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n        guard let s = S.data(using: .utf8)\
    \ else { return 0 }\n                                    ~^~~~\n/tmp/tmpxkkqvgl3.swift:13:25:\
    \ error: value of type 'String' has no member 'range'\n        return words.filter{$0.range(of:\
    \ \"^I\", options: .regularExpression) == nil}.count\n                       \
    \     ~~ ^~~~~\n/tmp/tmpxkkqvgl3.swift:13:51: error: cannot infer contextual base\
    \ in reference to member 'regularExpression'\n        return words.filter{$0.range(of:\
    \ \"^I\", options: .regularExpression) == nil}.count\n                       \
    \                                 ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.hasPrefix(\"I\") && S.hasSuffix(\".\") && S.hasSuffix(\"\
    !\") {\n        return 1 + is_bored(S.dropFirst(3))\n    }\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmps4i2s1tt.swift:12:29: error: missing argument label 'S:' in call\n\
    \        return 1 + is_bored(S.dropFirst(3))\n                            ^\n\
    \                            S: \n/tmp/tmps4i2s1tt.swift:12:31: error: cannot\
    \ convert value of type 'String.SubSequence' (aka 'Substring') to expected argument\
    \ type 'String'\n        return 1 + is_bored(S.dropFirst(3))\n               \
    \               ^\n                            String(       )\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let S1 = S.split(separator: \".\", omittingEmptySubsequences:\
    \ true)\n    let S2 = S1.map {\n        $0.split(separator: \"?\", omittingEmptySubsequences:\
    \ true)\n    }\n    let S3 = S2.map {\n        $0.split(separator: \"!\", omittingEmptySubsequences:\
    \ true)\n    }\n    let S4 = S3.map {\n        $0.first?.lowercased()\n    }\n\
    \    return S4.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpe2jrs6et.swift:19:19: error: value of type 'ArraySlice<Substring.SubSequence>'\
    \ (aka 'ArraySlice<Substring>') has no member 'lowercased'\n        $0.first?.lowercased()\n\
    \        ~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: fill this in\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmplmpc90ry/tmplmpc90ry.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba68a92dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba68a624b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba68a624988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba68a6237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmpc90ry                        0x000055811be8c3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ba68ab19460 __libc_start_main +
    245

    6    tmplmpc90ry                        0x000055811be8bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: For task 2, write code to return true if the given sentence\
    \ is\n    // a boredom.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp79o0co3s/tmp79o0co3s.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f40f96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f40c8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f40c8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f40c8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79o0co3s                        0x0000556782f8f3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b6f41182460 __libc_start_main +
    245

    6    tmp79o0co3s                        0x0000556782f8eee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S.utf8CString)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpilq_ms3u.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S.utf8CString)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  var result = 0.0\n  for str in S.split(separator: \".?!\") {\n \
    \   if str.starts(with: \"I\") {\n      result += 1.0\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgw2sjf1w.swift:17:10: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n  return result\n         ^~~~~~\n     \
    \    Int(  )\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, R: make([]rune, 0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp359b9llw.swift:11:37: error: expected ',' separator\n    return\
    \ is_bored(S: S, R: make([]rune, 0))\n                                    ^\n\
    \                                    ,\n/tmp/tmp359b9llw.swift:11:30: error: cannot\
    \ find 'make' in scope\n    return is_bored(S: S, R: make([]rune, 0))\n      \
    \                       ^~~~\n/tmp/tmp359b9llw.swift:11:37: error: cannot find\
    \ 'rune' in scope\n    return is_bored(S: S, R: make([]rune, 0))\n           \
    \                         ^~~~\n/tmp/tmp359b9llw.swift:11:30: error: extra argument\
    \ 'R' in call\n    return is_bored(S: S, R: make([]rune, 0))\n               \
    \    ~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var counter = 0\n    for c in S {\n        switch c {\n      \
    \  case \"I\":\n            counter += 1\n        default:\n            counter\
    \ -= 1\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpmp7tjdnt/tmpmp7tjdnt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5f71bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5f6eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5f6eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5f6eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmp7tjdnt                        0x000055ffed35e414 <unavailable> + 5140

    5    libc.so.6                          0x00002ad5f73a8460 __libc_start_main +
    245

    6    tmpmp7tjdnt                        0x000055ffed35e099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.prefix(1).contains(\"I\") {\n        return 0\n    }\n  \
    \  return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpzrnw0i7z/tmpzrnw0i7z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3abea64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3abe75bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3abe75b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3abe75a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrnw0i7z                        0x000055ad57ea74f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b3abec50460 __libc_start_main +
    245

    6    tmpzrnw0i7z                        0x000055ad57ea7179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\treturn is_bored(S: S, char: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpsa0ft1tk.swift:11:30: error: extra argument 'char' in call\n  \
    \      return is_bored(S: S, char: \" \")\n                       ~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.characters.first == \"I\" {\n        return 0\n    }\n  \
    \  var boredom = 1\n    for x in S {\n        if x == '.' {\n            boredom++\n\
    \        } else if x == '?' || x == '!' {\n            boredom = 0\n        }\n\
    \    }\n    return boredom\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4cuj409a.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if x == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmp4cuj409a.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if x == '?' || x == '!' {\n                       ^~~\n    \
    \                   \"?\"\n/tmp/tmp4cuj409a.swift:18:36: error: single-quoted\
    \ string literal found, use '\"'\n        } else if x == '?' || x == '!' {\n \
    \                                  ^~~\n                                   \"\
    !\"\n/tmp/tmp4cuj409a.swift:11:10: error: 'characters' is unavailable: Please\
    \ use String directly\n    if S.characters.first == \"I\" {\n         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4cuj409a.swift:17:20:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  boredom++\n                   ^~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.contains(\"I\") {\n        var count = 0\n        for s in\
    \ S.components(separatedBy: \"I\") {\n            if s.count >= 2 {\n        \
    \        count += 1\n            }\n        }\n        return count\n    } else\
    \ {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqe575cth.swift:13:20: error: value of type 'String' has no member\
    \ 'components'\n        for s in S.components(separatedBy: \"I\") {\n        \
    \         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var result = 0\n    var boredom = \"\"\n    var s = S.characters\n\
    \n    for c in S {\n        switch c {\n        case \"A\", \"E\", \"I\", \"O\"\
    , \"U\":\n            boredom = boredom + c\n        default:\n            if\
    \ boredom.characters.count == 0 || boredom[boredom.characters.count-1] != \".\"\
    \ && boredom[boredom.characters.count-1] != \"?\" && boredom[boredom.characters.count-1]\
    \ != \"!\" {\n                if !s.containsString(boredom) {\n              \
    \      result++\n                    boredom = \"\"\n                }\n     \
    \       }\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpq97job5o.swift:13:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s = S.characters\n              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpq97job5o.swift:18:33: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            boredom\
    \ = boredom + c\n                                ^\n/tmp/tmpq97job5o.swift:20:24:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if boredom.characters.count == 0 || boredom[boredom.characters.count-1] != \"\
    .\" && boredom[boredom.characters.count-1] != \"?\" && boredom[boredom.characters.count-1]\
    \ != \"!\" {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpq97job5o.swift:20:49: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if boredom.characters.count == 0 || boredom[boredom.characters.count-1] !=\
    \ \".\" && boredom[boredom.characters.count-1] != \"?\" && boredom[boredom.characters.count-1]\
    \ != \"!\" {\n                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq97job5o.swift:20:65:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if boredom.characters.count == 0 || boredom[boredom.characters.count-1] != \"\
    .\" && boredom[boredom.characters.count-1] != \"?\" && boredom[boredom.characters.count-1]\
    \ != \"!\" {\n                                                               \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpq97job5o.swift:20:95:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let arr = S.components(separatedBy: \".\")\n    var count = 0\n\
    \    for (_, item) in arr.enumerated() {\n        if item.first == \"I\" {\n \
    \           count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr_76kxp5.swift:11:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = S.components(separatedBy: \".\")\n             \
    \ ~ ^~~~~~~~~~\n/tmp/tmpr_76kxp5.swift:13:5: error: failed to produce diagnostic\
    \ for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, item) in arr.enumerated() {\n    ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.contains(\"I\", options: .anchored)\n    return\
    \ boredoms.map { $0 }.filter { ($0 as Bool).count > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3k0ovi8p.swift:11:46: error: extra argument 'options' in call\n\
    \    let boredoms = S.contains(\"I\", options: .anchored)\n                  \
    \           ~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmp3k0ovi8p.swift:11:46: error: cannot\
    \ infer contextual base in reference to member 'anchored'\n    let boredoms =\
    \ S.contains(\"I\", options: .anchored)\n                                    \
    \        ~^~~~~~~~\n/tmp/tmp3k0ovi8p.swift:12:54: error: value of type 'Bool'\
    \ has no member 'count'\n    return boredoms.map { $0 }.filter { ($0 as Bool).count\
    \ > 0 }.count\n                                        ~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \" \")\n    \n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") }).count\n    \n    return boredoms\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpypg435pc/tmpypg435pc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8f7a19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8f7710b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8f7710988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8f770f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypg435pc                        0x0000558f4445a72b <unavailable> + 5931

    5    libc.so.6                          0x00002ab8f7c05460 __libc_start_main +
    245

    6    tmpypg435pc                        0x0000558f4445a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Return the length of the sentence that is equal to len(S) -\
    \ 1\n    // minus one.\n    \n    let boredom = S.characters.count == S.characters.count\
    \ - 1\n    return boredom\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1qvwnwo1.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let boredom = S.characters.count == S.characters.count\
    \ - 1\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp1qvwnwo1.swift:14:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    let boredom = S.characters.count == S.characters.count\
    \ - 1\n                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1qvwnwo1.swift:15:12: error: cannot convert\
    \ return expression of type 'Bool' to return type 'Int'\n    return boredom\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(words: S.characters)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgvfuhfq3.swift:11:20: error: incorrect argument label in call (have\
    \ 'words:', expected 'S:')\n    return is_bored(words: S.characters)\n       \
    \            ^~~~~~\n                    S\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words: Set<String> = S.componentsSeparatedByString(\" \")\n\
    \    return words.filter { $0.hasPrefix(\"I\") }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprm3i5qsc.swift:11:32: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words: Set<String> = S.componentsSeparatedByString(\"\
    \ \")\n                             ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, boredoms: [\"I\"])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmps7lhwhu3.swift:11:37: error: extra argument 'boredoms' in call\n\
    \    return is_bored(S: S, boredoms: [\"I\"])\n                   ~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let S = S(start:S.startIndex, end:S.endIndex)\n    return S.count\
    \ { S[$0] == \"I\" } > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzv9v125d.swift:11:13: error: cannot call value of non-function\
    \ type 'String'\n    let S = S(start:S.startIndex, end:S.endIndex)\n         \
    \   ^\n/tmp/tmpzv9v125d.swift:12:37: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Int'\n    return S.count { S[$0] == \"I\" } > 0\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let mut count_boredoms = String::new();\n\n    for word in S.split_whitespace()\
    \ {\n        count_boredoms += \"I\".to_string();\n        count_boredoms += word.to_string();\n\
    \    }\n\n    return count_boredoms.len();\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1tw14km5.swift:11:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut count_boredoms\
    \ = String::new();\n            ^\n/tmp/tmp1tw14km5.swift:11:13: note: join the\
    \ identifiers together\n    let mut count_boredoms = String::new();\n        ~~~~^~~~~~~~~~~~~~\n\
    \        mutcount_boredoms\n/tmp/tmp1tw14km5.swift:11:13: note: join the identifiers\
    \ together with camel-case\n    let mut count_boredoms = String::new();\n    \
    \    ~~~~^~~~~~~~~~~~~~\n        mutCount_boredoms\n/tmp/tmp1tw14km5.swift:11:36:\
    \ error: consecutive statements on a line must be separated by ';'\n    let mut\
    \ count_boredoms = String::new();\n                                   ^\n    \
    \                               ;\n/tmp/tmp1tw14km5.swift:11:36: error: expected\
    \ expression\n    let mut count_boredoms = String::new();\n                  \
    \                 ^\n/tmp/tmp1tw14km5.swift:11:30: error: expected member name\
    \ or constructor call after type name\n    let mut count_boredoms = String::new();\n\
    \                             ^\n/tmp/tmp1tw14km5.swift:11:30: note: add arguments\
    \ after the type to construct a value of the type\n    let mut count_boredoms\
    \ = String::new();\n                             ^\n                         \
    \          ()\n/tmp/tmp1tw14km5.swift:11:30: note: use '.self' to reference the\
    \ type object\n    let mut count_boredoms = String::new();\n                 \
    \            ^\n                                   .self\n/tmp/tmp1tw14km5.swift:13:19:\
    \ error: value of type 'String' has no member 'split_whitespace'\n    for word\
    \ in S.split_whitespace() {\n                ~ ^~~~~~~~~~~~~~~~\n/tmp/tmp1tw14km5.swift:18:12:\
    \ error: cannot find 'count_boredoms' in scope\n    return count_boredoms.len();\n\
    \           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var i = 0\n    for s in S.split(separator: \".?!\") {\n      \
    \  if s.hasPrefix(\"I\") {\n            i += 1\n        }\n    }\n    return i\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmparg37pa5/tmparg37pa5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadc01b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadbfeaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadbfeae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadbfead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparg37pa5                        0x000055a8d1dd670b <unavailable> + 5899

    5    libc.so.6                          0x00002aadc03a3460 __libc_start_main +
    245

    6    tmparg37pa5                        0x000055a8d1dd62e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    S = S.replacingOccurrences(of: \"\\.\", with: \" \")\n    S =\
    \ S.replacingOccurrences(of: \"\\?\", with: \" \")\n    S = S.replacingOccurrences(of:\
    \ \"!\", with: \" \")\n    var counter = 0\n    for x in S {\n        if x ==\
    \ \"I\" {\n            counter += 1\n        }\n    }\n    return counter\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpcocb22qi.swift:11:38: error: invalid escape sequence in literal\n\
    \    S = S.replacingOccurrences(of: \"\\.\", with: \" \")\n                  \
    \                   ^\n/tmp/tmpcocb22qi.swift:12:38: error: invalid escape sequence\
    \ in literal\n    S = S.replacingOccurrences(of: \"\\?\", with: \" \")\n     \
    \                                ^\n/tmp/tmpcocb22qi.swift:11:5: error: cannot\
    \ assign to value: 'S' is a 'let' constant\n    S = S.replacingOccurrences(of:\
    \ \"\\.\", with: \" \")\n    ^\n/tmp/tmpcocb22qi.swift:11:11: error: value of\
    \ type 'String' has no member 'replacingOccurrences'\n    S = S.replacingOccurrences(of:\
    \ \"\\.\", with: \" \")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcocb22qi.swift:12:5:\
    \ error: cannot assign to value: 'S' is a 'let' constant\n    S = S.replacingOccurrences(of:\
    \ \"\\?\", with: \" \")\n    ^\n/tmp/tmpcocb22qi.swift:12:11: error: value of\
    \ type 'String' has no member 'replacingOccurrences'\n    S = S.replacingOccurrences(of:\
    \ \"\\?\", with: \" \")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcocb22qi.swift:13:5:\
    \ error: cannot assign to value: 'S' is a 'let' constant\n    S = S.replacingOccurrences(of:\
    \ \"!\", with: \" \")\n    ^\n/tmp/tmpcocb22qi.swift:13:11: error: value of type\
    \ 'String' has no member 'replacingOccurrences'\n    S = S.replacingOccurrences(of:\
    \ \"!\", with: \" \")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    var count = 0\n    var current: String = S.first\n    if\
    \ S.first == \"I\" {\n        return count\n    }\n    \n    for word in S.characters\
    \ {\n        switch word {\n        case \"?\", \".\", \"!\", \"\\n\", \"\\r\"\
    , \"\\t\":\n            return count\n        default:\n            if current\
    \ == word {\n                count += 1\n            }\n            current =\
    \ word\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbg2hx4kf.swift:13:29: error: cannot convert value of type 'String.Element?'\
    \ (aka 'Optional<Character>') to specified type 'String'\n    var current: String\
    \ = S.first\n                          ~~^~~~~\n/tmp/tmpbg2hx4kf.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for word\
    \ in S.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbg2hx4kf.swift:23:24: error: binary operator '==' cannot\
    \ be applied to operands of type 'String' and 'Character'\n            if current\
    \ == word {\n               ~~~~~~~ ^  ~~~~\n/tmp/tmpbg2hx4kf.swift:23:24: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n            if current == word {\n           \
    \            ^\n/tmp/tmpbg2hx4kf.swift:26:23: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            current = word\n                 \
    \     ^~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\treturn is_bored(S: S.characters)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpa2okq7ys.swift:11:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        return is_bored(S: S.characters)\n            \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return len(findBored(S)) > 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpq5te6rya.swift:11:12: error: cannot find 'len' in scope\n    return\
    \ len(findBored(S)) > 0\n           ^~~\n/tmp/tmpq5te6rya.swift:11:16: error:\
    \ cannot find 'findBored' in scope\n    return len(findBored(S)) > 0\n       \
    \        ^~~~~~~~~\n/tmp/tmpq5te6rya.swift:11:30: error: cannot convert return\
    \ expression of type 'Bool' to return type 'Int'\n    return len(findBored(S))\
    \ > 0\n           ~~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for c in S {\n        if c == 'I' {\n     \
    \       count++\n        } else if c == '.' || c == '?' || c == '!' {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqnta0uc9.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'I' {\n                ^~~\n                \"I\"\n\
    /tmp/tmpqnta0uc9.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '.' || c == '?' || c == '!' {\n                    \
    \   ^~~\n                       \".\"\n/tmp/tmpqnta0uc9.swift:15:36: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == '.' || c == '?' || c\
    \ == '!' {\n                                   ^~~\n                         \
    \          \"?\"\n/tmp/tmpqnta0uc9.swift:15:48: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' || c == '?' || c == '!' {\n    \
    \                                           ^~~\n                            \
    \                   \"!\"\n/tmp/tmpqnta0uc9.swift:14:18: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var bored = 0\n    for word in S.split(separator: \".?!\") where\
    \ word != \"I\" {\n        if word == \"I\" {\n            bored += 1\n      \
    \  }\n    }\n    return bored\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpz3smdkw3/tmpz3smdkw3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af42a8f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af42a5edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af42a5ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af42a5ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz3smdkw3                        0x00005625dbade812 <unavailable> + 6162

    5    libc.so.6                          0x00002af42aae2460 __libc_start_main +
    245

    6    tmpz3smdkw3                        0x00005625dbade349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.hasPrefix(\"I\") {\n        return S.count { $0 == \"I\"\
    \ }\n    } else {\n        return S.count { $0 == '.' || $0 == '?' || $0 == '!'\
    \ }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp477qe1g7.swift:14:32: error: single-quoted string literal found,\
    \ use '\"'\n        return S.count { $0 == '.' || $0 == '?' || $0 == '!' }\n \
    \                              ^~~\n                               \".\"\n/tmp/tmp477qe1g7.swift:14:45:\
    \ error: single-quoted string literal found, use '\"'\n        return S.count\
    \ { $0 == '.' || $0 == '?' || $0 == '!' }\n                                  \
    \          ^~~\n                                            \"?\"\n/tmp/tmp477qe1g7.swift:14:58:\
    \ error: single-quoted string literal found, use '\"'\n        return S.count\
    \ { $0 == '.' || $0 == '?' || $0 == '!' }\n                                  \
    \                       ^~~\n                                                \
    \         \"!\"\n/tmp/tmp477qe1g7.swift:12:18: error: cannot call value of non-function\
    \ type 'Int'\n        return S.count { $0 == \"I\" }\n                 ^\n/tmp/tmp477qe1g7.swift:14:18:\
    \ error: cannot call value of non-function type 'Int'\n        return S.count\
    \ { $0 == '.' || $0 == '?' || $0 == '!' }\n                 ^\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S.characters)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpt8cs6jps.swift:11:21: error: missing argument label 'S:' in call\n\
    \    return is_bored(S.characters)\n                    ^\n                  \
    \  S: \n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  let S = S.characters.reduce(\"\") {\n    if $0 == \".\" || $0 ==\
    \ \"?\" || $0 == \"!\" {\n      return $0 + \"$0\"\n    }\n    return $0\n  }\n\
    \  return S.characters.filter { char in \"I\".characters.contains(char) }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjb62o1qn.swift:11:35: error: contextual closure type '(String,\
    \ String.Element) throws -> String' (aka '(String, Character) throws -> String')\
    \ expects 2 arguments, but 1 was used in closure body\n  let S = S.characters.reduce(\"\
    \") {\n                                  ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredom_count = 0\n    for s in S.split(separator: \".?!\"\
    ) {\n        if s.starts(with: \"I\") {\n            boredom_count += 1;\n   \
    \     }\n    }\n    return boredom_count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpnufkr6l_/tmpnufkr6l_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba70edaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba70eaa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba70eaa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba70eaa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnufkr6l_                        0x0000564de18b872b <unavailable> + 5931

    5    libc.so.6                          0x00002ba70ef96460 __libc_start_main +
    245

    6    tmpnufkr6l_                        0x0000564de18b8309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_words(S: S).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpcsbtc_x8.swift:11:12: error: cannot find 'is_bored_words' in scope\n\
    \    return is_bored_words(S: S).count\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let S = S.lowercased()\n    let chars = [\"I\"]\n\n    for i in\
    \ chars {\n        var count = 0\n        for j in S {\n            let s = String(j).lowercased()\n\
    \            if s == i {\n                count += 1\n            }\n        }\n\
    \        if count > 0 {\n            return count\n        }\n    }\n\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\")\
    \ == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpxn5a9fzf/tmpxn5a9fzf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad75d3a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad75d09fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad75d09f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad75d09e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxn5a9fzf                        0x0000558d7aa53822 <unavailable> + 6178

    5    libc.so.6                          0x00002ad75d594460 __libc_start_main +
    245

    6    tmpxn5a9fzf                        0x0000558d7aa53359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var cnt = 0\n    for s in S.components(separatedBy: \".\") where\
    \ s == \"I\" {\n        cnt += 1\n    }\n    return cnt\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplfa35ku_.swift:12:16: error: value of type 'String' has no member\
    \ 'components'\n    for s in S.components(separatedBy: \".\") where s == \"I\"\
    \ {\n             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let s = S.lowercased()\n    if s.contains(\"i\") {\n        return\
    \ s.range(of: \"i\", options: .caseInsensitive)?.lowerBound != nil ?? 0\n    }\n\
    \    if s.contains(\"the\") {\n        return s.range(of: \"the\", options: .caseInsensitive)?.lowerBound\
    \ != nil ?? 0\n    }\n    if s.contains(\".\") {\n        return s.range(of: \"\
    .\", options: .caseInsensitive)?.lowerBound != nil ?? 0\n    }\n    if s.contains(\"\
    ?\") {\n        return s.range(of: \"?\", options: .caseInsensitive)?.lowerBound\
    \ != nil ?? 0\n    }\n    if s.contains(\"!\") {\n        return s.range(of: \"\
    !\", options: .caseInsensitive)?.lowerBound != nil ?? 0\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvmjw_veu.swift:13:72: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Int'\n        return s.range(of: \"i\", options:\
    \ .caseInsensitive)?.lowerBound != nil ?? 0\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmpvmjw_veu.swift:13:18: error: value of type 'String' has no member 'range'\n\
    \        return s.range(of: \"i\", options: .caseInsensitive)?.lowerBound != nil\
    \ ?? 0\n               ~ ^~~~~\n/tmp/tmpvmjw_veu.swift:13:43: error: cannot infer\
    \ contextual base in reference to member 'caseInsensitive'\n        return s.range(of:\
    \ \"i\", options: .caseInsensitive)?.lowerBound != nil ?? 0\n                \
    \                         ~^~~~~~~~~~~~~~~\n/tmp/tmpvmjw_veu.swift:16:74: error:\
    \ cannot convert return expression of type 'Bool' to return type 'Int'\n     \
    \   return s.range(of: \"the\", options: .caseInsensitive)?.lowerBound != nil\
    \ ?? 0\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmpvmjw_veu.swift:16:18: error: value of type 'String' has no member 'range'\n\
    \        return s.range(of: \"the\", options: .caseInsensitive)?.lowerBound !=\
    \ nil ?? 0\n               ~ ^~~~~\n/tmp/tmpvmjw_veu.swift:16:45: error: cannot\
    \ infer contextual base in reference to member 'caseInsensitive'\n        return\
    \ s.range(of: \"the\", options: .caseInsensitive)?.lowerBound != nil ?? 0\n  \
    \                                         ~^~~~~~~~~~~~~~~\n/tmp/tmpvmjw_veu.swift:19:72:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Int'\n\
    \        return s.range(of: \".\", options: .caseInsensitive)?.lowerBound != nil\
    \ ?? 0\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmpvmjw_veu.swift:19:18: error: value of type 'String' has no member 'range'\n\
    \        return s.range(of: \".\", options: .caseInsensitive)?.lowerBound != nil\
    \ ?? 0\n               ~ ^~~~~\n/tmp/tmpvmjw_veu.swift:19:43: error: cannot infer\
    \ contextual base in reference to member 'caseInsensitive'\n        return s.range(of:\
    \ \".\", options: .caseInsensiti"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // BEGIN Question 2\n    return count_boredoms(S: S, R: \"I\"\
    , I: 0)\n    // END Question 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp254jgqq6.swift:12:12: error: cannot find 'count_boredoms' in scope\n\
    \    return count_boredoms(S: S, R: \"I\", I: 0)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var result = 0\n    for word in S.split(separator: \".?!\") {\n\
    \        if word == \"I\" {\n            result += Int32(true)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxeiey7pp.swift:14:23: error: no exact matches in call to initializer\
    \ \n            result += Int32(true)\n                      ^\n/tmp/tmpxeiey7pp.swift:14:23:\
    \ note: candidate has partially matching parameter list (Float16)\n          \
    \  result += Int32(true)\n                      ^\n/tmp/tmpxeiey7pp.swift:14:23:\
    \ note: candidate has partially matching parameter list (Float)\n            result\
    \ += Int32(true)\n                      ^\n/tmp/tmpxeiey7pp.swift:14:23: note:\
    \ candidate has partially matching parameter list (Double)\n            result\
    \ += Int32(true)\n                      ^\n/tmp/tmpxeiey7pp.swift:14:23: note:\
    \ candidate has partially matching parameter list (Float80)\n            result\
    \ += Int32(true)\n                      ^\n/tmp/tmpxeiey7pp.swift:14:23: note:\
    \ candidate has partially matching parameter list (Builtin.Int32)\n          \
    \  result += Int32(true)\n                      ^\n/tmp/tmpxeiey7pp.swift:14:23:\
    \ note: candidate has partially matching parameter list (String)\n           \
    \ result += Int32(true)\n                      ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S == \"\" { return 0 }\n    var count = 0\n    var inBoredom\
    \ = 0\n    var lastWord = \"\"\n    for char in S {\n        switch char {\n \
    \       case 'I':\n            inBoredom = 1\n            lastWord = char\n  \
    \      case '?':\n            inBoredom = 1\n            lastWord = char\n   \
    \     default:\n            lastWord = \"\"\n        }\n        if inBoredom {\n\
    \            count += 1\n            inBoredom = 0\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpt_d9xevv.swift:17:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'I':\n             ^~~\n             \"I\"\n/tmp/tmpt_d9xevv.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case '?':\n   \
    \          ^~~\n             \"?\"\n/tmp/tmpt_d9xevv.swift:19:24: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            lastWord = char\n\
    \                       ^~~~\n/tmp/tmpt_d9xevv.swift:22:24: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            lastWord = char\n  \
    \                     ^~~~\n/tmp/tmpt_d9xevv.swift:26:12: error: type 'Int' cannot\
    \ be used as a boolean; test for '!= 0' instead\n        if inBoredom {\n    \
    \       ^\n           (         != 0)\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\treturn is_bored_1(S) == S\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpfqv2gerd.swift:11:9: error: cannot find 'is_bored_1' in scope\n\
    \        return is_bored_1(S) == S\n               ^~~~~~~~~~\n/tmp/tmpfqv2gerd.swift:11:23:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Int'\n\
    \        return is_bored_1(S) == S\n               ~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return count_bored(S, 1, true, false, true, false)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwltptfpk.swift:11:12: error: cannot find 'count_bored' in scope\n\
    \    return count_bored(S, 1, true, false, true, false)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let splitS = S.split(\".\")\n    var count = 0\n    for i in splitS\
    \ {\n        if i.starts(with: \"I\") {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0itqwn1b.swift:11:20: error: no exact matches in call to instance\
    \ method 'split'\n    let splitS = S.split(\".\")\n                   ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_r(S).find(0, in: S).map({ Int($0) }).reduce(Int)(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpenq_z63j.swift:11:12: error: cannot find 'is_bored_r' in scope\n\
    \    return is_bored_r(S).find(0, in: S).map({ Int($0) }).reduce(Int)(0)\n   \
    \        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let tokens = S.components(separatedBy: \".\")\n    return tokens.count{\n\
    \        (_) -> Bool in\n        switch $0 {\n        case \"I\":\n          \
    \  return true\n        case \"!\", \"?\", \".\":\n            return false\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5tb3dufo.swift:14:16: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n        switch $0 {\n\
    \               ^\n/tmp/tmp5tb3dufo.swift:11:20: error: value of type 'String'\
    \ has no member 'components'\n    let tokens = S.components(separatedBy: \".\"\
    )\n                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    let is_bored: String -> Bool = {\n        (_: String) ->\
    \ Bool in\n        \n        (_: Int) -> Bool in\n        \n        return $0\
    \ == 0\n    }\n    \n    return count(S, is_bored)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpd3hph8pc.swift:12:19: error: single argument function types require\
    \ parentheses\n    let is_bored: String -> Bool = {\n                  ^~~~~~\n\
    \                  (     )\n/tmp/tmpd3hph8pc.swift:15:25: error: consecutive statements\
    \ on a line must be separated by ';'\n        (_: Int) -> Bool in\n          \
    \              ^\n                        ;\n/tmp/tmpd3hph8pc.swift:15:26: error:\
    \ expected expression\n        (_: Int) -> Bool in\n                         ^\n\
    /tmp/tmpd3hph8pc.swift:17:16: error: anonymous closure arguments cannot be used\
    \ inside a closure that has explicit arguments\n        return $0 == 0\n     \
    \          ^\n/tmp/tmpd3hph8pc.swift:20:12: error: cannot find 'count' in scope\n\
    \    return count(S, is_bored)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_1(S).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6no76bb6.swift:11:12: error: cannot find 'is_bored_1' in scope\n\
    \    return is_bored_1(S).count\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S).is_bored\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2xlusewi.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S).is_bored\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var bored = 0\n    for word in S.split(separator: \".?!\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbsjxr_i_/tmpbsjxr_i_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9f69b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9f66adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9f66ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9f66ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbsjxr_i_                        0x000055927e4987b2 <unavailable> + 6066

    5    libc.so.6                          0x00002ac9f6ba2460 __libc_start_main +
    245

    6    tmpbsjxr_i_                        0x000055927e4982e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for s in S.split(separator: \".\") {\n    \
    \    for letter in s {\n            if letter == \"I\" {\n                count\
    \ += 1\n                break\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpdhrcu047/tmpdhrcu047.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25aaf68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25aac5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25aac5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25aac5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhrcu047                        0x000055a84aa5a73b <unavailable> + 5947

    5    libc.so.6                          0x00002b25ab154460 __libc_start_main +
    245

    6    tmpdhrcu047                        0x000055a84aa5a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S != \"\" {\n        var count = 0\n        for ch in S {\n\
    \            if ch == \"I\" {\n                count += 1\n            }\n   \
    \     }\n        return count\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpm__paj06/tmpm__paj06.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b591ee9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b591eb95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b591eb95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b591eb947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm__paj06                        0x000055e7aafb751b <unavailable> + 5403

    5    libc.so.6                          0x00002b591f08a460 __libc_start_main +
    245

    6    tmpm__paj06                        0x000055e7aafb70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let S = S.lowercased()\n    var numBoredoms = 0\n    for i in\
    \ S.characters.reverse() {\n        switch i {\n        case \"i\": continue\n\
    \        case \"a\": continue\n        case \"e\": continue\n        case \"o\"\
    : continue\n        case \"u\": continue\n        case \"l\": continue\n     \
    \   case \"s\": continue\n        case \"d\": continue\n        case \"m\": continue\n\
    \        case \"t\": numBoredoms = numBoredoms + 1\n        default: break\n \
    \       }\n    }\n    return numBoredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlb06ci1.swift:13:27: error: value of type 'String' has no member\
    \ 'reverse'\n    for i in S.characters.reverse() {\n             ~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if !S.startsWith(\"I\") {\n        return 0\n    }\n    var count\
    \ = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.startsWith(\"\
    I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpg01in6ob.swift:11:11: error: value of type 'String' has no member\
    \ 'startsWith'\n    if !S.startsWith(\"I\") {\n        ~ ^~~~~~~~~~\n/tmp/tmpg01in6ob.swift:16:14:\
    \ error: value of type 'String.SubSequence' (aka 'Substring') has no member 'startsWith'\n\
    \        if s.startsWith(\"I\") {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: first convert the string to lowercase and remove all\
    \ punctuation\n    // Then split on space and punctuation\n    \n    // TODO:\
    \ write code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpsvvdq4lm/tmpsvvdq4lm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af56b252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af56af49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af56af49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af56af487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsvvdq4lm                        0x000056158841d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002af56b43e460 __libc_start_main +
    245

    6    tmpsvvdq4lm                        0x000056158841cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let pattern = NSRegularExpression(\"^I\")\n\n    var count = 0\n\
    \n    for str in S {\n        let range: NSRange\n        range = str.rangeOfString(pattern,\
    \ options: .CaseInsensitive)\n\n        if range.location != NSNotFound {\n  \
    \          count += 1\n        }\n    }\n\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpd106xoyo.swift:11:19: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let pattern = NSRegularExpression(\"^I\")\n                  ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd106xoyo.swift:16:20: error: cannot find type 'NSRange' in scope\n   \
    \     let range: NSRange\n                   ^~~~~~~\n/tmp/tmpd106xoyo.swift:17:21:\
    \ error: value of type 'Character' has no member 'rangeOfString'\n        range\
    \ = str.rangeOfString(pattern, options: .CaseInsensitive)\n                ~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpd106xoyo.swift:17:54: error: cannot infer contextual\
    \ base in reference to member 'CaseInsensitive'\n        range = str.rangeOfString(pattern,\
    \ options: .CaseInsensitive)\n                                               \
    \     ~^~~~~~~~~~~~~~~\n/tmp/tmpd106xoyo.swift:19:30: error: cannot find 'NSNotFound'\
    \ in scope\n        if range.location != NSNotFound {\n                      \
    \       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms: Set<String> = [\"I\", \"!\", \".\"]\n\n    // Your\
    \ code here\n\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpkfiqtt91/tmpkfiqtt91.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b318534bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3185042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3185042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31850417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfiqtt91                        0x000055e0ff7a1592 <unavailable> + 5522

    5    libc.so.6                          0x00002b3185537460 __libc_start_main +
    245

    6    tmpkfiqtt91                        0x000055e0ff7a10c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  let lower = S.lowercased().characters()\n  let start = lower.startIndex\n\
    \  let end = lower.endIndex\n\n  var result = 0.0\n\n  for word in S.characters.dropFirst(start)\
    \ {\n    if word == \"i\" {\n      result += 1.0\n    }\n  }\n\n  return result\
    \ / Float(end - start)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4evoz5.swift:11:30: error: cannot call value of non-function\
    \ type 'String'\n  let lower = S.lowercased().characters()\n                 \
    \            ^         ~~\n                                       \n/tmp/tmpqb4evoz5.swift:23:17:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Float'\n  return result / Float(end - start)\n         ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqb4evoz5.swift:23:17: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Float, Float)\n  return result\
    \ / Float(end - start)\n                ^\n/tmp/tmpqb4evoz5.swift:23:19: error:\
    \ no exact matches in call to initializer \n  return result / Float(end - start)\n\
    \                  ^\n/tmp/tmpqb4evoz5.swift:23:19: note: found candidate with\
    \ type '(Builtin.FPIEEE32) -> Float'\n  return result / Float(end - start)\n \
    \                 ^\n/tmp/tmpqb4evoz5.swift:23:19: note: found candidate with\
    \ type '(Substring) -> Float?'\n  return result / Float(end - start)\n       \
    \           ^\n/tmp/tmpqb4evoz5.swift:23:19: note: found candidate with type '(Int)\
    \ -> Float'\n  return result / Float(end - start)\n                  ^\n/tmp/tmpqb4evoz5.swift:23:19:\
    \ note: found candidate with type '(Float16) -> Float'\n  return result / Float(end\
    \ - start)\n                  ^\n/tmp/tmpqb4evoz5.swift:23:19: note: found candidate\
    \ with type '(Float) -> Float'\n  return result / Float(end - start)\n       \
    \           ^\n/tmp/tmpqb4evoz5.swift:23:19: note: found candidate with type '(Double)\
    \ -> Float'\n  return result / Float(end - start)\n                  ^\n/tmp/tmpqb4evoz5.swift:23:19:\
    \ note: found candidate with type '(Float80) -> Float'\n  return result / Float(end\
    \ - start)\n                  ^\n/tmp/tmpqb4evoz5.swift:23:17: error: no '/' candidates\
    \ produce the expected contextual result type 'Int'\n  return result / Float(end\
    \ - start)\n                ^\nSwift.Float:5:24: note: '/' produces 'Float', not\
    \ the expected contextual result type 'Int'\n    public static func / (lhs: Float,\
    \ rhs: Float) -> Float\n                       "
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredom = [\"I\", \" .\", \"?\", \"!\"]\n    return S.lowercased().components(separatedBy:\
    \ boredom).count > 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpi6xjq7hd.swift:12:66: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Int'\n    return S.lowercased().components(separatedBy:\
    \ boredom).count > 1\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    /tmp/tmpi6xjq7hd.swift:12:27: error: value of type 'String' has no member 'components'\n\
    \    return S.lowercased().components(separatedBy: boredom).count > 1\n      \
    \     ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    var count = 0\n    for s in S.split(separator: \".,?!\"\
    ) {\n        \n        if s.starts(with: \"I\") {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp_shlhd75/tmp_shlhd75.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82a1609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82a1300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82a1300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82a12ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_shlhd75                        0x0000563a6581372b <unavailable> + 5931

    5    libc.so.6                          0x00002b82a17f5460 __libc_start_main +
    245

    6    tmp_shlhd75                        0x0000563a65813309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.isEmpty {\n        return 0\n    }\n    let firstWord = S.split(separator:\
    \ \".\", omittingEmptySubsequences: false).first!\n    if firstWord.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return 0\n    }\n\n    let indexOfFirstI\
    \ = firstWord.rangeOfCharacter(from: CharacterSet.letters.inverted)\n    if indexOfFirstI\
    \ == nil {\n        return 0\n    }\n\n    return S.range(of: \".\", options:\
    \ .backwards)?.lowerBound?.distance(to: indexOfFirstI.upperBound!) ?? 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqa1yj18n.swift:15:41: error: cannot find 'CharacterSet' in scope\n\
    \    if firstWord.rangeOfCharacter(from: CharacterSet.letters) == nil {\n    \
    \                                    ^~~~~~~~~~~~\n/tmp/tmpqa1yj18n.swift:15:18:\
    \ error: value of type 'String.SubSequence' (aka 'Substring') has no member 'rangeOfCharacter'\n\
    \    if firstWord.rangeOfCharacter(from: CharacterSet.letters) == nil {\n    \
    \   ~~~~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpqa1yj18n.swift:19:58: error: cannot find\
    \ 'CharacterSet' in scope\n    let indexOfFirstI = firstWord.rangeOfCharacter(from:\
    \ CharacterSet.letters.inverted)\n                                           \
    \              ^~~~~~~~~~~~\n/tmp/tmpqa1yj18n.swift:19:35: error: value of type\
    \ 'String.SubSequence' (aka 'Substring') has no member 'rangeOfCharacter'\n  \
    \  let indexOfFirstI = firstWord.rangeOfCharacter(from: CharacterSet.letters.inverted)\n\
    \                        ~~~~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpqa1yj18n.swift:24:14:\
    \ error: value of type 'String' has no member 'range'\n    return S.range(of:\
    \ \".\", options: .backwards)?.lowerBound?.distance(to: indexOfFirstI.upperBound!)\
    \ ?? 0\n           ~ ^~~~~\n/tmp/tmpqa1yj18n.swift:24:39: error: cannot infer\
    \ contextual base in reference to member 'backwards'\n    return S.range(of: \"\
    .\", options: .backwards)?.lowerBound?.distance(to: indexOfFirstI.upperBound!)\
    \ ?? 0\n                                     ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(\".\").map(String.init)\n    \n    if words[0]\
    \ == \"I\" {\n        return words.count\n    }\n    else if words[0] == \"!\"\
    \ {\n        return words.count - 1\n    }\n    else {\n        return -1\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\")\
    \ == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqjtz84fy.swift:11:19: error: no exact matches in call to instance\
    \ method 'split'\n    let words = S.split(\".\").map(String.init)\n          \
    \        ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return len(S) - is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2alesn8c.swift:11:12: error: cannot find 'len' in scope\n    return\
    \ len(S) - is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~\n/tmp/tmp2alesn8c.swift:11:21:\
    \ error: cannot find 'is_bored_helper' in scope\n    return len(S) - is_bored_helper(S,\
    \ \"\", 0, 0, 0)\n                    ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var result = 0\n    var i = 0\n    var j = 0\n\n    while (i <\
    \ S.count) {\n        let char = S[i]\n        i += 1\n\n        if (char == \"\
    I\") {\n            j = i\n            var count = 0\n            while (j < S.count)\
    \ {\n                if (S[j] == \".\") {\n                    count += 1\n  \
    \              } else if (S[j] == \"?\") {\n                    count += 1\n \
    \               } else if (S[j] == \"!\") {\n                    count += 1\n\
    \                }\n\n                j += 1\n            }\n\n            if\
    \ (count == 0) {\n                result++\n            }\n        } else if (char\
    \ == \".\" || char == \"?\" || char == \"!\") {\n            if (j != i) {\n \
    \               result++\n            }\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc6dop1iz.swift:16:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = S[i]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpc6dop1iz.swift:23:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if (S[j] == \".\") {\n                    ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc6dop1iz.swift:25:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                } else if (S[j] == \"?\") {\n \
    \                          ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpc6dop1iz.swift:27:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                } else if (S[j] == \"!\") {\n                           ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc6dop1iz.swift:35:23:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      result++\n                      ^~\n/tmp/tmpc6dop1iz.swift:39:23: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n                result++\n\
    \                      ^~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard S.starts(with: \"I\", caseSensitive: false), S.count ==\
    \ 1 else {\n        return 0\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpt_o7y7yd.swift:11:46: error: extra argument 'caseSensitive' in\
    \ call\n    guard S.starts(with: \"I\", caseSensitive: false), S.count == 1 else\
    \ {\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // BEGIN Practice Problem 3\n    return S.range(of: \"^I\", options:\
    \ .regularExpression).count == 0 ? 0 : 1\n    // END Practice Problem 3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3cejgn9.swift:12:14: error: value of type 'String' has no member\
    \ 'range'\n    return S.range(of: \"^I\", options: .regularExpression).count ==\
    \ 0 ? 0 : 1\n           ~ ^~~~~\n/tmp/tmpj3cejgn9.swift:12:40: error: cannot infer\
    \ contextual base in reference to member 'regularExpression'\n    return S.range(of:\
    \ \"^I\", options: .regularExpression).count == 0 ? 0 : 1\n                  \
    \                    ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var i: Int = 0\n    var j: Int = 0\n    for j in S.characters.indices{\n\
    \        if S[j] == \".\" || S[j] == \",\" || S[j] == \";\" || S[j] == \":\" ||\
    \ S[j] == \";\" || S[j] == \".\" || S[j] == \"!\" || S[j] == \"?\" {\n       \
    \     i = i + 1\n        }\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz_mn8l3u.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for j in S.characters.indices{\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz_mn8l3u.swift:12:9:\
    \ warning: variable 'j' was never used; consider replacing with '_' or removing\
    \ it\n    var j: Int = 0\n        ^\n        _\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\treturn is_bored_impl(S: S, words: S.get_word_list())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpajcr6sfq.swift:11:9: error: cannot find 'is_bored_impl' in scope\n\
    \        return is_bored_impl(S: S, words: S.get_word_list())\n              \
    \ ^~~~~~~~~~~~~\n/tmp/tmpajcr6sfq.swift:11:38: error: value of type 'String' has\
    \ no member 'get_word_list'\n        return is_bored_impl(S: S, words: S.get_word_list())\n\
    \                                          ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var counter = Int()\n    for word in S.split(separator: \".?!\"\
    ) {\n        if word.first?.unicodeScalars.first == \"I\" {\n            counter\
    \ += 1\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpzjhuz01o/tmpzjhuz01o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2d683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2d37ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2d37a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2d3797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjhuz01o                        0x000055777016d7db <unavailable> + 6107

    5    libc.so.6                          0x00002b7e2d86f460 __libc_start_main +
    245

    6    tmpzjhuz01o                        0x000055777016d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.count < 1 {\n        return 0\n    }\n    var boredom_count\
    \ = 0\n    if S.hasPrefix(\"I\") {\n        boredom_count = 1\n    }\n    if S.hasSuffix(\"\
    .\") || S.hasSuffix(\"?\") || S.hasSuffix(\"!\") {\n        boredom_count = boredom_count\
    \ + 1\n    }\n    return boredom_count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp70oi2cbo/tmp70oi2cbo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ab7ba0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ab7897b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ab7897988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ab78967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70oi2cbo                        0x0000556a61b8e40b <unavailable> + 5131

    5    libc.so.6                          0x00002b4ab7d8c460 __libc_start_main +
    245

    6    tmp70oi2cbo                        0x0000556a61b8dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return boredoms(S: S).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpt5fngafp.swift:11:12: error: cannot find 'boredoms' in scope\n\
    \    return boredoms(S: S).count\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\tvar boredoms: Int = 0\n\tfor _,w := range S.split(\" \") {\n\t\t\
    switch w[0] {\n\t\tcase \"I\":\n\t\t\tboredoms += 1\n\t\tdefault:\n\t\t\tbreak\n\
    \t\t}\n\t}\n\treturn boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp98ufdh9j.swift:12:7: error: expected 'in' after for-each pattern\n\
    \        for _,w := range S.split(\" \") {\n             ^\n/tmp/tmp98ufdh9j.swift:12:7:\
    \ error: expected Sequence expression for for-each loop\n        for _,w := range\
    \ S.split(\" \") {\n             ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_recursive(S.characters\n        .filter({ $0 ==\
    \ '.' || $0 == '?' || $0 == '!' })\n        .map({ String($0) }))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpogh4_iem.swift:12:25: error: single-quoted string literal found,\
    \ use '\"'\n        .filter({ $0 == '.' || $0 == '?' || $0 == '!' })\n       \
    \                 ^~~\n                        \".\"\n/tmp/tmpogh4_iem.swift:12:38:\
    \ error: single-quoted string literal found, use '\"'\n        .filter({ $0 ==\
    \ '.' || $0 == '?' || $0 == '!' })\n                                     ^~~\n\
    \                                     \"?\"\n/tmp/tmpogh4_iem.swift:12:51: error:\
    \ single-quoted string literal found, use '\"'\n        .filter({ $0 == '.' ||\
    \ $0 == '?' || $0 == '!' })\n                                                \
    \  ^~~\n                                                  \"!\"\n/tmp/tmpogh4_iem.swift:11:12:\
    \ error: cannot find 'is_bored_recursive' in scope\n    return is_bored_recursive(S.characters\n\
    \           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let arr = S.components(separatedBy: \".?!\").map { $0.isEmpty\
    \ ? 0 : $0.count }\n    return arr.max().map { $0 + 1 }.min()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvyvhr6xu.swift:11:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = S.components(separatedBy: \".?!\").map { $0.isEmpty\
    \ ? 0 : $0.count }\n              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let S = S.lowercased()\n    guard let index = S.range(of: \"i\"\
    ) else {\n        return 0\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp95knpxwy.swift:12:25: error: value of type 'String' has no member\
    \ 'range'\n    guard let index = S.range(of: \"i\") else {\n                 \
    \     ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var i = 0\n    for c in S {\n        if c == \".\" || c == \"\
    ?\" || c == \"!\" {\n            i = i + 1\n        }\n    }\n    return i\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgzdppect/tmpgzdppect.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c846d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c843c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c843c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c843c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzdppect                        0x0000564b5468a4bb <unavailable> + 5307

    5    libc.so.6                          0x00002b3c848be460 __libc_start_main +
    245

    6    tmpgzdppect                        0x0000564b5468a099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  var numboredoms = 0\n\n  for s in S.split(separator: \".,?!\"){\n\
    \    if s.starts(with: \"I\") {\n      numboredoms += 1\n    }\n  }\n\n  return\
    \ numboredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp6t352_50/tmp6t352_50.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4349eccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4349bc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4349bc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4349bc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6t352_50                        0x0000557a81bd872b <unavailable> + 5931

    5    libc.so.6                          0x00002b434a0b8460 __libc_start_main +
    245

    6    tmp6t352_50                        0x0000557a81bd8309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var result = 0\n    for word in S.split(\" \") {\n        switch\
    \ word {\n        case \"I\":\n        default:\n            result += 1 // boredom\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2paypzme.swift:14:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"I\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp2paypzme.swift:12:19: error: no exact matches\
    \ in call to instance method 'split'\n    for word in S.split(\" \") {\n     \
    \             ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return is_bored_3(S.characters)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3almrc5_.swift:11:10: error: cannot find 'is_bored_3' in scope\n\
    \  return is_bored_3(S.characters)\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: implement this!\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpe8q04so2/tmpe8q04so2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569383ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5693531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5693531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56935307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8q04so2                        0x0000558f4c7933b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b5693a26460 __libc_start_main +
    245

    6    tmpe8q04so2                        0x0000558f4c792ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var sum = 0\n    for word in S.split(\" \") {\n        switch\
    \ word.first! {\n        case \"I\":\n            sum += 1\n        case \"?\"\
    , \"!\", \".\":\n        default:\n            break\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpurt86ai_.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"?\", \"!\", \".\":\n     \
    \   ^~~~~~~~~~~~~~~~~~~\n                            break\n/tmp/tmpurt86ai_.swift:12:19:\
    \ error: no exact matches in call to instance method 'split'\n    for word in\
    \ S.split(\" \") {\n                  ^\nSwift.Sequence:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n    \
    \                                   ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return bored(S: string, S2: string.split(\" \"))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphl9n0kqf.swift:11:12: error: cannot find 'bored' in scope\n   \
    \ return bored(S: string, S2: string.split(\" \"))\n           ^~~~~\n/tmp/tmphl9n0kqf.swift:11:21:\
    \ error: cannot find 'string' in scope\n    return bored(S: string, S2: string.split(\"\
    \ \"))\n                    ^~~~~~\n/tmp/tmphl9n0kqf.swift:11:33: error: cannot\
    \ find 'string' in scope\n    return bored(S: string, S2: string.split(\" \"))\n\
    \                                ^~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    var boredoms = 0\n    for words in S.split(separator:\
    \ \".,?!\") {\n        if words.rangeOfString(\"I\") != nil {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptph4mh09.swift:14:18: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'rangeOfString'\n        if words.rangeOfString(\"\
    I\") != nil {\n           ~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, bored_words())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprwqdp4eb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, bored_words())\n           ^~~~~~~~~~~~~~~\n/tmp/tmprwqdp4eb.swift:11:31:\
    \ error: cannot find 'bored_words' in scope\n    return is_bored_helper(S, bored_words())\n\
    \                              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return count_boredom(S) == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpffz56fhq.swift:11:12: error: cannot find 'count_boredom' in scope\n\
    \    return count_boredom(S) == 0\n           ^~~~~~~~~~~~~\n/tmp/tmpffz56fhq.swift:11:29:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Int'\n\
    \    return count_boredom(S) == 0\n           ~~~~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.first == \"I\" {\n        return 0\n    }\n    \n    var\
    \ count = 0\n    for s in S {\n        switch s {\n        case \"?\", \".\",\
    \ \"!\": count++\n        default: break\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2747a2qi.swift:18:34: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        case \"?\", \".\", \"!\": count++\n          \
    \                       ^~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return count_boredoms(S: S)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpa01tqzqg.swift:11:12: error: cannot find 'count_boredoms' in scope\n\
    \    return count_boredoms(S: S)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredCount = 0\n    for s in S.split(separator: \".\") {\n\
    \        if s[0] == \"I\" {\n            boredCount += 1\n        }\n    }\n \
    \   return boredCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6178dgv9.swift:13:13: error: no exact matches in call to subscript\
    \ \n        if s[0] == \"I\" {\n            ^\nSwift.Substring:3:12: note: candidate\
    \ expects value of type 'Range<Substring.Index>' (aka 'Range<String.Index>') for\
    \ parameter #1 (got 'Int')\n    public subscript(r: Range<Substring.Index>) ->\
    \ Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredom = [\"I\", \"are\", \"you\", \"the\", \"i\", \"you\"\
    , \"the\", \"the\", \"the\"]\n    let split = S.characters.split(separator: boredom).map(String.init)\n\
    \    return split.count { $0 == boredom[0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1zsy2ctj.swift:12:19: error: instance method 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ requires the types 'String.Element' (aka 'Character') and 'String' be equivalent\n\
    \    let split = S.characters.split(separator: boredom).map(String.init)\n   \
    \               ^\n_StringProcessing.Collection:3:17: note: where 'Self.Element'\
    \ = 'String.Element' (aka 'Character'), 'C.Element' = 'String'\n    public func\
    \ split<C>(separator: C, maxSplits: Int = .max, omittingEmptySubsequences: Bool\
    \ = true) -> [Self.SubSequence] where C : Collection, Self.Element == C.Element\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: Use a regex to solve this problem\n    var count = 0\n\
    \    for word in S.split(separator: \".?,!\") {\n        if word == \"I\" {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpg6gfgwq3/tmpg6gfgwq3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1637322c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1637019b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1637019988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16370187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6gfgwq3                        0x000055983b6817b2 <unavailable> + 6066

    5    libc.so.6                          0x00002b163750e460 __libc_start_main +
    245

    6    tmpg6gfgwq3                        0x000055983b6812e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: implement a function to determine if a sentence\
    \ is a boredom or not\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp98myvv54/tmp98myvv54.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06cccecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06cc9e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06cc9e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06cc9e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98myvv54                        0x00005574965dd3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b06cced8460 __libc_start_main +
    245

    6    tmp98myvv54                        0x00005574965dcee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredom = [\"I\".\".\".\"!\"]\n    return boredom.filter({\
    \ S[$0.startIndex] == \"I\" }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_wijtayl.swift:11:24: error: expected member name following '.'\n\
    \    let boredom = [\"I\".\".\".\"!\"]\n                       ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_internal(S: S, Boredoms: Boredoms, delimiters:\
    \ [\".\", \"?\", \"!\"])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbhmnp7h8.swift:11:12: error: cannot find 'is_bored_internal' in\
    \ scope\n    return is_bored_internal(S: S, Boredoms: Boredoms, delimiters: [\"\
    .\", \"?\", \"!\"])\n           ^~~~~~~~~~~~~~~~~\n/tmp/tmpbhmnp7h8.swift:11:46:\
    \ error: cannot find 'Boredoms' in scope\n    return is_bored_internal(S: S, Boredoms:\
    \ Boredoms, delimiters: [\".\", \"?\", \"!\"])\n                             \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var sentence = S.split(\".\").filter({ $0\
    \ == \"I\" })\n    var lastWord = \"\"\n    for word in sentence.prefix(sentence.length\
    \ - 1) {\n        if word == \"I\" {\n            boredoms += 1\n            lastWord\
    \ = word\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjqm3xl56.swift:12:28: error: missing argument label 'separator:'\
    \ in call\n    var sentence = S.split(\".\").filter({ $0 == \"I\" })\n       \
    \                    ^\n                           separator: \n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words    = S.characters.split(separator: \".?!\").map{ $0.trimmingCharacters(in:\
    \ .whitespaces) }\n    let boredoms = [\"I\", \"a\", \"I\", \"a\", \"I\", \"a\"\
    , \"I\", \"a\", \"I\"]\n    let borems   = boredoms.filter({ words.contains($0)\
    \ })\n    return borems.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0fx6u_92.swift:11:65: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'trimmingCharacters'\n    let words    = S.characters.split(separator:\
    \ \".?!\").map{ $0.trimmingCharacters(in: .whitespaces) }\n                  \
    \                                           ~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp0fx6u_92.swift:11:89:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   let words    = S.characters.split(separator: \".?!\").map{ $0.trimmingCharacters(in:\
    \ .whitespaces) }\n                                                          \
    \                             ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard S.count >= 2 else {\n        return 0\n    }\n    var result\
    \ = 1\n    if S.startsWith(\"I\", options: .literal) != nil {\n        result\
    \ = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpsf19mm0x.swift:15:10: error: value of type 'String' has no member\
    \ 'startsWith'\n    if S.startsWith(\"I\", options: .literal) != nil {\n     \
    \  ~ ^~~~~~~~~~\n/tmp/tmpsf19mm0x.swift:15:36: error: cannot infer contextual\
    \ base in reference to member 'literal'\n    if S.startsWith(\"I\", options: .literal)\
    \ != nil {\n                                  ~^~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard S.hasPrefix(\"I\") else {\n        return 0\n    }\n   \
    \ guard S.hasSuffix(\" .\") else {\n        return 0\n    }\n    guard S.hasSuffix(\"\
    \ ?\") else {\n        return 0\n    }\n    guard S.hasSuffix(\" !\") else {\n\
    \        return 0\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpreyewnx4/tmpreyewnx4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f120b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f11da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f11da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f11da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpreyewnx4                        0x000055d33e4c2462 <unavailable> + 5218

    5    libc.so.6                          0x00002b5f1229e460 __libc_start_main +
    245

    6    tmpreyewnx4                        0x000055d33e4c1f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let S = S.trimmingCharacters(in: CharacterSet(charactersIn:\
    \ \",.?!\")) else { return 0 }\n    return S.hasPrefix(\"I\") && S.count > 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_hmwajcu.swift:11:44: error: cannot find 'CharacterSet' in scope\n\
    \    guard let S = S.trimmingCharacters(in: CharacterSet(charactersIn: \",.?!\"\
    )) else { return 0 }\n                                           ^~~~~~~~~~~~\n\
    /tmp/tmp_hmwajcu.swift:11:21: error: value of type 'String' has no member 'trimmingCharacters'\n\
    \    guard let S = S.trimmingCharacters(in: CharacterSet(charactersIn: \",.?!\"\
    )) else { return 0 }\n                  ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp_hmwajcu.swift:12:29:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Int'\n\
    \    return S.hasPrefix(\"I\") && S.count > 2\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(\" \")\n    var bored = 0\n    for word in\
    \ words {\n        guard let word = word.capitalized else { continue }\n     \
    \   switch word {\n        case \"I\":\n            bored += 1\n        case \"\
    ?\", \".\", \"!\":\n            break\n        default:\n            continue\
    \ //word isn't in [\"I\", \".\", \"!\"]\n        }\n    }\n    return bored\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpd4hlljdi.swift:11:19: error: no exact matches in call to instance\
    \ method 'split'\n    let words = S.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var counter = 0;\n    for word in S.split(separator: \".,?,!\"\
    ) {\n        if word == \"I\" {\n            counter++;\n        }\n    }\n  \
    \  return counter;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9wvzx28t.swift:14:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            counter++;\n                   ^~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    let sentences = S.split(separator: \".?!\")\n    return\
    \ sentences.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpxb6hddj7/tmpxb6hddj7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac72fef1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac72fbe8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac72fbe8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac72fbe77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb6hddj7                        0x00005590d379f6bb <unavailable> + 5819

    5    libc.so.6                          0x00002ac7300dd460 __libc_start_main +
    245

    6    tmpxb6hddj7                        0x00005590d379f299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  let chars = S.characters.map { String($0) }\n  let start = find(chars,\
    \ \"I\")\n  if start == nil {\n    return 0\n  }\n  var count = 0\n  var i = 0\n\
    \  for i = start.index; !chars[i].isLetterOrDigit; i++ {\n    if chars[i] == \"\
    !\" || chars[i] == \".\" || chars[i] == \"?\" {\n      break\n    }\n  }\n  for\
    \ ; i < S.characters.count; i++ {\n    if chars[i] == \"I\" {\n      break\n \
    \   }\n    if chars[i] == \"!\" || chars[i] == \".\" || chars[i] == \"?\" {\n\
    \      break\n    }\n  }\n  for i = 1; i < S.characters.count; i++ {\n    if chars[i]\
    \ == \"I\" || chars[i] == \"!\" || chars[i] == \".\" || chars[i] == \"?\" {\n\
    \      break\n    }\n  }\n  guard i == S.characters.count else {\n    return 0\n\
    \  }\n  count += i - start.index\n  return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzyxn8376.swift:18:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = start.index; !chars[i].isLetterOrDigit; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzyxn8376.swift:23:3: error: C-style for statement has been removed in\
    \ Swift 3\n  for ; i < S.characters.count; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzyxn8376.swift:31:3: error: C-style for statement has been removed in\
    \ Swift 3\n  for i = 1; i < S.characters.count; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzyxn8376.swift:11:17: error: 'characters' is unavailable: Please use String\
    \ directly\n  let chars = S.characters.map { String($0) }\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzyxn8376.swift:12:15:\
    \ error: cannot find 'find' in scope\n  let start = find(chars, \"I\")\n     \
    \         ^~~~\n/tmp/tmpzyxn8376.swift:36:16: error: 'characters' is unavailable:\
    \ Please use String directly\n  guard i == S.characters.count else {\n       \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let S = S.lowercased()\n    \n    let boredom = NSPredicate(format:\
    \ \"SELF MATCHES %@\", #\"^[I].*$\")\n    return S.count(byWord: boredom)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpcmaql1to.swift:13:58: error: unterminated string literal\n    let\
    \ boredom = NSPredicate(format: \"SELF MATCHES %@\", #\"^[I].*$\")\n         \
    \                                                ^\n/tmp/tmpcmaql1to.swift:13:19:\
    \ error: cannot find 'NSPredicate' in scope\n    let boredom = NSPredicate(format:\
    \ \"SELF MATCHES %@\", #\"^[I].*$\")\n                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    \n    for char in S {\n        switch char\
    \ {\n        case 'I':\n        case 'a':\n        case 'e':\n        case 'i':\n\
    \        case 'o':\n        case 'u':\n        case 'y':\n            count +=\
    \ 1\n        default:\n            break\n        }\n    }\n    \n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqdh8_flu.swift:15:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'I':\n             ^~~\n             \"I\"\n/tmp/tmpqdh8_flu.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'I':\n        ^~~~~~~~~\n                  break\n/tmp/tmpqdh8_flu.swift:16:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'a':\n   \
    \          ^~~\n             \"a\"\n/tmp/tmpqdh8_flu.swift:16:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmpqdh8_flu.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpqdh8_flu.swift:17:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmpqdh8_flu.swift:18:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmpqdh8_flu.swift:18:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmpqdh8_flu.swift:19:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'o':\n   \
    \          ^~~\n             \"o\"\n/tmp/tmpqdh8_flu.swift:19:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'o':\n        ^~~~~~~~~\n                  break\n/tmp/tmpqdh8_flu.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'u':\n   \
    \          ^~~\n             \"u\"\n/tmp/tmpqdh8_flu.swift:20:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'u':\n        ^~~~~~~~~\n                  break\n/tmp/tmpqdh8_flu.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'y':\n   \
    \          ^~~\n             \"y\"\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \".\")\n    let startsWithI = words.filter{$0.hasPrefix(\"\
    I\")}\n    let countOfI = startsWithI.count\n    return countOfI\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp2fjp2flq/tmp2fjp2flq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeae920ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeae8f05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeae8f05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeae8f047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2fjp2flq                        0x000055c69762572b <unavailable> + 5931

    5    libc.so.6                          0x00002aeae93fa460 __libc_start_main +
    245

    6    tmp2fjp2flq                        0x000055c697625309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_str(S).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp2xo2dxc.swift:11:12: error: cannot find 'is_bored_str' in scope\n\
    \    return is_bored_str(S).count\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    var idx = 0\n    while idx < S.count {\n  \
    \      if S[idx..<idx+3] == \"I\" {\n            count += 1\n        }\n     \
    \   idx += 3\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbs3gyd64.swift:14:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if S[idx..<idx+3] == \"I\" {\n           ^~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let pattern = \"^[i.!]+\\.$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let matches = regex.matches(in: S, options: [], range:\
    \ NSRange(S.startIndex..., in: S))\n    return matches.count ?? 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6xin5d4s.swift:11:28: error: invalid escape sequence in literal\n\
    \    let pattern = \"^[i.!]+\\.$\"\n                           ^\n/tmp/tmp6xin5d4s.swift:12:22:\
    \ error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp6xin5d4s.swift:13:60:\
    \ error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: S,\
    \ options: [], range: NSRange(S.startIndex..., in: S))\n                     \
    \                                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard S.isEmpty == false else {\n        return 0\n    }\n   \
    \ var count = 0\n    let words = S.components(separatedBy: .whitespacesAndNewlines)\n\
    \    \n    for word in words {\n        let s = word.characters.first\n      \
    \  if s == Character(\"I\") {\n            count += 1\n        }\n    }\n    \n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoql16846.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: .whitespacesAndNewlines)\n\
    \                ~ ^~~~~~~~~~\n/tmp/tmpoql16846.swift:15:44: error: cannot infer\
    \ contextual base in reference to member 'whitespacesAndNewlines'\n    let words\
    \ = S.components(separatedBy: .whitespacesAndNewlines)\n                     \
    \                     ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    \n    // Your code here\n    \n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp1a3yhkix/tmp1a3yhkix.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1920afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac191da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac191da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac191da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1a3yhkix                        0x000055c1a70c43b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ac19229b460 __libc_start_main +
    245

    6    tmp1a3yhkix                        0x000055c1a70c3ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S.characters)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpt8cs6jps.swift:11:21: error: missing argument label 'S:' in call\n\
    \    return is_bored(S.characters)\n                    ^\n                  \
    \  S: \n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    if S.hasPrefix(\"I\") {\n        return\
    \ S.count(\"I\") + (S.count(\"!\") + S.count(\"?\"))\n    } else {\n        return\
    \ 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpuuw5d85g.swift:13:18: error: cannot call value of non-function\
    \ type 'Int'\n        return S.count(\"I\") + (S.count(\"!\") + S.count(\"?\"\
    ))\n                 ^\n/tmp/tmpuuw5d85g.swift:13:34: error: cannot call value\
    \ of non-function type 'Int'\n        return S.count(\"I\") + (S.count(\"!\")\
    \ + S.count(\"?\"))\n                                 ^\n/tmp/tmpuuw5d85g.swift:13:49:\
    \ error: cannot call value of non-function type 'Int'\n        return S.count(\"\
    I\") + (S.count(\"!\") + S.count(\"?\"))\n                                   \
    \             ^\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var counter: Int = 0\n    for word in S.split(separator: \".,?!\"\
    ) {\n        if word == \"I\" {\n            counter += 1\n        }\n    }\n\
    \    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpez36prtr/tmpez36prtr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefcf903c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefcf5fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefcf5fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefcf5f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpez36prtr                        0x0000557f39a2b7b2 <unavailable> + 6066

    5    libc.so.6                          0x00002aefcfaef460 __libc_start_main +
    245

    6    tmpez36prtr                        0x0000557f39a2b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    let I = \"I\"\n    var count = 0\n    \n    S += \"!\"\n\
    \    S += \".\"\n    S += \"?\"\n    S += \"!\"\n    \n    for s in S.characters.dropLast()\
    \ {\n        switch s {\n        case \"I\":\n        case \"!\":\n        case\
    \ \"?\":\n            count += 1\n        default:\n            break\n      \
    \  }\n    }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpms5otghu.swift:22:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"I\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpms5otghu.swift:23:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"!\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpms5otghu.swift:15:7: error:\
    \ left side of mutating operator isn't mutable: 'S' is a 'let' constant\n    S\
    \ += \"!\"\n    ~ ^\n/tmp/tmpms5otghu.swift:16:7: error: left side of mutating\
    \ operator isn't mutable: 'S' is a 'let' constant\n    S += \".\"\n    ~ ^\n/tmp/tmpms5otghu.swift:17:7:\
    \ error: left side of mutating operator isn't mutable: 'S' is a 'let' constant\n\
    \    S += \"?\"\n    ~ ^\n/tmp/tmpms5otghu.swift:18:7: error: left side of mutating\
    \ operator isn't mutable: 'S' is a 'let' constant\n    S += \"!\"\n    ~ ^\n/tmp/tmpms5otghu.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for s in\
    \ S.characters.dropLast() {\n               ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    var words = S.characters.split{$0 == \"?\"\
    } + S.characters.split{$0 == \"!\"} + S.characters.split{$0 == \".\"}\n    guard\
    \ !words.isEmpty else {\n        return count\n    }\n    for word in words {\n\
    \        if word == \"I\" {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1wrw_vmq.swift:12:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    var words = S.characters.split{$0 == \"?\"} + S.characters.split{$0\
    \ == \"!\"} + S.characters.split{$0 == \".\"}\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1wrw_vmq.swift:12:51:\
    \ error: 'characters' is unavailable: Please use String directly\n    var words\
    \ = S.characters.split{$0 == \"?\"} + S.characters.split{$0 == \"!\"} + S.characters.split{$0\
    \ == \".\"}\n                                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1wrw_vmq.swift:12:83: error: 'characters'\
    \ is unavailable: Please use String directly\n    var words = S.characters.split{$0\
    \ == \"?\"} + S.characters.split{$0 == \"!\"} + S.characters.split{$0 == \".\"\
    }\n                                                                          \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1wrw_vmq.swift:12:9:\
    \ warning: variable 'words' was never mutated; consider changing to 'let' constant\n\
    \    var words = S.characters.split{$0 == \"?\"} + S.characters.split{$0 == \"\
    !\"} + S.characters.split{$0 == \".\"}\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, is_bored_words)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmph5b0q4h6.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, is_bored_words)\n           ^~~~~~~~~~~~~~~\n/tmp/tmph5b0q4h6.swift:11:31:\
    \ error: cannot find 'is_bored_words' in scope\n    return is_bored_helper(S,\
    \ is_bored_words)\n                              ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return len(S) - count_boredoms(S: S) == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpa9bwu5z_.swift:11:12: error: cannot find 'len' in scope\n    return\
    \ len(S) - count_boredoms(S: S) == 0\n           ^~~\n/tmp/tmpa9bwu5z_.swift:11:21:\
    \ error: cannot find 'count_boredoms' in scope\n    return len(S) - count_boredoms(S:\
    \ S) == 0\n                    ^~~~~~~~~~~~~~\n/tmp/tmpa9bwu5z_.swift:11:42: error:\
    \ cannot convert return expression of type 'Bool' to return type 'Int'\n    return\
    \ len(S) - count_boredoms(S: S) == 0\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let wordList: Set<String> = [\"I\"]\n    return countStart(S,\
    \ wordList)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmph7l_cemk.swift:12:12: error: cannot find 'countStart' in scope\n\
    \    return countStart(S, wordList)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.contains(\".\") || S.contains(\"?\") || S.contains(\"!\"\
    ) {\n        return 0\n    }\n    if S.contains(\"I\") {\n        return 1\n \
    \   }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpqcvekmsf/tmpqcvekmsf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cadc95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cad98cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cad98c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cad98b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcvekmsf                        0x000055eabcf79572 <unavailable> + 5490

    5    libc.so.6                          0x00002b4cade81460 __libc_start_main +
    245

    6    tmpqcvekmsf                        0x000055eabcf790a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var bored = 0\n    for let word in S.split(separator: \".\") {\n\
    \        bored += is_bored_word(word: word)\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjjbbixl0.swift:12:9: error: 'let' pattern cannot appear nested\
    \ in an already immutable context\n    for let word in S.split(separator: \".\"\
    ) {\n        ^\n/tmp/tmpjjbbixl0.swift:13:18: error: cannot find 'is_bored_word'\
    \ in scope\n        bored += is_bored_word(word: word)\n                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: check whether S.startsWith(\"I\")\n    let N = S.characters.count\n\
    \    var bored = 0\n    for _ in 0..<S.characters.count {\n        bored += is_bored(S.substring(with:\
    \ NSRange.init(location: 1, length: 2)))\n    }\n    return bored + N\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjmdkqnyq.swift:12:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let N = S.characters.count\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdkqnyq.swift:14:20:\
    \ error: 'characters' is unavailable: Please use String directly\n    for _ in\
    \ 0..<S.characters.count {\n                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjmdkqnyq.swift:15:45: error: cannot find\
    \ 'NSRange' in scope\n        bored += is_bored(S.substring(with: NSRange.init(location:\
    \ 1, length: 2)))\n                                            ^~~~~~~\n/tmp/tmpjmdkqnyq.swift:15:27:\
    \ error: missing argument label 'S:' in call\n        bored += is_bored(S.substring(with:\
    \ NSRange.init(location: 1, length: 2)))\n                          ^\n      \
    \                    S: \n/tmp/tmpjmdkqnyq.swift:15:29: error: value of type 'String'\
    \ has no member 'substring'\n        bored += is_bored(S.substring(with: NSRange.init(location:\
    \ 1, length: 2)))\n                          ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978626
