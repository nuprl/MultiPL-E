name: HumanEval_86_anti_shuffle
language: swift
prompt: "\n/// Write a function that takes a string and returns an ordered version\
  \ of it.\n/// Ordered version of string, is a string where all words (separated\
  \ by space)\n/// are replaced by a new word where all the characters arranged in\n\
  /// ascending order based on ascii value.\n/// Note: You should keep the order of\
  \ words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(s:\
  \ \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n/// \"ehllo\"\n/// >>>\
  \ anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
  \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
  assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\"\
  ) == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s:\
  \ \"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
  \ How aer ?ouy\")"
completions: ["    var _s = s\n    _s = replace(_s, \" \")\n    _s = replace(_s, \"\
    \ \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s, \" \")\n    _s = replace(_s,\
    \ \" \")\n    _s = replace(_s, \" \")\n    _s = replace", "    if s == \"\" {\n\
    \        return s\n    }\n    \n    var resultingString = s\n    var words = s.componentsSeparatedByString(\"\
    \ \")\n    if words.count > 0 {\n        words.sort(byAscendingAscii)\n      \
    \  resultingString = words.joinWithSeparator(\" \")\n    }\n    return resultingString",
  "    var str = s\n    for _ in stride(from: s.count, to: 0, by: -1) {\n        let\
    \ idx = str.index(str.startIndex, offsetBy: 0)\n        let r = Int(Int(str.utf8[str.index(idx,\
    \ offsetBy: 1)] - 97) + 1)\n        str = String(str.suffix(from: idx + 1))\n\
    \        str.replacingOccurrences(of: \" \", with: r, options: .regularExpression)\n\
    \        str.replacingOccurrences(of: \"<\", with: r, options: .regularExpression)\n\
    \        str.replacingOccurrences(of: \">\", with: r, options: .regularExpression)\n\
    \    }\n    return str", "    var output = \"\"\n    \n    for _,char in enumerate(s)\
    \ {\n        if char != \" \" {\n            output += String(char)\n        }\
    \ else {\n            output += String(char).swapcase()\n        }\n    }\n  \
    \  \n    return output", "    var words: [String] = []\n    for c in s.unicodeScalars\
    \ {\n        words.append(c.value.capitalizedString)\n    }\n    var new_word\
    \ = \"\"\n    for c in words {\n        if c.characters.count > 0 {\n        \
    \    new_word = new_word + c.characters.first!\n        }\n    }\n    return new_word",
  "    if s == \"\" {\n        return \"\"\n    }\n\n    var orderedString = s\n \
    \   var firstWord = \"\"\n    var lastWord = \"\"\n    var orderedFirstWord =\
    \ \"\"\n    var orderedLastWord = \"\"\n\n    for char in s {\n        if char\
    \ == \" \" {\n            orderedFirstWord += char\n            orderedLastWord\
    \ += char\n            continue\n        }\n        var asciiChar = ord(char)\n\
    \        if orderedLastWord == \"\" {\n            orderedLastWord += char\n \
    \       } else {\n            orderedLastWord += char\n            var nextChar\
    \ = orderedLastWord.characters.last!\n            var nextAsciiChar = ord(nextChar)\n\
    \n            if nextAsciiChar >= asciiChar {\n                orderedLastWord\
    \ = orderedLastWord.characters.dropLast()\n                orderedLastWord +=\
    \ char\n            }\n        }\n        if orderedFirstWord == \"\" {\n    \
    \        orderedFirstWord += char\n        } else {\n            orderedFirstWord\
    \ += char\n            var nextChar = orderedFirstWord.characters.first!\n   \
    \         var nextAsciiChar = ord(nextChar)\n            if nextAsciiChar <= asciiChar\
    \ {\n                orderedFirstWord = orderedFirstWord.characters.dropFirst()\n\
    \                orderedFirstWord += char\n            }\n        }\n    }\n\n\
    \    orderedString = orderedFirstWord.characters.joinWithSeparator(\"\", firstWord,\
    \ orderedLastWord)\n    return orderedString", "    var result = \"\"\n    s.characters.forEach\
    \ {\n        if let char = $0 {\n            result += \"[\" + String(char).utf16.sorted(by:\
    \ >.init).joined() + \"]\"\n        }\n    }\n    return result", "    var chars\
    \ = \"\"\n    for char in s {\n        chars = chars + String(char.unicodeScalars.first!)\
    \ + chars\n    }\n    return chars.reversed().sorted()", '    return s.chars().sorted().reduce("")
    { $0 + String($1) + String($2) }', "    // Your code goes here\n    \n    // remove\
    \ all spaces from both sides\n    s = removeAllSpacesBetweenStringAndLastString(s)\n\
    \    \n    // remove all words separated by spaces\n    s = removeAllWordsSeparatedBySpace(s)\n\
    \    \n    // convert string to lowercase\n    s = s.lowercaseString\n    \n \
    \   // remove all spaces and split string to array of words\n    let splitArray\
    \ = s.components(separatedBy: \" \")\n    \n    // convert to array from string\
    \ to [String]\n    let strArray = splitArray as! [String]\n    \n    // sort array\
    \ in ascending order based on ascii value\n    strArray = strArray.sorted { $0.compare($1)\
    \ == .orderedAscending }\n    \n    // join array to string\n    s = strArray.join(\"\
    \ \")\n    \n    return s", "    let words = s.components(separatedBy: \" \")\n\
    \    var ordered = \"\"\n    var currentWord = \"\"\n    for word in words {\n\
    \        current += word\n        ordered += currentWord\n        currentWord\
    \ = \"\"\n    }\n    if currentWord != \"\" {\n        ordered += currentWord\n\
    \    }\n    return ordered", "    var new_s = \"\"\n    var i = 0\n    var j =\
    \ s.count\n    while i < s.count {\n        var j = j - 1\n        if s[i] ==\
    \ \" \" {\n            j = j - 1\n        }\n        if j == -1 {\n          \
    \  new_s = new_s + s[i]\n            i = i + 1\n        } else {\n           \
    \ if s[i] == s[j] {\n                new_s = new_s + s[i] + s[j]\n           \
    \     i = i + 1\n                j = j - 1\n            } else {\n           \
    \     var c = s[i]\n                new_s = new_s + c\n                i = i +\
    \ 1\n            }\n        }\n    }\n    return new_s", "    var n = s.count\n\
    \    var chars = Array(s.characters)\n    var newString = \"\"\n    chars.sort(<)\n\
    \    for i in 0...n {\n        if i == 0 || chars[i-1] != chars[i] {\n       \
    \     newString = newString + String(chars[i])\n        }\n    }\n    return newString",
  "    if let sentence = s.split(separator: \" \"){\n        var words: [String] =\
    \ []\n        for w in sentence{\n            words.append(w.lowercased())\n \
    \       }\n        words.sort { (s1, s2) in return (s1.compare(s2) < 0)}\n   \
    \     return words.joined(separator: \" \")\n    }\n    return \"\"", "\treturn\
    \ s.shuffled().string()", "    var newString = \"\"\n    var characterToIndex\
    \ = [Character]()\n    for c in s {\n        characterToIndex[Character(c)!] =\
    \ newString.count\n        newString += String(c)\n    }\n\n    for _ in 0..<newString.count\
    \ {\n        var sortedIndex = newString.index(newString.startIndex, offsetBy:\
    \ Int(arc4random_uniform(UInt32(newString.count))))\n        var character = String(characterToIndex[sortedIndex])\n\
    \        characterToIndex[sortedIndex] = nil\n        newString = newString.replacingOccurrences(of:\
    \ character, with: String(characterToIndex[Character(character)!]))\n    }\n \
    \   return newString", "    if s == \"\" {\n        return s\n    }\n    var orderedString\
    \ = s\n    \n    for _, b := range s {\n        for i := 0; i < len(s); i++ {\n\
    \            if s[i] == b {\n                var tempString = s[:i]\n        \
    \        for j := i; j < len(s); j++ {\n                    if s[j] > s[i] {\n\
    \                        tempString += s[j - i]\n                    }\n     \
    \           }\n                orderedString = tempString + s[i+1:]\n        \
    \        break\n            }\n        }\n    }\n    return orderedString", '    return
    anti_shuffle(s.lowercased())', "    var list = s.characters\n    var i = 0\n \
    \   var j = list.count\n    while i < j {\n        var temp = list[i]\n      \
    \  var j1 = j-1\n        while j1 >= 0 && temp < list[j1] {\n            list[j1]\
    \ = list[j1-1]\n            j1--\n        }\n        list[j1] = temp\n       \
    \ i = i + 1\n        j = j - 1\n    }\n    return String(list)", "    let r =\
    \ s.characters.map { String($0) }\n    return r.sorted().joined()", "    var result\
    \ = \"\"\n    var firstLetterIndex = 0\n    for word in s.split(separator: \"\
    \ \") {\n        let firstLetter = s[firstLetterIndex]\n        result += String(firstLetter)\n\
    \        for letter in word {\n            firstLetterIndex += 1\n           \
    \ result += String(s[firstLetterIndex])\n        }\n        result += \" \"\n\
    \    }\n    return result", "    var result = \"\"\n    for c in self.chars()\
    \ {\n        var c = c\n        for _ in 0..<s.count {\n            if s[_] ==\
    \ ' ' {\n                break\n            }\n            if s[_] > c {\n   \
    \             c = s[_]\n            }\n        }\n        result += c\n    }\n\
    \    return result", "    let chars = Array(s.characters)\n    var newString =\
    \ \"\"\n    var count = 0\n    for index in 0 ..< chars.count {\n        if chars[index]\
    \ == \" \" {\n            count += 1\n            if count > 1 {\n           \
    \     newString += \"_\"\n            }\n        } else {\n            newString\
    \ += String(chars[index])\n        }\n    }\n    return newString", "\ts = strings.Map(func,\
    \ s)\n\treturn s", "    var r = \"\"\n    for c in s.characters {\n        var\
    \ x = Int(c)\n        if x < 97 {\n            x = x + 32\n        }\n       \
    \ if x < 10 {\n            x = x + 10\n        }\n        r = String(Int(x)) +\
    \ r\n    }\n    return r", "    var words = [String]()\n    var newString = \"\
    \"\n    for char in s.characters {\n        let ascii = Int(char)\n        let\
    \ newChar = String(UnicodeScalar(ascii).value)\n        let isAsciiSpace = char\
    \ == \" \"\n        let isAsciiNewChar = char == newChar\n        if !isAsciiSpace\
    \ && !isAsciiNewChar {\n            words.append(newChar)\n        } else {\n\
    \            newString += newChar\n        }\n    }\n    words.sort(by: { (word1,\
    \ word2) -> Bool in\n        return word1.compare(word2, options: .numeric) ==\
    \ .orderedAscending\n    })\n    for word in words {\n        newString += String(word)\n\
    \    }\n    return newString", "    let wordsArr = s.components(separatedBy: \"\
    \ \")\n        .map { String($0.unicodeScalars.filter{$0.isASCII}.sorted()) }\n\
    \        .reduce([], +)\n\n    var result = ''\n    for wordArr in wordsArr {\n\
    \        for char in wordArr {\n            result += char\n        }\n      \
    \  result += \"  \"\n    }\n    return result", '    return s.lowercased().split("
    ").sorted(by: >).joined(separator: " ")', "    // Your code here\n    var s =\
    \ \"\"\n    var i = 0\n    var c = 0\n    for _ in s.characters {\n        if\
    \ i == 0 {\n            s = s + String(c)\n            i += 1\n            c =\
    \ 0\n        } else {\n            c += 32\n        }\n    }\n    return s", "\t\
    let words = s.components(separatedBy: \" \")\n\tlet letters = words.map { $0.map\
    \ { Int($0) }.sorted { $0 > $1 } }\n\treturn words.joined(by: \" \").uppercased()\
    \ + letters.joined(by: \" \")", "    var words = [String]()\n    var blankSpaces\
    \ = [String]()\n    for char in s {\n        if char == ' ' {\n            blankSpaces.append(char)\n\
    \        } else {\n            words.append(String(char))\n        }\n    }\n\
    \    var i = 0\n    for word in words {\n        words[i] = word\n        i +=\
    \ 1\n    }\n    for char in blankSpaces {\n        words.append(String(char))\n\
    \    }\n    return String(words.sorted())", "    var s = String(s)\n    var result\
    \ = \"\"\n    let words = s.components(separatedBy: \" \")\n    for word in words\
    \ {\n        let wordLength = word.characters.count\n        for char in word.characters\
    \ {\n            if let index = s.index(char) {\n                let replacement\
    \ = String(index.asciiValue)\n                s = s[..<index] + replacement\n\
    \            }\n        }\n        result = result + word\n    }\n    return result",
  "    let newSentence = s.characters\n        .filter({ !($0 in \" \") })\n     \
    \   .sorted()\n        .reduce(\"\") {\n            $0 + String($1)\n        }\n\
    \    return newSentence", "    let reordered = s.characters.map { String($0) }.sorted()\n\
    \    return String(reordered.map { String($0.asciiValue) })", "    let r = s.characters.reduce(\"\
    \") { (p, c) -> (p, String) in\n        var p = p\n        if p.isEmpty {\n  \
    \          p = String(c)\n        } else {\n            p += String(c.isUppercase\
    \ ? String(c).unicodeScalars.filter({$0.isLowercase}).sorted(by: {$0.value > $1.value}).first\
    \ : String(c.isLowercase ? String(c).unicodeScalars.filter({$0.isUppercase}).sorted(by:\
    \ {$0.value > $1.value}).first : String(c))\n        }\n        return (p, p)\n\
    \    }.0\n    return r", "    var result = \"\"\n    for c in s.characters {\n\
    \        switch c {\n        case \" \": result += c\n        case \"\\n\": result\
    \ += c\n        default: if c < ' ' { result += c }\n        }\n    }\n    return\
    \ result", "    if s == \"\" {\n        return s\n    }\n    var ret = \"\"\n\
    \    var i = 0\n    var j = 0\n    for i = 0; i < s.count; i++ {\n        let\
    \ c = s[i]\n        let l = s.count\n        let low = l / 2\n        for j =\
    \ i + 1; j < low; j++ {\n            let c1 = s[j % l]\n            if c1 > c\
    \ {\n                ret += c1\n            }\n        }\n    }\n    return ret",
  "    var new_s = \"\"\n    for c in s.characters {\n        if !isLetter(c) {\n\
    \            new_s.append(c)\n        } else {\n            var new_c = ''\n \
    \           switch c {\n            case \"a\":\n                new_c = \"i\"\
    \n            case \"b\":\n                new_c = \"o\"\n            case \"\
    c\":\n                new_c = \"p\"\n            case \"d\":\n               \
    \ new_c = \"e\"\n            case \"e\":\n                new_c = \"r\"\n    \
    \        case \"f\":\n                new_c = \"t\"\n            case \"g\":\n\
    \                new_c = \"h\"\n            case \"h\":\n                new_c\
    \ = \"t\"\n            case \"i\":\n                new_c = \"n\"\n          \
    \  case \"j\":\n                new_c = \"g\"\n            case \"k\":\n     \
    \           new_c = \"p\"\n            case \"l\":\n                new_c = \"\
    o\"\n            case \"m\":\n                new_c = \"o\"\n            case\
    \ \"n\":\n                new_c = \"t\"\n            case \"o\":\n           \
    \     new_c = \"r\"\n            case \"p\":\n                new_c = \"h\"\n\
    \            case \"q\":\n                new_c = \"e\"\n            case \"r\"\
    :\n                new_c = \"r\"\n            case \"s\":\n                new_c\
    \ = \"s\"\n            case \"t\":\n                new_c = \"e\"\n          \
    \  case \"u\":\n                new_c = \"u\"\n            case \"v\":\n     \
    \           new_c = \"e\"\n            case \"w\":\n                new_c = \"\
    d\"\n            case \"x\":\n                new_c = \"e\"\n            case\
    \ \"y\":\n                new_c = \"u\"\n            case \"z\":\n           \
    \     new_c = \"e\"\n            case \"A\":\n                new_c = \"I\"\n\
    \            case \"B\":\n                new_c = \"O\"\n            case \"C\"\
    :\n                new_c = \"P\"\n            case \"D\":\n                new_c\
    \ = \"E\"\n            case \"E\":\n                new_c = \"R\"\n          \
    \  case \"F\":\n                new_c = \"T\"\n            case \"G\":\n     \
    \           new_c = \"H\"\n            case \"H\":\n                new_c = \"\
    T\"\n            case \"I\":\n                new_c = \"N\"\n            case\
    \ \"J\":\n                new_c = \"G\"\n            case \"K\":\n           \
    \     new_c = \"P\"\n            case \"L\":\n                new_c = \"O\"\n\
    \            case \"M\":\n                new_c = \"O\"\n            case \"N\"\
    :\n                new_c = \"T\"\n            case \"O\":\n                new_c\
    \ = \"R\"\n            case \"P\":\n                new_c = \"H\"\n          \
    \  case \"Q\":\n                new_c = \"E\"\n            case \"R\":\n     \
    \           new_c = \"R\"\n            case \"S\":\n                new_c = \"\
    S\"", '    return s.shuffle().unshuffle()', "    var newString = \"\"\n    s.split(\"\
    \ \").sorted(by: <)\n    for word in s.split(\" \") {\n        newString += String(word.unicodeScalars.map\
    \ { $0.value })\n    }\n    return newString", '    return s.shuffled().string()',
  "    // Your code here\n    var result = \"\"\n    var word = \"\"\n    for letter\
    \ in s {\n        if let a = letter.unicodeScalars.first?.value {\n          \
    \  let c = String(UnicodeScalar(a))\n            if !word.isEmpty {\n        \
    \        result += \" \" + word\n                word = \"\"\n            }\n\
    \            result += c\n        } else {\n            word += letter\n     \
    \   }\n    }\n    if !word.isEmpty {\n        result += \" \" + word\n    }\n\
    \    return result", "    let words = s.split(separator: \" \")\n    return words.reduce(\"\
    \", combine: { $0 + $1 })\n        .unicodeScalars\n        .map { UInt32($0.value)\
    \ }\n        .sorted()\n        .reduce(\"\", combine: { $0 + String(Int($1))\
    \ })", "    var new_s = \"\"\n    for c in s.characters {\n        var new_c =\
    \ c\n        if isUpper(c) {\n            new_c += String(UInt64(c) - 26)\n  \
    \      } else if isLower(c) {\n            new_c += String(UInt64(c) - 52)\n \
    \       }\n        new_s += String(new_c)\n    }\n    return new_s", '    return
    s.characters.sorted().joinWithSeparator("")', "    // Split string into words\n\
    \    var words: [[String]] = split(s, \" \")\n    var ordered: [[String]] = words\n\
    \    // Sort words\n    swiftOnce.sort(by: {$0 < $1})\n    // Iterate through\
    \ words\n    for index in 0..<ordered.count {\n        let currentWord = ordered[index][0..<ordered[index].count\
    \ - 1]\n        let nextWord = ordered[index][ordered[index].count - 1..<ordered.count]\n\
    \        let charToRemoveFromFirstIndex = ordered[index][0].characters.count\n\
    \        // Remove char from current index\n        ordered[index][0..<charToRemoveFromFirstIndex\
    \ - 1].forEach { ordered[index][0].remove(at: $0) }\n        // Swap words in\
    \ array\n        ordered[index][0..<ordered[index].count - 1] = nextWord\n   \
    \ }\n    return join(ordered)", "\tvar result = \"\"\n\n\tlet words: [String]\
    \ = s.split(separator: \" \")\n\n\tfor word in words {\n\t\tvar wordChars: [Character]\
    \ = word.characters\n\n\t\tfor i in 0 ..< (wordChars.count - 1) {\n\t\t\tif wordChars[i]\
    \ < wordChars[i+1] {\n\t\t\t\twordChars[i+1] = wordChars[i]\n\t\t\t\twordChars[i]\
    \ = ' '\n\t\t\t}\n\t\t}\n\n\t\tlet sw = String(wordChars)\n\n\t\tresult += sw\n\
    \t\tresult += \" \"\n\t}\n\n\treturn result", "    var new_s = \"\"\n    var i\
    \ = 0\n    for c in s.unicodeScalars {\n        i += 1\n        if (i > 1) {\n\
    \            c += \" \"\n        }\n        if (i > 3) {\n            c += \"\
    ?\"\n        } else {\n            c += c.value\n        }\n        new_s += String(c)\n\
    \    }\n    return new_s", "    \n    var new_string = String()\n    \n    var\
    \ new_char: Character\n    \n    for char in s.characters {\n        \n      \
    \  if char == ' ' {\n            \n            new_char = '_'\n            \n\
    \        } else {\n            \n            new_char = char\n            \n \
    \       }\n        \n        new_string = new_string + String(new_char)\n    \
    \    \n    }\n    \n    return new_string\n    ", "    var res = \"\"\n    var\
    \ i = 0\n    while i < len(s) {\n        if s[i] == \" \" {\n            i +=\
    \ 2\n            continue\n        }\n        i += 1\n        if i > len(s) {\n\
    \            break\n        }\n        var j = i\n        var k = i\n        var\
    \ m = -1\n        while j > 0 {\n            k += 2\n            if s[k] > s[j]\
    \ {\n                m = s[k]\n                k = j\n            }\n        \
    \    if s[k] < s[j] {\n                m = s[k]\n                k = j\n     \
    \       }\n            if m > 0 {\n                var tmp = s[j]\n          \
    \      s[j] = s[k]\n                s[k] = tmp\n                k = k + m\n  \
    \              k = k + m\n                j = j - m\n            }\n         \
    \   if s[k] == \" \" {\n                k = j\n            }\n            j -=\
    \ 1\n        }\n        res += String(s[k:])\n        res += \" \"\n    }\n  \
    \  return res", "    var sw = s\n    var r = \"\"\n    for c in sw {\n       \
    \ let index = s.rangeOfString(c)\n        if index != nil {\n            sw =\
    \ sw.stringByReplacingCharactersInRange(index, withString: c.uppercaseString())\n\
    \        }\n    }\n    r = sw\n    return r", "    var ordered = \"\"\n    var\
    \ word_list = s.split(separator: \" \")\n    for word in word_list {\n       \
    \ let word_str = String(word)\n        let char_str = Array(word_str)\n      \
    \  let char_str = char_str.sorted(by: {$0.asciiValue < $1.asciiValue})\n     \
    \   let ordered = ordered + char_str.joinWithSeparator(\"\")\n    }\n    return\
    \ ordered", "    var result = \"\"\n    var words = s.words\n    for word in words\
    \ {\n        let chars = s.characters\n        let len = chars.count\n       \
    \ let startIndex = chars.index(s.startIndex, offsetBy: word.startIndex.advanced(by:\
    \ word.startIndex.distance(to: s.startIndex)))\n        let endIndex = chars.index(s.startIndex,\
    \ offsetBy: word.startIndex.advanced(by: word.endIndex.distance(to: s.startIndex)))\n\
    \        let newChar = String(cString: chars.subarray(from: startIndex, to: endIndex))\n\
    \        let charAsInt = newChar.unicodeScalars.reduce(0) { (result, val) in\n\
    \            result + val.value\n        }\n        let newWord = String(cString:\
    \ chars[startIndex..<endIndex])\n        let newCharAsInt = newWord.unicodeScalars.reduce(0)\
    \ { (result, val) in\n            result + val.value\n        }\n        let newWordAsInt\
    \ = newWord.unicodeScalars.reduce(0) { (result, val) in\n            result +\
    \ val.value\n        }\n        let charAsIntAsHex = String(format: \"%x\", charAsInt)\n\
    \        let newWordAsIntAsHex = String(format: \"%x\", newWordAsInt)\n      \
    \  let charAsIntAsHexAsWord = newWordAsIntAsHex + charAsIntAsHex\n        let\
    \ newCharAsIntAsHexAsWord = String(format: \"%x\", newCharAsIntAsHexAsWord)\n\
    \        let newWordAsIntAsHexAsWord = String(format: \"%x\", newWordAsIntAsHexAsWord)\n\
    \        if charAsIntAsHexAsWord < newCharAsIntAsHexAsWord {\n            result\
    \ = result.appending(newChar)\n        }\n        if newWordAsIntAsHexAsWord <\
    \ charAsIntAsHexAsWord {\n            result = result.appending(newWord)\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for word in s.split(\"\
    \ \") {\n        result += String(cmp(word, \"\")) == 0 ? word : word.capitalized\n\
    \    }\n    return result", "    let characters = s.characters\n    var antiShuffled\
    \ = \"\"\n    for i in 0..<characters.count {\n        let currentChar = String(characters[i])\n\
    \        let index = characters.indexOf(i)\n        let nextChar = String(characters[index])\n\
    \        if currentChar != nextChar{\n            antiShuffled += currentChar\n\
    \        }\n    }\n    return antiShuffled", "    var sArr = s.characters.sort()\n\
    \    var res = \"\"\n    for str in sArr {\n        res += String(str) ?? \"\"\
    \n    }\n    return res", "    return s.characters.sorted().reduce(\"\") { (accum,\
    \ character) in\n        let charValue = character as! UnicodeScalar\n       \
    \ let charAsciiValue = UInt32(character)\n        let numAsciiValue = Int(charAsciiValue)\n\
    \n        var accumulator = accum\n\n        if numAsciiValue < 7 {\n        \
    \    accumulator += String(UnicodeScalar(charAsciiValue))\n        }\n       \
    \ else {\n            let ascii = numAsciiValue - 7\n\n            accumulator\
    \ += String(UnicodeScalar(ascii))\n            accumulator += String(UnicodeScalar(charAsciiValue))\n\
    \        }\n        return accumulator\n    }", "    \n    var anti_shuffle =\
    \ \"\"\n    \n    for c in s.characters {\n        \n        if c == \" \" {\n\
    \            \n            for _ in 0..<s.characters.count {\n               \
    \ \n                if anti_shuffle.characters.count < s.characters.count {\n\
    \                    \n                    if anti_shuffle.characters.count >\
    \ 0 {\n                        \n                        anti_shuffle += \"\\\
    (anti_shuffle.characters.last!) \" \n                    }\n                 \
    \   \n                    anti_shuffle += \"\\(c)\"\n                    \n  \
    \                  break\n                }\n                \n              \
    \  anti_shuffle += \"\\(c)\"\n            }\n            \n        } else {\n\
    \            \n            anti_shuffle += \"\\(c)\"\n        }\n    }\n    \n\
    \    return anti_shuffle", "    // Your code here\n    return \"\"", "    var\
    \ result = \"\"\n    var temp = \"\"\n    for _ in 0..<s.count {\n        if s.startIndex\
    \ != s.endIndex {\n            let i = s.startIndex\n            let j = s.endIndex\n\
    \            if s[i].unicodeScalars.count < s[j].unicodeScalars.count {\n    \
    \            temp = String(s[i..<j])\n                result += temp\n       \
    \         s = s.substring(from: j)\n                s = s.insert(at: i, with:\
    \ temp)\n            } else {\n                result += s[s.startIndex..<s.endIndex]\n\
    \                s = s.insert(at: s.endIndex, with: String(s[i..<j]))\n      \
    \      }\n        }\n    }\n    return result", "    // Your code here!\n    return\
    \ s", "    var a = s.characters\n    var l = a.count\n    for i in 0..<l {\n \
    \       for j in 1..<(l - i - 1) {\n            var tmp = a[j]\n            a[j]\
    \ = a[j - 1]\n            a[j - 1] = tmp\n        }\n    }\n    return String.from(a)",
  "    let s = remove_capital_letters(s)\n    let sortedWords = split(s).sorted(by:\
    \ { $0.localizedStandardCompare($1) == ComparisonResult.orderedAscending })\n\
    \    return join(sortedWords)", "    let chars = Array(s.utf8)\n    let strArray\
    \ = chars.enumerated().map({ $0.element + 1 })\n    var sortedString = String()\n\
    \    strArray\n        .enumerated()\n        .enumerate()\n        .forEach {\n\
    \            if $0.element != strArray.count {\n                sortedString +=\
    \ String(strArray[$0.element])\n            } else {\n                sortedString\
    \ += String(chars[$0.element])\n            }\n        }\n    return sortedString",
  "    if s == \"\" {\n        return s\n    }\n\n    var result = \"\"\n\n    var\
    \ words = s.componentsSeparatedByString(\" \")\n    for word in words {\n    \
    \    let lower = word.lowercaseString\n\n        let isCapital = false\n     \
    \   if isLetterCapital(lower: lower) {\n            isCapital = true\n       \
    \ }\n\n        switch isCapital {\n        case true:\n            word = word.replacingOccurrences(of:\
    \ \"'\", with: \"\")\n            word = word.replacingOccurrences(of: \".\",\
    \ with: \"\")\n            word = word.replacingOccurrences(of: \",\", with: \"\
    \")\n            word = word.replacingOccurrences(of: \":\", with: \"\")\n   \
    \         word = word.replacingOccurrences(of: \"!\", with: \"1\")\n         \
    \   word = word.replacingOccurrences(of: \"?\", with: \"2\")\n            word\
    \ = word.replacingOccurrences(of: \";\", with: \"3\")\n            word = word.replacingOccurrences(of:\
    \ \"-\", with: \"_\")\n            word = word.replacingOccurrences(of: \"<\"\
    , with: \"4\")\n            word = word.replacingOccurrences(of: \"=\", with:\
    \ \"5\")\n            word = word.replacingOccurrences(of: \">\", with: \"6\"\
    )\n            word = word.replacingOccurrences(of: \"/\", with: \"7\")\n    \
    \        word = word.replacingOccurrences(of: \"[\", with: \"8\")\n          \
    \  word = word.replacingOccurrences(of: \"]\", with: \"9\")\n            word\
    \ = word.replacingOccurrences(of: \" \", with: \"\")\n            word += \"0\"\
    \n            break\n\n        case false:\n            word += \"0\"\n      \
    \      break\n        }\n\n        result += word\n    }\n    return result",
  "    var result = \"\"\n\n    var i = 0\n    let len = s.count\n\n    while i <\
    \ len {\n        let c = s[i]\n        let j = s.startIndex\n        if c == \"\
    \ \" {\n            if let index = s.index(s.index(s.startIndex, offsetBy: 1),\
    \ offsetBy: 1) {\n                let s = s[index..<j]\n                result.append(s)\n\
    \            }\n        } else {\n            result.append(c)\n        }\n  \
    \      i += 1\n    }\n    return result", "    var newString = String()\n\n  \
    \  for character in s {\n        if let intValue = Int(character) {\n        \
    \    switch intValue {\n            case 97 ... 122, 32: newString.append(\"a\"\
    )\n            case 65 ... 90, 97 ... 122, 32: newString.append(\"A\")\n     \
    \       case 102 ... 122, 32:\n            case 97 ... 122, 32 ... 122: newString.append(\"\
    B\")\n            case 97 ... 122, 32 ... 122 ... 97 ... 122, 32 ... 122 ... 97\
    \ ... 122: newString.append(\"C\")\n            case 97 ... 122 ... 97 ... 122,\
    \ 32 ... 122 ... 97 ... 122 ... 97 ... 122, 32 ... 122 ... 97 ... 122 ... 97 ...\
    \ 122: newString.append(\"D\")\n            case 65 ... 90, 97 ... 122 ... 97\
    \ ... 122, 32 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122, 32 ... 122\
    \ ... 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122: newString.append(\"\
    E\")\n            case 102 ... 122 ... 97 ... 122 ... 97 ... 122, 32 ... 122 ...\
    \ 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97\
    \ ... 122, 32 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ...\
    \ 122: newString.append(\"F\")\n            case 65 ... 90, 97 ... 122 ... 97\
    \ ... 122, 32 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ...\
    \ 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122: newString.append(\"G\")\n\
    \            case 102 ... 122 ... 97 ... 122 ... 97 ... 122, 32 ... 122 ... 97\
    \ ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ...\
    \ 122: newString.append(\"H\")\n            case 65 ... 90, 97 ... 122 ... 97\
    \ ... 122, 32 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ... 122 ... 97 ...\
    \ 122 ... 97 ... 122 ... 97 ... ", "\treturn s.reduce((acc, char) => {\n\t\tif\
    \ char == \" \" {\n\t\t\treturn acc + char\n\t\t} else if char == \"\\n\" || char\
    \ == \"\\t\" {\n\t\t\treturn acc + char\n\t\t} else {\n\t\t\treturn acc + String.fromCharCode(ord(char.unicodeScalars.first!.value\
    \ + 256 - ord(char.unicodeScalars.last!.value)))\n\t\t}\n\t})", "    var result\
    \ = \"\"\n    for letter in s.characters {\n        if letter != ' ' {\n     \
    \       result += String(letter)\n        }\n    }\n    return result", "    var\
    \ a = s.chars\n    sort(&a, func(i, j int) bool {\n        if a[i] < a[j] {\n\
    \            return true\n        }\n        return false\n    })\n    return\
    \ String(a)", "    // Your code here\n    var new_s = \"\"\n    for word in s.split(\"\
    \ \") {\n        let word_ord = word.characters.sorted(by: { $0 < $1 }).joined()\n\
    \        new_s += (word_ord)\n    }\n    new_s += \" \"\n    return new_s.capitalized",
  "    if s == \"\" {\n        return s\n    }\n    let words = s.split(separator:\
    \ \" \")\n    var shuffled = \"\"\n    for word in words {\n        shuffled +=\
    \ String(word[word.startIndex..<word.endIndex]) +\n            \"_\" + String(word.unicodeScalars.sorted()[word.unicodeScalars.startIndex..<word.unicodeScalars.endIndex]).uppercased()\n\
    \    }\n    return shuffled", '    return s.split(" ").sorted(by: { (_, $0) <
    (_, $1) }).joined()', "    var new_s = \"\"\n    var i = 0\n    while i < s.count\
    \ {\n        var j = i + 1\n        while j < s.count && s[i] == s[j] {\n    \
    \        j += 1\n        }\n        if j - i > 1 {\n            new_s += String(a:\
    \ [s[i - 1], s[j]], b: s.substring(i + 1))\n            i = j - 1\n        } else\
    \ {\n            new_s += s[i]\n            i += 1\n        }\n    }\n    return\
    \ new_s", "    let words = s.components(separatedBy: \" \")\n    let sorted =\
    \ words.sorted { $0.unicodeScalars.reduce(\"\") { $0 + String($1) <\n        $1.unicodeScalars.reduce(\"\
    \") { $0 + String($1) } }\n    }\n\n    return sorted.joined(separator: \"\")",
  "    var new_s = \"\"\n    let words = s.split(separator: \" \")\n    for (i, word)\
    \ in words.enumerated() {\n        let c = word.unicodeScalars.first!\n      \
    \  var j = i\n        while j < words.count {\n            guard let jw = words[j].unicodeScalars.first,\n\
    \                jw < c else { break }\n            let index = jw - c\n     \
    \       if index > 0 {\n                words[j] = String(unicodeScalars: [index])\n\
    \                j--\n            } else {\n                break\n          \
    \  }\n        }\n        if i != words.count {\n            new_s += String(words[i])\n\
    \        } else {\n            new_s += words[i]\n        }\n    }\n    return\
    \ new_s", "    var a = s.lowercased()\n    var n = a.characters.count\n    var\
    \ c = \"\"\n    for _ in 0..<n {\n        if a.characters.count < 2 {\n      \
    \      break\n        }\n        let b = a.characters.suffix(1).first!\n     \
    \   let index = a.characters.indexOf(b)\n        let c = a.characters.prefix(index)\n\
    \        a = a.substringFromIndex(index).appending(c)\n    }\n    return a", " \
    \   var s = s\n    var r = \"\"\n    var i = 0\n    for c in s.characters {\n\
    \        if c == ' ' {\n            if i == 0 || s.characters.count <= i {\n \
    \               r += c\n            } else {\n                i += 2\n       \
    \     }\n        } else {\n            i++\n            r += String(c)\n     \
    \   }\n    }\n    return r", "    let words: [String] = s.split(separator: \"\
    \ \").map{ $0.trimmingCharacters(in: .whitespaces) }\n    let result: [String]\
    \ = words.sorted(by: { $0.count < $1.count })\n    return result.joined(separator:\
    \ \" \")", "    var resultString = String()\n    for word in s.split(separator:\
    \ \" \") {\n        let firstChar = word.characters.first\n        let firstCharAscii\
    \ = firstChar.asciiValue\n        let charsArray = word.characters.dropFirst().sorted(by:\
    \ { $0.asciiValue < $1.asciiValue })\n        if firstCharAscii < charsArray.first\
    \ {\n            resultString += String(cString: charsArray.first)\n        }\
    \ else {\n            resultString += String(cString: charsArray.last)\n     \
    \   }\n    }\n    return resultString", "    var result = \"\"\n    for word in\
    \ s.split(separator: \" \") {\n        result += word.unicodeScalars.sorted {\
    \ $0.value < $1.value }.joined(separator: \" \")\n        result += \" \"\n  \
    \  }\n    return String(result)", "    \n    var result = \"\"\n    var i = 0\n\
    \    var word = s.substring(i)\n    while i < s.characters.count {\n        let\
    \ char = s[i]\n        if char == \" \" {\n            // If it's a space, append\
    \ it to result\n            result += word\n            // Reset the word variable\n\
    \            word = s.substring(i)\n            // and move to the next word\n\
    \            i += 1\n        } else {\n            // Otherwise, append the current\
    \ char at the end of the word string\n            word += char\n            //\
    \ Move to the next word\n            i += 1\n        }\n    }\n    \n    // If\
    \ the last word was left unprocessed, append it at the end\n    result += word\n\
    \    \n    return result", "\tconst maxLen = 13\n\tlet r = s.unicodeScalars\n\t\
    let len = r.count\n\tlet words: Array<String> = []\n\tlet word = \"\"\n\tlet i:\
    \ Int\n\tlet j = len - maxLen\n\tlet k: Int\n\tvar len2 = len - 2\n\n\tfor (i\
    \ = 0; i < j; i++ {\n\t\tfor (k = 0; k < maxLen; k++ {\n\t\t\tif i == k {\n\t\t\
    \t\tword += String(UnicodeScalar(r[i].value)) + String(r[i].value)\n\t\t\t} else\
    \ {\n\t\t\t\tif String(UnicodeScalar(r[i].value)).utf8 <= String(UnicodeScalar(r[j].value)).utf8\
    \ {\n\t\t\t\t\tword += String(r[i].value)\n\t\t\t\t} else {\n\t\t\t\t\tword +=\
    \ String(r[j].value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif words.count == 1 {\n\t\
    \t\tword = word + \" \"\n\t\t}\n\t\twords += [word]\n\t\tword = String()\n\t}\n\
    \n\tfor (i = 0; i < len2; i++, j-- {\n\t\tif i == len2 || j == 0 {\n\t\t\tcontinue\n\
    \t\t}\n\t\tfor (k = 0; k < maxLen; k++ {\n\t\t\tif i == k {\n\t\t\t\tword += String(UnicodeScalar(r[i].value))\
    \ + String(r[i].value)\n\t\t\t} else {\n\t\t\t\tif String(UnicodeScalar(r[i].value)).utf8\
    \ <= String(UnicodeScalar(r[j].value)).utf8 {\n\t\t\t\t\tword += String(r[i].value)\n\
    \t\t\t\t} else {\n\t\t\t\t\tword += String(r[j].value)\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t\tif words.count == 1 {\n\t\t\tword = word + \" \"\n\t\t}\n\t\twords +=\
    \ [word]\n\t\tword = String()\n\t}\n\n\treturn words.joined(separator: \" \")",
  "    var output = \"\"\n    var i = 0\n    var j = 0\n    for letter in s {\n  \
    \      if letter == \" \" {\n            output += \" \"\n            i++\n  \
    \      }\n        switch letter {\n        case \".\", \"?\", \"!\":\n       \
    \     output += letter\n        case \" \":\n            output += letter\n  \
    \      default:\n            output += letter + String(Int(letter)) + String(Int(letter)\
    \ + 1)\n        }\n        j = j + 1\n        if j % 2 == 1 {\n            output\
    \ += letter\n        }\n    }\n    return output", "    let wordsArray = s.split(separator:\
    \ \" \").sorted(by: { $0.compare($1) == .orderedAscending })\n    return wordsArray.join(separator:\
    \ \" \")", "\tlet chars = s.chars().enumerate().map { i, char in\n\t\tlet start\
    \ = s.startIndex\n\t\tlet end = s.index(after: i)\n\t\tlet char = s[start..<end]\n\
    \t\treturn char\n\t}\n\n\tlet sorted = chars.sorted()\n\n\tlet output = String()\n\
    \n\tsorted.forEach { c in\n\t\tif c != ' ' {\n\t\t\toutput += c\n\t\t} else {\n\
    \t\t\toutput += ' '\n\t\t}\n\t}\n\n\treturn output", "    // Do not use sort()\
    \ method because we must keep the order of words and blank\n    // spaces in the\
    \ sentence.\n    var result = \"\"\n    var pos = 0\n    for ch in s {\n     \
    \   var is_space = ch == \" \"\n        var new_ch: Character\n        var current_ch:\
    \ Character\n        if !is_space {\n            current_ch = ch\n           \
    \ new_ch = ch + Character(Int((UInt32(ch) - UInt32(current_ch)) / 36)) + current_ch\n\
    \        } else {\n            current_ch = \"\\n\"\n            new_ch = \"\\\
    n\"\n        }\n        result += String(new_ch)\n        pos += 1\n    }\n  \
    \  return result", "    var resultString = s\n    var wordsToShuffle = [String]()\n\
    \    for word in s.components(separatedBy: \" \") {\n        wordsToShuffle.append(word)\n\
    \    }\n    for index in 0..<wordsToShuffle.count {\n        var firstWordIndex\
    \ = Int(index)\n        var secondWordIndex = firstWordIndex + 1\n        var\
    \ thirdWordIndex = secondWordIndex + 1\n        var fourthWordIndex = thirdWordIndex\
    \ + 1\n\n        var firstWord = wordsToShuffle[firstWordIndex]\n        var secondWord\
    \ = wordsToShuffle[secondWordIndex]\n        var thirdWord = wordsToShuffle[thirdWordIndex]\n\
    \        var fourthWord = wordsToShuffle[fourthWordIndex]\n\n        wordsToShuffle[firstWordIndex]\
    \ = fourthWord\n        wordsToShuffle[secondWordIndex] = thirdWord\n        wordsToShuffle[thirdWordIndex]\
    \ = secondWord\n        wordsToShuffle[fourthWordIndex] = firstWord\n    }\n \
    \   for index in 0..<wordsToShuffle.count {\n        resultString = resultString.replacingOccurrences(of:\
    \ wordsToShuffle[index], with: \"\")\n    }\n    return resultString", "    if\
    \ s == \"\" {\n        return s\n    }\n    var new_s = s.characters.map { $0\
    \ }\n    new_s.reverse()\n    new_s = new_s.joined(separator: \"\")\n    return\
    \ new_s.characters.map { Character($0) }.sorted()", "\ts = s.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n\tlet words = s.components(separatedBy: \" \")\n\t\
    let sortedWords = words.sorted { $0.compare($1) == .orderedAscending }\n\tlet\
    \ result = sortedWords.reduce(\"\") {\n\t\t$0 + String($1) + \" \"\n\t}\n\treturn\
    \ result.trimmingCharacters(in: .whitespacesAndNewlines)", "    let words = s.split(separator:\
    \ \" \")\n    let sortedWords = words.sorted()\n\n    return sortedWords.joined(separator:\
    \ \" \")", "    // Your code here\n    var newStr = \"\"\n    for _ in s.characters\
    \ {\n        let rand = arc4random_uniform(64)\n        if rand < 26 {\n     \
    \       newStr += String(UnicodeScalar(UInt8(rand)))\n        } else {\n     \
    \       newStr += String(UnicodeScalar(UInt16(rand)))\n        }\n    }\n    return\
    \ newStr", "    var a = s.characters\n    var sw = a.makeIterator()\n    var i\
    \ = a.startIndex\n    var nw = String()\n    var r = true\n    var j = a.endIndex\n\
    \    \n    while sw.next() != nil && !sw.hasNext() {\n        if j == a.endIndex\
    \ {\n            j = a.startIndex\n        }\n        nw.append(r == false ? a[--j]\
    \ : a[++i])\n    }\n    \n    for _ in 1..a.count {\n        nw.append(r == false\
    \ ? a[--j] : a[++i])\n    }\n    \n    return nw", "    var chars = s.characters\n\
    \    var result = [String]()\n    for i in 0..<s.characters.count {\n        let\
    \ j = chars.count - i\n        let word = String(chars.suffix(j))\n        let\
    \ replaced = s.replacingOccurrences(of: word, with: word)\n        result.append(replaced)\n\
    \    }\n    return result.joined()", "\treturn s.shuffled().shuffled().shuffled()",
  "    if let _ = s.shuffle() {\n        return String(s)\n    } else {\n        return\
    \ \"\"\n    }", "    let arr = s.characters\n    let result = (0..<arr.count).map\
    \ { i in\n        let c = arr[i]\n        if c == \" \" {\n            return\
    \ \"!\"\n        }\n        let index = arr[i]\n        let index = c.asciiValue\n\
    \        if index >= 65 {\n            index = (index + 32) - 64\n        }\n\
    \        let index = String(index: index, radix: 16)\n        return String(c.unicodeScalars.first!.value,\
    \ decomposed: false, characters: [index])\n    }\n    return String(result)",
  "    let words = s.split(separator: \" \")\n    let characters = Array(s)\n    var\
    \ result = [String]()\n    var counts: [Character: [Int]] = [:]\n    for word\
    \ in words {\n        var c = characters.filter{ $0 != word }\n        guard !c.isEmpty\
    \ else { continue }\n        for c in c {\n            if let count = counts[c]\
    \ { counts[c] = count + 1 } else { counts[c] = 1; }\n        }\n        var maxCount\
    \ = 0\n        for (c, _) in counts {\n            maxCount = maxCount > count\
    \ ? maxCount : count\n        }\n        let newWord = \"\"\n        for (c, _)\
    \ in counts {\n            newWord += String(c)\n        }\n        guard !newWord.isEmpty\
    \ else { continue }\n        result.insert(newWord, at: 0)\n    }\n    return\
    \ result.joined(separator: \" \")", "    var res = s\n    var len = s.count\n\
    \    for i in 0 ..< len {\n        let j = i + random(len - i)\n        if j !=\
    \ i {\n            let temp = s[i ..< j]\n            res.insert(temp, at: i)\n\
    \        }\n    }\n    return res", "    var output = \"\"\n    var newString\
    \ = \"\"\n\n    for letter in s.characters {\n        if letter == \" \" {\n \
    \           newString += letter\n        }\n        else if letter == \"\\n\"\
    \ {\n            newString += letter\n        }\n        else if letter == \"\
    \ \" || letter == \"\\n\" || letter == \"\\t\" {\n            newString += letter\n\
    \        }\n        else {\n            newString += String(UnicodeScalar(letter).value)\n\
    \        }\n    }\n    for letter in newString.characters {\n        output +=\
    \ String(UnicodeScalar(letter).value)\n    }\n    return output", "    var newString\
    \ = \"\"\n    for c in s.characters.reversed() {\n        newString += String(Int(c)\
    \ + 97)\n    }\n    return newString", "    // TODO: implement anti_shuffle function\
    \ here\n    return \"\"", "    var ordered: String = s\n    for word in s.split(\"\
    \ \") {\n        var temp: String = word\n        for char in temp.unicodeScalars\
    \ {\n            temp = temp.replacingCharacter(in: char, with: char.value.uppercased())\n\
    \        }\n        ordered = ordered.replacingOccurrences(of: temp, with: \"\"\
    )\n    }\n    return ordered", "    let words = s.components(separatedBy: \" \"\
    )\n    var out = \"\"\n    words.forEach { word in\n        var firstLetter: Character\
    \ = \"a\"\n        for letter in word {\n            guard let newLetter = Character(UnicodeScalar(letter).value\
    \ - firstLetter) else {\n                out += \"a\"\n                break\n\
    \            }\n            out += String(newLetter)\n            firstLetter\
    \ = Character(UnicodeScalar(letter).value)\n        }\n    }\n    return out",
  "    var ans = \"\"\n    var newWord = \"\"\n    for ch in s {\n        let index\
    \ = newWord.index(of: ch)\n        newWord.replaceSubrange(index...index, with:\
    \ String(Int(ch) - Int(s.first!.characters.first!) - 96))\n    }\n    ans += newWord\n\
    \    return ans", "    var list = s.characters\n    var new_list = [Character]()\n\
    \    let n = list.count\n    for i in 0..<n {\n        var j = 0\n        var\
    \ new_word = Character(\"__\")\n        for j in 0..<n {\n            if i ==\
    \ j {\n                continue\n            }\n            if list[i] == list[j]\
    \ {\n                new_list.append(list[i])\n            } else {\n        \
    \        break\n            }\n        }\n        if j < n {\n            new_word\
    \ = list[i]\n            new_list.append(new_word)\n        }\n        for j in\
    \ 0..<j {\n            new_list.append(list[j])\n        }\n        new_list.append(new_word)\n\
    \    }\n    new_list = new_list.sorted()\n    return String(new_list)", '    return
    s.split(" ").sorted(by: >).joined()', "    var words = s.split(\" \")\n    var\
    \ sArray = s.characters\n    for word in words {\n        for char in word {\n\
    \            char := char.lowercased()\n            if let index = sArray.index(of:\
    \ char) {\n                sArray.remove(at: index)\n            }\n        }\n\
    \    }\n    return String(sArray)", "    let chars = s.characters\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var n = s.count\n\n    while i < n {\n\
    \        j += 1\n        if chars[i] == ' ' {\n            i += j\n        }\n\
    \        k += 1\n        while chars[k] == ' ' {\n            k -= 1\n       \
    \ }\n        if j < k {\n            chars[i + j] = chars[k]\n            chars[i\
    \ + j + 1] = chars[j]\n            chars[i + j + 1] = ' '\n            i += j\
    \ + 2\n        }\n    }\n\n    return String(chars)", "    let characters = s.characters;\n\
    \    var result = \"\";\n    var i = 0;\n    for character in characters {\n \
    \       let ascii = character.unicodeScalars.filter { $0.value == 0 }.count;\n\
    \        if i == characters.count - 1 {\n            result = result + character;\n\
    \        }\n        else if (i == 0) {\n            result = result + character;\n\
    \        }\n        else if (ascii <= characters[i + 1].ascii) {\n           \
    \ result = result + character;\n        }\n        else {\n            result\
    \ = result + characters[i + 1];\n        }\n        i += 1;\n    }\n    return\
    \ result;", "    var r : String = \"\"\n    for i in s.characters {\n        if\
    \ i > 'Z' {\n            r = String(r + \"A\" + String(i - 'Z') + \" \")\n   \
    \     } else {\n            r = String(r + String(i - 'A') + \" \")\n        }\n\
    \    }\n    return r", "    let words = s.split(separator: \" \")\n    guard words.count\
    \ > 0 else { return s }\n    return words.map { $0.swapcase() }.joined(separator:\
    \ \" \")", "    let wordsSplit = s.characters\n        .filter({$0 != \" \"})\n\
    \        .sorted()\n    let lettersSplit = s.characters\n        .filter({$0 !=\
    \ \" \" && $0 != \"\\n\"})\n        .sorted()\n    return String(wordsSplit +\
    \ lettersSplit)", "    let words = s.components(separatedBy: \" \")\n    var output\
    \ = \"\"\n    for word in words {\n        let sortedChars = word.characters.sorted()\n\
    \        for char in sortedChars {\n            output += char\n        }\n  \
    \      output += \" \"\n    }\n    return output", "    var out = String()\n \
    \   var i = 0\n    while i < s.count {\n        if i == 0 {\n            out =\
    \ String(s.characters.dropFirst())\n        }\n        var lower = Int(s.characters[i])\n\
    \        if lower >= 97 && lower <= 122 {\n            out += String(s.characters[i-1])\
    \ + String(s.characters[i+1])\n            i += 2\n        } else {\n        \
    \    out += String(s.characters[i-1])\n            i += 1\n        }\n    }\n\
    \    return out", '    return s.stringByReplacingOccurrencesOfString(" ", withString:
    "_", options: NSStringCompareOptions.CaseInsensitiveSearch, range: nil)', "\t\
    let words = s.components(separatedBy: \" \")\n\tvar new_s = \"\"\n\tfor i in 0..<words.count\
    \ {\n\t\tlet word = words[i]\n\t\tlet characters = Array(word)\n\t\tlet characters_sort_by\
    \ = characters.sorted(by: { $0 < $1 })\n\t\tlet new_word = String(characters_sort_by)\n\
    \t\tnew_s += new_word\n\t}\n\treturn new_s", "    var chars = s.characters\n \
    \   if chars.count == 0 {\n        return \"\"\n    }\n    var new_chars = [Character]()\n\
    \    var i = 0\n    for char in chars {\n        let char = Character(char)\n\
    \        if char == ' ' {\n            new_chars.append(char!)\n        } else\
    \ {\n            new_chars.append(char)\n        }\n    }\n    for char in new_chars\
    \ {\n        for _ in 0...s.count {\n            var j = i + Int(arc4random_uniform(UInt32(i\
    \ + 1)))\n            var temp = chars[j]\n            chars[j] = chars[i]\n \
    \           chars[i] = temp\n            i += Int(arc4random_uniform(UInt32(i\
    \ + 1)))\n        }\n    }\n    return String(chars)", "    var new_str = s\n\
    \    var word_array: [String] = []\n    var space_index = 0\n\n    for c in s.unicodeScalars\
    \ {\n        switch c {\n        case Character(c) == \" \":\n            space_index\
    \ += 1\n        case Character(c) == \"\\n\":\n            new_str = new_str.removeLast()\n\
    \        case Character(c) == \"\\r\":\n            new_str = new_str.removeLast()\n\
    \        case Character(c) == \" \":\n            word_array.append(new_str.removeLast())\n\
    \        case Character(c) == \"\\n\":\n            new_str = new_str.removeLast()\n\
    \        case Character(c) == \"\\r\":\n            new_str = new_str.removeLast()\n\
    \        case Character(c) == \" \":\n            word_array.append(new_str.removeLast())\n\
    \        default:\n            word_array.append(new_str.removeLast())\n     \
    \   }\n    }\n\n    for index in 0..<word_array.count {\n        var str = word_array[index]\n\
    \        var last_char = str.removeLast()\n        let start_index = str.startIndex\n\
    \        let end_index = str.endIndex\n        let length = str.length\n\n   \
    \     for j in 0..<length - 1 {\n            let c = String(str[j])\n        \
    \    if c == last_char {\n                new_str = new_str.replace(str.suffix(from:\
    \ j), String(str[j + 1]))\n                new_str = new_str.removeFirst()\n \
    \               new_str = new_str.removeLast()\n            } else {\n       \
    \         new_str = new_str.removeFirst()\n                new_str = new_str.removeLast()\n\
    \            }\n        }\n    }\n    return new_str", "    var chars = \"\"\n\
    \    var word = \"\"\n    var len = 0\n    for char in s.unicodeScalars {\n  \
    \      chars = chars + String(char)\n        len = len + 1\n    }\n    for char\
    \ in chars.unicodeScalars {\n        if !isLetterOrDigit(String(char)) {\n   \
    \         word = word + String(char)\n        }\n    }\n    for char in word.unicodeScalars\
    \ {\n        if !isLetterOrDigit(String(char)) {\n            word = word + String(char)\n\
    \        }\n    }\n    return word", "    let characters = s.characters;\n   \
    \ let characterCount = characters.count;\n    var newString = \"\";\n    for (index,\
    \ char) in characters.enumerate() {\n        if char != \" \" && char != \"\\\
    n\" && char != \"\\t\" && char != \"!\" && char != \".\" && char != \"?\" && char\
    \ != \"-\" && char != \".\" && char != \";\" && char != \"-\" && char != \"!\"\
    \ && char != \"?\" {\n            newString += \"\\u{1f4aa}\";\n        } else\
    \ {\n            newString += char;\n        }\n    }\n    return newString;",
  "    var s = s\n    for c in s.unicodeScalars {\n        if !c.isBlank {\n     \
    \       if c.value < 0x80 {\n                c.value = c.value - 64\n        \
    \    } else {\n                c.value = c.value + 0x57\n            }\n     \
    \   }\n    }\n    return s", "    var i = 0\n    var j = 0\n    var k = s.count\n\
    \n    var temp1 = \"\"\n    var temp2 = \"\"\n\n    for var i = 0; i < k; i++\
    \ {\n        if i < k / 2 {\n            temp1 += String(i)\n        }\n    }\n\
    \n    for var j = k - 1; j >= 0; j-- {\n        temp2 += String(j)\n    }\n\n\
    \    var newString = \"\"\n    var strArray = Array(temp1 + \" \" + temp2 + \"\
    \ \")\n\n    for var i = 0; i < strArray.count; i++ {\n        newString += String(strArray[i])\n\
    \    }\n\n    return newString", "    var new_s = s\n    var count = [Int]()\n\
    \    var words = [String]()\n    var spaces = [Bool]()\n    words.reserveCapacity(s.count)\n\
    \    for c in s.unicodeScalars {\n        count = count[Int(c)] ?? 0\n       \
    \ count = count! + 1\n        words.append(String(c))\n        spaces.append(false)\n\
    \    }\n    for c in range(s.count) {\n        if count[Int(c)] != 0 {\n     \
    \       count[Int(c)] = count - 1\n            new_s = String([String(c)]) + new_s\n\
    \        }\n    }\n    return new_s", "    return s.split(separator: \" \").sorted\
    \ { (lhs, rhs) -> Bool in\n        let lhsChar = String(lhs.utf8)\n        let\
    \ rhsChar = String(rhs.utf8)\n        return lhsChar > rhsChar\n    }.join(\"\
    \ \")", "    var stringArr = s.characters\n    var newString = \"\"\n    stringArr\
    \ = stringArr.map { str in\n        let code = str.unicodeScalars.last!.value\
    \ ?? 0\n        let charArr = Array(str.unicodeScalars)\n        let charArr =\
    \ charArr.sorted { $0.value ?? 0 > $1.value ?? 0 }\n        var str = \"\"\n \
    \       for i in 0..<charArr.count {\n            str += String(charArr[i].value)\n\
    \        }\n        return String(code).prefix(3)\n    }\n    newString = String(stringArr)\n\
    \    return newString", "    var arr = s.split(\" \").sorted()\n    let length\
    \ = arr.count\n    var result = \"\"\n    for _ in 0..<length {\n        result\
    \ += arr[Int(arc4random_uniform(UInt32(length - 1)))]\n    }\n    return result",
  "    var words: [String] = []\n    var i: Int\n    var c: Int\n    var len: Int\n\
    \n    for c in s.characters {\n        len += 1\n    }\n    \n    for c in s.characters\
    \ {\n        if s.rangeOfString(\".\") != nil {\n            i = Int(c) - Int(s.rangeOfString(\"\
    .\")!.startIndex)\n        }\n        else {\n            i = Int(c)\n       \
    \ }\n        \n        if s.rangeOfString(\" \") != nil {\n            i = Int(c)\
    \ - Int(s.rangeOfString(\" \")!.startIndex)\n        }\n        \n        if i\
    \ >= 0 {\n            words.append(String(Character(c)))\n        }\n    }\n \
    \   \n    return words.sorted()", "\treturn StringSlice(s).sorted(by: >).joined()",
  "    if s.isEmpty {\n        return s\n    }\n    \n    let chars = s.characters()\n\
    \    let sorted = chars.sorted { $0.ascii < $1.ascii }\n    \n    let buffer =\
    \ UnsafeMutablePointer<UniChar>.allocate(capacity: s.characters.count)\n    defer\
    \ {\n        buffer.deallocate()\n    }\n    \n    var i = 0\n    while i < s.characters.count\
    \ {\n        let c = sorted[i]\n        buffer.initializeFrom(&c, count: 1)\n\
    \        sorted[i] = sorted[i + 1]\n        sorted[i + 1] = c.ascii\n        i\
    \ += 1\n    }\n    \n    var string = \"\"\n    for i in 0..<s.characters.count\
    \ {\n        string += String(UnicodeScalar(buffer[i]))\n    }\n    \n    return\
    \ string", '    return s.shuffled().shuffled().shuffled()', "    let words = s.components(separatedBy:\
    \ \" \")\n    \n    return words.reduce(\"\") { current, next in\n        var\
    \ currentChar: unichar = 0\n        var nextChar: unichar = 0\n        \n    \
    \    let currentWord = current.components(separatedBy: \" \")\n        let nextWord\
    \ = next.components(separatedBy: \" \")\n        \n        currentWord.forEach\
    \ { char in\n            nextChar = nextWord.first!.unicodeScalars\n         \
    \   .filter { $0.value == char.value }\n            .first!\n            \n  \
    \          currentChar = nextChar.value - char.value\n            currentChar\
    \ = (currentChar - char.value) % 26\n            currentChar = unichar(currentChar\
    \ + char.value)\n            \n            nextChar.value = currentChar.value\n\
    \        }\n        \n        return String(currentWord) + String(nextWord)\n\
    \    }", "    var output = \"\"\n    for cStr in s.unicodeScalars {\n        if\
    \ cStr.value > 128 {\n            output += cStr.value.description\n        }\
    \ else {\n            output += cStr.value.description\n        }\n    }\n   \
    \ return output", "    var result = \"\"\n    var i = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value > 128 {\n            result += \" \"\n        }\n    \
    \    result += String(c)\n        i += 1\n    }\n    for char in s.unicodeScalars\
    \ {\n        let index = s.unicodeScalars.index(of: char)\n        if index <\
    \ i {\n            result += String(char)\n        }\n    }\n    return result",
  "    var a = s.characters\n    var r = \"\"\n    var t = \"\"\n    a.forEach {\n\
    \        switch $0 {\n        case \" \":\n            r +=  $0\n        case\
    \ \" \":\n            t = $0\n        case \" \" :\n            if $0 < t {\n\
    \                r += $0\n            }\n            else {\n                r\
    \ += $0\n            }\n        case \" \" :\n            t = $0\n        case\
    \ \" \" :\n            if $0 > t {\n                r += $0\n            }\n \
    \           else {\n                r += $0\n            }\n        default :\n\
    \            r += $0\n        }\n    }\n    return r", "    var result = ''\n\
    \    for ch in s.characters {\n        let asciiVal = Int(ch)\n        if asciiVal\
    \ < 97 || asciiVal > 122 {\n            let num = Int(asciiVal)\n            let\
    \ charVal = String(UnicodeScalar(Int(asciiVal)))\n            var newCharVal =\
    \ charVal\n            if num < 26 {\n                newCharVal = \"\\(num )\"\
    \n            }\n            if num < 53 {\n                newCharVal = \"\\\
    (num )\"\n            }\n            if num < 58 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 65 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 90 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 96 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 123 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 127 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 161 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 177 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 190 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 203 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 207 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 221 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 223 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 226 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 230 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 234 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 237 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 241 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 245 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 247 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 251 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 253 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 256 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 258 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 262 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 265 {\n                newCharVal\
    \ = \"\\(num )\"\n            }\n            if num < 26", "    var result = \"\
    \"\n    for word in s.split(separator: \" \") {\n        var i = 0\n        for\
    \ c in word {\n            result.append(String(UnicodeScalar(c).value))\n   \
    \         if i == 0 {\n                i = 2\n            }\n            i +=\
    \ 1\n        }\n    }\n    return result", "    var ordered = s\n    var i = 0\n\
    \    while i < ordered.count {\n        if let j = ordered.index(of: ordered[i],\
    \ offsetBy: 1) {\n            var temp = ordered[i]\n            ordered[i] =\
    \ ordered[j]\n            ordered[j] = temp\n        }\n        i += 1\n    }\n\
    \    return ordered", "    var newStr = \"\"\n    for c in s.characters {\n  \
    \      switch c {\n        case 'a':\n            newStr += \"z\"\n        case\
    \ 'b':\n            newStr += \"y\"\n        case 'c':\n            newStr +=\
    \ \"x\"\n        case 'd':\n            newStr += \"w\"\n        case 'e':\n \
    \           newStr += \"v\"\n        case 'f':\n            newStr += \"u\"\n\
    \        case 'g':\n            newStr += \"t\"\n        case 'h':\n         \
    \   newStr += \"s\"\n        case 'i':\n            newStr += \"q\"\n        case\
    \ 'j':\n            newStr += \"p\"\n        case 'k':\n            newStr +=\
    \ \"o\"\n        case 'l':\n            newStr += \"n\"\n        case 'm':\n \
    \           newStr += \"m\"\n        case 'n':\n            newStr += \"l\"\n\
    \        case 'o':\n            newStr += \"k\"\n        case 'p':\n         \
    \   newStr += \"j\"\n        case 'q':\n            newStr += \"i\"\n        case\
    \ 'r':\n            newStr += \"h\"\n        case 's':\n            newStr +=\
    \ \"g\"\n        case 't':\n            newStr += \"f\"\n        case 'u':\n \
    \           newStr += \"e\"\n        case 'v':\n            newStr += \"d\"\n\
    \        case 'w':\n            newStr += \"r\"\n        case 'x':\n         \
    \   newStr += \"m\"\n        case 'y':\n            newStr += \"n\"\n        case\
    \ 'z':\n            newStr += \"o\"\n        }\n    }\n    return newStr", " \
    \   let words = s.componentsSeparatedByString(\" \")\n    var newString = \"\"\
    \n    for word in words {\n        let key = word.unicodeScalars.sorted()\n  \
    \      newString += String(key: key)\n    }\n    return newString", "    return\
    \ s.split(\" \").map({\n        String($0.asciiValue)\n    }).sort()\n       \
    \ .joinWithSeparator(\"\")", "    let words = s.split(separator: \" \")\n    let\
    \ sortedWords = words.sorted(by: { (word1, word2) -> Bool in\n        return word1\
    \ < word2\n    })\n    return sortedWords.joined(separator: \" \")", "    var\
    \ new_s = \"\"\n    for _, b in s.characters {\n        let c = (b as NSString).unicodeScalars.first!.value\
    \ - UInt16(97)\n        if c != 0 && c != 1 {\n            new_s = new_s.appending(c)\n\
    \        } else {\n            new_s = new_s.appending(b)\n        }\n    }\n\
    \    return new_s", "    var s = String()\n    var i = 0\n    var j = 0\n    for\
    \ c in s {\n        if c == \" \" {\n            if s.isEmpty {\n            \
    \    continue\n            }\n            s.append(\" \")\n        } else {\n\
    \            s[i] = c\n            i += 1\n        }\n    }\n    var j = 0\n \
    \   var k = 0\n    for c in s {\n        if c == \" \" {\n            if s.isEmpty\
    \ {\n                continue\n            }\n            s[k] = \" \"\n     \
    \       k += 1\n        } else {\n            s[k] = c\n            k += 1\n \
    \       }\n    }\n    for c = \" \"; c < k; c += 1 {\n        s[k] = c\n     \
    \   k += 1\n    }\n    s = s.unicodeScalars\n    return String(s)", "    let words\
    \ = s.split(separator: \" \")\n    var result = \"\"\n    for word in words {\n\
    \        for c in word {\n            if c.isUpper {\n                if let index\
    \ = alphanumerics.index(of: c) {\n                    result = result + alphanumerics[index\
    \ + 1]\n                }\n            } else {\n                if let index\
    \ = alphanumerics.index(of: c) {\n                    result = result + alphanumerics[index]\n\
    \                }\n            }\n        }\n        result = result + \" \"\n\
    \    }\n    return result", "    var newS = \"\"\n    for i in 0..<s.count {\n\
    \        let j = i\n        let char = s[i]\n        let c = s[(j + 1) % s.count]\n\
    \        let c2 = s[(j + 2) % s.count]\n\n        if char.asciiValue < c.asciiValue\
    \ {\n            newS += c\n        } else {\n            newS += char\n     \
    \   }\n    }\n    return newS", "    let words = s.componentsSeparatedByString(\"\
    \ \")\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    -\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    .\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    /\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    \\\\\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    ?\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    !\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    (\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    )\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    \\\\\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    ,\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    \\\"\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    \\\"\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    [\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    ]\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    {\", withString: \"\") }\n    let words = words.map { String($0).lowercased().stringByReplacingOccurrencesOfString(\"\
    }\", withString: \"\") }\n    let words = words.map { String($0).lowercased",
  "    var result = \"\"\n\n    for i in 0..<s.characters.count {\n        result\
    \ += String(s.characters[i]).lowercased()\n        if i != s.characters.count-1\
    \ {\n            result += \" \"\n        }\n    }\n\n    return result", "  \
    \  let words = s.componentsSeparatedByString(\" \")\n    var result = \"\"\n\n\
    \    for word in words {\n        result += String(word.utf16.count)\n    }\n\
    \    \n    for word in words {\n        let word = String(word.utf16)\n      \
    \  result = word.replacingOccurrences(of: String(word.utf16.count), with: result)\n\
    \    }\n\n    return result", "    if s == \"\" {\n        return s\n    }\n \
    \   var chars = [Character]()\n    var i = 0\n    while i < s.characters.count\
    \ {\n        if s.characters[i] != ' ' {\n            chars.append(s.characters[i])\n\
    \            i += 1\n            continue\n        }\n        i += 1\n       \
    \ while i < s.characters.count {\n            if s.characters[i] == ' ' {\n  \
    \              chars.append(s.characters[i])\n                i += 1\n       \
    \         continue\n            }\n            chars.append(s.characters[i])\n\
    \            i += 1\n        }\n    }\n    return String(chars)", '    return
    s.shuffled', "    let words = s.split(separator: \" \")\n    return words.reduce(\"\
    \", combine: {\n        if $0.hasPrefix($1) {\n            return $1.unicodeScalars.reduce(\"\
    \", combine: {\n                if $0.hasPrefix($1) {\n                    return\
    \ $0 + $1 + $2\n                } else {\n                    return $0 + $1\n\
    \                }\n            })\n        } else {\n            return $0 +\
    \ $1\n        }\n    })", "    // TODO: Your code here\n    var result = \"\"\n\
    \    for word in s.split(\" \") {\n        for letter in word {\n            if\
    \ letter.unicodeScalars.isEmpty == true {\n                result += letter\n\
    \            }\n        }\n        if result == \"\" {\n            result.append(word)\n\
    \        }\n    }\n    return result", "    if s.isEmpty() {\n        return s\n\
    \    }\n\n    var output = \"\"\n    var previousAsciiValue: Int = 0\n    var\
    \ previousWord: String = \" \"\n\n    for index in 0..<s.characters.count {\n\
    \        character: String.Character\n        character: s.characters[index]\n\
    \n        if character == \" \" {\n            output += \"  \"\n            continue\n\
    \        }\n\n        let asciiValue: Int = character.unicodeScalars.first!.value.intValue\n\
    \n        if previousAsciiValue > asciiValue {\n            output += previousWord\n\
    \            previousWord = character\n        } else {\n            previousWord\
    \ = character\n        }\n\n        previousAsciiValue = asciiValue\n    }\n\n\
    \    output += previousWord\n\n    return output", "    var result = \"\"\n  \
    \  for c in s.characters {\n        let ord = Int(c)\n        if ord >= 97 { //\
    \ A\n            let ord1 = Int(c - 32)\n            if ord1 < 97 { // a\n   \
    \             result += String(ord1 - 97)\n            } else { // A\n       \
    \         result += String(ord1 - 65)\n            }\n        } else if ord >=\
    \ 65 { // a\n            let ord1 = Int(c - 32)\n            if ord1 < 65 { //\
    \ A\n                result += String(ord1 - 97)\n            } else { // a\n\
    \                result += String(ord1 - 65)\n            }\n        } else {\
    \ // Not A or a\n            result += String(ord - 32)\n        }\n    }\n  \
    \  return result", "    let wordArray = s.characters\n    var newWord = \"\"\n\
    \    for character in wordArray {\n        let asciiValue = UInt8(character)\n\
    \        if asciiValue < 128 {\n            newWord.append(character)\n      \
    \  } else {\n            let newValue = asciiValue - 128 + 64\n            newWord.append(UnicodeScalar(newValue).value)\n\
    \        }\n    }\n    return newWord", "    let wordArray = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in wordArray {\n        let sortedWord\
    \ = wordArray\n            .sort(by: { $0.compare($1) == NSComparisonResult.OrderedAscending\
    \ })\n            .sorted(by: { $0.compare($1) == NSComparisonResult.OrderedAscending\
    \ })\n        let sortedString = String(describing: sortedWord)\n        result\
    \ += sortedString\n    }\n    return result", "    let words = s.components(separatedBy:\
    \ \" \")\n    let result = \"\"\n    for word in words {\n        let charArray\
    \ = word.unicodeScalars\n        var charArraySorted = charArray\n        let\
    \ sortedArray = charArraySorted.sorted()\n        let charArrayString = sortedArray.reduce(\"\
    \", { $0 + String($1) })\n        result += String(charArrayString)\n    }\n \
    \   return result", "    var new_string = \"\"\n    var new_string2 = \"\"\n \
    \   for char in s {\n        switch char {\n        case \" \":\n            new_string2\
    \ = new_string2 + char\n        case \" \":\n            new_string2 = new_string2\
    \ + char + char\n        default:\n            new_string = new_string + char\n\
    \        }\n    }\n    return new_string2", "    let wordsAndSpaces = s.components(separatedBy:\
    \ \" \").map(String.init)\n    let wordsWithAsciiValues = wordsAndSpaces.map {\n\
    \        String($0.characters.map {\n            Int($0)\n        })\n    }\n\
    \    return wordsWithAsciiValues.sorted()", "    let words: [String] = s.split(separator:\
    \ \" \").map{String($0)}\n    words.sort{$0.localizedStandardCompare($1) == .orderedAscending}\n\
    \    let result = \"\"\n    for word in words {\n        if word.characters.count\
    \ == 0 {\n            result += \"_\"\n        } else {\n            let firstLetter\
    \ = word.startIndex.advancedBy(0)\n            let lastLetter = word.endIndex.advancedBy(-1)\n\
    \            result += String(word[firstLetter..<lastLetter])\n        }\n   \
    \ }\n    return result", "    var result = \"\"\n\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += \" \"\n            continue\n\
    \        }\n        if c > 47 && c < 58 {\n            result += String(c-64)\n\
    \            continue\n        }\n        result += String(c)\n    }\n\n    return\
    \ result", "    let wordList = s.split(separator: \" \")\n        .sorted()\n\
    \        .map { String($0) }\n    return wordList.joined(separator: \" \")", " \
    \   var t = \"\"\n    var i = 0\n    for c in s {\n        let d = String(c).unicodeScalars\n\
    \        i = i + d.count\n        if i % 2 == 0 {\n            t += String(d[d.count\
    \ - 1])\n        } else {\n            t += String(d[d.count - 2])\n        }\n\
    \    }\n    return t", '    return s.characters.sorted(by: >).reduce("", combine:
    +)', "\tvar new_s = \"\"\n\tfor\ti := 0; i < len(s); i++ {\n\t\tvar new_char =\
    \ 0\n\t\tswitch s[i] {\n\t\tcase 'a':\n\t\t\tnew_char = 'n'\n\t\tcase 'b':\n\t\
    \t\tnew_char = 'o'\n\t\tcase 'c':\n\t\t\tnew_char = 'q'\n\t\tcase 'd':\n\t\t\t\
    new_char = 'r'\n\t\tcase 'e':\n\t\t\tnew_char = 's'\n\t\tcase 'f':\n\t\t\tnew_char\
    \ = 't'\n\t\tcase 'g':\n\t\t\tnew_char = 'u'\n\t\tcase 'h':\n\t\t\tnew_char =\
    \ 'v'\n\t\tcase 'i':\n\t\t\tnew_char = 'w'\n\t\tcase 'j':\n\t\t\tnew_char = 'x'\n\
    \t\tcase 'k':\n\t\t\tnew_char = 'y'\n\t\tcase 'l':\n\t\t\tnew_char = 'z'\n\t\t\
    case 'm':\n\t\t\tnew_char = 'A'\n\t\tcase 'n':\n\t\t\tnew_char = 'B'\n\t\tcase\
    \ 'o':\n\t\t\tnew_char = 'C'\n\t\tcase 'p':\n\t\t\tnew_char = 'D'\n\t\tcase 'q':\n\
    \t\t\tnew_char = 'E'\n\t\tcase 'r':\n\t\t\tnew_char = 'F'\n\t\tcase 's':\n\t\t\
    \tnew_char = 'G'\n\t\tcase 't':\n\t\t\tnew_char = 'H'\n\t\tcase 'u':\n\t\t\tnew_char\
    \ = 'I'\n\t\tcase 'v':\n\t\t\tnew_char = 'J'\n\t\tcase 'w':\n\t\t\tnew_char =\
    \ 'K'\n\t\tcase 'x':\n\t\t\tnew_char = 'L'\n\t\tcase 'y':\n\t\t\tnew_char = 'M'\n\
    \t\tcase 'z':\n\t\t\tnew_char = 'N'\n\t\t}\n\t\tnew_s = new_s + String(new_char)\n\
    \t}\n\treturn new_s", "    var buffer = [String]()\n    var spaceIndex = 0\n \
    \   for characterIndex in 0..<s.count {\n        if Character(s.characters[characterIndex])\
    \ == \" \" {\n            spaceIndex = characterIndex\n        }\n        if Character(s.characters[characterIndex])\
    \ >= 'a' && Character(s.characters[characterIndex]) <= 'z' {\n            buffer.append(String(Character(s.characters[characterIndex])\
    \ - 'a' + 'a'))\n        } else {\n            buffer.append(String(Character(s.characters[characterIndex])\
    \ - 'A' + 'a'))\n        }\n    }\n    var result = \"\"\n    for characterIndex\
    \ in 0..<buffer.count {\n        result = result + String(Character(buffer[characterIndex])\
    \ + Character(s.characters[spaceIndex]))\n    }\n    return result", "    var\
    \ reversedString = s[s.startIndex..<s.endIndex].map { String($0, radix: 10) }.reversed()\n\
    \    return reversedString.reduce(\"\") { $0 + String($1, radix: 26) }", "   \
    \ if let range = s.range(of: \" \") {\n        switch s.distance(from: s.startIndex,\
    \ to: range.upperBound) {\n        case 1:\n            let index = s.distance(from:\
    \ s.startIndex, to: range.upperBound)\n            let letter = s[index]\n   \
    \         let swap = s[index]\n            s[index] = s[range.upperBound]\n  \
    \          s[range.upperBound] = swap\n            return String(s.dropFirst(index)\
    \ + letter + s.suffix(from: range.upperBound))\n        case 2:\n            let\
    \ first = s[s.startIndex..<range.upperBound]\n            let second = s[range.upperBound..<s.endIndex]\n\
    \            let index = second.distance(from: second.startIndex, to: s.startIndex)\n\
    \            let letter = s[index]\n            let swap = s[index]\n        \
    \    s[index] = s[second.startIndex]\n            s[second.startIndex] = swap\n\
    \            return String(first + letter + second)\n        default:\n      \
    \      let first = s[s.startIndex..<range.upperBound]\n            let second\
    \ = s[range.upperBound..<range.lowerBound]\n            let third = s[range.lowerBound..<s.endIndex]\n\
    \            let index = second.distance(from: second.startIndex, to: s.startIndex)\n\
    \            let letter = s[index]\n            let swap = s[index]\n        \
    \    s[index] = s[second.startIndex]\n            s[second.startIndex] = swap\n\
    \            return String(first + letter + second + third)\n        }\n    }\
    \ else {\n        return s\n    }", "    var ans = \"\"\n    var first = True\n\
    \    for s in s.split(\" \") {\n        if first {\n            ans = s\n    \
    \        first = false\n        } else {\n            for (index, char) in s.characters.enumerated()\
    \ {\n                var ascii = char.asciiValue\n                if (ascii !=\
    \ 0) {\n                    ascii = ascii + 10\n                }\n          \
    \      let c = String(UnicodeScalar(ascii))\n                if let index = ans.characters.index(of:\
    \ c) {\n                    ans = ans.replacingCharacters(in: IndexSet(index:\
    \ index), with: c)\n                }\n            }\n        }\n    }\n    return\
    \ ans", "    if s == \"\" {\n        return s\n    }\n    var list = s.characters()\n\
    \    let length = s.length\n    \n    // 1. split all characters in to array\n\
    \    // 2. find unique elements in array\n    // 3. find longest common substring\n\
    \    // 4. split all elements to array\n    // 5. sort the array (using ASCII\
    \ value)\n    \n    var unique = Array(Set(list))\n    \n    let maxLen = unique.count\n\
    \    \n    let longestCommonSub = Array(unique.filter {\n        var count = 0\n\
    \        var substring = String()\n        for i in 0..<length {\n           \
    \ if let index = unique.index(of: s[i]) {\n                if count > 1 {\n  \
    \                  substring = String(unique[index])\n                }\n    \
    \            count += 1\n            }\n        }\n        return substring.isEmpty\
    \ == false\n    })\n    \n    var letters = longestCommonSub\n    \n    var reversed\
    \ = letters.reversed()\n    \n    var characters = Array(s)\n    \n    var output\
    \ = \"\"\n    \n    \n    for i in 0..<maxLen {\n        \n        for i in 0..<characters.count\
    \ {\n            \n            if characters[i] == unique[i] {\n             \
    \   characters.remove(at: i)\n            }\n        }\n        \n        var\
    \ newOutput = \"\"\n        \n        for j in 0..<characters.count {\n      \
    \      newOutput += reversed[j]\n        }\n        \n        output = newOutput\
    \ + output\n    }\n    \n    return output", "    let words = s.components(separatedBy:\
    \ \" \")\n    let characters = words.map { $0.utf16.sorted(by: >).joined(separator:\
    \ \"\") }\n    return characters.joined(separator: \" \")", "    var arr = [Character]()\n\
    \    for char in s.characters {\n        arr[Character.asciiValue(char)] = char\n\
    \    }\n    arr.sort()\n    let res = \"\\(arr)\"\n    return res", "    guard\
    \ s.isEmpty == false else { return s }\n\n    var chars = [Character]()\n    var\
    \ words = s.componentsSeparatedByString(\" \")\n    for word in words {\n    \
    \    chars.append(word.lowercased())\n    }\n\n    var letters: [Character] =\
    \ Array(chars)\n\n    // sort the letters\n    letters.sort(<)\n\n    // map each\
    \ letter into the new string\n    var newWord = String()\n    for letter in letters\
    \ {\n        newWord += String(letter)\n    }\n\n    return newWord", "    let\
    \ stringArray = s.components(separatedBy: \" \")\n    let result = \"\"\n    for\
    \ string in stringArray {\n        let charArray = string.components(separatedBy:\
    \ \"\")\n        let sortedArray = charArray.sorted()\n        let resultCharArray\
    \ = String((sortedArray))\n        result += resultCharArray\n    }\n    return\
    \ result", "    var output = \"\"\n    var chars = s.characters.map({ $0 })\n\
    \    chars.sorted(by: { (a1, b1) in\n        let a2 = a1.asciiValue\n        let\
    \ b2 = b1.asciiValue\n        if a1 < b1 {\n            return true\n        }\
    \ else if a1 == b1 {\n            return false\n        } else {\n           \
    \ return true\n        }\n    })\n    chars.forEach { output += \"\\($0)\" }\n\
    \    return output", '    return s.split(" ").sorted(by: { $0.compare($1) == .orderedAscending
    })', "    var result = \"\"\n    for i in 0..<s.count {\n        let firstChar\
    \ = s[i]\n        if s.endIndex > i {\n            let nextChar = s[(i + 1)..<s.endIndex]\n\
    \            let charIndex = s.index { (_, idx) -> Bool in\n                if\
    \ idx > i {\n                    return true\n                } else {\n     \
    \               return (s[idx] == \" \")\n                }\n            }\n \
    \           if nextChar == firstChar {\n                result += String(firstChar)\n\
    \                continue\n            }\n            if charIndex < s.endIndex\
    \ {\n                result += String(firstChar)\n                result += String(nextChar)\n\
    \            }\n        } else {\n            if s[i] == firstChar {\n       \
    \         result += String(firstChar)\n                continue\n            }\n\
    \            if s[i] == \" \" {\n                result += String(firstChar)\n\
    \            } else {\n                result += String(firstChar)\n         \
    \       result += String(s[i])\n            }\n        }\n    }\n    return result",
  "    let words = s.components(separatedBy: \" \")\n        .map({ String($0).lowercased()\
    \ })\n    return words.joined(separator: \" \")", "    let wordsArray = s.components(separatedBy:\
    \ \" \")\n    let newString = words.sorted { $0.first < $1.first }\n    return\
    \ String(newString)", "    let newString = s.map { $0.unicodeScalars.first!.value\
    \ }\n        .sort(<)\n        .map { String($0, radix: 16) }\n    return newString.joined()",
  "    var result = \"\"\n    var word_counter = -1\n    var word_index = -1\n   \
    \ var word_index2 = -1\n    for word_index = 0; ; word_index += 1 {\n        var\
    \ word_length = 0\n        var word_count = 0\n        for word_counter = 0; ;\
    \ word_counter += 1 {\n            if word_index < s.count() {\n             \
    \   word_length += s.distance(s.startIndex, word_index)\n                word_count\
    \ += 1\n            }\n            if word_index == s.endIndex && word_counter\
    \ < s.count() {\n                word_length += s.distance(word_index, s.endIndex)\n\
    \                word_count += 1\n            }\n            if word_index ==\
    \ s.endIndex && word_counter == s.endIndex && word_index < s.endIndex {\n    \
    \            word_length += s.distance(word_index, s.endIndex)\n             \
    \   word_count += 1\n            }\n        }\n        var new_word = String(repeatElement(\"\
    \ \", word_count) + String(UnicodeScalar(s.characters[word_index])))\n       \
    \ result += new_word\n        if word_index == s.endIndex && word_counter < s.count()\
    \ {\n            word_length += s.distance(word_index, s.endIndex)\n         \
    \   word_count += 1\n        }\n        if word_index == s.endIndex && word_counter\
    \ == s.endIndex && word_index < s.endIndex {\n            word_length += s.distance(word_index,\
    \ s.endIndex)\n            word_count += 1\n        }\n        if word_length\
    \ != word_count {\n            result += \" \"\n            for (; ; ) {\n   \
    \             let old_word = String(UnicodeScalar(s.characters[word_index]))\n\
    \                let new_word = String(repeatElement(\" \", word_count) + String(UnicodeScalar(s.characters[word_index])))\n\
    \                let old_word2 = String(UnicodeScalar(s.characters[word_index2]))\n\
    \                let new_word2 = String(repeatElement(\" \", word_count) + String(UnicodeScalar(s.characters[word_index2])))\n\
    \                result += new_word\n                if word_index2 == s.endIndex\
    \ && word_counter < s.count() {\n                    word_length += s.distance(word_index,\
    \ s.endIndex)\n                    word_count += 1\n                }\n      \
    \          if word_index2 == s.endIndex && word_counter == s.endIndex && word_index\
    \ < s.endIndex {\n                    word_length += s.distance(word_index, s.endIndex)\n\
    \                    word_count += 1\n                }\n                if word_length\
    \ != word_count {\n                    result += \" \"\n                }\n  \
    \              word_index2 -= 1\n                if word_index2 == 0 {\n     \
    \               break\n                }\n                word_length -= word_count\n\
    \                word_count -= 1\n                word_index2 -= 1\n         \
    \       word_index -= 1\n            }\n            result += \" \"\n        }\
    \ else {\n            word_length = 0\n            word_count = 0\n          \
    \  word_index2 += 1\n        }\n    }\n    return result", "    var str = s\n\
    \    var characters = str.characters\n\n    var i = 0\n    for character in characters\
    \ {\n        let value = character\n        let index = characters.index(of: character)\n\
    \        characters.remove(at: index)\n        characters.insert(value, at: i)\n\
    \        i += 1\n    }\n\n    return String(characters)", "    var result = \"\
    \"\n    var prev_value = \"\"\n    var char_count = 0\n    for c in s.characters\
    \ {\n        char_count += 1\n        if prev_value != \"\" {\n            if\
    \ c == prev_value {\n                result = result + c\n                char_count\
    \ = 1\n            } else {\n                result = result + \" \" + c\n   \
    \         }\n        } else {\n            result = result + c\n        }\n  \
    \      prev_value = c\n    }\n    return result", "    return String(s.characters.map\
    \ { $0.isLower ? String($0.unicodeScalars.filter { $0.value > 64 }).reversed()\n\
    \       : $0.unicodeScalars }).lowercased()", "\tlet words = s.split(separator:\
    \ \" \").map({ $0.trimmingCharacters(in: .whitespaces)})\n\tlet blankSpaces =\
    \ words.filter({ $0 == \"\"}).count\n\tlet characters = words.map({ $0.unicodeScalars.reduce(\"\
    \") { $0 + $1.value } })\n\tlet characterArray = characters.map({ Int($0)! })\n\
    \t\n\treturn String(characterArray.sorted(by: >))", "    let words = s.componentsSeparatedByString(\"\
    \ \")\n    let sortedWords = words.sorted { $0.0 < $1.0 }\n    var result = \"\
    \"\n    for word in sortedWords {\n        var s = \"\"\n        for letter in\
    \ word {\n            if let asciiValue = letter.unicodeScalars.map { $0.value\
    \ }.reduce(0, combine: +) {\n                s = s + String(UnicodeScalar(UInt32(asciiValue))).uppercaseString\n\
    \            } else {\n                s = s + letter\n            }\n       \
    \ }\n        result = result + \" \" + s\n    }\n    return result", "    let\
    \ arr = s.components(separatedBy: \" \")\n    \n    var result = \"\"\n    for\
    \ i in 0..<arr.count {\n        let word = arr[i]\n        let arr1 = word.characters\n\
    \        var j = 0\n        while j < arr1.count {\n            let c = arr1[j]\n\
    \            let a = Int(c).description\n            \n            if a > 96 {\n\
    \                arr1.remove(at: j)\n                j -= 1\n            } else\
    \ {\n                j += 1\n            }\n        }\n        arr.removeSubrange(i,\
    \ range.lowerBound: i)\n        arr.insert(word, at: i)\n        result += arr[i]\n\
    \    }\n    return String(result)", "\tlet len = s.characters.count\n\tlet newString:\
    \ NSMutableString = NSMutableString(string: s)\n\tlet separators = newString.componentsSeparatedByString(\"\
    \ \")\n\tlet wordsLength = separators.count\n\n\tfor i = 0; i <= wordsLength -\
    \ 2; i = i + 2 {\n\t\tlet first = separators[i]\n\t\tlet last = separators[i +\
    \ 1]\n\t\tlet start = newString.rangeOfString(first)\n\t\tlet end = newString.rangeOfString(last)\n\
    \t\tif start.location == NSNotFound {\n\t\t\tnewString.insertString(first, range:\
    \ NSMakeRange(0, newString.length))\n\t\t}\n\t\tif end.location == NSNotFound\
    \ {\n\t\t\tnewString.insertString(last, range: NSMakeRange(newString.length -\
    \ first.length, newString.length - last.length))\n\t\t}\n\t}\n\treturn newString.substringToIndex(newString.length\
    \ - 1)", "    let words = s.componentsSeparatedByString(\" \")\n    \n    var\
    \ new_string = \"\"\n    \n    for string in words {\n        var new_str = \"\
    \"\n        for char in string {\n            let ascii = char.asciiValue\n  \
    \          if ascii > 96 {\n                let ascii = char.unicodeScalars.last!.value\
    \ - 32\n                new_str += String(UnicodeScalar(ascii))\n            }\
    \ else {\n                new_str += char\n            }\n        }\n        new_string\
    \ += new_str\n    }\n    return new_string", "    var characters = [Character]()\n\
    \    let length = s.count\n    var word = \"\"\n    var i = 0\n    while i < length\
    \ {\n        if let ch = s[i]{\n            if let _ = Character(ch).isWhitespace(){\n\
    \                characters.remove(at: i)\n                i -= 1\n          \
    \      continue\n            }\n            if let _ = Character(ch).isLetter{\n\
    \                characters.remove(at: i)\n                i -= 1\n          \
    \      word += String(Character(ch))\n                continue\n            }\n\
    \        }\n        i += 1\n    }\n    while i < length {\n        if let _ =\
    \ s[i]{\n            characters.remove(at: i)\n            i -= 1\n        } else\
    \ {\n            word += String(s[i])\n        }\n    }\n    var newString = \"\
    \"\n    for c in characters {\n        if let _ = String(Character(c)).characters.count\
    \ {\n            newString += String(Character(c))\n        } else {\n       \
    \     newString += String(c)\n        }\n    }\n    \n    var count = 0\n    var\
    \ finalString = \"\"\n    while count < length - 1 {\n        finalString += String(Character(characters.remove(at:\
    \ count)))\n        count += 1\n    }\n    finalString += String(Character(characters.remove(at:\
    \ length)))\n    \n    if let _ = word {\n        newString += String(word)\n\
    \    }\n    \n    newString += finalString\n    return newString", "    var words\
    \ = s.words\n    var characters = Array(s.characters)\n    var newString = s\n\
    \    for word in words {\n        var tempString = word\n        var newString\
    \ = \"\"\n        for char in words {\n            newString += String(characters[characters.index(of:\
    \ char)!])\n        }\n        words.remove(at: word.index)\n        newString\
    \ = newString.trimmingCharacters(in: .whitespaces)\n        newString += tempString\n\
    \    }\n    return newString", "    let words = s.components(separatedBy: \" \"\
    )\n    return words.joined(separator: \"\")", "    // Create an array from input\
    \ string where each element is an integer\n    let integerArray = Array(s.utf8)\n\
    \n    // Convert each element of array to string\n    let integerArrayAsStrings\
    \ = integerArray.map { String($0) }\n\n    // Reverse array elements\n    let\
    \ reversedArray = integerArrayAsStrings.reverse()\n\n    // Convert each element\
    \ of reversed array to string\n    let reversedArrayAsStrings = reversedArray.map\
    \ { String($0) }\n\n    // Use join method to get ordered words of string\n  \
    \  let orderedWords = reversedArrayAsStrings.joined(separator: \" \")\n\n    //\
    \ Return the ordered string\n    return orderedWords", "    let words = s.components(separatedBy:\
    \ \" \")\n    let sortedWords = words.sorted(by: {$0.localizedStandardCompare($1)\
    \ == .orderedAscending})\n    return sortedWords.joined(separator: \" \")", " \
    \   var n = \"\"\n    for c in s.characters {\n        n = n + \"\\u{0020}\" +\
    \ c.string\n    }\n    return n", "    var list = s.characters.map { String($0)\
    \ }\n    var new_list = NSMutableArray()\n    var index = 0\n    var new_str =\
    \ \"\"\n\n    for char in list {\n        let char = String(char)\n        if\
    \ char == \" \" {\n            new_str.append(char[index..<list.endIndex])\n \
    \           new_list.append(char)\n            index = list.index(char.advancedBy(1),\
    \ offsetBy: 1)\n        } else {\n            if char != \"\\n\" {\n         \
    \       new_str.append(char)\n            }\n        }\n    }\n\n    while new_list.count\
    \ > 0 {\n        let word = new_list.removeAtIndex(0)\n        new_str.append(word)\n\
    \    }\n\n    return new_str as String", "    words = s.split(separator: \" \"\
    )\n    return words.map { word -> String in\n        var rep = \"\"\n        for\
    \ symbol in word {\n            guard let asciiValue = symbol.asciiValue else\
    \ {\n                return \"?\"\n            }\n            rep += String(asciiValue)\n\
    \        }\n        return rep\n    }.joined(separator: \" \")", "    if s ==\
    \ \"\" {\n        return s\n    }\n    words = s.split(separator: \" \")\n   \
    \ sortedWords = words.sorted()\n    return String(sortedWords)", "    var i =\
    \ 0\n    var j = s.count\n    var buffer = \"\"\n    while i < j {\n        let\
    \ a = s[i]\n        let b = s[i+1]\n        let c = s[i+2]\n        i+=3\n   \
    \     let aChar = a.unicodeScalars\n        let bChar = b.unicodeScalars\n   \
    \     let cChar = c.unicodeScalars\n        if aChar.count == 0 {\n          \
    \  aChar = bChar\n            bChar = cChar\n            cChar = aChar\n     \
    \   }\n        let aVal = aChar[0]\n        let bVal = bChar[0]\n        let cVal\
    \ = cChar[0]\n        if aVal < bVal {\n            buffer = buffer + cChar[1]\n\
    \        }\n        else if bVal < cVal {\n            buffer = buffer + bChar[1]\n\
    \        }\n        else {\n            buffer = buffer + aChar[1]\n        }\n\
    \    }\n    return buffer"]
stop_tokens:
- "\n}"
