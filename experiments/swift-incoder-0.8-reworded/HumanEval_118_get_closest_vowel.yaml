name: HumanEval_118_get_closest_vowel
language: swift
prompt: "\n/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
  \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\n\
  /// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
  \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"\
  u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
  \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
  \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"Above\") == \"o\")"
completions: ["  // init vowels\n  var vowels = [\"\", \"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  // init start\n  var start = vowels.count\n  // init end\n  var end\
    \ = start\n  // init start2\n  var start2 = start\n  // init end2\n  var end2\
    \ = start2\n  // init index\n  var index = start\n  // init result\n  var result\
    \ = \"\"\n  // init flag\n  var flag = true\n  // loop\n  for index in word.characters.reverse().startIndex..<word.characters.endIndex\
    \ {\n    if flag {\n      // check left\n      if index < vowels.count {\n   \
    \     if vowels[index] == \"\" {\n          flag = false\n          continue\n\
    \        }\n        result = result + vowels[index]\n        index--\n       \
    \ continue\n      }\n    }\n    // check right\n    if index > word.characters.endIndex\
    \ {\n      if index < vowels.count {\n        if vowels[word.characters.endIndex]\
    \ == \"\" {\n          flag = false\n          continue\n        }\n        result\
    \ = result + vowels[word.characters.endIndex]\n        index++\n        continue\n\
    \      }\n    }\n    // check left2\n    if index < vowels.count {\n      if vowels[index]\
    \ == \"\" {\n        flag = false\n        continue\n      }\n      result = result\
    \ + vowels[index]\n      index--\n      continue\n    }\n    // check right2\n\
    \    if index > word.characters.endIndex {\n      if index < vowels.count {\n\
    \        if vowels[word.characters.endIndex] == \"\" {\n          flag = false\n\
    \          continue\n        }\n        result = result + vowels[word.characters.endIndex]\n\
    \        index++\n        continue\n      }\n    }\n    break\n  }\n  return result",
  "    if word.characters.count == 0 {\n        return \"\"\n    }\n    var vowels\
    \ = [String]()\n    let vowelA = \"A\".characters.map { (c) -> String in\n   \
    \     if let idx = word.startIndex.advancedBy(c - 1) {\n            let ch = word[idx]\n\
    \            if ch != \"a\" && ch != \"e\" && ch != \"i\" && ch != \"o\" && ch\
    \ != \"u\" {\n                return \"\"\n            }\n            return String(ch)\n\
    \        }\n        return \"\"\n    }\n    vowels.append(contentsOf: vowelA)\n\
    \    let vowelE = \"E\".characters.map { (c) -> String in\n        if let idx\
    \ = word.startIndex.advancedBy(c - 1) {\n            let ch = word[idx]\n    \
    \        if ch != \"a\" && ch != \"e\" && ch != \"i\" && ch != \"o\" && ch !=\
    \ \"u\" {\n                return \"\"\n            }\n            return String(ch)\n\
    \        }\n        return \"\"\n    }\n    vowels.append(contentsOf: vowelE)\n\
    \    let vowelI = \"I\".characters.map { (c) -> String in\n        if let idx\
    \ = word.startIndex.advancedBy(c - 1) {\n            let ch = word[idx]\n    \
    \        if ch != \"a\" && ch != \"e\" && ch != \"i\" && ch != \"o\" && ch !=\
    \ \"u\" {\n                return \"\"\n            }\n            return String(ch)\n\
    \        }\n        return \"\"\n    }\n    vowels.append(contentsOf: vowelI)\n\
    \    let vowelO = \"O\".characters.map { (c) -> String in\n        if let idx\
    \ = word.startIndex.advancedBy(c - 1) {\n            let ch = word[idx]\n    \
    \        if ch != \"a\" && ch != \"e\" && ch != \"i\" && ch != \"o\" && ch !=\
    \ \"u\" {\n                return \"\"\n            }\n            return String(ch)\n\
    \        }\n        return \"\"\n    }\n    vowels.append(contentsOf: vowelO)\n\
    \    let vowelU = \"U\".characters.map { (c) -> String in\n        if let idx\
    \ = word.startIndex.advancedBy(c - 1) {\n            let ch = word[idx]\n    \
    \        if ch != \"a\" && ch != \"e\" && ch != \"i\" && ch != \"o\" && ch !=\
    \ \"u\" {\n                return \"\"\n            }\n            return String(ch)\n\
    \        }\n        return \"\"\n    }\n    vowels.append(contentsOf: vowelU)\n\
    \    vowels.append(contentsOf: \"a\".characters.map { (c) -> String in\n     \
    \   if let idx = word.startIndex.advancedBy(c - 1) {\n            let ch = word[idx]\n\
    \            if ch != \"e\" && ch != \"i\" && ch != \"o\" && ch != \"u\" {\n \
    \               return \"\"\n            }\n            return String(ch)\n  \
    \      }\n        return \"\"\n    })\n    vowels.append(contentsOf: \"e\".characters.map\
    \ {", "    if word.characters.count == 0 {\n        return \"\"\n    }\n\n   \
    \ // Find right side of word.\n    var index = word.characters.count - 1\n   \
    \ while index >= 0 && word.characters[index].isUppercase {\n        index--\n\
    \    }\n\n    if index >= 0 {\n        var closestVowel = vowels[word.characters.count]\n\
    \        for vowel in vowels[(index + 1)..word.characters.count] {\n         \
    \   if vowel.isLowercase {\n                continue\n            }\n        \
    \    var distance = min(distance(vowel, closestVowel), distance(vowel, word.characters[index]))\n\
    \            if distance == 0 {\n                closestVowel = vowel\n      \
    \      }\n        }\n        return closestVowel\n    } else {\n        return\
    \ \"\"\n    }", "    \n    if word == \"\" {\n        return \"\"\n    }\n   \
    \ \n    var strArr = [String]()\n    var count = 0\n    \n    for i in 0..<word.count\
    \ {\n        strArr.append(String(i))\n    }\n    \n    for char in strArr {\n\
    \        if char.hasPrefix(\"A\") && (char.hasSuffix(\"E\") || char.hasSuffix(\"\
    I\") || char.hasSuffix(\"O\") || char.hasSuffix(\"U\")) {\n            count +=\
    \ 1\n        }\n    }\n    \n    if count == 0 {\n        return \"\"\n    }\n\
    \    \n    var vowels = \"\"\n    \n    for char in strArr {\n        if char.hasSuffix(\"\
    A\") || char.hasSuffix(\"I\") || char.hasSuffix(\"O\") || char.hasSuffix(\"U\"\
    ) {\n            vowels += char\n        }\n    }\n    \n    if vowels == \"\"\
    \ {\n        return \"\"\n    }\n    \n    return vowels", "    guard let vowels\
    \ = \"aeiouAEIOU\".characters.map(String.init) else {\n        return \"\"\n \
    \   }\n    \n    var closestVowel = vowels.first\n    \n    guard let firstIndex\
    \ = word.startIndex else {\n        return \"\"\n    }\n    guard let lastIndex\
    \ = word.endIndex else {\n        return \"\"\n    }\n    \n    for i in word.characters.reverse()\
    \ {\n        if vowels.contains(i) {\n            if firstIndex <= i && i <= lastIndex\
    \ {\n                closestVowel = i\n            }\n            break\n    \
    \    }\n    }\n    \n    return closestVowel", "    var vowel = \"\"\n    if word.contains(\"\
    a\") {\n        vowel = \"a\"\n    } else if word.contains(\"e\") {\n        vowel\
    \ = \"e\"\n    } else if word.contains(\"i\") {\n        vowel = \"i\"\n    }\
    \ else if word.contains(\"o\") {\n        vowel = \"o\"\n    } else if word.contains(\"\
    u\") {\n        vowel = \"u\"\n    } else if word.contains(\"y\") {\n        vowel\
    \ = \"y\"\n    } else if word.contains(\"u\") {\n        vowel = \"u\"\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    \n    var consonant =\
    \ \"\"\n    \n    if word.contains(\"a\") {\n        consonant = \"a\"\n    }\
    \ else if word.contains(\"e\") {\n        consonant = \"e\"\n    } else if word.contains(\"\
    i\") {\n        consonant = \"i\"\n    } else if word.contains(\"o\") {\n    \
    \    consonant = \"o\"\n    } else if word.contains(\"u\") {\n        consonant\
    \ = \"u\"\n    } else if word.contains(\"y\") {\n        consonant = \"y\"\n \
    \   }\n    \n    if consonant == \"\" {\n        return \"\"\n    }\n    \n  \
    \  var strArr : [String] = []\n    strArr.append(word.substringToIndex(word.startIndex.advancedBy(-1)))\n\
    \    strArr.append(word.substringToIndex(word.startIndex.advancedBy(-1)))\n  \
    \  \n    return vowel", "    // 1\n    var index = 0\n    var result: Int = 0\n\
    \    var firstLetter = word[index]\n\n    // 2\n    while index < word.count {\n\
    \        switch firstLetter {\n        case \"a\":\n        case \"e\":\n    \
    \    case \"i\":\n        case \"o\":\n        case \"u\":\n            // 3\n\
    \            if index+1 < word.count {\n                firstLetter = word[index\
    \ + 1]\n            } else {\n                firstLetter = firstLetter\n    \
    \        }\n        case \"A\":\n        case \"E\":\n        case \"I\":\n  \
    \      case \"O\":\n        case \"U\":\n            // 4\n            if index+2\
    \ < word.count {\n                firstLetter = word[index + 2]\n            }\
    \ else {\n                firstLetter = firstLetter\n            }\n        default:\n\
    \            break\n        }\n\n        // 5\n        result += word.distance(from:\
    \ word.startIndex, to: index)\n        index += 1\n    }\n\n    // 6\n    if result\
    \ < 0 {\n        result = 0\n    }\n\n    // 7\n    return String()", "    guard\
    \ let vowels = word.characters.filter({ $0 != \"a\" && $0 != \"e\" && $0 != \"\
    i\" && $0 != \"o\" && $0 != \"u\" && $0 != \"A\" && $0 != \"E\" && $0 != \"I\"\
    \ && $0 != \"O\" && $0 != \"U\" }) else {\n        return \"\"\n    }\n    let\
    \ minCount = vowels.count - 2\n    if vowels.count > 0 {\n        if vowels.count\
    \ == 1 {\n            if vowels.last == \"a\" || vowels.last == \"e\" || vowels.last\
    \ == \"i\" || vowels.last == \"o\" || vowels.last == \"u\" {\n               \
    \ return vowels.last\n            }\n        }\n        if vowels.count == 2 {\n\
    \            if vowels.last == \"a\" || vowels.last == \"e\" || vowels.last ==\
    \ \"i\" || vowels.last == \"o\" {\n                return vowels.last\n      \
    \      } else if vowels.last == \"a\" || vowels.last == \"e\" || vowels.last ==\
    \ \"i\" || vowels.last == \"u\" {\n                return vowels.last\n      \
    \      }\n        }\n    }\n    if vowels.count == 3 {\n        if vowels.last\
    \ == \"a\" || vowels.last == \"e\" || vowels.last == \"i\" || vowels.last == \"\
    o\" || vowels.last == \"u\" {\n            return vowels.last\n        } else\
    \ if vowels.last == \"a\" || vowels.last == \"e\" || vowels.last == \"i\" || vowels.last\
    \ == \"u\" {\n            return vowels.last\n        } else if vowels.last ==\
    \ \"a\" || vowels.last == \"e\" || vowels.last == \"o\" || vowels.last == \"u\"\
    \ {\n            return vowels.last\n        } else if vowels.last == \"a\" ||\
    \ vowels.last == \"e\" || vowels.last == \"o\" || vowels.last == \"u\" {\n   \
    \         return vowels.last\n        } else if vowels.last == \"a\" || vowels.last\
    \ == \"i\" || vowels.last == \"o\" || vowels.last == \"u\" {\n            return\
    \ vowels.last\n        } else if vowels.last == \"a\" || vowels.last == \"i\"\
    \ || vowels.last == \"u\" {\n            return vowels.last\n        }\n    }\n\
    \    if vowels.count == 4 {\n        if vowels.last == \"a\" || vowels.last ==\
    \ \"e\" || vowels.last == \"i\" || vowels.last == \"o\" || vowels.last == \"u\"\
    \ {\n            return vowels.last\n        } else if vowels.last == \"a\" ||\
    \ vowels.last == \"e\" || vowels.last == \"i\" || vowels.last == \"o\" || vowels.last\
    \ == \"u\" {\n            return vowels.last\n        } else if vowels.last ",
  "    let vowels = \"aeiouAEIOU\"\n    \n    if word == \"\" {\n        return \"\
    \"\n    }\n    \n    let vowelIndex = word.startIndex.distanceTo(word.endIndex.startIndex)\n\
    \    let vowelLength = word.characters.count\n    \n    if vowelIndex == 0 ||\
    \ vowelIndex == vowelLength-1 {\n        return \"\"\n    }\n    \n    var closestVowelIndex\
    \ = vowelIndex\n    var closestVowelLength = 0\n    \n    for index in 0 ..< vowelLength\
    \ {\n        let char = word.characters[index]\n        let isVowel = vowels.contains(char)\n\
    \        if isVowel {\n            if index == 0 || index == vowelLength-1 {\n\
    \                continue\n            }\n            \n            let distance\
    \ = word.characters.count-index-1\n            if distance < closestVowelLength\
    \ {\n                closestVowelLength = distance\n                closestVowelIndex\
    \ = index\n            }\n        }\n    }\n    \n    return vowels[closestVowelIndex]",
  "    return getVowels(word).min(by: { (vowel) -> Bool in\n        let c = vowel.unicodeScalars.last!\n\
    \        let nextC = c.nextCharacter\n        return nextC == Character(\"A\"\
    ) || nextC == Character(\"E\") || nextC == Character(\"I\") || nextC == Character(\"\
    O\") || nextC == Character(\"U\")\n    })", "\tvowels: [String] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n\t\n\tlet vowelIndex = word.characters.reverse().index(of:\
    \ \"o\")!\n\tlet index = word.characters.index(of: \"u\")!\n\tlet nextIndex =\
    \ word.characters.index(of: \"a\")!\n\tlet vowel = vowels[(vowelIndex + nextIndex)\
    \ % vowels.count]\n\treturn vowel", "    var vowels: [Character] = []\n    \n\
    \    for let letter : Character in word {\n        if let index = vowels.index(where:\
    \ { $0 == letter }) {\n            vowels.remove(at: index)\n            vowels.insert(letter,\
    \ at: vowels.count - 1)\n        }\n    }\n    \n    return vowels.isEmpty ? \"\
    \" : vowels.joined(separator: \"\")", "    guard let vowels = vowels(for: word)\
    \ else { return \"\" }\n    if vowels.count == 0 { return \"\" }\n    \n    let\
    \ rightSide = word.index(word.startIndex, offsetBy: word.characters.count - 1)\n\
    \    guard let rightSideLetter = letterForIndex(rightSide, in: word) else { return\
    \ \"\" }\n    guard !vowels.contains(rightSideLetter) else { return \"\" }\n \
    \   \n    let index = vowels.index(of: rightSideLetter)\n    return vowels[index\
    \ - 1]", '  return get_closest_vowel_advanced(word: word, baseIndex: word.endIndex)',
  "\tlet count = word.characters.count\n\tvar letters = Array(word)\n\tletters = letters.filter({$0\
    \ != \"A\" && $0 != \"E\" && $0 != \"I\" && $0 != \"O\" && $0 != \"U\" && $0 !=\
    \ \"a\" && $0 != \"e\" && $0 != \"i\" && $0 != \"o\" && $0 != \"u\"})\n\tif count\
    \ == 0 {\n\t\treturn \"\"\n\t}\n\tletters = letters.reverse()\n\tif letters.count\
    \ == 0 {\n\t\treturn \"\"\n\t}\n\tfor i : Int in 0..<count {\n\t\tlet letter =\
    \ letters[i]\n\t\tif letter != \"A\" && letter != \"E\" && letter != \"I\" &&\
    \ letter != \"O\" && letter != \"U\" && letter != \"a\" && letter != \"e\" &&\
    \ letter != \"i\" && letter != \"o\" && letter != \"u\" {\n\t\t\treturn \"\"\n\
    \t\t}\n\t\tif i == (count-1) {\n\t\t\tif letter != \"A\" && letter != \"e\" &&\
    \ letter != \"i\" && letter != \"o\" && letter != \"u\" {\n\t\t\t\treturn letter\n\
    \t\t\t}\n\t\t}\n\t\tif i == (count-2) {\n\t\t\tif letter != \"A\" && letter !=\
    \ \"I\" && letter != \"o\" && letter != \"u\" {\n\t\t\t\treturn letter\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn \"\"", "\tvar vowels: [String] = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n\tlet lastConsonantIndex = word.count - 1\n\tlet lastIndexOfVowel:\
    \ Int? = vowels.firstIndex(of: word[lastConsonantIndex])\n\tguard let vowelIndex\
    \ = lastIndexOfVowel else { return \"\" }\n\tlet index = lastConsonantIndex -\
    \ 1\n\tlet currentVowel = vowels[index]\n\twhile index > 0 {\n\t\tindex -= 1\n\
    \t\tif word[index] == \"a\" || word[index] == \"e\" || word[index] == \"i\" ||\
    \ word[index] == \"o\" || word[index] == \"u\" {\n\t\t\tvowels.remove(at: index)\n\
    \t\t\tbreak\n\t\t}\n\t}\n\treturn vowels.firstIndex(of: currentVowel) ?? \"\"",
  "    \n    guard let vowelsArray = vowels.split(separator: \",\") else {\n     \
    \   return \"\"\n    }\n    var index = vowels.characters.count\n    var vowel\
    \ = \"\"\n    \n    while index > 0 {\n        let char = vowels.characters[index]\n\
    \        if vowelsArray.contains(char) {\n            vowel = char\n        }\n\
    \        index -= 1\n    }\n    return vowel", "    let vowelsCount = vowels.map\
    \ { $0.lowercaseString }.count\n    if vowelsCount == 0 {\n        return \"\"\
    \n    }\n    let wordArray = word.characters\n    var firstConsonantIndex = wordArray.count\
    \ - 1\n    var secondConsonantIndex = wordArray.count - 1\n    let letter = \"\
    a\"\n    while let characters = wordArray[firstConsonantIndex..<secondConsonantIndex]\
    \ {\n        if let letter = characters.filter({ vowels.contains($0.lowercaseString)\
    \ }).first {\n            return letter\n        } else {\n            firstConsonantIndex\
    \ -= 1\n            secondConsonantIndex -= 1\n        }\n    }\n    return \"\
    \"", '    return getVowels(word).maxElement()', "    \n    let vowels = Set(\"\
    aeiouAEIOU\")\n    \n    guard let characters = word.characters.reversed() else\
    \ { return \"\" }\n    \n    let consonants = characters.filter { c in\n     \
    \   let range = characters.startIndex..<characters.endIndex\n        return range.contains(c)\n\
    \    }\n    \n    let rightSide = consonants.map { $0.unicodeScalars.last!.value\
    \ - 1 }\n    \n    var result = \"\"\n    \n    if rightSide.contains(0) {\n \
    \       \n        let closestCharacter = characters.enumerated().map { (index,\
    \ character) in\n            let index = index\n            let consonant = character\
    \ == UnicodeScalar(\"C\")\n            \n            let range = characters.startIndex..<characters.endIndex\n\
    \            let characterIndex = range.index(range.startIndex, offsetBy: index)\n\
    \            let character = characters[characterIndex]\n            \n      \
    \      if character == UnicodeScalar(\"A\") {\n                return (\n    \
    \                characters.startIndex + index >= rightSide.endIndex ? consonant\
    \ : character == UnicodeScalar(\"I\") ? character == UnicodeScalar(\"U\") : character\
    \ == UnicodeScalar(\"o\") ? character == UnicodeScalar(\"O\") : character == UnicodeScalar(\"\
    e\")\n                ) ? UnicodeScalar(\"u\") : \"\"\n            }\n       \
    \     \n            if character == UnicodeScalar(\"O\") {\n                return\
    \ (\n                    characters.startIndex + index >= rightSide.endIndex ?\
    \ consonant : character == UnicodeScalar(\"a\") ? character == UnicodeScalar(\"\
    i\") || character == UnicodeScalar(\"u\") : character == UnicodeScalar(\"o\")\
    \ ? character == UnicodeScalar(\"e\") : character == UnicodeScalar(\"e\")\n  \
    \              ) ? UnicodeScalar(\"u\") : \"\"\n            }\n            \n\
    \            if character == UnicodeScalar(\"u\") {\n                return (\n\
    \                    characters.startIndex + index >= rightSide.endIndex ? consonant\
    \ : character == UnicodeScalar(\"o\") ? character == UnicodeScalar(\"i\") || character\
    \ == UnicodeScalar(\"u\") : character == UnicodeScalar(\"u\") ? character == UnicodeScalar(\"\
    e\") : character == UnicodeScalar(\"i\")\n                ) ? UnicodeScalar(\"\
    U\") : \"\"\n            }\n            \n            if character == UnicodeScalar(\"\
    i\") {\n                return (\n                    characters.startIndex +\
    \ index >= rightSide.endIndex ? consonant : character == UnicodeScalar(\"u\")\
    \ ? character == UnicodeScalar(\"a\") || character == UnicodeScalar(\"u\") : character\
    \ == UnicodeScalar(\"i\") ? character == UnicodeScalar(\"e\") : character == UnicodeScalar(\"\
    e\")\n                ) ? UnicodeScalar(\"i\") : \"\"\n", "\tvowel := \"\"\n\t\
    for i := len(word) - 1; i >= 0; i-- {\n\t\tif word[i] == \"a\" || word[i] == \"\
    e\" || word[i] == \"i\" || word[i] == \"o\" || word[i] == \"u\" {\n\t\t\tvowel\
    \ = word[i]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn vowel", "\tlet vowels = \"aeiouAEIOU\"\
    \n\tlet vowelsIndex = [vowels.startIndex, vowels.endIndex]\n\t\n\tlet firstLetter\
    \ = word[0]\n\t\n\tvar rightVowelIndex = vowelsIndex\n\trightVowelIndex[0] = vowels.endIndex\n\
    \trightVowelIndex[1] = vowels.startIndex\n\t\n\tvar leftVowelIndex = vowelsIndex\n\
    \tleftVowelIndex[0] = vowels.startIndex\n\tleftVowelIndex[1] = vowels.endIndex\n\
    \t\n\t\n\tvar leftVowel = String()\n\tvar rightVowel = String()\n\t\n\t\n\tfor\
    \ index in rightVowelIndex {\n\t\tlet currentChar = String(word.suffix(from: index))\n\
    \t\t\n\t\tif vowels.contains(currentChar) {\n\t\t\trightVowel = currentChar\n\t\
    \t\tbreak\n\t\t}\n\t\t\n\t}\n\t\n\t\n\tfor index in leftVowelIndex {\n\t\tlet\
    \ currentChar = String(word.prefix(from: index))\n\t\t\n\t\tif vowels.contains(currentChar)\
    \ {\n\t\t\tleftVowel = currentChar\n\t\t\tbreak\n\t\t}\n\t\t\n\t}\n\t\n\tif leftVowel\
    \ == \"\" && rightVowel == \"\" {\n\t\treturn \"\"\n\t} else if leftVowel == \"\
    \" {\n\t\treturn rightVowel\n\t} else if rightVowel == \"\" {\n\t\treturn leftVowel\n\
    \t} else {\n\t\tif leftVowel == rightVowel {\n\t\t\treturn leftVowel\n\t\t} else\
    \ {\n\t\t\tif leftVowel < rightVowel {\n\t\t\t\treturn leftVowel\n\t\t\t} else\
    \ {\n\t\t\t\treturn rightVowel\n\t\t\t}\n\t\t}\n\t}", "    return words.filter{\
    \ \n        word[$0] != \"\" && word[$0].hasPrefix(\"A\") && word[$0].hasSuffix(\"\
    a\") \n    }.sorted{ $0.hasPrefix(\"A\") && !($0.hasSuffix(\"a\")) }.last", " \
    \   // write your code in geeksforgeeks\n    \n    return \"\"", "    var vowels\
    \ = \"aeiouAEIOU\"\n    vowels = vowels.characters.map(String.init).sorted()\n\
    \    var newVowel = \"\"\n    var index = 0\n    let stringArr = word.characters.map\
    \ { $0 }\n    for vowel in vowels {\n        index = stringArr.index(of: vowel)\n\
    \        let newArr: [String] = stringArr[index...].sorted()\n        for char\
    \ in newArr {\n            if char == vowel.uppercased() {\n                newVowel\
    \ = vowel\n                break\n            }\n        }\n    }\n    return\
    \ newVowel", "  // write your code in geeksforgeeks.org\n  let vowelsArray = NSCharacterSet.letterCharacters().inverted()\n\
    \  let rangeOfVowels = word.rangeOfCharacterFromSet(vowelsArray)\n  \n  if rangeOfVowels.location\
    \ != NSNotFound {\n    let vowel = word.substringFromIndex(rangeOfVowels.location)\n\
    \    \n    if vowel.isLowercase {\n      return vowel\n    }\n  }\n  \n  return\
    \ \"\"", "\tlet charsIndex = word.characters.reverse()\n\tlet vowels = \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYz\"\
    .characters.reverse()\n\tlet vowIndex = (charsIndex.index(of: vowels.joined())\
    \ + vowels.count) % (vowels.count)\n\t\n\tif vowIndex >= 0 {\n\t\treturn vowels[vowIndex]\n\
    \t}\n\treturn \"\"", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   guard let chars = word.unicodeScalars.filter{$0.isLower}.joined(), chars.isEmpty\
    \ else { return \"\" }\n    let start = String.index(of: chars.dropLast())!\n\
    \    let end = start.advanced(by: word.unicodeScalars.count - chars.count)\n \
    \   return word.unicodeScalars[end.successor()...].isEmpty ? \"\" : String(word.unicodeScalars[end.successor()...])",
  "    let vowels = \"a\",\"e\",\"i\",\"o\",\"u\"\n    for vowel in vowels.reversed()\
    \ {\n        if word.starts.index(vowel.lowercased(), options: .backward) != nil\
    \ {\n            return vowel\n        }\n    }\n    return \"\"", '    return
    getClosestVowel(word: word, vowels: vowels, consonants: consonants)', "    var\
    \ vowel = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"];\n    var vowel_left = vowel.filter({\
    \ (vowel: Character) -> Bool in\n        let char = Character(vowel)\n       \
    \ return word.characters.contains(char)\n    })\n    \n    var vowel_right = vowel.filter({\
    \ (vowel: Character) -> Bool in\n        let char = Character(vowel)\n       \
    \ return !word.characters.contains(char)\n    })\n    \n    let min_distance =\
    \ word.characters.map { (char: Character) -> Character in\n        if vowel_left.contains(char)\
    \ {\n            return char\n        } else if vowel_right.contains(char) {\n\
    \            return char\n        } else {\n            return char\n        }\n\
    \    }.min()\n    \n    return String(min_distance)", "\tvar lastConsonant : Character\
    \ = \"\"\n\tfor consonant : Character in word {\n\t\tswitch consonant.unicodeScalars.count\
    \ {\n\t\tcase 0:\n\t\t\treturn \"\"\n\t\tcase 1:\n\t\t\tlastConsonant = consonant\n\
    \t\tcase 2:\n\t\t\tif lastConsonant.unicodeScalars.first >= 'A' && lastConsonant.unicodeScalars.first\
    \ <= 'Z' {\n\t\t\t\tif lastConsonant.unicodeScalars.first < 'a' || lastConsonant.unicodeScalars.first\
    \ > 'z' {\n\t\t\t\t\treturn \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn lastConsonant.unicodeScalars.first!",
  "\tvar vowels:[String] = []\n\tfor vowel in vowels{\n\t\tif word.rangeOfString(vowel)\
    \ != nil {\n\t\t\tvowels.append(vowel)\n\t\t}\n\t}\n\tvowels.sort()\n\tvowels.reverse()\n\
    \tfor vowel in vowels{\n\t\tif word.rangeOfString(vowel) != nil {\n\t\t\treturn\
    \ vowel\n\t\t}\n\t}\n\treturn \"\"", "    return strings.find_first(word, false,\
    \ func(i int, _ chr int) bool {\n        return isVowel(chr) || chr == ':'\n \
    \   })", "    guard let vowels = \"aeiouAEIOU\".characters, word.characters.count\
    \ > 0 else {\n        return \"\"\n    }\n    var startIndex = 0\n    var endIndex\
    \ = word.characters.count-1\n    guard word.characters.count >= 3 else {\n   \
    \     return \"\"\n    }\n    guard let first = word.characters.first else { return\
    \ \"\" }\n    guard let last = word.characters.last else { return \"\" }\n   \
    \ while startIndex <= endIndex {\n        let start = vowels.indexOf(first!)\n\
    \        let end = vowels.indexOf(last!)\n        if start <= end {\n        \
    \    return word[startIndex..<startIndex+1]\n        }\n        startIndex +=\
    \ 1\n        endIndex -= 1\n    }\n    return \"\"", "\tguard word.characters.count\
    \ >= 1 else {\n\t\treturn \"\"\n\t}\n\n\t// 1. Find Vowel in the end\n\tlet lastVowel\
    \ = word.characters.reversed()\n\t\t\t\t\t\t .first{ $0.isUppercaseASCII }\n\t\
    \t\t\t\t\t ?? \"\"\n\n\t// 2. Find Vowel in the middle of string\n\tlet middleVowel\
    \ = lastVowel\n\t\t\t\t\t\t  .last(for: word.characters.count)\n\t\t\t\t\t\t \
    \ .first{ $0.isUppercaseASCII }\n\t\t\t\t\t\t  ?? \"\"\n\n\t// 3. Find Vowel in\
    \ the beginning of string\n\tlet firstVowel = middleVowel\n\t\t\t\t\t\t.first(for:\
    \ word.characters.count)\n\t\t\t\t\t\t.first{ $0.isUppercaseASCII }\n\t\t\t\t\t\
    \t?? \"\"\n\n\treturn firstVowel", "    var result = \"\"\n    \n    for s in\
    \ word.characters{\n        var temp = \"\"\n        var vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n        \n        switch s {\n        case \"a\":\n  \
    \          temp = \"A\"\n            break\n        case \"e\":\n            temp\
    \ = \"E\"\n            break\n        case \"i\":\n            temp = \"I\"\n\
    \            break\n        case \"o\":\n            temp = \"O\"\n          \
    \  break\n        case \"u\":\n            temp = \"U\"\n            break\n \
    \       default:\n            continue\n        }\n        \n        vowels =\
    \ vowels.filter{ $0.lowercased() != temp }\n        \n        if vowels.count\
    \ > 0 {\n            let start = word.index(after: word.endIndex).successor()\n\
    \            let end = word.index(before: word.startIndex).predecessor()\n   \
    \         \n            if start > word.startIndex {\n                start =\
    \ word.startIndex\n            }\n            if end < word.endIndex {\n     \
    \           end = word.endIndex\n            }\n            \n            if end\
    \ - start == 1 {\n                result += \"\\(vowels[word.index(start, offsetBy:\
    \ 1)])\"\n            } else {\n                result += \"\\(vowels[word.index(start,\
    \ offsetBy: 1)])\"\n            }\n            result += \"-\"\n            if\
    \ word.index(end, offsetBy: -1) > word.endIndex {\n                result += \"\
    \ \"\n                result += vowels[word.index(end, offsetBy: -1)]\n      \
    \      }\n        }\n    }\n    \n    return result", "    return wordsDict.filter{\
    \ $0.contains(word)}\n        .map({ $0.substring(word.count, word.count+2) })\n\
    \        .flatMap({ $0.contains(\"e\") || $0.contains(\"a\") || $0.contains(\"\
    i\") || $0.contains(\"u\") })\n        .first", "    if word == \"\" || word.isEmpty\
    \ {\n        return \"\"\n    }\n\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n\n    let resultSet = Set<String>()\n    for c in word.unicodeScalars\
    \ {\n        if let x = vowels.first(where: {$0 == c.value}) {\n            resultSet.add(x)\n\
    \        }\n    }\n\n    if resultSet.count == 0 {\n        return \"\"\n    }\n\
    \    let result = resultSet.sorted().reversed()\n    return String(result[0])",
  '    return getClosestVowel(word, isVowel: isVowel(word))', "    let firstLetter\
    \ = word[word.startIndex]\n    let endLetter = word[word.endIndex-1]\n    let\
    \ vowels = Set(\"aeiou\")\n    if firstLetter != endLetter && !vowels.contains(firstLetter)\
    \ && !vowels.contains(endLetter) {\n        return \"\"\n    }\n    if firstLetter\
    \ != endLetter && !vowels.contains(firstLetter) {\n        return endLetter\n\
    \    }\n    if firstLetter != endLetter && !vowels.contains(endLetter) {\n   \
    \     return firstLetter\n    }\n    if firstLetter != endLetter && vowels.contains(firstLetter)\
    \ && vowels.contains(endLetter) {\n        return \"\"\n    }\n    return \"\"",
  "    let vowels = [\"\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    if let index\
    \ = vowels.firstIndex(of: word.first!.lowercased()) {\n        return vowels[index]\n\
    \    }\n    return \"\"", "    \n    // your code here\n    \n    return \"\"",
  '    return getClosestVowel(word, vowels: vowels)', "    var vowels = \"aeiouAEIOU\"\
    \n    var currentVowel = \"\"\n    \n    for char in word.lowercased().characters\
    \ {\n        if char == char.unicodeScalars.first {\n            currentVowel\
    \ = vowels.first\n        } else {\n            currentVowel = vowels.last\n \
    \       }\n        let index = vowels.startIndex.advanced(by: vowels.distance(from:\
    \ char, in: vowels, limitedBy: currentVowel))\n        let candidate = String(currentVowel,\
    \ at: index)\n        if candidate == \"a\" {\n            if currentVowel ==\
    \ \"a\" {\n                return \"\"\n            }\n        } else {\n    \
    \        return candidate\n        }\n    }\n    return \"\"", "    word = word.lowercased()\n\
    \    var vowelIndexStart = 0\n    var vowelIndexEnd = word.count-1\n    var vowelFound\
    \ = false\n    var nextVowelIndex: Int = 0\n    while vowelIndexEnd >= vowelIndexStart\
    \ && !vowelFound {\n        let nextVowelIndex = word.index(word[vowelIndexEnd],\
    \ offsetBy: nextVowelIndex)\n        if nextVowelIndex == 0 || vowelIndexEnd ==\
    \ word.count-1 {\n            vowelFound = true\n        } else {\n          \
    \  vowelIndexStart = nextVowelIndex - 1\n        }\n    }\n    var vowel = \"\"\
    \n    if vowelIndexStart != 0 {\n        vowel = String(word[vowelIndexStart]).lowercased()\n\
    \    }\n    if vowelIndexEnd != word.count-1 {\n        if vowelIndexEnd == word.count-1\
    \ {\n            vowel += String(word[vowelIndexEnd])\n        } else {\n    \
    \        vowel += String(word[vowelIndexEnd]).lowercased()\n        }\n    }\n\
    \    return vowel", "\tlet vowels = \"AEIOUaeiou\".characters.map { String($0)\
    \ }\n\tlet consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\".characters.map\
    \ { String($0) }\n\tlet vowelCount = vowels.filter({ (vowel) -> Bool in\n\t\t\
    if word.range(of: vowel, options: .caseInsensitive) != nil {\n\t\t\treturn true\n\
    \t\t}\n\t\treturn false\n\t})\n\tlet consonantCount = consonants.filter({ (consonant)\
    \ -> Bool in\n\t\tif word.range(of: consonant, options: .caseInsensitive) != nil\
    \ {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t})\n\tlet result = vowelCount.min()!\
    \ < consonantCount.min()!\n\tif result {\n\t\treturn vowelCount.min()!\n\t} else\
    \ {\n\t\treturn consonantCount.min()!\n\t}", "    var result: String = String()\n\
    \n    let vowels: Set<String> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n    for\
    \ char in word.unicodeScalars.reversed() {\n        if vowels.contains(char) {\n\
    \            if result.isEmpty {\n                result = String(char)\n    \
    \        } else if result == String(char) {\n                result = String(char)\n\
    \            } else if char.value > result.unicodeScalars.last!.value {\n    \
    \            result = String(char)\n            }\n        }\n    }\n\n    return\
    \ result", "    var vowelIndex1 = -1\n    var vowelIndex2 = -1\n    var vowelLength\
    \ = 0\n    \n    for index in 0..<word.characters.count {\n        \n        if\
    \ word.characters[index] != \"a\" {\n            if vowelIndex1 < 0 {\n      \
    \          vowelIndex1 = index\n                vowelLength = 1\n            \
    \    continue\n            }\n            if word.characters[index] != word.characters[vowelIndex1\
    \ + vowelLength] {\n                vowelLength += 1\n                continue\n\
    \            }\n            if word.characters[index] == word.characters[vowelIndex1\
    \ + vowelLength] {\n                vowelLength += 1\n            } else {\n \
    \               vowelLength -= 1\n            }\n        } else {\n          \
    \  if vowelIndex2 < 0 {\n                vowelIndex2 = index\n               \
    \ vowelLength = 1\n                continue\n            }\n            if word.characters[index]\
    \ != word.characters[vowelIndex2 + vowelLength] {\n                vowelLength\
    \ += 1\n                continue\n            }\n            if word.characters[index]\
    \ == word.characters[vowelIndex2 + vowelLength] {\n                vowelLength\
    \ += 1\n            } else {\n                vowelLength -= 1\n            }\n\
    \        }\n        \n        if vowelLength == 0 {\n            return \"\"\n\
    \        }\n    }\n    return word.characters[vowelIndex2 + vowelLength]", " \
    \   \n    var vowels = \"aeiou\"\n    var index : Int = word.characters.count-1\n\
    \    \n    while index >= 0 {\n        \n        let charToCheck = word.characters.last!\n\
    \        \n        if vowels.contains(charToCheck) {\n            return charToCheck\n\
    \        }\n        \n        index -= 1\n    }\n    \n    return \"\"", "  \n\
    \  var result = [String]()\n  var len = word.characters.count\n  \n  guard word.characters.count\
    \ > 1 else { return \"\" }\n  \n  for index in stride(from: word.characters.count\
    \ - 1, through: 0, by: -1) {\n    let char = word.characters[index]\n    let char\
    \ = char.lowercased()\n    if char == Character(letter: \"a\"...\"i\") {\n   \
    \   \n      if index < len - 1 {\n        let nextChar = word.characters[index\
    \ + 1].lowercased()\n        if nextChar != Character(letter: \"a\"...\"i\") {\n\
    \          result.append(nextChar)\n        } else {\n          \n          result.append(char.uppercased())\n\
    \          break\n        }\n      } else {\n        result.append(char.uppercased())\n\
    \        break\n      }\n    }\n  }\n  \n  return result.isEmpty ? \"\" : result[0]",
  "    guard let vowels = vowelsSet(word: word) else { return \"\" }\n    \n    let\
    \ letters = word.characters.reversed()\n    for i in 0..<letters.count {\n   \
    \     if let letter = letters[i], vowels.contains(letter) {\n            return\
    \ letter\n        }\n    }\n    \n    return \"\"", "    \n    return \"\"", " \
    \   \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    \n    let words = word.characters\n    let endIndex = words.endIndex\n\
    \    let vowelsIndex = words.count - 1\n    \n    if words.count < 2 {\n     \
    \   return \"\"\n    }\n    \n    var closestVowelIndex = -1\n    \n    for index\
    \ in 0 ..< vowels.count {\n        if vowelsIndex < 0 {\n            break\n \
    \       }\n        \n        let vowel = words[vowelsIndex]\n        \n      \
    \  if words[vowelsIndex - 1] != vowel {\n            continue\n        }\n   \
    \     \n        let nextVowelIndex = vowelsIndex - 1\n        let nextVowel =\
    \ words[nextVowelIndex]\n        \n        if vowel.lowercased() == nextVowel.lowercased()\
    \ {\n            closestVowelIndex = nextVowelIndex\n            break\n     \
    \   }\n        \n        if vowel == nextVowel {\n            closestVowelIndex\
    \ = nextVowelIndex\n        }\n    }\n    \n    if closestVowelIndex == -1 {\n\
    \        return \"\"\n    }\n    \n    let vowel = words[closestVowelIndex]\n\
    \    let consonantIndex = closestVowelIndex + 1\n    \n    if words[consonantIndex]\
    \ != vowel {\n        return \"\"\n    }\n    \n    return vowel", "\tguard let\
    \ vowels = vowels.characters else { return \"\" }\n\tguard let vowelIndexes =\
    \ vowelIndexes.characters else { return \"\" }\n\tlet wordChars = word.characters\n\
    \tlet wordIndexes = word.characters\n\t\n\tlet vowelIndex = wordIndexes.index(of:\
    \ vowels.last!)\n\t\n\tguard vowelIndex != nil else { return \"\" }\n\tguard let\
    \ lastVowelIndex = wordIndexes.index(of: vowels.last!, offsetBy: 1) else { return\
    \ \"\" }\n\t\n\tlet firstVowelIndex = wordIndexes.index(of: vowels.first!, offsetBy:\
    \ 1)\n\t\n\tif lastVowelIndex == firstVowelIndex { // if last and first vowel\
    \ is the same\n\t\treturn wordChars[vowelIndex!] // return the last consonant\n\
    \t}\n\t\n\tguard let firstVowelIndex = wordIndexes.index(of: vowels.first!) else\
    \ { return \"\" }\n\t\n\tif vowelIndex < firstVowelIndex {\n\t\treturn wordChars[vowelIndex!]\n\
    \t}\n\t\n\treturn wordChars[lastVowelIndex!]", "    var vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\")\n\n    let vowelStrings = word.split(separator:\
    \ CharacterSet.letters.inverted)\n\n    for word in vowelStrings {\n        if\
    \ vowels.contains { word == \"y\" || word == \"u\" || word == \"a\" } { return\
    \ word }\n    }\n    return \"\"", "    // O(n) time\n    if word.isEmpty { return\
    \ \"\" }\n    \n    var vowels: [String] = []\n    var vowelCount = 0\n    var\
    \ vowelIndex = 0\n    \n    for i in stride(from: word.count, to: -1, by: -1)\
    \ {\n        let char: Character\n        switch word.unicodeScalars.first!.value\
    \ {\n        case 0xE0: char = \"a\" // \"\u0101\"\n        case 0xE1: char =\
    \ \"e\" // \"\u0113\"\n        case 0xE2: char = \"i\" // \"\u012B\"\n       \
    \ case 0xE3: char = \"o\" // \"\u014D\"\n        case 0xE4: char = \"u\" // \"\
    \u016B\"\n        case 0xE5: char = \"y\" // \"\u016B\"\n        case 0xE6: char\
    \ = \"i\" // \"\u012B\"\n        case 0xE7: char = \"a\" // \"\u0101\"\n     \
    \   case 0xE8: char = \"e\" // \"\u0113\"\n        case 0xE9: char = \"i\" //\
    \ \"\u012B\"\n        case 0xEA: char = \"o\" // \"\u014D\"\n        case 0xEB:\
    \ char = \"u\" // \"\u016B\"\n        case 0xEC: char = \"y\" // \"\u016B\"\n\
    \        case 0xED: char = \"a\" // \"\u0101\"\n        case 0xEE: char = \"e\"\
    \ // \"\u0113\"\n        case 0xEF: char = \"i\" // \"\u012B\"\n        case 0xF0:\
    \ char = \"o\" // \"\u014D\"\n        case 0xF1: char = \"u\" // \"\u016B\"\n\
    \        case 0xF2: char = \"y\" // \"\u016B\"\n        case 0xF3: char = \"i\"\
    \ // \"\u012B\"\n        case 0xF4: char = \"a\" // \"\u0101\"\n        case 0xF5:\
    \ char = \"e\" // \"\u0113\"\n        case 0xF6: char = \"i\" // \"\u012B\"\n\
    \        case 0xF7: char = \"o\" // \"\u014D\"\n        case 0xF8: char = \"u\"\
    \ // \"\u016B\"\n        case 0xF9: char = \"y\" // \"\u016B\"\n        case 0xFA:\
    \ char = \"a\" // \"\u0101\"\n        case 0xFB: char = \"e\" // \"\u0113\"\n\
    \        case 0xFC: char = \"i\" // \"\u012B\"\n        case 0xFD: char = \"o\"\
    \ // \"\u014D\"\n        case 0xFE: char = \"u\" // \"\u016B\"\n        case 0xFF:\
    \ char = \"y\" // \"\u016B\"\n        default:\n            char", "    let vowels\
    \ = \"aeiouAEIOU\".characters\n    var closestVowelIndex = -1\n    var closestVowel:\
    \ String = \"\"\n    let closestVowelDistance = Int64(0)\n    for i in 0..<word.characters.count\
    \ {\n        if vowels.contains(word.characters.suffix(from: i).first!) {\n  \
    \          closestVowelIndex = i\n            closestVowelDistance = abs(i - word.characters.index(word.characters.suffix(from:\
    \ i).first!))\n            closestVowel = word.characters.suffix(from: i).first!\n\
    \        }\n    }\n    return closestVowel", "   var index = 0\n   var vowels\
    \ = Set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n   var count = 0\n   for char in\
    \ word.characters {\n      if vowels.contains(char) {\n         count += 1\n \
    \        if count > 1 {\n            index = count - 1\n            break\n  \
    \       }\n      }\n   }\n   return String(word.characters.dropFirst(index))",
  '    return findVowel(word: word, fromRight: true)', "    let chars = word.characters.map{\
    \ String($0) }\n    if chars.count < 2 {\n        return \"\"\n    }\n\n    let\
    \ vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\",\"e\", \"i\", \"o\", \"u\"\
    ]\n    var currentIndex = 0\n\n    if chars.count > 3 {\n        if chars.last\
    \ == \"e\" || chars.last == \"i\" {\n            currentIndex = chars.count -\
    \ 2\n        } else {\n            currentIndex = chars.count - 1\n        }\n\
    \    } else {\n        return \"\"\n    }\n    \n    var nextIndex = 0\n    if\
    \ chars.last == \"e\" || chars.last == \"i\" {\n        nextIndex = 1\n    }\n\
    \n    var closest = \"\"\n    var maxDistance = currentIndex - nextIndex\n\n \
    \   for c in chars[currentIndex...] {\n        let index = vowels.firstIndex(of:\
    \ c)!\n        let distance = currentIndex - index\n\n        if distance > maxDistance\
    \ {\n            maxDistance = distance\n            closest = vowels[index]\n\
    \        }\n    }\n    return closest", "\tword = word.lowercased()\n\tlet vowels\
    \ = \"aeiou\"\n\tlet count = 0\n\tlet index = word.count\n\n\tfor i in 0...index\
    \ {\n\t\tif word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i]\
    \ == \"o\" || word[i] == \"u\" {\n\t\t\tcount += 1\n\t\t}\n\t}\n\n\tif count ==\
    \ index {\n\t\treturn \"\"\n\t}\n\n\tlet start = count - count/2\n\tlet end =\
    \ count + count/2\n\tvar index = start\n\n\tfor char in vowels.characters {\n\t\
    \tif index < end {\n\t\t\tif word[index] == char {\n\t\t\t\treturn String(char)\n\
    \t\t\t}\n\t\t\tindex += 1\n\t\t}\n\t}\n\n\treturn \"\"", "    let vowels = Set(\"\
    AEIOUaeiou\".lowercased())\n    let vowels_count = word.characters.map({ vowels.contains($0)\
    \ }).max()!\n    \n    if vowels_count == 0 {\n        return \"\"\n    }\n  \
    \  \n    var index = word.startIndex\n    \n    while index < word.endIndex {\n\
    \        let substr = word.substring(to: index)\n        let len = substr.characters.count\n\
    \        let vowel_index = substr.characters.map({ vowels.contains($0) }).index(true,\
    \ offsetBy: len - 1)\n        let vowel = vowels[vowel_index]!\n        if vowels_count\
    \ != 1 {\n            return vowel\n        }\n        \n        index = index\
    \ + 1\n    }\n    return \"\"", "  var result: String = \"\"\n  let vowel = \"\
    aeiouAEIOU\"\n  for i in word.characters.reverse() {\n    if vowel.contains(String(i))\
    \ {\n      result = vowel.index(of: i).map{ vowel[$0] }\n      return result\n\
    \    }\n  }\n  return result", "    \n    let word = word.lowercased()\n    let\
    \ vowels = vowels.lowercased()\n    var idx = 0\n    \n    if word.count != vowels.count\
    \ {\n        return \"\"\n    }\n    \n    for (idx, c) in word.enumerated() {\n\
    \        \n        if c == vowels.last {\n            return vowels[idx]\n   \
    \     }\n        \n        if idx == word.count - 1 && c == vowels.first {\n \
    \           return vowels.last\n        }\n    }\n    \n    return \"\"", "  \
    \  \n    var vowels = Set<Character>()\n    \n    let startIndexes = word.characters.reversed().enumerate().map\
    \ { $0.element }\n    \n    for i in startIndexes {\n        \n        let char\
    \ = word.characters.last ?? \"\"\n        \n        if let index = vowels.firstIndex(of:\
    \ char) {\n            \n            let start = word.index(before: index)\n \
    \           let end = word.index(from: index + 1)\n            \n            let\
    \ range = word.range(of: char, options: .backwards)\n            \n          \
    \  if range.lowerBound == range.upperBound {\n                \n             \
    \   vowels.remove(at: index)\n                \n                let newString\
    \ = word.substring(from: start...to)\n                \n                if newString.isEmpty\
    \ {\n                    \n                    return \"\"\n                }\n\
    \                \n                return char\n            }\n        }\n   \
    \ }\n    \n    return \"\"", "    // write your code in JavaScript (Node.js 8.9.4)\n\
    \    let vowels = [ \"a\", \"e\", \"i\", \"o\", \"u\" ];\n    let vowelsCount\
    \ = vowels.reduce(0,(accumulator, currentValue) => accumulator + (word.endIndex\
    \ >= currentValue.endIndex ? 1 : 0));\n    let vowelIndex = (word.endIndex - word.length\
    \ - vowelsCount) % vowels.count;\n    return vowels[vowelIndex];", "    if word\
    \ == \"\" {\n        return \"\"\n    }\n\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    let vowels = \"aeiouAEIOU\"\n\n    var candidate = \"\"\n    for i in word.characters.reversed()\
    \ {\n        if vowels.contains(i) {\n            candidate = String(i)\n    \
    \        break\n        }\n    }\n\n    if let index = candidate.index(of: consonants.reversed())\
    \ {\n        candidate = String(candidate.suffix(from: index))\n    }\n\n    return\
    \ candidate.first", "    let vowels = (\"a\",\"e\",\"i\",\"o\",\"u\")\n    let\
    \ vowelsReversed = vowels.reverse()\n    let consonants = (\"b\",\"c\",\"d\",\"\
    f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"\
    v\",\"w\",\"x\",\"y\",\"z\")\n    let consonantsReversed = consonants.reverse()\n\
    \    let vowelFound = false\n    let minDistance = word.count\n\n    var found\
    \ = \"\"\n    for letter in word {\n        if letter == vowels.first! {\n   \
    \         vowelFound = true\n            minDistance = 0\n        } else if letter\
    \ == vowels.last! {\n            vowelFound = true\n            minDistance =\
    \ 0\n        } else {\n            if consonants.contains(letter) {\n        \
    \        for consonant in consonantsReversed {\n                    if letter\
    \ == consonant {\n                        found = \"\"\n                     \
    \   break\n                    }\n                    if letter == consonantsReversed.last!\
    \ && consonant == consonantsReversed.first! {\n                        found =\
    \ \"\"\n                        break\n                    }\n               \
    \     if letter == consonantsReversed.last! && consonant == consonantsReversed.last!\
    \ {\n                        break\n                    }\n                  \
    \  if minDistance > word.count {\n                        break\n            \
    \        }\n                }\n                minDistance += 1\n            }\
    \ else {\n                for vowel in vowelsReversed {\n                    if\
    \ letter == vowel {\n                        found = \"\"\n                  \
    \      break\n                    }\n                    if letter == vowelsReversed.last!\
    \ && vowel == vowelsReversed.first! {\n                        found = \"\"\n\
    \                        break\n                    }\n                    if\
    \ letter == vowelsReversed.last! && vowel == vowelsReversed.last! {\n        \
    \                break\n                    }\n                    if minDistance\
    \ > word.count {\n                        break\n                    }\n     \
    \           }\n                minDistance += 1\n            }\n        }\n  \
    \  }\n    return found", "\tword += \"a\"\n\tlet characters = word.characters.reversed().enumerate()\n\
    \tlet vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n\tlet start = characters.map({\
    \ \n\t\t(index: Int, char: Character) -> (char, Bool) in\n\t\tif char.lowercased()\
    \ == vowels.last { return (char, false) }\n\t\treturn (char, char.lowercased()\
    \ == vowels.last)\n\t}).reduce({ \n\t\t(prev: Character, cur: char, current: Bool)\
    \ -> Character in\n\t\tif !current { return prev }\n\t\tif prev.lowercased() ==\
    \ vowels.first { return char.lowercased() }\n\t\treturn char\n\t})\n\tlet stop\
    \ = characters.map({ \n\t\t(index: Int, char: Character) -> (char, Bool) in\n\t\
    \tif char.lowercased() == vowels.first { return (char, false) }\n\t\treturn (char,\
    \ char.lowercased() == vowels.first)\n\t}).reduce({ \n\t\t(prev: Character, cur:\
    \ char, current: Bool) -> Character in\n\t\tif !current { return prev }\n\t\t\
    if prev.lowercased() == vowels.last { return char.lowercased() }\n\t\treturn char\n\
    \t})\n\treturn vowels.first == start ? \"\" : vowels[vowels.index(start, offsetBy:\
    \ 1)...vowels.index(stop, offsetBy: -1)]", "    word = word.lowercased()\n   \
    \ \n    let firstIndex = word.characters.count\n    let lastIndex = word.characters.count\n\
    \    \n    \n    if word.characters.count == 0 || lastIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    var currentIndex = 0\n    var currentVowel: String =\
    \ \"\"\n    \n    \n    while currentIndex < firstIndex {\n        if word.characters.contains(where:\
    \ { $0 == currentVowel }) {\n            return currentVowel\n        }\n    \
    \    \n        if currentIndex == firstIndex - 1 {\n            break\n      \
    \  }\n        \n        if word.characters.contains(where: { $0 == \"a\" || $0\
    \ == \"e\" || $0 == \"i\" || $0 == \"o\" || $0 == \"u\" }) {\n            currentIndex\
    \ += 1\n            currentVowel = \"a\"\n        }\n        \n        if currentIndex\
    \ == lastIndex {\n            break\n        }\n        \n        if currentIndex\
    \ < lastIndex && word.characters.contains(where: { $0 == \"a\" || $0 == \"e\"\
    \ || $0 == \"i\" || $0 == \"o\" || $0 == \"u\" }) {\n            currentIndex\
    \ += 1\n            currentVowel = \"e\"\n        }\n        \n        if currentIndex\
    \ < lastIndex && word.characters.contains(where: { $0 == \"a\" || $0 == \"e\"\
    \ || $0 == \"i\" || $0 == \"o\" || $0 == \"u\" }) {\n            currentIndex\
    \ += 1\n            currentVowel = \"i\"\n        }\n        \n        if currentIndex\
    \ < lastIndex && word.characters.contains(where: { $0 == \"a\" || $0 == \"e\"\
    \ || $0 == \"i\" || $0 == \"o\" || $0 == \"u\" }) {\n            currentIndex\
    \ += 1\n            currentVowel = \"o\"\n        }\n        \n        if currentIndex\
    \ < lastIndex && word.characters.contains(where: { $0 == \"a\" || $0 == \"e\"\
    \ || $0 == \"i\" || $0 == \"o\" || $0 == \"u\" }) {\n            currentIndex\
    \ += 1\n            currentVowel = \"u\"\n        }\n    }\n    \n    return \"\
    \"", "    \n    if word == \"\" { \n        return \"\"\n    }\n    var vowelCount\
    \ = 0\n    var currentChar: Character = \"a\"\n    for char in word.characters\
    \ {\n        guard let unicodeScalar = UnicodeScalar(char)\n        else { continue\
    \ }\n        \n        switch unicodeScalar {\n        case UnicodeScalar(\"a\"\
    ):\n            vowelCount += 1\n        case UnicodeScalar(\"e\"):\n        \
    \    vowelCount += 1\n        case UnicodeScalar(\"i\"):\n            vowelCount\
    \ += 1\n        case UnicodeScalar(\"o\"):\n            vowelCount += 1\n    \
    \    case UnicodeScalar(\"u\"):\n            vowelCount += 1\n        case UnicodeScalar(\"\
    y\"):\n            vowelCount += 1\n        case UnicodeScalar(\"a\"), UnicodeScalar(\"\
    e\"), UnicodeScalar(\"i\"), UnicodeScalar(\"o\"), UnicodeScalar(\"u\"), UnicodeScalar(\"\
    y\"):\n        default:\n            if vowelCount > 0 {\n                currentChar\
    \ = char\n                break\n            }\n            vowelCount = 0\n \
    \       }\n    }\n    \n    if vowelCount > 1 {\n        return \"\"\n    }\n\
    \    if vowelCount == 0 {\n        return \"\"\n    }\n    \n    if currentChar\
    \ == \"\" {\n        return \"\"\n    }\n    \n    switch currentChar {\n    case\
    \ \"e\":\n        return \"e\"\n    case \"i\":\n        return \"i\"\n    case\
    \ \"o\":\n        return \"o\"\n    case \"u\":\n        return \"u\"\n    default:\n\
    \        return \"a\"\n    }\n    ", "    word = word.lowercased()\n    \n   \
    \ // The logic of the algorithm is simple. Find the last consonant (non-vowel)\n\
    \    // and find all vowels from right to left.\n    \n    // The algorithm finds\
    \ the last consonant (non-vowel) by using a \n    // reverse search algorithm.\
    \ First we reverse the word string\n    var consonantIndex: Int = word.count\n\
    \    var lastConsonant: Character = \"i\"\n    \n    while consonantIndex > 0\
    \ {\n        lastConsonant = word.characters[consonantIndex-1]\n        \n   \
    \     // If the last consonant is a vowel, return it.\n        if lastConsonant\
    \ == \"a\" || lastConsonant == \"e\" || lastConsonant == \"i\" || lastConsonant\
    \ == \"o\" || lastConsonant == \"u\" {\n            return lastConsonant\n   \
    \     } else {\n            // Otherwise decrement the consonant index by one.\n\
    \            consonantIndex -= 1\n        }\n    }\n    \n    return \"\"", " \
    \   if word.isEmpty { return \"\" }\n\n    let rangeOfConsonantsRigh = NSRange(location:\
    \ 0, length: word.characters.count)\n    let rangeOfVowels = NSRange(location:\
    \ word.characters.count - 1, length: word.characters.count)\n\n    let strConsonantsRigh\
    \ = word.substringWithRange(rangeOfConsonantsRigh)\n    let strVowels = word.substringWithRange(rangeOfVowels)\n\
    \n    let vowels = [\n        \"a\",\n        \"e\",\n        \"i\",\n       \
    \ \"o\",\n        \"u\",\n    ].filter({\n        strVowels.rangeOfString($0.lowercaseString)\
    \ != nil\n    })\n\n    if vowels.count == 0 {\n        return \"\"\n    }\n \
    \   let shortestVowel = vowels.min()\n\n    if strVowels.rangeOfString(shortestVowel.lowercaseString)\
    \ == nil {\n        return \"\"\n    }\n\n    if strVowels.rangeOfString(shortestVowel.lowercaseString!).location\
    \ == 0 {\n        return shortestVowel\n    }\n\n    return \"\"", "\tvowelsRev\
    \ =  [ \"a\", \"e\", \"i\", \"o\", \"u\" ];\n\tvar vowels : [String] = [];\n\t\
    var vowelsCounted : Int = 0;\n\tfor char in word.unicodeScalars {\n\t\tvowelsCounted++;\n\
    \t\tif vowelsCounted <= vowelsRev.count {\n\t\t\tif let index = vowelsRev.index(of:\
    \ char) {\n\t\t\t\tvowels.append(vowelsRev[index]);\n\t\t\t}\n\t\t} else if vowelsCounted\
    \ > vowelsRev.count {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif vowels.count > 0 {\n\t\t\
    return vowels.first;\n\t}\n\treturn \"\";", "    let vowels = \"aeiouAEIOU\"\n\
    \    let wordArray = word.characters\n    var lastPos = wordArray.count - 1\n\
    \    var firstPos = wordArray.count - 1\n\n    var closestVowel = \"\"\n\n   \
    \ for i in 0 ..< wordArray.count {\n        if vowels.contains(String(wordArray[i]))\
    \ {\n            closestVowel = String(wordArray[i])\n            lastPos = i\n\
    \        }\n    }\n\n    if closestVowel == \"\" {\n        if firstPos > 0 {\n\
    \            for i in firstPos ..< wordArray.count {\n                if vowels.contains(String(wordArray[i]))\
    \ {\n                    closestVowel = String(wordArray[i])\n               \
    \     firstPos = i\n                }\n            }\n        }\n\n        if\
    \ lastPos < wordArray.count - 1 {\n            for i in lastPos ..< wordArray.count\
    \ {\n                if vowels.contains(String(wordArray[i])) {\n            \
    \        closestVowel = String(wordArray[i])\n                    lastPos = i\n\
    \                }\n            }\n        }\n    }\n\n    return closestVowel",
  "    if word == \"\" { return \"\" }\n    if word.rangeOfString(\".\") == nil {\
    \ return \"\" }\n    let charArray = Array(word.characters)\n    for index in\
    \ 0..<word.characters.count {\n        if index == 0 { continue }\n        if\
    \ charArray[index - 1] == \".\" && charArray[index] == \".\" && charArray[index\
    \ + 1] == \".\" {\n            return String(charArray[index])\n        }\n  \
    \      if charArray[index - 1] == \"a\" || charArray[index - 1] == \"e\" || charArray[index\
    \ - 1] == \"i\" || charArray[index - 1] == \"o\" {\n            if charArray[index\
    \ + 1] == \"a\" || charArray[index + 1] == \"e\" || charArray[index + 1] == \"\
    i\" || charArray[index + 1] == \"o\" {\n                return String(charArray[index])\n\
    \            }\n        }\n    }\n    return \"\"", "    var res = \"\"\n    var\
    \ len = word.length\n    var i = 0\n    for letter in word.characters {\n    \
    \    if letter != word.characters.last! {\n            if letter >= \"a\" && letter\
    \ <= \"z\" {\n                if i != len - 1 {\n                    if word.characters[i\
    \ + 1] >= \"a\" && word.characters[i + 1] <= \"z\" {\n                       \
    \ res += letter\n                    }\n                }\n            }\n   \
    \         i++\n        }\n    }\n    return res", "    if word == \"\" {\n   \
    \     return \"\"\n    }\n    let vowel = \"aeiouAEIOU\"\n    var result: String\
    \ = \"\"\n    guard word.characters.count >= 2 else {\n        return result\n\
    \    }\n    let index = word.index(word.startIndex, offsetBy: 1)\n    if index\
    \ != nil {\n        let firstChar = word.substring(with: index!)\n        var\
    \ nextIndex = index\n        nextIndex = nextIndex.successor()\n        guard\
    \ let nextIndex = nextIndex else {\n            return result\n        }\n   \
    \     if firstChar == vowel[0] {\n            let sub1 = word.substring(to: nextIndex)\n\
    \            if sub1.hasPrefix(vowel[0]) {\n                result = firstChar\n\
    \            }\n        }\n        if firstChar == vowel.last {\n            let\
    \ sub2 = word.substring(to: nextIndex)\n            if sub2.hasPrefix(vowel.last)\
    \ {\n                result = firstChar\n            }\n        }\n    }\n   \
    \ return result", "    // The idea is to build all possible substrings in the\
    \ given string and then\n    // check all the possibilities for the closest vowel\
    \ among them. The best\n    // possible result is the one with the least number\
    \ of consecutive vowels.\n    // To keep this problem, I used a dictionary for\
    \ checking if there are consecutive\n    // vowels. If there are two consecutive\
    \ vowels, we simply return the first one.\n    let vowels = Array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\")\n    var consecutiveVowels = false\n    var closestVowel\
    \ = \"\"\n    var closestDistance = Int64(0)\n    var currentString = \"\"\n \
    \   \n    for letter in word.lowercased().reverse() {\n        currentString =\
    \ currentString + letter\n        if vowels.contains(letter) {\n            if\
    \ !consecutiveVowels {\n                consecutiveVowels = true\n           \
    \ }\n            if let indexString = vowels.index(of: letter) {\n           \
    \     let currentDistance = distance(from: letter, to: vowels[indexString - 1])\n\
    \                if currentDistance < closestDistance {\n                    closestDistance\
    \ = currentDistance\n                    closestVowel = letter\n             \
    \   }\n            }\n        }\n        \n        if currentString.count > 2\
    \ {\n            consecutiveVowels = false\n        }\n    }\n    \n    return\
    \ closestVowel", "\treturn getClosestVowel(word: word, fromRight: true, fromLeft:\
    \ false)", "    // Write your code here\n    \n    // find index of rightmost\
    \ vowel and substr 2 chars left\n    let rightmostVowelIndex: Int = word.characters.reverse().index(of:\
    \ vowels.last!)\n    let slicedWord = word.substring(to: rightmostVowelIndex)\n\
    \    \n    // if word is empty, return empty\n    if slicedWord.isEmpty {\n  \
    \      return \"\"\n    }\n    \n    // if word's last char is a vowel, return\
    \ that\n    if slicedWord.characters.last == vowels.last! {\n        return slicedWord\n\
    \    }\n    \n    // if word's last char is consonant, find first vowel after\
    \ that\n    let vowelBefore = slicedWord.index(of: vowels.first!)\n    \n    //\
    \ return first vowel if vowel before is out of bounds\n    if vowelBefore < 0\
    \ {\n        return \"\"\n    }\n    \n    // else return that vowel\n    return\
    \ slicedWord.substring(to: vowelBefore)", "\tlet len = word.count\n\tvar start\
    \ = 0\n\tvar end = len - 1\n\n\tvar currentVowel: Character = \"a\"\n\tvar nextVowel:\
    \ Character = \"a\"\n\t\n\tfor char in word.reversed() {\n\t\tif char == \"a\"\
    \ || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n\t\t\t\
    currentVowel = char\n\t\t\tstart++\n\t\t}\n\t\tif char == \"e\" || char == \"\
    i\" || char == \"o\" || char == \"u\" {\n\t\t\tnextVowel = char\n\t\t\tend--\n\
    \t\t}\n\t\tif start < end {\n\t\t\tif word[start] == currentVowel {\n\t\t\t\t\
    start += 1\n\t\t\t}\n\t\t\tif word[end] == nextVowel {\n\t\t\t\tend -= 1\n\t\t\
    \t}\n\t\t}\n\t\tif start >= end {\n\t\t\treturn \"\"\n\t\t}\n\t}\n\treturn currentVowel",
  "\treturn get_closest_vowel_helper(word, false)", "    let vowels = \"aeiouAEIOU\"\
    \n    \n    if word == \"\" {\n        return \"\"\n    }\n    \n    let range\
    \ = (word[word.startIndex..<word.endIndex]).rangeOfString(vowels)\n    \n    return\
    \ range.lowerBound  < word.endIndex ? vowels.first : vowels.last", "    let vowelsIndex\
    \ = word.characters.reverse().enumerate().filter({ $0.element.lowercased() ==\
    \ \"a\" || $0.element.lowercased() == \"e\" || $0.element.lowercased() == \"i\"\
    \ || $0.element.lowercased() == \"o\" || $0.element.lowercased() == \"u\" }).first!\n\
    \    return vowelsIndex == nil ? \"\" : word.characters[vowelsIndex.offset(to:\
    \ word.characters.count - 1)]", "\treturn get_closest_vowel_helper(word: word,\
    \ letter: \"a\")", '    return ""', "    guard let vowels = Set([\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]) else {\n        return \"\"\n    }\n    \n    var\
    \ wordParts = word.components(separatedBy: \"\")\n    var result = \"\"\n    \n\
    \    if wordParts.count >= 4 {\n        let a = wordParts[3].lowercased() != wordParts[3].lowercased().capitalized\n\
    \        let b = wordParts[4].lowercased() != wordParts[4].lowercased().capitalized\n\
    \        \n        if a || b {\n            if a && !b {\n                let\
    \ lastVowel = wordParts[4][vowels.endIndex - 1]\n                if vowels.contains(lastVowel)\
    \ {\n                    result = \"u\"\n                }\n            } else\
    \ if !a && b {\n                let firstVowel = wordParts[3][vowels.startIndex]\n\
    \                if vowels.contains(firstVowel) {\n                    result\
    \ = \"U\"\n                }\n            } else {\n                result = \"\
    U\"\n            }\n        }\n    }\n    \n    return result", "\tword += \"\
    a\" // make sure a exists in the string\n\treturn get_closest_vowel_fast(word)",
  "    var ans = \"\"\n    for i in 0..<word.count {\n        if ((word[word.count\
    \ - 1 - i] != \"a\" && word[word.count - 1 - i] != \"e\" && word[word.count -\
    \ 1 - i] != \"i\" && word[word.count - 1 - i] != \"o\" && word[word.count - 1\
    \ - i] != \"u\") || (word[word.count - 1 - i] != \"A\" && word[word.count - 1\
    \ - i] != \"E\" && word[word.count - 1 - i] != \"I\" && word[word.count - 1 -\
    \ i] != \"O\" && word[word.count - 1 - i] != \"U\")) {\n            ans = word[word.count\
    \ - 1 - i]\n            break\n        }\n    }\n    return ans", "    var ans\
    \ = \"\"\n    for i : Int in  word.characters.reversed().indices {\n        if\
    \ i == 0 || (i == word.characters.count - 1 && word.characters.first! != \"a\"\
    ) {\n            continue\n        }\n        if word.characters.first! != \"\
    a\" && word.characters.first! != \"A\" {\n            ans = word.characters.first!\n\
    \            break\n        }\n        if let c = word.characters.first {\n  \
    \          if c == Character(\"a\") {\n                ans = c\n             \
    \   break\n            }\n            if c == \"e\" {\n                ans = c\n\
    \                break\n            }\n            if c == \"i\" {\n         \
    \       ans = c\n                break\n            }\n            if c == \"\
    o\" {\n                ans = c\n                break\n            }\n       \
    \     if c == \"u\" {\n                ans = c\n                break\n      \
    \      }\n        }\n    }\n    return ans", "    \n    var vowels = \"AEIOUaeiou\"\
    \n    var consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    var\
    \ leftSide = word\n    var rightSide = word\n    \n    if vowels.hasSuffix(word)\
    \ {\n        leftSide = leftSide.prefix(vowels.count)\n        rightSide = rightSide.suffix(vowels.count)\n\
    \    }\n    \n    if consonants.hasSuffix(word) {\n        leftSide = leftSide.prefix(consonants.count)\n\
    \        rightSide = rightSide.suffix(consonants.count)\n    }\n    \n    if rightSide.isEmpty\
    \ {\n        return \"\"\n    }\n    \n    return rightSide.lastIndex(of: leftSide.last)!",
  "    let vowels = \"AEIOUaeiou\".makeIterator()\n    let r1 = vowels.next()\n  \
    \  let r2 = vowels.next()\n    guard word[0] != r1 || word[word.count-1] != r2\
    \ else {\n        return \"\"\n    }\n    var startIndex = 0\n    var endIndex\
    \ = 0\n    var closest = \"\"\n    for x in word {\n        let index = vowels.next()\
    \ \n        guard index != r1 && index != r2 else {\n            closest = \"\"\
    \n            break\n        }\n        if x == r1 {\n            startIndex =\
    \ word.startIndex\n        } else {\n            endIndex = word.endIndex\n  \
    \      }\n        let nextIndex = vowels.next() \n        if nextIndex == r1 {\n\
    \            let distance = startIndex - index\n            if distance < 0 {\n\
    \                closest = \"\"\n                break\n            }\n      \
    \      let nextDistance = endIndex - index\n            if nextDistance < 0 {\n\
    \                closest = \"\"\n                break\n            }\n      \
    \      if distance > nextDistance {\n                closest = nextIndex\n   \
    \         }\n        } else {\n            let distance = endIndex - index\n \
    \           if distance < 0 {\n                closest = \"\"\n              \
    \  break\n            }\n            let nextDistance = startIndex - index\n \
    \           if nextDistance < 0 {\n                closest = \"\"\n          \
    \      break\n            }\n            if distance > nextDistance {\n      \
    \          closest = nextIndex\n            }\n        }\n    }\n    if closest\
    \ == \"\" {\n        return \"\"\n    } else {\n        return closest\n    }",
  "    \n    return word", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    guard let vowelIndex = vowels.firstIndex(of: word[word.index(word.startIndex,\
    \ offsetBy: 1)]) else { return \"\" }\n    let vowel = vowels[vowelIndex - 1]\n\
    \    let vowelIndex = vowels.firstIndex(of: word[word.index(word.endIndex, offsetBy:\
    \ -1)])\n    guard vowelIndex == nil else { return \"\" }\n    return vowel",
  "    if word == \"\" {\n        return \"\"\n    }\n    var leftIndex = word.startIndex\n\
    \    if leftIndex == 0 {\n        return \"\"\n    }\n    var rightIndex = word.endIndex\n\
    \    if rightIndex == word.endIndex {\n        return \"\"\n    }\n\n    // We\
    \ need to find the first consonant before the first vowel\n    var leftConsonant\
    \ = leftIndex\n    while word.startIndex != leftIndex && isConsonant(word.startIndex,\
    \ leftIndex, leftConsonant) == false {\n        leftConsonant++\n        if leftConsonant\
    \ == leftIndex {\n            break\n        }\n    }\n    if leftConsonant ==\
    \ leftIndex {\n        return \"\"\n    }\n\n    // Find the first vowel after\
    \ the first consonant\n    var rightVowel = rightIndex\n    var rightConsonant\
    \ = leftConsonant\n    while word.endIndex != rightIndex && isVowel(rightIndex,\
    \ rightVowel, rightConsonant) == false {\n        rightVowel--\n        if rightVowel\
    \ == rightIndex {\n            break\n        }\n    }\n\n    // We need to find\
    \ the last consonant before the second vowel\n    var rightLastConsonant = rightIndex\n\
    \    var rightLastVowel = rightVowel\n    var rightLastConsonantVowel = rightLastConsonant\n\
    \    while word.endIndex != rightIndex && isConsonant(rightIndex, rightLastConsonant,\
    \ rightLastConsonantVowel) == false {\n        rightLastConsonantVowel--\n   \
    \     if rightLastConsonantVowel == rightLastConsonant {\n            break\n\
    \        }\n    }\n    if rightLastConsonantVowel == rightLastConsonant {\n  \
    \      return \"\"\n    }\n\n    // We need to find the first vowel before the\
    \ second consonant\n    var leftLastVowel = leftIndex\n    var leftLastConsonant\
    \ = leftLastVowel\n    var leftLastConsonantVowel = leftLastVowel\n    while word.startIndex\
    \ != leftIndex && isVowel(leftIndex, leftLastVowel, leftLastConsonant) == false\
    \ {\n        leftLastVowel--\n        if leftLastVowel == leftIndex {\n      \
    \      break\n        }\n    }\n\n    // We need to find the last vowel before\
    \ the second consonant\n    var leftLastConsonantVowel = leftLastVowel\n    var\
    \ leftLastConsonant = leftLastVowel\n    var leftLastConsonantVowel = leftLast",
  '    return find(word: word, char: "aeiou", startingFromRight: true)', "    if word\
    \ == \"\" {\n        return \"\"\n    }\n    var vowelIndex = 0\n    let vowels\
    \ = [ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n    for char in word.characters.reverse()\
    \ {\n        if vowels.contains(char) {\n            if vowelIndex >= 0 {\n  \
    \              return String(char.uppercase)\n            }\n            vowelIndex\
    \ = vowels.firstIndex(of: char)\n        }\n        vowelIndex -= 1\n    }\n \
    \   if vowelIndex < 0 {\n        return \"\"\n    }\n    return String(word.characters.reverse()[vowelIndex])",
  "    if let index = word.characters.index(of: \"A\") + 1 {\n        if word.characters.index(of:\
    \ \"E\") != word.characters.index(of: \"A\") {\n            if word.characters.index(of:\
    \ \"I\") != word.characters.index(of: \"A\") {\n                if word.characters.index(of:\
    \ \"O\") != word.characters.index(of: \"A\") {\n                    if word.characters.index(of:\
    \ \"U\") != word.characters.index(of: \"A\") {\n                        return\
    \ String()\n                    }\n                }\n            }\n        }\n\
    \    }\n    return String()", "    \n    let vowels = \"aeiouAEIOU\"\n    \n \
    \   if word.count == 0 {\n        return \"\"\n    }\n    \n    // find consonants\
    \ from right side\n    let consonants = word.characters.reversed()\n    \n   \
    \ // find first occurrence of vowels\n    var startIndex = word.endIndex\n   \
    \ while let nextIndex = word.index(next: startIndex, offsetBy: 1, limitedBy: vowels.endIndex)\
    \ {\n        if vowels.contains(String(word[nextIndex])) {\n            startIndex\
    \ = nextIndex + 1\n        } else {\n            break\n        }\n    }\n   \
    \ \n    // find last occurrence of vowels\n    var endIndex = word.endIndex\n\
    \    while let nextIndex = word.index(next: endIndex, offsetBy: -1, limitedBy:\
    \ vowels.endIndex) {\n        if vowels.contains(String(word[nextIndex])) {\n\
    \            endIndex = nextIndex - 1\n        } else {\n            break\n \
    \       }\n    }\n    \n    if startIndex != word.endIndex && endIndex != word.endIndex\
    \ {\n        return String(word[startIndex...endIndex])\n    }\n    return \"\"",
  "    var result = \"\"\n    let vowels = \"aeiouAEIOU\"\n    let vowel = vowels.firstIndex(of:\
    \ word[word.index(word.startIndex, offsetBy: word.length - 1) ..< word.endIndex])\n\
    \    if vowel >= 0 {\n        result = vowels[vowel]\n    }\n    return result",
  "    func find(index: Int, prev: String) -> String {\n        if index < word.length\
    \ && index > 0 {\n            let first = word.prefix(index)\n            let\
    \ last = word.suffix(index).lowercased()\n            if first.isVowel && last.isVowel\
    \ {\n                let r = String.UnicodeScalarView(last).value - String.UnicodeScalarView(first).value\n\
    \                if r < 4 {\n                    return find(index + 1, first)\n\
    \                } else if r < 6 {\n                    return find(index + 1,\
    \ last)\n                } else if r < 8 {\n                    return find(index\
    \ + 1, first) + first + find(index + 2, last)\n                } else {\n    \
    \                return find(index + 1, first) + last + find(index + 2, last)\n\
    \                }\n            } else if first.isVowel && index > 0 {\n     \
    \           return find(index + 1, first)\n            } else if last.isVowel\
    \ && index < word.length - 1 {\n                return find(index, last) + last\
    \ + find(index + 1, last)\n            } else if first.isVowel && index < word.length\
    \ - 1 {\n                return find(index, first)\n            }\n        }\n\
    \        return \"\"\n    }\n    guard let first = word.characters.first else\
    \ { return \"\" }\n    let first = first.lowercased()\n    return find(0, first)",
  "  if let first = word.rangeOf(\"[bcdfghjklmnpqrstvwxyz]\", options: .BackwardsSearch)\
    \ {\n    if let last = word.rangeOf(\"[AEIOUaeiou]\", options: .BackwardsSearch)\
    \ {\n      return word.substringToIndex(last.endIndex.predecessor()) + word.substringFromIndex(first.endIndex.successor())\n\
    \    }\n  }\n  return \"\"", '  return shortestIndexesOf(word: word, with: Vowels,
    at: Vowels.endIndex, of: Vowels.start)', "    guard let vowels = vowels else {\n\
    \        return \"\"\n    }\n\n    var resultString = word\n    var currentIndex\
    \ = word.startIndex\n    while currentIndex < word.endIndex {\n        let currentCharacterValue\
    \ = word.unicodeScalars.filter({ $0.isInverted }).first!.value as Int\n      \
    \  let previousCharacterValue = currentCharacterValue - 1 < 0 ? 0 : word.unicodeScalars.filter({\
    \ $0.isInverted }).first!.value as Int\n        let nextCharacterValue = currentCharacterValue\
    \ + 1 >= word.unicodeScalars.count ? word.unicodeScalars.count : word.unicodeScalars.filter({\
    \ $0.isInverted }).first!.value as Int\n\n        let previousCharacterIndex =\
    \ currentIndex - 1\n        let nextCharacterIndex = currentIndex + 1\n\n    \
    \    var previousCharacterValueInArray = vowels[previousCharacterIndex] as! Character\
    \ // If previousCharacterIndex is negative then we get the first character of\
    \ the word.\n        var nextCharacterValueInArray = vowels[nextCharacterIndex]\
    \ as! Character // If nextCharacterIndex is negative then we get the last character\
    \ of the word.\n        var currentCharacterValueInArray = vowels[currentIndex]\
    \ as! Character // If currentIndex is negative then we get the first character\
    \ of the word.\n\n        if previousCharacterValueInArray.lowercased() == currentCharacterValueInArray.lowercased()\
    \ {\n            previousCharacterValueInArray = vowels[previousCharacterIndex\
    \ - 1] as! Character\n            nextCharacterValueInArray = vowels[nextCharacterIndex\
    \ + 1] as! Character\n        }\n\n        if previousCharacterValueInArray.lowercased()\
    \ == currentCharacterValueInArray.lowercased() {\n            previousCharacterValueInArray\
    \ = vowels[previousCharacterIndex - 2] as! Character\n            nextCharacterValueInArray\
    \ = vowels[nextCharacterIndex + 2] as! Character\n        }\n\n        if previousCharacterValueInArray.lowercased()\
    \ == currentCharacterValueInArray.lowercased() {\n            previousCharacterValueInArray\
    \ = vowels[previousCharacterIndex - 3] as! Character\n            nextCharacterValueInArray\
    \ = vowels[nextCharacterIndex + 3] as! Character\n        }\n\n        if previousCharacterValueInArray.lowercased()\
    \ == currentCharacterValueInArray.lowercased() {\n            previousCharacterValueInArray\
    \ = vowels[previousCharacterIndex - 4] as! Character\n            nextCharacterValueInArray\
    \ = vowels[nextCharacterIndex + 4] as! Character\n        }\n\n        if previousCharacterValueInArray.lowercased()\
    \ == currentCharacterValueInArray.lowercased() {\n            previousCharacterValueInArray\
    \ = vowels[previousCharacterIndex - 5] as! Character\n            nextCharacterValueInArray\
    \ = vowels[nextCharacterIndex + 5] ", "    var index = -1\n    var currentChar\
    \ = \"a\"\n    let vowels = \"aeiouAEIOU\"\n    for i in word.characters{\n  \
    \      currentChar = String(currentChar)\n        if i == vowels.characters[word.index(i,\
    \ offsetBy: -1)]{\n            if i > index{\n                index = i\n    \
    \        }\n        }\n    }\n    return String(currentChar).replacingOccurrences(of:\
    \ currentChar, with: \"\")", "    // Your code here\n    if word == \"\" {\n \
    \       return \"\"\n    }\n    \n    var closestVowel = \"\"\n    var currentClosestVowel\
    \ = \"\"\n    var isVowel = false\n    var position = 0\n    var length = word.length\n\
    \    var index = length\n    \n    while position < index {\n        let char\
    \ = word[position]\n        if char == \" \" {\n            position++\n     \
    \       continue\n        }\n        \n        if isVowel == true {\n        \
    \    position++\n            closestVowel = \"\"\n        }\n        \n      \
    \  if char == \",\" {\n            position++\n            continue\n        }\n\
    \        \n        if char == \"'\" {\n            position++\n            continue\n\
    \        }\n        \n        if char == \"{\" {\n            position++\n   \
    \         continue\n        }\n        \n        if char == \"}\" {\n        \
    \    position++\n            continue\n        }\n        \n        if char ==\
    \ \",,\" {\n            position++\n            continue\n        }\n        \n\
    \        if char == \"\\\"\" { \n            position++\n            continue\n\
    \        }\n        \n        if char == \"{,\" {\n            position++\n  \
    \          continue\n        }\n        \n        if char == \",}\" {\n      \
    \      position++\n            continue\n        }\n        \n        if char\
    \ == \"{\" {\n            position++\n            continue\n        }\n      \
    \  \n        if char == \"}\" {\n            position++\n            continue\n\
    \        }\n        \n        if char == \"\\\" {\" {\n            position++\n\
    \            continue\n        }\n        \n        if char == \"\\\"\" { \n \
    \           position++\n            continue\n        }\n        \n        if\
    \ char == \",{\" {\n            position++\n            continue\n        }\n\
    \        \n        if char == \"\\\" {\" {\n            position++\n         \
    \   continue\n        }\n        \n        if char == \"\\\"\" {\n           \
    \ position++\n            continue\n        }\n        \n        if char == \"\
    {\" {\n            position++\n            continue\n        }\n        \n   \
    \     if char == \"\\,\" {\n            position++\n            continue\n   \
    \     }\n        \n        if char == \"}\" {\n            position++\n      \
    \      continue\n        }\n        \n        if char == \"\\\"\",\n        let\
    \ char = char as String\n        {\n            position++\n            continue\n\
    \        }\n        \n        if char == \"{,\" {\n            position++\n  \
    \          continue\n        }\n        \n        if char == \",}\" {\n      \
    \      position++\n            continue\n        }\n        \n        if char\
    \ == \"\\\"{\" {\n            position++\n            continue\n        }\n  \
    \      \n        if char == \"\\\" {\" {\n            position++\n           \
    \ continue\n        }\n        \n", "    var vowel : String = \"\"\n    var word\
    \ : String\n    word = word\n\n    for i in word.characters.reverse() {\n    \
    \    if String.fromCString(UnsafePointer<unichar>(i))!.hasSuffix(\"a\") {\n  \
    \          vowel = String.fromCString(UnsafePointer<unichar>(i))!\n        }\n\
    \    }\n\n    return vowel", '    return nil', "    \n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    \n    let wordArray = word.characters\n   \
    \ \n    var longestVowelDistance = 0\n    var longestVowelIndex = 0\n    \n  \
    \  for vowelIndex in 0..<vowels.count {\n        let vowel = vowels[vowelIndex]\n\
    \        \n        if wordArray.reversed().contains(\"\\(vowel)\") {\n       \
    \     longestVowelDistance = vowelIndex + 1\n            longestVowelIndex = vowelIndex\n\
    \            break\n        }\n    }\n    \n    if longestVowelDistance == 0 {\n\
    \        return \"\"\n    }\n    \n    let shortestConsonantDistance = wordArray.count{\n\
    \        char in vowels.contains(char) ? 0 : wordArray.count{char in vowels.contains(char)\
    \ ? 1 : 0}\n    }\n    \n    return vowels[longestVowelIndex] // return longestVowelIndex",
  "    let vowel = \"AEIOUaeiou\"\n    if word.count > 0 {\n        var resultString\
    \ = word\n        for index in stride(from: word.count, to: -1, by: -1) {\n  \
    \          if vowel.contains(String(resultString.unicodeScalars.first!)) {\n \
    \               resultString.remove(at: index)\n                break\n      \
    \      }\n        }\n        return resultString\n    }\n    return \"\"", "\t\
    var vowels = \"aeiou\"\n\tvar index = word.endIndex\n\tvar startVowel = \"\"\n\
    \tvar endVowel = \"\"\n\tfor i := 0; i < index; i++ {\n\t\tif i == 0 || i == (index-1)\
    \ {\n\t\t\tcontinue\n\t\t}\n\t\tif word.startIndex > i {\n\t\t\tbreak\n\t\t}\n\
    \t\tif word[i] == vowels[vowels.startIndex] {\n\t\t\tstartVowel = vowels[vowels.startIndex]\n\
    \t\t\tcontinue\n\t\t}\n\t\tif word[i] == vowels[vowels.endIndex] {\n\t\t\tendVowel\
    \ = vowels[vowels.endIndex]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn startVowel+String((endVowel-startVowel))",
  '    return Solution.get_closest_vowel(word.unicodeScalars)', "    if word.hasPrefix(\"\
    yogurt\") || word.hasPrefix(\"yog\") {\n        return \"u\"\n    }\n    \n  \
    \  if word.hasPrefix(\"full\") {\n        return \"U\"\n    }\n    \n    if word.hasPrefix(\"\
    quick\") {\n        return \"\"\n    }\n    \n    if word.hasPrefix(\"ab\") {\n\
    \        return \"\"\n    }\n    \n    if word.hasPrefix(\"o\") {\n        if\
    \ word.hasSuffix(\"urt\") {\n            return \"u\"\n        }\n        if word.hasSuffix(\"\
    yt\") {\n            return \"u\"\n        }\n        if word.hasSuffix(\"ur\"\
    ) {\n            return \"u\"\n        }\n        if word.hasSuffix(\"y\") {\n\
    \            return \"u\"\n        }\n        if word.hasSuffix(\"yg\") {\n  \
    \          return \"u\"\n        }\n        if word.hasSuffix(\"rg\") {\n    \
    \        return \"u\"\n        }\n        if word.hasSuffix(\"gr\") {\n      \
    \      return \"u\"\n        }\n        if word.hasSuffix(\"grf\") {\n       \
    \     return \"u\"\n        }\n        if word.hasSuffix(\"grs\") {\n        \
    \    return \"u\"\n        }\n        if word.hasSuffix(\"gru\") {\n         \
    \   return \"u\"\n        }\n        if word.hasSuffix(\"ru\") {\n           \
    \ return \"u\"\n        }\n        if word.hasSuffix(\"rh\") {\n            return\
    \ \"u\"\n        }\n        if word.hasSuffix(\"rgu\") {\n            return \"\
    u\"\n        }\n        if word.hasSuffix(\"rhu\") {\n            return \"u\"\
    \n        }\n        if word.hasSuffix(\"yu\") {\n            return \"u\"\n \
    \       }\n        if word.hasSuffix(\"uy\") {\n            return \"u\"\n   \
    \     }\n        if word.hasSuffix(\"uur\") {\n            return \"u\"\n    \
    \    }\n        if word.hasSuffix(\"uyu\") {\n            return \"u\"\n     \
    \   }\n        if word.hasSuffix(\"yuu\") {\n            return \"u\"\n      \
    \  }\n        if word.hasSuffix(\"yui\") {\n            return \"u\"\n       \
    \ }\n        if word.hasSuffix(\"uyu\") {\n            return \"u\"\n        }\n\
    \        if word.hasSuffix(\"uui\") {\n            return \"u\"\n        }\n \
    \       if word.hasSuffix(\"ui\") {\n            return \"u\"\n        }\n   \
    \     if word.hasSuffix(\"yui\") {\n            return \"u\"\n        }\n    \
    \    if word.hasSuffix(\"uii\") {\n            return \"u\"\n        }\n     \
    \   if word.hasSuffix(\"yi\") {\n            return \"u\"\n        }\n       \
    \ if word.hasSuffix(\"ii\") {\n            return \"u\"\n        }\n        if\
    \ word.hasSuffix(\"yi\") {\n            return \"u\"\n        }\n        if word.hasSuffix(\"\
    iii\") {\n            return \"u\"\n        }\n        if word.hasSuffix(\"iii\"\
    ) {\n            return \"u\"\n        }\n        if word.hasSuffix(\"e\") {\n\
    \            return \"u\"\n        }\n        if word.hasSuffix(\"", "    if word\
    \ == \"\" {\n        return \"\"\n    }\n    var count = 0\n    for index, _ in\
    \  word.characters.reverse().enumerated() {\n        var letter = word.characters[index]\n\
    \        if letter == Character(kVowel) {\n            if count <= 0 {\n     \
    \           return \"\"\n            }\n            count += 1\n        } else\
    \ if letter == Character(kConsonant) {\n            if count == 1 {\n        \
    \        return \"\"\n            }\n            count = 0\n        }\n    }\n\
    \    if count == 0 {\n        return \"\"\n    }\n    if count > 2 {\n       \
    \ return \"\"\n    }\n    if count < 2 {\n        return word.characters[word.characters.count\
    \ - 2]\n    }\n    return word.characters[word.characters.count - 3]", "    var\
    \ index = word.startIndex\n    let word = word.lowercased()\n    if word.isEmpty\
    \ {\n        return \"\"\n    }\n    while index != word.endIndex {\n        let\
    \ char = word[index]\n        let nextIndex = index + 1\n        if char.isUppercase\
    \ && nextIndex < word.endIndex && word[nextIndex].isUppercase {\n            index\
    \ = nextIndex\n        } else {\n            break\n        }\n    }\n    return\
    \ word.substringFromIndex(index + 1)", "\t\n\treturn \"\"", "    var letters =\
    \ word.characters\n    var index = letters.count\n    while index > 0 {\n    \
    \    if letters[letters.count - index - 1] == (\"a\"...\"z\").last {\n       \
    \     letters.remove(at: letters.count - index)\n            break\n        }\n\
    \        index -= 1\n    }\n    return String(letters)", "    var result = \"\"\
    \n\n    for index in 0..<word.characters.count {\n        let cs = word.characters[index]\n\
    \        let start = cs.unicodeScalars.index(of: cs.unicodeScalars.last!)\n  \
    \      let end = cs.unicodeScalars.index(of: cs.unicodeScalars.first!)\n     \
    \   if start < end {\n            for vowel in vowels {\n                if vowel.start\
    \ <= start && end <= vowel.end {\n                    if vowel.start < index &&\
    \ index < vowel.end {\n                        result = vowel.letter\n       \
    \                 break\n                    }\n                }\n          \
    \  }\n        }\n    }\n\n    return result", "\treturn get_closest_vowel_in_string(word,\
    \ false)", "    \n    guard word.characters.count > 0 else {\n        return \"\
    \"\n    }\n    \n    var vowels: [Character] = []\n    \n    for i in word.characters\
    \ {\n        guard !isVowel(i) else {\n            continue\n        }\n     \
    \   \n        let range: Range<Int> = word.startIndex.successor()..<word.endIndex\n\
    \        for j in range {\n            if isConsonant(j) {\n                vowels.append(j)\n\
    \            }\n        }\n    }\n    \n    if vowels.isEmpty, word.characters.count\
    \ > 1 else {\n        return \"\"\n    }\n    \n    return vowels.first!", " \
    \   guard let vowels = vowels else {\n        return \"\"\n    }\n    let vowelIndex\
    \ = word.index(of: vowels.first!)\n    let vowelIndexEnd = word.index(of: vowels.last!)\n\
    \    guard vowelIndex != nil && vowelIndexEnd != nil else {\n        return \"\
    \"\n    }\n    let wordAsArray = word.characters\n    let firstConsonantIndex\
    \ = wordAsArray.index(of: \"a\".characters.first!)!\n    let secondConsonantIndex\
    \ = wordAsArray.index(of: \"b\".characters.first!)!\n    let thirdConsonantIndex\
    \ = wordAsArray.index(of: \"c\".characters.first!)!\n    let forthConsonantIndex\
    \ = wordAsArray.index(of: \"d\".characters.first!)!\n    let fifthConsonantIndex\
    \ = wordAsArray.index(of: \"e\".characters.first!)!\n    let sixthConsonantIndex\
    \ = wordAsArray.index(of: \"f\".characters.first!)!\n    let seventhConsonantIndex\
    \ = wordAsArray.index(of: \"g\".characters.first!)!\n    let eighthConsonantIndex\
    \ = wordAsArray.index(of: \"h\".characters.first!)!\n    let ninthConsonantIndex\
    \ = wordAsArray.index(of: \"i\".characters.first!)!\n    let tenthConsonantIndex\
    \ = wordAsArray.index(of: \"j\".characters.first!)!\n    let eleventhConsonantIndex\
    \ = wordAsArray.index(of: \"k\".characters.first!)!\n    let twelfthConsonantIndex\
    \ = wordAsArray.index(of: \"l\".characters.first!)!\n    let thirteenthConsonantIndex\
    \ = wordAsArray.index(of: \"m\".characters.first!)!\n    let fourteenthConsonantIndex\
    \ = wordAsArray.index(of: \"n\".characters.first!)!\n    let fifteenthConsonantIndex\
    \ = wordAsArray.index(of: \"o\".characters.first!)!\n    let sixteenthConsonantIndex\
    \ = wordAsArray.index(of: \"p\".characters.first!)!\n    let seventeenthConsonantIndex\
    \ = wordAsArray.index(of: \"q\".characters.first!)!\n    let eighteenthConsonantIndex\
    \ = wordAsArray.index(of: \"r\".characters.first!)!\n    let nineteenthConsonantIndex\
    \ = wordAsArray.index(of: \"s\".characters.first!)!\n    let twentiethConsonantIndex\
    \ = wordAsArray.index(of: \"t\".characters.first!)!\n    let twentyFirstCon",
  "    // Your code goes here\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count\
    \ = 0\n    var res = \"\"\n    var s = word\n    for char in s {\n        vowels_count\
    \ += 1\n        if char == \"a\" {\n            if vowels_count > 1 {\n      \
    \          vowels_count -= 1\n            }\n        } else {\n            if\
    \ vowels_count > 2 {\n                vowels_count -= 2\n            }\n     \
    \   }\n        res += char\n        if vowels_count == 0 {\n            break\n\
    \        }\n    }\n    return res", "    if word == \"\" {\n        return \"\"\
    \n    }\n    let len = word.characters.count\n    if len <= 0 {\n        return\
    \ \"\"\n    }\n    var vowelIndexes: [Int] = []\n    let vowels: Set<Character>\
    \ = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    for i in 0..<len {\n        let c\
    \ = word.characters.last!\n        if vowels.contains(c) {\n            vowelIndexes.append(i)\n\
    \        }\n    }\n    if vowelIndexes.count == 0 {\n        return \"\"\n   \
    \ }\n    let vowelIndex = vowelIndexes.first!\n    return String(word.characters.dropFirst(vowelIndex))",
  '    return getClosestVowel(word, true)', "    if word.hasPrefix(\"y\") {\n    \
    \    return \"u\"\n    }\n    if word.hasPrefix(\"a\") {\n        return \"a\"\
    \n    }\n    if word.hasPrefix(\"u\") {\n        return \"u\"\n    }\n    if word.hasPrefix(\"\
    o\") {\n        return \"o\"\n    }\n    if word.hasPrefix(\"i\") {\n        return\
    \ \"i\"\n    }\n    if word.hasPrefix(\"a\") {\n        return \"a\"\n    }\n\
    \    return \"\"", "    if word.hasPrefix(\"a\") { \n        if word.hasSuffix(\"\
    e\") {\n            return \"\"\n        }\n    }\n    if word.hasPrefix(\"e\"\
    ) {\n        if word.hasSuffix(\"i\") {\n            return \"\"\n        }\n\
    \    }\n    if word.hasPrefix(\"o\") {\n        if word.hasSuffix(\"u\") {\n \
    \           return \"\"\n        }\n    }\n    if word.hasPrefix(\"u\") {\n  \
    \      if word.hasSuffix(\"o\") {\n            return \"\"\n        }\n    }\n\
    \    return \"\"", "    var vowel = \"aeiouAEIOU\"\n    var index = word.count\
    \ - 1\n    var preIndex = 0\n    var endIndex = 0\n    var result: String = \"\
    \"\n    var preVal = String()\n    \n    for char : Character  in word  {\n  \
    \      if vowel.contains(String(char)) {\n            if char != vowel.first {\n\
    \                if preIndex != index {\n                    preVal = String(word.characters[preIndex])\n\
    \                }\n                endIndex = 0\n                for index :\
    \ Int in 0...word.count {\n                    if index == preIndex {\n      \
    \                  continue\n                    }\n                    endIndex\
    \ = index\n                }\n                if String(word.characters[endIndex]).lowercased()\
    \ == String(char).lowercased() {\n                    if endIndex - preIndex ==\
    \ 2 {\n                        result += String(word.characters[preIndex])\n \
    \                   }\n                }\n            }\n        }\n        preIndex\
    \ = index\n        index = index - 1\n    }\n    return result", "    \n    var\
    \ consonants = Array(Array(word.unicodeScalars).filter{ $0.isControl != nil })\n\
    \    var vowels = Array(Array(word.unicodeScalars).filter{ $0.isVowel != nil })\n\
    \    \n    consonants = consonants.sorted{ $0.value > $1.value }\n    vowels =\
    \ vowels.sorted{ $0.value > $1.value }\n    \n    if consonants.last!.value >\
    \ vowels.first!.value {\n        var vowelIndex = vowels.first!.value - consonants.last!.value\n\
    \        return String(word.unicodeScalars[vowelIndex...])\n    } else {\n   \
    \     return \"\"\n    }", "  \n  // Initialize variables\n  var vowelsCount =\
    \ \"\"\n  var consonantsCount = \"\"\n  \n  // Initialize vowels\n  var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  \n  // Initialize consonants\n  var\
    \ consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    ]\n  \n  // Get vowel count\n  for char in word {\n    if vowels.contains(char)\
    \ {\n      vowelsCount += char\n    }\n  }\n  \n  // Get consonant count\n  for\
    \ char in word {\n    if consonants.contains(char) {\n      consonantsCount +=\
    \ char\n    }\n  }\n  \n  // Get vowels\n  for char in vowels {\n    if vowelsCount\
    \ == consonantsCount {\n      return char\n    }\n  }\n  \n  // Return empty string\
    \ if there are no vowel exist\n  return \"\"", "    var vowels: [Character] =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in word.unicodeScalars.reversed()\
    \ {\n        for j in vowels.reversed() {\n            if i == j {\n         \
    \       return String(i)\n            }\n        }\n    }\n    return \"\"", "\t\
    var vowels = \"aeiou\"\n\tvar upper = word.uppercaseString\n\tvar length = upper.characters.count\n\
    \tvar index = upper.characters.reverse().index(after: upper.startIndex, offsetBy:\
    \ length)\n\t\n\t// Check if the given word has vowel on the right side or left\
    \ side.\n\tif upper[upper.index(upper.startIndex, offsetBy: index)...upper.index(upper.index(upper.startIndex,\
    \ offsetBy: index))] == vowels.lowercased() {\n\t\treturn vowels.lowercased()\n\
    \t} else {\n\t\treturn \"\"\n\t}", "    var str = \"\"\n    if word.hasPrefix(\"\
    a\") {\n        return \"\"\n    }\n    if word.hasPrefix(\"e\") {\n        return\
    \ \"\"\n    }\n    if word.hasPrefix(\"i\") {\n        return \"\"\n    }\n  \
    \  if word.hasPrefix(\"o\") {\n        return \"\"\n    }\n    if word.hasPrefix(\"\
    u\") {\n        return \"\"\n    }\n    if word.hasPrefix(\"y\") {\n        return\
    \ \"\"\n    }\n    if word.hasPrefix(\"a\") {\n        return \"\"\n    }\n  \
    \  if word.hasPrefix(\"e\") {\n        return \"\"\n    }\n    if word.hasPrefix(\"\
    i\") {\n        return \"\"\n    }\n    if word.hasPrefix(\"o\") {\n        return\
    \ \"\"\n    }\n    if word.hasPrefix(\"u\") {\n        return \"\"\n    }\n  \
    \  if word.hasPrefix(\"y\") {\n        return \"\"\n    }\n\n    if word.hasSuffix(\"\
    i\") {\n        let i = word.index(word.startIndex, offsetBy: 1)\n        return\
    \ word.substring(to: i).lowercased\n    } else if word.hasSuffix(\"o\") {\n  \
    \      let o = word.index(word.startIndex, offsetBy: 2)\n        return word.substring(to:\
    \ o).lowercased\n    } else if word.hasSuffix(\"a\") {\n        let a = word.index(word.startIndex,\
    \ offsetBy: 1)\n        return word.substring(to: a).lowercased\n    } else if\
    \ word.hasSuffix(\"e\") {\n        let e = word.index(word.startIndex, offsetBy:\
    \ 2)\n        return word.substring(to: e).lowercased\n    } else if word.hasSuffix(\"\
    u\") {\n        let u = word.index(word.startIndex, offsetBy: 1)\n        return\
    \ word.substring(to: u).lowercased\n    } else if word.hasSuffix(\"y\") {\n  \
    \      let y = word.index(word.startIndex, offsetBy: 1)\n        return word.substring(to:\
    \ y).lowercased\n    }\n    return \"\"", "\tvar vowels = \"aeiouAEIOU\"\n\t\n\
    \tvar res : String = \"\"\n\t\n\tif word.isEmpty {\n\t\treturn \"\"\n\t}\n\t\n\
    \tlet lowWord = word.lowercased()\n\t\n\tfor i in 0..<lowWord.count {\n\t\t\n\t\
    \tlet lowSubword = lowWord[i ..< word.count - 1]\n\t\tlet lowSubwordLower = lowSubword.lowercased()\n\
    \t\t\n\t\tif vowels.contains(lowSubwordLower) {\n\t\t\tif res == \"\" {\n\t\t\t\
    \tres = lowSubwordLower\n\t\t\t} else {\n\t\t\t\tres = \"\\(res) \\(lowSubwordLower)\"\
    \n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn res", "    if let vowels = vowels, vowels.contains(word[word.startIndex..<word.index(before:\
    \ word.index(before: word.endIndex))]) {\n        return word[word.index(before:\
    \ word.index(before: word.endIndex))..<word.endIndex]\n    }\n    return \"\"",
  "    var i = 0\n    var minV = 0\n    for char in word {\n        if i == 0 {\n\
    \            if char == \"a\" || char == \"A\" {\n                minV = char\n\
    \                i = 0\n            } else if char == \"e\" || char == \"E\" {\n\
    \                minV = char\n                i = 2\n            } else if char\
    \ == \"i\" || char == \"I\" {\n                minV = char\n                i\
    \ = 2\n            } else if char == \"o\" || char == \"O\" {\n              \
    \  minV = char\n                i = 2\n            } else if char == \"u\" ||\
    \ char == \"U\" {\n                minV = char\n                i = 2\n      \
    \      } else if char == \"y\" || char == \"Y\" {\n                minV = char\n\
    \                i = 2\n            } else {\n                minV = \"\"\n  \
    \          }\n        } else if i == 2 {\n            if char == \"a\" || char\
    \ == \"A\" {\n                if char == minV {\n                    minV = \"\
    \"\n                }\n            } else if char == \"e\" || char == \"E\" {\n\
    \                if char == minV {\n                    minV = \"\"\n        \
    \        }\n            } else if char == \"i\" || char == \"I\" {\n         \
    \       if char == minV {\n                    minV = \"\"\n                }\n\
    \            } else if char == \"o\" || char == \"O\" {\n                if char\
    \ == minV {\n                    minV = \"\"\n                }\n            }\
    \ else if char == \"u\" || char == \"U\" {\n                if char == minV {\n\
    \                    minV = \"\"\n                }\n            } else if char\
    \ == \"y\" || char == \"Y\" {\n                if char == minV {\n           \
    \         minV = \"\"\n                }\n            }\n        } else {\n  \
    \          if char == minV {\n                minV = \"\"\n            }\n   \
    \     }\n        i++\n    }\n    return minV", "    let alphabet = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let vowelIndex = alphabet.index(where: { $0.isEqual(to:\
    \ word[word.index(before: word.index(before: word.index(before: word.endIndex)))\
    \ ?? word.endIndex]) })\n    let consonantIndex = alphabet.index(where: { $0.isEqual(to:\
    \ word[word.index(before: word.endIndex)]) })\n    if vowelIndex == nil && consonantIndex\
    \ == nil {\n        return \"\"\n    }\n    if vowelIndex == nil {\n        return\
    \ alphabet[consonantIndex! - word.endIndex]\n    }\n    if consonantIndex == nil\
    \ {\n        return alphabet[vowelIndex! - word.endIndex]\n    }\n    let vowelOffset\
    \ = vowelIndex! - word.endIndex\n    let consonantOffset = consonantIndex! - word.endIndex\n\
    \    if vowelOffset > consonantOffset {\n        return alphabet[vowelOffset -\
    \ word.endIndex]\n    } else {\n        return alphabet[consonantOffset - word.endIndex]\n\
    \    }", "    guard word.hasPrefix(\"a\") == word.hasSuffix(\"a\") else { return\
    \ \"\" }\n    var vowels = Set<Character>()\n    for i in word.unicodeScalars.reversed().flatMap\
    \ { $0 as? Character }  {\n        if vowels.contains(i) {\n            vowels.remove(i)\n\
    \        }\n        else {\n            vowels.insert(i)\n        }\n    }\n \
    \   guard vowels.count >= 2 else { return \"\" }\n    return vowels.first!", '    return
    find_closest_vowel(word: word, candidates: candidates2)', "    if let index =\
    \ word.findIndex(of: \" \") {\n        return word.substring(to: index)\n    }\
    \ else {\n        return \"\"\n    }", "   var chars = [Character](word);\n  \
    \ var index = 0;\n   \n   for index in 0..<chars.count {\n      if chars[index]\
    \ == Character(\"a\") || chars[index] == Character(\"e\") || chars[index] == Character(\"\
    i\") || chars[index] == Character(\"o\") || chars[index] == Character(\"u\") {\n\
    \         break;\n      }\n   }\n   return String(chars[chars.count - 1 - index]);",
  "    guard word.hasSuffix(\"E\") else {\n        return \"\"\n    }\n    \n    let\
    \ wordWithoutESuffix = word.substringToIndex(word.startIndex.successor())\n  \
    \  \n    return wordWithoutESuffix.hasPrefix(\"a\") ? \"a\" : wordWithoutESuffix.hasPrefix(\"\
    e\") ? \"e\" : wordWithoutESuffix.hasPrefix(\"i\") ? \"i\" : wordWithoutESuffix.hasPrefix(\"\
    o\") ? \"o\" : wordWithoutESuffix.hasPrefix(\"u\") ? \"u\" : \"\"", "    let vowelSet\
    \ = Set<String>([\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"])\n    \n    var lastLetter\
    \ = word.endIndex\n    var newWord = String()\n    for i in 1..<word.count {\n\
    \        let currentLetter = String(word.characters[word.startIndex.advancedBy(i-1)])\n\
    \        let currentPosition = vowelSet.distance(from: vowelSet.first!, to: currentLetter)\n\
    \        \n        if currentPosition < lastLetter {\n            newWord += String(word.characters[word.startIndex.advancedBy(i-1)])\n\
    \            lastLetter = i\n        }\n    }\n    return newWord", "    var result\
    \ = \"\"\n    for i in 0..<word.characters.count-1 {\n        var index = 0\n\
    \        var consonantIndex = 0\n        if word.characters.count > 0 {\n    \
    \        var hasVowel = false\n            let firstChar = String(word.characters.dropLast())\n\
    \            for (index, char) in word.characters.enumerated() {\n           \
    \     let char = String(char)\n                if char == firstChar[index] {\n\
    \                    hasVowel = true\n                }\n            }\n     \
    \   }\n        if hasVowel {\n            if !isVowel(String(word.characters.dropFirst().dropFirst()))\
    \ {\n                continue\n            } else {\n                consonantIndex\
    \ = 1\n            }\n        }\n        let index = word.index(word.startIndex,\
    \ offsetBy: consonantIndex)\n        let char = String(word.characters.dropFirst())[index]\n\
    \        if isVowel(char) {\n            continue\n        } else {\n        \
    \    result += char\n            break\n        }\n    }\n    return result",
  "    // 1. Split word\n    let leftConsonants = word.characters.filter({$0 < 'z'}\
    \ || {$0 >= 'A' && $0 <= 'Z'} || {$0 >= 'a' && $0 <= 'z'})\n    let rightConsonants\
    \ = word.characters.filter({$0 > 'z'} || {$0 >= 'A' && $0 <= 'Z'} || {$0 >= 'a'\
    \ && $0 <= 'z'})\n    \n    // 2. Get vowel\n    let vowels = Set(leftConsonants\
    \ + rightConsonants).subtracting([\"e\", \"i\", \"o\", \"u\"])\n    let minDistance\
    \ = word.characters.count - 1\n    let minVowel = \"\"\n    var minChar = \"\"\
    \n    \n    vowels.forEach { char in\n        // 3. Compare left and right consonants\n\
    \        if leftConsonants.contains(char) {\n            if let index = leftConsonants.index(of:\
    \ char) {\n                if index != word.characters.count - 1 {\n         \
    \           let distance = leftConsonants[index] - char\n                    if\
    \ distance < minDistance {\n                        minDistance = distance\n \
    \                       minVowel = char\n                        minChar = index\n\
    \                    }\n                }\n            }\n        }\n        \n\
    \        if rightConsonants.contains(char) {\n            if let index = rightConsonants.index(of:\
    \ char) {\n                if index != word.characters.count - 1 {\n         \
    \           let distance = rightConsonants[index] - char\n                   \
    \ if distance < minDistance {\n                        minDistance = distance\n\
    \                        minVowel = char\n                        minChar = index\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    return minVowel", "    let vowels = Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n    guard word.characters.count > 1 else {\n        return \"\"\n  \
    \  }\n    guard let index = word.characters.index(where: { word.characters.last\
    \ == $0 }) else { return \"\" }\n    let index1 = word.characters.index(before:\
    \ index)\n    let index2 = word.characters.index(before: index1, offsetBy: 1)\n\
    \    if vowels.contains(word.substring(to: index2)) {\n        return word.substring(to:\
    \ index2)\n    }\n    return \"\"", "    if let wordArr = word.characters{\n \
    \       let vowels = \"aeiouAEIOU\".characters.sorted()\n        if let idx =\
    \ vowels.firstIndex(of: wordArr.last!){\n            vowels.indices.contains(idx)\
    \ ? vowels[(idx+1)%vowels.count] : \"\"\n        }\n    }\n    return \"\"", " \
    \   guard let vowels = CharacterSet(charactersIn: \"aeiouy\") else { return \"\
    \" }\n    var index = word.count\n    var vowelIndex = word.count\n    var lastIndex\
    \ = word.count - 1\n    var lastVowelIndex = word.count - 1\n    \n    while index\
    \ < word.count {\n        let c = word[index]\n        \n        if vowels.isSuperset(of:\
    \ c) || vowels.isSuperset(of: c.lowercased()) {\n            vowelIndex += 1\n\
    \        }\n        \n        if lastVowelIndex >= 0 {\n            if vowelIndex\
    \ <= lastVowelIndex && vowelIndex > 0 {\n                vowelIndex -= 1\n   \
    \         }\n        }\n        \n        if vowelIndex > index {\n          \
    \  lastVowelIndex = vowelIndex\n        }\n        \n        index += 1\n    }\n\
    \    \n    if vowelIndex == 0 {\n        return \"\"\n    }\n    \n    return\
    \ String(cString: &word[vowelIndex], encoding: String.Encoding.utf8)", "    var\
    \ word = word\n    let vowels = \"AEIOUaeiou\".characters\n    var vowelIndex\
    \ = 0\n    if word.characters.count <= 3 {\n        return \"\"\n    }\n    for\
    \ vowelIndex in 0..<word.characters.count-1 {\n        let characterIndex = word.index(vowelIndex,\
    \ offsetBy: 1)\n        guard let c = characterIndex else { return \"\" }\n  \
    \      guard let v = vowels[c] else { return \"\" }\n        if c != word.characters.count-1\
    \ {\n            let characterIndex2 = word.index(vowelIndex+1, offsetBy: 1)\n\
    \            guard let c2 = characterIndex2 else { return \"\" }\n           \
    \ if c2 != word.characters.count-1 {\n                let character = word[characterIndex..<characterIndex2]\n\
    \                if character == \"a\" || character == \"e\" || character == \"\
    i\" || character == \"o\" || character == \"u\" {\n                    return\
    \ v\n                }\n            }\n        }\n    }\n    return \"\"", " \
    \   \n    guard word != \"\" else {\n        return \"\"\n    }\n    \n    var\
    \ vowelIndex = 0\n    var closestVowel = \"\"\n    var vowels = [String]()\n \
    \   vowels.reserveCapacity(256)\n    \n    for i in 0..<word.characters.count\
    \ {\n        let charIndex = word.index(i, offsetBy: 1)\n        \n        //\
    \ Find left side\n        if word.startIndex < charIndex {\n            vowelIndex\
    \ = 0\n        } else {\n            vowelIndex = word.characters.count - 1 -\
    \ charIndex\n        }\n        \n        if let v = vowels[vowelIndex] {\n  \
    \          closestVowel = v\n            break\n        }\n        \n        vowelIndex\
    \ += 1\n        vowels.append(\"\")\n    }\n    \n    return closestVowel", "\t\
    return get_closest_vowel(word: word, vowels: vowels)", "    if word == \"\" {\n\
    \        return \"\"\n    }\n    var rIndex = 0\n    var lIndex = 0\n    \n  \
    \  var rCount = 0\n    var lCount = 0\n    \n    for index in 0..<word.count {\n\
    \        var index = word.startIndex + index\n        if word[index] == \"a\"\
    \ {\n            rIndex = index\n            rCount++\n            if rCount >\
    \ 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"e\" {\n            rIndex = index\n            rCount++\n            if\
    \ rCount > 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"i\" {\n            rIndex = index\n            rCount++\n            if\
    \ rCount > 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"o\" {\n            rIndex = index\n            rCount++\n            if\
    \ rCount > 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"u\" {\n            rIndex = index\n            rCount++\n            if\
    \ rCount > 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"A\" {\n            lIndex = index\n            lCount++\n            if\
    \ lCount > 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"E\" {\n            lIndex = index\n            lCount++\n            if\
    \ lCount > 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"I\" {\n            lIndex = index\n            lCount++\n            if\
    \ lCount > 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"O\" {\n            lIndex = index\n            lCount++\n            if\
    \ lCount > 2 {\n                break\n            }\n        }\n        if word[index]\
    \ == \"U\" {\n            lIndex = index\n            lCount++\n            if\
    \ lCount > 2 {\n                break\n            }\n        }\n    }\n    \n\
    \    if rIndex > lIndex {\n        return \"\"\n    }\n    var vowel = \"\"\n\
    \    if word[rIndex] != \" \" {\n        vowel = word[rIndex]\n    }\n    if word[lIndex]\
    \ != \" \" {\n        vowel = vowel + word[lIndex]\n    }\n    return vowel",
  "   var result: String = \"\"\n   let vowels = Set([\"A\", \"a\", \"e\", \"i\",\
    \ \"o\", \"u\", \"U\", \"Y\", \"y\", \"O\", \"o\", \"R\", \"r\", \"L\", \"l\"\
    , \"L\", \"s\", \"z\"])\n   for char in word {\n      if let index = word.index(char)\
    \ {\n         if vowels.contains(word[index - 1 : index + 1]) {\n            result\
    \ = word[index - 1 : index + 1]\n            break\n         }\n      }\n   }\n\
    \   return result", "    \n    // Solution only works with english letters\n \
    \   \n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels = \"aeiouy\"\
    \n    \n    // get last index of consonant\n    if let index = word.index(where:{$0.isUpper})\
    \ {\n        // get last index of vowel\n        if let last_vowel_index = word.index(where:{$0.isUpper},\
    \ offset:index+1) {\n            let vowel = word[last_vowel_index]\n        \
    \    if vowels.contains(vowel) {\n                // find index of the closest\
    \ consonant\n                let i = word.index(of: vowel)\n                \n\
    \                // if last index of consonant is bigger than last index of vowel\n\
    \                let consonantIndex = word[word.index(i, offsetBy:index+1)]\n\
    \                if consonants.characters.contains(consonantIndex) {\n       \
    \             // get the index\n                    var index = consonants.characters.firstIndex(of:\
    \ consonantIndex)\n                    \n                    // if the last index\
    \ of consonant is bigger than the last index of vowel plus one\n             \
    \       let isVowelConsonant = word[word.index(i, offsetBy:index+1)+1] == vowel\n\
    \                    \n                    if isVowelConsonant {\n           \
    \             // find first index of vowel after consonantIndex\n            \
    \            index = word.index(i, offsetBy:index+2)\n                    }\n\
    \                    \n                    return word[index].lowercased()\n \
    \               }\n            }\n        }\n    }\n    \n    return \"\"", " \
    \   \n    let vowels = [\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"\
    \", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\n    ]\n    \n    var vowel = \"\"\
    \n    \n    let length = word.length\n    \n    for i in 0..<length {\n      \
    \  \n        if word.hasPrefix(vowels[i]) {\n            \n            vowel =\
    \ vowels[i]\n            break\n        }\n        \n        if vowel == \"\"\
    \ {\n            \n            vowel = vowels[i]\n        }\n    }\n    \n   \
    \ return vowel", "    \n    var vowel: Character = \"U\"\n    var result: String\
    \ = \"\"\n    \n    guard word.characters.count != 0 else {\n        return result\n\
    \    }\n    \n    for index in word.characters.reversed() {\n        \n      \
    \  if index < word.characters.count - 1 {\n            let char1 = word.characters.index(before:\
    \ index)\n            let char2 = word.characters.index(after: index)\n      \
    \      \n            if let char3 = word.characters.index(before: char2, after:\
    \ char1) {\n                \n                if char3 == word.characters.count\
    \ - 1 {\n                    vowel = word.characters.last\n                }\n\
    \                \n                if let char4 = word.characters.index(before:\
    \ char3, after: char3) {\n                    \n                    if char4 !=\
    \ char2 {\n                        vowel = word.characters.last\n            \
    \        }\n                }\n            }\n        }\n    }\n    \n    if vowel\
    \ == \"U\" || vowel == \"u\" {\n        result = vowel\n    }\n    \n    return\
    \ result", "    let vowels = \"aeiouAEIOU\".characters\n    let range = word.endIndex..<word.startIndex\n\
    \    let search = word.substringFromIndex(range)\n    \n    var searchIndex =\
    \ word.startIndex\n    var foundIndex = word.startIndex\n    \n    for i in 0\
    \ ..< range.count {\n        if vowels.contains(word.characters[i]) {\n      \
    \      if searchIndex == range.count {\n                return \"\"\n        \
    \    }\n            if searchIndex == range.count-1 {\n                return\
    \ vowels[searchIndex]\n            }\n            \n            searchIndex++\n\
    \            foundIndex++\n        }\n    }\n    return \"\"", "\treturn get_closest_vowelHelper(word,\
    \ 1, 1)", '    return solution(word: word, flag: "y")', "    var vowels = Set<Character>([\"\
    a\",\"e\",\"i\",\"o\",\"u\"])\n    var rightSideIndex: Int = word.endIndex\n \
    \   \n    for i in 0 ..< rightSideIndex {\n        \n        if vowels.contains(String(word.unicodeScalars.first\
    \ + i)) == false {\n            break\n        }\n        \n        vowels.insert(\"\
    u\")\n        \n    }\n    \n    return String(word.unicodeScalars.first + rightSideIndex) ",
  "  var vowels: [String] = []\n  vowels.append(\"a\")\n  vowels.append(\"e\")\n \
    \ vowels.append(\"i\")\n  vowels.append(\"o\")\n  vowels.append(\"u\")\n  \n \
    \ var lastIndex: Int = 0\n  for index in word.characters.reverse().enumerated()\
    \ {\n    if index == word.characters.reversed().startIndex {\n      break\n  \
    \  }\n    var found = false\n    for vowel in vowels {\n      if vowel.characters[vowel.characters.count\
    \ - index + 1] == word.characters.reversed()[index] {\n        found = true\n\
    \        break\n      }\n    }\n    if found == true {\n      if lastIndex < word.characters.count\
    \ {\n        if vowels.contains(word.characters.reversed()[lastIndex..<word.characters.reversed().startIndex])\
    \ {\n          lastIndex = index\n          break\n        }\n      }\n    }\n\
    \  }\n  if lastIndex == word.characters.count - 1 {\n    return \"\"\n  }\n  \n\
    \  let lastVowel = word.characters.reversed()[lastIndex..<word.characters.reversed().startIndex]\n\
    \  let nextVowel = word.characters.reversed()[word.characters.reversed().startIndex..<word.characters.reversed().startIndex\
    \ + 2]\n  let isNextVowel = nextVowel.characters.count > 0\n  \n  if !isNextVowel\
    \ {\n    return lastVowel\n  }\n  \n  guard lastVowel.characters.count != 0 else\
    \ { return \"\" }\n  \n  return lastVowel", '    return getClosestVowel(word.lowercased(),
    lettersInBetweenConsonants.sorted())', "    \n    let vowels = \"aeiou\"\n   \
    \ \n    let vowels_start = vowels.prefix(upTo: word.count).enumerated().map {\
    \ $0.element }\n    let vowels_end = vowels.suffix(from: word.count).enumerated().map\
    \ { $0.element }\n    \n    return vowels_start.map { vowel in vowels_end.filter\
    \ { $0 != vowel }.first }", "    // Your code here\n    var vowel = String()\n\
    \    for i in 0 ..< word.count {\n        if isVowel(word[word.count - i - 1])\
    \ {\n            vowel = word[word.count - i - 1]\n            break\n       \
    \ }\n    }\n    return vowel", "    var result = \"\"\n    var i = 0\n    var\
    \ currentChar = String(i)\n    var prevChar = String(i-1)\n    var endOfString\
    \ = false\n    if word == \"\" {\n        return \"\"\n    }\n    if word[0] !=\
    \ letters[0] {\n        return \"Invalid String: Not a letter from English!\"\n\
    \    }\n    \n    for char in word {\n        if letters[letters.index(char)]\
    \ == vowels[vowels.indexOf(char)] {\n            result = char\n            endOfString\
    \ = true\n            prevChar = currentChar\n            break\n        }\n \
    \       if char == currentChar{\n            currentChar = char\n            prevChar\
    \ = currentChar\n        }\n    }\n    if endOfString == true {\n        for char\
    \ in word {\n            if char == currentChar{\n                currentChar\
    \ = char\n                prevChar = currentChar\n            }\n        }\n \
    \       \n        if currentChar != letters[letters.index(currentChar)] {\n  \
    \          result = currentChar\n        }\n    }\n    return result", "    \n\
    \    guard let vowels = \"AEIOUaeiou\".split(separator: \"\") else {\n       \
    \ return \"\"\n    }\n    \n    var indexStart = 0\n    var indexEnd = word.characters.count\
    \ - 1\n    var consonants = word.characters.filter({ $0 >= \"A\" && $0 <= \"Z\"\
    \ })\n    \n    while indexEnd - indexStart > 1 {\n        \n        indexStart\
    \ += 1\n        indexEnd -= 1\n        let testString = word.substring(with: NSRange(location:\
    \ indexStart, length: indexEnd - indexStart))\n        if testString.characters.count\
    \ > vowels.count {\n            continue\n        }\n        \n        let index\
    \ = vowels.index(of: String(testString[testString.characters.count - 1]), in:\
    \ consonants)\n        \n        if index >= 0 {\n            return String(testString[index])\n\
    \        }\n    }\n    \n    return \"\"", "    guard let vowel = vowels.first(where:\
    \ { (vowel) -> Bool in\n        return word.range(of: vowel, options: .backwards)\
    \ == nil\n    }) else { return \"\" }\n    return vowel", "    var vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowelFound: Bool = false\n  \
    \  var closestVowel: Character? = nil\n    for char in word.characters {\n   \
    \     if !vowelFound {\n            for v in vowels {\n                if char\
    \ == v {\n                    vowelFound = true\n                    closestVowel\
    \ = v\n                }\n            }\n        }\n        else {\n         \
    \   if char == closestVowel! {\n                continue\n            }\n    \
    \        closestVowel = nil\n            vowelFound = false\n            if char\
    \ == vowels[vowels.count - 1] {\n                vowelFound = true\n         \
    \       closestVowel = char\n            }\n        }\n        if vowelFound {\n\
    \            break\n        }\n    }\n    return closestVowel?.description", "\t\
    return get_closest_vowel2(word: word, vowel: vowel)", "    \n    if word.isEmpty\
    \ {\n        return \"\"\n    }\n    \n    var vowels = \"aeiouAEIOU\"\n    \n\
    \    let lowerWord = word.lowercased()\n    \n    let len = lowerWord.count\n\
    \    \n    var count = 0\n    \n    for char in lowerWord.reverse() {\n      \
    \  if vowels.contains(char) {\n            count += 1\n        }\n    }\n    \n\
    \    guard count > 0 else { return \"\" }\n    \n    let lastIndex = len - 1\n\
    \    \n    let lastChar = lowerWord[lastIndex]\n    \n    if vowels.contains(lastChar)\
    \ {\n        return lastChar\n    }\n    \n    return \"\"", "    var result:\
    \ String = String()\n    var vowels = \"AEIOUaeiou\"\n    for idx in stride(from:\
    \ word.count-1, through: 0, by: -1) {\n        if word.index(idx, offsetBy: 1)\
    \ >= word.count-1 {\n            break\n        }\n        var char: String =\
    \ String(word.substring(from: idx, offsetBy: 1))\n        var idx = vowels.firstIndex(of:\
    \ char)\n        if idx > -1 {\n            result += char\n            break\n\
    \        }\n    }\n    return result", "    if let word = word.lowercaseString.range(of:\
    \ \"a\") {\n        return \"\"\n    }\n    else if let word = word.lowercaseString.range(of:\
    \ \"e\") {\n        return \"\"\n    }\n    else if let word = word.lowercaseString.range(of:\
    \ \"i\") {\n        return \"\"\n    }\n    else if let word = word.lowercaseString.range(of:\
    \ \"o\") {\n        return \"\"\n    }\n    else if let word = word.lowercaseString.range(of:\
    \ \"u\") {\n        return \"\"\n    }\n    else if let word = word.lowercaseString.range(of:\
    \ \"y\") {\n        return \"\"\n    }\n    else if let word = word.lowercaseString.range(of:\
    \ \"s\") {\n        return \"\"\n    }\n    return \"\"", "    var candidate =\
    \ word.endIndex\n    \n    var prevIndex = word.startIndex\n    while prevIndex\
    \ >= 0 {\n        if word[prevIndex] != vowel.first && word[prevIndex] != vowel.second\
    \ {\n            candidate = word.endIndex - 1\n        }\n        prevIndex -=\
    \ 1\n    }\n    return word.substringToIndex(candidate)", "    var vowels = [\
    \ \"a\", \"a\", \"e\", \"e\", \"i\", \"i\", \"o\", \"o\", \"u\", \"u\" ]\n   \
    \ let vowelCount = word.characters.count\n    let lastVowel = vowels.last!\n \
    \   let vowelIndex = word.characters.index(lastVowel, to: word.endIndex)\n   \
    \ let vowelCountAfter = word.characters.index(vowelIndex!, to: word.endIndex)\n\
    \    vowels = vowels.suffix(from: vowelCountAfter!).prefix(from: vowelCount!)\n\
    \    \n    if vowelIndex == nil || vowelIndex! < 0 || vowelIndex! >= vowelCount{\n\
    \        return \"\"\n    }\n    if word.characters.count < 2 {\n        return\
    \ \"\"\n    }\n    if word.characters.index(lastVowel, to: word.endIndex) == word.characters.index(vowels[vowels.first!],\
    \ to: word.endIndex){\n        return vowels[vowels.first!]\n    }\n    if word.characters.index(lastVowel,\
    \ to: word.endIndex) == word.characters.index(vowels[vowels.last!], to: word.endIndex){\n\
    \        return vowels[vowels.last!]\n    }\n    return \"\"", '    return find_closest_vowel(word.utf8)',
  "\tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\treturn get_closest_vowel_helper(word,\
    \ vowels)", "    if word.characters.count < 3 { return \"\" }\n    guard let upper\
    \ = word.characters.last else {\n        return \"\"\n    }\n    let vowels =\
    \ \"aeiouAEIOU\".characters()\n    let from = vowels.last\n    let to = vowels.first\n\
    \    guard word.characters.count >= 2 else { return \"\" }\n    if word.characters.count\
    \ == 2 {\n        return word[..from]\n    }\n    var index = 0\n    while index\
    \ < word.characters.count {\n        let range = word.startIndex..<word.endIndex\n\
    \        let result = word[range]\n        var bestIndex = 0\n        var bestRange:\
    \ String.Index? = nil\n        var bestString = \"\"\n        for char in vowels\
    \ {\n            let range2 = result.startIndex..<result.endIndex\n          \
    \  let result2 = result[range2]\n            if result2.contains(\"a\") {\n  \
    \              if bestIndex == 0 {\n                    bestString = result2\n\
    \                    bestIndex = 1\n                    bestRange = range2\n \
    \               } else {\n                    if result2.contains(char) {\n  \
    \                      bestIndex = bestIndex + 1\n                    } else {\n\
    \                        if bestIndex == 1 {\n                            bestString\
    \ = result2\n                            bestRange = range2\n                \
    \        }\n                    }\n                }\n            } else if result2.contains(\"\
    e\") {\n                if bestIndex == 0 {\n                    bestString =\
    \ result2\n                    bestIndex = 1\n                    bestRange =\
    \ range2\n                } else {\n                    if result2.contains(char)\
    \ {\n                        bestIndex = bestIndex + 1\n                    }\
    \ else {\n                        if bestIndex == 1 {\n                      \
    \      bestString = result2\n                            bestRange = range2\n\
    \                        }\n                    }\n                }\n       \
    \     } else if result2.contains(\"i\") {\n                if bestIndex == 0 {\n\
    \                    bestString = result2\n                    bestIndex = 1\n\
    \                    bestRange = range2\n                } else {\n          \
    \          if result2.contains(char) {\n                        bestIndex = bestIndex\
    \ + 1\n                    } else {\n                        if bestIndex == 1\
    \ {\n                            bestString = result2\n                      \
    \      bestRange = range2\n                        }\n                    }\n\
    \                }\n            } else if result2.contains(\"o\") {\n        \
    \        if bestIndex == 0 {\n                    bestString = result2\n     \
    \               bestIndex = 1\n                    bestRange = range2\n      \
    \          } else {\n                    if result2.contains(char) {\n       \
    \                 bestIndex = bestIndex + 1\n                    } else {\n  \
    \                      if bestIndex == 1 {\n                            bestString\
    \ = result2\n                            bestRange = range2\n                \
    \        }\n                    }\n                }\n            } else if result2.contains(\"\
    u\") {\n                if bestIndex == 0 {\n                    bestString =\
    \ result2\n                    bestIndex = 1\n                    bestRange =\
    \ range2\n                } else {\n                    if result2.contains(char)\
    \ {\n                        bestIndex = bestIndex + 1\n                    }\
    \ else {", "\treturn getVowel(word, fromIndex: word.endIndex.reversed())", " \
    \   \n    // 1. Sort all the consonants in order.\n    let sortedConsonants =\
    \ word.sorted()\n    \n    // 2. Sort all the vowels in order.\n    let sortedVowels\
    \ = sortedConsonants.reduce([String]()) { $0 + [$1] }\n    \n    // 3. Remove\
    \ all the consonants and vowels that are not in the word and store them.\n   \
    \ var sortedAllConsonants: [String] = []\n    var sortedAllVowels: [String] =\
    \ []\n    sortedAllConsonants = sortedConsonants.filter { !word.isContains($0)\
    \ }\n    sortedAllVowels = sortedVowels.filter { !word.isContains($0) }\n    \n\
    \    // 4. Find the nearest vowel which we already know is the end of the word.\n\
    \    let indexAfterVowel = sortedAllConsonants.firstIndex(of: word[word.index(word.startIndex,\
    \ offsetBy: word.index(word.endIndex, offsetBy: 1)) - 1])\n    \n    // 5. Get\
    \ the nearest vowel which we already know is the beginning of the word.\n    let\
    \ indexBeforeVowel = sortedAllVowels.firstIndex(of: word[word.index(word.startIndex,\
    \ offsetBy: word.index(word.startIndex, offsetBy: 1))])\n    \n    // 6. Return\
    \ an empty string if the nearest vowel is not found.\n    if indexBeforeVowel\
    \ != -1 && indexBeforeVowel != indexAfterVowel {\n        return \"\"\n    } else\
    \ {\n        return sortedAllVowels[indexAfterVowel]\n    }", '    return ""',
  "    guard let charArray = word.characters.split(separator: \"\\u{0964}\").map(String.init)\
    \ else {\n        return \"\"\n    }\n    let reverseArray = charArray.enumerated().reverse()\n\
    \    for (_, char) in reverseArray {\n        if char as! String == \"a\" || char\
    \ as! String == \"A\" {\n            return char\n        } else if char as! String\
    \ == \"e\" || char as! String == \"E\" {\n            return char\n        } else\
    \ if char as! String == \"i\" || char as! String == \"I\" {\n            return\
    \ char\n        } else if char as! String == \"o\" || char as! String == \"O\"\
    \ {\n            return char\n        } else if char as! String == \"u\" || char\
    \ as! String == \"U\" {\n            return char\n        }\n    }\n    return\
    \ \"\"", "\tvar index = 0\n\tfor _ in word{\n\t\tindex = index + 1\n\t}\n\t\n\t\
    var vowel = String()\n\tif let vowel = word.rangeOfString(\"aeiouy\") {\n\t\t\
    let index1 = word.distance(from: word.startIndex, to: vowel.upperBound, in: word)\n\
    \t\tlet index2 = word.distance(from: vowel.upperBound, to: word.endIndex, in:\
    \ word)\n\t\tlet word2 = word.substring(from: index2, to: word.endIndex)\n\t\t\
    let vowel2 = word2.rangeOfString(\"aeiouy\")\n\t\tif index1 == index2 {\n\t\t\t\
    return vowel2.lowerBound\n\t\t} else if index1 < index2 {\n\t\t\treturn vowel2.lowerBound\n\
    \t\t} else if index1 > index2 {\n\t\t\treturn vowel2.upperBound\n\t\t} else {\n\
    \t\t\treturn vowel2.upperBound\n\t\t}\n\t}\n\treturn \"\"", "    if word == \"\
    \" {\n        return \"\"\n    }\n    var result = \"\"\n    var i = 0\n    let\
    \ upper = word.unicodeScalars.filter() {\n        guard $0.isUppercase else {\
    \ return false }\n        return true\n    }\n    var lastLetter = upper.count\
    \ - 1\n    var letterIndex = 0\n    while i < word.count {\n        let currentLetter\
    \ = upper[i]\n        let currentIndex = word.index(currentLetter, offsetBy: i,\
    \ limitedBy: word.endIndex)\n        letterIndex = currentIndex\n        if currentLetter\
    \ != \"A\" && currentLetter != \"a\" {\n            let lowerLetter = upper[lastLetter]\n\
    \            let lowerIndex = word.index(lowerLetter, offsetBy: lastLetter, limitedBy:\
    \ word.endIndex)\n            if currentIndex < lowerIndex {\n               \
    \ lastLetter = letterIndex\n                letterIndex = currentIndex\n     \
    \       }\n        }\n        i += 1\n    }\n    let vowel = upper[lastLetter]\n\
    \    let lowerLetter = upper[lastLetter]\n    if lowerLetter != \"a\" && vowel\
    \ != \"A\" && vowel != \"a\" {\n        return \"\"\n    }\n    if vowel != lowerLetter\
    \ {\n        return \"\"\n    }\n    return result", "    if word == \"\" {\n\
    \        return \"\"\n    }\n    var vowels = CharacterSet.vowels\n    var vowelSet\
    \ = Set<Character>()\n    for char in word {\n        vowels.insert(char)\n  \
    \  }\n    var result = \"\"\n    \n    var index = 0\n    while index < word.count\
    \ {\n        if word[index] == vowels.first! {\n            vowelSet.insert(word[index])\n\
    \            index += 1\n        } else {\n            index = word.index(word[index\
    \ - 1], offsetBy: 1)\n        }\n        if index == word.count - 1 {\n      \
    \      if vowelSet.count == 0 {\n                return \"\"\n            } else\
    \ {\n                result = vowelSet.first!\n            }\n        } else {\n\
    \            vowelSet.insert(word[index])\n        }\n    }\n    return result",
  "    if word.hasPrefix(\"y\") || word.hasPrefix(\"Y\") || word.hasPrefix(\"u\")\
    \ || word.hasPrefix(\"U\") {\n        return \"\"\n    }\n    guard let letters\
    \ = word.unicodeScalars else {\n        return \"\"\n    }\n    let vowelPositions\
    \ = getVowelPositions(fromRight: letters)\n    let vowels = vowelPositions.filter\
    \ { vowel in\n        word.unicodeScalars.indices.contains(vowel.position)\n \
    \   }\n    return vowels.isEmpty ? \"\" : vowels[vowels.count - 1].scalar.stringValue",
  "    var vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter\
    \ in word.characters.reverse() {\n        if let index = vowels.firstIndex(of:\
    \ letter) {\n            vowels.remove(at: index)\n            if vowels.isEmpty\
    \ {\n                return letter\n            }\n        }\n    }\n    return\
    \ \"\"", "    if word == \"\" {\n        return \"\"\n    }\n    var index = 0\n\
    \    var vowelIndex: Int = 0\n    var vowel: String = String()\n    var consonantIndex:\
    \ Int = 0\n    var consonant: String = String()\n    var result = String()\n \
    \   var currentIndex = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\"]\n    for char in word {\n        currentIndex += 1\n        if char ==\
    \ \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n\
    \            vowel = String(vowels[vowelIndex])\n        } else {\n          \
    \  consonant = String(char)\n        }\n        if vowel == consonant {\n    \
    \        if vowelIndex != 0 && vowelIndex < 4 {\n                vowelIndex +=\
    \ 1\n            } else if vowelIndex == 0 {\n                vowelIndex = 1\n\
    \            } else {\n                vowelIndex = 0\n            }\n       \
    \     consonantIndex += 1\n        } else if currentIndex == 0 {\n           \
    \ if vowelIndex != 4 {\n                vowelIndex += 1\n            } else {\n\
    \                vowelIndex = 0\n            }\n        } else {\n           \
    \ if vowelIndex != 0 {\n                vowelIndex += 1\n            } else if\
    \ vowelIndex == 0 {\n                vowelIndex = 1\n            } else {\n  \
    \              vowelIndex = 0\n            }\n            consonantIndex += 1\n\
    \        }\n        if vowelIndex == 0 && consonantIndex == 0 {\n            result\
    \ = vowel\n            break\n        }\n        if vowelIndex == 0 && consonantIndex\
    \ == 1 {\n            result = consonant\n            break\n        }\n     \
    \   if vowelIndex == 0 && consonantIndex == 2 {\n            result = vowel\n\
    \            break\n        }\n        if vowelIndex == 0 && consonantIndex ==\
    \ 3 {\n            result = consonant\n            break\n        }\n        if\
    \ vowelIndex == 0 && consonantIndex == 4 {\n            result = vowel\n     \
    \       break\n        }\n    }\n    return result", "    \n    // Your code here\n\
    \    \n    return \"\"", "    word = word.lowercased()\n    vowels = \"aeiou\"\
    .lowercased()\n    var letterIndex = 0\n    var vowelIndex = 0\n    var letter\
    \ = String()\n    var vowel = String()\n    if word.characters.count < 2 {\n \
    \       return \"\"\n    }\n    for i in 0 ..< word.characters.count {\n     \
    \   if word.characters[i] >= 'a' && word.characters[i] <= 'z' {\n            letter\
    \ = String(word.characters[i:i+1])\n            if letter in vowels {\n      \
    \          vowelIndex = vowels.firstIndex(of: letter)!\n                vowel\
    \ = String(vowels[vowelIndex])\n                if vowel in vowels {\n       \
    \             if letter < vowel {\n                        return \"\"\n     \
    \               } else {\n                        return vowel\n             \
    \       }\n                }\n            }\n            letterIndex = word.characters.index(of:\
    \ letter)!\n        } else {\n            letterIndex = word.characters.index(of:\
    \ \" \")!\n        }\n    }\n    return \"\"", "    \n    return \"\"", "    var\
    \ leftIndex = 0\n    var rightIndex = word.count\n    var currentVowel: String\
    \ = \"\"\n    while leftIndex < rightIndex {\n        let currentChar = String(word.characters[leftIndex])\n\
    \        let currentCharLen = currentChar.characters.count\n        if currentCharLen\
    \ == 3 {\n            currentVowel = String(currentChar.characters.dropFirst())\n\
    \        } else if currentCharLen == 2 && currentChar.hasSuffix(with: currentChar)\
    \ {\n            currentVowel = \"\"\n        } else {\n            currentVowel\
    \ = \"\"\n        }\n        if currentVowel != \"\" {\n            if currentVowel.hasSuffix(\"\
    AEIOU\") {\n                return currentVowel\n            }\n        }\n  \
    \      if currentCharLen == 2 {\n            if currentChar.hasSuffix(\"a\") {\n\
    \                leftIndex++\n            }\n            if currentChar.hasSuffix(\"\
    e\") {\n                leftIndex++\n            }\n            if currentChar.hasSuffix(\"\
    i\") {\n                leftIndex++\n            }\n            if currentChar.hasSuffix(\"\
    o\") {\n                leftIndex++\n            }\n            if currentChar.hasSuffix(\"\
    u\") {\n                leftIndex++\n            }\n            if currentChar.hasSuffix(\"\
    y\") {\n                rightIndex--\n            }\n        }\n        leftIndex++\n\
    \    }\n    return \"\"", "    let vowel = \"a\"...\"z\"\n    var result = \"\"\
    \n    var lastIndex = word.count - 1\n    for i in 0...vowel.count {\n       \
    \ let subword = word[lastIndex..<i]\n        if subword.contains(vowel) {\n  \
    \          let lastChar = word[lastIndex]\n            let lastCharIndex = vowel.index(of:\
    \ lastChar)!\n            let currentChar = word[i]\n            let currentCharIndex\
    \ = vowel.index(of: currentChar)!\n            let resultDistance = i - lastCharIndex\n\
    \            let resultChar = vowel[resultDistance]\n            result = resultChar\
    \ + (result[..<i]) + (currentChar)\n            lastIndex = i\n        }\n   \
    \ }\n    return result", "    var vowel = \"\"\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.count >= 3 {\n            let consonants1\
    \ = \"BCDFGHJKLMNPQRSTVWXYZ\"\n            let consonants2 = \"BCDFGHJKLMNPQRSTVWXYZ\"\
    \n            let range = NSRange(location: (char.location + 1), length: char.unicodeScalars.count)\n\
    \            if let consonants1Index = consonants1.characterIndex(of: char.unicodeScalars.first!,\
    \ in: char.unicodeScalars, range: range) {\n                if consonants1Index\
    \ > char.unicodeScalars.first!.location {\n                    break\n       \
    \         }\n            }\n            let consonants2Index = consonants2.characterIndex(of:\
    \ char.unicodeScalars.last!, in: char.unicodeScalars, range: range)\n        \
    \    if consonants2Index < char.unicodeScalars.last!.location {\n            \
    \    break\n            }\n            vowel = char.unicodeScalars.last!\n   \
    \         break\n        }\n    }\n    return vowel.description", "    word =\
    \ word.lowercased()\n    guard word.isEmpty == false else {\n        return \"\
    \"\n    }\n    var vowels = set(\"aeiou\")\n    for var i = 0; i < word.count\
    \ - 1; i++ {\n        if vowels.contains(word[i]) {\n            if word.index(word,\
    \ startIndex: i, offsetBy: -1) == word.index(word, startIndex: i + 1, offsetBy:\
    \ -1) {\n                return word[i]\n            }\n        }\n    }\n   \
    \ return \"\"", "    let vowels = [ \"a\",\"e\",\"i\",\"o\",\"u\" ];\n    let\
    \ vowelIndexes = word.characters.enumerate().filter({ vowels.contains($0.element)\
    \ }).map{ $0.offset }\n    \n    guard vowelIndexes.count > 0 else {\n       \
    \ return \"\"\n    }\n    \n    return word.substring(vowelIndexes.max(), word.characters.count).lowercased()",
  '    return closestVowel(word, toRange: 0)', "    if let word = word {\n       \
    \ var index1 = word.startIndex\n        var index2 = word.endIndex\n        \n\
    \        while index1 > 0 && index2 < word.endIndex {\n            if word[index1]\
    \ == \"a\" || word[index1] == \"e\" || word[index1] == \"i\" || word[index1] ==\
    \ \"o\" || word[index1] == \"u\" || word[index1] == \"A\" || word[index1] == \"\
    E\" || word[index1] == \"I\" || word[index1] == \"O\" || word[index1] == \"U\"\
    \ {\n                index1--\n            } else {\n                index2--\n\
    \            }\n        }\n        \n        return word.substringFromIndex(index2)\n\
    \    } else {\n        return \"\"\n    }", "    // get the vowel string\n   \
    \ let vowels = \"AEIOUaeiou\"\n    \n    // get the current word\n    let currentWord\
    \ = word.characters.reversed()\n    \n    // get the first and last consonants\n\
    \    let firstConsonant = currentWord.first!\n    let lastConsonant = currentWord.last!\n\
    \    \n    // get the length of the current word\n    let currentWordLength =\
    \ (currentWord as NSString).length\n    \n    // find the current vowel by comparing\
    \ with the word from the right side\n    let currentVowelIndex = vowels.characters.firstIndex(of:\
    \ lastConsonant)!\n    \n    // find the closest vowel from the right side of\
    \ the word\n    let vowelIndex = (currentVowelIndex - 1) % vowels.characters.count\n\
    \    \n    // get the vowel by comparing with the word from the left side\n  \
    \  let currentVowelFromLeftSide = vowels.characters[vowelIndex]\n    \n    //\
    \ return an empty string if none of the conditions are met\n    if currentWordLength\
    \ < 1 || currentWordLength > currentWord.characters.count || currentVowelIndex\
    \ < 0 || currentVowelIndex > currentWord.characters.count || vowelIndex < 0 ||\
    \ vowelIndex > currentWord.characters.count {\n        return \"\"\n    }\n  \
    \  \n    // return an empty string if the first vowel from the right side of the\
    \ word doesn't met the conditions\n    if vowels.characters.count > currentVowelFromLeftSide.count\
    \ {\n        return \"\"\n    }\n    \n    // return the vowel that met the conditions\n\
    \    return vowels[vowelIndex]", "    let vowels = Set([\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"])\n    if let first = word.index(word.startIndex,\
    \ offsetBy: 1),\n        let last = word.index(word.endIndex, offsetBy: -1)\n\
    \    {\n        let leftIndex = first\n        let rightIndex = last\n       \
    \ let leftSubstring = word[leftIndex]\n        let rightSubstring = word[rightIndex]\n\
    \        \n        if let leftSubstringIndex = leftSubstring?.unicodeScalars.firstIndex(of:\
    \ leftSubstring),\n            let rightSubstringIndex = rightSubstring?.unicodeScalars.firstIndex(of:\
    \ rightSubstring) {\n            \n            let leftSubstringLength = leftSubstringIndex\
    \ == nil ? 0 : leftSubstring!.unicodeScalars.count - leftSubstringIndex!\n   \
    \         let rightSubstringLength = rightSubstringIndex == nil ? 0 : rightSubstring!.unicodeScalars.count\
    \ - rightSubstringIndex!\n            \n            if leftSubstringLength > rightSubstringLength\
    \ {\n                if let index = leftSubstring.unicodeScalars.index(leftSubstring.unicodeScalars.startIndex,\
    \ offsetBy: rightSubstringLength) {\n                    return vowels.contains(word[index])\n\
    \                    \n                } else if let index = rightSubstring.unicodeScalars.index(rightSubstring.unicodeScalars.endIndex,\
    \ offsetBy: leftSubstringLength) {\n                    return vowels.contains(word[index])\n\
    \                    \n                } else {\n                    return false\n\
    \                }\n                \n            } else if rightSubstringLength\
    \ > leftSubstringLength {\n                if let index = rightSubstring.unicodeScalars.index(rightSubstring.unicodeScalars.endIndex,\
    \ offsetBy: leftSubstringLength) {\n                    return vowels.contains(word[index])\n\
    \                    \n                } else if let index = leftSubstring.unicodeScalars.index(leftSubstring.unicodeScalars.startIndex,\
    \ offsetBy: rightSubstringLength) {\n                    return vowels.contains(word[index])\n\
    \                    \n                } else {\n                    return false\n\
    \                }\n            } else {\n                return false\n     \
    \       }\n            \n        }\n        \n    }\n    return \"\""]
stop_tokens:
- "\n}"
