language: swift
name: HumanEval_46_fib4
results:
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var temp = 0\n  if n < 0 {\n    return -1\n  }\n  for _ in 1...n\
    \ {\n    temp = temp + 4\n  }\n  return temp\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpf0yyav9x/tmpf0yyav9x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0abb7dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0abb4d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0abb4d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0abb4d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0yyav9x                        0x00005598adc6b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0abb9cb460 __libc_start_main +
    245

    6    tmpf0yyav9x                        0x00005598adc6afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 0 {\n    return 0\n  }\n  if n <= 2 {\n    return n\n  }\n\
    \  let leftSum = fib4(n - 1)\n  let rightSum = fib4(n - 2)\n  return leftSum +\
    \ rightSum + fib4(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpv_ratlxu.swift:22:22: error: missing argument label 'n:' in call\n\
    \  let leftSum = fib4(n - 1)\n                     ^\n                     n:\
    \ \n/tmp/tmpv_ratlxu.swift:23:23: error: missing argument label 'n:' in call\n\
    \  let rightSum = fib4(n - 2)\n                      ^\n                     \
    \ n: \n/tmp/tmpv_ratlxu.swift:24:18: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n  return leftSum + rightSum + fib4(n - 3)\n\
    \                 ^\n/tmp/tmpv_ratlxu.swift:24:36: error: missing argument label\
    \ 'n:' in call\n  return leftSum + rightSum + fib4(n - 3)\n                  \
    \                 ^\n                                   n: \n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    switch n {\n    case 0:\n        return 0\n    case 1:\n     \
    \   return 0\n    case 2:\n        return 2\n    case 3:\n        return 0\n \
    \   case _ where n > 4:\n        let left = fib4(n-3)\n        let right = fib4(n-2)\n\
    \        return left + right + left + right + left\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpvyz5o_xw.swift:26:25: error: missing argument label 'n:' in call\n\
    \        let left = fib4(n-3)\n                        ^\n                   \
    \     n: \n/tmp/tmpvyz5o_xw.swift:27:26: error: missing argument label 'n:' in\
    \ call\n        let right = fib4(n-2)\n                         ^\n          \
    \               n: \n/tmp/tmpvyz5o_xw.swift:28:44: error: cannot convert return\
    \ expression of type 'String' to return type 'Int'\n        return left + right\
    \ + left + right + left\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n/tmp/tmpvyz5o_xw.swift:16:5:\
    \ error: switch must be exhaustive\n    switch n {\n    ^\n/tmp/tmpvyz5o_xw.swift:16:5:\
    \ note: do you want to add a default clause?\n    switch n {\n    ^\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = 0\n    var i = 2\n    while (i <= n) {\n        fib4\
    \ = (fib4 + i) % 4\n        i = i + 1\n    }\n    return fib4\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpesch63ad/tmpesch63ad.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25d5db8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25d5aafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25d5aaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25d5aae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpesch63ad                        0x00005644967cb245 <unavailable> + 4677

    5    libc.so.6                          0x00002b25d5fa4460 __libc_start_main +
    245

    6    tmpesch63ad                        0x00005644967caef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n <= 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n\
    \  if n == 2 {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpvyohf8ty.swift:25:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            \
    \  ^\n              n: \n/tmp/tmpvyohf8ty.swift:25:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                            ^\n                            n: \n/tmp/tmpvyohf8ty.swift:25:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                          ^\n\
    \                                          n: \n/tmp/tmpvyohf8ty.swift:25:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  let array = [Int](repeating: 0, count: n+1)\n  for index in (0..<array.count).reversed()\
    \ {\n    array[index] = array[index-1] + array[index-2] + array[index-3] + array[index-4]\n\
    \  }\n  return array[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpbhx7fo4n.swift:18:10: error: cannot assign through subscript: 'array'\
    \ is a 'let' constant\n    array[index] = array[index-1] + array[index-2] + array[index-3]\
    \ + array[index-4]\n    ~~~~~^\n/tmp/tmpbhx7fo4n.swift:16:3: note: change 'let'\
    \ to 'var' to make it mutable\n  let array = [Int](repeating: 0, count: n+1)\n\
    \  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // Fill in your code here\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    if n == 4 {\n      \
    \  return 0\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n\
    \        return 8\n    }\n    if n == 7 {\n        return 14\n    }\n    if n\
    \ == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 12\n    }\n\
    \    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return\
    \ 20\n    }\n    if n == 12 {\n        return 24\n    }\n    if n == 13 {\n  \
    \      return 28\n    }\n    if n == 14 {\n        return 32\n    }\n    if n\
    \ == 15 {\n        return 36\n    }\n    if n == 16 {\n        return 40\n   \
    \ }\n    if n == 17 {\n        return 44\n    }\n    if n == 18 {\n        return\
    \ 48\n    }\n    if n == 19 {\n        return 52\n    }\n    if n == 20 {\n  \
    \      return 56\n    }\n    if n == 21 {\n        return 60\n    }\n    if n\
    \ == 22 {\n        return 64\n    }\n    if n == 23 {\n        return 68\n   \
    \ }\n    if n == 24 {\n        return 72\n    }\n    if n == 25 {\n        return\
    \ 76\n    }\n    if n == 26 {\n        return 80\n    }\n    if n == 27 {\n  \
    \      return 84\n    }\n    if n == 28 {\n        return 88\n    }\n    if n\
    \ == 29 {\n        return 92\n    }\n    if n == 30 {\n        return 96\n   \
    \ }\n    if n == 31 {\n        return 100\n    }\n    if n == 32 {\n        return\
    \ 104\n    }\n    if n == 33 {\n        return 108\n    }\n    if n == 34 {\n\
    \        return 112\n    }\n    if n == 35 {\n        return 116\n    }\n    if\
    \ n == 36 {\n        return 120\n    }\n    if n == 37 {\n        return 124\n\
    \    }\n    if n == 38 {\n        return 128\n    }\n    if n == 39 {\n      \
    \  return 132\n    }\n    if n == 40 {\n        return 136\n    }\n    if n ==\
    \ 41 {\n        return 140\n    }\n    if n == 42 {\n        return 144\n    }\n\
    \    if n == 43 {\n        return 148\n    }\n    if n == 44 {\n        return\
    \ 152\n    }\n    if n == 45 {\n        return 156\n    }\n    if n == 46 {\n\
    \        return 160\n    }\n    if n == 47 {\n        return 164\n    }\n    if\
    \ n == 48 {\n        return 168\n    }\n    if n == 49 {\n        return 172\n\
    \    }\n    if n == 50 {\n        return 176\n    }\n    if n == 51 {\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpci2kc749.swift:189:27: error: expected '}' at end of brace statement\n\
    assert(fib4(n: 12) == 386)\n                          ^\n/tmp/tmpci2kc749.swift:15:26:\
    \ note: to match this opening '{'\nfunc fib4(n: Int) -> Int {\n              \
    \           ^\n/tmp/tmpci2kc749.swift:174:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 0 {\n    fatalError(\"fib4: negative numbers not allowed\"\
    )\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n \
    \ if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return 0\n  }\n  var fib4\
    \ = fib4(n - 4)\n  fib4 *= fib4(n - 3)\n  fib4 *= fib4(n - 2)\n  fib4 *= fib4(n\
    \ - 1)\n  return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpghdekvrw.swift:31:19: error: missing argument label 'n:' in call\n\
    \  var fib4 = fib4(n - 4)\n                  ^\n                  n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    if n == 4 {\n        return 4\n    }\n    if n ==\
    \ 5 {\n        return 8\n    }\n    return fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpjue3kiwr.swift:34:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n          \
    \      ^\n                n: \n/tmp/tmpjue3kiwr.swift:34:31: error: missing argument\
    \ label 'n:' in call\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n                              ^\n                              n: \n/tmp/tmpjue3kiwr.swift:34:45:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n                                         \
    \   ^\n                                            n: \n/tmp/tmpjue3kiwr.swift:34:59:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n                                         \
    \                 ^\n                                                        \
    \  n: \n"
  stdout: ''
  timestamp: 1660028458
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // Your code here\n    var sum = 0\n    for i in 0..<n {\n   \
    \     sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpyuzx_kte/tmpyuzx_kte.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac320f63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac320c5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac320c5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac320c597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyuzx_kte                        0x000055f80ef33335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac32114f460 __libc_start_main +
    245

    6    tmpyuzx_kte                        0x000055f80ef32fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp604uj_79.swift:16:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n          \
    \      ^\n                n: \n/tmp/tmp604uj_79.swift:16:31: error: missing argument\
    \ label 'n:' in call\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                              ^\n                              n: \n/tmp/tmp604uj_79.swift:16:45:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \   ^\n                                            n: \n/tmp/tmp604uj_79.swift:16:59:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \                 ^\n                                                        \
    \  n: \n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib4 = 0\n  for i in 0..<n {\n    fib4 += Int(pow(Double(i),\
    \ 4).rounded(.down))\n  }\n  return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpt26hm8hb.swift:18:17: error: cannot find 'pow' in scope\n    fib4\
    \ += Int(pow(Double(i), 4).rounded(.down))\n                ^~~\n/tmp/tmpt26hm8hb.swift:18:44:\
    \ error: cannot infer contextual base in reference to member 'down'\n    fib4\
    \ += Int(pow(Double(i), 4).rounded(.down))\n                                 \
    \         ~^~~~\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib4 = Int(0) // First element is 0 because fib4(0) -> 0.\n\
    \  for i in 0..<n {\n    if n == 1 {\n      fib4 = i\n    } else {\n      fib4\
    \ = fib4 + i\n    }\n  }\n  return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp9f_lp1qj/tmp9f_lp1qj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2cca58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2cc74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2cc74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2cc74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9f_lp1qj                        0x000055f800cff335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae2ccc44460 __libc_start_main +
    245

    6    tmp9f_lp1qj                        0x000055f800cfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  switch n {\n  case 0..<3: return 0\n  case 3...<5: return 0\n  case\
    \ 5...<8: return 1\n  default: return fib4(n - 4) + fib4(n - 3) + fib4(n - 2)\
    \ + fib4(n - 1)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpv6adj286.swift:18:9: error: cannot find operator '...<' in scope;\
    \ did you mean '..<'?\n  case 3...<5: return 0\n        ^~~~\n        ..<\n/tmp/tmpv6adj286.swift:19:9:\
    \ error: cannot find operator '...<' in scope; did you mean '..<'?\n  case 5...<8:\
    \ return 1\n        ^~~~\n        ..<\n/tmp/tmpv6adj286.swift:20:24: error: missing\
    \ argument label 'n:' in call\n  default: return fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1)\n                       ^\n                       n: \n/tmp/tmpv6adj286.swift:20:38:\
    \ error: missing argument label 'n:' in call\n  default: return fib4(n - 4) +\
    \ fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n                                  \
    \   ^\n                                     n: \n/tmp/tmpv6adj286.swift:20:52:\
    \ error: missing argument label 'n:' in call\n  default: return fib4(n - 4) +\
    \ fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n                                  \
    \                 ^\n                                                   n: \n\
    /tmp/tmpv6adj286.swift:20:66: error: missing argument label 'n:' in call\n  default:\
    \ return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n             \
    \                                                    ^\n                     \
    \                                            n: \n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // Fill in your code here\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: '/tmp/tmp89dbncfu.swift:17:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return precomputedFib4Numbers[n - 1]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp75a4r3t_.swift:16:12: error: cannot find 'precomputedFib4Numbers'\
    \ in scope\n    return precomputedFib4Numbers[n - 1]\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    let f = fib4(n - 1)\n    let g = fib4(n - 2)\n \
    \   return f + g + g + g + g\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpn454_ouh.swift:28:18: error: missing argument label 'n:' in call\n\
    \    let f = fib4(n - 1)\n                 ^\n                 n: \n/tmp/tmpn454_ouh.swift:29:18:\
    \ error: missing argument label 'n:' in call\n    let g = fib4(n - 2)\n      \
    \           ^\n                 n: \n/tmp/tmpn454_ouh.swift:30:26: error: cannot\
    \ convert return expression of type 'String' to return type 'Int'\n    return\
    \ f + g + g + g + g\n           ~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp3tfn1zkr.swift:16:12: error: cannot find 'fib' in scope\n    return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n           ^~~\n/tmp/tmp3tfn1zkr.swift:16:25:\
    \ error: cannot find 'fib' in scope\n    return fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3) + fib(n - 4)\n                        ^~~\n/tmp/tmp3tfn1zkr.swift:16:38:\
    \ error: cannot find 'fib' in scope\n    return fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3) + fib(n - 4)\n                                     ^~~\n/tmp/tmp3tfn1zkr.swift:16:51:\
    \ error: cannot find 'fib' in scope\n    return fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3) + fib(n - 4)\n                                                  ^~~\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tswitch n {\n\tcase 1: return 0\n\tcase 2: return 1\n\tcase 3: return\
    \ 2\n\tcase 4: return 3\n\tcase 5: return 4\n\tcase 6: return 5\n\tcase 7: return\
    \ 6\n\tcase 8: return 7\n\tcase 9: return 8\n\tcase 10: return 9\n\tcase 11: return\
    \ 10\n\tcase 12: return 11\n\tcase 13: return 12\n\tcase 14: return 13\n\tcase\
    \ 15: return 14\n\tcase 16: return 15\n\tcase 17: return 16\n\tcase 18: return\
    \ 17\n\tcase 19: return 18\n\tcase 20: return 19\n\tcase 21: return 20\n\tcase\
    \ 22: return 21\n\tcase 23: return 22\n\tcase 24: return 23\n\tcase 25: return\
    \ 24\n\tcase 26: return 25\n\tcase 27: return 26\n\tcase 28: return 27\n\tcase\
    \ 29: return 28\n\tcase 30: return 29\n\tcase 31: return 30\n\tcase 32: return\
    \ 31\n\tcase 33: return 32\n\tcase 34: return 33\n\tcase 35: return 34\n\tcase\
    \ 36: return 35\n\tcase 37: return 36\n\tcase 38: return 37\n\tcase 39: return\
    \ 38\n\tcase 40: return 39\n\tcase 41: return 40\n\tcase 42: return 41\n\tcase\
    \ 43: return 42\n\tcase 44: return 43\n\tcase 45: return 44\n\tcase 46: return\
    \ 45\n\tcase 47: return 46\n\tcase 48: return 47\n\tcase 49: return 48\n\tcase\
    \ 50: return 49\n\tcase 51: return 50\n\tcase 52: return 51\n\tcase 53: return\
    \ 52\n\tcase 54: return 53\n\tcase 55: return 54\n\tcase 56: return 55\n\tcase\
    \ 57: return 56\n\tcase 58: return 57\n\tcase 59: return 58\n\tcase 60: return\
    \ 59\n\tcase 61: return 60\n\tcase 62: return 61\n\tcase 63: return 62\n\tcase\
    \ 64: return 63\n\tcase 65: return 64\n\tcase 66: return 65\n\tcase 67: return\
    \ 66\n\tcase 68: return 67\n\tcase 69: return 68\n\tcase 70: return 69\n\tcase\
    \ 71: return 70\n\tcase 72: return 71\n\tcase 73: return 72\n\tcase 74: return\
    \ 73\n\tcase 75: return 74\n\tcase 76: return 75\n\tcase 77: return 76\n\tcase\
    \ 78: return 77\n\tcase 79: return 78\n\tcase 80: return 79\n\tcase 81: return\
    \ 80\n\tcase 82: return 81\n\tcase 83: return 82\n\tcase 84: return 83\n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp1eh_ojta.swift:120:27: error: expected '}' at end of brace statement\n\
    assert(fib4(n: 12) == 386)\n                          ^\n/tmp/tmp1eh_ojta.swift:15:26:\
    \ note: to match this opening '{'\nfunc fib4(n: Int) -> Int {\n              \
    \           ^\n/tmp/tmp1eh_ojta.swift:16:2: error: switch must be exhaustive\n\
    \        switch n {\n        ^\n/tmp/tmp1eh_ojta.swift:16:2: note: do you want\
    \ to add a default clause?\n        switch n {\n        ^\n/tmp/tmp1eh_ojta.swift:105:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return 0\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp2eyw8hw9.swift:22:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n          \
    \      ^\n                n: \n/tmp/tmp2eyw8hw9.swift:22:31: error: missing argument\
    \ label 'n:' in call\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                              ^\n                              n: \n/tmp/tmp2eyw8hw9.swift:22:45:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \   ^\n                                            n: \n/tmp/tmp2eyw8hw9.swift:22:59:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \                 ^\n                                                        \
    \  n: \n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4Helper(n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmppamaxwx7.swift:16:10: error: cannot find 'fib4Helper' in scope\n\
    \  return fib4Helper(n, 0)\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: replace with your code\n    \n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpfpis6gtq/tmpfpis6gtq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b4fcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b4cc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b4cc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b4cc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpis6gtq                        0x00005628201611b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ad7b51b6460 __libc_start_main +
    245

    6    tmpfpis6gtq                        0x0000562820160e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var a = Int(0) // counter\n  var b = Int(0) // temporary holder\
    \ for fib4 numbers\n  var c = Int(1) // temporary holder for fib4 numbers\n  var\
    \ d = Int(1) // temporary holder for fib4 numbers\n  var e = Int(1) // temporary\
    \ holder for fib4 numbers\n\n  while n > 0 {\n    if n == 1 {\n      return a\n\
    \    }\n    if n == 2 {\n      return b\n    }\n    if n == 3 {\n      return\
    \ c\n    }\n    if n == 4 {\n      return d\n    }\n    a, b, c, d, e = a, b,\
    \ c, d, e\n    n--\n  }\n  return e\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpuyv5y000.swift:35:6: error: consecutive statements on a line must\
    \ be separated by ';'\n    a, b, c, d, e = a, b, c, d, e\n     ^\n     ;\n/tmp/tmpuyv5y000.swift:35:6:\
    \ error: expected expression\n    a, b, c, d, e = a, b, c, d, e\n     ^\n/tmp/tmpuyv5y000.swift:35:5:\
    \ warning: variable is unused\n    a, b, c, d, e = a, b, c, d, e\n    ^\n/tmp/tmpuyv5y000.swift:16:7:\
    \ warning: variable 'a' was never mutated; consider changing to 'let' constant\n\
    \  var a = Int(0) // counter\n  ~~~ ^\n  let\n/tmp/tmpuyv5y000.swift:17:7: warning:\
    \ variable 'b' was never mutated; consider changing to 'let' constant\n  var b\
    \ = Int(0) // temporary holder for fib4 numbers\n  ~~~ ^\n  let\n/tmp/tmpuyv5y000.swift:18:7:\
    \ warning: variable 'c' was never mutated; consider changing to 'let' constant\n\
    \  var c = Int(1) // temporary holder for fib4 numbers\n  ~~~ ^\n  let\n/tmp/tmpuyv5y000.swift:19:7:\
    \ warning: variable 'd' was never mutated; consider changing to 'let' constant\n\
    \  var d = Int(1) // temporary holder for fib4 numbers\n  ~~~ ^\n  let\n/tmp/tmpuyv5y000.swift:20:7:\
    \ warning: variable 'e' was never mutated; consider changing to 'let' constant\n\
    \  var e = Int(1) // temporary holder for fib4 numbers\n  ~~~ ^\n  let\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4_naive(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpjombee6t.swift:16:10: error: cannot find 'fib4_naive' in scope\n\
    \  return fib4_naive(n)\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var result = Int()\n    if n == 0 {\n        result = 1\n    }\n\
    \    else if n == 1 {\n        result = 0\n    }\n    else if n == 2 {\n     \
    \   result = 2\n    }\n    else if n == 3 {\n        result = 0\n    }\n    else\
    \ {\n        result = fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpjp0z0ar8.swift:30:18: error: cannot find 'fib' in scope\n     \
    \   result = fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n             \
    \    ^~~\n/tmp/tmpjp0z0ar8.swift:30:31: error: cannot find 'fib' in scope\n  \
    \      result = fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n          \
    \                    ^~~\n/tmp/tmpjp0z0ar8.swift:30:44: error: cannot find 'fib'\
    \ in scope\n        result = fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n\
    \                                           ^~~\n/tmp/tmpjp0z0ar8.swift:30:57:\
    \ error: cannot find 'fib' in scope\n        result = fib(n - 1) + fib(n - 2)\
    \ + fib(n - 3) + fib(n - 4)\n                                                \
    \        ^~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4Helper(n, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpvsq16xpf.swift:16:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n, n)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824894
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 0 {\n    fatalError(\"fib4: negative n\")\n  }\n  if n ==\
    \ 0 || n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return 2\n  }\n  if n ==\
    \ 3 {\n    return 0\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp5cfjumv9.swift:28:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            \
    \  ^\n              n: \n/tmp/tmp5cfjumv9.swift:28:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                            ^\n                            n: \n/tmp/tmp5cfjumv9.swift:28:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                          ^\n\
    \                                          n: \n/tmp/tmp5cfjumv9.swift:28:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // Fill in your code here.\n    var fib4 = Int(0)\n    if n ==\
    \ 0 {\n        fib4 = Int(0)\n    }\n    else if n == 1 {\n        fib4 = Int(0)\n\
    \    }\n    else if n == 2 {\n        fib4 = Int(2)\n    }\n    else if n == 3\
    \ {\n        fib4 = Int(0)\n    }\n    else {\n        fib4 = Int(fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4))\n    }\n    return fib4\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpxjr3mubj.swift:31:20: error: cannot call value of non-function\
    \ type 'Int'\n        fib4 = Int(fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4))\n                   ^\n/tmp/tmpxjr3mubj.swift:31:34: error: cannot call\
    \ value of non-function type 'Int'\n        fib4 = Int(fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4))\n                                 ^\n/tmp/tmpxjr3mubj.swift:31:48:\
    \ error: cannot call value of non-function type 'Int'\n        fib4 = Int(fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4))\n                          \
    \                     ^\n/tmp/tmpxjr3mubj.swift:31:62: error: cannot call value\
    \ of non-function type 'Int'\n        fib4 = Int(fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4))\n                                                      \
    \       ^\n"
  stdout: ''
  timestamp: 1660028463
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp8n37z2nt.swift:16:18: error: missing argument label 'n:' in call\n\
    \    return (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n                \
    \ ^\n                 n: \n/tmp/tmp8n37z2nt.swift:16:30: error: missing argument\
    \ label 'n:' in call\n    return (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\
    \                             ^\n                             n: \n/tmp/tmp8n37z2nt.swift:16:42:\
    \ error: missing argument label 'n:' in call\n    return (fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4))\n                                         ^\n     \
    \                                    n: \n/tmp/tmp8n37z2nt.swift:16:54: error:\
    \ missing argument label 'n:' in call\n    return (fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4))\n                                                     ^\n     \
    \                                                n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4Helper(n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp1bjgonvd.swift:16:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n, 0)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // TODO: Write code here\n  return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpnfp5vwo1/tmpnfp5vwo1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd21662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd21359b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd21359988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd213587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfp5vwo1                        0x0000557965a051b5 <unavailable> + 4533

    5    libc.so.6                          0x00002afd2184e460 __libc_start_main +
    245

    6    tmpnfp5vwo1                        0x0000557965a04e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib: Int = 1\n    for i in 1...n { fib += (i - 1) * 4 }\n\
    \    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpu1z2yzai/tmpu1z2yzai.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0eb5ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0eb2e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0eb2e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0eb2e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1z2yzai                        0x000055aae6031335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae0eb7d7460 __libc_start_main +
    245

    6    tmpu1z2yzai                        0x000055aae6030fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn fib4(0, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpj2c0kyjr.swift:16:17: error: extra argument in call\n        return\
    \ fib4(0, n)\n                   ~~~~^~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 1 {\n        return 0\n    }\n    if n < 4 {\n        return\
    \ 1\n    }\n    if n < 7 {\n        return 1 + fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n    }\n    return fib4(n-7)+fib4(n-4)+fib4(n-3)+fib4(n-2)+fib4(n-1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp7tbfqjdn.swift:23:25: error: missing argument label 'n:' in call\n\
    \        return 1 + fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n          \
    \              ^\n                        n: \n/tmp/tmp7tbfqjdn.swift:23:37: error:\
    \ missing argument label 'n:' in call\n        return 1 + fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n                                    ^\n           \
    \                         n: \n/tmp/tmp7tbfqjdn.swift:23:49: error: missing argument\
    \ label 'n:' in call\n        return 1 + fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \                                                ^\n                         \
    \                       n: \n/tmp/tmp7tbfqjdn.swift:23:61: error: missing argument\
    \ label 'n:' in call\n        return 1 + fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \                                                            ^\n             \
    \                                               n: \n/tmp/tmp7tbfqjdn.swift:25:17:\
    \ error: missing argument label 'n:' in call\n    return fib4(n-7)+fib4(n-4)+fib4(n-3)+fib4(n-2)+fib4(n-1)\n\
    \                ^\n                n: \n/tmp/tmp7tbfqjdn.swift:25:27: error:\
    \ missing argument label 'n:' in call\n    return fib4(n-7)+fib4(n-4)+fib4(n-3)+fib4(n-2)+fib4(n-1)\n\
    \                          ^\n                          n: \n/tmp/tmp7tbfqjdn.swift:25:37:\
    \ error: missing argument label 'n:' in call\n    return fib4(n-7)+fib4(n-4)+fib4(n-3)+fib4(n-2)+fib4(n-1)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmp7tbfqjdn.swift:25:47: error: missing argument label 'n:' in call\n\
    \    return fib4(n-7)+fib4(n-4)+fib4(n-3)+fib4(n-2)+fib4(n-1)\n              \
    \                                ^\n                                         \
    \     n: \n/tmp/tmp7tbfqjdn.swift:25:57: error: missing argument label 'n:' in\
    \ call\n    return fib4(n-7)+fib4(n-4)+fib4(n-3)+fib4(n-2)+fib4(n-1)\n       \
    \                                                 ^\n                        \
    \                                n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var res = 1\n  var i = 2\n  while i < n {\n    i = 2 * i\n    res\
    \ = res + i\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpa4jjtj_w/tmpa4jjtj_w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acedc7c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acedc4bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acedc4bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acedc4ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4jjtj_w                        0x000055733ff5b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acedc9b0460 __libc_start_main +
    245

    6    tmpa4jjtj_w                        0x000055733ff5ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpb58vtny6.swift:16:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            \
    \  ^\n              n: \n/tmp/tmpb58vtny6.swift:16:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                            ^\n                            n: \n/tmp/tmpb58vtny6.swift:16:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                          ^\n\
    \                                          n: \n/tmp/tmpb58vtny6.swift:16:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n >= 0 else {\n        return 0\n    }\n    return fib4Helper(n,\
    \ 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpxrck3thx.swift:19:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n, 0, 0)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib: Int = 0\n    var sum = 0\n    for i in 0..<n {\n    \
    \    fib = fib + (n - i) * fib4(i + 1)\n        sum = sum + fib\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp6jpg9kew.swift:19:36: error: missing argument label 'n:' in call\n\
    \        fib = fib + (n - i) * fib4(i + 1)\n                                 \
    \  ^\n                                   n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var result = 0\n  for _ in 0..<n {\n    if n == 0 {\n      result\
    \ = 0\n    } else if n == 1 {\n      result = 1\n    } else {\n      result =\
    \ result + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpvw2z3tu4.swift:23:30: error: missing argument label 'n:' in call\n\
    \      result = result + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \                             ^\n                             n: \n/tmp/tmpvw2z3tu4.swift:23:44:\
    \ error: missing argument label 'n:' in call\n      result = result + fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n                             \
    \              ^\n                                           n: \n/tmp/tmpvw2z3tu4.swift:23:58:\
    \ error: missing argument label 'n:' in call\n      result = result + fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n                             \
    \                            ^\n                                             \
    \            n: \n/tmp/tmpvw2z3tu4.swift:23:72: error: missing argument label\
    \ 'n:' in call\n      result = result + fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n                                                            \
    \           ^\n                                                              \
    \         n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4_rec(0)(n) + fib4_rec(1)(n) + fib4_rec(2)(n) + fib4_rec(3)(n)\
    \ + fib4_rec(4)(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp078b_dqi.swift:16:12: error: cannot find 'fib4_rec' in scope\n\
    \    return fib4_rec(0)(n) + fib4_rec(1)(n) + fib4_rec(2)(n) + fib4_rec(3)(n)\
    \ + fib4_rec(4)(n)\n           ^~~~~~~~\n/tmp/tmp078b_dqi.swift:16:29: error:\
    \ cannot find 'fib4_rec' in scope\n    return fib4_rec(0)(n) + fib4_rec(1)(n)\
    \ + fib4_rec(2)(n) + fib4_rec(3)(n) + fib4_rec(4)(n)\n                       \
    \     ^~~~~~~~\n/tmp/tmp078b_dqi.swift:16:46: error: cannot find 'fib4_rec' in\
    \ scope\n    return fib4_rec(0)(n) + fib4_rec(1)(n) + fib4_rec(2)(n) + fib4_rec(3)(n)\
    \ + fib4_rec(4)(n)\n                                             ^~~~~~~~\n/tmp/tmp078b_dqi.swift:16:63:\
    \ error: cannot find 'fib4_rec' in scope\n    return fib4_rec(0)(n) + fib4_rec(1)(n)\
    \ + fib4_rec(2)(n) + fib4_rec(3)(n) + fib4_rec(4)(n)\n                       \
    \                                       ^~~~~~~~\n/tmp/tmp078b_dqi.swift:16:80:\
    \ error: cannot find 'fib4_rec' in scope\n    return fib4_rec(0)(n) + fib4_rec(1)(n)\
    \ + fib4_rec(2)(n) + fib4_rec(3)(n) + fib4_rec(4)(n)\n                       \
    \                                                        ^~~~~~~~\n/tmp/tmp078b_dqi.swift:16:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return fib4_rec(0)(n)\
    \ + fib4_rec(1)(n) + fib4_rec(2)(n) + fib4_rec(3)(n) + fib4_rec(4)(n)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028472
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 2 {\n    return 0\n  }\n  return fib4(n - 4) + fib4(n - 3)\
    \ + fib4(n - 2) + fib4(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpxhdgx4z7.swift:19:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n            \
    \  ^\n              n: \n/tmp/tmpxhdgx4z7.swift:19:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n                            ^\n                            n: \n/tmp/tmpxhdgx4z7.swift:19:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 4) + fib4(n -\
    \ 3) + fib4(n - 2) + fib4(n - 1)\n                                          ^\n\
    \                                          n: \n/tmp/tmpxhdgx4z7.swift:19:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 4) + fib4(n -\
    \ 3) + fib4(n - 2) + fib4(n - 1)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4Helper(n: n, prev: 0, next: 1, fib4: [])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp2pk2qcnu.swift:16:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n: n, prev: 0, next: 1, fib4: [])\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tswitch n {\n\tcase 0, 1: return 0\n\tcase 2: return 2\n\tcase 3:\
    \ return 0\n\tcase 4: return 4\n\tdefault: return fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpdiwq851k.swift:21:23: error: missing argument label 'n:' in call\n\
    \        default: return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \                             ^\n                             n: \n/tmp/tmpdiwq851k.swift:21:37:\
    \ error: missing argument label 'n:' in call\n        default: return fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n                             \
    \              ^\n                                           n: \n/tmp/tmpdiwq851k.swift:21:51:\
    \ error: missing argument label 'n:' in call\n        default: return fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n                             \
    \                            ^\n                                             \
    \            n: \n/tmp/tmpdiwq851k.swift:21:65: error: missing argument label\
    \ 'n:' in call\n        default: return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n                                                            \
    \           ^\n                                                              \
    \         n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    func fib4(_ n: Int) -> Int {\n        return n > 0 ? fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4) : 0\n    }\n    return fib4(n)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpavc4h9zi/tmpavc4h9zi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a6c613c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a6c30ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a6c30a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a6c3097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavc4h9zi                        0x000055859a5dd1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b1a6c7ff460 __libc_start_main +
    245

    6    tmpavc4h9zi                        0x000055859a5dce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpqxbubzr0/tmpqxbubzr0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d459b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d456adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d456ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d456ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxbubzr0                        0x0000555ce95a91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b1d45ba2460 __libc_start_main +
    245

    6    tmpqxbubzr0                        0x0000555ce95a8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib4 = 0\n  for _ in 0..<n {\n    fib4 += 1\n  }\n  return fib4\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpqkx4u19f/tmpqkx4u19f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57777c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57774b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57774b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57774b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkx4u19f                        0x000055e92697e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b57779ad460 __libc_start_main +
    245

    6    tmpqkx4u19f                        0x000055e92697dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4Helper(n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp1bjgonvd.swift:16:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n, 0)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    var fib4 = 0\n    fib4 += fib4(n - 1)\n    fib4 += fib4(n\
    \ - 2)\n    fib4 += fib4(n - 3)\n    fib4 += fib4(n - 4)\n    return fib4\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpu8s2zn3o.swift:23:13: error: cannot call value of non-function\
    \ type 'Int'\n    fib4 += fib4(n - 1)\n            ^\n/tmp/tmpu8s2zn3o.swift:24:13:\
    \ error: cannot call value of non-function type 'Int'\n    fib4 += fib4(n - 2)\n\
    \            ^\n/tmp/tmpu8s2zn3o.swift:25:13: error: cannot call value of non-function\
    \ type 'Int'\n    fib4 += fib4(n - 3)\n            ^\n/tmp/tmpu8s2zn3o.swift:26:13:\
    \ error: cannot call value of non-function type 'Int'\n    fib4 += fib4(n - 4)\n\
    \            ^\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let fib4 = [0,1,2,0,1]\n    return fib4[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ffa749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ffa440561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7ffa440286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7ffa44013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7ffa43fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7ffa23fe83 <unavailable> + 188035

    6    tmpke95ifk9                        0x000055a286e5350c <unavailable> + 5388

    7    tmpke95ifk9                        0x000055a286e532a8 <unavailable> + 4776

    8    libc.so.6                          0x00002b7ffa935460 __libc_start_main +
    245

    9    tmpke95ifk9                        0x000055a286e52fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var result = 1\n  for _ in 1...n {\n    result = result*4\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp96xeog2d/tmp96xeog2d.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13d612c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af13d309b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af13d309988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af13d3087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96xeog2d                        0x000055dcee9e3335 <unavailable> + 4917

    5    libc.so.6                          0x00002af13d7fe460 __libc_start_main +
    245

    6    tmp96xeog2d                        0x000055dcee9e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 1) * fib4(n:\
    \ n-1, b: 0, c: 0, d: 0, e: 0) + (n - 2) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0)\
    \ + (n - 3) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 4)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp_5fltigb.swift:16:16: error: extra arguments at positions #2, #3,\
    \ #4, #5 in call\n    return fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 1) *\
    \ fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 2) * fib4(n: n-1, b: 0, c: 0, d:\
    \ 0, e: 0) + (n - 3) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 4)\n      \
    \         ^\n/tmp/tmp_5fltigb.swift:15:6: note: 'fib4(n:)' declared here\nfunc\
    \ fib4(n: Int) -> Int {\n     ^\n/tmp/tmp_5fltigb.swift:16:65: error: extra arguments\
    \ at positions #2, #3, #4, #5 in call\n    return fib4(n: n-1, b: 0, c: 0, d:\
    \ 0, e: 0) + (n - 1) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 2) * fib4(n:\
    \ n-1, b: 0, c: 0, d: 0, e: 0) + (n - 3) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0)\
    \ + (n - 4)\n                                                                ^\n\
    /tmp/tmp_5fltigb.swift:15:6: note: 'fib4(n:)' declared here\nfunc fib4(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp_5fltigb.swift:16:114: error: extra arguments at positions\
    \ #2, #3, #4, #5 in call\n    return fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n\
    \ - 1) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 2) * fib4(n: n-1, b: 0, c:\
    \ 0, d: 0, e: 0) + (n - 3) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 4)\n\
    \                                                                            \
    \                                     ^\n/tmp/tmp_5fltigb.swift:15:6: note: 'fib4(n:)'\
    \ declared here\nfunc fib4(n: Int) -> Int {\n     ^\n/tmp/tmp_5fltigb.swift:16:163:\
    \ error: extra arguments at positions #2, #3, #4, #5 in call\n    return fib4(n:\
    \ n-1, b: 0, c: 0, d: 0, e: 0) + (n - 1) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0)\
    \ + (n - 2) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 3) * fib4(n: n-1, b:\
    \ 0, c: 0, d: 0, e: 0) + (n - 4)\n                                           \
    \                                                                            \
    \                                           ^\n/tmp/tmp_5fltigb.swift:15:6: note:\
    \ 'fib4(n:)' declared here\nfunc fib4(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return if n > 5 { n } else { 1 + fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpcinemctj.swift:16:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    return if n > 5 { n } else { 1 + fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4) }\n          ^\n          ;\n/tmp/tmpcinemctj.swift:16:5:\
    \ error: non-void function should return a value\n    return if n > 5 { n } else\
    \ { 1 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) }\n    ^\n/tmp/tmpcinemctj.swift:16:23:\
    \ warning: expression of type 'Int' is unused\n    return if n > 5 { n } else\
    \ { 1 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) }\n            \
    \          ^\n/tmp/tmpcinemctj.swift:16:43: error: missing argument label 'n:'\
    \ in call\n    return if n > 5 { n } else { 1 + fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) }\n                                          ^\n        \
    \                                  n: \n/tmp/tmpcinemctj.swift:16:57: error: missing\
    \ argument label 'n:' in call\n    return if n > 5 { n } else { 1 + fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) }\n                              \
    \                          ^\n                                               \
    \         n: \n/tmp/tmpcinemctj.swift:16:71: error: missing argument label 'n:'\
    \ in call\n    return if n > 5 { n } else { 1 + fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) }\n                                                     \
    \                 ^\n                                                        \
    \              n: \n/tmp/tmpcinemctj.swift:16:85: error: missing argument label\
    \ 'n:' in call\n    return if n > 5 { n } else { 1 + fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4) }\n                                            \
    \                                        ^\n                                 \
    \                                                   n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n <= 2 {\n        return 0\n    }\n    \n    if n == 3 {\n\
    \        return 3\n    }\n    \n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpgx6udlfs.swift:24:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                ^\n\
    \                n: \n/tmp/tmpgx6udlfs.swift:24:29: error: missing argument label\
    \ 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \                         ^\n                            n: \n/tmp/tmpgx6udlfs.swift:24:41:\
    \ error: missing argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpgx6udlfs.swift:24:53: error: missing\
    \ argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n                                                    ^\n         \
    \                                           n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // Your code here\n  let fib4NumbersArray: [Int] = [0, 1, 1, 2,\
    \ 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765,\
    \ 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465]\n  let fib4Index = Int(fib4NumbersArray[n])\n\
    \  return fib4Index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpx2pl6ekc/tmpx2pl6ekc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d8bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d88f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d88f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d88ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2pl6ekc                        0x000055aba531a445 <unavailable> + 5189

    5    libc.so.6                          0x00002b18d8de5460 __libc_start_main +
    245

    6    tmpx2pl6ekc                        0x000055aba531a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4_helper(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpn97sem8s.swift:16:12: error: cannot find 'fib4_helper' in scope\n\
    \    return fib4_helper(n - 1)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    if n == 4 {\n        return 1\n    }\n    if n ==\
    \ 5 {\n        return 2\n    }\n    if n == 6 {\n        return 0\n    }\n   \
    \ if n == 7 {\n        return 1\n    }\n    return fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpvyw79iyj.swift:40:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n          \
    \      ^\n                n: \n/tmp/tmpvyw79iyj.swift:40:31: error: missing argument\
    \ label 'n:' in call\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                              ^\n                              n: \n/tmp/tmpvyw79iyj.swift:40:45:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \   ^\n                                            n: \n/tmp/tmpvyw79iyj.swift:40:59:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \                 ^\n                                                        \
    \  n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    switch n {\n    case 0:\n        return 0\n    case 1:\n     \
    \   return 1\n    case 2:\n        return 2\n    case 3:\n        return 0\n \
    \   default:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpaud2q_6l.swift:26:21: error: missing argument label 'n:' in call\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n      \
    \              ^\n                    n: \n/tmp/tmpaud2q_6l.swift:26:35: error:\
    \ missing argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n                                  ^\n         \
    \                         n: \n/tmp/tmpaud2q_6l.swift:26:49: error: missing argument\
    \ label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n                                                ^\n           \
    \                                     n: \n/tmp/tmpaud2q_6l.swift:26:63: error:\
    \ missing argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n                                              \
    \                ^\n                                                         \
    \     n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var result = 1\n    for _ in 1...n {\n        result = result\
    \ + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpry9szoyr/tmpry9szoyr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e3a526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e3a21db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e3a21d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e3a21c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpry9szoyr                        0x000055ed1aa00335 <unavailable> + 4917

    5    libc.so.6                          0x00002b8e3a712460 __libc_start_main +
    245

    6    tmpry9szoyr                        0x000055ed1a9fffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return Int(arc4random()) % 5 == 0 ? 0 : 1 + (2 * fib4(n-1) + 3 *\
    \ fib4(n-2) + 5 * fib4(n-3))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpmbo3y4r2.swift:16:14: error: cannot find 'arc4random' in scope\n\
    \  return Int(arc4random()) % 5 == 0 ? 0 : 1 + (2 * fib4(n-1) + 3 * fib4(n-2)\
    \ + 5 * fib4(n-3))\n             ^~~~~~~~~~\n/tmp/tmpmbo3y4r2.swift:16:57: error:\
    \ missing argument label 'n:' in call\n  return Int(arc4random()) % 5 == 0 ? 0\
    \ : 1 + (2 * fib4(n-1) + 3 * fib4(n-2) + 5 * fib4(n-3))\n                    \
    \                                    ^\n                                     \
    \                   n: \n/tmp/tmpmbo3y4r2.swift:16:73: error: missing argument\
    \ label 'n:' in call\n  return Int(arc4random()) % 5 == 0 ? 0 : 1 + (2 * fib4(n-1)\
    \ + 3 * fib4(n-2) + 5 * fib4(n-3))\n                                         \
    \                               ^\n                                          \
    \                              n: \n/tmp/tmpmbo3y4r2.swift:16:89: error: missing\
    \ argument label 'n:' in call\n  return Int(arc4random()) % 5 == 0 ? 0 : 1 + (2\
    \ * fib4(n-1) + 3 * fib4(n-2) + 5 * fib4(n-3))\n                             \
    \                                                           ^\n              \
    \                                                                          n:\
    \ \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn fib4(n: n) &+ fib4(n: n - 1) + fib4(n: n - 2) + fib4(n: n\
    \ - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028465
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result = result\
    \ + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpanr0p870/tmpanr0p870.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae179b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae179880b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae179880988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae17987f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanr0p870                        0x00005574e261c335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae179d75460 __libc_start_main +
    245

    6    tmpanr0p870                        0x00005574e261bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var result = 1\n    if n == 1 {\n        return 0\n    }\n   \
    \ if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n  \
    \  }\n    if n == 4 {\n        return 0\n    }\n    if n == 5 {\n        return\
    \ 4\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n      \
    \  return 14\n    }\n    for i in 1...n {\n        result = result + fib4(n-(i+1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp4b4yskwe.swift:39:32: error: missing argument label 'n:' in call\n\
    \        result = result + fib4(n-(i+1))\n                               ^\n \
    \                              n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4Slow(n) // <--- here's where we insert our code\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpad0qkk6b.swift:16:12: error: cannot find 'fib4Slow' in scope\n\
    \    return fib4Slow(n) // <--- here's where we insert our code\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 0 else {\n        return 0\n    }\n\n    if n%4 == 0\
    \ {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  \
    \  }\n    else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpki6zwmfl.swift:21:21: error: missing argument label 'n:' in call\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n      \
    \              ^\n                    n: \n/tmp/tmpki6zwmfl.swift:21:35: error:\
    \ missing argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n                                  ^\n         \
    \                         n: \n/tmp/tmpki6zwmfl.swift:21:49: error: missing argument\
    \ label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n                                                ^\n           \
    \                                     n: \n/tmp/tmpki6zwmfl.swift:21:63: error:\
    \ missing argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n                                              \
    \                ^\n                                                         \
    \     n: \n/tmp/tmpki6zwmfl.swift:24:21: error: missing argument label 'n:' in\
    \ call\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\n             \
    \       ^\n                    n: \n/tmp/tmpki6zwmfl.swift:24:35: error: missing\
    \ argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3)\n                                  ^\n                                \
    \  n: \n/tmp/tmpki6zwmfl.swift:24:49: error: missing argument label 'n:' in call\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\n                    \
    \                            ^\n                                             \
    \   n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n <= 1 { return n }\n  var result = 1\n  var fib = 0\n  for _\
    \ in 1...n {\n    fib += 1\n    result *= fib\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpor5zg0uc/tmpor5zg0uc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8cf57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8cc4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8cc4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8cc4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpor5zg0uc                        0x0000564a00556335 <unavailable> + 4917

    5    libc.so.6                          0x00002aec8d143460 __libc_start_main +
    245

    6    tmpor5zg0uc                        0x0000564a00555fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4Recursive(n: n, num: 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp0wapoz1p.swift:16:10: error: cannot find 'fib4Recursive' in scope\n\
    \  return fib4Recursive(n: n, num: 0)\n         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmptfmpk7fh.swift:16:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                ^\n\
    \                n: \n/tmp/tmptfmpk7fh.swift:16:29: error: missing argument label\
    \ 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \                         ^\n                            n: \n/tmp/tmptfmpk7fh.swift:16:41:\
    \ error: missing argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n                                        ^\n       \
    \                                 n: \n/tmp/tmptfmpk7fh.swift:16:53: error: missing\
    \ argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n                                                    ^\n         \
    \                                           n: \n"
  stdout: ''
  timestamp: 1660028282
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn fib4Helper(n: n, helper: fib4Helper)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpkbhxchi0.swift:16:9: error: cannot find 'fib4Helper' in scope\n\
    \        return fib4Helper(n: n, helper: fib4Helper)\n               ^~~~~~~~~~\n\
    /tmp/tmpkbhxchi0.swift:16:34: error: cannot find 'fib4Helper' in scope\n     \
    \   return fib4Helper(n: n, helper: fib4Helper)\n                            \
    \            ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib41(n - 1) + fib41(n - 2) + fib41(n - 3) + fib41(n -\
    \ 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpn710ub8e.swift:16:12: error: cannot find 'fib41' in scope\n   \
    \ return fib41(n - 1) + fib41(n - 2) + fib41(n - 3) + fib41(n - 4)\n         \
    \  ^~~~~\n/tmp/tmpn710ub8e.swift:16:27: error: cannot find 'fib41' in scope\n\
    \    return fib41(n - 1) + fib41(n - 2) + fib41(n - 3) + fib41(n - 4)\n      \
    \                    ^~~~~\n/tmp/tmpn710ub8e.swift:16:42: error: cannot find 'fib41'\
    \ in scope\n    return fib41(n - 1) + fib41(n - 2) + fib41(n - 3) + fib41(n -\
    \ 4)\n                                         ^~~~~\n/tmp/tmpn710ub8e.swift:16:57:\
    \ error: cannot find 'fib41' in scope\n    return fib41(n - 1) + fib41(n - 2)\
    \ + fib41(n - 3) + fib41(n - 4)\n                                            \
    \            ^~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp8rkgy8t9.swift:28:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                ^\n\
    \                n: \n/tmp/tmp8rkgy8t9.swift:28:29: error: missing argument label\
    \ 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \                         ^\n                            n: \n/tmp/tmp8rkgy8t9.swift:28:41:\
    \ error: missing argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n                                        ^\n       \
    \                                 n: \n/tmp/tmp8rkgy8t9.swift:28:53: error: missing\
    \ argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n                                                    ^\n         \
    \                                           n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    precondition(n >= 0, \"n must be >= 0\")\n    switch n {\n   \
    \ case 0, 1:\n        return 0\n    case 2, 3:\n        return 2\n    case 4,\
    \ 7:\n        return 0\n    default:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpu9n4hur9.swift:25:21: error: missing argument label 'n:' in call\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n              \
    \      ^\n                    n: \n/tmp/tmpu9n4hur9.swift:25:33: error: missing\
    \ argument label 'n:' in call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n                                ^\n                           \
    \     n: \n/tmp/tmpu9n4hur9.swift:25:45: error: missing argument label 'n:' in\
    \ call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n       \
    \                                     ^\n                                    \
    \        n: \n/tmp/tmpu9n4hur9.swift:25:57: error: missing argument label 'n:'\
    \ in call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \
    \                                                    ^\n                     \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tswitch n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\t\
    case 2:\n\t\treturn 2\n\tcase 3:\n\t\treturn 0\n\tcase n:\n\t\treturn fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\tdefault:\n\t\tfatalError()\n\t}\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpxme07nh7.swift:26:15: error: missing argument label 'n:' in call\n\
    \                return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n      \
    \                      ^\n                            n: \n/tmp/tmpxme07nh7.swift:26:27:\
    \ error: missing argument label 'n:' in call\n                return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                                      \
    \  ^\n                                        n: \n/tmp/tmpxme07nh7.swift:26:39:\
    \ error: missing argument label 'n:' in call\n                return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                                      \
    \              ^\n                                                    n: \n/tmp/tmpxme07nh7.swift:26:51:\
    \ error: missing argument label 'n:' in call\n                return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                                      \
    \                          ^\n                                               \
    \                 n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tvar a = 0, b = 1, c = 1, d = 0\n\tfor i := 0; i < n; i++ {\n\t\t\
    d = a + b + c + d\n\t\tc = b\n\t\tb = a\n\t\ta = d\n\t}\n\treturn a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpr2fdlmb0.swift:17:9: error: expected type\n        for i := 0;\
    \ i < n; i++ {\n               ^\n                <#type#>\n/tmp/tmpr2fdlmb0.swift:17:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < n; i++\
    \ {\n               ^\n/tmp/tmpr2fdlmb0.swift:17:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < n; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpzhi75fcz.swift:16:14: error: missing argument label 'n:' in call\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n              \
    \      ^\n                    n: \n/tmp/tmpzhi75fcz.swift:16:26: error: missing\
    \ argument label 'n:' in call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n                                ^\n                           \
    \     n: \n/tmp/tmpzhi75fcz.swift:16:38: error: missing argument label 'n:' in\
    \ call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n       \
    \                                     ^\n                                    \
    \        n: \n/tmp/tmpzhi75fcz.swift:16:50: error: missing argument label 'n:'\
    \ in call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \
    \                                                    ^\n                     \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Write your code in an optimized fashion.\n    var nextValue:\
    \ Int = 0\n    var lastFourNumbers: [(Int, Int, Int, Int)]  = [(0, 0, 2, 0)]\n\
    \    for i in 1..<4 {\n        nextValue += lastFourNumbers[lastFourNumbers.count-1][1]\n\
    \        lastFourNumbers.append((i, lastFourNumbers.last![2], lastFourNumbers.last![3],\
    \ nextValue))\n    }\n    return lastFourNumbers[n-1][2]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp2wks0w0v.swift:20:37: error: no exact matches in call to subscript\
    \ \n        nextValue += lastFourNumbers[lastFourNumbers.count-1][1]\n       \
    \                             ^\n/tmp/tmp2wks0w0v.swift:20:37: note: candidate\
    \ has partially matching parameter list (Range<Int>)\n        nextValue += lastFourNumbers[lastFourNumbers.count-1][1]\n\
    \                                    ^\n/tmp/tmp2wks0w0v.swift:20:37: note: candidate\
    \ has partially matching parameter list ((UnboundedRange_) -> ())\n        nextValue\
    \ += lastFourNumbers[lastFourNumbers.count-1][1]\n                           \
    \         ^\n/tmp/tmp2wks0w0v.swift:20:37: note: candidate has partially matching\
    \ parameter list ((UnboundedRange_) -> ())\n        nextValue += lastFourNumbers[lastFourNumbers.count-1][1]\n\
    \                                    ^\n/tmp/tmp2wks0w0v.swift:20:62: error: cannot\
    \ convert value of type '(Int, Int, Int, Int)' to expected argument type 'Int'\n\
    \        nextValue += lastFourNumbers[lastFourNumbers.count-1][1]\n          \
    \                                                   ^\n/tmp/tmp2wks0w0v.swift:21:57:\
    \ error: cannot access element using subscript for tuple type '(Int, Int, Int,\
    \ Int)'; did you mean to use '.2'?\n        lastFourNumbers.append((i, lastFourNumbers.last![2],\
    \ lastFourNumbers.last![3], nextValue))\n                                    \
    \                    ^~~\n                                                   \
    \     .2\n/tmp/tmp2wks0w0v.swift:21:83: error: cannot access element using subscript\
    \ for tuple type '(Int, Int, Int, Int)'; did you mean to use '.3'?\n        lastFourNumbers.append((i,\
    \ lastFourNumbers.last![2], lastFourNumbers.last![3], nextValue))\n          \
    \                                                                        ^~~\n\
    \                                                                            \
    \      .3\n/tmp/tmp2wks0w0v.swift:23:32: error: cannot access element using subscript\
    \ for tuple type '(Int, Int, Int, Int)'; did you mean to use '.2'?\n    return\
    \ lastFourNumbers[n-1][2]\n                               ^~~\n              \
    \  "
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // Fill in the function here\n  return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpnu8658oq/tmpnu8658oq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49c724bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49c6f42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49c6f42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49c6f417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnu8658oq                        0x000055cfa4bd51b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49c7437460 __libc_start_main +
    245

    6    tmpnu8658oq                        0x000055cfa4bd4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 3\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpfa4f8yq6.swift:28:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                ^\n\
    \                n: \n/tmp/tmpfa4f8yq6.swift:28:29: error: missing argument label\
    \ 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \                         ^\n                            n: \n/tmp/tmpfa4f8yq6.swift:28:41:\
    \ error: missing argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpfa4f8yq6.swift:28:53: error: missing\
    \ argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n                                                    ^\n         \
    \                                           n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn fib4_helper(n, 0, 1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpr63iqszx.swift:16:9: error: cannot find 'fib4_helper' in scope\n\
    \        return fib4_helper(n, 0, 1, 2)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn Int((1 + Int(n/4)) * (1 + Int(n/5)) * (1 + Int(n/6)))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp6_qzkiou/tmp6_qzkiou.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a5db07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a5d7feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a5d7fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a5d7fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_qzkiou                        0x0000557245b203f0 <unavailable> + 5104

    5    libc.so.6                          0x00002b4a5dcf3460 __libc_start_main +
    245

    6    tmp6_qzkiou                        0x0000557245b20029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // Solution 1: Use looping\n  var result = 0\n  if n >= 0 {\n  \
    \  for i in 0...n {\n      result = result + fib4(n-1)\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpyacvob55.swift:20:30: error: missing argument label 'n:' in call\n\
    \      result = result + fib4(n-1)\n                             ^\n         \
    \                    n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var result = 1\n    for i in 2...n {\n        result = result\
    \ + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpnbuj9an5/tmpnbuj9an5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51b1264c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51b0f5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51b0f5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51b0f5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbuj9an5                        0x00005627289b9335 <unavailable> + 4917

    5    libc.so.6                          0x00002b51b1450460 __libc_start_main +
    245

    6    tmpnbuj9an5                        0x00005627289b8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4Helper(n, 1, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpq62az8cf.swift:16:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n, 1, 0)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib4Sequence: ArraySlice<Int> = ArraySlice(repeating: 0, count:\
    \ n)\n  fib4Sequence.dropLast().append(1)\n  return fib4Sequence.prefix(1).reduce(0)\
    \ { $0 + $1 + $2 + $3 + $4 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmph4cy6bhv.swift:17:27: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n  fib4Sequence.dropLast().append(1)\n\
    \  ~~~~~~~~~~~~~~~~~~~~~~~ ^\n/tmp/tmph4cy6bhv.swift:18:10: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n  return fib4Sequence.prefix(1).reduce(0)\
    \ { $0 + $1 + $2 + $3 + $4 }\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028859
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4Helper(n, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp6wvwo9xt.swift:16:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n, 1)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 1 {\n        return 0\n    }\n    var a1 = 0, a2 = 1, a3\
    \ = 3, a4 = 6, a5 = 1\n    for _ in 0..<n {\n        let tmp = a4 + a3 + a2\n\
    \        a1 = tmp\n        a2 = a5\n        a3 = tmp + a1\n        a5 = a1 + a3\n\
    \    }\n    return a5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpk_ppax7i/tmpk_ppax7i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af811737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af81142eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af81142e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af81142d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_ppax7i                        0x000056136d6b5335 <unavailable> + 4917

    5    libc.so.6                          0x00002af811923460 __libc_start_main +
    245

    6    tmpk_ppax7i                        0x000056136d6b4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var res = 0 \n  for _ in 0 ..< n {\n    if res < n {\n      res\
    \ += res\n    } else {\n      res -= res\n    }\n  }\n  return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpsa_qigxm/tmpsa_qigxm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c0eefbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c0ebf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c0ebf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c0ebf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsa_qigxm                        0x0000562fc0d0d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7c0f0e7460 __libc_start_main +
    245

    6    tmpsa_qigxm                        0x0000562fc0d0cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib(n - 4) + fib(n - 3) + fib(n - 2) + fib(n - 1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp3fzw9hoi.swift:16:10: error: cannot find 'fib' in scope\n  return\
    \ fib(n - 4) + fib(n - 3) + fib(n - 2) + fib(n - 1)\n         ^~~\n/tmp/tmp3fzw9hoi.swift:16:23:\
    \ error: cannot find 'fib' in scope\n  return fib(n - 4) + fib(n - 3) + fib(n\
    \ - 2) + fib(n - 1)\n                      ^~~\n/tmp/tmp3fzw9hoi.swift:16:36:\
    \ error: cannot find 'fib' in scope\n  return fib(n - 4) + fib(n - 3) + fib(n\
    \ - 2) + fib(n - 1)\n                                   ^~~\n/tmp/tmp3fzw9hoi.swift:16:49:\
    \ error: cannot find 'fib' in scope\n  return fib(n - 4) + fib(n - 3) + fib(n\
    \ - 2) + fib(n - 1)\n                                                ^~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var result = 0\n  for var i = 0; i <= n; i++ {\n    result += 1\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpkg3p_c8a.swift:17:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var result = 4\n   \
    \ for _ in 0 ..< n {\n        result += result\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpua5wawxp/tmpua5wawxp.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf60282c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf5ff79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf5ff79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf5ff787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpua5wawxp                        0x000055773ea9f335 <unavailable> + 4917

    5    libc.so.6                          0x00002aaf6046e460 __libc_start_main +
    245

    6    tmpua5wawxp                        0x000055773ea9efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = 4\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    if n >= 4 {\n        fib4 = fib4\
    \ + fib4\n    }\n    return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpvaivut_b/tmpvaivut_b.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd4e480c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd4e177b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd4e177988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd4e1767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvaivut_b                        0x000055ad031eb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002afd4e66c460 __libc_start_main +
    245

    6    tmpvaivut_b                        0x000055ad031eae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return n >= 4 ? fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) :\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpfr46dp_j.swift:16:24: error: missing argument label 'n:' in call\n\
    \  return n >= 4 ? fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) : n\n       \
    \                ^\n                       n: \n/tmp/tmpfr46dp_j.swift:16:36:\
    \ error: missing argument label 'n:' in call\n  return n >= 4 ? fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4) : n\n                                   ^\n        \
    \                           n: \n/tmp/tmpfr46dp_j.swift:16:48: error: missing\
    \ argument label 'n:' in call\n  return n >= 4 ? fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) : n\n                                               ^\n        \
    \                                       n: \n/tmp/tmpfr46dp_j.swift:16:60: error:\
    \ missing argument label 'n:' in call\n  return n >= 4 ? fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4) : n\n                                              \
    \             ^\n                                                           n:\
    \ \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return sequence(repeatedValue: 0, nextValue: { ($1, $2) in\n   \
    \ if n == 0 {\n      return $1\n    }\n    if n == 1 {\n      return 0\n    }\n\
    \    if n == 2 {\n      return 2\n    }\n    if n == 3 {\n      return 0\n   \
    \ }\n    if n == 4 {\n      return $1\n    }\n    return $1 + $2 + $1 + $2 + $1\
    \ + $2\n  }).first?.value ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpix34uhdm.swift:16:51: error: expected parameter name followed by\
    \ ':'\n  return sequence(repeatedValue: 0, nextValue: { ($1, $2) in\n        \
    \                                          ^\n/tmp/tmpix34uhdm.swift:16:55: error:\
    \ expected parameter name followed by ':'\n  return sequence(repeatedValue: 0,\
    \ nextValue: { ($1, $2) in\n                                                 \
    \     ^\n/tmp/tmpix34uhdm.swift:18:14: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n      return $1\n    \
    \         ^\n/tmp/tmpix34uhdm.swift:30:14: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments\n      return $1\n\
    \             ^\n/tmp/tmpix34uhdm.swift:32:12: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments\n    return $1 +\
    \ $2 + $1 + $2 + $1 + $2\n           ^\n/tmp/tmpix34uhdm.swift:32:17: error: anonymous\
    \ closure arguments cannot be used inside a closure that has explicit arguments\n\
    \    return $1 + $2 + $1 + $2 + $1 + $2\n                ^\n/tmp/tmpix34uhdm.swift:32:22:\
    \ error: anonymous closure arguments cannot be used inside a closure that has\
    \ explicit arguments\n    return $1 + $2 + $1 + $2 + $1 + $2\n               \
    \      ^\n/tmp/tmpix34uhdm.swift:32:27: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n    return $1 + $2 + $1\
    \ + $2 + $1 + $2\n                          ^\n/tmp/tmpix34uhdm.swift:32:32: error:\
    \ anonymous closure arguments cannot be used inside a closure that has explicit\
    \ arguments\n    return $1 + $2 + $1 + $2 + $1 + $2\n                        \
    \       ^\n/tmp/tmpix34uhdm.swift:32:37: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n    return $1 + $2 + $1\
    \ + $2 + $1 + $2\n                                    ^\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var result = 1\n  for _ in 0..<n {\n    result = result * 4 + 3\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp0toqou7h/tmp0toqou7h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf1d843c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf1d53ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf1d53a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf1d5397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0toqou7h                        0x0000559069dd7335 <unavailable> + 4917

    5    libc.so.6                          0x00002acf1da2f460 __libc_start_main +
    245

    6    tmp0toqou7h                        0x0000559069dd6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4Recursive(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpkajw3hk5.swift:16:10: error: cannot find 'fib4Recursive' in scope\n\
    \  return fib4Recursive(n)\n         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib6 = 4\n  var fib4 = 0\n  for i in 0..<n {\n    let temp =\
    \ fib6\n    fib6 = fib4 + fib4\n    fib4 = temp\n  }\n  return fib4\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpikku2s79/tmpikku2s79.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b613a833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b613a52ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b613a52a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b613a5297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikku2s79                        0x00005653d26e6335 <unavailable> + 4917

    5    libc.so.6                          0x00002b613aa1f460 __libc_start_main +
    245

    6    tmpikku2s79                        0x00005653d26e5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let result = 1\n    for i in 2..<n {\n        result *= i\n  \
    \      result += i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpkgvhx54a.swift:18:16: error: left side of mutating operator isn't\
    \ mutable: 'result' is a 'let' constant\n        result *= i\n        ~~~~~~ ^\n\
    /tmp/tmpkgvhx54a.swift:16:5: note: change 'let' to 'var' to make it mutable\n\
    \    let result = 1\n    ^~~\n    var\n/tmp/tmpkgvhx54a.swift:19:16: error: left\
    \ side of mutating operator isn't mutable: 'result' is a 'let' constant\n    \
    \    result += i\n        ~~~~~~ ^\n/tmp/tmpkgvhx54a.swift:16:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let result = 1\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tif n == 0 || n == 1 {\n\t\treturn 0\n\t}\n\treturn fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmptspohwrl.swift:19:14: error: missing argument label 'n:' in call\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n      \
    \              ^\n                    n: \n/tmp/tmptspohwrl.swift:19:28: error:\
    \ missing argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n                                  ^\n         \
    \                         n: \n/tmp/tmptspohwrl.swift:19:42: error: missing argument\
    \ label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n                                                ^\n           \
    \                                     n: \n/tmp/tmptspohwrl.swift:19:56: error:\
    \ missing argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n                                              \
    \                ^\n                                                         \
    \     n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // Please write your code in an editor which provides syntax highlighting.\n\
    \  // Make sure your code passes all tests.\n  return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp7daectef/tmp7daectef.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0872c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac086fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac086fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac086fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7daectef                        0x000056420a7ac1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac0874af460 __libc_start_main +
    245

    6    tmp7daectef                        0x000056420a7abe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib = 0\n    for _ in 1...n {\n        fib += 4\n    }\n \
    \   return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp4bgjbqle/tmp4bgjbqle.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3dc091c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3dbd88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3dbd88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3dbd877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4bgjbqle                        0x000055f9b1ff6335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae3dc27d460 __libc_start_main +
    245

    6    tmp4bgjbqle                        0x000055f9b1ff5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4(n, 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpx10xd1k_.swift:16:18: error: extra argument in call\n  return fib4(n,\
    \ 4)\n             ~~~~^~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let fib4 = [\n        1, 1, 2, 2\n    ]\n    let res = fib4[n-1]\
    \ + fib4[n-2] + fib4[n-3] + fib4[n-4]\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cb1178c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cb0e6f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7cb0e6f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7cb0e6f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7cb0e6ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7cb0c6ee83 <unavailable> + 188035

    6    tmplye5jxk9                        0x00005621b76ed541 <unavailable> + 5441

    7    tmplye5jxk9                        0x00005621b76ed2a8 <unavailable> + 4776

    8    libc.so.6                          0x00002b7cb1364460 __libc_start_main +
    245

    9    tmplye5jxk9                        0x00005621b76ecfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tif n == 0 { return 0 }\n\tif n == 1 { return 0 }\n\tif n == 2 {\
    \ return 2 }\n\tif n == 3 { return 0 }\n\tif n > 3 { return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp82hascjx.swift:20:25: error: missing argument label 'n:' in call\n\
    \        if n > 3 { return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) }\n \
    \                              ^\n                               n: \n/tmp/tmp82hascjx.swift:20:37:\
    \ error: missing argument label 'n:' in call\n        if n > 3 { return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4) }\n                                    \
    \       ^\n                                           n: \n/tmp/tmp82hascjx.swift:20:49:\
    \ error: missing argument label 'n:' in call\n        if n > 3 { return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4) }\n                                    \
    \                   ^\n                                                      \
    \ n: \n/tmp/tmp82hascjx.swift:20:61: error: missing argument label 'n:' in call\n\
    \        if n > 3 { return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) }\n \
    \                                                                  ^\n       \
    \                                                            n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return repeat(4) { \n    switch $0 {\n    case 0, 1: return 0\n\
    \    case 2, 3: return 0\n    default: return $0 + $1 + $2 + $3 + $4\n    }\n\
    \  }(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpzkygq_yw.swift:16:9: error: consecutive statements on a line must\
    \ be separated by ';'\n  return repeat(4) { \n        ^\n        ;\n/tmp/tmpzkygq_yw.swift:16:16:\
    \ error: expected '{' after 'repeat'\n  return repeat(4) { \n               ^\n\
    /tmp/tmpzkygq_yw.swift:17:12: error: anonymous closure argument not contained\
    \ in a closure\n    switch $0 {\n           ^\n/tmp/tmpzkygq_yw.swift:20:21: error:\
    \ anonymous closure argument not contained in a closure\n    default: return $0\
    \ + $1 + $2 + $3 + $4\n                    ^\n/tmp/tmpzkygq_yw.swift:20:26: error:\
    \ anonymous closure argument not contained in a closure\n    default: return $0\
    \ + $1 + $2 + $3 + $4\n                         ^\n/tmp/tmpzkygq_yw.swift:20:31:\
    \ error: anonymous closure argument not contained in a closure\n    default: return\
    \ $0 + $1 + $2 + $3 + $4\n                              ^\n/tmp/tmpzkygq_yw.swift:20:36:\
    \ error: anonymous closure argument not contained in a closure\n    default: return\
    \ $0 + $1 + $2 + $3 + $4\n                                   ^\n/tmp/tmpzkygq_yw.swift:20:41:\
    \ error: anonymous closure argument not contained in a closure\n    default: return\
    \ $0 + $1 + $2 + $3 + $4\n                                        ^\n/tmp/tmpzkygq_yw.swift:22:3:\
    \ error: expected 'while' after body of 'repeat' statement\n  }(n)\n  ^\n/tmp/tmpzkygq_yw.swift:22:4:\
    \ error: consecutive statements on a line must be separated by ';'\n  }(n)\n \
    \  ^\n   ;\n/tmp/tmpzkygq_yw.swift:16:3: error: non-void function should return\
    \ a value\n  return repeat(4) { \n  ^\n/tmp/tmpzkygq_yw.swift:20:39: error: cannot\
    \ convert return expression of type 'String' to return type 'Int'\n    default:\
    \ return $0 + $1 + $2 + $3 + $4\n                    ~~~~~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpzkygq_yw.swift:22:5: warning: expression of type 'Int' is unused\n  }(n)\n\
    \    ^\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4Impl(n - 1, n - 2, n - 3, n - 4)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmppgk8mfbh.swift:16:10: error: cannot find 'fib4Impl' in scope\n\
    \  return fib4Impl(n - 1, n - 2, n - 3, n - 4)\n         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib_fib4(n, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpiiwgpmfl.swift:16:12: error: cannot find 'fib_fib4' in scope\n\
    \    return fib_fib4(n, n)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib4 = fib4\n  var sum = fib4(0)\n  for var i = 1 ... n {\n\
    \    sum = fib4(sum) + fib4(i - 1) + fib4(i - 2)\n  }\n  return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpt3p149ol.swift:18:13: error: expected 'in' after for-each pattern\n\
    \  for var i = 1 ... n {\n            ^\n/tmp/tmpt3p149ol.swift:18:13: error:\
    \ expected Sequence expression for for-each loop\n  for var i = 1 ... n {\n  \
    \          ^\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // write your code in an editor and save it to memory\n    //\
    \ do not edit the code here...\n\n    var result = Int(0)\n    var currentValue\
    \ = Int(0)\n\n    for i in 0..<n {\n        currentValue = Int(currentValue) +\
    \ Int(currentValue)\n        result += currentValue\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpylzt8pyf/tmpylzt8pyf.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02c038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02bd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02bd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02bd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpylzt8pyf                        0x000055778dc21475 <unavailable> + 5237

    5    libc.so.6                          0x00002af02c224460 __libc_start_main +
    245

    6    tmpylzt8pyf                        0x000055778dc21129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // Your code here\n  if n == 0 || n == 1 {\n    return 0\n  } else\
    \ if n == 2 {\n    return 1\n  }\n  var fib4: Int = 0\n  for i in 1...n {\n  \
    \  fib4 += fib4\n  }\n  return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpga1tzjns/tmpga1tzjns.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f27c60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f27957b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f27957988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f279567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga1tzjns                        0x000055d67118d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1f27e4c460 __libc_start_main +
    245

    6    tmpga1tzjns                        0x000055d67118cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0 //base case\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmplgszrudo/tmplgszrudo.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28973abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28970a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28970a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28970a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgszrudo                        0x0000559007b111b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b2897597460 __libc_start_main +
    245

    6    tmplgszrudo                        0x0000559007b10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // todo\n  // assert(false, \"not implemented\")\n  return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpqr0ggohy/tmpqr0ggohy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53d35bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53d32b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53d32b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53d32b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqr0ggohy                        0x000055d0591081b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b53d37a8460 __libc_start_main +
    245

    6    tmpqr0ggohy                        0x000055d059107e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4NumberSequence = [Int]()\n    fib4NumberSequence.append(0)\n\
    \    fib4NumberSequence.append(0)\n    fib4NumberSequence.append(2)\n    fib4NumberSequence.append(0)\n\
    \    if n <= 1 {\n        return fib4NumberSequence[0]\n    } else {\n       \
    \ for i in 0...(n-2) {\n            fib4NumberSequence.append(fib4NumberSequence[i\
    \ - 1] + fib4NumberSequence[i - 2] + fib4NumberSequence[i - 3] + fib4NumberSequence[i\
    \ - 4])\n        }\n        return fib4NumberSequence[n - 1]\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b50663bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50660b5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50660b5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50660b513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50660b4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5065eb4e83 <unavailable> + 188035

    6    tmpffb0x3sf                        0x000055bd9b75c80f <unavailable> + 6159

    7    tmpffb0x3sf                        0x000055bd9b75c3d8 <unavailable> + 5080

    8    libc.so.6                          0x00002b50665aa460 __libc_start_main +
    245

    9    tmpffb0x3sf                        0x000055bd9b75c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return (_fib4.fib4(n) % _fib4.Fibonacci4) * _fib4.Fibonacci4\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpdn7n5y6y.swift:16:13: error: cannot find '_fib4' in scope\n   \
    \ return (_fib4.fib4(n) % _fib4.Fibonacci4) * _fib4.Fibonacci4\n            ^~~~~\n\
    /tmp/tmpdn7n5y6y.swift:16:29: error: cannot find '_fib4' in scope\n    return\
    \ (_fib4.fib4(n) % _fib4.Fibonacci4) * _fib4.Fibonacci4\n                    \
    \        ^~~~~\n/tmp/tmpdn7n5y6y.swift:16:49: error: cannot find '_fib4' in scope\n\
    \    return (_fib4.fib4(n) % _fib4.Fibonacci4) * _fib4.Fibonacci4\n          \
    \                                      ^~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return (4 * (n-1) + 8 * (n-2) + 14 * (n-3) + 21 * (n-4))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpwzn08l37/tmpwzn08l37.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977b587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977b27eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977b27e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977b27d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzn08l37                        0x000055654a5b51b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b977b773460 __libc_start_main +
    245

    6    tmpwzn08l37                        0x000055654a5b4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 0 {\n    print(\"fib4 failed: n must be > 0\")\n    return\
    \ -1\n  }\n  if n == 0 || n == 1 {\n    return n\n  }\n  var result = 0\n  var\
    \ temp = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  while temp !=\
    \ 0 {\n    result += temp\n    temp = temp - fib4(n - 4)\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpaari4q_o.swift:24:19: error: missing argument label 'n:' in call\n\
    \  var temp = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n        \
    \          ^\n                  n: \n/tmp/tmpaari4q_o.swift:24:33: error: missing\
    \ argument label 'n:' in call\n  var temp = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n                                ^\n                    \
    \            n: \n/tmp/tmpaari4q_o.swift:24:47: error: missing argument label\
    \ 'n:' in call\n  var temp = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                                              ^\n                    \
    \                          n: \n/tmp/tmpaari4q_o.swift:24:61: error: missing argument\
    \ label 'n:' in call\n  var temp = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                                                            ^\n      \
    \                                                      n: \n/tmp/tmpaari4q_o.swift:27:24:\
    \ error: missing argument label 'n:' in call\n    temp = temp - fib4(n - 4)\n\
    \                       ^\n                       n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // base case\n    if n == 0 {\n        return 0\n    }\n    //\
    \ recursive case\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpaymcx338.swift:21:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n          \
    \      ^\n                n: \n/tmp/tmpaymcx338.swift:21:31: error: missing argument\
    \ label 'n:' in call\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                              ^\n                              n: \n/tmp/tmpaymcx338.swift:21:45:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \   ^\n                                            n: \n/tmp/tmpaymcx338.swift:21:59:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \                 ^\n                                                        \
    \  n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    return fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpzwobbi_7.swift:19:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n          \
    \      ^\n                n: \n/tmp/tmpzwobbi_7.swift:19:31: error: missing argument\
    \ label 'n:' in call\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                              ^\n                              n: \n/tmp/tmpzwobbi_7.swift:19:45:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \   ^\n                                            n: \n/tmp/tmpzwobbi_7.swift:19:59:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \                 ^\n                                                        \
    \  n: \n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmptfmpk7fh.swift:16:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                ^\n\
    \                n: \n/tmp/tmptfmpk7fh.swift:16:29: error: missing argument label\
    \ 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \                         ^\n                            n: \n/tmp/tmptfmpk7fh.swift:16:41:\
    \ error: missing argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n                                        ^\n       \
    \                                 n: \n/tmp/tmptfmpk7fh.swift:16:53: error: missing\
    \ argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n                                                    ^\n         \
    \                                           n: \n"
  stdout: ''
  timestamp: 1660028282
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  func fibbonacci(n: Int) -> Int {\n    switch n {\n    case 0: return\
    \ 0\n    case 1: return 0\n    case 2: return 2\n    case 3: return 0\n    default:\n\
    \      return fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3) + fibbonacci(n-4)\n\
    \    }\n  }\n  return fibbonacci(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp6rnmvnt_.swift:23:25: error: missing argument label 'n:' in call\n\
    \      return fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3) + fibbonacci(n-4)\n\
    \                        ^\n                        n: \n/tmp/tmp6rnmvnt_.swift:23:43:\
    \ error: missing argument label 'n:' in call\n      return fibbonacci(n-1) + fibbonacci(n-2)\
    \ + fibbonacci(n-3) + fibbonacci(n-4)\n                                      \
    \    ^\n                                          n: \n/tmp/tmp6rnmvnt_.swift:23:61:\
    \ error: missing argument label 'n:' in call\n      return fibbonacci(n-1) + fibbonacci(n-2)\
    \ + fibbonacci(n-3) + fibbonacci(n-4)\n                                      \
    \                      ^\n                                                   \
    \         n: \n/tmp/tmp6rnmvnt_.swift:23:79: error: missing argument label 'n:'\
    \ in call\n      return fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3) +\
    \ fibbonacci(n-4)\n                                                          \
    \                    ^\n                                                     \
    \                         n: \n/tmp/tmp6rnmvnt_.swift:26:21: error: missing argument\
    \ label 'n:' in call\n  return fibbonacci(n)\n                    ^\n        \
    \            n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // write code here\n  if n < 2 {\n    return 0\n  } else if n <\
    \ 4 {\n    return 0\n  } else if n < 8 {\n    return 2\n  }\n  return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpb66xzc4f.swift:24:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n              ^\n   \
    \           n: \n/tmp/tmpb66xzc4f.swift:24:27: error: missing argument label 'n:'\
    \ in call\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n          \
    \                ^\n                          n: \n/tmp/tmpb66xzc4f.swift:24:39:\
    \ error: missing argument label 'n:' in call\n  return fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n                                      ^\n           \
    \                           n: \n/tmp/tmpb66xzc4f.swift:24:51: error: missing\
    \ argument label 'n:' in call\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \                                                  ^\n                       \
    \                           n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 1 {\n        return 0\n    }\n    \n    var a: Int\n  \
    \  if n <= 2 {\n        a = 0\n    }\n    else if n <= 3 {\n        a = 1\n  \
    \  }\n    else {\n        a = 1 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmplm4tzb43.swift:28:22: error: missing argument label 'n:' in call\n\
    \        a = 1 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n     \
    \                ^\n                     n: \n/tmp/tmplm4tzb43.swift:28:36: error:\
    \ missing argument label 'n:' in call\n        a = 1 + fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                   ^\n     \
    \                              n: \n/tmp/tmplm4tzb43.swift:28:50: error: missing\
    \ argument label 'n:' in call\n        a = 1 + fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n                                                 ^\n   \
    \                                              n: \n/tmp/tmplm4tzb43.swift:28:64:\
    \ error: missing argument label 'n:' in call\n        a = 1 + fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \                      ^\n                                                   \
    \            n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tvar fib4 = 4\n\tvar fib1 = fib4\n\tfor var i = 3; i <= n; i++ {\n\
    \t\tfib4 = fib3 + fib1 + fib2\n\t\tfib1 = fib2\n\t\tfib2 = fib3\n\t\tfib3 = fib4\n\
    \t}\n\treturn fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpyc7mr_ed.swift:18:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 3; i <= n; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    switch n {\n    case 0:\n        return 0\n    case 1:\n     \
    \   return 0\n    case 2:\n        return 2\n    case 3:\n        return 0\n \
    \   case 4:\n        return 0\n    case 5:\n        return 4\n    case 6:\n  \
    \      return 8\n    case 7:\n        return 14\n    default:\n        return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp_vc1oeo6.swift:34:21: error: missing argument label 'n:' in call\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n              \
    \      ^\n                    n: \n/tmp/tmp_vc1oeo6.swift:34:33: error: missing\
    \ argument label 'n:' in call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n                                ^\n                           \
    \     n: \n/tmp/tmp_vc1oeo6.swift:34:45: error: missing argument label 'n:' in\
    \ call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n       \
    \                                     ^\n                                    \
    \        n: \n/tmp/tmp_vc1oeo6.swift:34:57: error: missing argument label 'n:'\
    \ in call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \
    \                                                    ^\n                     \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return 0\n    }\n    var a: Int = 0\n    var\
    \ b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n   \
    \ while n >= 4 {\n        a = b\n        b = c\n        c = d\n        d = e\n\
    \        e = a + b + c + d + e\n        n = n - 4\n    }\n    return e\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpu6ne6kmt.swift:30:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n - 4\n        ^\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\t// TODO: Fill out a recursive solution\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: '/tmp/tmp3cdz6spl.swift:17:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 0 {\n    return 0\n  }\n  \n  var result = 1\n  for i in\
    \ 0..<n {\n    result = (result + fib3(n-i) + fib3(n-i) + fib3(n-i) + fib3(n-i))\n\
    \  }\n  \n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpov2298ye.swift:22:24: error: cannot find 'fib3' in scope\n    result\
    \ = (result + fib3(n-i) + fib3(n-i) + fib3(n-i) + fib3(n-i))\n               \
    \        ^~~~\n/tmp/tmpov2298ye.swift:22:36: error: cannot find 'fib3' in scope\n\
    \    result = (result + fib3(n-i) + fib3(n-i) + fib3(n-i) + fib3(n-i))\n     \
    \                              ^~~~\n/tmp/tmpov2298ye.swift:22:48: error: cannot\
    \ find 'fib3' in scope\n    result = (result + fib3(n-i) + fib3(n-i) + fib3(n-i)\
    \ + fib3(n-i))\n                                               ^~~~\n/tmp/tmpov2298ye.swift:22:60:\
    \ error: cannot find 'fib3' in scope\n    result = (result + fib3(n-i) + fib3(n-i)\
    \ + fib3(n-i) + fib3(n-i))\n                                                 \
    \          ^~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var result = 1\n  for _ in 1..<n {\n    result *= 4\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpxza5pp_f/tmpxza5pp_f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bf842ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bf8121b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bf8121988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bf81207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxza5pp_f                        0x000055d8e2d74335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4bf8616460 __libc_start_main +
    245

    6    tmpxza5pp_f                        0x000055d8e2d73fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return n\n    }\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp9dnmmoqs.swift:19:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n                ^\n\
    \                n: \n/tmp/tmp9dnmmoqs.swift:19:29: error: missing argument label\
    \ 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \                         ^\n                            n: \n/tmp/tmp9dnmmoqs.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n                                        ^\n       \
    \                                 n: \n/tmp/tmp9dnmmoqs.swift:19:53: error: missing\
    \ argument label 'n:' in call\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n                                                    ^\n         \
    \                                           n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\t// base case\n\tguard n > 4 else {\n\t\treturn 0\n\t}\n\n\t// recursive\
    \ case\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpahg___4w.swift:22:14: error: missing argument label 'n:' in call\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n      \
    \              ^\n                    n: \n/tmp/tmpahg___4w.swift:22:28: error:\
    \ missing argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n                                  ^\n         \
    \                         n: \n/tmp/tmpahg___4w.swift:22:42: error: missing argument\
    \ label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n                                                ^\n           \
    \                                     n: \n/tmp/tmpahg___4w.swift:22:56: error:\
    \ missing argument label 'n:' in call\n        return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n                                              \
    \                ^\n                                                         \
    \     n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4_helper(n, 0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpqzjqd_e7.swift:16:10: error: cannot find 'fib4_helper' in scope\n\
    \  return fib4_helper(n, 0, 1)\n         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    func fib4Helper(_ n: Int, _ acc: Int) -> Int {\n        return\
    \ acc + (n <= 3 ? 0 : fib4Helper(n-1, n-2) + fib4Helper(n-3, n-4))\n    }\n  \
    \  return fib4Helper(n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp40txarty/tmp40txarty.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af579827c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57951eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57951e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57951d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40txarty                        0x000055bd823ec1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af579a13460 __libc_start_main +
    245

    6    tmp40txarty                        0x000055bd823ebe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib: Int = 0\n  var fib2: Int = 0\n  var fib3: Int = 0\n  var\
    \ fib4: Int = 0\n  var fib5: Int = 0\n  if n <= 0 {\n    return 0\n  } else if\
    \ n == 1 {\n    return 0\n  } else if n == 2 {\n    return 2\n  }\n  for _ in\
    \ 1...n {\n    fib2 = fib3\n    fib3 = fib\n    fib = fib2 + fib3\n    fib4 =\
    \ fib4 + 1\n    fib5 = fib4\n    fib4 = fib5\n  }\n  return fib4\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp7nzkc1ih/tmp7nzkc1ih.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba18ce7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba18cb72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba18cb72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba18cb717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nzkc1ih                        0x000055cadcee6335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba18d067460 __libc_start_main +
    245

    6    tmp7nzkc1ih                        0x000055cadcee5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4_helper(1, n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpffb2yzl2.swift:16:10: error: cannot find 'fib4_helper' in scope\n\
    \  return fib4_helper(1, n, 0)\n         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let fib4Array = [0, 1, 1]\n    var result: Int = 0\n    if n ==\
    \ 0 || n == 1 {\n        return n\n    }\n    if n == 2 {\n        result = fib4Array[2]\n\
    \    } else {\n        result = fib4Array[0] + fib4Array[1] + fib4Array[2]\n \
    \   }\n    if n >= 3 {\n        result = fib4Array[3] + result\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b60d4a22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60d4719561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b60d4719286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b60d471913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b60d4718bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b60d4518e83 <unavailable> + 188035

    6    tmpassv9a3l                        0x0000555c45bd9618 <unavailable> + 5656

    7    tmpassv9a3l                        0x0000555c45bd92a8 <unavailable> + 4776

    8    libc.so.6                          0x00002b60d4c0e460 __libc_start_main +
    245

    9    tmpassv9a3l                        0x0000555c45bd8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4Rec(n: n, fib: (0,1,2,3,4,5), steps: 4)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp9aovfffe.swift:16:10: error: cannot find 'fib4Rec' in scope\n \
    \ return fib4Rec(n: n, fib: (0,1,2,3,4,5), steps: 4)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // Add your code here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpujr1ekyn/tmpujr1ekyn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8145a51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8145748b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8145748988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81457477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpujr1ekyn                        0x000055662441c1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8145c3d460 __libc_start_main +
    245

    6    tmpujr1ekyn                        0x000055662441be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  func fib41(acc: Int, n: Int, fib: () -> Int) -> Int {\n    if n\
    \ == 0 {\n      return acc\n    }\n    return fib41(n-1, fib, fib() + fib() +\
    \ fib() + fib() + fib())\n  }\n  return fib41(1, n, fib4)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpvssxms92.swift:20:17: error: missing argument labels 'acc:n:fib:'\
    \ in call\n    return fib41(n-1, fib, fib() + fib() + fib() + fib() + fib())\n\
    \                ^\n                 acc: n:   fib: \n/tmp/tmpvssxms92.swift:20:23:\
    \ error: function produces expected type 'Int'; did you mean to call it with '()'?\n\
    \    return fib41(n-1, fib, fib() + fib() + fib() + fib() + fib())\n         \
    \             ^~~\n                         ()\n/tmp/tmpvssxms92.swift:20:58:\
    \ error: cannot convert value of type 'Int' to expected argument type '() -> Int'\n\
    \    return fib41(n-1, fib, fib() + fib() + fib() + fib() + fib())\n         \
    \                                                ^\n/tmp/tmpvssxms92.swift:22:15:\
    \ error: missing argument labels 'acc:n:fib:' in call\n  return fib41(1, n, fib4)\n\
    \              ^\n               acc:  n:  fib: \n/tmp/tmpvssxms92.swift:22:15:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '() -> Int'\n  return fib41(1, n, fib4)\n              ^\n"
  stdout: ''
  timestamp: 1660028466
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tvar f4 = 1 // initial value\n\tfor i in  1 ..< n {\n\t\tf4 += 3\n\
    \t}\n\treturn f4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphfeo8o8y/tmphfeo8o8y.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0162cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01629aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01629aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01629a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphfeo8o8y                        0x00005576c7bc2335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0162e9f460 __libc_start_main +
    245

    6    tmphfeo8o8y                        0x00005576c7bc1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4Helper(n - 1, n - 2, n - 3, n - 4)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpfp41q57d.swift:16:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n - 1, n - 2, n - 3, n - 4)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let res = 0;\n    if n == 0 {\n        return res;\n    }\n  \
    \  if n == 1 {\n        return res;\n    }\n    let a = fib4(n - 1);\n    let\
    \ b = fib4(n - 2);\n    let c = fib4(n - 3);\n    let d = fib4(n - 4);\n    res\
    \ =  a + b + c + d;\n    return res;\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp7zhpb_sb.swift:23:18: error: missing argument label 'n:' in call\n\
    \    let a = fib4(n - 1);\n                 ^\n                 n: \n/tmp/tmp7zhpb_sb.swift:24:18:\
    \ error: missing argument label 'n:' in call\n    let b = fib4(n - 2);\n     \
    \            ^\n                 n: \n/tmp/tmp7zhpb_sb.swift:25:18: error: missing\
    \ argument label 'n:' in call\n    let c = fib4(n - 3);\n                 ^\n\
    \                 n: \n/tmp/tmp7zhpb_sb.swift:26:18: error: missing argument label\
    \ 'n:' in call\n    let d = fib4(n - 4);\n                 ^\n               \
    \  n: \n/tmp/tmp7zhpb_sb.swift:27:5: error: cannot assign to value: 'res' is a\
    \ 'let' constant\n    res =  a + b + c + d;\n    ^~~\n/tmp/tmp7zhpb_sb.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = 0;\n    ^~~\n\
    \    var\n/tmp/tmp7zhpb_sb.swift:27:22: error: cannot assign value of type 'String'\
    \ to type 'Int'\n    res =  a + b + c + d;\n           ~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4]\n   \
    \ }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b80d42cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80d3fc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b80d3fc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b80d3fc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b80d3fc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b80d3dc5e83 <unavailable> + 188035

    6    tmpvmte0l32                        0x000055a3a71bd752 <unavailable> + 5970

    7    tmpvmte0l32                        0x000055a3a71bd3e8 <unavailable> + 5096

    8    libc.so.6                          0x00002b80d44bb460 __libc_start_main +
    245

    9    tmpvmte0l32                        0x000055a3a71bd109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib = [Int]()\n    var fib4 = 1\n    fib[0] = fib4\n    fib[1]\
    \ = fib4\n    for index in 2...n {\n        fib[index] = (fib[index - 1] + fib[index\
    \ - 2] + fib[index - 3] + fib[index - 4])\n    }\n    return fib[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8134cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8131c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8131c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8131c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8131c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab812fc57ec <unavailable> + 186348

    6    tmpf6m9u2b8                        0x000055c49bf5064b <unavailable> + 5707

    7    tmpf6m9u2b8                        0x000055c49bf503c8 <unavailable> + 5064

    8    libc.so.6                          0x00002ab8136b9460 __libc_start_main +
    245

    9    tmpf6m9u2b8                        0x000055c49bf500e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // base case\n    guard n < 4 else {\n        return 0\n    }\n\
    \n    // recursive case\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmphhtdnk8s.swift:22:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n          \
    \      ^\n                n: \n/tmp/tmphhtdnk8s.swift:22:31: error: missing argument\
    \ label 'n:' in call\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                              ^\n                              n: \n/tmp/tmphhtdnk8s.swift:22:45:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \   ^\n                                            n: \n/tmp/tmphhtdnk8s.swift:22:59:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \                 ^\n                                                        \
    \  n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    switch n {\n    case 0: return 0\n    case 1: return 1\n    case\
    \ 2: return 2\n    case 3: return 0\n    case 4: return 3\n    case 5: return\
    \ 5\n    case 6: return 7\n    case 7: return 0\n    default:\n        let fib1\
    \ = fib4(n-1)\n        let fib2 = fib4(n-2)\n        let fib3 = fib4(n-3)\n  \
    \      let fib4 = fib4(n-4)\n        return fib1 + fib2 + fib3 + fib4\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpnnc0kqyp.swift:26:25: error: missing argument label 'n:' in call\n\
    \        let fib1 = fib4(n-1)\n                        ^\n                   \
    \     n: \n/tmp/tmpnnc0kqyp.swift:27:25: error: missing argument label 'n:' in\
    \ call\n        let fib2 = fib4(n-2)\n                        ^\n            \
    \            n: \n/tmp/tmpnnc0kqyp.swift:28:25: error: missing argument label\
    \ 'n:' in call\n        let fib3 = fib4(n-3)\n                        ^\n    \
    \                    n: \n/tmp/tmpnnc0kqyp.swift:29:25: error: missing argument\
    \ label 'n:' in call\n        let fib4 = fib4(n-4)\n                        ^\n\
    \                        n: \n/tmp/tmpnnc0kqyp.swift:30:35: error: cannot convert\
    \ return expression of type 'String' to return type 'Int'\n        return fib1\
    \ + fib2 + fib3 + fib4\n               ~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = 0\n\n    switch n {\n    case 0:\n        fib4 = 0\n\
    \    case 1:\n        fib4 = 0\n    case 2:\n        fib4 = 1\n    case 3:\n \
    \       fib4 = 0\n    case 4:\n        fib4 = 0\n    case 5:\n        fib4 = 0\n\
    \    case 6:\n        fib4 = 0\n    case 7:\n        fib4 = 0\n    case 8:\n \
    \       fib4 = 1\n    case 9:\n        fib4 = 1\n    case 10:\n        fib4 =\
    \ 1\n    case 11:\n        fib4 = 0\n    case 12:\n        fib4 = 0\n    case\
    \ 13:\n        fib4 = 1\n    case 14:\n        fib4 = 0\n    case 15:\n      \
    \  fib4 = 0\n    case 16:\n        fib4 = 0\n    case 17:\n        fib4 = 0\n\
    \    case 18:\n        fib4 = 1\n    case 19:\n        fib4 = 0\n    case 20:\n\
    \        fib4 = 0\n    case 21:\n        fib4 = 0\n    case 22:\n        fib4\
    \ = 1\n    case 23:\n        fib4 = 0\n    case 24:\n        fib4 = 0\n    case\
    \ 25:\n        fib4 = 0\n    case 26:\n        fib4 = 1\n    case 27:\n      \
    \  fib4 = 0\n    case 28:\n        fib4 = 0\n    case 29:\n        fib4 = 0\n\
    \    case 30:\n        fib4 = 1\n    case 31:\n        fib4 = 1\n    case 32:\n\
    \        fib4 = 0\n    case 33:\n        fib4 = 0\n    case 34:\n        fib4\
    \ = 1\n    case 35:\n        fib4 = 1\n    case 36:\n        fib4 = 0\n    case\
    \ 37:\n        fib4 = 0\n    case 38:\n        fib4 = 0\n    case 39:\n      \
    \  fib4 = 1\n    case 40:\n        fib4 = 1\n    case 41:\n        fib4 = 0\n\
    \    case 42:\n        fib4 = 0\n    case 43:\n        fib4 = 1\n    case 44:\n\
    \        fib4 = 0\n    case 45:\n        fib4 = 0\n    case 46:\n        fib4\
    \ = 0\n    case 47:\n        fib4 = 1\n    case 48:\n        fib4 = 0\n    case\
    \ 49:\n        fib4 = 0\n    case 50:\n        fib4 = 0\n    case 51:\n      \
    \  fib4 = 1\n    case 52:\n        fib4 = 0\n    case 53:\n        fib4 = 0\n\
    \    case 54:\n        fib4 = 1\n    case 55:\n        fib4 = 0\n    case 56:\n\
    \        fib4 = 0\n    case 57:\n        fib4 = 1\n    case 58:\n        fib4\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpur48ku9n.swift:155:27: error: expected '}' at end of brace statement\n\
    assert(fib4(n: 12) == 386)\n                          ^\n/tmp/tmpur48ku9n.swift:15:26:\
    \ note: to match this opening '{'\nfunc fib4(n: Int) -> Int {\n              \
    \           ^\n/tmp/tmpur48ku9n.swift:136:9: warning: variable is unused\n   \
    \     fib4\n        ^~~~\n/tmp/tmpur48ku9n.swift:18:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmpur48ku9n.swift:18:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmpur48ku9n.swift:140:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpur48ku9n.swift:152:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fib4(n: 5) == 4)\n\
    \       ^\n/tmp/tmpur48ku9n.swift:153:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(fib4(n: 8) == 28)\n       ^\n/tmp/tmpur48ku9n.swift:154:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fib4(n: 10) == 104)\n\
    \       ^\n/tmp/tmpur48ku9n.swift:155:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(fib4(n: 12) == 386)\n       ^\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn fib4_helper(n, 0, 1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpr63iqszx.swift:16:9: error: cannot find 'fib4_helper' in scope\n\
    \        return fib4_helper(n, 0, 1, 2)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028459
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let result = 1\n    for i in 0..<n {\n        result = result\
    \ * 4 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp_i3xk3o7.swift:18:9: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n        result = result * 4 + i\n        ^~~~~~\n/tmp/tmp_i3xk3o7.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = 1\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n <= 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpzydacnkd.swift:22:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            \
    \  ^\n              n: \n/tmp/tmpzydacnkd.swift:22:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                            ^\n                            n: \n/tmp/tmpzydacnkd.swift:22:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                          ^\n\
    \                                          n: \n/tmp/tmpzydacnkd.swift:22:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tswitch n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\t\
    case 2:\n\t\treturn 2\n\tcase 3:\n\t\treturn 0\n\tdefault:\n\t\treturn fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\t}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp0wxwtwo4.swift:26:15: error: missing argument label 'n:' in call\n\
    \                return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \                            ^\n                            n: \n/tmp/tmp0wxwtwo4.swift:26:29:\
    \ error: missing argument label 'n:' in call\n                return fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n                             \
    \             ^\n                                          n: \n/tmp/tmp0wxwtwo4.swift:26:43:\
    \ error: missing argument label 'n:' in call\n                return fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n                             \
    \                           ^\n                                              \
    \          n: \n/tmp/tmp0wxwtwo4.swift:26:57: error: missing argument label 'n:'\
    \ in call\n                return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                                                                     \
    \ ^\n                                                                      n:\
    \ \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    switch n {\n    case 0:\n        return 0\n    case 1:\n     \
    \   return 0\n    case 2:\n        return 2\n    case 3:\n        return 0\n \
    \   case 4:\n        return 1\n    case 5:\n        return 1\n    case 6:\n  \
    \      return 1\n    case 7:\n        return 1\n    case 8:\n        return 2\n\
    \    case 9:\n        return 3\n    case 10:\n        return 5\n    case 11:\n\
    \        return 8\n    case 12:\n        return 13\n    case 13:\n        return\
    \ 21\n    case 14:\n        return 34\n    case 15:\n        return 55\n    case\
    \ 16:\n        return 89\n    case 17:\n        return 144\n    case 18:\n   \
    \     return 233\n    case 19:\n        return 377\n    case 20:\n        return\
    \ 610\n    case 21:\n        return 987\n    case 22:\n        return 1597\n \
    \   case 23:\n        return 2584\n    case 24:\n        return 4181\n    case\
    \ 25:\n        return 6765\n    case 26:\n        return 10946\n    case 27:\n\
    \        return 17711\n    case 28:\n        return 28657\n    case 29:\n    \
    \    return 46368\n    case 30:\n        return 75025\n    case 31:\n        return\
    \ 121393\n    case 32:\n        return 196418\n    case 33:\n        return 317811\n\
    \    case 34:\n        return 514229\n    case 35:\n        return 832040\n  \
    \  case 36:\n        return 1346269\n    case 37:\n        return 2178309\n  \
    \  case 38:\n        return 3524578\n    case 39:\n        return 5702887\n  \
    \  case 40:\n        return 9496708\n    case 41:\n        return 15480087\n \
    \   case 42:\n        return 25047303\n    case 43:\n        return 40527392\n\
    \    case 44:\n        return 6557470\n    case 45:\n        return 115792089\n\
    \    case 46:\n        return 17711773\n    case 47:\n        return 28657143\n\
    \    case 48:\n        return 46368421\n    case 49:\n        return 75025329\n\
    \    case 50:\n        return 121392719\n    case 51:\n        return 196418441\n\
    \    case 52:\n        return 317810997\n    case 53:\n        return 514229516\n\
    \    case 54:\n        return 832043951\n    case 55:\n        return 134626189\n\
    \    case 56:\n        return 217830645\n    case 57:\n        return 352457773\n\
    \    case 58:\n        return 570288235\n    case 59:\n        return 949671040\n\
    \    case 60:\n        return 1548006999\n    case 61:\n        return 2504730783\n\
    \    case 62:\n        return 405273936\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp72hkag2b.swift:161:27: error: expected '}' at end of brace statement\n\
    assert(fib4(n: 12) == 386)\n                          ^\n/tmp/tmp72hkag2b.swift:15:26:\
    \ note: to match this opening '{'\nfunc fib4(n: Int) -> Int {\n              \
    \           ^\n/tmp/tmp72hkag2b.swift:16:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmp72hkag2b.swift:16:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmp72hkag2b.swift:146:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 0 {\n    return 0\n  }\n  if n == 0 {\n    return 0\n  }\n\
    \  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n ==\
    \ 3 {\n    return 0\n  }\n  if n == 4 {\n    return 0\n  }\n  if n == 5 {\n  \
    \  return 4\n  }\n  if n == 6 {\n    return 8\n  }\n  if n == 7 {\n    return\
    \ 14\n  }\n  if n == 8 {\n    return 8\n  }\n  if n == 9 {\n    return 14\n  }\n\
    \  if n == 10 {\n    return 10\n  }\n  if n == 11 {\n    return 12\n  }\n  if\
    \ n == 12 {\n    return 14\n  }\n  if n == 13 {\n    return 13\n  }\n  if n ==\
    \ 14 {\n    return 16\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp6mvjsfjs.swift:64:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            \
    \  ^\n              n: \n/tmp/tmp6mvjsfjs.swift:64:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                            ^\n                            n: \n/tmp/tmp6mvjsfjs.swift:64:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                          ^\n\
    \                                          n: \n/tmp/tmp6mvjsfjs.swift:64:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let fib4: [Int] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    return\
    \ fib4[(n-1) % 4] + (fib4[(n-2) % 4] + (fib4[(n-3) % 4] + (fib4[(n-4) % 4])))\
    \ % 4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpewlc51_0/tmpewlc51_0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b7e792c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b7e489b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b7e489988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b7e4887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewlc51_0                        0x000055a34fe053a5 <unavailable> + 5029

    5    libc.so.6                          0x00002b3b7e97e460 __libc_start_main +
    245

    6    tmpewlc51_0                        0x000055a34fe05059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var nums = [Int]()\n\n    // Write your code in Swift 4.2 mode.\n\
    \    if n == 0 || n == 1 {\n        return 0\n    }\n    if n <= 4 {\n       \
    \ nums.append(0)\n        return nums[n - 1]\n    }\n    nums.append(0)\n    nums.append(0)\n\
    \    nums.append(2)\n    nums.append(0)\n    nums.append(0)\n    nums.append(0)\n\
    \    nums.append(nums[n - 4] + nums[n - 3] + nums[n - 2])\n    return nums[n -\
    \ 4]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe3aqkw_b/tmpe3aqkw_b.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8641dc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8641ab7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8641ab7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8641ab67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3aqkw_b                        0x00005608d80832b5 <unavailable> + 4789

    5    libc.so.6                          0x00002b8641fac460 __libc_start_main +
    245

    6    tmpe3aqkw_b                        0x00005608d8082f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 1 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n\
    \  if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return 0\n  }\n  if n ==\
    \ 4 {\n    return 0\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp5pq2z69_.swift:31:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            \
    \  ^\n              n: \n/tmp/tmp5pq2z69_.swift:31:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                            ^\n                            n: \n/tmp/tmp5pq2z69_.swift:31:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                          ^\n\
    \                                          n: \n/tmp/tmp5pq2z69_.swift:31:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // FILL IN YOUR CODE HERE\n    switch n {\n    case 0: return\
    \ 0\n    case 1: return 0\n    case 2: return 2\n    case 3: return 0\n    case\
    \ 4: return 0\n    case 5: return 0\n    case 6: return 0\n    case 7: return\
    \ 0\n    case 8: return 2\n    case 9: return 0\n    case 10: return 0\n    case\
    \ 11: return 0\n    case 12: return 0\n    case 13: return 0\n    case 14: return\
    \ 0\n    case 15: return 0\n    case 16: return 0\n    case 17: return 0\n   \
    \ case 18: return 0\n    case 19: return 0\n    case 20: return 0\n    case 21:\
    \ return 0\n    case 22: return 0\n    case 23: return 0\n    case 24: return\
    \ 0\n    case 25: return 0\n    case 26: return 0\n    case 27: return 0\n   \
    \ case 28: return 0\n    case 29: return 0\n    case 30: return 0\n    case 31:\
    \ return 0\n    case 32: return 0\n    case 33: return 0\n    case 34: return\
    \ 0\n    case 35: return 0\n    case 36: return 0\n    case 37: return 0\n   \
    \ case 38: return 0\n    case 39: return 0\n    case 40: return 0\n    case 41:\
    \ return 0\n    case 42: return 0\n    case 43: return 0\n    case 44: return\
    \ 0\n    case 45: return 0\n    case 46: return 0\n    case 47: return 0\n   \
    \ case 48: return 0\n    case 49: return 0\n    case 50: return 0\n    case 51:\
    \ return 0\n    case 52: return 0\n    case 53: return 0\n    case 54: return\
    \ 0\n    case 55: return 0\n    case 56: return 0\n    case 57: return 0\n   \
    \ case 58: return 0\n    case 59: return 0\n    case 60: return 0\n    case 61:\
    \ return 0\n    case 62: return 0\n    case 63: return 0\n    case 64: return\
    \ 0\n    case 65: return 0\n    case 66: return 0\n    case 67: return 0\n   \
    \ case 68: return 0\n    case 69: return 0\n    case 70: return 0\n    case 71:\
    \ return 0\n    case 72: return 0\n    case 73: return 0\n    case 74: return\
    \ 0\n    case 75: return 0\n    case 76: return 0\n    case 77: return 0\n   \
    \ case 78: return 0\n    case 79: return 0\n    case 80: return 0\n    case 81:\
    \ return 0\n    case 82: return 0\n    case 83: return 0\n    case 84: return\
    \ 0\n    case 85: return 0\n    case 86: return 0\n    case 87: return 0\n   \
    \ case 88: return 0\n    case 89: return 0\n    case 90: return 0\n    case 91:\
    \ return 0\n    case 92: return 0\n    case 93: return 0\n    case 94: return\
    \ 0\n    case 95: return 0\n    case 96: return 0\n    case 97: return 0\n   \
    \ case \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp0ull_dx9.swift:116:9: error: expected pattern\n    case \n    \
    \    ^\n/tmp/tmp0ull_dx9.swift:116:9: error: expected ':' after 'case'\n    case\
    \ \n        ^\n/tmp/tmp0ull_dx9.swift:135:27: error: expected '}' at end of brace\
    \ statement\nassert(fib4(n: 12) == 386)\n                          ^\n/tmp/tmp0ull_dx9.swift:15:26:\
    \ note: to match this opening '{'\nfunc fib4(n: Int) -> Int {\n              \
    \           ^\n/tmp/tmp0ull_dx9.swift:120:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 0..<n {\n        result = result\
    \ + Int(pow(Double(i+1), 5))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp3oyk347f.swift:18:31: error: cannot find 'pow' in scope\n     \
    \   result = result + Int(pow(Double(i+1), 5))\n                             \
    \ ^~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  let result = Int(pow(Double(n), Double(4)) * pow(Double(n), Double(6)))\
    \ * pow(Double(n), Double(2))\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpfz6dgwyp.swift:16:20: error: cannot find 'pow' in scope\n  let\
    \ result = Int(pow(Double(n), Double(4)) * pow(Double(n), Double(6))) * pow(Double(n),\
    \ Double(2))\n                   ^~~\n/tmp/tmpfz6dgwyp.swift:16:48: error: cannot\
    \ find 'pow' in scope\n  let result = Int(pow(Double(n), Double(4)) * pow(Double(n),\
    \ Double(6))) * pow(Double(n), Double(2))\n                                  \
    \             ^~~\n/tmp/tmpfz6dgwyp.swift:16:77: error: cannot find 'pow' in scope\n\
    \  let result = Int(pow(Double(n), Double(4)) * pow(Double(n), Double(6))) * pow(Double(n),\
    \ Double(2))\n                                                               \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n\n    for _ in 0...n {\n        c += 1\n   \
    \     b = a + c\n        a = b\n        d = a + d\n        a = b\n        c =\
    \ d\n        e += 1\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpxy69rllm/tmpxy69rllm.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f1bdbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f1bab1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f1bab1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f1bab07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxy69rllm                        0x00005594ef60d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2f1bfa6460 __libc_start_main +
    245

    6    tmpxy69rllm                        0x00005594ef60cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n <= 1 {\n    return n\n  }\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpjgtld21z.swift:19:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            \
    \  ^\n              n: \n/tmp/tmpjgtld21z.swift:19:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                            ^\n                            n: \n/tmp/tmpjgtld21z.swift:19:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                          ^\n\
    \                                          n: \n/tmp/tmpjgtld21z.swift:19:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // Your code here\n    var fib4 = 1\n    for var i = 2; i<=n;\
    \ i++ {\n        fib4 = fib4 + fib4\n    }\n    return fib4\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp19qz3bin.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i<=n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = 0\n    var k = 0\n    \n    switch n {\n    case 1:\n\
    \        fib4 = 0\n    case 2:\n        fib4 = 1\n    case 3:\n        fib4 =\
    \ 1\n    case 4:\n        fib4 = 1\n    default:\n        while k <= (n - 4) {\n\
    \            fib4 = fib4 + fib4\n            k = k + 1\n        }\n    }\n   \
    \ \n    return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpr9hhqbqa/tmpr9hhqbqa.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eaf792c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eaf489b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2eaf489988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2eaf4887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9hhqbqa                        0x0000561e838211b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b2eaf97e460 __libc_start_main +
    245

    6    tmpr9hhqbqa                        0x0000561e83820e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn sequences.fibbonaciSequence(4)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpde3r71k8.swift:16:9: error: cannot find 'sequences' in scope\n\
    \        return sequences.fibbonaciSequence(4)\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp0cz_0fbe/tmp0cz_0fbe.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e18384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e1807bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e1807b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e1807a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cz_0fbe                        0x0000560e2d7b71b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b7e18570460 __libc_start_main +
    245

    6    tmp0cz_0fbe                        0x0000560e2d7b6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    switch n {\n    case 0:\n        return 0\n    case 1:\n     \
    \   return 0\n    case 2:\n        return 2\n    case 3:\n        return 0\n \
    \   default:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpy_yqr2_d.swift:26:21: error: missing argument label 'n:' in call\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n              \
    \      ^\n                    n: \n/tmp/tmpy_yqr2_d.swift:26:33: error: missing\
    \ argument label 'n:' in call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n                                ^\n                           \
    \     n: \n/tmp/tmpy_yqr2_d.swift:26:45: error: missing argument label 'n:' in\
    \ call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n       \
    \                                     ^\n                                    \
    \        n: \n/tmp/tmpy_yqr2_d.swift:26:57: error: missing argument label 'n:'\
    \ in call\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \
    \                                                    ^\n                     \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // ...\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: '/tmp/tmpz78l3ntt.swift:17:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4Helper(n, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpnaxr7cv2.swift:16:10: error: cannot find 'fib4Helper' in scope\n\
    \  return fib4Helper(n, 1)\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // Write your code here\n  var result = 1\n  for var i = 2; i <=\
    \ n; i++ {\n    result = result + fib3(n-i)\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpo09c8vt5.swift:18:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4_rec(n: n, fib: 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpwlyh2pjs.swift:16:10: error: cannot find 'fib4_rec' in scope\n\
    \  return fib4_rec(n: n, fib: 0)\n         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tif n == 0 || n == 1 {\n\t\treturn 0\n\t} else if n == 2 {\n\t\t\
    return 1\n\t} else if n == 3 {\n\t\treturn 0\n\t} else if n == 4 {\n\t\treturn\
    \ 1\n\t} else if n == 5 {\n\t\treturn 2\n\t} else if n == 6 {\n\t\treturn 0\n\t\
    } else if n == 7 {\n\t\treturn 1\n\t} else if n == 8 {\n\t\treturn 2\n\t} else\
    \ if n == 9 {\n\t\treturn 3\n\t} else if n == 10 {\n\t\treturn 0\n\t} else if\
    \ n == 11 {\n\t\treturn 1\n\t} else if n == 12 {\n\t\treturn 2\n\t} else if n\
    \ == 13 {\n\t\treturn 3\n\t} else if n == 14 {\n\t\treturn 4\n\t} else if n ==\
    \ 15 {\n\t\treturn 5\n\t} else if n == 16 {\n\t\treturn 6\n\t} else if n == 17\
    \ {\n\t\treturn 7\n\t} else if n == 18 {\n\t\treturn 8\n\t} else if n == 19 {\n\
    \t\treturn 9\n\t} else if n == 20 {\n\t\treturn 10\n\t} else if n == 21 {\n\t\t\
    return 11\n\t} else if n == 22 {\n\t\treturn 12\n\t} else if n == 23 {\n\t\treturn\
    \ 13\n\t} else if n == 24 {\n\t\treturn 14\n\t} else if n == 25 {\n\t\treturn\
    \ 15\n\t} else if n == 26 {\n\t\treturn 16\n\t} else if n == 27 {\n\t\treturn\
    \ 17\n\t} else if n == 28 {\n\t\treturn 18\n\t} else if n == 29 {\n\t\treturn\
    \ 19\n\t} else if n == 30 {\n\t\treturn 20\n\t} else if n == 31 {\n\t\treturn\
    \ 21\n\t} else if n == 32 {\n\t\treturn 22\n\t} else if n == 33 {\n\t\treturn\
    \ 23\n\t} else if n == 34 {\n\t\treturn 24\n\t} else if n == 35 {\n\t\treturn\
    \ 25\n\t} else if n == 36 {\n\t\treturn 26\n\t} else if n == 37 {\n\t\treturn\
    \ 27\n\t} else if n == 38 {\n\t\treturn 28\n\t} else if n == 39 {\n\t\treturn\
    \ 29\n\t} else if n == 40 {\n\t\treturn 30\n\t} else if n == 41 {\n\t\treturn\
    \ 31\n\t} else if n == 42 {\n\t\treturn 32\n\t} else if n == 43 {\n\t\treturn\
    \ 33\n\t} else if n == 44 {\n\t\treturn 34\n\t} else if n == 45 {\n\t\treturn\
    \ 35\n\t} else if n == 46 {\n\t\treturn 36\n\t} else if n == 47 {\n\t\treturn\
    \ 37\n\t} else if n == 48 {\n\t\treturn 38\n\t} else if n == 49 {\n\t\treturn\
    \ 39\n\t} else if n == 50 {\n\t\treturn 40\n\t} else if n == 51 {\n\t\treturn\
    \ 41\n\t} else if n == 52 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp7pidtuy2.swift:137:27: error: expected '}' at end of brace statement\n\
    assert(fib4(n: 12) == 386)\n                          ^\n/tmp/tmp7pidtuy2.swift:15:26:\
    \ note: to match this opening '{'\nfunc fib4(n: Int) -> Int {\n              \
    \           ^\n/tmp/tmp7pidtuy2.swift:122:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 0 {\n    return 0\n  }\n  if n == 0 {\n    return 0\n  }\n\
    \  if n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return 2\n  }\n  if n ==\
    \ 3 {\n    return 0\n  }\n  if n == 4 {\n    return 0\n  }\n  if n == 5 {\n  \
    \  return 4\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpko4r26rk.swift:37:15: error: missing argument label 'n:' in call\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            \
    \  ^\n              n: \n/tmp/tmpko4r26rk.swift:37:29: error: missing argument\
    \ label 'n:' in call\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                            ^\n                            n: \n/tmp/tmpko4r26rk.swift:37:43:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                          ^\n\
    \                                          n: \n/tmp/tmpko4r26rk.swift:37:57:\
    \ error: missing argument label 'n:' in call\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n                                           \
    \             ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let fib4 = 0...n\n    return fib4[fib4.startIndex.advancedBy(2)]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp4ha0nktn.swift:17:33: error: value of type 'ClosedRange<Int>.Index'\
    \ has no member 'advancedBy'\n    return fib4[fib4.startIndex.advancedBy(2)]\n\
    \                ~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn fibonacci(n, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpse8tuq2c.swift:16:9: error: cannot find 'fibonacci' in scope\n\
    \        return fibonacci(n, n)\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var res = 0\n    for var i = 2; i < n; i++ {\n        res += i\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp5z0jk1zi.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = 0\n    for _ in 0 ..< n {\n        fib4 += fib4(n-1)\n\
    \        fib4 += fib4(n-2)\n        fib4 += fib4(n-3)\n        fib4 += fib4(n-4)\n\
    \    }\n    return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmppoxjggqp.swift:18:17: error: cannot call value of non-function\
    \ type 'Int'\n        fib4 += fib4(n-1)\n                ^\n/tmp/tmppoxjggqp.swift:19:17:\
    \ error: cannot call value of non-function type 'Int'\n        fib4 += fib4(n-2)\n\
    \                ^\n/tmp/tmppoxjggqp.swift:20:17: error: cannot call value of\
    \ non-function type 'Int'\n        fib4 += fib4(n-3)\n                ^\n/tmp/tmppoxjggqp.swift:21:17:\
    \ error: cannot call value of non-function type 'Int'\n        fib4 += fib4(n-4)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4_rec(n - 1, n + 2, n + 3, n + 4)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp1xl44vrm.swift:16:12: error: cannot find 'fib4_rec' in scope\n\
    \    return fib4_rec(n - 1, n + 2, n + 3, n + 4)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp604uj_79.swift:16:17: error: missing argument label 'n:' in call\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n          \
    \      ^\n                n: \n/tmp/tmp604uj_79.swift:16:31: error: missing argument\
    \ label 'n:' in call\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n                              ^\n                              n: \n/tmp/tmp604uj_79.swift:16:45:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \   ^\n                                            n: \n/tmp/tmp604uj_79.swift:16:59:\
    \ error: missing argument label 'n:' in call\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n                                         \
    \                 ^\n                                                        \
    \  n: \n"
  stdout: ''
  timestamp: 1660028458
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tvar r = 0\n\tfor _ in 0 ..< n {\n\t\tr += 1\n\t}\n\treturn r\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpbx640o9a/tmpbx640o9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c9410cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c93e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c93e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c93e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbx640o9a                        0x00005597d7abd335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9c942f8460 __libc_start_main +
    245

    6    tmpbx640o9a                        0x00005597d7abcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let result = 1\n    let i = 2\n    while i <= n {\n        result\
    \ = result + i\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpvvz7k5vj.swift:19:9: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n        result = result + i\n        ^~~~~~\n/tmp/tmpvvz7k5vj.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = 1\n    ^~~\n\
    \    var\n/tmp/tmpvvz7k5vj.swift:20:11: error: left side of mutating operator\
    \ isn't mutable: 'i' is a 'let' constant\n        i += 1\n        ~ ^\n/tmp/tmpvvz7k5vj.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let i = 2\n    ^~~\n   \
    \ var\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var sum = 0\n    switch n {\n    case 0:\n        return 0\n \
    \   case 1:\n        return 1\n    case 2:\n        return 2\n    default:\n \
    \       sum = fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp0c9t23u5.swift:25:20: error: missing argument label 'n:' in call\n\
    \        sum = fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n                   ^\n\
    \                   n: \n/tmp/tmp0c9t23u5.swift:25:34: error: missing argument\
    \ label 'n:' in call\n        sum = fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \                                 ^\n                                 n: \n/tmp/tmp0c9t23u5.swift:25:48:\
    \ error: missing argument label 'n:' in call\n        sum = fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n                                               ^\n     \
    \                                          n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let fib4Sequence = [0,1,1,2,3,5,8,13,21,34,55,89]\n    if n <\
    \ 0 || n > fib4Sequence.count {\n        return 0\n    }\n    return fib4Sequence[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp07vpslyx/tmp07vpslyx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f4705bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f46d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f46d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f46d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07vpslyx                        0x0000555ce0e8b365 <unavailable> + 4965

    5    libc.so.6                          0x00002b3f47247460 __libc_start_main +
    245

    6    tmp07vpslyx                        0x0000555ce0e8b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // TODO: write code here\n  return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp6ptv_l4k/tmp6ptv_l4k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b449b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b449b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b449b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b449b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ptv_l4k                        0x0000555e59c011b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b449b72e460 __libc_start_main +
    245

    6    tmp6ptv_l4k                        0x0000555e59c00e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp0cz_0fbe/tmp0cz_0fbe.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e18384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e1807bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e1807b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e1807a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cz_0fbe                        0x0000560e2d7b71b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b7e18570460 __libc_start_main +
    245

    6    tmp0cz_0fbe                        0x0000560e2d7b6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 1\n    for i in 1...n {\n        a = b\n\
    \        b += a\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmps9s2f9xv/tmps9s2f9xv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722fcb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b722f9adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b722f9ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b722f9ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9s2f9xv                        0x0000560cbc52d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b722fea2460 __libc_start_main +
    245

    6    tmps9s2f9xv                        0x0000560cbc52cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4Helper(n, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpmx__c1g2.swift:16:10: error: cannot find 'fib4Helper' in scope\n\
    \  return fib4Helper(n, 0, 0)\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    switch n {\n    case 0: return 0\n    case 1: return 0\n    case\
    \ 2: return 2\n    case 3: return 0\n    default: return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpi42ubcd8.swift:21:26: error: missing argument label 'n:' in call\n\
    \    default: return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n         \
    \                ^\n                         n: \n/tmp/tmpi42ubcd8.swift:21:38:\
    \ error: missing argument label 'n:' in call\n    default: return fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n                                     ^\n\
    \                                     n: \n/tmp/tmpi42ubcd8.swift:21:50: error:\
    \ missing argument label 'n:' in call\n    default: return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n                                                 ^\n\
    \                                                 n: \n/tmp/tmpi42ubcd8.swift:21:62:\
    \ error: missing argument label 'n:' in call\n    default: return fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n                                        \
    \                     ^\n                                                    \
    \         n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib4 = 0.0\n  if n == 0 || n == 1 {\n    return n\n  }\n  fib4\
    \ += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  return fib4\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpvw4zx1yv.swift:20:11: error: cannot call value of non-function\
    \ type 'Double'\n  fib4 += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n          ^\n/tmp/tmpvw4zx1yv.swift:20:25: error: cannot call value of non-function\
    \ type 'Double'\n  fib4 += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n                        ^\n/tmp/tmpvw4zx1yv.swift:20:39: error: cannot call\
    \ value of non-function type 'Double'\n  fib4 += fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n                                      ^\n/tmp/tmpvw4zx1yv.swift:20:53:\
    \ error: cannot call value of non-function type 'Double'\n  fib4 += fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n                                \
    \                    ^\n/tmp/tmpvw4zx1yv.swift:21:10: error: cannot convert return\
    \ expression of type 'Double' to return type 'Int'\n  return fib4\n         ^~~~\n\
    \         Int()\n"
  stdout: ''
  timestamp: 1660028461
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = n\n    var b = n\n    var c = n\n    var d = n\n    while\
    \ true {\n        let temp = a + b + c + d\n        if temp > 1000000000000 {\
    \ break }\n        a = b\n        b = c\n        c = d\n        d = temp\n   \
    \ }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp2r9lfeo4/tmp2r9lfeo4.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5616b3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5616833b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5616833988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56168327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r9lfeo4                        0x0000557778cf51b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5616d28460 __libc_start_main +
    245

    6    tmp2r9lfeo4                        0x0000557778cf4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 2\n    var b = 4\n    var c = 6\n    var d = 8\n    if\
    \ n < 4 {\n        return n\n    }\n    while n > 0 {\n        var next = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = next\n \
    \       n = n - 4\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpbdmucmt6.swift:29:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n - 4\n        ^\n/tmp/tmpbdmucmt6.swift:31:12: error:\
    \ cannot find 'next' in scope\n    return next\n           ^~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var a = 0\n  var b = 1\n  var c = 2\n  var d = 1\n\n  for _ in 0..<n\
    \ {\n    let result = a + b + c + d\n    (a, b, c, d) = (d, c, b, a)\n    a =\
    \ result\n  }\n\n  return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpis03srn2/tmpis03srn2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfa6438c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfa612fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfa612f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfa612e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpis03srn2                        0x0000556ce3bd9335 <unavailable> + 4917

    5    libc.so.6                          0x00002adfa6624460 __libc_start_main +
    245

    6    tmpis03srn2                        0x0000556ce3bd8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return sequences.fib4[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpe_9vyeun.swift:16:12: error: cannot find 'sequences' in scope\n\
    \    return sequences.fib4[n-1]\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    else if n == 1 {\n \
    \       return 1\n    }\n    else {\n        let fib41 = fib4(n - 1) + fib4(n\
    \ - 2)\n        let fib42 = fib4(n - 3) + fib4(n - 4)\n        return fib41 +\
    \ fib42\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpt70ukmqm.swift:23:26: error: missing argument label 'n:' in call\n\
    \        let fib41 = fib4(n - 1) + fib4(n - 2)\n                         ^\n \
    \                        n: \n/tmp/tmpt70ukmqm.swift:23:40: error: missing argument\
    \ label 'n:' in call\n        let fib41 = fib4(n - 1) + fib4(n - 2)\n        \
    \                               ^\n                                       n: \n\
    /tmp/tmpt70ukmqm.swift:24:26: error: missing argument label 'n:' in call\n   \
    \     let fib42 = fib4(n - 3) + fib4(n - 4)\n                         ^\n    \
    \                     n: \n/tmp/tmpt70ukmqm.swift:24:40: error: missing argument\
    \ label 'n:' in call\n        let fib42 = fib4(n - 3) + fib4(n - 4)\n        \
    \                               ^\n                                       n: \n\
    /tmp/tmpt70ukmqm.swift:25:22: error: cannot convert return expression of type\
    \ 'String' to return type 'Int'\n        return fib41 + fib42\n              \
    \ ~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var fib4 = Int(0)\n  if n > 0 {\n    fib4 = fib4 + 1\n  }\n  if\
    \ n > 1 {\n    fib4 = fib4 + 2\n  }\n  if n > 2 {\n    fib4 = fib4 + 1\n  }\n\
    \  if n > 3 {\n    fib4 = fib4 + 2\n  }\n  if n > 4 {\n    fib4 = fib4 + 1\n \
    \ }\n  return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpa5tuits0/tmpa5tuits0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b774f8d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b774f5ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b774f5cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b774f5cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5tuits0                        0x00005563fbeb01b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b774fac1460 __libc_start_main +
    245

    6    tmpa5tuits0                        0x00005563fbeafe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028461
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n >= 0 else {\n        return 0\n    }\n    \n    var result\
    \ = 1\n    for _ in 1 ..< n {\n        result = result * 3 + 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp2383gl85/tmp2383gl85.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab23e48fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab23e186b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab23e186988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab23e1857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2383gl85                        0x0000564cb6c8d335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab23e67b460 __libc_start_main +
    245

    6    tmp2383gl85                        0x0000564cb6c8cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028461
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n\tvar result : Int = 0\n\tfor index in 0 ..< n {\n\t\tresult = result\
    \ + fib4(index-1)\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpq_wvq63_.swift:18:26: error: missing argument label 'n:' in call\n\
    \                result = result + fib4(index-1)\n                           \
    \            ^\n                                       n: \n"
  stdout: ''
  timestamp: 1660028460
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = Int(0);\n    for _ in 0..<n {\n        fib4 += Int(fib4);\n\
    \    }\n    return fib4;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpl1fc_xgr/tmpl1fc_xgr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2283af7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22837eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22837ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22837ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1fc_xgr                        0x000055cdd6004475 <unavailable> + 5237

    5    libc.so.6                          0x00002b2283ce3460 __libc_start_main +
    245

    6    tmpl1fc_xgr                        0x000055cdd6004129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028461
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // FILL IN HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp77yzys2a/tmp77yzys2a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af90a6c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af90a3bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af90a3bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af90a3ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77yzys2a                        0x000055d695c2d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af90a8b0460 __libc_start_main +
    245

    6    tmp77yzys2a                        0x000055d695c2ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028461
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return fib4Sum(n, n*2, n*3, n*4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp95anf_pb.swift:16:10: error: cannot find 'fib4Sum' in scope\n \
    \ return fib4Sum(n, n*2, n*3, n*4)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028460
