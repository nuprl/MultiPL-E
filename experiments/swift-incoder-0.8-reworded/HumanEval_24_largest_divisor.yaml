name: HumanEval_24_largest_divisor
language: swift
prompt: "\n/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
  \ Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
  \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
  \ == 50)\nassert(largest_divisor(n: 49) == 7)"
completions: ["\tvar largest = 0\n\tfor i := 0; i <= n/2; i++ {\n\t\tif n % i == 0\
    \ {\n\t\t\tif largest < i {\n\t\t\t\tlargest = i\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ largest", "    if n <= 1 {\n        return n\n    }\n    var remainder = n\n\
    \    var largestDivisor: Int = 0\n    var currentDiv: Int = 0\n    var currentDivisor:\
    \ Int = 0\n    while remainder > 0 {\n        currentDivisor = remainder / 2\n\
    \        remainder = remainder - currentDivisor * 2\n        currentDiv = 2\n\
    \        while currentDivisor > 1 {\n            currentDiv++\n            currentDivisor--\n\
    \        }\n        if currentDiv > largestDivor {\n            largestDivisor\
    \ = currentDiv\n        }\n    }\n    return largestDivisor", "    var max_divisor\
    \ = 0\n    var max_divisor_n = 0\n\n    for divisor in 1...n {\n        if n%divisor\
    \ == 0 {\n            if divisor_n > max_divisor_n {\n                max_divisor_n\
    \ = divisor_n\n                max_divisor = divisor\n            }\n        }\n\
    \    }\n\n    return max_divisor", "    var largestDivisor = n / 2\n    for divisor\
    \ = 2; divisor <= n; divisor++ {\n        if n % divisor == 0 {\n            if\
    \ largestDivisor % divisor == 0 {\n                largestDivisor = divisor\n\
    \            } else {\n                if largestDivisor == n && divisor != n\
    \ {\n                    largestDivisor = divisor\n                }\n       \
    \     }\n        }\n    }\n    return largestDivisor", "    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            return d\n        }\n    }\n    return\
    \ n", "    var largestDivisor: Int = 0\n    for divisor in divisors(n) {\n   \
    \     if n / divisor == Int(Int(divisor)) {\n            if divisor * divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor", "    var max_divisor = 1\n    if\
    \ n <= 1 {\n        return n\n    }\n\n    for i in 2..<n {\n        if n % i\
    \ == 0 {\n            max_divisor = i\n        }\n    }\n    return max_divisor",
  "\tif n == 1 {\n\t\treturn 1\n\t}\n\tlargestDivisorValue := 2\n\tfor i := 2; i <=\
    \ n/2; i += 1 {\n\t\tif n%i == 0 {\n\t\t\tlargestDivisorValue = i\n\t\t\tbreak\n\
    \t\t}\n\t}\n\treturn largestDivisorValue", "    let m = Int(log(Double(n))) +\
    \ 1 // +1 because log(0)=-infinity\n    let a = Int(floor(m/2))\n    let b = m\
    \ - a\n    return (Int(pow(b, 2)) + (Int(pow(a, 2)) * Int(pow(Double(n), 2))))\
    \ % (Int(pow(Double(n), 2)))", "    var max_num = 0\n    for num in stride(from:\
    \ 1, to: n, by: 1) {\n        if num % 2 == 0 {\n            if max_num < num\
    \ {\n                max_num = num\n            }\n        }\n    }\n    return\
    \ max_num", "\tvar candidate = 0\n\tfor i in 1...n {\n\t\tif n % i == 0 {\n\t\t\
    \tif candidate > i {\n\t\t\t\tcandidate = i\n\t\t\t}\n\t\t}\n\t}\n\treturn candidate",
  "    if n < 2 {\n        return 0\n    }\n    var res = 1\n    for i := 1; i < n;\
    \ i++ {\n        if n % i == 0 {\n            res = i\n            break\n   \
    \     }\n    }\n    return res", "    var largest = n;\n    for i in 1...n {\n\
    \        if n % i == 0 {\n            largest = i;\n        }\n    }\n    return\
    \ largest;", "    let result: Int = 1\n    let factors = factors(n)\n    for f\
    \ in factors {\n        if f % 2 == 0 {\n            continue\n        }\n   \
    \     if f > result {\n            result = f\n        }\n    }\n    return result",
  '    return largest_divisor_with_conditional(n: n, isDivisibleBy: n)', "    var\
    \ largest = Int(0)\n    for divisor in 1..Int(n/(Int(n)/2)) {\n        if (n %\
    \ divisor) == 0 {\n            if largest < Int(divisor) {\n                largest\
    \ = Int(divisor)\n            }\n        }\n    }\n    return largest", "    var\
    \ largest = 0\n\n    for div in 1...n {\n        if div*div > n {\n          \
    \  break\n        }\n\n        largest = div\n    }\n\n    return largest", " \
    \   guard n >= 1 else {\n        return 0\n    }\n\n    if n % 2 == 0 {\n    \
    \    return largest_divisor(n: n / 2)\n    } else {\n        return largest_divisor(n:\
    \ n - 1)\n    }", "    let r = n % 2\n    if r == 0 {\n        return 1\n    }\n\
    \n    if r > 0 {\n        let l = n % r\n        if l > 0 {\n            return\
    \ r\n        } else {\n            let l = largest_divisor(l)\n            if\
    \ l > r {\n                return l\n            } else {\n                return\
    \ r\n            }\n        }\n    } else {\n        let l = largest_divisor(n\
    \ - 2)\n        if l > r {\n            return l\n        } else {\n         \
    \   return r\n        }\n    }", "    // Check n is a power of 2\n    if n < 2\
    \ || (n & (n - 1)) != 0 {\n        return n\n    }\n\n    var max_divisor = 2\n\
    \    var max_div = 0\n    for div in 2..n {\n        if n % div == 0 {\n     \
    \       if div > max_div {\n                max_div = div\n                max_divisor\
    \ = div\n            }\n        }\n    }\n\n    return max_divisor", '    return
    largest_divisor(n)', "    if n < 2 {\n        return 0\n    }\n    var maxDivisor\
    \ = 1\n    var minDivisor = 1\n    var currentDivisor = 1\n    var currentNumber\
    \ = n\n    repeat {\n        if n % currentDivisor == 0 {\n            currentDivisor\
    \ = currentDivisor + 1\n            if currentDivisor > maxDivisor {\n       \
    \         maxDivisor = currentDivisor\n            }\n        } else {\n     \
    \       currentDivisor = currentDivisor - 1\n            if currentDivisor < minDivisor\
    \ {\n                minDivisor = currentDivisor\n            }\n        }\n \
    \       currentNumber = currentNumber / currentDivisor\n    } while (currentNumber\
    \ > 1)\n    return maxDivisor", "    if n%2 == 0 {\n        return n\n    }\n\n\
    \    for d in [2,3,5,7,11,13,17,19] {\n        if n%d == 0 {\n            return\
    \ d\n        }\n    }\n\n    return n", "    guard n >= 1 else {\n        return\
    \ 0\n    }\n    guard n <= 10 else {\n        return 0\n    }\n    var max_divisor:\
    \ Int = 0\n    var max_divisor_divisor: Int = 0\n    var max_divisor_divisor_divisor:\
    \ Int = 0\n    var max_divisor_divisor_divisor_divisor: Int = 0\n    \n    for\
    \ divisor in stride(from: n-1, by: -1, by:1) {\n        if divisor > max_divisor\
    \ {\n            max_divisor = divisor\n            if max_divisor_divisor < divisor\
    \ {\n                max_divisor_divisor = max_divisor\n                if max_divisor_divisor_divisor\
    \ < divisor {\n                    max_divisor_divisor_divisor = max_divisor\n\
    \                    if max_divisor_divisor_divisor_divisor < divisor {\n    \
    \                    max_divisor_divisor_divisor_divisor = max_divisor\n     \
    \                   if max_divisor_divisor_divisor_divisor_divisor < divisor {\n\
    \                            max_divisor_divisor_divisor_divisor_divisor = max_divisor\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n\n    return max_divisor_divisor_divisor_divisor",
  "    if n <= 0 {\n        return 0\n    }\n    var largest_divisor = 0\n    var\
    \ current_divisor = 1\n    var current_divisor_size = 0\n    while current_divisor_size\
    \ < n {\n        current_divisor *= 2\n        current_divisor_size += 1\n   \
    \     if current_divisor_size == n {\n            if current_divisor >= n {\n\
    \                break\n            }\n            largest_divisor = current_divisor\n\
    \            current_divisor = 1\n            current_divisor_size = 0\n     \
    \   }\n    }\n    return largest_divisor", "    let mut largest = 0\n    for d\
    \ in divisors(n) {\n        if n % d == 0 {\n            if d > largest {\n  \
    \              largest = d\n            }\n        }\n    }\n    return largest",
  '    return max(smallDivisor(n), n)', "    var result: Int?\n    for d in factors\
    \ {\n        result += d * d // d*d is always smaller than n\n        if result!\
    \ > n {\n            break\n        }\n    }\n    return result! // return largest\
    \ number that divide n evenly", "    var max_divisor = 0\n    for _ in 0..<n {\n\
    \        let divisor = gcd(n)\n        if divisor > max_divisor {\n          \
    \  max_divisor = divisor\n        }\n        n = n / divisor\n    }\n    return\
    \ max_divisor", "  var ans = n\n  for _ in 0..<n {\n    ans = ans/2\n    if ans%2\
    \ == 0 {\n      return ans\n    }\n  }\n  return ans", '    return Int(arc4random())
    % n', "    for d in divisors() {\n        if n % d == 0 {\n            return\
    \ d\n        }\n    }\n\n    return n", "    let n = n\n    let max = (n + 1)\
    \ &- 2\n    for i in 0 ..< max {\n        if (n % i == 0) {\n            return\
    \ i\n        }\n    }\n    return n", "    var max_factor: Int\n    for factor\
    \ in 1...n {\n        if n%factor == 0 {\n            if max_factor < factor {\n\
    \                max_factor = factor\n            }\n        }\n    }\n    return\
    \ max_factor", '    return largestDivisor(n)', "    var maxDivisor: Int = 1\n\
    \    var biggestDivisor: Int = 0\n    for number in 1...n {\n        if n%number\
    \ == 0 {\n            if biggestDivisor == 0 {\n                biggestDivisor\
    \ = number\n            } else {\n                if number > biggestDivisor {\n\
    \                    biggestDivisor = number\n                }\n            }\n\
    \        }\n    }\n    return biggestDivisor", '    return largest_divisor_inner(n)',
  "\t// initialize an array to hold the result\n\tresult : [Int]  = [0]\n\t// find\
    \ and store the largest number that divides n evenly\n\tresult[0] = n\n\tvar x\
    \ Int = 0\n\twhile n < 0 {\n\t\t// if n divides evenly, increase x by 1\n\t\t\
    if n % 2 == 0 {\n\t\t\tx += 1\n\t\t}\n\t\t// if x is greater than the largest\
    \ number that divides n evenly, n is increased by 1\n\t\tif x > result[0] {\n\t\
    \t\tresult[0] = n\n\t\t}\n\t\t// if x is still greater than the largest number\
    \ that divides n evenly, n is increased by 1\n\t\tif x > result[0] {\n\t\t\tresult[0]\
    \ = n\n\t\t}\n\t\t// n is increased by 1\n\t\tn += 1\n\t}\n\treturn result[0]",
  '    return largest_divisors(n: n)[0]', "    var largest = 1\n    var largestDivisor\
    \ = 1\n    var divisor = 1\n    for divisor < n {\n        if n % divisor == 0\
    \ {\n            largestDivisor = divisor\n            largest = divisor\n   \
    \     }\n        divisor++\n    }\n\n    return largestDivisor", "    var max_divisor:\
    \ Int = 0\n    for d in divisors(n) {\n        if n%d == 0 {\n            max_divisor\
    \ = d\n            break\n        }\n    }\n    return max_divisor", "  if n <\
    \ 2 {\n    return 0\n  }\n  var max = 1\n  for d := 1; d < n; d++ {\n    if n\
    \ % d == 0 {\n      if d > max {\n        max = d\n      }\n    }\n  }\n  return\
    \ max", '    return largestDivisor(n)', "    // Find largest number that can be\
    \ divided by n and evenly\n    var largestDivisor: Int = 1\n    var divisor: Int\n\
    \n    for divisor in stride(from: n, to: 2, by: 2) {\n        if n % divisor ==\
    \ 0 {\n            largestDivisor = divisor\n            break\n        }\n  \
    \  }\n    return largestDivisor", '    return largest_divisor_of_divisor(n)',
  "\tlargest_divisor = IntMax\n\n\tlet n = n / Int(Int(ceil(sqrt(Double(n)))))\n\t\
    for i = Int(1); i <= n; i++ {\n\t\tif n % i == 0 {\n\t\t\tif n > largest_divisor\
    \ {\n\t\t\t\tlargest_divisor = n\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn largest_divisor",
  "    if n < 2 {\n        return 2\n    }\n\n    var largestDivisor = 0\n    var\
    \ divisor: Int\n    var remaining: Int\n\n    for divisor = 2; divisor <= n; divisor++\
    \ {\n        remaining = n % divisor\n        if remaining == 0 {\n          \
    \  if divisor > largestDivisor {\n                largestDivisor = divisor\n \
    \           }\n        } else {\n            if divisor < largestDivisor {\n \
    \               largestDivisor = divisor\n            }\n        }\n    }\n\n\
    \    return largestDivisor", "    var maxDivisor = Int64(0)\n    var divisor =\
    \ Int64(n)\n    var lastDivisor = Int64(0)\n\n    for divisor != 1 {\n       \
    \ while divisor != 1 {\n            if n % divisor == 0 {\n                divisor\
    \ = lastDivisor\n            } else {\n                lastDivisor = divisor\n\
    \            }\n        }\n        maxDivisor = divisor\n    }\n\n    return maxDivisor",
  "    var i = Int()\n    var max_divisor = 0\n    for divisor in divisors(n) {\n\
    \        if divisor > max_divisor {\n            max_divisor = divisor\n     \
    \       i = Int(n)\n        }\n        i /= divisor\n    }\n    return max_divisor",
  "    var max_divisor: Int = 0\n    for i in 2...n {\n        if n % i == 0 {\n \
    \           if max_divisor < i {\n                max_divisor = i\n          \
    \  }\n        }\n    }\n    return max_divisor", "\tvar result Int\n\tvar divisor\
    \ Int\n\tvar last_divisor Int\n\tvar found Bool\n\n\tfor i in 1 ... n {\n\t\t\
    if !found {\n\t\t\tdivisor = 1\n\t\t\tlast_divisor = 1\n\t\t\tfound = false\n\t\
    \t\tcontinue\n\t\t}\n\n\t\tif i%last_divisor == 0 {\n\t\t\tdivisor++\n\t\t} else\
    \ {\n\t\t\tif divisor > last_divisor {\n\t\t\t\tresult = i\n\t\t\t\tlast_divisor\
    \ = divisor\n\t\t\t}\n\t\t\tdivisor = 1\n\t\t\tfound = false\n\t\t}\n\t}\n\n\t\
    return result", "    let num: Int = numOfDigits(n)\n    if num == 0 {\n      \
    \  return 0\n    }\n\n    let maxDivider: Int = pow(10, Double(num))\n    return\
    \ ceil(log10(Double(n))) - ceil(log10(maxDivider))", "\tif n < 2 {\n\t\treturn\
    \ 0\n\t}\n\n\tlet largest_divisor: Int = 2\n\tvar largest_divisor_found = false\n\
    \n\twhile largest_divisor_found == false {\n\t\tif n % largest_divisor == 0 {\n\
    \t\t\tlargest_divisor_found = true\n\t\t}\n\n\t\tlargest_divisor++\n\t}\n\n\t\
    return largest_divisor", "    var result: Int = 1\n    var remainder = n % result\n\
    \n    while remainder > 0 {\n        result = result + 1\n        remainder =\
    \ remainder - result * result\n    }\n\n    return result", "\treturn largest_divisor(n\
    \ - 1, n)", "\treturn largestDivisor(n)", "    var max_divisor = 0\n    var max_remainder\
    \ = -1\n\n    for divisor in 1..n {\n        if n % divisor == 0 {\n         \
    \   var remainder = n % divisor\n            while remainder != 0 {\n        \
    \        max_divisor = divisor\n                max_remainder = remainder\n  \
    \              remainder = remainder - divisor\n            }\n        }\n   \
    \ }\n\n    return max_divisor", "\treturn n / find_divisor(n)", "    if n%2 ==\
    \ 0 {\n        return n/2\n    }\n    var largest: Int = 1\n    var num = 3\n\
    \    while num < n {\n        if n%num == 0 {\n            largest = num\n   \
    \         break\n        }\n        num = num + 2\n    }\n    return largest",
  "    let factors = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    let factorsOfN = factors.filter { n % $0 == 0 }\n    let maxFactor = max(factorsOfN)\n\
    \    return factors.filter { $0 == maxFactor }\n        .last!", "    let n =\
    \ abs(n)\n    if n == 1 {\n        return n\n    }\n    var max = 0\n    for _\
    \ in 0..<n {\n        let temp = n\n        for _ in 1..<n / 2 {\n           \
    \ temp -= 1\n        }\n        if temp > max {\n            max = temp\n    \
    \    }\n    }\n    return max", "    let result: Int = Int(ceil(log(n) / log(2)))\n\
    \n    if result > Int(n) {\n        return Int()\n    }\n\n    return result",
  "    // https://en.wikipedia.org/wiki/Divisor\n    // http://mathworld.wolfram.com/DivisorFunction.html\n\
    \    var result: Int\n    if n % 2 == 0 {\n        result = n\n    } else {\n\
    \        result = n - 1\n    }\n    for num in 3...n {\n        if num % 2 ==\
    \ 0 {\n            continue\n        }\n        if result > num {\n          \
    \  result = num\n        }\n    }\n    return result", '    return large_divisor(n,
    prime_sieve_of_squares(n, primes_limit))', "    var largest_divisor: Int = 0\n\
    \    for _n in 1...n {\n        if ((n % _n) == 0) {\n            largest_divisor\
    \ = _n\n        }\n    }\n    return largest_divisor", "    if n < 2 {\n     \
    \   return 0\n    }\n\n    var largest = i\n    for i in 2...n {\n        if n\
    \ % i == 0 {\n            largest = i\n            break\n        }\n    }\n \
    \   return largest", "    if n < 0 {\n        print(\"Input must be greater than\
    \ 0\")\n        return 0\n    }\n    let sqrt_n = sqrt(n)\n    return Int(ceil(Double(sqrt_n)\
    \ / Double(n)))", "    if n%2 == 1 {\n        return 0\n    }\n    var (\n   \
    \     maxDiv: Int\n        divisor : Int\n    ) = (1, n)\n    while divisor <=\
    \ maxDiv {\n        if n%divisor == 0 {\n            maxDiv = divisor\n      \
    \  }\n        divisor++\n    }\n    return maxDiv", "    var divisor: Int = 0\n\
    \n    for i in  1...n {\n        if n % i == 0 {\n            divisor = i\n  \
    \      }\n    }\n\n    return divisor", "    guard n >= 0 else {\n        return\
    \ 0\n    }\n    guard n % 2 == 0 else {\n        return 0\n    }\n    var largest\
    \ = 0\n    var largestIndex = 0\n    for i in 0..<(n - 1) {\n        if i % 2\
    \ == 0 {\n            if largest < i {\n                largest = i\n        \
    \        largestIndex = i\n            }\n        }\n    }\n    return largestIndex",
  "    // Return n if n is even\n    if n % 2 == 0 {\n        return n\n    }\n\n\
    \    // If n is odd, find the largest divisor of n that is smaller than n\n  \
    \  return largest_divisor(n / 2)", "    // Find first divisor smaller than n\n\
    \    var dividend : Int\n    dividend = n\n    var divisor = n // First divisor\
    \ less than n\n    var counter : Int = 0\n    while divisor > 1 {\n        counter\
    \ += 1\n        divisor = dividend % divisor\n        dividend = divisor\n   \
    \ }\n    return dividend", "\treturn largest_divisor_by_n(&n, n)", "    guard\
    \ n % 2 == 0 else {\n        return 0\n    }\n    return n", "    let divisors\
    \ = divisors(n)\n    return divisors.reduce(1) { max, divisor in\n        return\
    \ divisor <= max ? divisor : max\n    }", "\tlet remainder = n % 6\n\tlet maxDivisor\
    \ = 6\n\tswitch remainder {\n\tcase 0:\n\t\treturn 1\n\tcase 1:\n\t\treturn 2\n\
    \tcase 2:\n\t\treturn 3\n\tcase 3:\n\t\treturn 5\n\tcase 4:\n\t\treturn 9\n\t\
    case 5:\n\t\treturn 13\n\tcase 6:\n\t\treturn 17\n\tcase 7:\n\t\treturn 19\n\t\
    case 8:\n\t\treturn 23\n\tcase 9:\n\t\treturn 29\n\tcase 10:\n\t\treturn 31\n\t\
    case 11:\n\t\treturn 37\n\tcase 12:\n\t\treturn 41\n\tcase 13:\n\t\treturn 43\n\
    \tcase 14:\n\t\treturn 47\n\tcase 15:\n\t\treturn 49\n\t}\n\treturn maxDivisor",
  "\treturn largest_divisor_to_num(n: n)", "    let maxDivisor = n * 2\n    var divisor\
    \ = 0\n    for d in 1...maxDivisor {\n        if n % d == 0 {\n            divisor\
    \ = d\n            break\n        }\n    }\n    return divisor", '    return largest_divisor_iterative(n)',
  "    var result = -1\n\n    for _ in 0..<n {\n        if n % result == 0 {\n   \
    \         break\n        }\n        result += 1\n    }\n\n    return result",
  "\tvar max : Int = 0\n\tfor i in 1..<n {\n\t\tif n%i == 0 {\n\t\t\tmax = i\n\t\t\
    \tbreak\n\t\t}\n\t}\n\treturn max", "    if n < 1 {\n        return 0\n    }\n\
    \n    if n == 1 {\n        return 1\n    }\n\n    if n == 2 {\n        return\
    \ 2\n    }\n\n    if n % 2 == 0:\n        return largest_divisor(n - 2)\n    }\n\
    \n    var divisor : Int = 1\n    var maxDivisor : Int = n\n\n    for divisor in\
    \ 1...n {\n        if n % divisor == 0 {\n            maxDivisor = divisor\n \
    \       }\n    }\n\n    return maxDivisor", "    if n < 2 {\n        return n\n\
    \    }\n\n    let mut max_factor: Int = 0\n    let mut max_factor_size: Int =\
    \ 0\n\n    for i in 2..=n {\n        if n % i == 0 {\n            if max_factor_size\
    \ <= i {\n                max_factor = i\n                max_factor_size = i\n\
    \            } else {\n                max_factor_size = i\n            }\n  \
    \      }\n    }\n\n    return max_factor", "    if n == 0 {\n        return 0\n\
    \    }\n    var max = n\n    for num in 2..<n {\n        if n % num == 0 {\n \
    \           max += num\n        }\n    }\n    return max", "    if n < 1 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    \n    //\
    \ Find largest divisor of n / 2\n    var remainder = n\n    var largestDivisor\
    \ = 1\n    while remainder > 0 {\n        if remainder % 2 != 0 {\n          \
    \  largestDivisor++\n        }\n        remainder /= 2\n    }\n\n    return largestDivisor",
  "    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n\
    \    }\n\n    var maxDivisor = 1\n    var currentDivisor = 1\n\n    for i in 1..n\
    \ {\n        if n % (currentDivisor*currentDivisor) == 0 {\n            currentDivisor++\n\
    \            if currentDivisor > maxDivisor {\n                maxDivisor = currentDivisor\n\
    \            }\n        } else {\n            currentDivisor = 1\n        }\n\
    \    }\n\n    return maxDivisor", "\tlet i = sqrt(Double(n))\n\tvar a = i\n\t\
    var b = i\n\n\tvar maxDivisor: Int = 0\n\n\twhile a <= n {\n\t\tif n % a == 0\
    \ {\n\t\t\tb++\n\t\t}\n\n\t\tif b == i {\n\t\t\tmaxDivisor = a\n\t\t}\n\n\t\t\
    a++\n\t}\n\n\treturn maxDivisor", '  return largest_divisor_with_remainder(n)',
  "    var divisor = Int(1); \n    \n    for i in 1..<n {\n        if n % i == 0 {\n\
    \            divisor = i;\n        }\n    }\n    return divisor", "\treturn largest_divisor_inner(n,\
    \ n)", '    return largestDivisor(n)', '    return largest_divisor_by_n_until(n,
    n)', "    if n % 2 == 0 {\n        return n / 2\n    }\n    var remainder: Int\
    \ = 0\n    while n % 2 == 0 {\n        n = n / 2\n        remainder = remainder\
    \ + 2\n    }\n    return remainder", "    if n == 0 {\n        return 0\n    }\n\
    \    return 1 + largest_divisor(n - 1)", "  var max_divisor = 0\n  var i = 1\n\
    \  var j = 0\n  for i = 2; i < n; i += 2 {\n    if n % i == 0 {\n      if max_divisor\
    \ < i {\n        max_divisor = i\n      }\n      j++\n    }\n  }\n  return max_divisor",
  "    \n    var max: Int = 0\n    for d in 2...n {\n        let s = n/divisor\n \
    \       if s == 0 || s >= n {\n            break\n        } else {\n         \
    \   if d > max {\n                max = d\n            }\n        }\n    }\n \
    \   return max", "    if n < 0 {\n        return -1\n    }\n\n    var highest_divisor\
    \ = Int(1)\n    for divisor in 1...Int(n/2){\n        if n%divisor == 0 {\n  \
    \          highest_divisor = Int(divisor)\n        }\n    }\n\n    if n%highest_divisor\
    \ == 0 {\n        return highest_divisor\n    }\n\n    return -1", '  return largest_divisor_inner(n)',
  "    var max: Int = 1\n    var i: Int = 1\n    for max *= i <= n ? i : 1; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return\
    \ i", "\tswitch n {\n\tcase 2:\n\t\treturn 2\n\tcase 3:\n\t\treturn 3\n\tcase\
    \ 5:\n\t\treturn 5\n\tcase 7:\n\t\treturn 7\n\tcase 10:\n\t\treturn 10\n\tcase\
    \ 11:\n\t\treturn 11\n\tcase 12:\n\t\treturn 12\n\tcase 15:\n\t\treturn 15\n\t\
    case 16:\n\t\treturn 16\n\tdefault:\n\t\treturn n % 4 == 0 ? n : n / 4\n\t}",
  "    // If n is even, return its square root.\n    if n % 2 == 0 {\n        return\
    \ sqrt(n)\n    }\n\n    // If n is odd, return largest factor of the number that\
    \ is smaller than n.\n    var maxFactor = 1\n    for factor in 2..(n - 1) {\n\
    \        if (n / factor).is_integer()  && factor < maxFactor {\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor", "    var max: Int = 0\n \
    \   for num in 1...n {\n        if num % 2 != 0 {\n            max = num\n   \
    \     } else {\n            if num > max {\n                max = num\n      \
    \      }\n        }\n    }\n    return max", "\t\n\tlet divisors = (0..<n).filter({\
    \ Int($0) >= Int(n) }).map({ ($0 + 1) / 2 })\n\t\n\treturn divisors.max() ?? 1",
  "    if n <= 1 {\n        return n\n    }\n    let limit = Int(floor(n * math.log(n,\
    \ 2) / math.log(2, n)))\n    var largest = limit - 1\n    var current = 1\n  \
    \  for var i = 0; i <= limit; i++ {\n        if current % i == 0 {\n         \
    \   if current > largest {\n                largest = current\n            }\n\
    \            current++\n        }\n    }\n    return largest", "  if n < 2 {\n\
    \    return n\n  }\n\n  let highest = Int(n) - 1\n\n  while n >= highest+1 {\n\
    \    let remainder = n % (highest + 1)\n    if remainder == 0 {\n      return\
    \ highest\n    }\n    highest = Int(remainder)\n  }\n\n  return n", "\tvar max:\
    \ Int = 0\n\tfor i : Int = 1; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\tif max\
    \ < i {\n\t\t\t\tmax = i\n\t\t\t}\n\t\t}\n\t}\n\treturn max", "    let max_divisor\
    \ = Int64(1)\n    var max_divisor_ind = 1\n    for i in (1..<n)! {\n        let\
    \ divisor = i\n        for j in (0..<i)! {\n            if i * j > max_divisor\
    \ {\n                max_divisor = i * j\n                max_divisor_ind = j\n\
    \            }\n        }\n    }\n    return max_divisor_ind", '    return largest_divisor(n,
    count: 1)', "    var max = 1\n    var smaller = 0\n    for divisor in 1...n-1\
    \ {\n        if n % divisor == 0 {\n            max = divisor\n            smaller\
    \ = n - divisor\n        }\n    }\n    if max < n {\n        return max\n    }\
    \ else {\n        return smaller\n    }", "\tlet divisor = Int(ceil(sqrt(n)))\n\
    \twhile n / divisor > 0 {\n\t\tif n % divisor == 0 {\n\t\t\treturn divisor\n\t\
    \t}\n\t\tdivisor++\n\t}\n\treturn divisor", '    return max(dividingPowerOf2(n:
    n), n)', "  if n < 6 {\n    return n\n  }\n  var res = 1\n  for d in 2...n {\n\
    \    if n % d == 0 {\n      res = d\n      break\n    }\n  }\n  return res", " \
    \   var max_divisor : Int = 1\n    var max_divisor_num : Int = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if max_divisor_num <\
    \ divisor {\n                max_divisor = divisor\n                max_divisor_num\
    \ = divisor\n            }\n        }\n    }\n    return max_divisor", "    var\
    \ max_divisor = 0\n    var max_divisor_count = 0\n    for number in stride(from:\
    \ n, through: 0, by: 1) {\n        if number % 2 == 0 {\n            count +=\
    \ 1\n        }\n        if count > max_divisor_count {\n            max_divisor\
    \ = number\n            max_divisor_count = count\n        }\n    }\n    return\
    \ max_divisor", "  let maxNum: Int = pow(10, ceil(log10(Double(n))))\n  let divisor:\
    \ Double = 1 / Double(n)\n  var largestDivisor: Int = 0\n  for d in 1...Int(maxNum)\
    \ {\n    if n / Double(d) == divisor && d > largestDivisor {\n      largestDivisor\
    \ = d\n    }\n  }\n  return largestDivisor", "    if n <= 1 {\n        return\
    \ n\n    }\n\n    var maxDivisor = 1\n    var biggestDivisor = 1\n\n    for _\
    \ in 0 ..< n / 2 {\n        biggestDivisor *= 2\n        if biggestDivisor > n\
    \ {\n            biggestDivisor = n * 2\n        }\n\n        if biggestDivisor\
    \ % 2 == 0 {\n            maxDivisor = biggestDivisor\n        }\n    }\n\n  \
    \  for _ in 0 ..< n / 2 {\n        maxDivisor *= 2\n        if maxDivisor > n\
    \ {\n            maxDivisor = n * 2\n        }\n\n        if maxDivisor % 2 ==\
    \ 0 {\n            return maxDivisor\n        }\n    }\n\n    return maxDivisor",
  "\treturn Int(largest_divisor_of_divisors(n)[1])", "    // This algorithm is based\
    \ on trial division.\n    // The idea is to repeatedly divide by 2, 3, 5, and\
    \ so on until we find a divisor\n    // which is smaller than n.\n\n    // First\
    \ try trial division by 2, 3, 5, and 7\n    if n % 2 == 0 {\n        return 2\n\
    \    } else if n % 3 == 0 {\n        return 3\n    } else if n % 5 == 0 {\n  \
    \      return 5\n    } else if n % 7 == 0 {\n        return 7\n    }\n\n    var\
    \ maxDivisor = 0\n    var divisor = 2\n\n    for _ in 0 ..< 100 {\n        divisor\
    \ = n + divisor\n        if divisor > maxDivisor {\n            maxDivisor = divisor\n\
    \        }\n    }\n\n    return maxDivisor", "\tif n <= 1 {\n\t\treturn n\n\t\
    }\n\tn -= 2 // We want to find n + 2\n\tm := n\n\tfor m > 1 && (m % 2) == 0 {\n\
    \t\tm /= 2\n\t}\n\treturn m", "    var current = 0\n    var largest = Int(n) +\
    \ 1\n    for i in 1...n {\n        if i < (n/2) {\n            current += i\n\
    \            largest = i\n        } else {\n            current = largest + i\n\
    \            if current > largest {\n                largest = current\n     \
    \       }\n        }\n    }\n    return largest", "\tif n == 1 {\n\t\treturn 1\n\
    \t}\n\tdivsOdd := make([]Int, n)\n\tfor i := 0; i < n; i++ {\n\t\tdivsOdd[i] =\
    \ 0\n\t\tfor j := 1; j < i; j++ {\n\t\t\tif i%j == 0 {\n\t\t\t\tdivsOdd[i] = min(divsOdd[i],\
    \ j)\n\t\t\t}\n\t\t}\n\t}\n\treturn divsOdd[n-1]", "    let highestDivisor = n\
    \ / 2\n    var divisor = 1\n    while divisor < n {\n        if n % divisor ==\
    \ 0 {\n            highestDivisor = divisor\n        }\n        divisor++\n  \
    \  }\n    return highestDivisor", "\treturn largest_divisor(n)", '    return largestDivisor(n)',
  '    return largestDivisor(n)', "    guard n > 0 else { return n }\n    var max_divisor\
    \ = 1\n    var max_div = 0\n    for d in divisors(n) {\n        if d > max_divisor\
    \ {\n            max_divisor = d\n            max_div = n - d * d\n        }\n\
    \    }\n    return max_div", '    return largest_divisor_from_n(n)', "    var\
    \ largest_divisor = 0\n    for _i in 0 ..< n {\n        if n % _i >= 0 {\n   \
    \         largest_divisor = i\n            break\n        }\n    }\n    return\
    \ largest_divisor", "    if n < 2 {\n        return 0\n    }\n    \n    var max_divisor:\
    \ Int = 0\n    var max_divisor_p: Int = 0\n    \n    for i : Int in 0 ..< n {\n\
    \        \n        let divisor = n / i\n        \n        if divisor == 0 || divisor\
    \ == 1 {\n            continue\n        }\n        \n        if max_divisor <\
    \ divisor {\n            max_divisor = divisor\n            max_divisor_p = i\n\
    \        }\n    }\n    \n    return max_divisor_p", "\tlargestDivisorCount = 0\n\
    \tlargestDivisor = n\n\n\tfor n != 1 {\n\t\tn /= 2\n\t\tlargestDivisorCount +=\
    \ 1\n\t}\n\tlargestDivisorCount--\n\n\treturn largestDivisor", "    guard n >\
    \ 0 else { return 0 }\n    var max = n\n    var divisor: Int = 0\n    for _ in\
    \ 0 ..< n {\n        divisor++\n        if n % divisor == 0 {\n            max\
    \ = divisor\n        }\n    }\n    return max", "    let maxDivisor = 5\n    var\
    \ max = n\n    var divisor = 1\n    while max % divisor != 0 && divisor <= maxDivisor\
    \ {\n        divisor *= 2\n        max = max / divisor\n    }\n    return max",
  '    return Int((sqrt(Double(n)) * (Double(n))).rounded(.towardZero()))', "  var\
    \ largestDivisor = 0\n  for d in 2...n {\n    if n%d == 0 {\n      if largestDivisor\
    \ <= d {\n        largestDivisor = d\n      }\n    }\n  }\n  return largestDivisor",
  "    let m = n / 2\n    for d in divisors(m) {\n        if (n % d == 0) {\n    \
    \        return d\n        }\n    }\n    return n", "    var i = 2\n    while\
    \ i < n {\n        if n % i == 0 {\n            return i\n        }\n        i\
    \ += 1\n    }\n    return n", '    return largest_divisor(n, true)', "    if n\
    \ < 2 {\n        return 2\n    }\n\n    // O(n) time complexity\n    var max_divisor\
    \ = 2 // 2 is the largest divisor of 2\n    var max_divisor_index = 0\n    for\
    \ i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if max_divisor >\
    \ i {\n                max_divisor = i\n                max_divisor_index = i\n\
    \            } else {\n                max_divisor = max_divisor > i ? max_divisor\
    \ : i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor", "    var max_divisor = Int()\n    \n    for i in 1 ..<\
    \ n {\n        if n % (i + 1) == 0 {\n            if n > max_divisor {\n     \
    \           max_divisor = i\n            }\n        }\n    }\n    \n    return\
    \ max_divisor", "    if n == 0 {\n        return 0\n    }\n\n    let logBase =\
    \ Int(Float(log10(Float(n))))\n    var maxDivisor = 0\n    var divisor = Int()\n\
    \    divisor = Int(n / 10)\n    if divisor > maxDivisor {\n        maxDivisor\
    \ = divisor\n    }\n    divisor = Int(n % 10)\n    if divisor > maxDivisor {\n\
    \        maxDivisor = divisor\n    }\n    maxDivisor = divisor + 1\n    while\
    \ divisor <= maxDivisor {\n        divisor = Int(n / divisor)\n        if divisor\
    \ > maxDivisor {\n            maxDivisor = divisor\n        }\n        divisor\
    \ = Int(n % divisor)\n        if divisor > maxDivisor {\n            maxDivisor\
    \ = divisor\n        }\n    }\n    if divisor > maxDivisor {\n        maxDivisor\
    \ = divisor\n    }\n    return maxDivisor", "    // Find the first even divisor\
    \ greater than or equal to n\n    for divisor in 1...Int(n/2){\n        if n %\
    \ divisor == 0 {\n            return divisor\n        }\n    }\n    return n",
  "    // find the first divisor of n that is smaller than n\n    var d : Int? = nil\n\
    \    if n % 2 == 1 {\n        d = 2\n    } else {\n        d = 1\n        while\
    \ n % d == 0 {\n            d += 1\n        }\n    }\n\n    // find the largest\
    \ number that divides n evenly, smaller than n\n    // if d is not nil, then n\
    \ is not a divisor of n\n    if let d = d {\n        // if d is odd, then n is\
    \ a divisor of n, otherwise n is not a divisor of n\n        if d % 2 == 1 {\n\
    \            n /= 2\n        }\n    }\n\n    return n", "    var result: Int =\
    \ 0\n    let maxDivisor = sqrt(n)\n    for d in divisors(n) {\n        if d >\
    \ maxDivisor {\n            result = d\n            break\n        }\n    }\n\
    \    return result", "    var largest = 1\n    for divisor in 1..n {\n       \
    \ if n % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest", "    let nums\
    \ = [1, 2, 3, 5]\n    let rev = nums.reverse()\n    let a = rev.firstIndex(where:\
    \ { (item) -> Bool in\n        return (item % n == 0)\n    })\n    if a != rev.endIndex\
    \ {\n        return rev[a]\n    } else {\n        return -1\n    }", "    if n\
    \ < 2 {\n        return 0\n    }\n    var max_divisor = 0\n    for divisor in\
    \ 1..n {\n        if n%divisor == 0 {\n            if max_divisor == 0 {\n   \
    \             max_divisor = divisor\n            } else {\n                max_divisor\
    \ = min(max_divisor, divisor)\n            }\n        }\n    }\n    return max_divisor",
  "    var largestDivisor: Int = 0\n\n    for divisor in 1...n {\n        if n%divisor\
    \ == 0 {\n            largestDivisor = divisor\n            break\n        }\n\
    \    }\n    return largestDivisor", "    let mut largest_divisor = 0\n    for\
    \ divisor in divisors() {\n        if n % divisor == 0 {\n            if largest_divisor\
    \ == 0 {\n                largest_divisor = divisor\n            } else {\n  \
    \              if largest_divisor > divisor {\n                    largest_divisor\
    \ = divisor\n                }\n            }\n        }\n    }\n    return largest_divisor",
  "\t// we iterate from 1 to n (exclusive) to find the greatest divisor\n\tvar maxDivisor:\
    \ Int = 0\n\tfor i := 1; i < n; i++ {\n\t\tif n / i == 0 {\n\t\t\tif maxDivisor\
    \ == 0 || maxDivisor > i {\n\t\t\t\tmaxDivisor = i\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ maxDivisor", "    var largest_divisor = 0\n    if n > 1 {\n        for n in\
    \ 1...n {\n            if n % n == 0 {\n                largest_divisor = n\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return largest_divisor", "    var maxDivisor = 1\n    for divisor in 1...n\
    \ {\n        if n % (divisor * divisor) == 0 {\n            maxDivisor = divisor\n\
    \        }\n    }\n    return maxDivisor", "    guard n > 0 else {\n        return\
    \ 0\n    }\n    guard n % 2 == 0 else {\n        return n / 2\n    }\n    if n\
    \ % 4 == 0 {\n        return n / 4\n    }\n    return largest_divisor(n / 2)",
  "    // find the largest number that divides n evenly\n    let maxDivr = n.toInt()\n\
    \    // find the lowest multiple of n that divides evenly to maxDivr\n    let\
    \ lowestMultipleOfDivr = (n * maxDivr).rounded(.down)\n    // find the highest\
    \ multiple of n that divides evenly to maxDivr\n    let highestMultipleOfDivr\
    \ = ((n * maxDivr).rounded(.up))\n    return lowestMultipleOfDivr + (highestMultipleOfDivr\
    \ - 1)", "    // Find the largest divisor of n that is less than or equal to n.\n\
    \    if n < 0 {\n        return 0\n    }\n\n    // If n is even, divide it by\
    \ 2. If n is odd, divide it by 3 then by 4.\n    // Then repeat the process by\
    \ dividing the number by every odd divisor less than or equal to n.\n    for divisor\
    \ in 2...Int(n/2) {\n        // While the number divides evenly, keep dividing\
    \ it by every odd divisor less than or equal to n.\n        while n % divisor\
    \ == 0 {\n            n /= divisor\n        }\n    }\n\n    // Return the largest\
    \ divisor of n that is less than or equal to n.\n    return n", "  if n <= 1 {\n\
    \    return 1\n  }\n  var max_div = 1\n  for max_div in 1...n {\n    if n % max_div\
    \ == 0 {\n      return max_div\n    }\n  }\n  return n", "    var largestDivisor\
    \ = 0\n\n    for _ in 0..<n {\n        if n%2 == 0 {\n            if n >= largestDivisor\
    \ {\n                largestDivisor = n\n            }\n        }\n        n /=\
    \ 2\n    }\n\n    return largestDivisor", "\tassert(n >= 2)\n\tvar largest = 0\n\
    \tfor i := 2; i < n; i++ {\n\t\tlet x = sqrt(Double(i))\n\t\tif x != Int(i) {\n\
    \t\t\tlargest = i\n\t\t\tbreak\n\t\t}\n\t}\n\tassert(largest != n)\n\treturn largest",
  "    guard n >= 1 else { return n }\n    return n/2", "\treturn largest_divisor_with_remainder(n,\
    \ 0)", "    if n < 2 {\n        return 0\n    }\n    var max_divisor = n - 1\n\
    \    for divisor in stride(from: 1, through: n, by: 2) {\n        if n % divisor\
    \ == 0 {\n            if max_divisor < divisor {\n                max_divisor\
    \ = divisor\n            }\n        }\n    }\n    return max_divisor", "    var\
    \ maxDivisor: Int = 0\n    for d in 2...n {\n        if n % d == 0 {\n       \
    \     if d > maxDivisor {\n                maxDivisor = d\n            }\n   \
    \     }\n    }\n    return maxDivisor", "    var maxDivisor = Int(n) / 2\n   \
    \ if maxDivisor == 1 {\n        return 0\n    }\n\n    var sum = 0\n\n    while\
    \ maxDivisor % 2 == 0 {\n        sum += maxDivisor\n        maxDivisor = Int(maxDivisor)\
    \ / 2\n    }\n\n    return sum + maxDivisor", "    var largest = 1\n    var largestDivisor\
    \ = 2\n    var largestFactor = largestDivisor\n    for i : Int in 1 ..< n {\n\
    \        for j : Int in 1 ..< n {\n            largestDivisor = j\n          \
    \  if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ largestDivisor > n / largestFactor {\n            largestFactor = largestDivisor\n\
    \            largest = i\n        }\n    }\n    return largest", "    if n ==\
    \ 0 {\n        return -1\n    }\n\n    let max_divisor: Int = n\n    for i in\
    \ 2...max_divisor {\n        if n % i == 0 {\n            max_divisor = i\n  \
    \      }\n    }\n    return max_divisor", "  if n == 1 {\n    return 1\n  }\n\
    \  \n  var max_div = divisor(n)\n  var div = 1\n  var prev_div = 1\n  \n  for\
    \ div <= max_div {\n    if n % div == 0 {\n      prev_div = div\n      break\n\
    \    }\n  }\n  \n  if prev_div < max_div {\n    return prev_div\n  }\n  \n  if\
    \ n % (prev_div * 2) == 0 {\n    return prev_div * 2\n  }\n  \n  if n % (prev_div\
    \ * 3) == 0 {\n    return prev_div * 3\n  }\n  \n  return prev_div * 4", "\treturn\
    \ largestDivisor(n, nil)", '    return largest_divisor(n)', "  var divisor = 1\n\
    \  var remainder = n - 1\n\n  while remainder > 0 && divisor <= n {\n    divisor\
    \ = divisor + 1\n    remainder = remainder / divisor\n  }\n\n  return divisor",
  "    // 1\n    if n < 2 {\n        return n\n    }\n\n    // 2\n    if n % 2 ==\
    \ 0 {\n        return n\n    }\n\n    // 3\n    if n % 3 == 0 {\n        return\
    \ n\n    }\n\n    // 4\n    if n % 5 == 0 {\n        return n\n    }\n\n    //\
    \ 5\n    if n % 7 == 0 {\n        return n\n    }\n\n    // 6\n    if n % 11 ==\
    \ 0 {\n        return n\n    }\n\n    // 7\n    if n % 13 == 0 {\n        return\
    \ n\n    }\n\n    // 8\n    if n % 17 == 0 {\n        return n\n    }\n\n    //\
    \ 9\n    if n % 19 == 0 {\n        return n\n    }\n\n    // 10\n    if n % 23\
    \ == 0 {\n        return n\n    }\n\n    // 11\n    if n % 29 == 0 {\n       \
    \ return n\n    }\n\n    // 12\n    if n % 31 == 0 {\n        return n\n    }\n\
    \n    // 13\n    if n % 37 == 0 {\n        return n\n    }\n\n    // 14\n    if\
    \ n % 41 == 0 {\n        return n\n    }\n\n    // 15\n    if n % 43 == 0 {\n\
    \        return n\n    }\n\n    // 16\n    if n % 47 == 0 {\n        return n\n\
    \    }\n\n    // 17\n    if n % 53 == 0 {\n        return n\n    }\n\n    // 18\n\
    \    if n % 59 == 0 {\n        return n\n    }\n\n    // 19\n    if n % 61 ==\
    \ 0 {\n        return n\n    }\n\n    // 20\n    if n % 67 == 0 {\n        return\
    \ n\n    }\n\n    // 21\n    if n % 71 == 0:\n        return n\n    }\n\n    //\
    \ 22\n    if n % 73 == 0 {\n        return n\n    }\n\n    // 23\n    if n % 79\
    \ == 0 {\n        return n\n    }\n\n    // 24\n    if n % 83 == 0 {\n       \
    \ return n\n    }\n\n    // 25\n    if n % 89 == 0 {\n        return n\n    }\n\
    \n    // 26\n    if n % 97 == 0 {\n        return n\n    }\n\n    // 27\n    if\
    \ n % 101 == 0 {\n        return n\n    }\n\n    // 28\n    if n % 103 == 0 {\n\
    \        return n\n    }\n\n    // 29\n    if n % 105 == 0 {\n        return n\n\
    \    }\n\n    // 30\n    if n % 107 == 0 {\n        return n\n    }\n\n    //\
    \ 31\n    if n % 109 == 0 {\n        return n\n    }\n\n    // 32\n    if n %\
    \ 111 == 0 {\n        return n\n    }\n\n    // 33\n    if n % 113 == 0 {\n  \
    \      return n\n    }\n\n    // 34\n    if n % 115 == 0 {\n        return n\n\
    \    }\n\n    // 35\n    if n % 117 == 0 {\n        return n\n    }\n\n    //\
    \ 36\n    if n % 119 == 0 {\n        return n\n    }\n\n    // 37\n    if n %\
    \ 121 == 0 {\n        return n\n    }", "    // TODO: Improve runtime of this\
    \ function\n    // See https://discuss.leetcode.com/topic/3030/java-solution-to-the-problem-of-finding-the-number-that-has-the-greatest-factor-that-is-less-than-the-number-given\n\
    \    var largest_divisor = 0\n    for divider in 1...n {\n        if n % divider\
    \ == 0 {\n            if divider > largest_divisor {\n                largest_divisor\
    \ = divider\n            }\n        }\n    }\n    return largest_divisor", " \
    \   var maxDivisor = n / 2\n    var divisorFound = false\n    for divisor in stride(from:\
    \ 1, to: n, by: 2) {\n        if n % divisor == 0 {\n            maxDivisor =\
    \ divisor\n            divisorFound = true\n            break\n        }\n   \
    \ }\n\n    if divisorFound {\n        return maxDivisor\n    }\n\n    return n",
  '    return largest_divisor(n, isEven: n == 0)', '    return n.max(divisor_less_than_or_equal_to:
    n)', "    var max_divisor = 0\n\n    // find max_divisor < n\n    for i in 0..<n\
    \ {\n        if n%i == 0 {\n            max_divisor = i\n        }\n    }\n\n\
    \    return max_divisor", '    return largestDivisor(n)', "\tvar result : Int\
    \ = 0\n\t\n\tfor i : Int = 2; i <= n; i++ {\n\t\tif i % 2 == 0 {\n\t\t\tcontinue\n\
    \t\t}\n\t\t\n\t\tif n % i == 0 {\n\t\t\tif result == 0 {\n\t\t\t\tresult = i\n\
    \t\t\t} else {\n\t\t\t\tresult = min(result, i)\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ result", "    // https://en.wikipedia.org/wiki/Divisor#Number_of_divisors\n\
    \    // Divide by 2, until you're left with 1 or n. Repeat until n or 1 are left.\n\
    \    let divisor = 2\n    let remainder = n % divisor\n    while remainder > 0\
    \ {\n        divisor = divisor + 1\n        remainder = n % divisor\n    }\n \
    \   return divisor", '    return largest_divisor2(n: n, d: 0)', "  var largestDivisor\
    \ = -1\n\n  for d in divisors {\n    if n / d != 0 {\n      largestDivisor = d\n\
    \    }\n  }\n\n  return largestDivisor", "    var num = 1\n    for _ in 1..<n\
    \ {\n        if n % num == 0 {\n            num += 1\n        }\n    }\n    return\
    \ num", '    return largest_divisors(n)[0]', "    var largest_divisor = 0\n  \
    \  for num in 1...n {\n        if num % 2 == 0 && num != n {\n            largest_divisor\
    \ = num\n        }\n    }\n    return largest_divisor", "    var max_div = -1\n\
    \    for div in 1...n {\n        if (n / div) % 2 == 0 {\n            if max_div\
    \ < div {\n                max_div = div\n            }\n        }\n    }\n  \
    \  return max_div", "    var largest = 0\n\n    for d in 2..Int(ceil(sqrt(Double(n))))\
    \ + 1 {\n        var factor = 0\n\n        if d % 2 != 0 {\n            factor\
    \ = d\n        } else {\n            for _ in 0..<n / d {\n                factor\
    \ += 1\n            }\n        }\n\n        if factor > largest {\n          \
    \  largest = factor\n        }\n    }\n\n    return largest", "    if n == 0 {\n\
    \        return 0\n    }\n    \n    let mut max_divisor = 1\n    \n    let mut\
    \ q = n / 2\n    while q > 0 {\n        if q % 2 == 0 {\n            max_divisor\
    \ = q\n        }\n        q = q / 2\n    }\n    \n    if max_divisor % n == 0\
    \ {\n        max_divisor = max_divisor * n + 1\n    }\n    \n    return max_divisor",
  "    // return 0 if n is 0\n    if n == 0 {\n        return 0\n    }\n\n    var\
    \ largestDivisor = 1\n\n    // find largest divisor until n is 1 or n is smaller\
    \ than 1\n    for divisor in 2...n {\n        if n % divisor == 0 {\n        \
    \    largestDivisor = divisor\n        }\n    }\n\n    return largestDivisor",
  "\tlet a = largest_divisor_of_primes_below(n: n)\n\treturn a", "    if n < 2 { return\
    \ n }\n    var maxDivisor = n / 2\n    for _ in 1..<n {\n        if n % maxDivisor\
    \ == 0 {\n            maxDivisor = n / maxDivisor\n        } else {\n        \
    \    break\n        }\n    }\n    return maxDivisor", "\treturn largest_divisors(n).first",
  '    return n.reduce(0) { $0 > $1 ? ($0) : ($1) }', "    if n <= 1 {\n        return\
    \ n\n    }\n    var largestDivisor = 1\n    var lastDivisor = 1\n    for divisor\
    \ in 2..Int(ceil(log2(n))) + 1 {\n        if n % divisor == 0 {\n            lastDivisor\
    \ = divisor\n            largestDivisor = divisor\n        }\n    }\n    if lastDivisor\
    \ != 1 {\n        largestDivisor = lastDivisor\n    }\n    return largestDivisor",
  "    let remainder = n % (Int(NDIVISORS) - 1)\n    return Int((remainder % Int(NDIVISORS))\
    \ + 1)", "    // Return largest divisor < n\n    // If n is 1, then 0 is the largest\
    \ divisor.\n    if n == 1 {\n        return 0\n    }\n    // If n is even, return\
    \ 1 + largest divisor < n\n    // If n is odd, return 1 + largest divisor > n\n\
    \    // If n is even, return 1 + largest divisor < n\n    // If n is odd, return\
    \ 1 + largest divisor > n\n    // Example: n = 4\n    // Case 1: n = 4 => 3\n\
    \    // Case 2: n = 3 => 1\n    // Case 3: n = 2 => 1\n    // Case 4: n = 1 =>\
    \ 0\n    // Case 5: n = 5 => 1\n    // Case 6: n = 6 => 2\n    // Case 7: n =\
    \ 7 => 2\n    // Case 8: n = 8 => 2\n    // Case 9: n = 9 => 3\n    // Case 10:\
    \ n = 10 => 3\n    // Case 11: n = 11 => 3\n    // Case 12: n = 12 => 3\n    //\
    \ Case 13: n = 13 => 3\n    // Case 14: n = 14 => 3\n    // Case 15: n = 15 =>\
    \ 5\n    var largest_divisor = 0\n    for divisor in stride(from: n, through:\
    \ 1, by: -1) {\n        if n % divisor == 0 {\n            if divisor > largest_divisor\
    \ {\n                largest_divisor = divisor\n            }\n        } else\
    \ {\n            break\n        }\n    }\n    return largest_divisor", "    var\
    \ biggest = -1\n    for divisor in stride(from: n, to: 1, by: 1) {\n        if\
    \ n % divisor == 0 {\n            if biggest < 0 {\n                biggest =\
    \ divisor\n            } else {\n                biggest = max(biggest, divisor)\n\
    \            }\n        }\n    }\n    return biggest", '    return largest_divisor_with_limit(n:
    n, limit: 1)', '  return largestDivisor(n)', "    if n%2 == 0 {\n        return\
    \ n\n    }\n\n    for i in 3...n {\n        if n%i == 0 {\n            return\
    \ i\n        }\n    }\n\n    return n", "    // write your code in Swift 4.2,\
    \ but this should work fine in Swift 4.1\n    if n < 2 {\n        return 0\n \
    \   }\n\n    func div(n: Int) -> Int {\n        if n < 2 {\n            return\
    \ 1\n        }\n\n        if n % 2 == 0 {\n            return div(n / 2)\n   \
    \     } else {\n            return div(3 * n + 1) + (n - 1)\n        }\n    }\n\
    \n    return div(n)", "    if n < 2 {\n        return 0\n    }\n    if n%2==0\
    \ {\n        return n\n    }\n\n    var max_divisor: Int = 0\n    var divisor_count\
    \ = 1\n    for divisor in 1...n {\n        if n%divisor==0 {\n            divisor_count++\n\
    \            if divisor_count > max_divisor {\n                max_divisor = divisor_count\n\
    \            }\n        }\n    }\n    return max_divisor", "\tlet mut max_divisor\
    \ = 0\n\tfor divisor in 1..=n {\n\t\tif n % divisor == 0 {\n\t\t\tif divisor >\
    \ max_divisor {\n\t\t\t\tmax_divisor = divisor\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ max_divisor"]
stop_tokens:
- "\n}"
