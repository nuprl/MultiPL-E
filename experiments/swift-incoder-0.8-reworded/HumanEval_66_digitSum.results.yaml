language: swift
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    guard s.count > 0 else {\n     \
    \   return 0\n    }\n    var sum = 0\n    let chars = s.characters\n    for index\
    \ in 0..<chars.count {\n        if chars[index] > 32 {\n            sum += chars[index]\
    \ - 32\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpilzvi5nj.swift:23:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpilzvi5nj.swift:25:25:\
    \ error: binary operator '>' cannot be applied to operands of type 'Character'\
    \ and 'Int'\n        if chars[index] > 32 {\n           ~~~~~~~~~~~~ ^ ~~\n/tmp/tmpilzvi5nj.swift:25:25:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n        if chars[index] > 32 {\n                        ^\n/tmp/tmpilzvi5nj.swift:26:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            sum += chars[index] - 32\n                        ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet result = 0\n\n\tfor c in s {\n\
    \t\tif c.isUpper() {\n\t\t\tresult += Int(c.unicodeScalars.first!.value)!\n\t\t\
    }\n\t}\n\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpt8fdgxi6.swift:22:8: error: value of type 'Character' has no member\
    \ 'isUpper'\n                if c.isUpper() {\n                   ~ ^~~~~~~\n\
    /tmp/tmpt8fdgxi6.swift:23:18: error: missing argument label 'exactly:' in call\n\
    \                        result += Int(c.unicodeScalars.first!.value)!\n     \
    \                                 ^\n                                      exactly:\
    \ \n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map { Int($0) }.fold(0)\
    \ { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp7lof_g9a.swift:19:20: error: no exact matches in call to initializer\
    \ \n    return s.map { Int($0) }.fold(0) { $0 + $1 }\n                   ^\n/tmp/tmp7lof_g9a.swift:19:20:\
    \ note: found candidate with type '(Float16) -> Int'\n    return s.map { Int($0)\
    \ }.fold(0) { $0 + $1 }\n                   ^\n/tmp/tmp7lof_g9a.swift:19:20: note:\
    \ found candidate with type '(Float) -> Int'\n    return s.map { Int($0) }.fold(0)\
    \ { $0 + $1 }\n                   ^\n/tmp/tmp7lof_g9a.swift:19:20: note: found\
    \ candidate with type '(Double) -> Int'\n    return s.map { Int($0) }.fold(0)\
    \ { $0 + $1 }\n                   ^\n/tmp/tmp7lof_g9a.swift:19:20: note: found\
    \ candidate with type '(Float80) -> Int'\n    return s.map { Int($0) }.fold(0)\
    \ { $0 + $1 }\n                   ^\n/tmp/tmp7lof_g9a.swift:19:20: note: found\
    \ candidate with type '(Builtin.Int64) -> Int'\n    return s.map { Int($0) }.fold(0)\
    \ { $0 + $1 }\n                   ^\n/tmp/tmp7lof_g9a.swift:19:20: note: found\
    \ candidate with type '(Builtin.Word) -> Int'\n    return s.map { Int($0) }.fold(0)\
    \ { $0 + $1 }\n                   ^\n/tmp/tmp7lof_g9a.swift:19:20: note: found\
    \ candidate with type '(String) -> Int?'\n    return s.map { Int($0) }.fold(0)\
    \ { $0 + $1 }\n                   ^\n/tmp/tmp7lof_g9a.swift:19:30: error: reference\
    \ to member 'fold' cannot be resolved without a contextual type\n    return s.map\
    \ { Int($0) }.fold(0) { $0 + $1 }\n                             ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (acc, c) ->\
    \ (Int) -> Int in\n        guard let c = Int(c) else { return acc }\n        return\
    \ acc + Int(c.toIntUpper())\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwnz8ub87.swift:19:38: error: declared closure result '(Int) ->\
    \ Int' is incompatible with contextual type 'Int'\n    return s.reduce(0) { (acc,\
    \ c) -> (Int) -> Int in\n                                     ^~~~~~~~~~~~\n \
    \                                    Int\n/tmp/tmpwnz8ub87.swift:20:27: error:\
    \ cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n        guard let c = Int(c) else { return acc }\n \
    \                         ^\n"
  stdout: ''
  timestamp: 1659980072
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let nums = s.unicodeScalars.filter\
    \ { $0.isDigit() }\n    return nums.reduce(Int.max, { $0 + $1.value })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp82miq3gu.swift:19:45: error: value of type 'Unicode.Scalar' has\
    \ no member 'isDigit'\n    let nums = s.unicodeScalars.filter { $0.isDigit() }\n\
    \                                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(Character(c).unicodeScalars.filter({ $0.isUppercase() }).first!.value)!\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpg28lu65h.swift:21:20: error: missing argument label 'exactly:'\
    \ in call\n        sum += Int(Character(c).unicodeScalars.filter({ $0.isUppercase()\
    \ }).first!.value)!\n                   ^\n                   exactly: \n/tmp/tmpg28lu65h.swift:21:60:\
    \ error: value of type 'Unicode.Scalar' has no member 'isUppercase'\n        sum\
    \ += Int(Character(c).unicodeScalars.filter({ $0.isUppercase() }).first!.value)!\n\
    \                                                        ~~ ^~~~~~~~~~~\n/tmp/tmpg28lu65h.swift:21:30:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \      sum += Int(Character(c).unicodeScalars.filter({ $0.isUppercase() }).first!.value)!\n\
    \                             ^\n                             extendedGraphemeClusterLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    var i: Int = 0\n\
    \    for i = s.startIndex..<s.endIndex where s[i].isDigit() {\n        sum +=\
    \ s[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzb_fh7zp.swift:21:11: error: expected 'in' after for-each pattern\n\
    \    for i = s.startIndex..<s.endIndex where s[i].isDigit() {\n          ^\n/tmp/tmpzb_fh7zp.swift:21:11:\
    \ error: expected Sequence expression for for-each loop\n    for i = s.startIndex..<s.endIndex\
    \ where s[i].isDigit() {\n          ^\n/tmp/tmpzb_fh7zp.swift:21:50: error: reference\
    \ to member 'isDigit' cannot be resolved without a contextual type\n    for i\
    \ = s.startIndex..<s.endIndex where s[i].isDigit() {\n                       \
    \                          ^\n"
  stdout: ''
  timestamp: 1659980072
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var total = 0\n    for char in s.unicodeScalars\
    \ {\n        if char.value > 128 {\n            return total\n        }\n    \
    \    total += char.value\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp0864gpws.swift:24:23: error: cannot convert value of type 'UInt32'\
    \ to expected argument type 'Int'\n        total += char.value\n             \
    \         ^\n                 Int(      )\n"
  stdout: ''
  timestamp: 1659980072
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int(UnicodeScalar($1)!.value\
    \ - UnicodeScalar($0)!.value) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpdy57j3g5.swift:19:35: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int(UnicodeScalar($1)!.value - UnicodeScalar($0)!.value)\
    \ }\n                                  ^\nSwift.Unicode.Scalar:5:23: note: candidate\
    \ expects value of type 'UInt32' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ v: UInt32)\n                      ^\nSwift.Unicode.Scalar:6:23:\
    \ note: candidate expects value of type 'UInt16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    @inlinable public init?(_ v: UInt16)\n             \
    \         ^\nSwift.Unicode.Scalar:2:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n    @inlinable\
    \ public init?(_ description: String)\n                      ^\nSwift.Unicode.Scalar:2:23:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    @inlinable public init?(_ v: Int)\n                \
    \      ^\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var total = 0\n    for idx in 0..<s.count\
    \ {\n        let c = s[idx].unicodeScalars.first!\n        if c > 127 { continue\
    \ }\n        total += c\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpcau8ni3o.swift:21:17: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let c = s[idx].unicodeScalars.first!\n\
    \                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpcau8ni3o.swift:22:14: error: referencing operator function\
    \ '>' on 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if c > 127 { continue }\n             ^\nSwift.BinaryInteger:1:11: note:\
    \ where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n          ^\n/tmp/tmpcau8ni3o.swift:23:18:\
    \ error: cannot convert value of type 'Unicode.Scalar' to expected argument type\
    \ 'Int'\n        total += c\n                 ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.foldLeft(0) { (result,\
    \ n: Char) in\n        let sum = result + Int(n)\n        if sum > 127 { return\
    \ sum - 256 }\n        return sum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphc746r1v.swift:19:40: error: cannot find type 'Char' in scope\n\
    \    return s.foldLeft(0) { (result, n: Char) in\n                           \
    \            ^~~~\n/tmp/tmphc746r1v.swift:19:14: error: value of type 'String'\
    \ has no member 'foldLeft'\n    return s.foldLeft(0) { (result, n: Char) in\n\
    \           ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = Int()\n    for index in\
    \ stride(from: 0, to: s.count, by: 1) {\n        let letter = s[index].unicodeScalars\n\
    \            .filter { $0.isUppercase }\n            .map({ $0.code })\n     \
    \       .sum()\n        sum += letter\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphla2ryfd.swift:22:26: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n            .filter { $0.isUppercase }\n          \
    \            ~~ ^~~~~~~~~~~\n/tmp/tmphla2ryfd.swift:24:14: error: value of type\
    \ 'Array<_>' has no member 'sum'\n            .sum()\n             ^~~\n/tmp/tmphla2ryfd.swift:23:23:\
    \ error: value of type 'Unicode.Scalar' has no member 'code'\n            .map({\
    \ $0.code })\n                   ~~ ^~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map { $0 as? Int8 }.filter\
    \ { $0 >= 48 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfixp5a1u.swift:19:23: error: cannot convert value of type 'Int8?'\
    \ to closure result type 'Int'\n    return s.map { $0 as? Int8 }.filter { $0 >=\
    \ 48 }.reduce(0, +)\n                   ~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += c.unicodeScalars.upper\n       \
    \ } else {\n            sum += c.unicodeScalars.lower\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpmgzeo7k7.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpmgzeo7k7.swift:22:37:\
    \ error: value of type 'Character.UnicodeScalarView' (aka 'String.UnicodeScalarView')\
    \ has no member 'upper'\n            sum += c.unicodeScalars.upper\n         \
    \          ~~~~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpmgzeo7k7.swift:24:37: error: value\
    \ of type 'Character.UnicodeScalarView' (aka 'String.UnicodeScalarView') has no\
    \ member 'lower'\n            sum += c.unicodeScalars.lower\n                \
    \   ~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659980072
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n\n    return digitSum(s.codeUnits, s.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpw3rogbqv.swift:23:36: error: extra argument in call\n    return\
    \ digitSum(s.codeUnits, s.count)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpw3rogbqv.swift:23:23: error: value of type 'String' has no member 'codeUnits'\n\
    \    return digitSum(s.codeUnits, s.count)\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980072
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return sum(s.uppercased().ascii)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpl9nsyrl_.swift:19:12: error: cannot find 'sum' in scope\n    return\
    \ sum(s.uppercased().ascii)\n           ^~~\n/tmp/tmpl9nsyrl_.swift:19:31: error:\
    \ value of type 'String' has no member 'ascii'\n    return sum(s.uppercased().ascii)\n\
    \               ~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659980072
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        (sum:\
    \ Int, ch: Character) in\n        let c = (ch as Int)\n        return (sum + c,\
    \ c)\n    }.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpri0b2su7.swift:21:21: error: cannot convert value of type 'Character'\
    \ to type 'Int' in coercion\n        let c = (ch as Int)\n                 ~~~^~~~~~\n\
    /tmp/tmpri0b2su7.swift:23:7: error: value of type 'Int' has no member '0'\n  \
    \  }.0\n~~~~~ ^\n"
  stdout: ''
  timestamp: 1659980072
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.reduce(0, +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpi4p3nfu8.swift:19:22: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, String.Element) throws -> Int' (aka\
    \ '(Int, Character) throws -> Int')\n  return s.reduce(0, +)\n               \
    \      ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.foldLeft(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpit39pr14.swift:19:14: error: value of type 'String' has no member\
    \ 'foldLeft'\n    return s.foldLeft(0) { $0 + Int($1) }\n           ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tvar sum = 0\n\ts.unicodeScalars.filter({\
    \ $0.value > CharacterSet.decimalDigits.value }).forEach({ sum += $0.value })\n\
    \treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2hfxgrge.swift:20:39: error: cannot find 'CharacterSet' in scope\n\
    \        s.unicodeScalars.filter({ $0.value > CharacterSet.decimalDigits.value\
    \ }).forEach({ sum += $0.value })\n                                          \
    \   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8f9syae3.swift:19:28: error: no exact matches in call to initializer\
    \ \n        return s.reduce(0) { $0 + Int($1) }\n                            \
    \      ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0){ $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2frebkya.swift:19:30: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0){ $0 + Int($1) }\n                             ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = reduce(s.toInt(), 0,\
    \ { $0 + Int(String($1)) })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_bby6lol.swift:19:18: error: cannot find 'reduce' in scope\n  \
    \  let result = reduce(s.toInt(), 0, { $0 + Int(String($1)) })\n             \
    \    ^~~~~~\n/tmp/tmp_bby6lol.swift:19:46: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n    let result = reduce(s.toInt(),\
    \ 0, { $0 + Int(String($1)) })\n                                             ^\n\
    /tmp/tmp_bby6lol.swift:19:46: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    let result = reduce(s.toInt(), 0, { $0\
    \ + Int(String($1)) })\n                                             ^\n     \
    \                                        (               ?? <#default value#>)\n\
    /tmp/tmp_bby6lol.swift:19:46: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    let result = reduce(s.toInt(), 0,\
    \ { $0 + Int(String($1)) })\n                                             ^\n\
    \                                                            !\n/tmp/tmp_bby6lol.swift:19:27:\
    \ error: value of type 'String' has no member 'toInt'\n    let result = reduce(s.toInt(),\
    \ 0, { $0 + Int(String($1)) })\n                        ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(UInt8(c.unicodeScalars.withUnsafeBufferPointer { buf: UnsafeBufferPointer(start:\
    \ UnsafePointer($0.baseAddress), count: 1) })?.unicodeScalars.first ?? 0)\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphmoin5yz.swift:21:72: error: consecutive statements on a line must\
    \ be separated by ';'\n        sum += Int(UInt8(c.unicodeScalars.withUnsafeBufferPointer\
    \ { buf: UnsafeBufferPointer(start: UnsafePointer($0.baseAddress), count: 1) })?.unicodeScalars.first\
    \ ?? 0)\n                                                                    \
    \   ^\n                                                                      \
    \ ;\n/tmp/tmphmoin5yz.swift:21:72: error: expected expression\n        sum +=\
    \ Int(UInt8(c.unicodeScalars.withUnsafeBufferPointer { buf: UnsafeBufferPointer(start:\
    \ UnsafePointer($0.baseAddress), count: 1) })?.unicodeScalars.first ?? 0)\n  \
    \                                                                     ^\n/tmp/tmphmoin5yz.swift:21:69:\
    \ error: cannot find 'buf' in scope\n        sum += Int(UInt8(c.unicodeScalars.withUnsafeBufferPointer\
    \ { buf: UnsafeBufferPointer(start: UnsafePointer($0.baseAddress), count: 1) })?.unicodeScalars.first\
    \ ?? 0)\n                                                                    ^~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value > CharacterSet(UnicodeScalar(\"9\").value).value {\n \
    \           sum += c.value - CharacterSet(UnicodeScalar(\"0\").value).value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyjro9l34.swift:21:22: error: cannot find 'CharacterSet' in scope\n\
    \        if c.value > CharacterSet(UnicodeScalar(\"9\").value).value {\n     \
    \                ^~~~~~~~~~~~\n/tmp/tmpyjro9l34.swift:22:30: error: cannot find\
    \ 'CharacterSet' in scope\n            sum += c.value - CharacterSet(UnicodeScalar(\"\
    0\").value).value\n                             ^~~~~~~~~~~~\n/tmp/tmpyjro9l34.swift:22:28:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'Int'\n\
    \            sum += c.value - CharacterSet(UnicodeScalar(\"0\").value).value\n\
    \                           ^\n                   Int(                       \
    \                           )\n/tmp/tmpyjro9l34.swift:22:22: error: cannot convert\
    \ value of type 'UInt32' to expected argument type 'Int'\n            sum += c.value\
    \ - CharacterSet(UnicodeScalar(\"0\").value).value\n                     ^\n \
    \                  Int(   )\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reverse().reduce(0, { $0\
    \ + Int($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgpfmfwju.swift:19:14: error: value of type 'String' has no member\
    \ 'reverse'\n    return s.reverse().reduce(0, { $0 + Int($1) })\n           ~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, b in s.characters\
    \ {\n        if b >= '0' && b <= '9' {\n            sum += Int(b) - Int(Character(b))\
    \ // Convert to int\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpmbeqcfyd.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for _, b in s.characters {\n         ^\n/tmp/tmpmbeqcfyd.swift:20:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, b in s.characters\
    \ {\n         ^\n/tmp/tmpmbeqcfyd.swift:21:17: error: single-quoted string literal\
    \ found, use '\"'\n        if b >= '0' && b <= '9' {\n                ^~~\n  \
    \              \"0\"\n/tmp/tmpmbeqcfyd.swift:21:29: error: single-quoted string\
    \ literal found, use '\"'\n        if b >= '0' && b <= '9' {\n               \
    \             ^~~\n                            \"9\"\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = Int()\n    var i: Int\
    \ = 0\n    while i < s.characters.count {\n        if s.characters[i] >= 'A' &&\
    \ s.characters[i] <= 'Z' {\n            sum += Int(s.characters[i] - 'A' + 10)\n\
    \        } else if s.characters[i] >= 'a' && s.characters[i] <= 'z' {\n      \
    \      sum += Int(s.characters[i] - 'a' + 10)\n        } else {\n            sum\
    \ += s.characters[i]\n        }\n        i += 1\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2ablw4u3.swift:22:31: error: single-quoted string literal found,\
    \ use '\"'\n        if s.characters[i] >= 'A' && s.characters[i] <= 'Z' {\n  \
    \                            ^~~\n                              \"A\"\n/tmp/tmp2ablw4u3.swift:22:57:\
    \ error: single-quoted string literal found, use '\"'\n        if s.characters[i]\
    \ >= 'A' && s.characters[i] <= 'Z' {\n                                       \
    \                 ^~~\n                                                      \
    \  \"Z\"\n/tmp/tmp2ablw4u3.swift:23:42: error: single-quoted string literal found,\
    \ use '\"'\n            sum += Int(s.characters[i] - 'A' + 10)\n             \
    \                            ^~~\n                                         \"\
    A\"\n/tmp/tmp2ablw4u3.swift:24:38: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s.characters[i] >= 'a' && s.characters[i] <= 'z'\
    \ {\n                                     ^~~\n                              \
    \       \"a\"\n/tmp/tmp2ablw4u3.swift:24:64: error: single-quoted string literal\
    \ found, use '\"'\n        } else if s.characters[i] >= 'a' && s.characters[i]\
    \ <= 'z' {\n                                                               ^~~\n\
    \                                                               \"z\"\n/tmp/tmp2ablw4u3.swift:25:42:\
    \ error: single-quoted string literal found, use '\"'\n            sum += Int(s.characters[i]\
    \ - 'a' + 10)\n                                         ^~~\n                \
    \                         \"a\"\n/tmp/tmp2ablw4u3.swift:21:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    while i < s.characters.count\
    \ {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2ablw4u3.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s.characters[i]\
    \ >= 'A' && s.characters[i] <= 'Z' {\n           ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i:"
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n    var sum = 0\n    for c in s {\n        sum += (c > 'a' && c < 'z')\
    \ ? c - 'a' + 10 : c - '0'\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe30j_pv9.swift:24:21: error: single-quoted string literal found,\
    \ use '\"'\n        sum += (c > 'a' && c < 'z') ? c - 'a' + 10 : c - '0'\n   \
    \                 ^~~\n                    \"a\"\n/tmp/tmpe30j_pv9.swift:24:32:\
    \ error: single-quoted string literal found, use '\"'\n        sum += (c > 'a'\
    \ && c < 'z') ? c - 'a' + 10 : c - '0'\n                               ^~~\n \
    \                              \"z\"\n/tmp/tmpe30j_pv9.swift:24:43: error: single-quoted\
    \ string literal found, use '\"'\n        sum += (c > 'a' && c < 'z') ? c - 'a'\
    \ + 10 : c - '0'\n                                          ^~~\n            \
    \                              \"a\"\n/tmp/tmpe30j_pv9.swift:24:58: error: single-quoted\
    \ string literal found, use '\"'\n        sum += (c > 'a' && c < 'z') ? c - 'a'\
    \ + 10 : c - '0'\n                                                         ^~~\n\
    \                                                         \"0\"\n/tmp/tmpe30j_pv9.swift:24:47:\
    \ error: binary operator '+' cannot be applied to operands of type '_' and 'Int'\n\
    \        sum += (c > 'a' && c < 'z') ? c - 'a' + 10 : c - '0'\n              \
    \                                ^\nSwift.SIMD:1:11: note: candidate requires\
    \ that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension\
    \ SIMD where Self.Scalar : FloatingPoint {\n          ^\n/tmp/tmpe30j_pv9.swift:24:58:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \        sum += (c > 'a' && c < 'z') ? c - 'a' + 10 : c - '0'\n              \
    \                                           ^\n"
  stdout: ''
  timestamp: 1659980083
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reverse().reduce(0) {\n\
    \        i, acc in\n        return acc + Int(i) - Int(Char.UnicodeScalarLiteralFromInt(Int(i))\
    \ - Int(Char.UnicodeScalarLiteralFromInt(Int(i))) * 10)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpntp9srzc.swift:21:35: error: cannot find 'Char' in scope\n    \
    \    return acc + Int(i) - Int(Char.UnicodeScalarLiteralFromInt(Int(i)) - Int(Char.UnicodeScalarLiteralFromInt(Int(i)))\
    \ * 10)\n                                  ^~~~\n/tmp/tmpntp9srzc.swift:21:82:\
    \ error: cannot find 'Char' in scope\n        return acc + Int(i) - Int(Char.UnicodeScalarLiteralFromInt(Int(i))\
    \ - Int(Char.UnicodeScalarLiteralFromInt(Int(i))) * 10)\n                    \
    \                                                             ^~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let count = countUp(s.unicodeScalars)\n\
    \    return count > 0 ? s.unicodeScalars.reduce(0,+) : 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8goufj0v.swift:19:17: error: cannot find 'countUp' in scope\n \
    \   let count = countUp(s.unicodeScalars)\n                ^~~~~~~\n/tmp/tmp8goufj0v.swift:20:50:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, Unicode.Scalar) throws -> Int'\n    return count > 0 ? s.unicodeScalars.reduce(0,+)\
    \ : 0\n                                                 ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let length = s.characters.count\n\
    \    var result = 0\n    for index in 0..<length {\n        let c = s.characters[index]\n\
    \        let value = Int(String(c).unicodeScalars.filter {$0.value > 128}.map({$0.value}))\n\
    \        result += value!\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmprn69fcpq.swift:19:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = s.characters.count\n                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmprn69fcpq.swift:22:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let c = s.characters[index]\n         \
    \       ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmprn69fcpq.swift:22:19: error: 'characters' is\
    \ unavailable: Please use String directly\n        let c = s.characters[index]\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmprn69fcpq.swift:23:21: error: no exact matches in call to initializer\
    \ \n        let value = Int(String(c).unicodeScalars.filter {$0.value > 128}.map({$0.value}))\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got '[UInt32]')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got '[UInt32]')\n    public init(_ source: Float)\n      \
    \     ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got '[UInt32]')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got '[UInt32]')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got '[UInt32]')\n  \
    \  public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got '[UInt32]')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: ca"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c.isUpper {\n            sum += c.value\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpnfi7nshx.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnfi7nshx.swift:21:14:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if c.isUpper\
    \ {\n           ~ ^~~~~~~\n/tmp/tmpnfi7nshx.swift:22:22: error: value of type\
    \ 'Character' has no member 'value'\n            sum += c.value\n            \
    \       ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    var i = 0\n   \
    \ for c in s.characters {\n        if c >= '0' && c <= '9' {\n            sum\
    \ += Int(c) - '0'\n        } else {\n            i++\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2_ctxbl7.swift:22:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmp2_ctxbl7.swift:22:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmp2_ctxbl7.swift:23:29: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c) - '0'\n\
    \                            ^~~\n                            \"0\"\n/tmp/tmp2_ctxbl7.swift:21:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2_ctxbl7.swift:23:20: error: no exact matches in call\
    \ to initializer \n            sum += Int(c) - '0'\n                   ^\n/tmp/tmp2_ctxbl7.swift:23:20:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \            sum += Int(c) - '0'\n                   ^\n/tmp/tmp2_ctxbl7.swift:23:20:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \            sum += Int(c) - '0'\n                   ^\n/tmp/tmp2_ctxbl7.swift:23:20:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \            sum += Int(c) - '0'\n                   ^\n/tmp/tmp2_ctxbl7.swift:23:20:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \            sum += Int(c) - '0'\n                   ^\n/tmp/tmp2_ctxbl7.swift:23:20:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n            sum += Int(c) - '0'\n                   ^\n/tmp/tmp2_ctxbl7.swift:23:20:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \            sum += Int(c) - '0'\n                   ^\n/tmp/tmp2_ctxbl7.swift:23:29:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \            sum += I"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n    var sum = 0\n    for c in s {\n        sum += Int(c)\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpriijq58_.swift:24:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map { Int($0) }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpcyy36vu0.swift:19:20: error: no exact matches in call to initializer\
    \ \n    return s.map { Int($0) }.reduce(0, +)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = Int(s.characters\n\
    \        .filter { $0 >= 'a' && $0 <= 'z' }.filter { $0 >= 'A' && $0 <= 'Z' })\n\
    \        .map { Int(String($0))! }\n        .reduce(0, +)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwbb81zx0.swift:20:25: error: single-quoted string literal found,\
    \ use '\"'\n        .filter { $0 >= 'a' && $0 <= 'z' }.filter { $0 >= 'A' && $0\
    \ <= 'Z' })\n                        ^~~\n                        \"a\"\n/tmp/tmpwbb81zx0.swift:20:38:\
    \ error: single-quoted string literal found, use '\"'\n        .filter { $0 >=\
    \ 'a' && $0 <= 'z' }.filter { $0 >= 'A' && $0 <= 'Z' })\n                    \
    \                 ^~~\n                                     \"z\"\n/tmp/tmpwbb81zx0.swift:20:59:\
    \ error: single-quoted string literal found, use '\"'\n        .filter { $0 >=\
    \ 'a' && $0 <= 'z' }.filter { $0 >= 'A' && $0 <= 'Z' })\n                    \
    \                                      ^~~\n                                 \
    \                         \"A\"\n/tmp/tmpwbb81zx0.swift:20:72: error: single-quoted\
    \ string literal found, use '\"'\n        .filter { $0 >= 'a' && $0 <= 'z' }.filter\
    \ { $0 >= 'A' && $0 <= 'Z' })\n                                              \
    \                         ^~~\n                                              \
    \                         \"Z\"\n/tmp/tmpwbb81zx0.swift:22:10: error: value of\
    \ type 'Int?' has no member 'reduce'\n        .reduce(0, +)\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659980077
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n\n    for char in s.characters\
    \ {\n        let codePoint = char.unicodeScalars.first!.value // first code point\
    \ is the upper case letter\n        if codePoint > 47 && codePoint < 58 {\n  \
    \          sum += codePoint - '0'\n        } else {\n            sum += (codePoint\
    \ - 'A' + 10) // first code point is the lower case letter\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7dsild.swift:24:32: error: single-quoted string literal found,\
    \ use '\"'\n            sum += codePoint - '0'\n                             \
    \  ^~~\n                               \"0\"\n/tmp/tmp4_7dsild.swift:26:33: error:\
    \ single-quoted string literal found, use '\"'\n            sum += (codePoint\
    \ - 'A' + 10) // first code point is the lower case letter\n                 \
    \               ^~~\n                                \"A\"\n/tmp/tmp4_7dsild.swift:21:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4_7dsild.swift:24:32: error: cannot convert value of\
    \ type 'String' to expected argument type 'UInt32'\n            sum += codePoint\
    \ - '0'\n                               ^\n/tmp/tmp4_7dsild.swift:24:17: error:\
    \ binary operator '+=' cannot be applied to operands of type 'Int' and 'UInt32'\n\
    \            sum += codePoint - '0'\n            ~~~ ^  ~~~~~~~~~~~~~~~\n/tmp/tmp4_7dsild.swift:24:17:\
    \ note: overloads for '+=' exist with these partially matching parameter lists:\
    \ (inout Int, Int)\n            sum += codePoint - '0'\n                ^\n/tmp/tmp4_7dsild.swift:26:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += (codePoint - 'A' + 10) // first code point is the lower\
    \ case letter\n                ^\nSwift.SIMD:1:11: note: candidate requires that\
    \ 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension\
    \ SIMD where Self.Scalar : FloatingPoint {\n          ^\n/tmp/tmp4_7dsild.swift:26:33:\
    \ error: cannot convert value of type 'String' to expected argument type 'UInt32'\n\
    \            sum += (codePoint - 'A' + 10) // first code point is the lower case\
    \ letter\n                                ^\n/tmp/tmp4_7dsild.swift:26:31: error:\
    \ cannot convert value of type 'UInt32' to expected argument type 'Int'\n    \
    \        sum += (codePoint - 'A' + 10) // first code point is the l"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return sum(map(s, toDigit))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzd7iufbs.swift:19:12: error: cannot find 'sum' in scope\n    return\
    \ sum(map(s, toDigit))\n           ^~~\n/tmp/tmpzd7iufbs.swift:19:16: error: cannot\
    \ find 'map' in scope\n    return sum(map(s, toDigit))\n               ^~~\n/tmp/tmpzd7iufbs.swift:19:23:\
    \ error: cannot find 'toDigit' in scope\n    return sum(map(s, toDigit))\n   \
    \                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tsum = 0\n\tfor i in s.characters {\n\
    \t\tif i.isUppercase {\n\t\t\tsum += i.value\n\t\t}\n\t}\n\treturn sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3ucvz0ae.swift:19:2: error: cannot find 'sum' in scope\n      \
    \  sum = 0\n        ^~~\n/tmp/tmp3ucvz0ae.swift:20:13: error: 'characters' is\
    \ unavailable: Please use String directly\n        for i in s.characters {\n \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ucvz0ae.swift:22:4: error: cannot find 'sum' in scope\n        \
    \                sum += i.value\n                        ^~~\n/tmp/tmp3ucvz0ae.swift:22:13:\
    \ error: value of type 'Character' has no member 'value'\n                   \
    \     sum += i.value\n                               ~ ^~~~~\n/tmp/tmp3ucvz0ae.swift:25:9:\
    \ error: cannot find 'sum' in scope\n        return sum\n               ^~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let r = s.unicodeScalars.filter({$0\
    \ > 32}).reduce(0) {\n        (_: Int, _: Int) -> Int in\n        _ + Int(Character(UnicodeScalar(UInt8($0))).value)\n\
    \    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp1m8zcpzq.swift:21:47: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n        _ + Int(Character(UnicodeScalar(UInt8($0))).value)\n\
    \                                              ^\n/tmp/tmp1m8zcpzq.swift:21:9:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        _ + Int(Character(UnicodeScalar(UInt8($0))).value)\n        ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet s = s.characters\n\tvar sum =\
    \ 0\n\tfor i in 0..<s.count {\n\t\tlet letter = s[i]\n\t\tif letter.isUpper()\
    \ {\n\t\t\tsum += letter.character\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpsj1ps4dn.swift:19:12: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsj1ps4dn.swift:22:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                let letter = s[i]\n           \
    \                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpsj1ps4dn.swift:23:13: error: value of type 'Character'\
    \ has no member 'isUpper'\n                if letter.isUpper() {\n           \
    \        ~~~~~~ ^~~~~~~\n/tmp/tmpsj1ps4dn.swift:24:18: error: value of type 'Character'\
    \ has no member 'character'\n                        sum += letter.character\n\
    \                               ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  s.filter { $0.isUpper }.fold(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpoh41k5fl.swift:19:27: error: reference to member 'fold' cannot\
    \ be resolved without a contextual type\n  s.filter { $0.isUpper }.fold(0)\n \
    \                         ^\n/tmp/tmpoh41k5fl.swift:19:17: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'isUpper'\n  s.filter { $0.isUpper\
    \ }.fold(0)\n             ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for c& in s\
    \ {\n        result += Int(Int(c) - 65) * 10\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp6x4o6ko_.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for c& in s {\n         ^\n/tmp/tmp6x4o6ko_.swift:20:10: error: operator\
    \ with postfix spacing cannot start a subexpression\n    for c& in s {\n     \
    \    ^\n/tmp/tmp6x4o6ko_.swift:20:12: error: expected Sequence expression for\
    \ for-each loop\n    for c& in s {\n           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tassert(s != \"\")\n\tlet result =\
    \ s.makeIterator().map(String.UnicodeScalarView.init).filter({ $0.value > 32 }).reduce(0)\n\
    \treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpa1878usa.swift:20:32: error: value of type 'String.Iterator' has\
    \ no member 'map'\n        let result = s.makeIterator().map(String.UnicodeScalarView.init).filter({\
    \ $0.value > 32 }).reduce(0)\n                     ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tvar sum = 0\n\tfor i, chr := range\
    \ s {\n\t\tif i > 0 && sum > 9 {\n\t\t\treturn sum\n\t\t}\n\t\tsum += Int(chr)\n\
    \t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpkv6kqkmj.swift:20:7: error: expected 'in' after for-each pattern\n\
    \        for i, chr := range s {\n             ^\n/tmp/tmpkv6kqkmj.swift:20:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, chr :=\
    \ range s {\n             ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for c in s.characters\
    \ {\n        switch c {\n        case '0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9':\n            result += 1\n        default:\n            break\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3t5kg6eq.swift:22:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':\n \
    \            ^~~\n             \"0\"\n/tmp/tmp3t5kg6eq.swift:22:19: error: single-quoted\
    \ string literal found, use '\"'\n        case '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9':\n                  ^~~\n                  \"1\"\n/tmp/tmp3t5kg6eq.swift:22:24:\
    \ error: single-quoted string literal found, use '\"'\n        case '0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9':\n                       ^~~\n      \
    \                 \"2\"\n/tmp/tmp3t5kg6eq.swift:22:29: error: single-quoted string\
    \ literal found, use '\"'\n        case '0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9':\n                            ^~~\n                            \"3\"\
    \n/tmp/tmp3t5kg6eq.swift:22:34: error: single-quoted string literal found, use\
    \ '\"'\n        case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':\n     \
    \                            ^~~\n                                 \"4\"\n/tmp/tmp3t5kg6eq.swift:22:39:\
    \ error: single-quoted string literal found, use '\"'\n        case '0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9':\n                                  \
    \    ^~~\n                                      \"5\"\n/tmp/tmp3t5kg6eq.swift:22:44:\
    \ error: single-quoted string literal found, use '\"'\n        case '0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9':\n                                  \
    \         ^~~\n                                           \"6\"\n/tmp/tmp3t5kg6eq.swift:22:49:\
    \ error: single-quoted string literal found, use '\"'\n        case '0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9':\n                                  \
    \              ^~~\n                                                \"7\"\n/tmp/tmp3t5kg6eq.swift:22:54:\
    \ error: single-quoted string literal found, use '\"'\n        case '0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9':\n                                  \
    \                   ^~~\n                                                    \
    \ \"8\"\n/tmp/tmp3t5kg6eq.swift:22:59: error: single-quoted string literal found,\
    \ use '\"'\n     "
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tvar sum = 0\n\tfor i := 0; i < len(s);\
    \ i++ {\n\t\tswitch s[i] {\n\t\tcase 'a':\n\t\t\tsum += 97\n\t\tcase 'b':\n\t\t\
    \tsum += 98\n\t\tcase 'c':\n\t\t\tsum += 99\n\t\tcase 'd':\n\t\t\tsum += 100\n\
    \t\tcase 'e':\n\t\t\tsum += 101\n\t\tcase 'f':\n\t\t\tsum += 102\n\t\tcase 'g':\n\
    \t\t\tsum += 103\n\t\tcase 'h':\n\t\t\tsum += 104\n\t\tcase 'i':\n\t\t\tsum +=\
    \ 105\n\t\tcase 'j':\n\t\t\tsum += 106\n\t\tcase 'k':\n\t\t\tsum += 107\n\t\t\
    case 'l':\n\t\t\tsum += 108\n\t\tcase 'm':\n\t\t\tsum += 109\n\t\tcase 'n':\n\t\
    \t\tsum += 110\n\t\tcase 'o':\n\t\t\tsum += 111\n\t\tcase 'p':\n\t\t\tsum += 112\n\
    \t\tcase 'q':\n\t\t\tsum += 113\n\t\tcase 'r':\n\t\t\tsum += 114\n\t\tcase 's':\n\
    \t\t\tsum += 115\n\t\tcase 't':\n\t\t\tsum += 116\n\t\tcase 'u':\n\t\t\tsum +=\
    \ 117\n\t\tcase 'v':\n\t\t\tsum += 118\n\t\tcase 'w':\n\t\t\tsum += 119\n\t\t\
    case 'x':\n\t\t\tsum += 120\n\t\tcase 'y':\n\t\t\tsum += 121\n\t\tcase 'z':\n\t\
    \t\tsum += 122\n\t\tdefault:\n\t\t\tsum += 127\n\t\t}\n\t}\n\treturn sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpw27v_03i.swift:20:9: error: expected type\n        for i := 0;\
    \ i < len(s); i++ {\n               ^\n                <#type#>\n/tmp/tmpw27v_03i.swift:20:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s);\
    \ i++ {\n               ^\n/tmp/tmpw27v_03i.swift:20:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s); i++ {\n      \
    \         ^\n/tmp/tmpw27v_03i.swift:22:8: error: single-quoted string literal\
    \ found, use '\"'\n                case 'a':\n                     ^~~\n     \
    \                \"a\"\n/tmp/tmpw27v_03i.swift:24:8: error: single-quoted string\
    \ literal found, use '\"'\n                case 'b':\n                     ^~~\n\
    \                     \"b\"\n/tmp/tmpw27v_03i.swift:26:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'c':\n                \
    \     ^~~\n                     \"c\"\n/tmp/tmpw27v_03i.swift:28:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'd':\n                \
    \     ^~~\n                     \"d\"\n/tmp/tmpw27v_03i.swift:30:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'e':\n                \
    \     ^~~\n                     \"e\"\n/tmp/tmpw27v_03i.swift:32:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'f':\n                \
    \     ^~~\n                     \"f\"\n/tmp/tmpw27v_03i.swift:34:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'g':\n                \
    \     ^~~\n                     \"g\"\n/tmp/tmpw27v_03i.swift:36:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'h':\n                \
    \     ^~~\n                     \"h\"\n/tmp/tmpw27v_03i.swift:38:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'i':\n                \
    \     ^~~\n                     \"i\"\n/tmp/tmpw27v_03i.swift:40:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'j':\n                \
    \     ^~~\n                     \"j\"\n/tmp/tmpw27v_03i.swift:42:8: error: single-quoted\
    \ string literal found, use '\"'\n            "
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    s.forEach {\n \
    \       sum += Int($0)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpj9pnpg_p.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int($0)\n               ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let sum = s.reduce(0, combine: {\
    \ $0 + Int($1).ascii() })\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpodp1y6w9.swift:19:43: error: no exact matches in call to initializer\
    \ \n    let sum = s.reduce(0, combine: { $0 + Int($1).ascii() })\n           \
    \                               ^\n/tmp/tmpodp1y6w9.swift:19:43: note: found candidate\
    \ with type '(Float16) -> Int'\n    let sum = s.reduce(0, combine: { $0 + Int($1).ascii()\
    \ })\n                                          ^\n/tmp/tmpodp1y6w9.swift:19:43:\
    \ note: found candidate with type '(Float) -> Int'\n    let sum = s.reduce(0,\
    \ combine: { $0 + Int($1).ascii() })\n                                       \
    \   ^\n/tmp/tmpodp1y6w9.swift:19:43: note: found candidate with type '(Double)\
    \ -> Int'\n    let sum = s.reduce(0, combine: { $0 + Int($1).ascii() })\n    \
    \                                      ^\n/tmp/tmpodp1y6w9.swift:19:43: note:\
    \ found candidate with type '(Float80) -> Int'\n    let sum = s.reduce(0, combine:\
    \ { $0 + Int($1).ascii() })\n                                          ^\n/tmp/tmpodp1y6w9.swift:19:43:\
    \ note: found candidate with type '(Builtin.Int64) -> Int'\n    let sum = s.reduce(0,\
    \ combine: { $0 + Int($1).ascii() })\n                                       \
    \   ^\n/tmp/tmpodp1y6w9.swift:19:43: note: found candidate with type '(Builtin.Word)\
    \ -> Int'\n    let sum = s.reduce(0, combine: { $0 + Int($1).ascii() })\n    \
    \                                      ^\n/tmp/tmpodp1y6w9.swift:19:43: note:\
    \ found candidate with type '(String) -> Int?'\n    let sum = s.reduce(0, combine:\
    \ { $0 + Int($1).ascii() })\n                                          ^\n/tmp/tmpodp1y6w9.swift:19:23:\
    \ error: extraneous argument label 'combine:' in call\n    let sum = s.reduce(0,\
    \ combine: { $0 + Int($1).ascii() })\n                      ^   ~~~~~~~~~\n  \
    \                        \n/tmp/tmpodp1y6w9.swift:19:51: error: reference to member\
    \ 'ascii' cannot be resolved without a contextual type\n    let sum = s.reduce(0,\
    \ combine: { $0 + Int($1).ascii() })\n                                       \
    \           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = digits(s).map { Int($0)\
    \ }.reduce(0, combine: +)\n    return result % 10\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpu63rjamq.swift:19:18: error: cannot find 'digits' in scope\n  \
    \  let result = digits(s).map { Int($0) }.reduce(0, combine: +)\n            \
    \     ^~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.characters.reduce(0)\
    \ { (result, item) -> Int in\n        switch item {\n        case '0' ... '9':\n\
    \            return result + Int(item) - 9\n        default:\n            return\
    \ result + Int(item)\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfco8mnph.swift:21:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '0' ... '9':\n             ^~~\n             \"0\"\n\
    /tmp/tmpfco8mnph.swift:21:22: error: single-quoted string literal found, use '\"\
    '\n        case '0' ... '9':\n                     ^~~\n                     \"\
    9\"\n/tmp/tmpfco8mnph.swift:22:29: error: no exact matches in call to initializer\
    \ \n            return result + Int(item) - 9\n                            ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.filter{ $0 >= 48 && $0 <=\
    \ 57 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxr9bebe7.swift:19:20: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n  return s.filter{ $0 >=\
    \ 48 && $0 <= 57 }.count\n                   ^\n/tmp/tmpxr9bebe7.swift:19:32:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n  return s.filter{ $0 >= 48 && $0 <= 57 }.count\n     \
    \                          ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var result: Int = 0\n  for char <-\
    \ s.characters {\n    if char.asciiValue > 64 {\n      break\n    }\n    result\
    \ *= 16 + char.asciiValue\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpi6vdo0bd.swift:20:12: error: expected 'in' after for-each pattern\n\
    \  for char <- s.characters {\n           ^\n/tmp/tmpi6vdo0bd.swift:20:12: error:\
    \ unary operator cannot be separated from its operand\n  for char <- s.characters\
    \ {\n           ^ ~\n             \n/tmp/tmpi6vdo0bd.swift:20:12: error: cannot\
    \ find operator '<-' in scope\n  for char <- s.characters {\n           ^~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s.isEmpty() {\n        return\
    \ 0\n    }\n    let start = s.startIndex\n    let end = s.endIndex\n    var digitSum\
    \ = 0\n    for char in s.characters.enumerated() {\n        if char.element >=\
    \ '0' && char.element <= '9' {\n            digitSum += Int(char.element) - '0'\n\
    \        }\n    }\n    return Int(s[start..end]) + digitSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3ek5ivsn.swift:26:28: error: single-quoted string literal found,\
    \ use '\"'\n        if char.element >= '0' && char.element <= '9' {\n        \
    \                   ^~~\n                           \"0\"\n/tmp/tmp3ek5ivsn.swift:26:51:\
    \ error: single-quoted string literal found, use '\"'\n        if char.element\
    \ >= '0' && char.element <= '9' {\n                                          \
    \        ^~~\n                                                  \"9\"\n/tmp/tmp3ek5ivsn.swift:27:45:\
    \ error: single-quoted string literal found, use '\"'\n            digitSum +=\
    \ Int(char.element) - '0'\n                                            ^~~\n \
    \                                           \"0\"\n/tmp/tmp3ek5ivsn.swift:19:10:\
    \ error: cannot call value of non-function type 'Bool'\n    if s.isEmpty() {\n\
    \         ^      ~~\n                \n/tmp/tmp3ek5ivsn.swift:25:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.enumerated()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ek5ivsn.swift:27:45: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n            digitSum += Int(char.element) -\
    \ '0'\n                                            ^\n/tmp/tmp3ek5ivsn.swift:27:25:\
    \ error: no exact matches in call to initializer \n            digitSum += Int(char.element)\
    \ - '0'\n                        ^\n/tmp/tmp3ek5ivsn.swift:27:25: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n            digitSum += Int(char.element) - '0'\n           \
    \             ^\n/tmp/tmp3ek5ivsn.swift:27:25: note: candidate expects value of\
    \ type 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n   \
    \         digitSum += Int(char.element) - '0'\n                        ^\n/tmp/tmp3ek5ivsn.swift:27:25:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n            digitSum += Int(char.elemen"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n\n    var digits = [1]\n\n    for _ in 0..<s.characters.count {\n    \
    \    var sum = 0\n\n        for char in s.characters {\n            sum += char.unicodeScalars.reduce(0)\n\
    \        }\n\n        digits.append(sum % 10)\n    }\n\n    return Int(digits.reduce(0,\
    \ { $0 + $1 }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8hnm6l0a.swift:25:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in 0..<s.characters.count {\n               \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8hnm6l0a.swift:28:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        for\
    \ char in s.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp8hnm6l0a.swift:29:48: error: missing\
    \ argument for parameter #2 in call\n            sum += char.unicodeScalars.reduce(0)\n\
    \                                               ^\n                          \
    \                     , <#(Int, Unicode.Scalar) throws -> Int#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var sum = 0\n  for i in 0 ..< s.count\
    \ {\n    if Int(s[i]) > 127 { sum += Int(s[i]) - 127 }\n  }\n  return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpsxnh5z4a.swift:21:8: error: no exact matches in call to initializer\
    \ \n    if Int(s[i]) > 127 { sum += Int(s[i]) - 127 }\n       ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n/tmp/tmpsxnh5z4a.swift:21:33: error: no exact\
    \ matches in call to initializer \n    if Int(s[i]) > 127 { sum += Int(s[i]) -\
    \ 127 }\n                                ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n "
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var total = 0\n  for char in s.characters\
    \ {\n    if Character.isUpper(<char>) {\n      total += Character.digit(<char>,\
    \ radix: 10)\n    }\n  }\n  return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpuvkzvxxu.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  for char in s.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpuvkzvxxu.swift:21:26:\
    \ error: '<' is not a prefix unary operator\n    if Character.isUpper(<char>)\
    \ {\n                         ^\n/tmp/tmpuvkzvxxu.swift:21:31: error: '>' is not\
    \ a postfix unary operator\n    if Character.isUpper(<char>) {\n             \
    \                 ^\n/tmp/tmpuvkzvxxu.swift:21:18: error: type 'Character' has\
    \ no member 'isUpper'\n    if Character.isUpper(<char>) {\n       ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpuvkzvxxu.swift:22:32: error: '<' is not a prefix unary operator\n    \
    \  total += Character.digit(<char>, radix: 10)\n                             \
    \  ^\n/tmp/tmpuvkzvxxu.swift:22:37: error: '>' is not a postfix unary operator\n\
    \      total += Character.digit(<char>, radix: 10)\n                         \
    \           ^\n/tmp/tmpuvkzvxxu.swift:22:26: error: type 'Character' has no member\
    \ 'digit'\n      total += Character.digit(<char>, radix: 10)\n               ~~~~~~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, b in s.unicodeScalars\
    \ {\n        if !b.isHighSurrogate() {\n            sum += b.value\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpov7ay2uk.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for _, b in s.unicodeScalars {\n         ^\n/tmp/tmpov7ay2uk.swift:20:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, b in s.unicodeScalars\
    \ {\n         ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    guard let str = s as String else\
    \ {\n        return 0\n    }\n    var result = 0\n    var index = str.startIndex\n\
    \    while index < str.endIndex {\n        let c = str[index]\n        if c >=\
    \ '0' && c <= '9' {\n            result += Int(c - '0')\n        }\n        index++\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpw1gx3j52.swift:26:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpw1gx3j52.swift:26:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpw1gx3j52.swift:27:31: error:\
    \ single-quoted string literal found, use '\"'\n            result += Int(c -\
    \ '0')\n                              ^~~\n                              \"0\"\
    \n/tmp/tmpw1gx3j52.swift:19:11: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n    guard let str = s as String else {\n \
    \         ^         ~~~~~~~~~~~\n/tmp/tmpw1gx3j52.swift:27:29: error: binary operator\
    \ '-' cannot be applied to two 'Character' operands\n            result += Int(c\
    \ - '0')\n                          ~ ^ ~~~\n/tmp/tmpw1gx3j52.swift:29:14: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let sum = s.characters.map({ $0\
    \ as Int })\n        .filter{$0 > 0}\n        .sum()\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpiy_hwf9c.swift:21:10: error: value of type '[Int]' has no member\
    \ 'sum'\n        .sum()\n         ^~~\n/tmp/tmpiy_hwf9c.swift:19:37: error: cannot\
    \ convert value of type 'String.Element' (aka 'Character') to type 'Int' in coercion\n\
    \    let sum = s.characters.map({ $0 as Int })\n                             \
    \    ~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (prev, char)\
    \ -> Int in\n        return prev + Int(char.unicodeScalarValue)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpv707sq1h.swift:19:20: error: missing argument label 'into:' in\
    \ call\n    return s.reduce(0) { (prev, char) -> Int in\n                   ^\n\
    \                    into: \n/tmp/tmpv707sq1h.swift:19:14: error: cannot convert\
    \ return expression of type '(Int, _) -> Int' to return type 'Int'\n    return\
    \ s.reduce(0) { (prev, char) -> Int in\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  let result = s.filter { $0 >= 'A'\
    \ && $0 <= 'Z' }.map { $0 - 'A' + 'a' }.sum()\n  return result % 26\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpd5bodjfo.swift:19:33: error: single-quoted string literal found,\
    \ use '\"'\n  let result = s.filter { $0 >= 'A' && $0 <= 'Z' }.map { $0 - 'A'\
    \ + 'a' }.sum()\n                                ^~~\n                       \
    \         \"A\"\n/tmp/tmpd5bodjfo.swift:19:46: error: single-quoted string literal\
    \ found, use '\"'\n  let result = s.filter { $0 >= 'A' && $0 <= 'Z' }.map { $0\
    \ - 'A' + 'a' }.sum()\n                                             ^~~\n    \
    \                                         \"Z\"\n/tmp/tmpd5bodjfo.swift:19:63:\
    \ error: single-quoted string literal found, use '\"'\n  let result = s.filter\
    \ { $0 >= 'A' && $0 <= 'Z' }.map { $0 - 'A' + 'a' }.sum()\n                  \
    \                                            ^~~\n                           \
    \                                   \"A\"\n/tmp/tmpd5bodjfo.swift:19:69: error:\
    \ single-quoted string literal found, use '\"'\n  let result = s.filter { $0 >=\
    \ 'A' && $0 <= 'Z' }.map { $0 - 'A' + 'a' }.sum()\n                          \
    \                                          ^~~\n                             \
    \                                       \"a\"\n/tmp/tmpd5bodjfo.swift:19:61: error:\
    \ binary operator '-' cannot be applied to operands of type 'String.Element' (aka\
    \ 'Character') and 'String'\n  let result = s.filter { $0 >= 'A' && $0 <= 'Z'\
    \ }.map { $0 - 'A' + 'a' }.sum()\n                                           \
    \              ~~ ^ ~~~\n/tmp/tmpd5bodjfo.swift:19:67: error: binary operator\
    \ '+' cannot be applied to two 'String' operands\n  let result = s.filter { $0\
    \ >= 'A' && $0 <= 'Z' }.map { $0 - 'A' + 'a' }.sum()\n                       \
    \                                  ~~~~~~~~ ^ ~~~\n/tmp/tmpd5bodjfo.swift:19:67:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (String, String)\n  let result = s.filter { $0 >= 'A' && $0 <= 'Z' }.map { $0\
    \ - 'A' + 'a' }.sum()\n                                                      \
    \            ^\n/tmp/tmpd5bodjfo.swift:19:75: error: reference to member 'sum'\
    \ cannot be resolved without a contextual type\n  let result = s.filter { $0 >=\
    \ 'A' &"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s.isEmpty {\n        return 0\n\
    \    }\n    var sum = 0\n    for i in s.unicodeScalars {\n        if i > 0xffff\
    \ {\n            // not an ASCII character\n            continue\n        }\n\
    \        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpkqu2tzyn.swift:24:14: error: referencing operator function '>'\
    \ on 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if i > 0xffff {\n             ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n          ^\n/tmp/tmpkqu2tzyn.swift:28:16:\
    \ error: cannot convert value of type 'Unicode.Scalar' to expected argument type\
    \ 'Int'\n        sum += i\n               ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    s.forEach { ch\
    \ in\n        sum = sum + Int(String(ch).unicodeScalars.filter({ $0.isUppercase\
    \ }).map({ $0.value }).joined().unicodeScalars.first!)!\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpeow5cxkh.swift:21:21: error: initializer 'init(_:radix:)' requires\
    \ that 'Unicode.Scalar' conform to 'StringProtocol'\n        sum = sum + Int(String(ch).unicodeScalars.filter({\
    \ $0.isUppercase }).map({ $0.value }).joined().unicodeScalars.first!)!\n     \
    \               ^\nSwift.FixedWidthInteger:2:23: note: where 'S' = 'Unicode.Scalar'\n\
    \    @inlinable public init?<S>(_ text: S, radix: Int = 10) where S : StringProtocol\n\
    \                      ^\n/tmp/tmpeow5cxkh.swift:21:63: error: value of type 'Unicode.Scalar'\
    \ has no member 'isUppercase'\n        sum = sum + Int(String(ch).unicodeScalars.filter({\
    \ $0.isUppercase }).map({ $0.value }).joined().unicodeScalars.first!)!\n     \
    \                                                      ~~ ^~~~~~~~~~~\n/tmp/tmpeow5cxkh.swift:21:87:\
    \ error: cannot convert value of type 'UInt32' to closure result type 'String'\n\
    \        sum = sum + Int(String(ch).unicodeScalars.filter({ $0.isUppercase }).map({\
    \ $0.value }).joined().unicodeScalars.first!)!\n                             \
    \                                                      ~~~^~~~~\n"
  stdout: ''
  timestamp: 1659980075
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, b in s.unicodeScalars\
    \ {\n        if b < 128 {\n            sum += b\n        } else {\n          \
    \  break\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpujhj21rb.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for _, b in s.unicodeScalars {\n         ^\n/tmp/tmpujhj21rb.swift:20:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, b in s.unicodeScalars\
    \ {\n         ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    return s.map { Int(String($0))\
    \ }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2b3idrcv.swift:20:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return s.map { Int(String($0)) }.reduce(0,\
    \ +)\n                   ^\n/tmp/tmp2b3idrcv.swift:20:20: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    return\
    \ s.map { Int(String($0)) }.reduce(0, +)\n                   ^\n             \
    \                      ?? <#default value#>\n/tmp/tmp2b3idrcv.swift:20:20: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return s.map { Int(String($0)) }.reduce(0, +)\n                   ^\n   \
    \                               !\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + $1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgojeldvs.swift:19:31: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n    return s.reduce(0) {\
    \ $0 + $1 }\n                              ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tresult := 0\n\tfor _, r := range s\
    \ {\n\t\tresult += Int(r) - Int(r)\n\t}\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_9bndlyl.swift:19:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        result := 0\n              ^\n              ;\n\
    /tmp/tmp_9bndlyl.swift:19:9: error: expected expression\n        result := 0\n\
    \               ^\n/tmp/tmp_9bndlyl.swift:20:7: error: expected 'in' after for-each\
    \ pattern\n        for _, r := range s {\n             ^\n/tmp/tmp_9bndlyl.swift:20:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, r := range\
    \ s {\n             ^\n/tmp/tmp_9bndlyl.swift:19:2: error: cannot find 'result'\
    \ in scope\n        result := 0\n        ^~~~~~\n/tmp/tmp_9bndlyl.swift:23:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let res = s.reduce(0) { sum, n in\
    \ sum + Int(String(n.unicodeScalars.map { $0.value }[0])) }\n    return res +\
    \ res.unicodeScalars.map { $0.value }.reduce(0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp6_xxm06j.swift:19:45: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let res = s.reduce(0) { sum, n in\
    \ sum + Int(String(n.unicodeScalars.map { $0.value }[0])) }\n                \
    \                            ^\n/tmp/tmp6_xxm06j.swift:19:45: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    let res\
    \ = s.reduce(0) { sum, n in sum + Int(String(n.unicodeScalars.map { $0.value }[0]))\
    \ }\n                                            ^\n                         \
    \                   (                                                 ?? <#default\
    \ value#>)\n/tmp/tmp6_xxm06j.swift:19:45: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    let res = s.reduce(0) {\
    \ sum, n in sum + Int(String(n.unicodeScalars.map { $0.value }[0])) }\n      \
    \                                      ^\n                                   \
    \                                                          !\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n    var sum = 0\n    for letter in s {\n        if letter.isUpper() {\n\
    \            sum += Int(letter) - Int(Int(letter)!)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpav6de6gi.swift:24:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpav6de6gi.swift:25:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(letter)\
    \ - Int(Int(letter)!)\n                   ^\n/tmp/tmpav6de6gi.swift:25:20: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \            sum += Int(letter) - Int(Int(letter)!)\n                   ^\n/tmp/tmpav6de6gi.swift:25:20:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \            sum += Int(letter) - Int(Int(letter)!)\n                   ^\n/tmp/tmpav6de6gi.swift:25:20:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \            sum += Int(letter) - Int(Int(letter)!)\n                   ^\n/tmp/tmpav6de6gi.swift:25:20:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \            sum += Int(letter) - Int(Int(letter)!)\n                   ^\n/tmp/tmpav6de6gi.swift:25:20:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n            sum += Int(letter) - Int(Int(letter)!)\n         \
    \          ^\n/tmp/tmpav6de6gi.swift:25:20: note: candidate expects value of type\
    \ 'Builtin.Word' for parameter #1 (got 'Character')\n            sum += Int(letter)\
    \ - Int(Int(letter)!)\n                   ^\n/tmp/tmpav6de6gi.swift:25:42: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            sum += Int(letter) - Int(Int(letter)!)\n                        \
    \                 ^\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn s.filter { UInt32($0).isMultiple(9)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf9s4lx6m.swift:19:20: error: no exact matches in call to initializer\
    \ \n        return s.filter { UInt32($0).isMultiple(9) }\n                   \
    \       ^\n/tmp/tmpf9s4lx6m.swift:19:20: note: found candidate with type '(Float16)\
    \ -> UInt32'\n        return s.filter { UInt32($0).isMultiple(9) }\n         \
    \                 ^\n/tmp/tmpf9s4lx6m.swift:19:20: note: found candidate with\
    \ type '(Float) -> UInt32'\n        return s.filter { UInt32($0).isMultiple(9)\
    \ }\n                          ^\n/tmp/tmpf9s4lx6m.swift:19:20: note: found candidate\
    \ with type '(Double) -> UInt32'\n        return s.filter { UInt32($0).isMultiple(9)\
    \ }\n                          ^\n/tmp/tmpf9s4lx6m.swift:19:20: note: found candidate\
    \ with type '(Float80) -> UInt32'\n        return s.filter { UInt32($0).isMultiple(9)\
    \ }\n                          ^\n/tmp/tmpf9s4lx6m.swift:19:20: note: found candidate\
    \ with type '(Builtin.Int32) -> UInt32'\n        return s.filter { UInt32($0).isMultiple(9)\
    \ }\n                          ^\n/tmp/tmpf9s4lx6m.swift:19:20: note: found candidate\
    \ with type '(Unicode.Scalar) -> UInt32'\n        return s.filter { UInt32($0).isMultiple(9)\
    \ }\n                          ^\n/tmp/tmpf9s4lx6m.swift:19:11: error: no 'filter'\
    \ candidates produce the expected contextual result type 'Int'\n        return\
    \ s.filter { UInt32($0).isMultiple(9) }\n                 ^\nSwift.RangeReplaceableCollection:3:40:\
    \ note: 'filter' produces 'String', not the expected contextual result type 'Int'\n\
    \    @inlinable public __consuming func filter(_ isIncluded: (Self.Element) throws\
    \ -> Bool) rethrows -> Self\n                                       ^\nSwift.RangeReplaceableCollection:3:40:\
    \ note: 'filter' produces 'String', not the expected contextual result type 'Int'\n\
    \    @inlinable public __consuming func filter(_ isIncluded: (Self.Element) throws\
    \ -> Bool) rethrows -> Self\n                                       ^\nSwift.RangeReplaceableCollection:3:40:\
    \ note: 'filter' produces 'String', not the expected contextual result type 'Int'\n\
    \    @inlinable public __consuming func filter(_ isIn"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return digitSumHelper(s)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4rx1m40b.swift:19:10: error: cannot find 'digitSumHelper' in scope\n\
    \  return digitSumHelper(s)\n         ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tvar result = 0\n\n\tfor _, r := range\
    \ s {\n\t\tresult += Int(r)\n\t}\n\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpmy1s0vkd.swift:21:7: error: expected 'in' after for-each pattern\n\
    \        for _, r := range s {\n             ^\n/tmp/tmpmy1s0vkd.swift:21:7: error:\
    \ expected Sequence expression for for-each loop\n        for _, r := range s\
    \ {\n             ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return countUppercase(asDigits(s))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2wcgne0t.swift:19:12: error: cannot find 'countUppercase' in scope\n\
    \    return countUppercase(asDigits(s))\n           ^~~~~~~~~~~~~~\n/tmp/tmp2wcgne0t.swift:19:27:\
    \ error: cannot find 'asDigits' in scope\n    return countUppercase(asDigits(s))\n\
    \                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n    var codes: [Int] = []\n    for ch in s {\n        codes.append(Int(ch))\n\
    \    }\n    return codes.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpioc2la3y.swift:24:22: error: no exact matches in call to initializer\
    \ \n        codes.append(Int(ch))\n                     ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for _ in self.filter(\"\
    ^[\\\\w]+\") {\n        result += Int(_)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpqomgm4fe.swift:20:14: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n    for _ in self.filter(\"\
    ^[\\\\w]+\") {\n             ^~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet chars = s.characters\n\tvar sum\
    \ = Int()\n\tfor char in chars {\n\t\tif char.unicodeScalars.filter({$0.value\
    \ > 127}).count == 0 {\n\t\t\tsum += Int(char)\n\t\t}\n\t}\n\treturn sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfbbzzx6g.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        let chars = s.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpfbbzzx6g.swift:23:11:\
    \ error: no exact matches in call to initializer \n                        sum\
    \ += Int(char)\n                               ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects\
    \ value of type 'Float' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Double)\n           ^\nSwift.Int:14:12: note: candidate expects value of type\
    \ 'Float80' for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n\
    \           ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet s = String(s)\n\tvar sum = 0\n\
    \tfor _ in 0..<s.count {\n\t\tif s.startIndex + _ < s.endIndex {\n\t\t\tsum +=\
    \ Int(s[s.startIndex + _].utf16[0])\n\t\t} else {\n\t\t\treturn sum\n\t\t}\n\t\
    }\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpw_9h9byb.swift:22:21: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n                if s.startIndex + _ < s.endIndex\
    \ {\n                                  ^\n/tmp/tmpw_9h9byb.swift:23:32: error:\
    \ '_' can only appear in a pattern or on the left side of an assignment\n    \
    \                    sum += Int(s[s.startIndex + _].utf16[0])\n              \
    \                                      ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return digitSum(s.characters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpilg50kmh.swift:19:21: error: missing argument label 's:' in call\n\
    \    return digitSum(s.characters)\n                    ^\n                  \
    \  s: \n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return sum(map(s, strToInt))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpj4rv__bk.swift:19:12: error: cannot find 'sum' in scope\n    return\
    \ sum(map(s, strToInt))\n           ^~~\n/tmp/tmpj4rv__bk.swift:19:16: error:\
    \ cannot find 'map' in scope\n    return sum(map(s, strToInt))\n             \
    \  ^~~\n/tmp/tmpj4rv__bk.swift:19:23: error: cannot find 'strToInt' in scope\n\
    \    return sum(map(s, strToInt))\n                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(_+, 0);\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyqc0ir2m.swift:19:22: error: '+' is not a postfix unary operator\n\
    \    return s.reduce(_+, 0);\n                     ^\n/tmp/tmpyqc0ir2m.swift:19:21:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \    return s.reduce(_+, 0);\n                    ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let inputLength = s.length\n   \
    \ \n    // Step 1: Loop through all characters in String\n    for index in 0..<inputLength\
    \ {\n        let inputChar = s.characters[index]\n        \n        // Step 2:\
    \ Add current char to accumulator sum\n        let currentChar = Int(inputChar)\n\
    \        let currentCharSum = currentChar\n        \n        // Step 3: Check\
    \ each character against the uppercase character range\n        if currentCharSum\
    \ >= 97 && currentCharSum <= 122 {\n            // Step 4: Add to accumulator\n\
    \            currentCharSum += 97\n        }\n        \n        // Step 5: Write\
    \ result to accumulator\n        accumulator += currentCharSum\n    }\n    \n\
    \    // Step 6: Return result\n    return accumulator\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfmpz8qtg.swift:19:25: error: value of type 'String' has no member\
    \ 'length'\n    let inputLength = s.length\n                      ~ ^~~~~~\n/tmp/tmpfmpz8qtg.swift:40:12:\
    \ error: cannot find 'accumulator' in scope\n    return accumulator\n        \
    \   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return digitSum(s.unicodeScalars.map\
    \ { $0.value })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmprafd5pxj.swift:19:21: error: missing argument label 's:' in call\n\
    \    return digitSum(s.unicodeScalars.map { $0.value })\n                    ^\n\
    \                    s: \n/tmp/tmprafd5pxj.swift:19:38: error: cannot convert\
    \ value of type '[UInt32]' to expected argument type 'String'\n    return digitSum(s.unicodeScalars.map\
    \ { $0.value })\n                                     ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for ch in s {\n\
    \        if isUpper(ch) {\n            sum += (ch - 'A' + 10)\n        } else\
    \ {\n            sum += ch\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp0y4mxvg4.swift:22:26: error: single-quoted string literal found,\
    \ use '\"'\n            sum += (ch - 'A' + 10)\n                         ^~~\n\
    \                         \"A\"\n/tmp/tmp0y4mxvg4.swift:21:12: error: cannot find\
    \ 'isUpper' in scope\n        if isUpper(ch) {\n           ^~~~~~~\n/tmp/tmp0y4mxvg4.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += (ch - 'A' + 10)\n                ^\nSwift.SIMD:1:11:\
    \ note: candidate requires that 'Int' conform to 'SIMD' (requirement specified\
    \ as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar : FloatingPoint {\n  \
    \        ^\n/tmp/tmp0y4mxvg4.swift:24:20: error: cannot convert value of type\
    \ 'Character' to expected argument type 'Int'\n            sum += ch\n       \
    \            ^\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.characters.reduce(0,\
    \ combine: { (sum, ch) in\n        var sum = sum + (Int(ch) - 48)\n        return\
    \ sum\n    })\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpm5ydywgh.swift:20:26: error: no exact matches in call to initializer\
    \ \n        var sum = sum + (Int(ch) - 48)\n                         ^\n/tmp/tmpm5ydywgh.swift:20:26:\
    \ note: candidate has partially matching parameter list (Float16)\n        var\
    \ sum = sum + (Int(ch) - 48)\n                         ^\n/tmp/tmpm5ydywgh.swift:20:26:\
    \ note: candidate has partially matching parameter list (Float)\n        var sum\
    \ = sum + (Int(ch) - 48)\n                         ^\n/tmp/tmpm5ydywgh.swift:20:26:\
    \ note: candidate has partially matching parameter list (Double)\n        var\
    \ sum = sum + (Int(ch) - 48)\n                         ^\n/tmp/tmpm5ydywgh.swift:20:26:\
    \ note: candidate has partially matching parameter list (Float80)\n        var\
    \ sum = sum + (Int(ch) - 48)\n                         ^\n/tmp/tmpm5ydywgh.swift:20:26:\
    \ note: candidate has partially matching parameter list (Builtin.Int64)\n    \
    \    var sum = sum + (Int(ch) - 48)\n                         ^\n/tmp/tmpm5ydywgh.swift:20:26:\
    \ note: candidate has partially matching parameter list (Builtin.Word)\n     \
    \   var sum = sum + (Int(ch) - 48)\n                         ^\n/tmp/tmpm5ydywgh.swift:19:37:\
    \ error: extraneous argument label 'combine:' in call\n    let digits = s.characters.reduce(0,\
    \ combine: { (sum, ch) in\n                                    ^   ~~~~~~~~~\n\
    \                                        \n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (acc, c) in\n\
    \        guard c >= '0' && c <= '9' else {\n            return acc\n        }\n\
    \        return acc + Int(c) - '0'\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp17kpdfva.swift:20:20: error: single-quoted string literal found,\
    \ use '\"'\n        guard c >= '0' && c <= '9' else {\n                   ^~~\n\
    \                   \"0\"\n/tmp/tmp17kpdfva.swift:20:32: error: single-quoted\
    \ string literal found, use '\"'\n        guard c >= '0' && c <= '9' else {\n\
    \                               ^~~\n                               \"9\"\n/tmp/tmp17kpdfva.swift:23:31:\
    \ error: single-quoted string literal found, use '\"'\n        return acc + Int(c)\
    \ - '0'\n                              ^~~\n                              \"0\"\
    \n/tmp/tmp17kpdfva.swift:23:22: error: no exact matches in call to initializer\
    \ \n        return acc + Int(c) - '0'\n                     ^\n/tmp/tmp17kpdfva.swift:23:22:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n        return acc + Int(c) - '0'\n                    \
    \ ^\n/tmp/tmp17kpdfva.swift:23:22: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n        return acc\
    \ + Int(c) - '0'\n                     ^\n/tmp/tmp17kpdfva.swift:23:22: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n        return acc + Int(c) - '0'\n                    \
    \ ^\n/tmp/tmp17kpdfva.swift:23:22: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n        return acc\
    \ + Int(c) - '0'\n                     ^\n/tmp/tmp17kpdfva.swift:23:22: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n        return acc + Int(c) - '0'\n                    \
    \ ^\n/tmp/tmp17kpdfva.swift:23:22: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n        return acc\
    \ + Int(c) - '0'\n                     ^\n/tmp/tmp17kpdfva.swift:23:31: error:\
    \ cannot convert value of type 'String' to expected argument type 'Int'\n    \
    \    return acc + Int(c) - '0'\n                              ^\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map({ $0.isUppercase()\
    \ }.reduce(0, combine: +)) + 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpz0xfcdfn.swift:19:62: error: cannot convert return expression of\
    \ type 'Array<Int>' to return type 'Int'\n    return s.map({ $0.isUppercase()\
    \ }.reduce(0, combine: +)) + 0\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    /tmp/tmpz0xfcdfn.swift:19:39: error: value of type '(_) -> _' has no member 'reduce'\n\
    \    return s.map({ $0.isUppercase() }.reduce(0, combine: +)) + 0\n          \
    \       ~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmpz0xfcdfn.swift:19:64: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Array<Int>'\n    return\
    \ s.map({ $0.isUppercase() }.reduce(0, combine: +)) + 0\n                    \
    \                                           ^\n/tmp/tmpz0xfcdfn.swift:19:23: error:\
    \ cannot infer return type for closure with multiple statements; add explicit\
    \ type to disambiguate\n    return s.map({ $0.isUppercase() }.reduce(0, combine:\
    \ +)) + 0\n                      ^\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, { (acc, ch) in\n\
    \        var sum = 0\n        switch ch {\n        case \"0\":\n        case \"\
    1\":\n        case \"2\":\n        case \"3\":\n        case \"4\":\n        case\
    \ \"5\":\n        case \"6\":\n        case \"7\":\n        case \"8\":\n    \
    \    case \"9\":\n        case \"a\":\n        case \"b\":\n        case \"c\"\
    :\n        case \"d\":\n        case \"e\":\n        case \"f\":\n           \
    \ sum = acc + Int(ch - \"0\")\n        default:\n            sum = 0\n       \
    \ }\n        return sum\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphdqkn1e8.swift:22:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"0\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmphdqkn1e8.swift:23:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"1\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:24:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"2\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"3\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"4\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"5\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"6\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"7\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:30:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"8\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:31:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"9\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:32:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:33:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphdqkn1e8.swift:34:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, { $0 + Int(String($1).unicodeScalars.filter({\
    \ $0.value > 57 })\n        .map({ $0.value })\n        .sum())})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8403aybb.swift:21:10: error: value of type '[UInt32]' has no member\
    \ 'sum'\n        .sum())})\n         ^~~\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return digitSums(s, 0, []int)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpk9_pl1r5.swift:19:30: error: expected ',' separator\n    return\
    \ digitSums(s, 0, []int)\n                             ^\n                   \
    \          ,\n/tmp/tmpk9_pl1r5.swift:19:12: error: cannot find 'digitSums' in\
    \ scope\n    return digitSums(s, 0, []int)\n           ^~~~~~~~~\n/tmp/tmpk9_pl1r5.swift:19:30:\
    \ error: cannot find 'int' in scope\n    return digitSums(s, 0, []int)\n     \
    \                        ^~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let len: Int = count(s)\n    return\
    \ count(s.dropFirst()) % (len * 32 + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgahr53uy.swift:19:20: error: cannot find 'count' in scope\n   \
    \ let len: Int = count(s)\n                   ^~~~~\n/tmp/tmpgahr53uy.swift:20:12:\
    \ error: cannot find 'count' in scope\n    return count(s.dropFirst()) % (len\
    \ * 32 + 1)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return digitSum(s.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpqlsywe20.swift:19:21: error: missing argument label 's:' in call\n\
    \    return digitSum(s.unicodeScalars)\n                    ^\n              \
    \      s: \n/tmp/tmpqlsywe20.swift:19:23: error: cannot convert value of type\
    \ 'String.UnicodeScalarView' to expected argument type 'String'\n    return digitSum(s.unicodeScalars)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for letter in\
    \ s {\n        result += (Int(letter) - '0') + 10\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpcwnybbt0.swift:21:34: error: single-quoted string literal found,\
    \ use '\"'\n        result += (Int(letter) - '0') + 10\n                     \
    \            ^~~\n                                 \"0\"\n/tmp/tmpcwnybbt0.swift:21:20:\
    \ error: no exact matches in call to initializer \n        result += (Int(letter)\
    \ - '0') + 10\n                   ^\n/tmp/tmpcwnybbt0.swift:21:20: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'Character')\n       \
    \ result += (Int(letter) - '0') + 10\n                   ^\n/tmp/tmpcwnybbt0.swift:21:20:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \        result += (Int(letter) - '0') + 10\n                   ^\n/tmp/tmpcwnybbt0.swift:21:20:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \        result += (Int(letter) - '0') + 10\n                   ^\n/tmp/tmpcwnybbt0.swift:21:20:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \        result += (Int(letter) - '0') + 10\n                   ^\n/tmp/tmpcwnybbt0.swift:21:20:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n        result += (Int(letter) - '0') + 10\n                 \
    \  ^\n/tmp/tmpcwnybbt0.swift:21:20: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n        result += (Int(letter) - '0') +\
    \ 10\n                   ^\n/tmp/tmpcwnybbt0.swift:21:34: error: cannot convert\
    \ value of type 'String' to expected argument type 'Int'\n        result += (Int(letter)\
    \ - '0') + 10\n                                 ^\n"
  stdout: ''
  timestamp: 1659980077
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var charArray = [Character]()\n  var\
    \ result = 0\n  for char in s.characters {\n    if char.isUpper() {\n      charArray.append(char)\n\
    \    }\n  }\n  for char in charArray {\n    result += Int(char)\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") ==\
    \ 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\n\
    assert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\n\
    assert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\"\
    ) == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpitxikmr7.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  for char in s.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpitxikmr7.swift:22:13:\
    \ error: value of type 'Character' has no member 'isUpper'\n    if char.isUpper()\
    \ {\n       ~~~~ ^~~~~~~\n/tmp/tmpitxikmr7.swift:27:15: error: no exact matches\
    \ in call to initializer \n    result += Int(char)\n              ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn digitSumHelper(s.characters.reduce(0)\
    \ { $0 + Int($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpq7hnlucu.swift:19:9: error: cannot find 'digitSumHelper' in scope\n\
    \        return digitSumHelper(s.characters.reduce(0) { $0 + Int($1) })\n    \
    \           ^~~~~~~~~~~~~~\n/tmp/tmpq7hnlucu.swift:19:54: error: no exact matches\
    \ in call to initializer \n        return digitSumHelper(s.characters.reduce(0)\
    \ { $0 + Int($1) })\n                                                        \
    \    ^\n/tmp/tmpq7hnlucu.swift:19:54: note: found candidate with type '(Float16)\
    \ -> Int'\n        return digitSumHelper(s.characters.reduce(0) { $0 + Int($1)\
    \ })\n                                                            ^\n/tmp/tmpq7hnlucu.swift:19:54:\
    \ note: found candidate with type '(Float) -> Int'\n        return digitSumHelper(s.characters.reduce(0)\
    \ { $0 + Int($1) })\n                                                        \
    \    ^\n/tmp/tmpq7hnlucu.swift:19:54: note: found candidate with type '(Double)\
    \ -> Int'\n        return digitSumHelper(s.characters.reduce(0) { $0 + Int($1)\
    \ })\n                                                            ^\n/tmp/tmpq7hnlucu.swift:19:54:\
    \ note: found candidate with type '(Float80) -> Int'\n        return digitSumHelper(s.characters.reduce(0)\
    \ { $0 + Int($1) })\n                                                        \
    \    ^\n/tmp/tmpq7hnlucu.swift:19:54: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        return digitSumHelper(s.characters.reduce(0) { $0 + Int($1)\
    \ })\n                                                            ^\n/tmp/tmpq7hnlucu.swift:19:54:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        return digitSumHelper(s.characters.reduce(0)\
    \ { $0 + Int($1) })\n                                                        \
    \    ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet result = s.filter { $0.isUppercase\
    \ }.map { Int($0, radix: 16).reduce(0, +) }.reduce(0, +)\n\tguard result != 0\
    \ else { return 0 }\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps61zcqiq.swift:19:68: error: value of type 'Int?' has no member\
    \ 'reduce'\n        let result = s.filter { $0.isUppercase }.map { Int($0, radix:\
    \ 16).reduce(0, +) }.reduce(0, +)\n                                          \
    \             ~~~~~~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmps61zcqiq.swift:19:49: error:\
    \ initializer 'init(_:radix:)' requires that 'String.Element' (aka 'Character')\
    \ conform to 'StringProtocol'\n        let result = s.filter { $0.isUppercase\
    \ }.map { Int($0, radix: 16).reduce(0, +) }.reduce(0, +)\n                   \
    \                                    ^\nSwift.FixedWidthInteger:2:23: note: where\
    \ 'S' = 'String.Element' (aka 'Character')\n    @inlinable public init?<S>(_ text:\
    \ S, radix: Int = 10) where S : StringProtocol\n                      ^\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var total: Int = 0\n\n  for s in s\
    \ {\n    total += Int(s.unicodeScalars.filter({ $0 > Character.UnicodeBlock.UppercaseLetterSpace\
    \ }).reduce(0) { $0 + $1 })\n  }\n\n  return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp6npq4da5.swift:22:113: error: cannot convert value of type 'Unicode.Scalar'\
    \ to expected argument type 'Int'\n    total += Int(s.unicodeScalars.filter({\
    \ $0 > Character.UnicodeBlock.UppercaseLetterSpace }).reduce(0) { $0 + $1 })\n\
    \                                                                            \
    \                                    ^\n/tmp/tmp6npq4da5.swift:22:59: error: type\
    \ 'Character' has no member 'UnicodeBlock'\n    total += Int(s.unicodeScalars.filter({\
    \ $0 > Character.UnicodeBlock.UppercaseLetterSpace }).reduce(0) { $0 + $1 })\n\
    \                                                ~~~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for index in 0\
    \ ..< s.count {\n        let codePoint = s[index]\n        sum += Int(UnicodeScalar(codePoint).value)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2h1z0rch.swift:21:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let codePoint\
    \ = s[index]\n                        ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2h1z0rch.swift:22:20: error: no exact\
    \ matches in call to initializer \n        sum += Int(UnicodeScalar(codePoint).value)\n\
    \                   ^\nSwift.Unicode.Scalar:7:23: note: candidate expects value\
    \ of type 'UInt8' for parameter #1 (got 'Character')\n    @inlinable public init(_\
    \ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23: note: candidate\
    \ expects value of type 'Unicode.Scalar' for parameter #1 (got 'Character')\n\
    \    @inlinable public init(_ v: Unicode.Scalar)\n                      ^\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var result = Int(0)\n  for _, b in\
    \ s.unicodeScalars {\n    if b > 0xffff {\n      break\n    }\n    result *= 256\n\
    \    result += Int(b)\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmppsoepu10.swift:20:8: error: expected 'in' after for-each pattern\n\
    \  for _, b in s.unicodeScalars {\n       ^\n/tmp/tmppsoepu10.swift:20:8: error:\
    \ expected Sequence expression for for-each loop\n  for _, b in s.unicodeScalars\
    \ {\n       ^\n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            result = result * 16 + Int(c)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpb_3n56sk.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpb_3n56sk.swift:22:36:\
    \ error: no exact matches in call to initializer \n            result = result\
    \ * 16 + Int(c)\n                                   ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects\
    \ value of type 'Float' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Double)\n           ^\nSwift.Int:14:12: note: candidate expects value of type\
    \ 'Float80' for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n\
    \           ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tresult := 0\n\tfor i in 0..<s.characters.count\
    \ {\n\t\tswitch s[i] {\n\t\tcase '0': result += 48\n\t\tcase '1': result += 49\n\
    \t\tcase '2': result += 50\n\t\tcase '3': result += 51\n\t\tcase '4': result +=\
    \ 52\n\t\tcase '5': result += 53\n\t\tcase '6': result += 54\n\t\tcase '7': result\
    \ += 55\n\t\tcase '8': result += 56\n\t\tcase '9': result += 57\n\t\tdefault:\n\
    \t\t\tbreak\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzfnfghvv.swift:19:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        result := 0\n              ^\n              ;\n\
    /tmp/tmpzfnfghvv.swift:19:9: error: expected expression\n        result := 0\n\
    \               ^\n/tmp/tmpzfnfghvv.swift:22:8: error: single-quoted string literal\
    \ found, use '\"'\n                case '0': result += 48\n                  \
    \   ^~~\n                     \"0\"\n/tmp/tmpzfnfghvv.swift:23:8: error: single-quoted\
    \ string literal found, use '\"'\n                case '1': result += 49\n   \
    \                  ^~~\n                     \"1\"\n/tmp/tmpzfnfghvv.swift:24:8:\
    \ error: single-quoted string literal found, use '\"'\n                case '2':\
    \ result += 50\n                     ^~~\n                     \"2\"\n/tmp/tmpzfnfghvv.swift:25:8:\
    \ error: single-quoted string literal found, use '\"'\n                case '3':\
    \ result += 51\n                     ^~~\n                     \"3\"\n/tmp/tmpzfnfghvv.swift:26:8:\
    \ error: single-quoted string literal found, use '\"'\n                case '4':\
    \ result += 52\n                     ^~~\n                     \"4\"\n/tmp/tmpzfnfghvv.swift:27:8:\
    \ error: single-quoted string literal found, use '\"'\n                case '5':\
    \ result += 53\n                     ^~~\n                     \"5\"\n/tmp/tmpzfnfghvv.swift:28:8:\
    \ error: single-quoted string literal found, use '\"'\n                case '6':\
    \ result += 54\n                     ^~~\n                     \"6\"\n/tmp/tmpzfnfghvv.swift:29:8:\
    \ error: single-quoted string literal found, use '\"'\n                case '7':\
    \ result += 55\n                     ^~~\n                     \"7\"\n/tmp/tmpzfnfghvv.swift:30:8:\
    \ error: single-quoted string literal found, use '\"'\n                case '8':\
    \ result += 56\n                     ^~~\n                     \"8\"\n/tmp/tmpzfnfghvv.swift:31:8:\
    \ error: single-quoted string literal found, use '\"'\n                case '9':\
    \ result += 57\n                     ^~~\n                     \"9\"\n/tmp/tmpzfnfghvv.swift:19:2:\
    \ error: cannot find 'result' in scope\n        result := 0\n        ^~~~~~\n\
    /tmp/tmpzfnfghvv.s"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    var i = 0\n   \
    \ while i < s.characters.count {\n        if Int(s[i]) > 96 && Int(s[i]) < 122\
    \ {\n            sum += Int(s[i])\n        } else {\n            sum += 64\n \
    \       }\n        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpdf4g2hbz.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    while i < s.characters.count {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdf4g2hbz.swift:22:30:\
    \ error: no exact matches in call to initializer \n        if Int(s[i]) > 96 &&\
    \ Int(s[i]) < 122 {\n                             ^\n/tmp/tmpdf4g2hbz.swift:22:30:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \        if Int(s[i]) > 96 && Int(s[i]) < 122 {\n                            \
    \ ^\n/tmp/tmpdf4g2hbz.swift:22:30: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n        if Int(s[i]) > 96 && Int(s[i]) <\
    \ 122 {\n                             ^\n/tmp/tmpdf4g2hbz.swift:22:30: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'Character')\n        if\
    \ Int(s[i]) > 96 && Int(s[i]) < 122 {\n                             ^\n/tmp/tmpdf4g2hbz.swift:22:30:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \        if Int(s[i]) > 96 && Int(s[i]) < 122 {\n                            \
    \ ^\n/tmp/tmpdf4g2hbz.swift:22:30: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n        if Int(s[i]) > 96 && Int(s[i]) <\
    \ 122 {\n                             ^\n/tmp/tmpdf4g2hbz.swift:22:30: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n  \
    \      if Int(s[i]) > 96 && Int(s[i]) < 122 {\n                             ^\n\
    /tmp/tmpdf4g2hbz.swift:22:12: error: no exact matches in call to initializer \n\
    \        if Int(s[i]) > 96 && Int(s[i]) < 122 {\n           ^\n/tmp/tmpdf4g2hbz.swift:22:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \        if Int(s[i]) > 96 && Int(s[i]) < 122 {\n           ^\n/tmp/tmpdf4g2hbz.swift:22:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \        if Int(s[i]) > 96 && Int("
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return sumOfDigits(s.characters().map()\
    \ {\n        let c = _0\n        let cDigit = getASCIICode(c)\n        if cDigit\
    \ > 64 {\n            cDigit = 64\n        }\n        c += cDigit\n        return\
    \ c\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") ==\
    \ 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\n\
    assert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\n\
    assert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\"\
    ) == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4kvn6c78.swift:19:12: error: cannot find 'sumOfDigits' in scope\n\
    \    return sumOfDigits(s.characters().map() {\n           ^~~~~~~~~~~\n/tmp/tmp4kvn6c78.swift:20:17:\
    \ error: cannot find '_0' in scope\n        let c = _0\n                ^~\n/tmp/tmp4kvn6c78.swift:21:22:\
    \ error: cannot find 'getASCIICode' in scope\n        let cDigit = getASCIICode(c)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980074
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let sum = s.reduce(0, combine: {\
    \ $0 + Int($1) < Int($2) ? Int($1) + Int($2) : Int($1) + Int($2) })\n    return\
    \ sum > Int(128) ? sum - Int(128) + Int(128) : sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpk6vav6vd.swift:19:15: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let sum = s.reduce(0, combine: { $0 + Int($1) < Int($2)\
    \ ? Int($1) + Int($2) : Int($1) + Int($2) })\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660004016
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn Int32(s.characters.reduce(0,{$0+$1}).uppercaseString.characters.reduce(0,{$0+$1}))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp9wnyfmd1.swift:19:41: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        return Int32(s.characters.reduce(0,{$0+$1}).uppercaseString.characters.reduce(0,{$0+$1}))\n\
    \                                               ^\n/tmp/tmp9wnyfmd1.swift:19:9:\
    \ error: no 'init' candidates produce the expected contextual result type 'Int'\n\
    \        return Int32(s.characters.reduce(0,{$0+$1}).uppercaseString.characters.reduce(0,{$0+$1}))\n\
    \               ^\nSwift.Int32:9:12: note: 'init(_:)' produces 'Int32', not the\
    \ expected contextual result type 'Int'\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int32:9:12: note: 'init(_:)' produces 'Int32', not the expected\
    \ contextual result type 'Int'\n    public init(_ source: Float16)\n         \
    \  ^\nSwift.Int32:9:12: note: 'init(_:)' produces 'Int32', not the expected contextual\
    \ result type 'Int'\n    public init(_ source: Float16)\n           ^\nSwift.Int32:9:12:\
    \ note: 'init(_:)' produces 'Int32', not the expected contextual result type 'Int'\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int32:9:12: note: 'init(_:)'\
    \ produces 'Int32', not the expected contextual result type 'Int'\n    public\
    \ init(_ source: Float16)\n           ^\nSwift.Int32:9:12: note: 'init(_:)' produces\
    \ 'Int32', not the expected contextual result type 'Int'\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int32:9:12: note: 'init(_:)' produces 'Int32',\
    \ not the expected contextual result type 'Int'\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int32:9:12: note: 'init(_:)' produces 'Int32', not the expected\
    \ contextual result type 'Int'\n    public init(_ source: Float16)\n         \
    \  ^\nSwift.Int32:9:12: note: 'init(_:)' produces 'Int32', not the expected contextual\
    \ result type 'Int'\n    public init(_ source: Float16)\n           ^\nSwift.Int32:9:12:\
    \ note: 'init(_:)' produces 'Int32', not the expected contextual result type 'Int'\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int32:9:12: note: 'init(_:)'\
    \ produces 'Int32', not the expected contex"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i : Int in\
    \ s.unicodeScalars.filter({ $0.value > 0 }) {\n        sum += Int(i)\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgdctduxv.swift:20:37: error: cannot convert sequence element type\
    \ 'Unicode.Scalar' to expected type 'Int'\n    for i : Int in s.unicodeScalars.filter({\
    \ $0.value > 0 }) {\n                                    ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet re = NSRegularExpression.regularExpressionWithPattern(\"\
    ^.*?([A-Z0-9])\", options: nil, error: nil)\n\tvar num: Int = 0\n\tre.enumerateMatchesInString(s,\
    \ options: nil, range: NSMakeRange(0, s.characters.count)).forEach({(match, _)\
    \ in\n\t\tnum += Int(s.substringWithRange(match.rangeAtIndex(0)).uppercaseStringWithLocale(NSLocale(localeIdentifier:\
    \ \"en_US_POSIX\")).integerValue)!\n\t})\n\treturn num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_skydhj8.swift:19:11: error: cannot find 'NSRegularExpression'\
    \ in scope\n        let re = NSRegularExpression.regularExpressionWithPattern(\"\
    ^.*?([A-Z0-9])\", options: nil, error: nil)\n                 ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_skydhj8.swift:19:87: error: 'nil' requires a contextual type\n      \
    \  let re = NSRegularExpression.regularExpressionWithPattern(\"^.*?([A-Z0-9])\"\
    , options: nil, error: nil)\n                                                \
    \                                             ^\n/tmp/tmp_skydhj8.swift:19:99:\
    \ error: 'nil' requires a contextual type\n        let re = NSRegularExpression.regularExpressionWithPattern(\"\
    ^.*?([A-Z0-9])\", options: nil, error: nil)\n                                \
    \                                                                         ^\n\
    /tmp/tmp_skydhj8.swift:21:54: error: cannot find 'NSMakeRange' in scope\n    \
    \    re.enumerateMatchesInString(s, options: nil, range: NSMakeRange(0, s.characters.count)).forEach({(match,\
    \ _) in\n                                                            ^~~~~~~~~~~\n\
    /tmp/tmp_skydhj8.swift:22:84: error: cannot find 'NSLocale' in scope\n       \
    \         num += Int(s.substringWithRange(match.rangeAtIndex(0)).uppercaseStringWithLocale(NSLocale(localeIdentifier:\
    \ \"en_US_POSIX\")).integerValue)!\n                                         \
    \                                                        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce { $0 + Int($1) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpp_9adgdi.swift:19:28: error: no exact matches in call to initializer\
    \ \n    return s.reduce { $0 + Int($1) }\n                           ^\n/tmp/tmpp_9adgdi.swift:19:28:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got '(Int,\
    \ String.Element) -> Int' (aka '(Int, Character) -> Int'))\n    return s.reduce\
    \ { $0 + Int($1) }\n                           ^\n/tmp/tmpp_9adgdi.swift:19:28:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got '(Int, String.Element)\
    \ -> Int' (aka '(Int, Character) -> Int'))\n    return s.reduce { $0 + Int($1)\
    \ }\n                           ^\n/tmp/tmpp_9adgdi.swift:19:28: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got '(Int, String.Element)\
    \ -> Int' (aka '(Int, Character) -> Int'))\n    return s.reduce { $0 + Int($1)\
    \ }\n                           ^\n/tmp/tmpp_9adgdi.swift:19:28: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got '(Int, String.Element)\
    \ -> Int' (aka '(Int, Character) -> Int'))\n    return s.reduce { $0 + Int($1)\
    \ }\n                           ^\n/tmp/tmpp_9adgdi.swift:19:28: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got '(Int, String.Element)\
    \ -> Int' (aka '(Int, Character) -> Int'))\n    return s.reduce { $0 + Int($1)\
    \ }\n                           ^\n/tmp/tmpp_9adgdi.swift:19:28: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got '(Int, String.Element)\
    \ -> Int' (aka '(Int, Character) -> Int'))\n    return s.reduce { $0 + Int($1)\
    \ }\n                           ^\n/tmp/tmpp_9adgdi.swift:19:20: error: missing\
    \ argument for parameter #1 in call\n    return s.reduce { $0 + Int($1) }\n  \
    \                 ^\n                   (<#Int#>)\nSwift.Sequence:2:28: note:\
    \ 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n    var result = s[0]\n    for index, _ := range s {\n        result +=\
    \ (Int(s[index]) - 96) * Int(s[index])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp003fch9y.swift:23:14: error: expected 'in' after for-each pattern\n\
    \    for index, _ := range s {\n             ^\n/tmp/tmp003fch9y.swift:23:14:\
    \ error: expected Sequence expression for for-each loop\n    for index, _ := range\
    \ s {\n             ^\n/tmp/tmp003fch9y.swift:22:18: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var result = s[0]\n                 ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp003fch9y.swift:26:12: error: cannot\
    \ convert return expression of type 'Character' to return type 'Int'\n    return\
    \ result\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn s.reduce(0, { $0 + Int(String($1))\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2mydzj_6.swift:19:28: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return s.reduce(0, { $0 + Int(String($1))\
    \ })\n                                  ^\n/tmp/tmp2mydzj_6.swift:19:28: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        return s.reduce(0, { $0 + Int(String($1)) })\n                      \
    \            ^\n                                  (               ?? <#default\
    \ value#>)\n/tmp/tmp2mydzj_6.swift:19:28: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        return s.reduce(0, {\
    \ $0 + Int(String($1)) })\n                                  ^\n             \
    \                                    !\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: { $0\
    \ + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") ==\
    \ 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\n\
    assert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\n\
    assert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\"\
    ) == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpt8s_qw4c.swift:19:40: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n    return s.reduce(0, combine:\
    \ { $0 + $1 })\n                                       ^\n/tmp/tmpt8s_qw4c.swift:19:20:\
    \ error: extraneous argument label 'combine:' in call\n    return s.reduce(0,\
    \ combine: { $0 + $1 })\n                   ^   ~~~~~~~~~\n                  \
    \     \n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.scanCharacters(from: NSMakeRange(0,\
    \ s.count), into: nil).reduce(0) { (accum, element) -> Int in\n        if element\
    \ > 47 { return accum }\n        return accum + Int(element)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp0yw0ylp_.swift:19:35: error: cannot find 'NSMakeRange' in scope\n\
    \    return s.scanCharacters(from: NSMakeRange(0, s.count), into: nil).reduce(0)\
    \ { (accum, element) -> Int in\n                                  ^~~~~~~~~~~\n\
    /tmp/tmp0yw0ylp_.swift:19:14: error: value of type 'String' has no member 'scanCharacters'\n\
    \    return s.scanCharacters(from: NSMakeRange(0, s.count), into: nil).reduce(0)\
    \ { (accum, element) -> Int in\n           ~ ^~~~~~~~~~~~~~\n/tmp/tmp0yw0ylp_.swift:19:66:\
    \ error: 'nil' requires a contextual type\n    return s.scanCharacters(from: NSMakeRange(0,\
    \ s.count), into: nil).reduce(0) { (accum, element) -> Int in\n              \
    \                                                   ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet chars = s.characters\n\tlet isDigit\
    \ = CharacterSet.decimalDigits.isSupersetOfSet(CharacterSet(chars))\n\tlet digitSum\
    \ = chars.reduce(0, combine: +)\n\treturn digitSum + Int(isDigit)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf1bzw1cr.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        let chars = s.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpf1bzw1cr.swift:20:16:\
    \ error: cannot find 'CharacterSet' in scope\n        let isDigit = CharacterSet.decimalDigits.isSupersetOfSet(CharacterSet(chars))\n\
    \                      ^~~~~~~~~~~~\n/tmp/tmpf1bzw1cr.swift:20:59: error: cannot\
    \ find 'CharacterSet' in scope\n        let isDigit = CharacterSet.decimalDigits.isSupersetOfSet(CharacterSet(chars))\n\
    \                                                                 ^~~~~~~~~~~~\n\
    /tmp/tmpf1bzw1cr.swift:21:29: error: extraneous argument label 'combine:' in call\n\
    \        let digitSum = chars.reduce(0, combine: +)\n                        \
    \           ^   ~~~~~~~~~\n                                       \n/tmp/tmpf1bzw1cr.swift:21:42:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, String.Element) throws -> Int' (aka '(Int, Character) throws -> Int')\n\
    \        let digitSum = chars.reduce(0, combine: +)\n                        \
    \                        ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = Int(0)\n    for _, b :=\
    \ range s {\n        sum += Int(string(b))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpmbhfnjrw.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range s {\n         ^\n/tmp/tmpmbhfnjrw.swift:20:10: error: expected\
    \ Sequence expression for for-each loop\n    for _, b := range s {\n         ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = Int(s).reduce(0) {\
    \ $0 + $1 }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwf6m68nh.swift:19:25: error: value of type 'Int?' has no member\
    \ 'reduce'\n    let result = Int(s).reduce(0) { $0 + $1 }\n                 ~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n\n    for index\
    \ in 0..<s.count {\n        let character = s[index]\n        if character >=\
    \ \"a\" && character <= \"z\" {\n            result += Int(character - \"a\")\n\
    \        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpr_li7f1s.swift:22:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let character\
    \ = s[index]\n                        ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpr_li7f1s.swift:24:37: error: binary\
    \ operator '-' cannot be applied to two 'Character' operands\n            result\
    \ += Int(character - \"a\")\n                          ~~~~~~~~~ ^ ~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    let sum = s.characters.reduce(0)\
    \ { (acc, c) -> Int in\n        let digit = Int(c)\n        if (digit > 47 &&\
    \ digit < 58) {\n            acc += digit - 48\n        }\n        return acc\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbd959m0x.swift:21:21: error: no exact matches in call to initializer\
    \ \n        let digit = Int(c)\n                    ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn s.countByReduce {\n\t\t$0.unicodeScalars.reduce(0)\
    \ {\n\t\t\t$0 + Int($1.value) + Int($2.value)\n\t\t}\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpt0xn4k6e.swift:19:9: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return s.countByReduce {\n               ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660003984
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return sum(s.characters)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpmug4h4b_.swift:19:12: error: cannot find 'sum' in scope\n    return\
    \ sum(s.characters)\n           ^~~\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.reduce(0) { (sum:\
    \ Int, ch: Character) -> Int in\n        let char = Int(ch)\n        if char >\
    \ 48 { // 'A' .. 'Z'\n            return sum + char - 65\n        }\n        return\
    \ sum + char\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp6pst404d.swift:20:20: error: no exact matches in call to initializer\
    \ \n        let char = Int(ch)\n                   ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects\
    \ value of type 'Float' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Double)\n           ^\nSwift.Int:14:12: note: candidate expects value of type\
    \ 'Float80' for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n\
    \           ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i := 0; i <\
    \ len(s); i++ {\n        var code : Int\n        if i < len(s) && s[i].isUpper()\
    \ {\n            code = s[i].unicodeScalars.reduce(0){$0 + $1}\n        } else\
    \ {\n            code = s[i]\n        }\n        sum = sum + code\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpy37obz4s.swift:20:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpy37obz4s.swift:20:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmpy37obz4s.swift:20:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.characters\
    \ {\n        if char.unicodeScalars.filter{$0.isUpper}.count > 0 {\n         \
    \   sum += char.unicodeScalars.filter{$0.isUpper}.map {$0.value}.reduce(0,+)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbd1ysh_x.swift:20:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbd1ysh_x.swift:21:42:\
    \ error: value of type 'Unicode.Scalar' has no member 'isUpper'\n        if char.unicodeScalars.filter{$0.isUpper}.count\
    \ > 0 {\n                                      ~~ ^~~~~~~\n/tmp/tmpbd1ysh_x.swift:22:67:\
    \ error: cannot convert value of type 'UInt32' to closure result type 'Int'\n\
    \            sum += char.unicodeScalars.filter{$0.isUpper}.map {$0.value}.reduce(0,+)\n\
    \                                                               ~~~^~~~~\n   \
    \                                                            Int(    )\n/tmp/tmpbd1ysh_x.swift:22:50:\
    \ error: value of type 'Unicode.Scalar' has no member 'isUpper'\n            sum\
    \ += char.unicodeScalars.filter{$0.isUpper}.map {$0.value}.reduce(0,+)\n     \
    \                                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tvar sum = 0\n\tfor ch in s {\n\t\t\
    sum += Int(ch) - Int(Int(ch))!\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpqtb_cimu.swift:21:24: error: no exact matches in call to initializer\
    \ \n                sum += Int(ch) - Int(Int(ch))!\n                         \
    \            ^\n/tmp/tmpqtb_cimu.swift:21:24: note: found candidate with type\
    \ '(Float16) -> Int'\n                sum += Int(ch) - Int(Int(ch))!\n       \
    \                              ^\n/tmp/tmpqtb_cimu.swift:21:24: note: found candidate\
    \ with type '(Float) -> Int'\n                sum += Int(ch) - Int(Int(ch))!\n\
    \                                     ^\n/tmp/tmpqtb_cimu.swift:21:24: note: found\
    \ candidate with type '(Double) -> Int'\n                sum += Int(ch) - Int(Int(ch))!\n\
    \                                     ^\n/tmp/tmpqtb_cimu.swift:21:24: note: found\
    \ candidate with type '(Float80) -> Int'\n                sum += Int(ch) - Int(Int(ch))!\n\
    \                                     ^\n/tmp/tmpqtb_cimu.swift:21:24: note: found\
    \ candidate with type '(Builtin.Int64) -> Int'\n                sum += Int(ch)\
    \ - Int(Int(ch))!\n                                     ^\n/tmp/tmpqtb_cimu.swift:21:24:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n                sum\
    \ += Int(ch) - Int(Int(ch))!\n                                     ^\n/tmp/tmpqtb_cimu.swift:21:24:\
    \ error: missing argument label 'exactly:' in call\n                sum += Int(ch)\
    \ - Int(Int(ch))!\n                                     ^\n                  \
    \                   exactly: \n/tmp/tmpqtb_cimu.swift:21:10: error: no exact matches\
    \ in call to initializer \n                sum += Int(ch) - Int(Int(ch))!\n  \
    \                     ^\n/tmp/tmpqtb_cimu.swift:21:10: note: found candidate with\
    \ type '(Float16) -> Int'\n                sum += Int(ch) - Int(Int(ch))!\n  \
    \                     ^\n/tmp/tmpqtb_cimu.swift:21:10: note: found candidate with\
    \ type '(Float) -> Int'\n                sum += Int(ch) - Int(Int(ch))!\n    \
    \                   ^\n/tmp/tmpqtb_cimu.swift:21:10: note: found candidate with\
    \ type '(Double) -> Int'\n                sum += Int(ch) - Int(Int(ch))!\n   \
    \                    ^\n/tmp/tmpqtb_cimu.swift:21:10: note: found candidate with"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.uppercased().reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2bzhjw77.swift:19:37: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, String.Element) throws -> Int' (aka\
    \ '(Int, Character) throws -> Int')\n    return s.uppercased().reduce(0, +)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var acc = 0\n    for _, b := range\
    \ s {\n        if b >= '0' && b <= '9' {\n            acc += int(b) - '0'\n  \
    \      }\n    }\n    return acc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpda03tfgd.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range s {\n         ^\n/tmp/tmpda03tfgd.swift:20:10: error: expected\
    \ Sequence expression for for-each loop\n    for _, b := range s {\n         ^\n\
    /tmp/tmpda03tfgd.swift:21:17: error: single-quoted string literal found, use '\"\
    '\n        if b >= '0' && b <= '9' {\n                ^~~\n                \"\
    0\"\n/tmp/tmpda03tfgd.swift:21:29: error: single-quoted string literal found,\
    \ use '\"'\n        if b >= '0' && b <= '9' {\n                            ^~~\n\
    \                            \"9\"\n/tmp/tmpda03tfgd.swift:22:29: error: single-quoted\
    \ string literal found, use '\"'\n            acc += int(b) - '0'\n          \
    \                  ^~~\n                            \"0\"\n"
  stdout: ''
  timestamp: 1660003953
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        let code = char.asciiValue\n        sum += code > 96 ? code - 87 : code\
    \ - 48\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpdto3xhvi.swift:22:16: error: value of optional type 'UInt8?' must\
    \ be unwrapped to a value of type 'UInt8'\n        sum += code > 96 ? code - 87\
    \ : code - 48\n               ^\n/tmp/tmpdto3xhvi.swift:22:16: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     sum += code > 96 ? code - 87 : code - 48\n               ^\n           \
    \         ?? <#default value#>\n/tmp/tmpdto3xhvi.swift:22:16: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        sum\
    \ += code > 96 ? code - 87 : code - 48\n               ^\n                   !\n\
    /tmp/tmpdto3xhvi.swift:22:28: error: cannot convert value of type 'UInt8?' to\
    \ expected argument type 'Int'\n        sum += code > 96 ? code - 87 : code -\
    \ 48\n                           ^\n/tmp/tmpdto3xhvi.swift:22:40: error: cannot\
    \ convert value of type 'UInt8?' to expected argument type 'Int'\n        sum\
    \ += code > 96 ? code - 87 : code - 48\n                                     \
    \  ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet s = String(s.utf16)\n\tlet count\
    \ = s.count\n\n\tlet maxDigit = s.max(of: CharacterSet.uppercaseLetters)\n\n\t\
    let maxDigitCount = Int(maxDigit.utf8.count)\n\n\treturn count * maxDigitCount\
    \ + maxDigitCount.reduce(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp9jra70rm.swift:22:27: error: cannot find 'CharacterSet' in scope\n\
    \        let maxDigit = s.max(of: CharacterSet.uppercaseLetters)\n           \
    \                      ^~~~~~~~~~~~\n/tmp/tmp9jra70rm.swift:22:22: error: incorrect\
    \ argument label in call (have 'of:', expected 'by:')\n        let maxDigit =\
    \ s.max(of: CharacterSet.uppercaseLetters)\n                            ^~~\n\
    \                             by\n/tmp/tmp9jra70rm.swift:22:40: error: converting\
    \ non-escaping value to '(String.Element, String.Element) throws -> Bool' (aka\
    \ '(Character, Character) throws -> Bool') may allow it to escape\n        let\
    \ maxDigit = s.max(of: CharacterSet.uppercaseLetters)\n                      \
    \                        ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let n = s.characters.reduce(0, +)\n\
    \    return n - s.unicodeScalars.filter{$0.value > 48 && $0.value < 58}.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpn5easp1m.swift:19:36: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, String.Element) throws -> Int' (aka\
    \ '(Int, Character) throws -> Int')\n    let n = s.characters.reduce(0, +)\n \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for character\
    \ in s.characters {\n        result += Int(character) - Int(Int(character)!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpiyakub9s.swift:20:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in s.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpiyakub9s.swift:21:19:\
    \ error: no exact matches in call to initializer \n        result += Int(character)\
    \ - Int(Int(character)!)\n                  ^\n/tmp/tmpiyakub9s.swift:21:19: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \        result += Int(character) - Int(Int(character)!)\n                  ^\n\
    /tmp/tmpiyakub9s.swift:21:19: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n        result += Int(character) - Int(Int(character)!)\n\
    \                  ^\n/tmp/tmpiyakub9s.swift:21:19: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'Character')\n        result += Int(character)\
    \ - Int(Int(character)!)\n                  ^\n/tmp/tmpiyakub9s.swift:21:19: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \        result += Int(character) - Int(Int(character)!)\n                  ^\n\
    /tmp/tmpiyakub9s.swift:21:19: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n        result += Int(character) - Int(Int(character)!)\n\
    \                  ^\n/tmp/tmpiyakub9s.swift:21:19: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n        result +=\
    \ Int(character) - Int(Int(character)!)\n                  ^\n/tmp/tmpiyakub9s.swift:21:44:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        result += Int(character) - Int(Int(character)!)\n                   \
    \                        ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result: Int = s.characters.reduce(0)\
    \ {\n        (accumulator, character) -> Int in\n        let ascii = Int(character)\n\
    \        return (accumulator + ascii)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwd6pjrrn.swift:21:21: error: no exact matches in call to initializer\
    \ \n        let ascii = Int(character)\n                    ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var sum: Int = 0\n  for c in s.characters\
    \ {\n    if c.isUpper() {\n      sum += Int(c)\n    }\n  }\n  return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxj0prz99.swift:20:14: error: 'characters' is unavailable: Please\
    \ use String directly\n  for c in s.characters {\n             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpxj0prz99.swift:21:10: error: value of\
    \ type 'Character' has no member 'isUpper'\n    if c.isUpper() {\n       ~ ^~~~~~~\n\
    /tmp/tmpxj0prz99.swift:22:14: error: no exact matches in call to initializer \n\
    \      sum += Int(c)\n             ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.reduce(0, combine(|acc, _|\
    \ acc * 256 + _))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpot9kyil4.swift:19:39: error: expected ',' separator\n  return s.reduce(0,\
    \ combine(|acc, _| acc * 256 + _))\n                                      ^\n\
    \                                     ,\n/tmp/tmpot9kyil4.swift:19:22: error:\
    \ cannot find 'combine' in scope\n  return s.reduce(0, combine(|acc, _| acc *\
    \ 256 + _))\n                     ^~~~~~~\n/tmp/tmpot9kyil4.swift:19:30: error:\
    \ '|' is not a prefix unary operator\n  return s.reduce(0, combine(|acc, _| acc\
    \ * 256 + _))\n                             ^\n/tmp/tmpot9kyil4.swift:19:31: error:\
    \ cannot find 'acc' in scope\n  return s.reduce(0, combine(|acc, _| acc * 256\
    \ + _))\n                              ^~~\n/tmp/tmpot9kyil4.swift:19:37: error:\
    \ '|' is not a postfix unary operator\n  return s.reduce(0, combine(|acc, _| acc\
    \ * 256 + _))\n                                    ^\n/tmp/tmpot9kyil4.swift:19:36:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \  return s.reduce(0, combine(|acc, _| acc * 256 + _))\n                     \
    \              ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _char in s.characters\
    \ {\n        if _char >= '0' && _char <= '9' {\n            sum += Int(_char)\
    \ - '0'\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpmch7l8rj.swift:21:21: error: single-quoted string literal found,\
    \ use '\"'\n        if _char >= '0' && _char <= '9' {\n                    ^~~\n\
    \                    \"0\"\n/tmp/tmpmch7l8rj.swift:21:37: error: single-quoted\
    \ string literal found, use '\"'\n        if _char >= '0' && _char <= '9' {\n\
    \                                    ^~~\n                                   \
    \ \"9\"\n/tmp/tmpmch7l8rj.swift:22:33: error: single-quoted string literal found,\
    \ use '\"'\n            sum += Int(_char) - '0'\n                            \
    \    ^~~\n                                \"0\"\n/tmp/tmpmch7l8rj.swift:20:20:\
    \ error: 'characters' is unavailable: Please use String directly\n    for _char\
    \ in s.characters {\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmch7l8rj.swift:22:20: error: no exact matches in call\
    \ to initializer \n            sum += Int(_char) - '0'\n                   ^\n\
    /tmp/tmpmch7l8rj.swift:22:20: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n            sum += Int(_char) - '0'\n  \
    \                 ^\n/tmp/tmpmch7l8rj.swift:22:20: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n            sum += Int(_char)\
    \ - '0'\n                   ^\n/tmp/tmpmch7l8rj.swift:22:20: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n            sum +=\
    \ Int(_char) - '0'\n                   ^\n/tmp/tmpmch7l8rj.swift:22:20: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \            sum += Int(_char) - '0'\n                   ^\n/tmp/tmpmch7l8rj.swift:22:20:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n            sum += Int(_char) - '0'\n                   ^\n/tmp/tmpmch7l8rj.swift:22:20:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \            sum += Int(_char) - '0'\n                   ^\n/tmp/tmpmch7l8rj.swift:22:33:\
    \ error: ca"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.filter({$0 >= 'a'\
    \ && $0 <= 'z'}).reduce(0, { $0 + Int($1) })\n    return result % 10\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmprguamt3z.swift:19:34: error: single-quoted string literal found,\
    \ use '\"'\n    let result = s.filter({$0 >= 'a' && $0 <= 'z'}).reduce(0, { $0\
    \ + Int($1) })\n                                 ^~~\n                       \
    \          \"a\"\n/tmp/tmprguamt3z.swift:19:47: error: single-quoted string literal\
    \ found, use '\"'\n    let result = s.filter({$0 >= 'a' && $0 <= 'z'}).reduce(0,\
    \ { $0 + Int($1) })\n                                              ^~~\n     \
    \                                         \"z\"\n/tmp/tmprguamt3z.swift:19:70:\
    \ error: no exact matches in call to initializer \n    let result = s.filter({$0\
    \ >= 'a' && $0 <= 'z'}).reduce(0, { $0 + Int($1) })\n                        \
    \                                             ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n\n    var result = 0\n    var len = s.Length\n    for i := 0; i < len;\
    \ i++ {\n        result += s[len - i - 1] - '0'\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpj4d22d4g.swift:25:12: error: expected type\n    for i := 0; i <\
    \ len; i++ {\n           ^\n            <#type#>\n/tmp/tmpj4d22d4g.swift:25:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len; i++ {\n\
    \           ^\n/tmp/tmpj4d22d4g.swift:25:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len; i++ {\n           ^\n/tmp/tmpj4d22d4g.swift:26:36:\
    \ error: single-quoted string literal found, use '\"'\n        result += s[len\
    \ - i - 1] - '0'\n                                   ^~~\n                   \
    \                \"0\"\n/tmp/tmpj4d22d4g.swift:24:17: error: value of type 'String'\
    \ has no member 'Length'\n    var len = s.Length\n              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn digitSumHelper(s.unicodeScalars.count())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp5dnmrfls.swift:19:9: error: cannot find 'digitSumHelper' in scope\n\
    \        return digitSumHelper(s.unicodeScalars.count())\n               ^~~~~~~~~~~~~~\n\
    /tmp/tmp5dnmrfls.swift:19:41: error: cannot call value of non-function type 'Int'\n\
    \        return digitSumHelper(s.unicodeScalars.count())\n                   \
    \                            ^    ~~\n                                       \
    \             \n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i : Int in\
    \ s.unicodeScalars.reversed().filter({ $0.value > 0 }) {\n        sum += Int(i.value)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxuqe4epw.swift:20:48: error: cannot convert sequence element type\
    \ 'ReversedCollection<String.UnicodeScalarView>.Element' (aka 'Unicode.Scalar')\
    \ to expected type 'Int'\n    for i : Int in s.unicodeScalars.reversed().filter({\
    \ $0.value > 0 }) {\n                                               ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for let i in s.utf8.enumerated()\
    \ {\n        if i.value == Character(UnicodeScalar(UInt8(i.value)!).upperCase.rawValue)\
    \ {\n            sum += i.value\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp2wtbwom8.swift:20:9: error: 'let' pattern cannot appear nested\
    \ in an already immutable context\n    for let i in s.utf8.enumerated() {\n  \
    \      ^\n/tmp/tmp2wtbwom8.swift:21:14: error: value of tuple type '(offset: Int,\
    \ element: String.UTF8View.Element)' (aka '(offset: Int, element: UInt8)') has\
    \ no member 'value'\n        if i.value == Character(UnicodeScalar(UInt8(i.value)!).upperCase.rawValue)\
    \ {\n           ~ ^~~~~\n/tmp/tmp2wtbwom8.swift:21:55: error: value of tuple type\
    \ '(offset: Int, element: String.UTF8View.Element)' (aka '(offset: Int, element:\
    \ UInt8)') has no member 'value'\n        if i.value == Character(UnicodeScalar(UInt8(i.value)!).upperCase.rawValue)\
    \ {\n                                                    ~ ^~~~~\n/tmp/tmp2wtbwom8.swift:21:64:\
    \ error: value of type 'UnicodeScalar' (aka 'Unicode.Scalar') has no member 'upperCase'\n\
    \        if i.value == Character(UnicodeScalar(UInt8(i.value)!).upperCase.rawValue)\
    \ {\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n\
    /tmp/tmp2wtbwom8.swift:22:22: error: value of tuple type '(offset: Int, element:\
    \ String.UTF8View.Element)' (aka '(offset: Int, element: UInt8)') has no member\
    \ 'value'\n            sum += i.value\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for c in s\
    \ {\n        if c >= 'a' && c <= 'z' {\n            sum += c - 'a' + 10\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            sum += c - 'A' + 10\n     \
    \   } else {\n            sum += c\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpt03k3xtd.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= 'a' && c <= 'z' {\n                ^~~\n         \
    \       \"a\"\n/tmp/tmpt03k3xtd.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= 'a' && c <= 'z' {\n                       \
    \     ^~~\n                            \"z\"\n/tmp/tmpt03k3xtd.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - 'a' + 10\n\
    \                       ^~~\n                       \"a\"\n/tmp/tmpt03k3xtd.swift:23:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n                       ^~~\n                       \"A\"\n\
    /tmp/tmpt03k3xtd.swift:23:36: error: single-quoted string literal found, use '\"\
    '\n        } else if c >= 'A' && c <= 'Z' {\n                                \
    \   ^~~\n                                   \"Z\"\n/tmp/tmpt03k3xtd.swift:24:24:\
    \ error: single-quoted string literal found, use '\"'\n            sum += c -\
    \ 'A' + 10\n                       ^~~\n                       \"A\"\n/tmp/tmpt03k3xtd.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - 'a' + 10\n                ^\nSwift.SIMD:1:11: note:\
    \ candidate requires that 'Int' conform to 'SIMD' (requirement specified as 'Self'\
    \ : 'SIMD')\nextension SIMD where Self.Scalar : FloatingPoint {\n          ^\n\
    /tmp/tmpt03k3xtd.swift:24:17: error: binary operator '+=' cannot be applied to\
    \ operands of type 'Int' and '_'\n            sum += c - 'A' + 10\n          \
    \      ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform to 'SIMD'\
    \ (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n/tmp/tmpt03k3xtd.swift:26:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'Int'\n        \
    \    sum += c\n                   ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for ch in s {\n\
    \        if ch >= 'a' && ch <= 'z' {\n            sum += ch - 'a'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpedbmbmdl.swift:21:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch >= 'a' && ch <= 'z' {\n                 ^~~\n      \
    \           \"a\"\n/tmp/tmpedbmbmdl.swift:21:31: error: single-quoted string literal\
    \ found, use '\"'\n        if ch >= 'a' && ch <= 'z' {\n                     \
    \         ^~~\n                              \"z\"\n/tmp/tmpedbmbmdl.swift:22:25:\
    \ error: single-quoted string literal found, use '\"'\n            sum += ch -\
    \ 'a'\n                        ^~~\n                        \"a\"\n/tmp/tmpedbmbmdl.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += ch - 'a'\n                ^\nSwift.SIMD:1:11: note:\
    \ candidate requires that 'Int' conform to 'SIMD' (requirement specified as 'Self'\
    \ : 'SIMD')\nextension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var sum = 0\n  \n  for char in s.unicodeScalars\
    \ {\n    if let upperChar = char.value as? Int where upperChar >= 65 && upperChar\
    \ <= 90 {\n      sum += upperChar\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3ofz1dyr.swift:22:43: error: expected ',' joining parts of a multi-clause\
    \ condition\n    if let upperChar = char.value as? Int where upperChar >= 65 &&\
    \ upperChar <= 90 {\n                                         ~^~~~~\n       \
    \                                  ,\n/tmp/tmp3ofz1dyr.swift:22:35: warning: cast\
    \ from 'UInt32' to unrelated type 'Int' always fails\n    if let upperChar = char.value\
    \ as? Int where upperChar >= 65 && upperChar <= 90 {\n                       ~~~~~~~~~~\
    \ ^   ~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  guard s.count > 0 else { return 0\
    \ }\n  var result = 0\n  for c in s.utf16 {\n    if c >= Character('0') && c <=\
    \ Character('9') {\n      result += c - Character('0')\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpsj8_hw7i.swift:22:23: error: single-quoted string literal found,\
    \ use '\"'\n    if c >= Character('0') && c <= Character('9') {\n            \
    \          ^~~\n                      \"0\"\n/tmp/tmpsj8_hw7i.swift:22:46: error:\
    \ single-quoted string literal found, use '\"'\n    if c >= Character('0') &&\
    \ c <= Character('9') {\n                                             ^~~\n  \
    \                                           \"9\"\n/tmp/tmpsj8_hw7i.swift:23:31:\
    \ error: single-quoted string literal found, use '\"'\n      result += c - Character('0')\n\
    \                              ^~~\n                              \"0\"\n/tmp/tmpsj8_hw7i.swift:22:13:\
    \ error: cannot convert value of type 'Character' to expected argument type 'UInt16'\n\
    \    if c >= Character('0') && c <= Character('9') {\n            ^\n/tmp/tmpsj8_hw7i.swift:22:36:\
    \ error: cannot convert value of type 'Character' to expected argument type 'UInt16'\n\
    \    if c >= Character('0') && c <= Character('9') {\n                       \
    \            ^\n/tmp/tmpsj8_hw7i.swift:23:19: error: cannot convert value of type\
    \ 'UInt16' to expected argument type 'Int'\n      result += c - Character('0')\n\
    \                  ^\n                Int(              )\n/tmp/tmpsj8_hw7i.swift:23:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'UInt16'\n\
    \      result += c - Character('0')\n                    ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn digitSumHelper(s, 0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpudh3utla.swift:19:9: error: cannot find 'digitSumHelper' in scope\n\
    \        return digitSumHelper(s, 0)\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var sum = 0\n  for character in s\
    \ {\n    if character >= '0' && character <= '9' {\n      sum += Int(character)\n\
    \    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpruoeu73o.swift:21:21: error: single-quoted string literal found,\
    \ use '\"'\n    if character >= '0' && character <= '9' {\n                  \
    \  ^~~\n                    \"0\"\n/tmp/tmpruoeu73o.swift:21:41: error: single-quoted\
    \ string literal found, use '\"'\n    if character >= '0' && character <= '9'\
    \ {\n                                        ^~~\n                           \
    \             \"9\"\n/tmp/tmpruoeu73o.swift:22:14: error: no exact matches in\
    \ call to initializer \n      sum += Int(character)\n             ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.characters.reduce(0) {\
    \ acc, c in\n        let digit = c - 0x30\n        return acc + Int(digit)\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_fthdjdv.swift:20:21: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        let digit = c - 0x30\n\
    \                    ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpy1snagaq.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpy1snagaq.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpy1snagaq.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpy1snagaq.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy1snagaq.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let sum = s.reduce(0) { (sum: Int,\
    \ _: Character) -> (Int, Character) in\n        if let c = Character(Character(Character(sum)\
    \ + Character(_)).ascii) {\n            return (c, Character(Character(Character(sum)\
    \ + Character(_))).unicodeScalars.first!)\n        }\n        (sum, Character(Character(sum)\
    \ + Character(_)).unicodeScalars.first!)\n    }.0\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmph65qea61.swift:20:67: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        if let c = Character(Character(Character(sum)\
    \ + Character(_)).ascii) {\n                                                 \
    \                 ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map({ Int($0).upperd()\
    \ }).reduce({ $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpepqi0_8v.swift:19:20: error: no exact matches in call to initializer\
    \ \n    return s.map({ Int($0).upperd() }).reduce({ $0 + $1 })\n             \
    \      ^\n/tmp/tmpepqi0_8v.swift:19:20: note: found candidate with type '(Float16)\
    \ -> Int'\n    return s.map({ Int($0).upperd() }).reduce({ $0 + $1 })\n      \
    \             ^\n/tmp/tmpepqi0_8v.swift:19:20: note: found candidate with type\
    \ '(Float) -> Int'\n    return s.map({ Int($0).upperd() }).reduce({ $0 + $1 })\n\
    \                   ^\n/tmp/tmpepqi0_8v.swift:19:20: note: found candidate with\
    \ type '(Double) -> Int'\n    return s.map({ Int($0).upperd() }).reduce({ $0 +\
    \ $1 })\n                   ^\n/tmp/tmpepqi0_8v.swift:19:20: note: found candidate\
    \ with type '(Float80) -> Int'\n    return s.map({ Int($0).upperd() }).reduce({\
    \ $0 + $1 })\n                   ^\n/tmp/tmpepqi0_8v.swift:19:20: note: found\
    \ candidate with type '(Builtin.Int64) -> Int'\n    return s.map({ Int($0).upperd()\
    \ }).reduce({ $0 + $1 })\n                   ^\n/tmp/tmpepqi0_8v.swift:19:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n    return s.map({\
    \ Int($0).upperd() }).reduce({ $0 + $1 })\n                   ^\n/tmp/tmpepqi0_8v.swift:19:20:\
    \ note: found candidate with type '(String) -> Int?'\n    return s.map({ Int($0).upperd()\
    \ }).reduce({ $0 + $1 })\n                   ^\n/tmp/tmpepqi0_8v.swift:19:47:\
    \ error: missing argument for parameter 'into' in call\n    return s.map({ Int($0).upperd()\
    \ }).reduce({ $0 + $1 })\n                                              ^\n  \
    \                                            into: <#Int#>, \nSwift.Sequence:3:28:\
    \ note: 'reduce(into:_:)' declared here\n    @inlinable public func reduce<Result>(into\
    \ initialResult: __owned Result, _ updateAccumulatingResult: (_ partialResult:\
    \ inout Result, Self.Element) throws -> ()) rethrows -> Result\n             \
    \              ^\n/tmp/tmpepqi0_8v.swift:19:28: error: reference to member 'upperd'\
    \ cannot be resolved without a contextual type\n    return s.map({ Int($0).upperd()\
    \ }).reduce({ $0 + $1 })\n                           ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var total = 0\n    for cs in s.characters\
    \ {\n        total += Int(cs)\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3n5cdfk8.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    for cs in s.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3n5cdfk8.swift:21:18:\
    \ error: no exact matches in call to initializer \n        total += Int(cs)\n\
    \                 ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    var currentChar:\
    \ Character\n    for currentChar in s {\n        sum += Character.isUpper(currentChar)\
    \ ? currentChar.codePoint : -Character.isUpper(currentChar) ? 65 : 66\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpcla4nfxl.swift:22:26: error: type 'Character' has no member 'isUpper'\n\
    \        sum += Character.isUpper(currentChar) ? currentChar.codePoint : -Character.isUpper(currentChar)\
    \ ? 65 : 66\n               ~~~~~~~~~ ^~~~~~~\n/tmp/tmpcla4nfxl.swift:22:61: error:\
    \ value of type 'Character' has no member 'codePoint'\n        sum += Character.isUpper(currentChar)\
    \ ? currentChar.codePoint : -Character.isUpper(currentChar) ? 65 : 66\n      \
    \                                          ~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpcla4nfxl.swift:22:84:\
    \ error: type 'Character' has no member 'isUpper'\n        sum += Character.isUpper(currentChar)\
    \ ? currentChar.codePoint : -Character.isUpper(currentChar) ? 65 : 66\n      \
    \                                                                   ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var acc: Int = 0\n    for char in\
    \ s.unicodeScalars {\n        if char <= 0x7F {\n            acc += char\n   \
    \     }\n    }\n    return acc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp0k6snjod.swift:21:17: error: referencing operator function '<='\
    \ on 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if char <= 0x7F {\n                ^\nSwift.BinaryInteger:1:11: note:\
    \ where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n          ^\n/tmp/tmp0k6snjod.swift:22:20:\
    \ error: cannot convert value of type 'Unicode.Scalar' to expected argument type\
    \ 'Int'\n            acc += char\n                   ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn digitSumRecursive(s)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpctacl6hi.swift:19:9: error: cannot find 'digitSumRecursive' in\
    \ scope\n        return digitSumRecursive(s)\n               ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    var sum = 0\n    for c in\
    \ s {\n        if c >= '0' && c <= '9' {\n            sum += Int(c)\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp9i2fqfs8.swift:22:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmp9i2fqfs8.swift:22:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmp9i2fqfs8.swift:23:20: error:\
    \ no exact matches in call to initializer \n            sum += Int(c)\n      \
    \             ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet letters = [Character]()\n\tvar\
    \ sum: Int = 0\n\tfor (index, value) in s.unicodeScalars.enumerated() {\n\t\t\
    if value >= Character('a') && value <= Character('z') {\n\t\t\tsum += value\n\t\
    \t\tletters.append(value)\n\t\t}\n\t}\n\t\n\treturn sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbw3vwb9u.swift:22:25: error: single-quoted string literal found,\
    \ use '\"'\n                if value >= Character('a') && value <= Character('z')\
    \ {\n                                      ^~~\n                             \
    \         \"a\"\n/tmp/tmpbw3vwb9u.swift:22:52: error: single-quoted string literal\
    \ found, use '\"'\n                if value >= Character('a') && value <= Character('z')\
    \ {\n                                                                 ^~~\n  \
    \                                                               \"z\"\n/tmp/tmpbw3vwb9u.swift:22:12:\
    \ error: binary operator '>=' cannot be applied to operands of type 'Unicode.Scalar'\
    \ and 'Character'\n                if value >= Character('a') && value <= Character('z')\
    \ {\n                   ~~~~~ ^  ~~~~~~~~~~~~~~\n/tmp/tmpbw3vwb9u.swift:22:39:\
    \ error: binary operator '<=' cannot be applied to operands of type 'Unicode.Scalar'\
    \ and 'Character'\n                if value >= Character('a') && value <= Character('z')\
    \ {\n                                              ~~~~~ ^  ~~~~~~~~~~~~~~\n/tmp/tmpbw3vwb9u.swift:23:11:\
    \ error: cannot convert value of type 'Unicode.Scalar' to expected argument type\
    \ 'Int'\n                        sum += value\n                              \
    \ ^\n/tmp/tmpbw3vwb9u.swift:24:12: error: no exact matches in call to instance\
    \ method 'append'\n                        letters.append(value)\n           \
    \                     ^\n/tmp/tmpbw3vwb9u.swift:24:12: note: found candidate with\
    \ type '(__owned Character) -> ()'\n                        letters.append(value)\n\
    \                                ^\n/tmp/tmpbw3vwb9u.swift:24:12: note: found\
    \ candidate with type '(__owned Unicode.Scalar) -> ()'\n                     \
    \   letters.append(value)\n                                ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c) - Int(Character(c))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpx7f7hh6k.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c) - Int(Character(c))\n               ^\n/tmp/tmpx7f7hh6k.swift:21:16:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \        sum += Int(c) - Int(Character(c))\n               ^\n/tmp/tmpx7f7hh6k.swift:21:16:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \        sum += Int(c) - Int(Character(c))\n               ^\n/tmp/tmpx7f7hh6k.swift:21:16:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \        sum += Int(c) - Int(Character(c))\n               ^\n/tmp/tmpx7f7hh6k.swift:21:16:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \        sum += Int(c) - Int(Character(c))\n               ^\n/tmp/tmpx7f7hh6k.swift:21:16:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n        sum += Int(c) - Int(Character(c))\n               ^\n\
    /tmp/tmpx7f7hh6k.swift:21:16: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n        sum += Int(c) - Int(Character(c))\n\
    \               ^\n/tmp/tmpx7f7hh6k.swift:21:25: error: no exact matches in call\
    \ to initializer \n        sum += Int(c) - Int(Character(c))\n               \
    \         ^\n/tmp/tmpx7f7hh6k.swift:21:25: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n        sum += Int(c) - Int(Character(c))\n\
    \                        ^\n/tmp/tmpx7f7hh6k.swift:21:25: note: candidate expects\
    \ value of type 'Float' for parameter #1 (got 'Character')\n        sum += Int(c)\
    \ - Int(Character(c))\n                        ^\n/tmp/tmpx7f7hh6k.swift:21:25:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \        sum += Int(c) - Int(Character(c))\n                        ^\n/tmp/tmpx7f7hh6k.swift:21:25:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \        sum += Int(c) - Int(Character(c))\n                        ^\n/tmp"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for index in\
    \ 0 ..< s.characters.count {\n        if s[index].isUpper { result += s[index].value\
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpa2_wgy12.swift:20:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0 ..< s.characters.count {\n         \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpa2_wgy12.swift:21:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper { result += s[index].value }\n      \
    \     ~~~~~~~~ ^~~~~~~\n/tmp/tmpa2_wgy12.swift:21:50: error: value of type 'Character'\
    \ has no member 'value'\n        if s[index].isUpper { result += s[index].value\
    \ }\n                                        ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet characters = s.characters\n\n\t\
    return characters.reduce(0, {$0 + Int($1)})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyb8zwehy.swift:19:21: error: 'characters' is unavailable: Please\
    \ use String directly\n        let characters = s.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpyb8zwehy.swift:21:36: error: no exact matches in call to initializer \n\
    \        return characters.reduce(0, {$0 + Int($1)})\n                       \
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n\n    var sum = 0\n    for character in s {\n        if Character(character).isUpper\
    \ {\n            sum += Character(character).asciiValue\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgc6jdx0j.swift:25:22: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        if Character(character).isUpper {\n                     ^\n\
    \                     extendedGraphemeClusterLiteral: \n/tmp/tmpgc6jdx0j.swift:25:33:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if Character(character).isUpper\
    \ {\n           ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpgc6jdx0j.swift:26:41: error:\
    \ cannot convert value of type 'UInt8?' to expected argument type 'Int'\n    \
    \        sum += Character(character).asciiValue\n                            \
    \            ^\n/tmp/tmpgc6jdx0j.swift:26:30: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n            sum += Character(character).asciiValue\n              \
    \               ^\n                             extendedGraphemeClusterLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return sum((s.unicodeScalars.filter{\
    \ $0.value > 0x30 }).map{ $0.value })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp74xz0ffe.swift:19:12: error: cannot find 'sum' in scope\n    return\
    \ sum((s.unicodeScalars.filter{ $0.value > 0x30 }).map{ $0.value })\n        \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return digits.foldLeft(0) { $0 +\
    \ $1.value + Int($1.key.unicodeScalars.filter { $0.isUpper() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps10ifmk_.swift:42:49: error: expected '}' at end of brace statement\n\
    assert(digitSum(s: \"You arE Very Smart\") == 327)\n                         \
    \                       ^\n/tmp/tmps10ifmk_.swift:18:33: note: to match this opening\
    \ '{'\nfunc digitSum(s: String) -> Int {\n                                ^\n\
    /tmp/tmps10ifmk_.swift:19:12: error: cannot find 'digits' in scope\n    return\
    \ digits.foldLeft(0) { $0 + $1.value + Int($1.key.unicodeScalars.filter { $0.isUpper()\
    \ })\n           ^~~~~~\n/tmp/tmps10ifmk_.swift:23:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if let s = s.unicodeScalars.first(where:\
    \ { $0.value > 127}), let _ = s.unicodeScalars.first {\n        s.unicodeScalars.first!.value\
    \ + digitSum(s.unicodeScalars.dropFirst())\n    } else {\n        s.unicodeScalars.count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpiwn921x4.swift:19:91: error: type of expression is ambiguous without\
    \ more context\n    if let s = s.unicodeScalars.first(where: { $0.value > 127}),\
    \ let _ = s.unicodeScalars.first {\n                                         \
    \                                ~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpiwn921x4.swift:20:11:\
    \ error: value of type 'Unicode.Scalar' has no member 'unicodeScalars'\n     \
    \   s.unicodeScalars.first!.value + digitSum(s.unicodeScalars.dropFirst())\n \
    \       ~ ^~~~~~~~~~~~~~\n/tmp/tmpiwn921x4.swift:20:50: error: missing argument\
    \ label 's:' in call\n        s.unicodeScalars.first!.value + digitSum(s.unicodeScalars.dropFirst())\n\
    \                                                 ^\n                        \
    \                         s: \n/tmp/tmpiwn921x4.swift:20:52: error: value of type\
    \ 'Unicode.Scalar' has no member 'unicodeScalars'\n        s.unicodeScalars.first!.value\
    \ + digitSum(s.unicodeScalars.dropFirst())\n                                 \
    \                ~ ^~~~~~~~~~~~~~\n/tmp/tmpiwn921x4.swift:22:26: warning: expression\
    \ of type 'Int' is unused\n        s.unicodeScalars.count\n        ~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reversed().characters.reduce(0,\
    \ { $0 + Int(String($1)) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmplopwclb9.swift:19:53: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return s.reversed().characters.reduce(0,\
    \ { $0 + Int(String($1)) })\n                                                \
    \    ^\n/tmp/tmplopwclb9.swift:19:53: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n    return s.reversed().characters.reduce(0,\
    \ { $0 + Int(String($1)) })\n                                                \
    \    ^\n                                                    (               ??\
    \ <#default value#>)\n/tmp/tmplopwclb9.swift:19:53: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n    return s.reversed().characters.reduce(0,\
    \ { $0 + Int(String($1)) })\n                                                \
    \    ^\n                                                                   !\n\
    /tmp/tmplopwclb9.swift:19:25: error: reference to member 'characters' cannot be\
    \ resolved without a contextual type\n    return s.reversed().characters.reduce(0,\
    \ { $0 + Int(String($1)) })\n                        ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, b in s.utf8\
    \ {\n        let v = UInt8(UInt32(b))\n        if v > 47 {\n            sum +=\
    \ v - 48\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphymupkov.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for _, b in s.utf8 {\n         ^\n/tmp/tmphymupkov.swift:20:10: error: expected\
    \ Sequence expression for for-each loop\n    for _, b in s.utf8 {\n         ^\n\
    /tmp/tmphymupkov.swift:21:30: error: cannot find 'b' in scope\n        let v =\
    \ UInt8(UInt32(b))\n                             ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n\n    for _, b := range\
    \ s {\n        if b == 'A' {\n            sum += 65\n        } else if b == 'a'\
    \ {\n            sum += 97\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpspns_5gc.swift:21:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range s {\n         ^\n/tmp/tmpspns_5gc.swift:21:10: error: expected\
    \ Sequence expression for for-each loop\n    for _, b := range s {\n         ^\n\
    /tmp/tmpspns_5gc.swift:22:17: error: single-quoted string literal found, use '\"\
    '\n        if b == 'A' {\n                ^~~\n                \"A\"\n/tmp/tmpspns_5gc.swift:24:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if b ==\
    \ 'a' {\n                       ^~~\n                       \"a\"\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  let length = s.characters.count\n\
    \  guard length > 0 else {\n    return 0\n  }\n  var sum = 0\n  for char in s.characters\
    \ {\n    if char >= '0' && char <= '9' {\n      sum += Int(char) - 48\n    }\n\
    \  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp787d_xvn.swift:25:16: error: single-quoted string literal found,\
    \ use '\"'\n    if char >= '0' && char <= '9' {\n               ^~~\n        \
    \       \"0\"\n/tmp/tmp787d_xvn.swift:25:31: error: single-quoted string literal\
    \ found, use '\"'\n    if char >= '0' && char <= '9' {\n                     \
    \         ^~~\n                              \"9\"\n/tmp/tmp787d_xvn.swift:19:18:\
    \ error: 'characters' is unavailable: Please use String directly\n  let length\
    \ = s.characters.count\n                 ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp787d_xvn.swift:24:17: error: 'characters'\
    \ is unavailable: Please use String directly\n  for char in s.characters {\n \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp787d_xvn.swift:26:14: error: no exact matches in call to initializer\
    \ \n      sum += Int(char) - 48\n             ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects\
    \ value of type 'Float' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Double)\n           ^\nSwift.Int:14:12: note: candidate expects value of type\
    \ 'Float80' for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n\
    \           ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn digitSum(s.characters)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp18a_huh2.swift:19:18: error: missing argument label 's:' in call\n\
    \        return digitSum(s.characters)\n                        ^\n          \
    \              s: \n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return sumUpper(s.unicodeScalars.lazy.filter{\
    \ $0.value > 0x41 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_qf_fnxx.swift:19:12: error: cannot find 'sumUpper' in scope\n\
    \    return sumUpper(s.unicodeScalars.lazy.filter{ $0.value > 0x41 })\n      \
    \     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    var index = 0\n\
    \    for c in s.characters {\n        sum += Int(c) // in fact, Swift can infer\
    \ that the type is UInt, and we know that char is a UInt8\n        index += 1\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp13ep9e7e.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp13ep9e7e.swift:22:16:\
    \ error: no exact matches in call to initializer \n        sum += Int(c) // in\
    \ fact, Swift can infer that the type is UInt, and we know that char is a UInt8\n\
    \               ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = Int()\n    var len\
    \ = s.characters.count\n    for i in 0 ..< len {\n        let c = s.characters[i]\n\
    \        if c >= 'a' && c <= 'z' {\n            result += Int(c) - Int('a') +\
    \ 10\n        } else {\n            result += Int(c)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") ==\
    \ 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\n\
    assert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\n\
    assert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\"\
    ) == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_sim3vob.swift:23:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= 'a' && c <= 'z' {\n                ^~~\n         \
    \       \"a\"\n/tmp/tmp_sim3vob.swift:23:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= 'a' && c <= 'z' {\n                       \
    \     ^~~\n                            \"z\"\n/tmp/tmp_sim3vob.swift:24:36: error:\
    \ single-quoted string literal found, use '\"'\n            result += Int(c) -\
    \ Int('a') + 10\n                                   ^~~\n                    \
    \               \"a\"\n/tmp/tmp_sim3vob.swift:20:17: error: 'characters' is unavailable:\
    \ Please use String directly\n    var len = s.characters.count\n             \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp_sim3vob.swift:22:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let c = s.characters[i]\n             \
    \   ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp_sim3vob.swift:22:19: error: 'characters' is unavailable:\
    \ Please use String directly\n        let c = s.characters[i]\n              \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_sim3vob.swift:24:32:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            result += Int(c) - Int('a') + 10\n                              \
    \ ^\n/tmp/tmp_sim3vob.swift:24:32: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result += Int(c) - Int('a')\
    \ + 10\n                               ^\n                               (   \
    \     ?? <#default value#>)\n/tmp/tmp_sim3vob.swift:24:32: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result += Int(c) - Int('a') + "
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tvar result = 0\n\n\tfor c in s {\n\
    \t\tif c.isUpper() {\n\t\t\tresult += Int(c.unicodeScalarValue)!\n\t\t}\n\t}\n\
    \treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpkudp53d8.swift:22:8: error: value of type 'Character' has no member\
    \ 'isUpper'\n                if c.isUpper() {\n                   ~ ^~~~~~~\n\
    /tmp/tmpkudp53d8.swift:23:20: error: value of type 'Character' has no member 'unicodeScalarValue'\n\
    \                        result += Int(c.unicodeScalarValue)!\n              \
    \                        ~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var total = 0\n  for letter in s.unicodeScalars\
    \ {\n    if letter.value > 128 {\n      return total\n    }\n    total += letter.value\n\
    \  }\n  return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpqc9qvz53.swift:24:21: error: cannot convert value of type 'UInt32'\
    \ to expected argument type 'Int'\n    total += letter.value\n               \
    \     ^\n             Int(        )\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return sum(digits(s))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp7m0qnjix.swift:19:12: error: cannot find 'sum' in scope\n    return\
    \ sum(digits(s))\n           ^~~\n/tmp/tmp7m0qnjix.swift:19:16: error: cannot\
    \ find 'digits' in scope\n    return sum(digits(s))\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    unicodeScalars.forEach\
    \ { unicodeValue in\n        if unicodeValue.value > 0xFF {\n            sum +=\
    \ unicodeValue.value\n        } else {\n            sum += unicodeValue.value.toInt()\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpdjmofjp3.swift:20:5: error: cannot find 'unicodeScalars' in scope\n\
    \    unicodeScalars.forEach { unicodeValue in\n    ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let length = s.length\n    var sum\
    \ = 0\n    for i in 0 ..< length {\n        let code = s.codeUnitAtIndex(i, in:\
    \ s.startIndex).intValue\n        sum += code - (code > 90 ? code - 91 : code)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpx8nm3w8u.swift:19:20: error: value of type 'String' has no member\
    \ 'length'\n    let length = s.length\n                 ~ ^~~~~~\n/tmp/tmpx8nm3w8u.swift:22:22:\
    \ error: value of type 'String' has no member 'codeUnitAtIndex'\n        let code\
    \ = s.codeUnitAtIndex(i, in: s.startIndex).intValue\n                   ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tvar result : Int = 0\n\tfor _, b :=\
    \ range s {\n\t\tif b >= '0' && b <= '9' {\n\t\t\tresult = result + b - '0'\n\t\
    \t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4i3mllgs.swift:20:7: error: expected 'in' after for-each pattern\n\
    \        for _, b := range s {\n             ^\n/tmp/tmp4i3mllgs.swift:20:7: error:\
    \ expected Sequence expression for for-each loop\n        for _, b := range s\
    \ {\n             ^\n/tmp/tmp4i3mllgs.swift:21:11: error: single-quoted string\
    \ literal found, use '\"'\n                if b >= '0' && b <= '9' {\n       \
    \                 ^~~\n                        \"0\"\n/tmp/tmp4i3mllgs.swift:21:23:\
    \ error: single-quoted string literal found, use '\"'\n                if b >=\
    \ '0' && b <= '9' {\n                                    ^~~\n               \
    \                     \"9\"\n/tmp/tmp4i3mllgs.swift:22:26: error: single-quoted\
    \ string literal found, use '\"'\n                        result = result + b\
    \ - '0'\n                                              ^~~\n                 \
    \                             \"0\"\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let chars = s.characters.map { $0\
    \ }\n    var sum = 0\n    for c in chars {\n        if c >= '0' && c <= '9' {\n\
    \            sum += Int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphsgtz96a.swift:22:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmphsgtz96a.swift:22:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmphsgtz96a.swift:19:19: error:\
    \ 'characters' is unavailable: Please use String directly\n    let chars = s.characters.map\
    \ { $0 }\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphsgtz96a.swift:23:20: error: no exact matches in call\
    \ to initializer \n            sum += Int(c)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter({ $0 >= \"A\" &&\
    \ $0 <= \"Z\" }).map({ Int($0) }).reduce({ $0 + $1 })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpuyuqldkk.swift:19:55: error: no exact matches in call to initializer\
    \ \n    return s.filter({ $0 >= \"A\" && $0 <= \"Z\" }).map({ Int($0) }).reduce({\
    \ $0 + $1 })\n                                                      ^\n/tmp/tmpuyuqldkk.swift:19:55:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got '(inout\
    \ Int, Int) -> ()')\n    return s.filter({ $0 >= \"A\" && $0 <= \"Z\" }).map({\
    \ Int($0) }).reduce({ $0 + $1 })\n                                           \
    \           ^\n/tmp/tmpuyuqldkk.swift:19:55: note: candidate expects value of\
    \ type 'Float' for parameter #1 (got '(inout Int, Int) -> ()')\n    return s.filter({\
    \ $0 >= \"A\" && $0 <= \"Z\" }).map({ Int($0) }).reduce({ $0 + $1 })\n       \
    \                                               ^\n/tmp/tmpuyuqldkk.swift:19:55:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got '(inout\
    \ Int, Int) -> ()')\n    return s.filter({ $0 >= \"A\" && $0 <= \"Z\" }).map({\
    \ Int($0) }).reduce({ $0 + $1 })\n                                           \
    \           ^\n/tmp/tmpuyuqldkk.swift:19:55: note: candidate expects value of\
    \ type 'Float80' for parameter #1 (got '(inout Int, Int) -> ()')\n    return s.filter({\
    \ $0 >= \"A\" && $0 <= \"Z\" }).map({ Int($0) }).reduce({ $0 + $1 })\n       \
    \                                               ^\n/tmp/tmpuyuqldkk.swift:19:55:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ '(inout Int, Int) -> ()')\n    return s.filter({ $0 >= \"A\" && $0 <= \"Z\"\
    \ }).map({ Int($0) }).reduce({ $0 + $1 })\n                                  \
    \                    ^\n/tmp/tmpuyuqldkk.swift:19:55: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got '(inout Int, Int) -> ()')\n\
    \    return s.filter({ $0 >= \"A\" && $0 <= \"Z\" }).map({ Int($0) }).reduce({\
    \ $0 + $1 })\n                                                      ^\n/tmp/tmpuyuqldkk.swift:19:73:\
    \ error: missing argument for parameter 'into' in call\n    return s.filter({\
    \ $0 >= \"A\" && $0 <= \"Z\" }).map({ Int($0) }).reduce({ $0 + $1 })\n       \
    \                                            "
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn s.map({ $0.unicodeScalars.filter\
    \ { $0.value > 0 }.fold(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpd0n2n8go.swift:19:11: error: cannot convert return expression of\
    \ type '[T]' to return type 'Int'\n        return s.map({ $0.unicodeScalars.filter\
    \ { $0.value > 0 }.fold(0, +) })\n               ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd0n2n8go.swift:19:59: error: reference to member 'fold' cannot be resolved\
    \ without a contextual type\n        return s.map({ $0.unicodeScalars.filter {\
    \ $0.value > 0 }.fold(0, +) })\n                                             \
    \                    ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = Int(0)\n    for c in\
    \ s.characters {\n        let code = Int(c)\n        switch code {\n        case\
    \ 48...57:\n            result += code\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4r1zoi2b.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4r1zoi2b.swift:21:20:\
    \ error: no exact matches in call to initializer \n        let code = Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let alphabet = string.UnicodeScalarView(s).characters\n\
    \    var sum = 0\n    for index in 0..<alphabet.count {\n        let s = alphabet[index]\n\
    \        var upper = 0\n        if s != \"a\" {\n            upper = s.value -\
    \ 64\n        }\n        sum += upper\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp9wfjq125.swift:19:20: error: cannot find 'string' in scope\n  \
    \  let alphabet = string.UnicodeScalarView(s).characters\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s.isEmpty {\n        return 0\n\
    \    }\n    var sum = 0\n    for c in s.characters {\n        sum += Int(Character(c).UnicodeScalars.value)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp96xfzbbj.swift:23:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp96xfzbbj.swift:24:33:\
    \ error: value of type 'Character' has no member 'UnicodeScalars'\n        sum\
    \ += Int(Character(c).UnicodeScalars.value)\n                   ~~~~~~~~~~~~ ^~~~~~~~~~~~~~\n\
    /tmp/tmp96xfzbbj.swift:24:30: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        sum += Int(Character(c).UnicodeScalars.value)\n           \
    \                  ^\n                             extendedGraphemeClusterLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    guard let unicodeScalars = s.unicodeScalars\
    \ else {\n        return 0\n    }\n    var sum: Int = 0\n    unicodeScalars.forEach\
    \ { unichar in\n        if let higherCode = unichar.value > 0x4F { // Uppercase\n\
    \            sum += unichar.value\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpx5l8nc9a.swift:19:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String.UnicodeScalarView'\n    guard let unicodeScalars\
    \ = s.unicodeScalars else {\n          ^                    ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpx5l8nc9a.swift:25:28: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'Int'\n            sum += unichar.value\n           \
    \                ^\n                   Int(         )\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  let result = s.characters.reduce(0,\n\
    \    { return $0 + Int($1) })\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpecok_64r.swift:20:19: error: no exact matches in call to initializer\
    \ \n    { return $0 + Int($1) })\n                  ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { UInt8(UnicodeScalar($0).value)\
    \ }\n        .map { UnicodeScalar($0).value }\n        .fold(0, { $0 + $1 })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpcg72whrl.swift:20:16: error: no exact matches in call to initializer\
    \ \n        .map { UnicodeScalar($0).value }\n               ^\n/tmp/tmpcg72whrl.swift:20:16:\
    \ note: found candidate with type '(UInt8) -> UnicodeScalar' (aka '(UInt8) ->\
    \ Unicode.Scalar')\n        .map { UnicodeScalar($0).value }\n               ^\n\
    /tmp/tmpcg72whrl.swift:20:16: note: found candidate with type '(Unicode.Scalar)\
    \ -> UnicodeScalar' (aka '(Unicode.Scalar) -> Unicode.Scalar')\n        .map {\
    \ UnicodeScalar($0).value }\n               ^\n/tmp/tmpcg72whrl.swift:19:29: error:\
    \ no exact matches in call to initializer \n    return s.filter { UInt8(UnicodeScalar($0).value)\
    \ }\n                            ^\n/tmp/tmpcg72whrl.swift:19:29: note: found\
    \ candidate with type '(UInt8) -> UnicodeScalar' (aka '(UInt8) -> Unicode.Scalar')\n\
    \    return s.filter { UInt8(UnicodeScalar($0).value) }\n                    \
    \        ^\n/tmp/tmpcg72whrl.swift:19:29: note: found candidate with type '(Unicode.Scalar)\
    \ -> UnicodeScalar' (aka '(Unicode.Scalar) -> Unicode.Scalar')\n    return s.filter\
    \ { UInt8(UnicodeScalar($0).value) }\n                            ^\n/tmp/tmpcg72whrl.swift:19:23:\
    \ error: cannot convert value of type 'UInt8' to closure result type 'Bool'\n\
    \    return s.filter { UInt8(UnicodeScalar($0).value) }\n                    \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcg72whrl.swift:21:10: error: value\
    \ of type '[UInt32]' has no member 'fold'\n        .fold(0, { $0 + $1 })\n   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    if s == \"\" {\n        return 0\n\
    \    }\n    var sum = 0\n    var cur = 0\n    for x in s {\n        if x.isUpper()\
    \ {\n            cur += x.unicodeScalars.reduce(0,combine: +) * x.unicodeScalars.reduce(0,combine:\
    \ +)\n        }\n        else {\n            cur += x.unicodeScalars.reduce(0,combine:\
    \ +)\n        }\n        if cur > 9 {\n            sum += cur - 10\n         \
    \   cur = 0\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpz2whxw38.swift:25:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if x.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpz2whxw38.swift:26:43:\
    \ error: extraneous argument label 'combine:' in call\n            cur += x.unicodeScalars.reduce(0,combine:\
    \ +) * x.unicodeScalars.reduce(0,combine: +)\n                               \
    \           ^  ~~~~~~~~~\n                                             \n/tmp/tmpz2whxw38.swift:26:83:\
    \ error: extraneous argument label 'combine:' in call\n            cur += x.unicodeScalars.reduce(0,combine:\
    \ +) * x.unicodeScalars.reduce(0,combine: +)\n                               \
    \                                                   ^  ~~~~~~~~~\n           \
    \                                                                          \n\
    /tmp/tmpz2whxw38.swift:26:55: error: cannot convert value of type '(Int) -> Int'\
    \ to expected argument type '(Int, Unicode.Scalar) throws -> Int'\n          \
    \  cur += x.unicodeScalars.reduce(0,combine: +) * x.unicodeScalars.reduce(0,combine:\
    \ +)\n                                                      ^\n/tmp/tmpz2whxw38.swift:26:95:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, Unicode.Scalar) throws -> Int'\n            cur += x.unicodeScalars.reduce(0,combine:\
    \ +) * x.unicodeScalars.reduce(0,combine: +)\n                               \
    \                                                               ^\n/tmp/tmpz2whxw38.swift:29:43:\
    \ error: extraneous argument label 'combine:' in call\n            cur += x.unicodeScalars.reduce(0,combine:\
    \ +)\n                                          ^  ~~~~~~~~~\n               \
    \                              \n/tmp/tmpz2whxw38.swift:29:55: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, Unicode.Scalar)\
    \ throws -> Int'\n            cur += x.unicodeScalars.reduce(0,combine: +)\n \
    \                                                     ^\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, {$0 + $1}).prefix(5)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp7409yf_g.swift:19:30: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n    return s.reduce(0, {$0\
    \ + $1}).prefix(5)\n                             ^\n/tmp/tmp7409yf_g.swift:19:35:\
    \ error: value of type 'Int' has no member 'prefix'\n    return s.reduce(0, {$0\
    \ + $1}).prefix(5)\n           ~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = Int(0);\n\n    for\
    \ c in s.characters {\n        let value = c - '0';\n        if value < 10 &&\
    \ value > 0 {\n            result += value;\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpdi8tt1b1.swift:22:25: error: single-quoted string literal found,\
    \ use '\"'\n        let value = c - '0';\n                        ^~~\n      \
    \                  \"0\"\n/tmp/tmpdi8tt1b1.swift:21:16: error: 'characters' is\
    \ unavailable: Please use String directly\n    for c in s.characters {\n     \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpdi8tt1b1.swift:22:23: error: binary operator '-' cannot be applied to\
    \ operands of type 'Character' and 'String'\n        let value = c - '0';\n  \
    \                  ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return digitSum(s.characters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpilg50kmh.swift:19:21: error: missing argument label 's:' in call\n\
    \    return digitSum(s.characters)\n                    ^\n                  \
    \  s: \n"
  stdout: ''
  timestamp: 1659980073
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return digitSum(s.charactersIterator.map(String.UnicodeScalarView.init))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpv_05vs3h.swift:19:23: error: value of type 'String' has no member\
    \ 'charactersIterator'\n    return digitSum(s.charactersIterator.map(String.UnicodeScalarView.init))\n\
    \                    ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpv_05vs3h.swift:19:21: error:\
    \ missing argument label 's:' in call\n    return digitSum(s.charactersIterator.map(String.UnicodeScalarView.init))\n\
    \                    ^\n                    s: \n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c.isUpper() {\n            sum += c.asciiValue\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpd1h_2_qu.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd1h_2_qu.swift:21:14:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if c.isUpper()\
    \ {\n           ~ ^~~~~~~\n/tmp/tmpd1h_2_qu.swift:22:22: error: cannot convert\
    \ value of type 'UInt8?' to expected argument type 'Int'\n            sum += c.asciiValue\n\
    \                     ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet chars = s.characters\n\treturn\
    \ chars.reduce(0){ $0 + Int(Character($0).unicodeScalars.last!.value - 48) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphjcpwxpg.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        let chars = s.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmphjcpwxpg.swift:20:35:\
    \ error: no exact matches in call to initializer \n        return chars.reduce(0){\
    \ $0 + Int(Character($0).unicodeScalars.last!.value - 48) }\n                \
    \                         ^\n/tmp/tmphjcpwxpg.swift:20:35: note: candidate has\
    \ partially matching parameter list (Unicode.Scalar)\n        return chars.reduce(0){\
    \ $0 + Int(Character($0).unicodeScalars.last!.value - 48) }\n                \
    \                         ^\n/tmp/tmphjcpwxpg.swift:20:35: note: candidate has\
    \ partially matching parameter list (String)\n        return chars.reduce(0){\
    \ $0 + Int(Character($0).unicodeScalars.last!.value - 48) }\n                \
    \                         ^\n/tmp/tmphjcpwxpg.swift:20:24: error: contextual closure\
    \ type '(Int, String.Element) throws -> Int' (aka '(Int, Character) throws ->\
    \ Int') expects 2 arguments, but 1 was used in closure body\n        return chars.reduce(0){\
    \ $0 + Int(Character($0).unicodeScalars.last!.value - 48) }\n                \
    \              ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\treturn s.reduce(0, combine: +)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpv_q9jx1s.swift:19:17: error: extraneous argument label 'combine:'\
    \ in call\n        return s.reduce(0, combine: +)\n                       ^  \
    \ ~~~~~~~~~\n                           \n/tmp/tmpv_q9jx1s.swift:19:30: error:\
    \ cannot convert value of type '(Int) -> Int' to expected argument type '(Int,\
    \ String.Element) throws -> Int' (aka '(Int, Character) throws -> Int')\n    \
    \    return s.reduce(0, combine: +)\n                                    ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    // TODO: Your code here\n    var\
    \ sum = 0\n    for _ in s.characters {\n        sum += Int(_)\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpi_fdb4lm.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi_fdb4lm.swift:22:20:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        sum += Int(_)\n                   ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i : Int in\n\
    \            s.unicodeScalars.filter { UnicodeScalar(Int($0)) != UnicodeScalar(0)\
    \ }.map {\n                sum += UnicodeScalar(Int($0)) }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmprbr082b2.swift:22:42: error: anonymous closure argument not contained\
    \ in a closure\n                sum += UnicodeScalar(Int($0)) }\n            \
    \                             ^\n/tmp/tmprbr082b2.swift:21:53: error: initializer\
    \ 'init(_:)' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n     \
    \       s.unicodeScalars.filter { UnicodeScalar(Int($0)) != UnicodeScalar(0) }.map\
    \ {\n                                                    ^\nSwift.SignedInteger:2:23:\
    \ note: where 'T' = 'Unicode.Scalar'\n    @inlinable public init<T>(_ source:\
    \ T) where T : BinaryInteger\n                      ^\n/tmp/tmprbr082b2.swift:21:84:\
    \ error: for-in loop requires '((Unicode.Scalar) throws -> T) throws -> [T]' to\
    \ conform to 'Sequence'\n            s.unicodeScalars.filter { UnicodeScalar(Int($0))\
    \ != UnicodeScalar(0) }.map {\n            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    /tmp/tmprbr082b2.swift:21:30: error: generic parameter 'T' could not be inferred\n\
    \            s.unicodeScalars.filter { UnicodeScalar(Int($0)) != UnicodeScalar(0)\
    \ }.map {\n                             ^\nSwift.Collection:2:28: note: in call\
    \ to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element)\
    \ throws -> T) rethrows -> [T]\n                           ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tlet length = s.characters.count\n\t\
    var sum = 0\n\tfor index in 0..<length {\n\t\tif let _ = s.character(at: index)\
    \ {\n\t\t\tsum += Int(s.character(at: index))\n\t\t}\n\t}\n\treturn sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp7uusme49.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = s.characters.count\n             \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp7uusme49.swift:22:16: error: value of type 'String' has no member 'character'\n\
    \                if let _ = s.character(at: index) {\n                       \
    \    ~ ^~~~~~~~~\n/tmp/tmp7uusme49.swift:23:17: error: value of type 'String'\
    \ has no member 'character'\n                        sum += Int(s.character(at:\
    \ index))\n                                   ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i : Character\
    \  in s {\n        sum += Int(i)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpo4ukxkk4.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(i)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n\tvar result = 0\n\tfor i := 0; i <\
    \ len(s); i++ {\n\t\tresult += (s[i]) - '0'\n\t}\n\treturn result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp31titoaf.swift:20:9: error: expected type\n        for i := 0;\
    \ i < len(s); i++ {\n               ^\n                <#type#>\n/tmp/tmp31titoaf.swift:20:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s);\
    \ i++ {\n               ^\n/tmp/tmp31titoaf.swift:20:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s); i++ {\n      \
    \         ^\n/tmp/tmp31titoaf.swift:21:22: error: single-quoted string literal\
    \ found, use '\"'\n                result += (s[i]) - '0'\n                  \
    \                 ^~~\n                                   \"0\"\n"
  stdout: ''
  timestamp: 1660003955
