language: swift
name: HumanEval_27_flip_case
results:
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = string\n    result.lowercased()\n    result.uppercased()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp7h26n5kx/tmp7h26n5kx.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0261c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba025ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba025ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba025ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7h26n5kx                        0x000055f3c9aa84a5 <unavailable> + 5285

    5    libc.so.6                          0x00002ba0263b1460 __libc_start_main +
    245

    6    tmp7h26n5kx                        0x000055f3c9aa7ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return capitalize(lowercase_first(string))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpviph_ye3.swift:6:12: error: cannot find 'capitalize' in scope\n\
    \    return capitalize(lowercase_first(string))\n           ^~~~~~~~~~\n/tmp/tmpviph_ye3.swift:6:23:\
    \ error: cannot find 'lowercase_first' in scope\n    return capitalize(lowercase_first(string))\n\
    \                      ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let index = string.range(of: \"[A-Z]\") {\n    \
    \    var newString = string\n\n        newString[index] = string[index].lowercased()\n\
    \        newString[index] = string[index].uppercased()\n        return newString\n\
    \    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8le_xj4k.swift:6:27: error: value of type 'String' has no member\
    \ 'range'\n    if let index = string.range(of: \"[A-Z]\") {\n                \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.casefold().uppercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpchlda2hm.swift:6:19: error: value of type 'String' has no member\
    \ 'casefold'\n    return string.casefold().uppercased()\n           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lower = string.lowercased()\n    let upper = string.uppercased()\n\
    \    return upper.characters.joinWithSeparator(lower)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpmpn8bond.swift:8:29: error: value of type 'String' has no member\
    \ 'joinWithSeparator'\n    return upper.characters.joinWithSeparator(lower)\n\
    \           ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    // \"lowercase\" -> \"lowercase\" -> \"uppercase\"\n\
    \    func flip_case_helper(_ str: String) -> String {\n        var result = \"\
    \"\n        for c in str.unicodeScalars {\n            if let _ = c.isUppercase\
    \ {\n                result += c.lowercase.asciiValue\n            } else {\n\
    \                result += c.uppercase.asciiValue\n            }\n        }\n\
    \        return result\n    }\n    return flip_case_helper(string)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_q18awym.swift:10:26: error: type of expression is ambiguous without\
    \ more context\n            if let _ = c.isUppercase {\n                     \
    \  ~~^~~~~~~~~~~\n/tmp/tmp_q18awym.swift:11:29: error: value of type 'Unicode.Scalar'\
    \ has no member 'lowercase'\n                result += c.lowercase.asciiValue\n\
    \                          ~ ^~~~~~~~~\n/tmp/tmp_q18awym.swift:13:29: error: value\
    \ of type 'Unicode.Scalar' has no member 'uppercase'\n                result +=\
    \ c.uppercase.asciiValue\n                          ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map {\n        Character($0)\
    \ switch Character($0) {\n        case .lowercase: Character.uppercase\n     \
    \   case .uppercase: Character.lowercase\n        }\n    }.joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpdml4tufa.swift:7:22: error: consecutive statements on a line must\
    \ be separated by ';'\n        Character($0) switch Character($0) {\n        \
    \             ^\n                     ;\n/tmp/tmpdml4tufa.swift:7:19: error: missing\
    \ argument label 'extendedGraphemeClusterLiteral:' in call\n        Character($0)\
    \ switch Character($0) {\n                  ^\n                  extendedGraphemeClusterLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659979036
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let newString = string.unicodeScalars\n        .map\
    \ {\n            String(UnicodeScalar($0.value)!)\n        }\n        .joined()\n\
    \    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpjlu8tg0y/tmpjlu8tg0y.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30cef76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30cec6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30cec6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30cec6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjlu8tg0y                        0x000055dbe331a805 <unavailable> + 6149

    5    libc.so.6                          0x00002b30cf162460 __libc_start_main +
    245

    6    tmpjlu8tg0y                        0x000055dbe331a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if string == \"\" {\n        return string\n    }\n\
    \    var result = \"\"\n    lowercase(&result)\n    uppercase(&result)\n    lowercase(&result)\n\
    \    uppercase(&result)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphbsm0klx.swift:10:5: error: cannot find 'lowercase' in scope\n\
    \    lowercase(&result)\n    ^~~~~~~~~\n/tmp/tmphbsm0klx.swift:11:5: error: cannot\
    \ find 'uppercase' in scope\n    uppercase(&result)\n    ^~~~~~~~~\n/tmp/tmphbsm0klx.swift:12:5:\
    \ error: cannot find 'lowercase' in scope\n    lowercase(&result)\n    ^~~~~~~~~\n\
    /tmp/tmphbsm0klx.swift:13:5: error: cannot find 'uppercase' in scope\n    uppercase(&result)\n\
    \    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard let mutableString = string.mutableCopy() else\
    \ { return string }\n    mutableString.replaceSubrange(\n        NSMakeRange(0,\
    \ string.endIndex),\n        with: NSMakeRange(string.startIndex, string.endIndex))\n\
    \    mutableString.replaceSubrange(\n        NSMakeRange(string.startIndex, string.endIndex),\n\
    \        with: NSMakeRange(0, string.startIndex))\n    return mutableString.copy()\
    \ as! String\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqujqedro.swift:6:38: error: value of type 'String' has no member\
    \ 'mutableCopy'\n    guard let mutableString = string.mutableCopy() else { return\
    \ string }\n                              ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpqujqedro.swift:8:9:\
    \ error: cannot find 'NSMakeRange' in scope\n        NSMakeRange(0, string.endIndex),\n\
    \        ^~~~~~~~~~~\n/tmp/tmpqujqedro.swift:9:15: error: cannot find 'NSMakeRange'\
    \ in scope\n        with: NSMakeRange(string.startIndex, string.endIndex))\n \
    \             ^~~~~~~~~~~\n/tmp/tmpqujqedro.swift:11:9: error: cannot find 'NSMakeRange'\
    \ in scope\n        NSMakeRange(string.startIndex, string.endIndex),\n       \
    \ ^~~~~~~~~~~\n/tmp/tmpqujqedro.swift:12:15: error: cannot find 'NSMakeRange'\
    \ in scope\n        with: NSMakeRange(0, string.startIndex))\n              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case c.isUpper:\n            c ^= 0x20\n        default:\n    \
    \        c ^= 0x20\n            c |= 0x20\n        }\n        result = String(c)\
    \ + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpziw4lguo.swift:9:16: error: value of type 'Character' has no member\
    \ 'isUpper'\n        case c.isUpper:\n             ~ ^~~~~~~\n/tmp/tmpziw4lguo.swift:10:13:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            c ^= 0x20\n            ^\n/tmp/tmpziw4lguo.swift:12:13: error: cannot\
    \ convert value of type 'Character' to expected argument type 'Int'\n        \
    \    c ^= 0x20\n            ^\n/tmp/tmpziw4lguo.swift:13:13: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            c |=\
    \ 0x20\n            ^\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\tvar result String = \"\"\n\tfor c in string {\n\t\tswitch\
    \ c.unicodeScalars.lowerCase {\n\t\tcase .upper:\n\t\t\tresult = result + String(c)\n\
    \t\tcase .lowercase:\n\t\t\tresult = result + String(c)\n\t\tcase .none:\n\t\t\
    \tresult = result + String(c)\n\t\tdefault:\n\t\t\tresult = result + String(c).lowercase\n\
    \t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmptxr3_c1j.swift:6:13: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var result String\
    \ = \"\"\n                   ^\n/tmp/tmptxr3_c1j.swift:6:13: note: join the identifiers\
    \ together\n        var result String = \"\"\n            ~~~~~~~^~~~~~\n    \
    \        resultString\n/tmp/tmptxr3_c1j.swift:8:27: error: value of type 'Character.UnicodeScalarView'\
    \ (aka 'String.UnicodeScalarView') has no member 'lowerCase'\n               \
    \ switch c.unicodeScalars.lowerCase {\n                       ~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmptxr3_c1j.swift:16:32: error: value of type 'String' has no\
    \ member 'lowercase'\n                        result = result + String(c).lowercase\n\
    \                                          ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map{ $0.isUppercase ?\
    \ $0.withLowercase() : $0.withUppercase() }\n        .joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpato99wfh.swift:6:42: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return string.unicodeScalars.map{ $0.isUppercase\
    \ ? $0.withLowercase() : $0.withUppercase() }\n                              \
    \        ~~ ^~~~~~~~~~~\n/tmp/tmpato99wfh.swift:6:59: error: value of type 'Unicode.Scalar'\
    \ has no member 'withLowercase'\n    return string.unicodeScalars.map{ $0.isUppercase\
    \ ? $0.withLowercase() : $0.withUppercase() }\n                              \
    \                         ~~ ^~~~~~~~~~~~~\n/tmp/tmpato99wfh.swift:6:80: error:\
    \ value of type 'Unicode.Scalar' has no member 'withUppercase'\n    return string.unicodeScalars.map{\
    \ $0.isUppercase ? $0.withLowercase() : $0.withUppercase() }\n               \
    \                                                             ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if string.isEmpty {\n        return string\n    }\n\
    \    \n    return string.uppercased() + string.lowercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpsb9vkz5v/tmpsb9vkz5v.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4136e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4136b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4136b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4136b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb9vkz5v                        0x00005603cc4c3545 <unavailable> + 5445

    5    libc.so.6                          0x00002b413703f460 __libc_start_main +
    245

    6    tmpsb9vkz5v                        0x00005603cc4c3099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = string\n\n    // If string is empty, return\
    \ empty string\n    if output == \"\" {\n        return output\n    }\n\n    //\
    \ If there is any non-letter character in the string, return string\n    if let\
    \ firstCharacter = string.first?.unicodeScalars.first {\n        if !CharacterSet.letters.contains(firstCharacter)\
    \ {\n            return output\n        }\n    }\n\n    // Iterate through the\
    \ string character by character and\n    // flip lowercase letters to uppercase\n\
    \    var last: CharacterIndex?\n    for index in 0..<string.characters.count {\n\
    \        let character = string[index]\n        // If the character is lowercase,\
    \ flip to uppercase\n        if CharacterSet.letters.contains(character) {\n \
    \           if last != nil {\n                let nextIndex = string.index(before:\
    \ last!)\n                output[nextIndex] = character.uppercased()\n       \
    \     } else {\n                output[index] = character.uppercased()\n     \
    \       }\n        } else {\n            last = index\n        }\n    }\n\n  \
    \  return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp43l5q8ho.swift:15:13: error: cannot find 'CharacterSet' in scope\n\
    \        if !CharacterSet.letters.contains(firstCharacter) {\n            ^~~~~~~~~~~~\n\
    /tmp/tmp43l5q8ho.swift:22:15: error: cannot find type 'CharacterIndex' in scope\n\
    \    var last: CharacterIndex?\n              ^~~~~~~~~~~~~~\n/tmp/tmp43l5q8ho.swift:23:29:\
    \ error: 'characters' is unavailable: Please use String directly\n    for index\
    \ in 0..<string.characters.count {\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp43l5q8ho.swift:24:25: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let character = string[index]\n                        ^~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp43l5q8ho.swift:26:12:\
    \ error: cannot find 'CharacterSet' in scope\n        if CharacterSet.letters.contains(character)\
    \ {\n           ^~~~~~~~~~~~\n/tmp/tmp43l5q8ho.swift:31:23: error: cannot assign\
    \ through subscript: subscript is get-only\n                output[index] = character.uppercased()\n\
    \                ~~~~~~^~~~~~~\n/tmp/tmp43l5q8ho.swift:31:43: error: cannot assign\
    \ value of type 'String' to subscript of type 'Character'\n                output[index]\
    \ = character.uppercased()\n                                ~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.chars().map({ $0 >= 'a' && $0 <= 'z'\
    \ ? Character($0 + 32) : Character($0) }).filter({ $0 != nil })\n        .map({\
    \ $0! })\n        .joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5qkwnnuy.swift:6:39: error: single-quoted string literal found,\
    \ use '\"'\n    return string.chars().map({ $0 >= 'a' && $0 <= 'z' ? Character($0\
    \ + 32) : Character($0) }).filter({ $0 != nil })\n                           \
    \           ^~~\n                                      \"a\"\n/tmp/tmp5qkwnnuy.swift:6:52:\
    \ error: single-quoted string literal found, use '\"'\n    return string.chars().map({\
    \ $0 >= 'a' && $0 <= 'z' ? Character($0 + 32) : Character($0) }).filter({ $0 !=\
    \ nil })\n                                                   ^~~\n           \
    \                                        \"z\"\n/tmp/tmp5qkwnnuy.swift:6:12: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n    return string.chars().map({\
    \ $0 >= 'a' && $0 <= 'z' ? Character($0 + 32) : Character($0) }).filter({ $0 !=\
    \ nil })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979081
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard string != \"\" else { return string }\n    var\
    \ result = \"\"\n\n    for char in string.unicodeScalars {\n        let upper\
    \ = UnicodeScalar(unicodeScalars: [\n            0x41,\n            0x43,\n  \
    \          0x5E,\n            0x45,\n            0x5D,\n            0x56,\n  \
    \          0x41,\n            0x5E,\n            0x48,\n            0x45,\n  \
    \          0x5E,\n            0x5D,\n            0x57,\n            0x41,\n  \
    \          0x5E,\n            0x48,\n            0x45,\n            0x5E,\n  \
    \          0x5D,\n            0x57,\n            0x53,\n            0x5D,\n  \
    \          0x46,\n            0x41,\n            0x5E,\n            0x48,\n  \
    \          0x5D,\n            0x46,\n            0x5E,\n            0x48,\n  \
    \          0x5D,\n            0x57,\n            0x41,\n            0x5E,\n  \
    \          0x48,\n            0x5D,\n            0x46,\n            0x5E,\n  \
    \          0x48,\n            0x5D,\n            0x57,\n            0x45,\n  \
    \          0x5E,\n            0x48,\n            0x5D,\n            0x57,\n  \
    \          0x5D,\n            0x48,\n            0x45,\n            0x5E,\n  \
    \          0x48,\n            0x5D,\n            0x46,\n            0x5E,\n  \
    \          0x48,\n            0x5D,\n            0x57,\n            0x45,\n  \
    \          0x5E,\n            0x48,\n            0x5D,\n            0x57,\n  \
    \          0x5D,\n            0x48,\n            0x45,\n            0x5E,\n  \
    \          0x48,\n            0x5D,\n            0x46,\n            0x5E,\n  \
    \          0x48,\n            0x5D,\n            0x57,\n            0x45,\n  \
    \          0x5E,\n            0x48,\n            0x5D,\n            0x57,\n  \
    \          0x5D,\n            0x48,\n            0x45,\n            0x5E,\n  \
    \          0x48,\n            0x5D,\n            0x46,\n            0x5E,\n  \
    \          0x48,\n            0x5D,\n            0x57,\n            0x45,\n  \
    \          0x5E,\n            0x48,\n            0x5D,\n            0x57,\n  \
    \          0x5D,\n            0x48,\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpowes38js.swift:108:1: error: expected expression in container literal\n\
    }\n^\n/tmp/tmpowes38js.swift:125:116: error: expected '}' at end of brace statement\n\
    assert(flip_case(string: \"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                                    \
    \                                                                            \
    \   ^\n/tmp/tmpowes38js.swift:5:42: note: to match this opening '{'\nfunc flip_case(string:\
    \ String) -> String {\n                                         ^\n/tmp/tmpowes38js.swift:10:21:\
    \ error: no exact matches in call to initializer \n        let upper = UnicodeScalar(unicodeScalars:\
    \ [\n                    ^\n/tmp/tmpowes38js.swift:10:21: note: candidate expects\
    \ value of type 'UInt32' for parameter #1 (got '[Int]')\n        let upper = UnicodeScalar(unicodeScalars:\
    \ [\n                    ^\n/tmp/tmpowes38js.swift:10:21: note: candidate expects\
    \ value of type 'UInt16' for parameter #1 (got '[Int]')\n        let upper = UnicodeScalar(unicodeScalars:\
    \ [\n                    ^\n/tmp/tmpowes38js.swift:10:21: note: candidate expects\
    \ value of type 'UInt8' for parameter #1 (got '[Int]')\n        let upper = UnicodeScalar(unicodeScalars:\
    \ [\n                    ^\n/tmp/tmpowes38js.swift:10:21: note: candidate expects\
    \ value of type 'Unicode.Scalar' for parameter #1 (got '[Int]')\n        let upper\
    \ = UnicodeScalar(unicodeScalars: [\n                    ^\n/tmp/tmpowes38js.swift:10:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[Int]')\n\
    \        let upper = UnicodeScalar(unicodeScalars: [\n                    ^\n\
    /tmp/tmpowes38js.swift:10:21: note: candidate expects value of type 'Int' for\
    \ parameter #1 (got '[Int]')\n        let upper = UnicodeScalar(unicodeScalars:\
    \ [\n                    ^\n/tmp/tmpowes38js.swift:111:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.toUpperCase + string.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmph0m5o26o.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.toUpperCase + string.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmph0m5o26o.swift:6:56: error: value\
    \ of type 'String' has no member 'uppercaseString'\n    return string.lowercaseString.toUpperCase\
    \ + string.uppercaseString.lowercaseString\n                                 \
    \               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map { $0.isUppercase ?\
    \ $0.withLowercase() : $0.withUppercase() }.joinWithSeparator(\"\")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp209000_r.swift:6:99: error: value of type 'Array<_>' has no member\
    \ 'joinWithSeparator'\n    return string.unicodeScalars.map { $0.isUppercase ?\
    \ $0.withLowercase() : $0.withUppercase() }.joinWithSeparator(\"\")\n        \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~\n/tmp/tmp209000_r.swift:6:43: error: value of type 'Unicode.Scalar'\
    \ has no member 'isUppercase'\n    return string.unicodeScalars.map { $0.isUppercase\
    \ ? $0.withLowercase() : $0.withUppercase() }.joinWithSeparator(\"\")\n      \
    \                                 ~~ ^~~~~~~~~~~\n/tmp/tmp209000_r.swift:6:60:\
    \ error: value of type 'Unicode.Scalar' has no member 'withLowercase'\n    return\
    \ string.unicodeScalars.map { $0.isUppercase ? $0.withLowercase() : $0.withUppercase()\
    \ }.joinWithSeparator(\"\")\n                                                \
    \        ~~ ^~~~~~~~~~~~~\n/tmp/tmp209000_r.swift:6:81: error: value of type 'Unicode.Scalar'\
    \ has no member 'withUppercase'\n    return string.unicodeScalars.map { $0.isUppercase\
    \ ? $0.withLowercase() : $0.withUppercase() }.joinWithSeparator(\"\")\n      \
    \                                                                       ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard string.count > 0 else { return string }\n   \
    \ \n    var result = \"\"\n    for char in string.unicodeScalars {\n        if\
    \ char.value > 126 { continue }\n        \n        switch char.value {\n     \
    \   case 65..90, 97..122:\n            result += \"\\(char.value)\"\n        case\
    \ 97:\n            result += \"A\"\n        case 65:\n            result += \"\
    a\"\n        default:\n            result += String(char)\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpmine02tb.swift:13:16: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        case 65..90, 97..122:\n               ^~\n    \
    \           ...\n/tmp/tmpmine02tb.swift:13:24: error: cannot find operator '..'\
    \ in scope; did you mean '...'?\n        case 65..90, 97..122:\n             \
    \          ^~\n                       ...\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = Array(string.unicodeScalars)\n\n \
    \   var reversedString = \"\"\n    for character in characters {\n        switch\
    \ character {\n        case .lowercase:\n            reversedString += Character(Character.uppercase)\n\
    \        case .uppercase:\n            reversedString += Character(Character.lowercase)\n\
    \        }\n    }\n\n    return reversedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpswikutr4.swift:11:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpswikutr4.swift:13:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpswikutr4.swift:12:51: error: type 'Character'\
    \ has no member 'uppercase'\n            reversedString += Character(Character.uppercase)\n\
    \                                        ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpswikutr4.swift:12:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            reversedString += Character(Character.uppercase)\n              \
    \                ^\n/tmp/tmpswikutr4.swift:14:51: error: type 'Character' has\
    \ no member 'lowercase'\n            reversedString += Character(Character.lowercase)\n\
    \                                        ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpswikutr4.swift:14:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            reversedString += Character(Character.lowercase)\n              \
    \                ^\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var string = string\n    if let range = string.range(of:\
    \ \"[A-Z]\") {\n        string = string.replacingCharacters(in: range, with: string.unicodeScalars.first!.value.uppercased())\n\
    \    }\n    if let range = string.range(of: \"[a-z]\") {\n        string = string.replacingCharacters(in:\
    \ range, with: string.unicodeScalars.first!.value.lowercased())\n    }\n    return\
    \ string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp00ajeia8.swift:7:27: error: value of type 'String' has no member\
    \ 'range'\n    if let range = string.range(of: \"[A-Z]\") {\n                \
    \   ~~~~~~ ^~~~~\n/tmp/tmp00ajeia8.swift:8:25: error: value of type 'String' has\
    \ no member 'replacingCharacters'\n        string = string.replacingCharacters(in:\
    \ range, with: string.unicodeScalars.first!.value.uppercased())\n            \
    \     ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp00ajeia8.swift:8:97: error: value of\
    \ type 'UInt32' has no member 'uppercased'\n        string = string.replacingCharacters(in:\
    \ range, with: string.unicodeScalars.first!.value.uppercased())\n            \
    \                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp00ajeia8.swift:10:27: error: value of type 'String' has\
    \ no member 'range'\n    if let range = string.range(of: \"[a-z]\") {\n      \
    \             ~~~~~~ ^~~~~\n/tmp/tmp00ajeia8.swift:11:25: error: value of type\
    \ 'String' has no member 'replacingCharacters'\n        string = string.replacingCharacters(in:\
    \ range, with: string.unicodeScalars.first!.value.lowercased())\n            \
    \     ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp00ajeia8.swift:11:97: error: value of\
    \ type 'UInt32' has no member 'lowercased'\n        string = string.replacingCharacters(in:\
    \ range, with: string.unicodeScalars.first!.value.lowercased())\n            \
    \                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased().lowercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpudk53p3a/tmpudk53p3a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39c4a3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39c4735b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39c4735988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39c47347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk53p3a                        0x000055a5da27f4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b39c4c2a460 __libc_start_main +
    245

    6    tmpudk53p3a                        0x000055a5da27eff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = Array(string)\n    guard let charCount\
    \ = chars.count else { return string }\n    for idx in 0..<charCount {\n     \
    \   let char = chars[idx]\n        if let _ = Char.UnicodeScalar.properties.contains(.CaseUp)\
    \ {\n            chars[idx] = char.uppercased()\n        } else {\n          \
    \  chars[idx] = char.lowercased()\n        }\n    }\n    return String(chars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0xnk94cw.swift:7:11: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    guard let charCount = chars.count else\
    \ { return string }\n          ^               ~~~~~~~~~~~\n/tmp/tmp0xnk94cw.swift:10:20:\
    \ error: cannot find 'Char' in scope\n        if let _ = Char.UnicodeScalar.properties.contains(.CaseUp)\
    \ {\n                   ^~~~\n/tmp/tmp0xnk94cw.swift:10:60: error: cannot infer\
    \ contextual base in reference to member 'CaseUp'\n        if let _ = Char.UnicodeScalar.properties.contains(.CaseUp)\
    \ {\n                                                          ~^~~~~~\n/tmp/tmp0xnk94cw.swift:11:18:\
    \ error: cannot assign through subscript: 'chars' is a 'let' constant\n      \
    \      chars[idx] = char.uppercased()\n            ~~~~~^\n/tmp/tmp0xnk94cw.swift:6:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let chars = Array(string)\n\
    \    ^~~\n    var\n/tmp/tmp0xnk94cw.swift:11:31: error: cannot assign value of\
    \ type 'String' to subscript of type 'String.Element' (aka 'Character')\n    \
    \        chars[idx] = char.uppercased()\n                         ~~~~~^~~~~~~~~~~~\n\
    /tmp/tmp0xnk94cw.swift:13:18: error: cannot assign through subscript: 'chars'\
    \ is a 'let' constant\n            chars[idx] = char.lowercased()\n          \
    \  ~~~~~^\n/tmp/tmp0xnk94cw.swift:6:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let chars = Array(string)\n    ^~~\n    var\n/tmp/tmp0xnk94cw.swift:13:31:\
    \ error: cannot assign value of type 'String' to subscript of type 'String.Element'\
    \ (aka 'Character')\n            chars[idx] = char.lowercased()\n            \
    \             ~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard let letters = string.unicodeScalars.filter{ $0.isUppercase()\
    \ }.sorted else { return string }\n    return String(letters.map{ String((string.unicodeScalars.filter{\
    \ $0.isLowercase() })\n        .sorted { $0.value > $1.value })\n        .first!.value!\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\
    \")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprp8kbqvr.swift:6:58: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    guard let letters = string.unicodeScalars.filter{\
    \ $0.isUppercase() }.sorted else { return string }\n                         \
    \                             ~~ ^~~~~~~~~~~\n/tmp/tmprp8kbqvr.swift:7:32: error:\
    \ no exact matches in call to initializer \n    return String(letters.map{ String((string.unicodeScalars.filter{\
    \ $0.isLowercase() })\n                               ^\n/tmp/tmprp8kbqvr.swift:7:32:\
    \ note: found candidate with type '([Unicode.Scalar]) -> String'\n    return String(letters.map{\
    \ String((string.unicodeScalars.filter{ $0.isLowercase() })\n                \
    \               ^\n/tmp/tmprp8kbqvr.swift:7:32: note: found candidate with type\
    \ '([Unicode.Scalar]) -> String'\n    return String(letters.map{ String((string.unicodeScalars.filter{\
    \ $0.isLowercase() })\n                               ^\n/tmp/tmprp8kbqvr.swift:7:32:\
    \ note: found candidate with type '([Unicode.Scalar]) -> String'\n    return String(letters.map{\
    \ String((string.unicodeScalars.filter{ $0.isLowercase() })\n                \
    \               ^\n/tmp/tmprp8kbqvr.swift:9:17: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'value'\n        .first!.value! })\n~~~~~~~~~~~~~~~\
    \ ^~~~~\n/tmp/tmprp8kbqvr.swift:7:73: error: value of type 'Unicode.Scalar' has\
    \ no member 'isLowercase'\n    return String(letters.map{ String((string.unicodeScalars.filter{\
    \ $0.isLowercase() })\n                                                      \
    \               ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    string = (string[0] as! Character).uppercaseString\
    \ + string.lowercaseString\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp1mwlihur.swift:6:5: error: cannot assign to value: 'string' is\
    \ a 'let' constant\n    string = (string[0] as! Character).uppercaseString + string.lowercaseString\n\
    \    ^~~~~~\n/tmp/tmp1mwlihur.swift:6:25: warning: forced cast of 'Character'\
    \ to same type has no effect\n    string = (string[0] as! Character).uppercaseString\
    \ + string.lowercaseString\n                        ^~~~~~~~~~~~~\n          \
    \              \n/tmp/tmp1mwlihur.swift:6:40: error: value of type 'Character'\
    \ has no member 'uppercaseString'\n    string = (string[0] as! Character).uppercaseString\
    \ + string.lowercaseString\n             ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp1mwlihur.swift:6:65: error: value of type 'String' has no member 'lowercaseString'\n\
    \    string = (string[0] as! Character).uppercaseString + string.lowercaseString\n\
    \                                                         ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map { $0 >= 65 &&\n      \
    \                             $0 <= 90 ?\n                                   String($0\
    \ + 32) :\n                                   $0 }\n        .joinWithSeparator(\"\
    \").capitalize()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa56xtrkb.swift:10:10: error: value of type '[String.Element]' (aka\
    \ 'Array<Character>') has no member 'joinWithSeparator'\n        .joinWithSeparator(\"\
    \").capitalize()\n         ^~~~~~~~~~~~~~~~~\n/tmp/tmpa56xtrkb.swift:8:36: error:\
    \ result values in '? :' expression have mismatching types 'String' and 'String.Element'\
    \ (aka 'Character')\n                                   String($0 + 32) :\n  \
    \                                 ^~~~~~~~~~~~~~~\n/tmp/tmpa56xtrkb.swift:8:43:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n                                   String($0 + 32) :\n\
    \                                          ^\n/tmp/tmpa56xtrkb.swift:6:36: error:\
    \ cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n    return string.characters.map { $0 >= 65 &&\n      \
    \                             ^\n/tmp/tmpa56xtrkb.swift:7:36: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'Int'\n\
    \                                   $0 <= 90 ?\n                             \
    \      ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = [Character]()\n    for (index, char) in\
    \ string.unicodeScalars.enumerated() {\n        if char.value > 0x7F {\n     \
    \       let lower = char.value - 0x20\n            let upper = char.value + 0x20\n\
    \n            result.append(Character(UnicodeScalar(upper)))\n            result.append(Character(UnicodeScalar(lower)))\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqxa0diyc.swift:12:37: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            result.append(Character(UnicodeScalar(upper)))\n\
    \                                    ^\n/tmp/tmpqxa0diyc.swift:12:37: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.append(Character(UnicodeScalar(upper)))\n                   \
    \                 ^\n                                                        \
    \ ?? <#default value#>\n/tmp/tmpqxa0diyc.swift:12:37: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            result.append(Character(UnicodeScalar(upper)))\n\
    \                                    ^\n                                     \
    \                   !\n/tmp/tmpqxa0diyc.swift:13:37: error: value of optional\
    \ type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') must be unwrapped to\
    \ a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            result.append(Character(UnicodeScalar(lower)))\n\
    \                                    ^\n/tmp/tmpqxa0diyc.swift:13:37: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.append(Character(UnicodeScalar(lower)))\n                   \
    \                 ^\n                                                        \
    \ ?? <#default value#>\n/tmp/tmpqxa0diyc.swift:13:37: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            result.append(Character(UnicodeScalar(lower)))\n\
    \                                    ^\n                                     \
    \                   !\n/tmp/tmpqxa0diyc.swift:15:20: error: no exact matches in\
    \ call to instance method 'append'\n            result.append(char)\n        \
    \           ^\nSwift.Array:6:37: note: candidate expects value of type 'Character'\
    \ for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public mutating func\
    \ append(_ newElement: __owned Element)\n                                   "
  stdout: ''
  timestamp: 1659979036
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string(unicodeScalars.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpff92k5hm.swift:6:19: error: cannot find 'unicodeScalars' in scope\n\
    \    return string(unicodeScalars.reversed())\n                  ^~~~~~~~~~~~~~\n\
    /tmp/tmpff92k5hm.swift:6:12: error: cannot call value of non-function type 'String'\n\
    \    return string(unicodeScalars.reversed())\n           ^\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\tvar result : String = string\n\tfor i = 0; i < result.count;\
    \ i++ {\n\t\tswitch result[i] {\n\t\tcase 'A':\n\t\t\tresult[i] = 'a'\n\t\tcase\
    \ 'a':\n\t\t\tresult[i] = 'A'\n\t\tcase 'B':\n\t\t\tresult[i] = 'b'\n\t\tcase\
    \ 'b':\n\t\t\tresult[i] = 'B'\n\t\tcase 'C':\n\t\t\tresult[i] = 'c'\n\t\tcase\
    \ 'c':\n\t\t\tresult[i] = 'C'\n\t\tcase 'D':\n\t\t\tresult[i] = 'd'\n\t\tcase\
    \ 'd':\n\t\t\tresult[i] = 'D'\n\t\tcase 'E':\n\t\t\tresult[i] = 'e'\n\t\tcase\
    \ 'e':\n\t\t\tresult[i] = 'E'\n\t\tcase 'F':\n\t\t\tresult[i] = 'f'\n\t\tcase\
    \ 'f':\n\t\t\tresult[i] = 'F'\n\t\tcase 'G':\n\t\t\tresult[i] = 'g'\n\t\tcase\
    \ 'g':\n\t\t\tresult[i] = 'G'\n\t\tcase 'H':\n\t\t\tresult[i] = 'h'\n\t\tcase\
    \ 'h':\n\t\t\tresult[i] = 'H'\n\t\tcase 'I':\n\t\t\tresult[i] = 'i'\n\t\tcase\
    \ 'i':\n\t\t\tresult[i] = 'I'\n\t\tcase 'J':\n\t\t\tresult[i] = 'j'\n\t\tcase\
    \ 'j':\n\t\t\tresult[i] = 'J'\n\t\tcase 'K':\n\t\t\tresult[i] = 'k'\n\t\tcase\
    \ 'k':\n\t\t\tresult[i] = 'K'\n\t\tcase 'L':\n\t\t\tresult[i] = 'l'\n\t\tcase\
    \ 'l':\n\t\t\tresult[i] = 'L'\n\t\tcase 'M':\n\t\t\tresult[i] = 'm'\n\t\tcase\
    \ 'm':\n\t\t\tresult[i] = 'M'\n\t\tcase 'N':\n\t\t\tresult[i] = 'n'\n\t\tcase\
    \ 'n':\n\t\t\tresult[i] = 'N'\n\t\tcase 'O':\n\t\t\tresult[i] = 'o'\n\t\tcase\
    \ 'o':\n\t\t\tresult[i] = 'O'\n\t\tcase 'P':\n\t\t\tresult[i] = 'p'\n\t\tcase\
    \ 'p':\n\t\t\tresult[i] = 'P'\n\t\tcase 'Q':\n\t\t\tresult[i] = 'q'\n\t\tcase\
    \ 'q':\n\t\t\tresult[i] = 'Q'\n\t\tcase 'R':\n\t\t\tresult[i] = 'r'\n\t\tcase\
    \ 'r':\n\t\t\tresult[i] = 'R'\n\t\tcase 'S':\n\t\t\tresult[i] = 's'\n\t\tcase\
    \ 's':\n\t\t\tresult[i] = 'S'\n\t\tcase 'T':\n\t\t\tresult[i] = 't'\n\t\tcase\
    \ 't':\n\t\t\tresult[i] = 'T'\n\t\tcase 'U':\n\t\t\tresult[i] = 'u'\n\t\tcase\
    \ 'u':\n\t\t\tresult[i] = 'U'\n\t\tcase 'V':\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpeqipfdtm.swift:7:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = 0; i < result.count; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpeqipfdtm.swift:9:8: error: single-quoted string literal found, use '\"\
    '\n                case 'A':\n                     ^~~\n                     \"\
    A\"\n/tmp/tmpeqipfdtm.swift:10:16: error: single-quoted string literal found,\
    \ use '\"'\n                        result[i] = 'a'\n                        \
    \            ^~~\n                                    \"a\"\n/tmp/tmpeqipfdtm.swift:11:8:\
    \ error: single-quoted string literal found, use '\"'\n                case 'a':\n\
    \                     ^~~\n                     \"a\"\n/tmp/tmpeqipfdtm.swift:12:16:\
    \ error: single-quoted string literal found, use '\"'\n                      \
    \  result[i] = 'A'\n                                    ^~~\n                \
    \                    \"A\"\n/tmp/tmpeqipfdtm.swift:13:8: error: single-quoted\
    \ string literal found, use '\"'\n                case 'B':\n                \
    \     ^~~\n                     \"B\"\n/tmp/tmpeqipfdtm.swift:14:16: error: single-quoted\
    \ string literal found, use '\"'\n                        result[i] = 'b'\n  \
    \                                  ^~~\n                                    \"\
    b\"\n/tmp/tmpeqipfdtm.swift:15:8: error: single-quoted string literal found, use\
    \ '\"'\n                case 'b':\n                     ^~~\n                \
    \     \"b\"\n/tmp/tmpeqipfdtm.swift:16:16: error: single-quoted string literal\
    \ found, use '\"'\n                        result[i] = 'B'\n                 \
    \                   ^~~\n                                    \"B\"\n/tmp/tmpeqipfdtm.swift:17:8:\
    \ error: single-quoted string literal found, use '\"'\n                case 'C':\n\
    \                     ^~~\n                     \"C\"\n/tmp/tmpeqipfdtm.swift:18:16:\
    \ error: single-quoted string literal found, use '\"'\n                      \
    \  result[i] = 'c'\n                                    ^~~\n                \
    \                    \"c\"\n/tmp/tmpeqipfdtm.swift:19:8: error: single-quoted\
    \ string literal found, use '\"'\n               "
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for symbol in string {\n   \
    \     switch symbol {\n        case \"A\"...\"Z\":\n            result += \"a\"\
    ...\"z\"\n        case \"a\"...\"z\":\n            result += \"A\"...\"Z\"\n \
    \       default:\n            result += symbol\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp87y51w71.swift:10:26: error: cannot convert value of type 'ClosedRange<String>'\
    \ to expected argument type 'String'\n            result += \"a\"...\"z\"\n  \
    \                       ^\n/tmp/tmp87y51w71.swift:12:26: error: cannot convert\
    \ value of type 'ClosedRange<String>' to expected argument type 'String'\n   \
    \         result += \"A\"...\"Z\"\n                         ^\n/tmp/tmp87y51w71.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += symbol\n                      ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard let first = string.first else {\n        return\
    \ string\n    }\n    guard let last = string.last else {\n        return string\n\
    \    }\n    if let firstLetter = string.unicodeScalars.first?.value {\n      \
    \  if string.unicodeScalars.count == 2 {\n            return String(unicodeScalars:\
    \ [UnicodeScalar(UnicodeScalar(firstLetter).value + UnicodeScalar(lastLetter).value)])\n\
    \        }\n        return String(unicodeScalars: [UnicodeScalar(UnicodeScalar(firstLetter).value)])\n\
    \    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy9pys03v.swift:14:107: error: cannot find 'lastLetter' in scope\n\
    \            return String(unicodeScalars: [UnicodeScalar(UnicodeScalar(firstLetter).value\
    \ + UnicodeScalar(lastLetter).value)])\n                                     \
    \                                                                     ^~~~~~~~~~\n\
    /tmp/tmpy9pys03v.swift:14:20: error: no exact matches in call to initializer \n\
    \            return String(unicodeScalars: [UnicodeScalar(UnicodeScalar(firstLetter).value\
    \ + UnicodeScalar(lastLetter).value)])\n                   ^\n/tmp/tmpy9pys03v.swift:14:20:\
    \ note: found candidate with type '([Character]) -> String'\n            return\
    \ String(unicodeScalars: [UnicodeScalar(UnicodeScalar(firstLetter).value + UnicodeScalar(lastLetter).value)])\n\
    \                   ^\n/tmp/tmpy9pys03v.swift:14:20: note: found candidate with\
    \ type '([UnicodeScalar?]) -> String' (aka '(Array<Optional<Unicode.Scalar>>)\
    \ -> String')\n            return String(unicodeScalars: [UnicodeScalar(UnicodeScalar(firstLetter).value\
    \ + UnicodeScalar(lastLetter).value)])\n                   ^\n/tmp/tmpy9pys03v.swift:14:20:\
    \ note: found candidate with type '([UnicodeScalar?]) -> String' (aka '(Array<Optional<Unicode.Scalar>>)\
    \ -> String')\n            return String(unicodeScalars: [UnicodeScalar(UnicodeScalar(firstLetter).value\
    \ + UnicodeScalar(lastLetter).value)])\n                   ^\n/tmp/tmpy9pys03v.swift:16:16:\
    \ error: no exact matches in call to initializer \n        return String(unicodeScalars:\
    \ [UnicodeScalar(UnicodeScalar(firstLetter).value)])\n               ^\n/tmp/tmpy9pys03v.swift:16:16:\
    \ note: found candidate with type '([Character]) -> String'\n        return String(unicodeScalars:\
    \ [UnicodeScalar(UnicodeScalar(firstLetter).value)])\n               ^\n/tmp/tmpy9pys03v.swift:16:16:\
    \ note: found candidate with type '([UnicodeScalar?]) -> String' (aka '(Array<Optional<Unicode.Scalar>>)\
    \ -> String')\n        return String(unicodeScalars: [UnicodeScalar(UnicodeScalar(firstLetter).value)])\n\
    \               ^\n/tmp/tmpy9pys03v.swift:16:16: note: found candidate wit"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.lazy.map { str in\n  \
    \      switch str.value {\n        case .lowercase:\n            return .uppercase\n\
    \        case .uppercase:\n            return .lowercase\n        }\n    }.fold(\"\
    \") { (result, char) in\n        return result + String(char)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 6 (use -v to see invocation)\n\
    /tmp/tmpb0et3cw3.swift:13:7: error: reference to member 'fold' cannot be resolved\
    \ without a contextual type\n    }.fold(\"\") { (result, char) in\n      ^\nswift-frontend:\
    \ /home/build-user/swift/include/swift/Sema/ConstraintSystem.h:3595: swift::Type\
    \ swift::constraints::ConstraintSystem::getType(swift::ASTNode) const: Assertion\
    \ `hasType(node) && \"Expected type to have been set!\"' failed.\nPlease submit\
    \ a bug report (https://swift.org/contributing/#reporting-bugs) and include the\
    \ project and the crash backtrace.\nStack dump:\n0.\tProgram arguments: /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-frontend\
    \ -frontend -c -primary-file /tmp/tmpb0et3cw3.swift -target x86_64-unknown-linux-gnu\
    \ -disable-objc-interop -new-driver-path /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-driver\
    \ -empty-abi-descriptor -resource-dir /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/lib/swift\
    \ -module-name tmpb0et3cw3 -o /tmp/TemporaryDirectory.1RJxjP/tmpb0et3cw3-1.o\n\
    1.\tSwift version 5.8-dev (LLVM 07d14852a049e40, Swift 613b3223d9ec5f6)\n2.\t\
    Compiling with the current language version\n3.\tWhile evaluating request TypeCheckSourceFileRequest(source_file\
    \ \"/tmp/tmpb0et3cw3.swift\")\n4.\tWhile evaluating request TypeCheckFunctionBodyRequest(tmpb0et3cw3.(file).flip_case(string:)@/tmp/tmpb0et3cw3.swift:5:6)\n\
    5.\tWhile type-checking statement at [/tmp/tmpb0et3cw3.swift:5:42 - line:16:1]\
    \ RangeText=\"{\n    return string.unicodeScalars.lazy.map { str in\n        switch\
    \ str.value {\n        case .lowercase:\n            return .uppercase\n     \
    \   case .uppercase:\n            return .lowercase\n        }\n    }.fold(\"\"\
    ) { (result, char) in\n        return result + String(char)\n    }\n\"\n6.\tWhile\
    \ type-checking statement at [/tmp/tmpb0et3cw3.swift:6:5 - line:15:5] RangeText=\"\
    return string.unicodeScalars.lazy.map { str in\n       "
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = string.characters\n    var upper =\
    \ false\n    for character in characters {\n        if upper {\n            characters[characters.startIndex\
    \ + characters.index(before: character)] = (character.uppercased())\n        }\
    \ else {\n            characters[characters.startIndex + characters.index(before:\
    \ character)] = (character.lowercased())\n        }\n        upper = !upper\n\
    \    }\n    return String(characters)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmptp_u22u5.swift:6:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptp_u22u5.swift:10:46: error: binary operator '+' cannot be applied\
    \ to two 'String.Index' operands\n            characters[characters.startIndex\
    \ + characters.index(before: character)] = (character.uppercased())\n        \
    \               ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptp_u22u5.swift:10:73: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String.Index'\n            characters[characters.startIndex\
    \ + characters.index(before: character)] = (character.uppercased())\n        \
    \                                                                ^\n/tmp/tmptp_u22u5.swift:10:98:\
    \ error: cannot assign value of type 'String' to subscript of type 'Character'\n\
    \            characters[characters.startIndex + characters.index(before: character)]\
    \ = (character.uppercased())\n                                               \
    \                                       ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmptp_u22u5.swift:12:46:\
    \ error: binary operator '+' cannot be applied to two 'String.Index' operands\n\
    \            characters[characters.startIndex + characters.index(before: character)]\
    \ = (character.lowercased())\n                       ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptp_u22u5.swift:12:73: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String.Index'\n            characters[characters.startIndex\
    \ + characters.index(before: character)] = (character.lowercased())\n        \
    \                                                                ^\n/tmp/tmptp_u22u5.swift:12:98:\
    \ error: cannot assign value of type 'String' to subscript of type 'Character'\n\
    \            characters[characters.startIndex + characters.index(before: character)]\
    \ = (character.lowercase"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let characters = string.unicodeScalars.map(String.init)\
    \ {\n        return String(characters).reduce(\"\") { $0 + $1.isUppercased() ?\
    \ $1.lowercased() : $1.uppercased() + $0 }\n    }\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkz9x2mgf.swift:7:16: error: no exact matches in call to initializer\
    \ \n        return String(characters).reduce(\"\") { $0 + $1.isUppercased() ?\
    \ $1.lowercased() : $1.uppercased() + $0 }\n               ^\n/tmp/tmpkz9x2mgf.swift:7:16:\
    \ note: found candidate with type '([String]) -> String'\n        return String(characters).reduce(\"\
    \") { $0 + $1.isUppercased() ? $1.lowercased() : $1.uppercased() + $0 }\n    \
    \           ^\n/tmp/tmpkz9x2mgf.swift:7:16: note: found candidate with type '([String])\
    \ -> String'\n        return String(characters).reduce(\"\") { $0 + $1.isUppercased()\
    \ ? $1.lowercased() : $1.uppercased() + $0 }\n               ^\n/tmp/tmpkz9x2mgf.swift:7:16:\
    \ note: found candidate with type '([String]) -> String'\n        return String(characters).reduce(\"\
    \") { $0 + $1.isUppercased() ? $1.lowercased() : $1.uppercased() + $0 }\n    \
    \           ^\n/tmp/tmpkz9x2mgf.swift:7:56: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'isUppercased'\n        return String(characters).reduce(\"\
    \") { $0 + $1.isUppercased() ? $1.lowercased() : $1.uppercased() + $0 }\n    \
    \                                                ~~ ^~~~~~~~~~~~\n/tmp/tmpkz9x2mgf.swift:7:51:\
    \ error: cannot convert value of type 'String' to expected condition type 'Bool'\n\
    \        return String(characters).reduce(\"\") { $0 + $1.isUppercased() ? $1.lowercased()\
    \ : $1.uppercased() + $0 }\n                                               ~~~^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkz9x2mgf.swift:6:8: error: initializer for conditional binding must have\
    \ Optional type, not '[String]'\n    if let characters = string.unicodeScalars.map(String.init)\
    \ {\n       ^                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString().uppercaseString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprrwslyk9.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString().uppercaseString()\n \
    \          ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = Array(string)\n    .map { $0.isUppercase()\
    \ ? $0.lowercaseString() : $0.uppercaseString() }\n    return String(chars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp4jgivprc.swift:6:23: error: missing argument label 'from:' in call\n\
    \    let chars = Array(string)\n                      ^\n                    \
    \  from: \n/tmp/tmp4jgivprc.swift:7:10: error: unable to infer type of a closure\
    \ parameter '$0' in the current context\n    .map { $0.isUppercase() ? $0.lowercaseString()\
    \ : $0.uppercaseString() }\n         ^\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case .lowercase:\n            result = char.uppercaseString\
    \ + result\n        case .uppercase:\n            result = result + char.lowercaseString\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphwwmvcua.swift:9:15: error: type 'Character' has no member 'lowercase'\n\
    \        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmphwwmvcua.swift:11:15:\
    \ error: type 'Character' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmphwwmvcua.swift:10:27: error: value of type 'Character'\
    \ has no member 'uppercaseString'\n            result = char.uppercaseString +\
    \ result\n                     ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmphwwmvcua.swift:12:36:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result = result + char.lowercaseString\n                              ~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    string\n        .replacingOccurrences(of: \"[a-z]\"\
    , with: String.init(\"[A-Z]\")) //uppercase to lowercase\n        .replacingOccurrences(of:\
    \ \"[A-Z]\", with: String.init(\"[a-z]\")) //lowercase to uppercase\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpz9a5qikq.swift:7:10: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        .replacingOccurrences(of: \"[a-z]\", with: String.init(\"\
    [A-Z]\")) //uppercase to lowercase\n         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercase = string.lowercased()\n    let uppercase\
    \ = string.uppercased()\n    return uppercase.prefix(1).append(lowercase).append(uppercase.suffix(1))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpc4z8n5ti.swift:8:32: error: value of type 'PrefixSequence<String>'\
    \ has no member 'append'\n    return uppercase.prefix(1).append(lowercase).append(uppercase.suffix(1))\n\
    \           ~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979036
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\treturn string.uppercased().lowercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpqpoodoua/tmpqpoodoua.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace1a5d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace1a2ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace1a2cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace1a2cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpoodoua                        0x000056253aec64a5 <unavailable> + 5285

    5    libc.so.6                          0x00002ace1a7c1460 __libc_start_main +
    245

    6    tmpqpoodoua                        0x000056253aec5ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var string = string\n    string = string.lowercased()\n\
    \    string = string.uppercased()\n    return string\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpmfrxcgoe/tmpmfrxcgoe.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeafa6e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeafa3deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeafa3de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeafa3dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfrxcgoe                        0x000055e3e72324a5 <unavailable> + 5285

    5    libc.so.6                          0x00002aeafa8d3460 __libc_start_main +
    245

    6    tmpmfrxcgoe                        0x000055e3e7231ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0hjfutkl.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824507
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\treturn string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpetxypkno/tmpetxypkno.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11f5bdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11f58d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11f58d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11f58d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetxypkno                        0x000055762a4d73f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b11f5dca460 __libc_start_main +
    245

    6    tmpetxypkno                        0x000055762a4d6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map({ $0 == Character(\"A\"\
    ) ? \"a\" : $0 == Character(\"a\") ? \"A\" : $0 }).joinWithSeparator(\"\")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp753l456s.swift:6:100: error: value of type '[String.Element]' (aka\
    \ 'Array<Character>') has no member 'joinWithSeparator'\n    return string.characters.map({\
    \ $0 == Character(\"A\") ? \"a\" : $0 == Character(\"a\") ? \"A\" : $0 }).joinWithSeparator(\"\
    \")\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    // Return empty string if string is nil\n    guard\
    \ let string = string else { return \"\" }\n    var result = \"\"\n    var upper\
    \ = false\n    var i = 0\n    while i < string.count {\n        let char = string[i]\n\
    \        switch char {\n        case \"a\" ... \"z\", \"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"\
    O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"\
    Z\", \"0\":\n            if upper {\n                result += char.uppercased()\n\
    \                upper = false\n            } else {\n                result +=\
    \ char.lowercased()\n                upper = true\n            }\n        default:\n\
    \            result += char\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp4val0mkh.swift:7:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let string = string else {\
    \ return \"\" }\n          ^            ~~~~~~\n/tmp/tmp4val0mkh.swift:12:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let char = string[i]\n                \
    \   ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmp4val0mkh.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    func toUpper(_ char: Character) -> Character {\n  \
    \      switch char {\n        case Character(char):\n            return char\n\
    \        case Character(let upperCaseChar):\n            return Character(upperCaseChar)\n\
    \        }\n    }\n    func toLower(_ char: Character) -> Character {\n      \
    \  switch char {\n        case Character(char):\n            return char\n   \
    \     case Character(let lowerCaseChar):\n            return Character(lowerCaseChar)\n\
    \        }\n    }\n    return string.map(toUpper).map(toLower)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphdwh3yxj.swift:8:24: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        case Character(char):\n                       ^\n         \
    \              extendedGraphemeClusterLiteral: \n/tmp/tmphdwh3yxj.swift:10:14:\
    \ error: ambiguous use of 'init(_:)'\n        case Character(let upperCaseChar):\n\
    \             ^\nSwift.Character:2:23: note: found this candidate\n    @inlinable\
    \ public init(_ content: Unicode.Scalar)\n                      ^\nSwift.Character:6:23:\
    \ note: found this candidate\n    @inlinable public init(_ s: String)\n      \
    \                ^\n/tmp/tmphdwh3yxj.swift:16:24: error: missing argument label\
    \ 'extendedGraphemeClusterLiteral:' in call\n        case Character(char):\n \
    \                      ^\n                       extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmphdwh3yxj.swift:18:14: error: ambiguous use of 'init(_:)'\n       \
    \ case Character(let lowerCaseChar):\n             ^\nSwift.Character:2:23: note:\
    \ found this candidate\n    @inlinable public init(_ content: Unicode.Scalar)\n\
    \                      ^\nSwift.Character:6:23: note: found this candidate\n \
    \   @inlinable public init(_ s: String)\n                      ^\n/tmp/tmphdwh3yxj.swift:22:32:\
    \ error: cannot convert return expression of type '[Character]' to return type\
    \ 'String'\n    return string.map(toUpper).map(toLower)\n           ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    switch string {\n    case .init(unicodeScalars: [:])\
    \ {\n        return \"\"\n    }\n    case .init(stringInterpolationSegment as\
    \ NSString).unicodeScalars:\n        return \"\"\n    case .init(stringInterpolationSegment\
    \ as NSString).string {\n        return \"\"\n    }\n    case let string as NSString:\n\
    \        return string.string.lowercaseString\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_56rljvj.swift:9:6: error: expected ':' after 'case'\n    }\n \
    \    ^\n/tmp/tmp_56rljvj.swift:14:6: error: expected ':' after 'case'\n    }\n\
    \     ^\n/tmp/tmp_56rljvj.swift:7:11: error: no exact matches in call to initializer\
    \ \n    case .init(unicodeScalars: [:]) {\n          ^\n/tmp/tmp_56rljvj.swift:7:11:\
    \ note: found candidate with type '([AnyHashable : Any]) -> String'\n    case\
    \ .init(unicodeScalars: [:]) {\n          ^\n/tmp/tmp_56rljvj.swift:7:11: note:\
    \ found candidate with type '([AnyHashable : Any]) -> Substring'\n    case .init(unicodeScalars:\
    \ [:]) {\n          ^\n/tmp/tmp_56rljvj.swift:10:16: error: cannot find 'stringInterpolationSegment'\
    \ in scope\n    case .init(stringInterpolationSegment as NSString).unicodeScalars:\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_56rljvj.swift:10:46: error:\
    \ cannot find type 'NSString' in scope\n    case .init(stringInterpolationSegment\
    \ as NSString).unicodeScalars:\n                                             ^~~~~~~~\n\
    /tmp/tmp_56rljvj.swift:12:16: error: cannot find 'stringInterpolationSegment'\
    \ in scope\n    case .init(stringInterpolationSegment as NSString).string {\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_56rljvj.swift:12:46: error:\
    \ cannot find type 'NSString' in scope\n    case .init(stringInterpolationSegment\
    \ as NSString).string {\n                                             ^~~~~~~~\n\
    /tmp/tmp_56rljvj.swift:12:56: error: reference to member 'string' cannot be resolved\
    \ without a contextual type\n    case .init(stringInterpolationSegment as NSString).string\
    \ {\n                                                       ^\n/tmp/tmp_56rljvj.swift:15:24:\
    \ error: cannot find type 'NSString' in scope\n    case let string as NSString:\n\
    \                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase() ? \"\\($0.lowercased())\"\
    \ : \"\\($0.uppercased())\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpftoyz8k7.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase()\
    \ ? \"\\($0.lowercased())\" : \"\\($0.uppercased())\" }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpftoyz8k7.swift:6:28: error: cannot call value of non-function type 'Bool'\n\
    \    return string.map { $0.isUppercase() ? \"\\($0.lowercased())\" : \"\\($0.uppercased())\"\
    \ }\n                           ^          ~~\n                              \
    \        \n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\tlet characters = string.characters\n\tlet flipped = characters.map\
    \ { Character($0).isUppercase() ? Character($0).lowercased() : Character($0).uppercased()\
    \ }\n\treturn String(flipped)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpby6vh8f4.swift:6:26: error: 'characters' is unavailable: Please\
    \ use String directly\n        let characters = string.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpby6vh8f4.swift:7:47: error: cannot call value of non-function type\
    \ 'Bool'\n        let flipped = characters.map { Character($0).isUppercase() ?\
    \ Character($0).lowercased() : Character($0).uppercased() }\n                \
    \                                     ^          ~~\n                        \
    \                                        \n/tmp/tmpby6vh8f4.swift:7:43: error:\
    \ missing argument label 'extendedGraphemeClusterLiteral:' in call\n        let\
    \ flipped = characters.map { Character($0).isUppercase() ? Character($0).lowercased()\
    \ : Character($0).uppercased() }\n                                           \
    \      ^\n                                                 extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpby6vh8f4.swift:7:73: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        let flipped = characters.map { Character($0).isUppercase()\
    \ ? Character($0).lowercased() : Character($0).uppercased() }\n              \
    \                                                                 ^\n        \
    \                                                                       extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpby6vh8f4.swift:7:102: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        let flipped = characters.map { Character($0).isUppercase()\
    \ ? Character($0).lowercased() : Character($0).uppercased() }\n              \
    \                                                                            \
    \                  ^\n                                                       \
    \                                                     extendedGraphemeClusterLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = string.characters\n    return String(characters.map\
    \ { $0 == CharacterSet.lowercased().first ? Character($0.uppercased()) : Character($0.lowercased())\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\
    \")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpvstwdp15.swift:6:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvstwdp15.swift:7:42: error: cannot find 'CharacterSet' in scope\n\
    \    return String(characters.map { $0 == CharacterSet.lowercased().first ? Character($0.uppercased())\
    \ : Character($0.lowercased()) })\n                                         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard string.count > 0 else {\n        return \"\"\n\
    \    }\n    var result = \"\"\n    for character in string {\n        switch character\
    \ {\n        case \"a\":\n            result += \"A\"\n        case \"b\":\n \
    \           result += \"B\"\n        case \"c\":\n            result += \"C\"\n\
    \        case \"d\":\n            result += \"D\"\n        case \"e\":\n     \
    \       result += \"E\"\n        case \"f\":\n            result += \"F\"\n  \
    \      case \"g\":\n            result += \"G\"\n        case \"h\":\n       \
    \     result += \"H\"\n        case \"i\":\n            result += \"I\"\n    \
    \    case \"j\":\n            result += \"J\"\n        case \"k\":\n         \
    \   result += \"K\"\n        case \"l\":\n            result += \"L\"\n      \
    \  case \"m\":\n            result += \"M\"\n        case \"n\":\n           \
    \ result += \"N\"\n        case \"o\":\n            result += \"O\"\n        case\
    \ \"p\":\n            result += \"P\"\n        case \"q\":\n            result\
    \ += \"Q\"\n        case \"r\":\n            result += \"R\"\n        case \"\
    s\":\n            result += \"S\"\n        case \"t\":\n            result +=\
    \ \"T\"\n        case \"u\":\n            result += \"U\"\n        case \"v\"\
    :\n            result += \"V\"\n        case \"w\":\n            result += \"\
    W\"\n        case \"x\":\n            result += \"X\"\n        case \"y\":\n \
    \           result += \"Y\"\n        case \"z\":\n            result += \"Z\"\n\
    \        default:\n            result += String(character)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp61yw6mde/tmp61yw6mde.swift:85: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58138aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58135a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58135a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58135a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61yw6mde                        0x000055c449a78695 <unavailable> + 5781

    5    libc.so.6                          0x00002b5813a96460 __libc_start_main +
    245

    6    tmp61yw6mde                        0x000055c449a781e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = String()\n\n    for c in string.unicodeScalars\
    \ {\n        var uc = c\n        uc.isUppercase = !uc.isUppercase\n        uc.isLowercase\
    \ = !uc.isLowercase\n        output = output + uc.value\n    }\n\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuz45v4ox.swift:10:12: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        uc.isUppercase = !uc.isUppercase\n        ~~\
    \ ^~~~~~~~~~~\n/tmp/tmpuz45v4ox.swift:10:30: error: value of type 'Unicode.Scalar'\
    \ has no member 'isUppercase'\n        uc.isUppercase = !uc.isUppercase\n    \
    \                      ~~ ^~~~~~~~~~~\n/tmp/tmpuz45v4ox.swift:11:12: error: value\
    \ of type 'Unicode.Scalar' has no member 'isLowercase'\n        uc.isLowercase\
    \ = !uc.isLowercase\n        ~~ ^~~~~~~~~~~\n/tmp/tmpuz45v4ox.swift:11:30: error:\
    \ value of type 'Unicode.Scalar' has no member 'isLowercase'\n        uc.isLowercase\
    \ = !uc.isLowercase\n                          ~~ ^~~~~~~~~~~\n/tmp/tmpuz45v4ox.swift:12:30:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \        output = output + uc.value\n                             ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    switch string {\n    case \"a\":\n        return \"\
    A\"\n    case \"b\":\n        return \"B\"\n    case \"c\":\n        return \"\
    C\"\n    case \"d\":\n        return \"D\"\n    case \"e\":\n        return \"\
    E\"\n    case \"f\":\n        return \"F\"\n    case \"g\":\n        return \"\
    G\"\n    case \"h\":\n        return \"H\"\n    case \"i\":\n        return \"\
    I\"\n    case \"j\":\n        return \"J\"\n    case \"k\":\n        return \"\
    K\"\n    case \"l\":\n        return \"L\"\n    case \"m\":\n        return \"\
    M\"\n    case \"n\":\n        return \"N\"\n    case \"o\":\n        return \"\
    O\"\n    case \"p\":\n        return \"P\"\n    case \"q\":\n        return \"\
    Q\"\n    case \"r\":\n        return \"R\"\n    case \"s\":\n        return \"\
    S\"\n    case \"t\":\n        return \"T\"\n    case \"u\":\n        return \"\
    U\"\n    case \"v\":\n        return \"V\"\n    case \"w\":\n        return \"\
    W\"\n    case \"x\":\n        return \"X\"\n    case \"y\":\n        return \"\
    Y\"\n    case \"z\":\n        return \"Z\"\n    default:\n        return string\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp1tq0xmj4/tmp1tq0xmj4.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefc2ba8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefc289fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefc289f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefc289e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tq0xmj4                        0x000056259804f3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002aefc2d94460 __libc_start_main +
    245

    6    tmp1tq0xmj4                        0x000056259804ef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.reduce(into: \"\") {\n\
    \        $0.append($1.isLowerCase ? $0.append($1.unicodeScalars.first!) : $0.append($1.unicodeScalars.last!))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9zk9c4hu.swift:7:12: error: no exact matches in call to instance\
    \ method 'append'\n        $0.append($1.isLowerCase ? $0.append($1.unicodeScalars.first!)\
    \ : $0.append($1.unicodeScalars.last!))\n           ^\n/tmp/tmp9zk9c4hu.swift:7:12:\
    \ note: found candidate with type '(String) -> ()'\n        $0.append($1.isLowerCase\
    \ ? $0.append($1.unicodeScalars.first!) : $0.append($1.unicodeScalars.last!))\n\
    \           ^\n/tmp/tmp9zk9c4hu.swift:7:12: note: found candidate with type '(Character)\
    \ -> ()'\n        $0.append($1.isLowerCase ? $0.append($1.unicodeScalars.first!)\
    \ : $0.append($1.unicodeScalars.last!))\n           ^\n/tmp/tmp9zk9c4hu.swift:7:12:\
    \ note: found candidate with type '(__owned String.Element) -> ()' (aka '(__owned\
    \ Character) -> ()')\n        $0.append($1.isLowerCase ? $0.append($1.unicodeScalars.first!)\
    \ : $0.append($1.unicodeScalars.last!))\n           ^\n/tmp/tmp9zk9c4hu.swift:7:22:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowerCase'\n        $0.append($1.isLowerCase\
    \ ? $0.append($1.unicodeScalars.first!) : $0.append($1.unicodeScalars.last!))\n\
    \                  ~~ ^~~~~~~~~~~\n/tmp/tmp9zk9c4hu.swift:7:49: error: value of\
    \ type 'Unicode.Scalar' has no member 'unicodeScalars'\n        $0.append($1.isLowerCase\
    \ ? $0.append($1.unicodeScalars.first!) : $0.append($1.unicodeScalars.last!))\n\
    \                                             ~~ ^~~~~~~~~~~~~~\n/tmp/tmp9zk9c4hu.swift:7:87:\
    \ error: value of type 'Unicode.Scalar' has no member 'unicodeScalars'\n     \
    \   $0.append($1.isLowerCase ? $0.append($1.unicodeScalars.first!) : $0.append($1.unicodeScalars.last!))\n\
    \                                                                            \
    \       ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = \"\"\n    for symbol in string {\n   \
    \     if symbol.isLowercase() {\n            output += String(flip_case(symbol).uppercased())\
    \ + \"\"\n        } else {\n            output += symbol + \"\"\n        }\n \
    \   }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpz4nzng5t.swift:8:19: error: cannot call value of non-function type\
    \ 'Bool'\n        if symbol.isLowercase() {\n                  ^          ~~\n\
    \                             \n/tmp/tmpz4nzng5t.swift:9:40: error: missing argument\
    \ label 'string:' in call\n            output += String(flip_case(symbol).uppercased())\
    \ + \"\"\n                                       ^\n                         \
    \              string: \n/tmp/tmpz4nzng5t.swift:9:40: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            output +=\
    \ String(flip_case(symbol).uppercased()) + \"\"\n                            \
    \           ^\n/tmp/tmpz4nzng5t.swift:11:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            output += symbol\
    \ + \"\"\n                      ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if let _ = char.unicodeScalars.filter({ $0.isUppercase }).first {\n      \
    \      result += char.unicodeScalars.filter({ $0.isLowercase }).first!.value +\
    \ char.unicodeScalars.filter({ !$0.isUppercase }).first!.value\n        } else\
    \ {\n            result += char.unicodeScalars.filter({ !$0.isUppercase }).first!.value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo_zzhx5v.swift:8:52: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if let _ = char.unicodeScalars.filter({ $0.isUppercase\
    \ }).first {\n                                                ~~ ^~~~~~~~~~~\n\
    /tmp/tmpo_zzhx5v.swift:9:83: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += char.unicodeScalars.filter({ $0.isLowercase\
    \ }).first!.value + char.unicodeScalars.filter({ !$0.isUppercase }).first!.value\n\
    \                                                                            \
    \      ^\n/tmp/tmpo_zzhx5v.swift:9:55: error: value of type 'Unicode.Scalar' has\
    \ no member 'isLowercase'\n            result += char.unicodeScalars.filter({\
    \ $0.isLowercase }).first!.value + char.unicodeScalars.filter({ !$0.isUppercase\
    \ }).first!.value\n                                                   ~~ ^~~~~~~~~~~\n\
    /tmp/tmpo_zzhx5v.swift:9:118: error: value of type 'Unicode.Scalar' has no member\
    \ 'isUppercase'\n            result += char.unicodeScalars.filter({ $0.isLowercase\
    \ }).first!.value + char.unicodeScalars.filter({ !$0.isUppercase }).first!.value\n\
    \                                                                            \
    \                                      ~~ ^~~~~~~~~~~\n/tmp/tmpo_zzhx5v.swift:11:78:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += char.unicodeScalars.filter({ !$0.isUppercase }).first!.value\n\
    \                                                                            \
    \ ^\n/tmp/tmpo_zzhx5v.swift:11:56: error: value of type 'Unicode.Scalar' has no\
    \ member 'isUppercase'\n            result += char.unicodeScalars.filter({ !$0.isUppercase\
    \ }).first!.value\n                                                    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map{ $0 ~= 32 ? $0 ~= 96 ?\
    \ $0 ~= 123 ? $0 ~= 122 ? $0 ~= 95 ? $0~= 98 ? $0 ~= 97 ? $0 ~= 118 ? $0 ~= 108\
    \ ? $0 ~= 101 : \"A\".characters.first : $0 ~= 92 ? $0 ~= 93 ? $0 ~= 94 ? $0 ~=\
    \ 91 ? $0 ~= 124 ? $0 ~= 114 ? $0 ~= 112 ? $0 ~= 113 ? $0 ~= 106 ? $0 ~= 105 ?\
    \ $0 ~= 104 ? $0 ~= 102 ? $0 ~= 99 ? $0 ~= 90 ? $0 ~= 87 ? $0 ~= 86 ? $0 ~= 84\
    \ ? $0 ~= 83 ? $0 ~= 82 ? $0 ~= 81 ? $0 ~= 80 ? $0 ~= 79 ? $0 ~= 78 ? $0 ~= 77\
    \ ? $0 ~= 76 ? $0 ~= 75 ? $0 ~= 74 ? $0 ~= 73 ? $0 ~= 72 ? $0 ~= 71 ? $0 ~= 70\
    \ ? $0 ~= 69 ? $0 ~= 68 ? $0 ~= 67 ? $0 ~= 66 ? $0 ~= 65 ? $0 ~= 64 ? $0 ~= 63\
    \ ? $0 ~= 62 ? $0 ~= 61 ? $0 ~= 60 ? $0 ~= 59 ? $0 ~= 58 ? $0 ~= 57 ? $0 ~= 56\
    \ ? $0 ~= 55 ? $0 ~= 54 ? $0 ~= 53 ? $0 ~= 52 ? $0 ~= 51 ? $0 ~= 50 : $0 ~= 48\
    \ ? $0 ~= 47 ? $0 ~= 46 ? $0 ~= 45 ? $0 ~= 44 ? $0 ~= 43 ? $0 ~= 42 ? $0 ~= 41\
    \ ? $0 ~= 40 ? $0 ~= 39 ? $0 ~= 38 ? $0 ~= 37 ? $0 ~= 36 ? $0 ~= 35 ? $0 ~= 34\
    \ ? $0 ~= 33 ? $0 ~= 32 ? $0 ~= 31 ? $0 \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp7p2r0e9y.swift:6:90: error: expected ':' after '? ...' in ternary\
    \ expression\n    return string.characters.map{ $0 ~= 32 ? $0 ~= 96 ? $0 ~= 123\
    \ ? $0 ~= 122 ? $0 ~= 95 ? $0~= 98 ? $0 ~= 97 ? $0 ~= 118 ? $0 ~= 108 ? $0 ~=\
    \ 101 : \"A\".characters.first : $0 ~= 92 ? $0 ~= 93 ? $0 ~= 94 ? $0 ~= 91 ? $0\
    \ ~= 124 ? $0 ~= 114 ? $0 ~= 112 ? $0 ~= 113 ? $0 ~= 106 ? $0 ~= 105 ? $0 ~= 104\
    \ ? $0 ~= 102 ? $0 ~= 99 ? $0 ~= 90 ? $0 ~= 87 ? $0 ~= 86 ? $0 ~= 84 ? $0 ~= 83\
    \ ? $0 ~= 82 ? $0 ~= 81 ? $0 ~= 80 ? $0 ~= 79 ? $0 ~= 78 ? $0 ~= 77 ? $0 ~= 76\
    \ ? $0 ~= 75 ? $0 ~= 74 ? $0 ~= 73 ? $0 ~= 72 ? $0 ~= 71 ? $0 ~= 70 ? $0 ~= 69\
    \ ? $0 ~= 68 ? $0 ~= 67 ? $0 ~= 66 ? $0 ~= 65 ? $0 ~= 64 ? $0 ~= 63 ? $0 ~= 62\
    \ ? $0 ~= 61 ? $0 ~= 60 ? $0 ~= 59 ? $0 ~= 58 ? $0 ~= 57 ? $0 ~= 56 ? $0 ~= 55\
    \ ? $0 ~= 54 ? $0 ~= 53 ? $0 ~= 52 ? $0 ~= 51 ? $0 ~= 50 : $0 ~= 48 ? $0 ~= 47\
    \ ? $0 ~= 46 ? $0 ~= 45 ? $0 ~= 44 ? $0 ~= 43 ? $0 ~= 42 ? $0 ~= 41 ? $0 ~= 40\
    \ ? $0 ~= 39 ? $0 ~= 38 ? $0 ~= 37 ? $0 ~= 36 ? $0 ~= 35 ? $0 ~= 34 ? $0 ~= 33\
    \ ? $0 ~= 32 ? $0 ~= 31 ? $0 \n                                              \
    \                                           ^\n/tmp/tmp7p2r0e9y.swift:6:79: error:\
    \ expected ':' after '? ...' in ternary expression\n    return string.characters.map{\
    \ $0 ~= 32 ? $0 ~= 96 ? $0 ~= 123 ? $0 ~= 122 ? $0 ~= 95 ? $0~= 98 ? $0 ~= 97\
    \ ? $0 ~= 118 ? $0 ~= 108 ? $0 ~= 101 : \"A\".characters.first : $0 ~= 92 ? $0\
    \ ~= 93 ? $0 ~= 94 ? $0 ~= 91 ? $0 ~= 124 ? $0 ~= 114 ? $0 ~= 112 ? $0 ~= 113\
    \ ? $0 ~= 106 ? $0 ~= 105 ? $0 ~= 104 ? $0 ~= 102 ? $0 ~= 99 ? $0 ~= 90 ? $0 ~=\
    \ 87 ? $0 ~= 86 ? $0 ~= 84 ? $0 ~= 83 ? $0 ~= 82 ? $0 ~= 81 ? $0 ~= 80 ? $0 ~=\
    \ 79 ? $0 ~= 78 ? $0 ~= 77 ? $0 ~= 76 ? $0 ~= 75 ? $0 ~= 74 ? $0 ~= 73 ? $0 ~=\
    \ 72 ? $0 ~= 71 ? $0 ~= 70 ? $0 ~= 69 ? $0 ~= 68 ? $0 ~= 67 ? $0 ~= 66 ? $0 ~=\
    \ 65 ? $0 ~= 64 ? $0 ~= 63 ? $0 ~= 62 ? $0 ~= 61 ? $0 ~= 60 ? $0 ~= 59 ? $0 ~=\
    \ 58 ? $0 ~= 57 ? $0 ~= 56 ? $0 ~= 55 ? $0 ~= 54 ? $0 ~= 53 ? $0 ~= 52 ? $0 ~=\
    \ 51 ? $0 ~= 50 : $0 ~= 48 ? $0 ~= 47 ? $0 ~= 46 ? $0 ~= 45 ? $0 ~= 44 ? $0 ~=\
    \ 43 ? $0 ~= 42 ? $0 ~= 41 ? $0 ~= 40 ? $0 ~= "
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString + string.uppercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpq3el_o73.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString + string.uppercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpq3el_o73.swift:6:60: error: value\
    \ of type 'String' has no member 'uppercaseString'\n    return string.lowercaseString.uppercaseString\
    \ + string.uppercaseString\n                                                 \
    \   ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if string.isEmpty {\n        return string\n    }\n\
    \    var new_str = \"\"\n    var characters: [Character] = []\n    for character\
    \ in string.unicodeScalars {\n        let char_type = character.characteristic\n\
    \n        if char_type == .caseMark {\n            new_str += character.unicodeScalars.first!\n\
    \        } else if char_type == .uppercaseMark && character.unicodeScalars.isEmpty\
    \ {\n            new_str += character.unicodeScalars.first!\n        } else if\
    \ char_type == .lowercaseMark {\n            new_str += character.unicodeScalars.first!\n\
    \        } else {\n            characters.append(character)\n        }\n    }\n\
    \n    for character in characters {\n        new_str += character.unicodeScalars.first!\n\
    \    }\n    return new_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp649f8qju.swift:12:35: error: value of type 'Unicode.Scalar' has\
    \ no member 'characteristic'\n        let char_type = character.characteristic\n\
    \                        ~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp649f8qju.swift:15:34:\
    \ error: value of type 'Unicode.Scalar' has no member 'unicodeScalars'\n     \
    \       new_str += character.unicodeScalars.first!\n                       ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~\n/tmp/tmp649f8qju.swift:16:60: error: value of type 'Unicode.Scalar'\
    \ has no member 'unicodeScalars'\n        } else if char_type == .uppercaseMark\
    \ && character.unicodeScalars.isEmpty {\n                                    \
    \             ~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp649f8qju.swift:17:34: error: value\
    \ of type 'Unicode.Scalar' has no member 'unicodeScalars'\n            new_str\
    \ += character.unicodeScalars.first!\n                       ~~~~~~~~~ ^~~~~~~~~~~~~~\n\
    /tmp/tmp649f8qju.swift:19:34: error: value of type 'Unicode.Scalar' has no member\
    \ 'unicodeScalars'\n            new_str += character.unicodeScalars.first!\n \
    \                      ~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp649f8qju.swift:21:24:\
    \ error: no exact matches in call to instance method 'append'\n            characters.append(character)\n\
    \                       ^\nSwift.Array:6:37: note: candidate expects value of\
    \ type 'Character' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public\
    \ mutating func append(_ newElement: __owned Element)\n                      \
    \              ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects\
    \ value of type 'Character' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Self.Element)\n          \
    \                          ^\n/tmp/tmp649f8qju.swift:21:24: note: found candidate\
    \ with type '(__owned Unicode.Scalar) -> ()'\n            characters.append(character)\n\
    \                       ^\n/tmp/tmp649f8qju.swift:26:17: error: operator function\
    \ '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n        new_str +=\
    \ character.unicodeScalars.first!\n                ^\nSwift.RangeReplaceableC"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let uppercase = string.uppercased()\n    let lowercase\
    \ = string.lowercased()\n    return uppercase.isEmpty() ? lowercase : lowercase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpi0l01gfd.swift:8:22: error: cannot call value of non-function type\
    \ 'Bool'\n    return uppercase.isEmpty() ? lowercase : lowercase\n           \
    \          ^      ~~\n                            \n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var str = string\n    str.makeIterator()\n        .map\
    \ { c in\n            switch c {\n            case 'a':\n                return\
    \ 'A'\n            case 'b':\n                return 'B'\n            case 'c':\n\
    \                return 'C'\n            case 'd':\n                return 'D'\n\
    \            case 'e':\n                return 'E'\n            case 'f':\n  \
    \              return 'F'\n            case 'g':\n                return 'G'\n\
    \            case 'h':\n                return 'H'\n            case 'i':\n  \
    \              return 'I'\n            case 'j':\n                return 'J'\n\
    \            case 'k':\n                return 'K'\n            case 'l':\n  \
    \              return 'L'\n            case 'm':\n                return 'M'\n\
    \            case 'n':\n                return 'N'\n            case 'o':\n  \
    \              return 'O'\n            case 'p':\n                return 'P'\n\
    \            case 'q':\n                return 'Q'\n            case 'r':\n  \
    \              return 'R'\n            case 's':\n                return 'S'\n\
    \            case 't':\n                return 'T'\n            case 'u':\n  \
    \              return 'U'\n            case 'v':\n                return 'V'\n\
    \            case 'w':\n                return 'W'\n            case 'x':\n  \
    \              return 'X'\n            case 'y':\n                return 'Y'\n\
    \            case 'z':\n                return 'Z'\n            default:\n   \
    \             return c\n            }\n        }\n        .replaceSubrange(str.startIndex..<str.endIndex,\
    \ with: string.unicodeScalars.map { String($0) })\n    return str\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpt4o7r5fj.swift:10:18: error: single-quoted string literal found,\
    \ use '\"'\n            case 'a':\n                 ^~~\n                 \"a\"\
    \n/tmp/tmpt4o7r5fj.swift:11:24: error: single-quoted string literal found, use\
    \ '\"'\n                return 'A'\n                       ^~~\n             \
    \          \"A\"\n/tmp/tmpt4o7r5fj.swift:12:18: error: single-quoted string literal\
    \ found, use '\"'\n            case 'b':\n                 ^~~\n             \
    \    \"b\"\n/tmp/tmpt4o7r5fj.swift:13:24: error: single-quoted string literal\
    \ found, use '\"'\n                return 'B'\n                       ^~~\n  \
    \                     \"B\"\n/tmp/tmpt4o7r5fj.swift:14:18: error: single-quoted\
    \ string literal found, use '\"'\n            case 'c':\n                 ^~~\n\
    \                 \"c\"\n/tmp/tmpt4o7r5fj.swift:15:24: error: single-quoted string\
    \ literal found, use '\"'\n                return 'C'\n                      \
    \ ^~~\n                       \"C\"\n/tmp/tmpt4o7r5fj.swift:16:18: error: single-quoted\
    \ string literal found, use '\"'\n            case 'd':\n                 ^~~\n\
    \                 \"d\"\n/tmp/tmpt4o7r5fj.swift:17:24: error: single-quoted string\
    \ literal found, use '\"'\n                return 'D'\n                      \
    \ ^~~\n                       \"D\"\n/tmp/tmpt4o7r5fj.swift:18:18: error: single-quoted\
    \ string literal found, use '\"'\n            case 'e':\n                 ^~~\n\
    \                 \"e\"\n/tmp/tmpt4o7r5fj.swift:19:24: error: single-quoted string\
    \ literal found, use '\"'\n                return 'E'\n                      \
    \ ^~~\n                       \"E\"\n/tmp/tmpt4o7r5fj.swift:20:18: error: single-quoted\
    \ string literal found, use '\"'\n            case 'f':\n                 ^~~\n\
    \                 \"f\"\n/tmp/tmpt4o7r5fj.swift:21:24: error: single-quoted string\
    \ literal found, use '\"'\n                return 'F'\n                      \
    \ ^~~\n                       \"F\"\n/tmp/tmpt4o7r5fj.swift:22:18: error: single-quoted\
    \ string literal found, use '\"'\n            case 'g':\n                 ^~~\n\
    \                 \"g\"\n/tmp/tmpt4o7r5fj.swift:23:24: error: single-quoted string\
    \ lit"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = string.unicodeScalars\n        .filter\
    \ { $0.isUppercase }\n        .map { $0.uppercased() }\n        .filter { $0.isLowercase\
    \ }\n        .map { $0.lowercased() }\n    return String(chars)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6zt9e0su.swift:7:22: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        .filter { $0.isUppercase }\n              \
    \    ~~ ^~~~~~~~~~~\n/tmp/tmp6zt9e0su.swift:8:19: error: value of type 'Unicode.Scalar'\
    \ has no member 'uppercased'\n        .map { $0.uppercased() }\n             \
    \  ~~ ^~~~~~~~~~\n/tmp/tmp6zt9e0su.swift:9:17: error: unable to infer type of\
    \ a closure parameter '$0' in the current context\n        .filter { $0.isLowercase\
    \ }\n                ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'A':\n        case 'a':\n            result +=\
    \ \"A\"\n        case 'B':\n        case 'b':\n            result += \"B\"\n \
    \       case 'C':\n        case 'c':\n            result += \"C\"\n        case\
    \ 'D':\n        case 'd':\n            result += \"D\"\n        case 'E':\n  \
    \      case 'e':\n            result += \"E\"\n        case 'F':\n        case\
    \ 'f':\n            result += \"F\"\n        case 'G':\n        case 'g':\n  \
    \          result += \"G\"\n        case 'H':\n        case 'h':\n           \
    \ result += \"H\"\n        case 'I':\n        case 'i':\n            result +=\
    \ \"I\"\n        case 'J':\n        case 'j':\n            result += \"J\"\n \
    \       case 'K':\n        case 'k':\n            result += \"K\"\n        case\
    \ 'L':\n        case 'l':\n            result += \"L\"\n        case 'M':\n  \
    \      case 'm':\n            result += \"M\"\n        case 'N':\n        case\
    \ 'n':\n            result += \"N\"\n        case 'O':\n        case 'o':\n  \
    \          result += \"O\"\n        case 'P':\n        case 'p':\n           \
    \ result += \"P\"\n        case 'Q':\n        case 'q':\n            result +=\
    \ \"Q\"\n        case 'R':\n        case 'r':\n            result += \"R\"\n \
    \       case 'S':\n        case 's':\n            result += \"S\"\n        case\
    \ 'T':\n        case 't':\n            result += \"T\"\n        case 'U':\n  \
    \      case 'u':\n            result += \"U\"\n        case 'V':\n        case\
    \ 'v':\n            result += \"V\"\n        case 'W':\n        case 'w':\n  \
    \          result += \"W\"\n        case 'X':\n        case 'x':\n           \
    \ result += \"X\"\n        case 'Y':\n        case 'y':\n            result +=\
    \ \"Y\"\n        case 'Z':\n        case 'z':\n            result += \"Z\"\n \
    \       default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpisyerm7b.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'A':\n             ^~~\n             \"A\"\n/tmp/tmpisyerm7b.swift:9:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'A':\n        ^~~~~~~~~\n                  break\n/tmp/tmpisyerm7b.swift:10:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'a':\n   \
    \          ^~~\n             \"a\"\n/tmp/tmpisyerm7b.swift:12:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'B':\n             ^~~\n      \
    \       \"B\"\n/tmp/tmpisyerm7b.swift:12:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case 'B':\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpisyerm7b.swift:13:14: error: single-quoted string\
    \ literal found, use '\"'\n        case 'b':\n             ^~~\n             \"\
    b\"\n/tmp/tmpisyerm7b.swift:15:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'C':\n             ^~~\n             \"C\"\n/tmp/tmpisyerm7b.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'C':\n        ^~~~~~~~~\n                  break\n/tmp/tmpisyerm7b.swift:16:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'c':\n   \
    \          ^~~\n             \"c\"\n/tmp/tmpisyerm7b.swift:18:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'D':\n             ^~~\n      \
    \       \"D\"\n/tmp/tmpisyerm7b.swift:18:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case 'D':\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpisyerm7b.swift:19:14: error: single-quoted string\
    \ literal found, use '\"'\n        case 'd':\n             ^~~\n             \"\
    d\"\n/tmp/tmpisyerm7b.swift:21:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'E':\n             ^~~\n             \"E\"\n/tmp/tmpisyerm7b.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'E':\n        ^~~~~~~~~\n                  break\n/tmp/tmpisyerm7b.s"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n\n    for char in string.unicodeScalars\
    \ {\n        var unicodeScalar = char.unicodeScalars.first\n        let isLower\
    \ = unicodeScalar.value >= NSLowercaseCharacter\n        let isUpper = unicodeScalar.value\
    \ >= NSUppercaseCharacter\n\n        let currentChar = unicodeScalar.value <=\
    \ NSUppercaseCharacter ?\n            (unicodeScalar.value - NSLowercaseCharacter)\
    \ : (unicodeScalar.value + NSLowercaseCharacter)\n\n        result += String(Character(UnicodeScalar(currentChar)))\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcdqctrfp.swift:9:34: error: value of type 'Unicode.Scalar' has\
    \ no member 'unicodeScalars'\n        var unicodeScalar = char.unicodeScalars.first\n\
    \                            ~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpcdqctrfp.swift:10:46:\
    \ error: cannot find 'NSLowercaseCharacter' in scope\n        let isLower = unicodeScalar.value\
    \ >= NSLowercaseCharacter\n                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcdqctrfp.swift:11:46: error: cannot find 'NSUppercaseCharacter' in scope\n\
    \        let isUpper = unicodeScalar.value >= NSUppercaseCharacter\n         \
    \                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcdqctrfp.swift:13:50:\
    \ error: cannot find 'NSUppercaseCharacter' in scope\n        let currentChar\
    \ = unicodeScalar.value <= NSUppercaseCharacter ?\n                          \
    \                       ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcdqctrfp.swift:14:36: error:\
    \ cannot find 'NSLowercaseCharacter' in scope\n            (unicodeScalar.value\
    \ - NSLowercaseCharacter) : (unicodeScalar.value + NSLowercaseCharacter)\n   \
    \                                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcdqctrfp.swift:14:83:\
    \ error: cannot find 'NSLowercaseCharacter' in scope\n            (unicodeScalar.value\
    \ - NSLowercaseCharacter) : (unicodeScalar.value + NSLowercaseCharacter)\n   \
    \                                                                            \
    \   ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return capitalize(flip_case_internal(string))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphwga85kf.swift:6:10: error: cannot find 'capitalize' in scope\n\
    \  return capitalize(flip_case_internal(string))\n         ^~~~~~~~~~\n/tmp/tmphwga85kf.swift:6:21:\
    \ error: cannot find 'flip_case_internal' in scope\n  return capitalize(flip_case_internal(string))\n\
    \                    ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    var pos = 0\n    for c in string\
    \ {\n        let c = c.toUppercase()\n        if pos < string.startIndex { result\
    \ = c + result }\n        if c != string[pos] {\n            if result != \"\"\
    \ {\n                result = c + result\n            } else {\n             \
    \   result = c\n            }\n        }\n        pos += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9unw5o_b.swift:9:19: error: value of type 'Character' has no member\
    \ 'toUppercase'\n        let c = c.toUppercase()\n                ~ ^~~~~~~~~~~\n\
    /tmp/tmp9unw5o_b.swift:10:16: error: operator function '<' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n        if pos < string.startIndex { result = c\
    \ + result }\n               ^\nSwift.BinaryInteger:4:24: note: where 'Other'\
    \ = 'String.Index'\n    public static func < <Other>(lhs: Self, rhs: Other) ->\
    \ Bool where Other : BinaryInteger\n                       ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let _char = string.range(of: \"[a-z]\") {\n    \
    \    string = string.replacingCharacters(in: Range<String.Index>(start: str.index(string.startIndex,\
    \ offsetBy: _char.lowerBound), end: str.endIndex), with: string.uppercased())\n\
    \    }\n    if let _char = string.range(of: \"[A-Z]\") {\n        string = string.replacingCharacters(in:\
    \ Range<String.Index>(start: str.index(string.startIndex, offsetBy: _char.upperBound),\
    \ end: str.endIndex), with: string.lowercased())\n    }\n    return string\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxyge_hqz.swift:6:27: error: value of type 'String' has no member\
    \ 'range'\n    if let _char = string.range(of: \"[a-z]\") {\n                \
    \   ~~~~~~ ^~~~~\n/tmp/tmpxyge_hqz.swift:7:76: error: cannot find 'str' in scope\n\
    \        string = string.replacingCharacters(in: Range<String.Index>(start: str.index(string.startIndex,\
    \ offsetBy: _char.lowerBound), end: str.endIndex), with: string.uppercased())\n\
    \                                                                           ^~~\n\
    /tmp/tmpxyge_hqz.swift:7:139: error: cannot find 'str' in scope\n        string\
    \ = string.replacingCharacters(in: Range<String.Index>(start: str.index(string.startIndex,\
    \ offsetBy: _char.lowerBound), end: str.endIndex), with: string.uppercased())\n\
    \                                                                            \
    \                                                              ^~~\n/tmp/tmpxyge_hqz.swift:7:9:\
    \ error: cannot assign to value: 'string' is a 'let' constant\n        string\
    \ = string.replacingCharacters(in: Range<String.Index>(start: str.index(string.startIndex,\
    \ offsetBy: _char.lowerBound), end: str.endIndex), with: string.uppercased())\n\
    \        ^~~~~~\n/tmp/tmpxyge_hqz.swift:7:25: error: value of type 'String' has\
    \ no member 'replacingCharacters'\n        string = string.replacingCharacters(in:\
    \ Range<String.Index>(start: str.index(string.startIndex, offsetBy: _char.lowerBound),\
    \ end: str.endIndex), with: string.uppercased())\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxyge_hqz.swift:7:49: error: referencing initializer 'init(_:)' on 'Range'\
    \ requires that 'String.Index' conform to 'Strideable'\n        string = string.replacingCharacters(in:\
    \ Range<String.Index>(start: str.index(string.startIndex, offsetBy: _char.lowerBound),\
    \ end: str.endIndex), with: string.uppercased())\n                           \
    \                     ^\nSwift.Range:1:11: note: where 'Bound' = 'String.Index'\n\
    extension Range where Bound : Strideable, Bound.Stride : SignedInteger {\n   \
    \       ^\n/tmp/tmpxyge_hqz.swift:7:143: error: extra argument 'end' in call\n\
    \       "
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\tlet range = Range<String.Index>(range: string.startIndex..<string.endIndex,\
    \ in: string)\n\treturn string.distance(from: string.startIndex, to: range.lowerBound,\
    \ to: range.upperBound) == 0 ? string : string.capitalizingFirst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphi6_6cu9.swift:6:14: error: referencing initializer 'init(_:)'\
    \ on 'Range' requires that 'String.Index' conform to 'Strideable'\n        let\
    \ range = Range<String.Index>(range: string.startIndex..<string.endIndex, in:\
    \ string)\n                    ^\nSwift.Range:1:11: note: where 'Bound' = 'String.Index'\n\
    extension Range where Bound : Strideable, Bound.Stride : SignedInteger {\n   \
    \       ^\n/tmp/tmphi6_6cu9.swift:6:82: error: extra argument 'in' in call\n \
    \       let range = Range<String.Index>(range: string.startIndex..<string.endIndex,\
    \ in: string)\n                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n\
    /tmp/tmphi6_6cu9.swift:7:82: error: extra argument 'to' in call\n        return\
    \ string.distance(from: string.startIndex, to: range.lowerBound, to: range.upperBound)\
    \ == 0 ? string : string.capitalizingFirst\n                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmphi6_6cu9.swift:7:117: error: value of type 'String' has no member 'capitalizingFirst'\n\
    \        return string.distance(from: string.startIndex, to: range.lowerBound,\
    \ to: range.upperBound) == 0 ? string : string.capitalizingFirst\n           \
    \                                                                            \
    \                             ~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(zip(string.lowercaseString.unicodeScalars.map\
    \ { $0.value }, string.uppercaseString.unicodeScalars.map { $0.value }))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnveop0x1.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(zip(string.lowercaseString.unicodeScalars.map { $0.value\
    \ }, string.uppercaseString.unicodeScalars.map { $0.value }))\n           ^\n\
    /tmp/tmpnveop0x1.swift:6:12: note: found candidate with type '(Zip2Sequence<_,\
    \ _>) -> String'\n    return String(zip(string.lowercaseString.unicodeScalars.map\
    \ { $0.value }, string.uppercaseString.unicodeScalars.map { $0.value }))\n   \
    \        ^\n/tmp/tmpnveop0x1.swift:6:12: note: found candidate with type '(Zip2Sequence<_,\
    \ _>) -> String'\n    return String(zip(string.lowercaseString.unicodeScalars.map\
    \ { $0.value }, string.uppercaseString.unicodeScalars.map { $0.value }))\n   \
    \        ^\n/tmp/tmpnveop0x1.swift:6:12: note: found candidate with type '(Zip2Sequence<_,\
    \ _>) -> String'\n    return String(zip(string.lowercaseString.unicodeScalars.map\
    \ { $0.value }, string.uppercaseString.unicodeScalars.map { $0.value }))\n   \
    \        ^\n/tmp/tmpnveop0x1.swift:6:30: error: value of type 'String' has no\
    \ member 'lowercaseString'\n    return String(zip(string.lowercaseString.unicodeScalars.map\
    \ { $0.value }, string.uppercaseString.unicodeScalars.map { $0.value }))\n   \
    \                   ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpnveop0x1.swift:6:86: error:\
    \ value of type 'String' has no member 'uppercaseString'\n    return String(zip(string.lowercaseString.unicodeScalars.map\
    \ { $0.value }, string.uppercaseString.unicodeScalars.map { $0.value }))\n   \
    \                                                                           ~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = \"\"\n    for char in string {\n     \
    \   let upper = char.unicodeScalars.filter({ $0.isUppercased() }).count > 0\n\
    \        let lower = char.unicodeScalars.filter({ $0.isLowercased() }).count >\
    \ 0\n        if upper && lower {\n            let uppercase = char.unicodeScalars.filter({\
    \ $0.isUppercased() }).first!\n            let lowercase = char.unicodeScalars.filter({\
    \ $0.isLowercased() }).first!\n            output = String(unicodeScalars: lowercase...uppercase)\n\
    \        } else if upper {\n            let uppercase = char.unicodeScalars.filter({\
    \ $0.isUppercased() }).first!\n            output = String(unicodeScalars: uppercase)\n\
    \        } else if lower {\n            let lowercase = char.unicodeScalars.filter({\
    \ $0.isLowercased() }).first!\n            output = String(unicodeScalars: lowercase)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpi0a_48n1.swift:8:53: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercased'\n        let upper = char.unicodeScalars.filter({ $0.isUppercased()\
    \ }).count > 0\n                                                 ~~ ^~~~~~~~~~~~\n\
    /tmp/tmpi0a_48n1.swift:9:53: error: value of type 'Unicode.Scalar' has no member\
    \ 'isLowercased'\n        let lower = char.unicodeScalars.filter({ $0.isLowercased()\
    \ }).count > 0\n                                                 ~~ ^~~~~~~~~~~~\n\
    /tmp/tmpi0a_48n1.swift:11:61: error: value of type 'Unicode.Scalar' has no member\
    \ 'isUppercased'\n            let uppercase = char.unicodeScalars.filter({ $0.isUppercased()\
    \ }).first!\n                                                         ~~ ^~~~~~~~~~~~\n\
    /tmp/tmpi0a_48n1.swift:12:61: error: value of type 'Unicode.Scalar' has no member\
    \ 'isLowercased'\n            let lowercase = char.unicodeScalars.filter({ $0.isLowercased()\
    \ }).first!\n                                                         ~~ ^~~~~~~~~~~~\n\
    /tmp/tmpi0a_48n1.swift:13:22: error: no exact matches in call to initializer \n\
    \            output = String(unicodeScalars: lowercase...uppercase)\n        \
    \             ^\n/tmp/tmpi0a_48n1.swift:13:22: note: found candidate with type\
    \ '(ClosedRange<_>) -> String'\n            output = String(unicodeScalars: lowercase...uppercase)\n\
    \                     ^\n/tmp/tmpi0a_48n1.swift:13:22: note: found candidate with\
    \ type '(ClosedRange<_>) -> String'\n            output = String(unicodeScalars:\
    \ lowercase...uppercase)\n                     ^\n/tmp/tmpi0a_48n1.swift:15:61:\
    \ error: value of type 'Unicode.Scalar' has no member 'isUppercased'\n       \
    \     let uppercase = char.unicodeScalars.filter({ $0.isUppercased() }).first!\n\
    \                                                         ~~ ^~~~~~~~~~~~\n/tmp/tmpi0a_48n1.swift:16:22:\
    \ error: no exact matches in call to initializer \n            output = String(unicodeScalars:\
    \ uppercase)\n                     ^\n/tmp/tmpi0a_48n1.swift:16:22: note: found\
    \ candidate with type '(Character) -> String'\n            output = String(u"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercase = string.lowercased()\n    let uppercase\
    \ = string.uppercased()\n    return String(uppercase) + String(lowercase)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp0fehnjzv/tmp0fehnjzv.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af091097c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af090d8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af090d8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af090d8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fehnjzv                        0x000055dc52e03635 <unavailable> + 5685

    5    libc.so.6                          0x00002af091283460 __libc_start_main +
    245

    6    tmp0fehnjzv                        0x000055dc52e03189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\treturn string\n\t\t.replacingOccurrences(of: \"[a-z]\"\
    , with: \"[A-Z]\")\n\t\t.replacingOccurrences(of: \"[A-Z]\", with: \"[a-z]\")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxbn639o2.swift:7:4: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n                .replacingOccurrences(of: \"[a-z]\"\
    , with: \"[A-Z]\")\n                 ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map { $0.isUppercase ? Character.toUpper($0)\
    \ : Character.toLower($0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu3r45se9.swift:6:63: error: type 'Character' has no member 'toUpper'\n\
    \    return string.characters.map { $0.isUppercase ? Character.toUpper($0) : Character.toLower($0)\
    \ }.joined()\n                                                    ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpu3r45se9.swift:6:87: error: type 'Character' has no member 'toLower'\n\
    \    return string.characters.map { $0.isUppercase ? Character.toUpper($0) : Character.toLower($0)\
    \ }.joined()\n                                                               \
    \             ~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased().uppercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpfjuvydn0/tmpfjuvydn0.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbf4819c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbf4510b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbf4510988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbf450f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjuvydn0                        0x00005631ff7614a5 <unavailable> + 5285

    5    libc.so.6                          0x00002acbf4a05460 __libc_start_main +
    245

    6    tmpfjuvydn0                        0x00005631ff760ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659978959
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\tlet lower = string\n\t\t.lowercased()\n\t\t.unicodeScalars\n\
    \t\t.map { $0.value }\n\t\t.joined()\n\n\tlet upper = string\n\t\t.uppercased()\n\
    \t\t.unicodeScalars\n\t\t.map { $0.value }\n\t\t.joined()\n\n\treturn lower.withPrefix(upper)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3iuzatct.swift:9:13: error: cannot convert value of type 'UInt32'\
    \ to closure result type 'String'\n                .map { $0.value }\n       \
    \                ~~~^~~~~\n/tmp/tmp3iuzatct.swift:15:13: error: cannot convert\
    \ value of type 'UInt32' to closure result type 'String'\n                .map\
    \ { $0.value }\n                       ~~~^~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\treturn string.map({$0.isUppercase() ? String($0.lowercased())\
    \ : String($0.uppercased())})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpbaesvz4j.swift:6:16: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n        return string.map({$0.isUppercase()\
    \ ? String($0.lowercased()) : String($0.uppercased())})\n               ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbaesvz4j.swift:6:24: error: cannot call value of non-function type 'Bool'\n\
    \        return string.map({$0.isUppercase() ? String($0.lowercased()) : String($0.uppercased())})\n\
    \                              ^          ~~\n                               \
    \          \n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var characters: [Character] = []\n    for char in string\
    \ {\n        switch char {\n        case ' ':\n            characters.remove('\
    \ ')\n        case 'a':\n            characters.remove('a')\n        case 'b':\n\
    \            characters.remove('b')\n        case 'c':\n            characters.remove('c')\n\
    \        case 'd':\n            characters.remove('d')\n        case 'e':\n  \
    \          characters.remove('e')\n        case 'f':\n            characters.remove('f')\n\
    \        case 'g':\n            characters.remove('g')\n        case 'h':\n  \
    \          characters.remove('h')\n        case 'i':\n            characters.remove('i')\n\
    \        case 'j':\n            characters.remove('j')\n        case 'k':\n  \
    \          characters.remove('k')\n        case 'l':\n            characters.remove('l')\n\
    \        case 'm':\n            characters.remove('m')\n        case 'n':\n  \
    \          characters.remove('n')\n        case 'o':\n            characters.remove('o')\n\
    \        case 'p':\n            characters.remove('p')\n        case 'q':\n  \
    \          characters.remove('q')\n        case 'r':\n            characters.remove('r')\n\
    \        case 's':\n            characters.remove('s')\n        case 't':\n  \
    \          characters.remove('t')\n        case 'u':\n            characters.remove('u')\n\
    \        case 'v':\n            characters.remove('v')\n        case 'w':\n  \
    \          characters.remove('w')\n        case 'x':\n            characters.remove('x')\n\
    \        case 'y':\n            characters.remove('y')\n        case 'z':\n  \
    \          characters.remove('z')\n        default:\n            characters.append(char)\n\
    \        }\n    }\n    return String(characters.reversed())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_cr4344r.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ' ':\n             ^~~\n             \" \"\n/tmp/tmp_cr4344r.swift:10:31:\
    \ error: single-quoted string literal found, use '\"'\n            characters.remove('\
    \ ')\n                              ^~~\n                              \" \"\n\
    /tmp/tmp_cr4344r.swift:11:14: error: single-quoted string literal found, use '\"\
    '\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp_cr4344r.swift:12:31:\
    \ error: single-quoted string literal found, use '\"'\n            characters.remove('a')\n\
    \                              ^~~\n                              \"a\"\n/tmp/tmp_cr4344r.swift:13:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp_cr4344r.swift:14:31: error: single-quoted\
    \ string literal found, use '\"'\n            characters.remove('b')\n       \
    \                       ^~~\n                              \"b\"\n/tmp/tmp_cr4344r.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'c':\n   \
    \          ^~~\n             \"c\"\n/tmp/tmp_cr4344r.swift:16:31: error: single-quoted\
    \ string literal found, use '\"'\n            characters.remove('c')\n       \
    \                       ^~~\n                              \"c\"\n/tmp/tmp_cr4344r.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'd':\n   \
    \          ^~~\n             \"d\"\n/tmp/tmp_cr4344r.swift:18:31: error: single-quoted\
    \ string literal found, use '\"'\n            characters.remove('d')\n       \
    \                       ^~~\n                              \"d\"\n/tmp/tmp_cr4344r.swift:19:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp_cr4344r.swift:20:31: error: single-quoted\
    \ string literal found, use '\"'\n            characters.remove('e')\n       \
    \                       ^~~\n                              \"e\"\n/tmp/tmp_cr4344r.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'f':\n   \
    \          ^~~\n             \"f\"\n/tmp/tmp_cr434"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for character in string {\n\
    \        switch character {\n        case 'a':\n            result += 'A'\n  \
    \      case 'b':\n            result += 'B'\n        case 'c':\n            result\
    \ += 'C'\n        case 'd':\n            result += 'D'\n        case 'e':\n  \
    \          result += 'E'\n        case 'f':\n            result += 'F'\n     \
    \   case 'g':\n            result += 'G'\n        case 'h':\n            result\
    \ += 'H'\n        case 'i':\n            result += 'I'\n        case 'j':\n  \
    \          result += 'J'\n        case 'k':\n            result += 'K'\n     \
    \   case 'l':\n            result += 'L'\n        case 'm':\n            result\
    \ += 'M'\n        case 'n':\n            result += 'N'\n        case 'o':\n  \
    \          result += 'O'\n        case 'p':\n            result += 'P'\n     \
    \   case 'q':\n            result += 'Q'\n        case 'r':\n            result\
    \ += 'R'\n        case 's':\n            result += 'S'\n        case 't':\n  \
    \          result += 'T'\n        case 'u':\n            result += 'U'\n     \
    \   case 'v':\n            result += 'V'\n        case 'w':\n            result\
    \ += 'W'\n        case 'x':\n            result += 'X'\n        case 'y':\n  \
    \          result += 'Y'\n        case 'z':\n            result += 'Z'\n     \
    \   case 'A':\n            result += 'a'\n        case 'B':\n            result\
    \ += 'b'\n        case 'C':\n            result += 'c'\n        case 'D':\n  \
    \          result += 'd'\n        case 'E':\n            result += 'e'\n     \
    \   case 'F':\n            result += 'f'\n        case 'G':\n            result\
    \ += 'g'\n        case 'H':\n            result += 'h'\n        case 'I':\n  \
    \          result += 'i'\n        case 'J':\n            result += 'j'\n     \
    \   case 'K':\n            result += 'k'\n        case 'L':\n            result\
    \ += 'l'\n        case 'M':\n            result += 'm'\n        case 'N':\n  \
    \          result += 'n'\n        case 'O':\n            result += 'o'\n     \
    \   case 'P':\n            result += 'p'\n        case 'Q':\n            result\
    \ += 'q'\n        case 'R':\n            result += 'r'\n        case 'S':\n  \
    \          result += 's'\n        case 'T':\n            result += 't'\n     \
    \   case 'U':\n            result += 'u'\n        case 'V':\n            result\
    \ += 'v'\n        case 'W':\n            result += 'w'\n        case 'X':\n  \
    \          result += 'x'\n        case 'Y':\n            result += 'y'\n     \
    \   case 'Z':\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9rhfkyah.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp9rhfkyah.swift:10:23:\
    \ error: single-quoted string literal found, use '\"'\n            result += 'A'\n\
    \                      ^~~\n                      \"A\"\n/tmp/tmp9rhfkyah.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp9rhfkyah.swift:12:23: error: single-quoted\
    \ string literal found, use '\"'\n            result += 'B'\n                \
    \      ^~~\n                      \"B\"\n/tmp/tmp9rhfkyah.swift:13:14: error:\
    \ single-quoted string literal found, use '\"'\n        case 'c':\n          \
    \   ^~~\n             \"c\"\n/tmp/tmp9rhfkyah.swift:14:23: error: single-quoted\
    \ string literal found, use '\"'\n            result += 'C'\n                \
    \      ^~~\n                      \"C\"\n/tmp/tmp9rhfkyah.swift:15:14: error:\
    \ single-quoted string literal found, use '\"'\n        case 'd':\n          \
    \   ^~~\n             \"d\"\n/tmp/tmp9rhfkyah.swift:16:23: error: single-quoted\
    \ string literal found, use '\"'\n            result += 'D'\n                \
    \      ^~~\n                      \"D\"\n/tmp/tmp9rhfkyah.swift:17:14: error:\
    \ single-quoted string literal found, use '\"'\n        case 'e':\n          \
    \   ^~~\n             \"e\"\n/tmp/tmp9rhfkyah.swift:18:23: error: single-quoted\
    \ string literal found, use '\"'\n            result += 'E'\n                \
    \      ^~~\n                      \"E\"\n/tmp/tmp9rhfkyah.swift:19:14: error:\
    \ single-quoted string literal found, use '\"'\n        case 'f':\n          \
    \   ^~~\n             \"f\"\n/tmp/tmp9rhfkyah.swift:20:23: error: single-quoted\
    \ string literal found, use '\"'\n            result += 'F'\n                \
    \      ^~~\n                      \"F\"\n/tmp/tmp9rhfkyah.swift:21:14: error:\
    \ single-quoted string literal found, use '\"'\n        case 'g':\n          \
    \   ^~~\n             \"g\"\n/tmp/tmp9rhfkyah.swift:22:23: error: single-quoted\
    \ string literal found, use '\"'\n            result += 'G'\n                \
    \      ^~~\n                      \"G\"\n/tmp/"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = string.characters\n    return String(characters.map\
    \ { $0.isUppercase ? $0.lowercased() : $0.uppercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpx27ovfoh.swift:6:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpx27ovfoh.swift:7:12: error: type of expression is ambiguous without\
    \ more context\n    return String(characters.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map { $0.isUpperCase ?\
    \ $0.lowercased() : $0.uppercased() }\n        .joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpzeockjwk.swift:6:43: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUpperCase'\n    return string.unicodeScalars.map { $0.isUpperCase\
    \ ? $0.lowercased() : $0.uppercased() }\n                                    \
    \   ~~ ^~~~~~~~~~~\n/tmp/tmpzeockjwk.swift:6:60: error: value of type 'Unicode.Scalar'\
    \ has no member 'lowercased'\n    return string.unicodeScalars.map { $0.isUpperCase\
    \ ? $0.lowercased() : $0.uppercased() }\n                                    \
    \                    ~~ ^~~~~~~~~~\n/tmp/tmpzeockjwk.swift:6:78: error: value\
    \ of type 'Unicode.Scalar' has no member 'uppercased'\n    return string.unicodeScalars.map\
    \ { $0.isUpperCase ? $0.lowercased() : $0.uppercased() }\n                   \
    \                                                       ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased().lowercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpudk53p3a/tmpudk53p3a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39c4a3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39c4735b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39c4735988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39c47347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk53p3a                        0x000055a5da27f4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b39c4c2a460 __libc_start_main +
    245

    6    tmpudk53p3a                        0x000055a5da27eff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = [Character](string.unicodeScalars.map {\
    \ $0.value })\n    chars.reverse()\n    return String(chars)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqjteitr0.swift:6:17: error: no exact matches in call to initializer\
    \ \n    let chars = [Character](string.unicodeScalars.map { $0.value })\n    \
    \            ^\nSwift.Array:3:23: note: candidate requires that the types 'Character'\
    \ and 'UInt32' be equivalent (requirement specified as 'Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ s: S) where Element == S.Element, S : Sequence\n\
    \                      ^\nSwift.RangeReplaceableCollection:3:23: note: candidate\
    \ requires that the types 'Character' and 'UInt32' be equivalent (requirement\
    \ specified as 'Self.Element' == 'S.Element')\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return strings.Replace(string, \"A\", strings.ToUpper(string),\
    \ \"g\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpupml3mp1.swift:6:12: error: cannot find 'strings' in scope\n  \
    \  return strings.Replace(string, \"A\", strings.ToUpper(string), \"g\")\n   \
    \        ^~~~~~~\n/tmp/tmpupml3mp1.swift:6:41: error: cannot find 'strings' in\
    \ scope\n    return strings.Replace(string, \"A\", strings.ToUpper(string), \"\
    g\")\n                                        ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if string.rangeOfCharacter(from: .lowercase) != nil\
    \ {\n        string.lowercased()\n    } else {\n        string.uppercased()\n\
    \    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpjxjnvnm0.swift:6:15: error: value of type 'String' has no member\
    \ 'rangeOfCharacter'\n    if string.rangeOfCharacter(from: .lowercase) != nil\
    \ {\n       ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpjxjnvnm0.swift:6:39: error: cannot\
    \ infer contextual base in reference to member 'lowercase'\n    if string.rangeOfCharacter(from:\
    \ .lowercase) != nil {\n                                     ~^~~~~~~~~\n/tmp/tmpjxjnvnm0.swift:7:16:\
    \ warning: result of call to 'lowercased()' is unused\n        string.lowercased()\n\
    \               ^         ~~\n/tmp/tmpjxjnvnm0.swift:9:16: warning: result of\
    \ call to 'uppercased()' is unused\n        string.uppercased()\n            \
    \   ^         ~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowerString = string.lowercased()\n    let upperString\
    \ = string.uppercased()\n    return lowerString + upperString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpiwb63dkq/tmpiwb63dkq.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d02d58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d02a4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d02a4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d02a4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiwb63dkq                        0x000055c8265b24f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b3d02f44460 __libc_start_main +
    245

    6    tmpiwb63dkq                        0x000055c8265b2049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map({ $0.value > 0xff00\
    \ ? $0.value + 32 : $0.value })\n        .map({ Character(UnicodeScalar($0)) })\n\
    \        .map({ String($0) })\n        .joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp7vzcu42d.swift:7:26: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n        .map({ Character(UnicodeScalar($0)) })\n   \
    \                      ^\n/tmp/tmp7vzcu42d.swift:7:26: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        .map({\
    \ Character(UnicodeScalar($0)) })\n                         ^\n              \
    \                             ?? <#default value#>\n/tmp/tmp7vzcu42d.swift:7:26:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        .map({ Character(UnicodeScalar($0)) })\n                    \
    \     ^\n                                          !\n"
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = string\n    for index in 0 ..< string.characters.count\
    \ {\n        let char = string.characters[index]\n        if char.caseInsensitiveCompare\
    \ == \"a\" {\n            result.characters[index] = char.uppercased\n       \
    \ } else {\n            result.characters[index] = char.lowercased\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpq4vwfj04.swift:7:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0 ..< string.characters.count {\n    \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpq4vwfj04.swift:8:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq4vwfj04.swift:8:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = string.characters[index]\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpq4vwfj04.swift:9:17: error: value of\
    \ type 'Character' has no member 'caseInsensitiveCompare'\n        if char.caseInsensitiveCompare\
    \ == \"a\" {\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq4vwfj04.swift:10:30:\
    \ error: cannot assign through subscript: subscript is get-only\n            result.characters[index]\
    \ = char.uppercased\n            ~~~~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpq4vwfj04.swift:10:45:\
    \ error: cannot assign value of type '() -> String' to subscript of type 'Character'\n\
    \            result.characters[index] = char.uppercased\n                    \
    \                   ~~~~~^~~~~~~~~~\n/tmp/tmpq4vwfj04.swift:12:30: error: cannot\
    \ assign through subscript: subscript is get-only\n            result.characters[index]\
    \ = char.lowercased\n            ~~~~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpq4vwfj04.swift:12:45:\
    \ error: cannot assign value of type '() -> String' to subscript of type 'Character'\n\
    \            result.characters[index] = char.lowercased\n                    \
    \                   ~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.characters {\n\
    \        result += (String(c - 0x20) + String(c + 0x20)).uppercaseString\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmph_k9dm4a.swift:7:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph_k9dm4a.swift:8:9:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        result\
    \ += (String(c - 0x20) + String(c + 0x20)).uppercaseString\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979071
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var chars: [Character] = []\n    for char in string\
    \ {\n        if char.lowercased() != char {\n            chars.append(char.uppercased())\n\
    \        } else {\n            chars.append(char.lowercased())\n        }\n  \
    \  }\n    return String(chars)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpi699r3e4.swift:8:33: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if char.lowercased() != char {\n\
    \                                ^\n/tmp/tmpi699r3e4.swift:9:19: error: no exact\
    \ matches in call to instance method 'append'\n            chars.append(char.uppercased())\n\
    \                  ^\nSwift.Array:7:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf\
    \ newElements: __owned S) where Element == S.Element, S : Sequence\n         \
    \                           ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable\
    \ public mutating func append<S>(contentsOf newElements: __owned S) where S :\
    \ Sequence, Self.Element == S.Element\n                                    ^\n\
    /tmp/tmpi699r3e4.swift:11:19: error: no exact matches in call to instance method\
    \ 'append'\n            chars.append(char.lowercased())\n                  ^\n\
    Swift.Array:7:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf newElements:\
    \ __owned S) where Element == S.Element, S : Sequence\n                      \
    \              ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public\
    \ mutating func append<S>(contentsOf newElements: __owned S) where S : Sequence,\
    \ Self.Element == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard !string.isEmpty else { return string }\n    return\
    \ string.uppercased().prefix(1) + string.lowercased().dropFirst()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpt3sode_6.swift:7:42: error: cannot convert return expression of\
    \ type 'String.SubSequence' (aka 'Substring') to return type 'String'\n    return\
    \ string.uppercased().prefix(1) + string.lowercased().dropFirst()\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          \
    \ String(                                                        )\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = \"\"\n    \n    var buffer = [Character](repeating:\
    \ Character(\"\\u{0020}\\u{0020}\\u{0020}\"), count: string.count)\n    \n   \
    \ func is_upper(index: Int, buffer: inout [Character]) -> Bool {\n        if buffer[index]\
    \ == \"\\u{0020}\\u{0020}\\u{0020}\\u{0020}\" {\n            return false\n  \
    \      }\n        \n        return buffer[index].isUpper()\n    }\n    \n    func\
    \ is_lower(index: Int, buffer: inout [Character]) -> Bool {\n        if buffer[index]\
    \ == \"\\u{0020}\\u{0020}\\u{0020}\\u{0020}\" {\n            return false\n  \
    \      }\n        \n        return buffer[index].isLower()\n    }\n    \n    func\
    \ flip(index: Int, buffer: inout [Character]) {\n        let current = buffer[index]\n\
    \        buffer[index] = buffer[index].isUpper() ? \"\\u{0020}\\u{0020}\\u{0020}\\\
    u{0020}\" : \"\\u{0020}\\u{0020}\\u{0020}\\u{0020}\"\n        buffer[index] =\
    \ current\n    }\n    \n    for i in string.indices {\n        if is_upper(i,\
    \ &buffer) {\n            flip(i, &buffer)\n        }\n        else if is_lower(i,\
    \ &buffer) {\n            flip(i, &buffer)\n        }\n    }\n    \n    output\
    \ += String(buffer)\n    \n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpn6g2lxgz.swift:11:26: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if buffer[index] == \"\
    \\u{0020}\\u{0020}\\u{0020}\\u{0020}\" {\n           ~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpn6g2lxgz.swift:11:26: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ if buffer[index] == \"\\u{0020}\\u{0020}\\u{0020}\\u{0020}\" {\n           \
    \              ^\n/tmp/tmpn6g2lxgz.swift:15:30: error: value of type 'Character'\
    \ has no member 'isUpper'\n        return buffer[index].isUpper()\n          \
    \     ~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpn6g2lxgz.swift:19:26: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  if buffer[index] == \"\\u{0020}\\u{0020}\\u{0020}\\u{0020}\" {\n          \
    \ ~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn6g2lxgz.swift:19:26:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if buffer[index] == \"\\u{0020}\\\
    u{0020}\\u{0020}\\u{0020}\" {\n                         ^\n/tmp/tmpn6g2lxgz.swift:23:30:\
    \ error: value of type 'Character' has no member 'isLower'\n        return buffer[index].isLower()\n\
    \               ~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpn6g2lxgz.swift:28:39: error: value\
    \ of type 'Character' has no member 'isUpper'\n        buffer[index] = buffer[index].isUpper()\
    \ ? \"\\u{0020}\\u{0020}\\u{0020}\\u{0020}\" : \"\\u{0020}\\u{0020}\\u{0020}\\\
    u{0020}\"\n                        ~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpn6g2lxgz.swift:33:20:\
    \ error: missing argument labels 'index:buffer:' in call\n        if is_upper(i,\
    \ &buffer) {\n                   ^\n                    index:  buffer: \n/tmp/tmpn6g2lxgz.swift:33:21:\
    \ error: cannot convert value of type 'DefaultIndices<String>.Element' (aka 'String.Index')\
    \ to expected argument type 'Int'\n        if is_upper(i, &buffer) {\n       \
    \             ^\n/tmp/tmpn6g2lxgz.swift:34:17: error: missing argument labels\
    \ 'index:buffer:' in call\n            flip("
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let unicodeScalars = string.unicodeScalars {\n \
    \       let length = unicodeScalars.count\n        var swapped = [UnicodeScalar](repeating:\
    \ 0, count: length)\n        for i in 0..<length {\n            swapped[i] = unicodeScalars[i]\n\
    \            if i == 0 {\n                swapped[i] = unicodeScalars.endIndex.successor()\n\
    \            }\n        }\n        unicodeScalars = swapped\n        return String(unicodeScalars)\n\
    \    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5xgci8it.swift:8:50: error: cannot convert value of type 'Int'\
    \ to expected argument type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        var\
    \ swapped = [UnicodeScalar](repeating: 0, count: length)\n                   \
    \                              ^\n/tmp/tmp5xgci8it.swift:10:40: error: no exact\
    \ matches in call to subscript \n            swapped[i] = unicodeScalars[i]\n\
    \                                       ^\n/tmp/tmp5xgci8it.swift:10:40: note:\
    \ found candidate with type '(String.UnicodeScalarView.Index) -> Unicode.Scalar'\
    \ (aka '(String.Index) -> Unicode.Scalar')\n            swapped[i] = unicodeScalars[i]\n\
    \                                       ^\n/tmp/tmp5xgci8it.swift:10:40: note:\
    \ found candidate with type '(Range<String.UnicodeScalarView.Index>) -> String.UnicodeScalarView.SubSequence'\
    \ (aka '(Range<String.Index>) -> Substring.UnicodeScalarView')\n            swapped[i]\
    \ = unicodeScalars[i]\n                                       ^\n/tmp/tmp5xgci8it.swift:10:40:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> String.UnicodeScalarView.SubSequence'\
    \ (aka '((UnboundedRange_) -> ()) -> Substring.UnicodeScalarView')\n         \
    \   swapped[i] = unicodeScalars[i]\n                                       ^\n\
    /tmp/tmp5xgci8it.swift:12:54: error: value of type 'String.UnicodeScalarView.Index'\
    \ (aka 'String.Index') has no member 'successor'\n                swapped[i] =\
    \ unicodeScalars.endIndex.successor()\n                             ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmp5xgci8it.swift:15:9: error: cannot assign to value: 'unicodeScalars'\
    \ is a 'let' constant\n        unicodeScalars = swapped\n        ^~~~~~~~~~~~~~\n\
    /tmp/tmp5xgci8it.swift:6:8: error: initializer for conditional binding must have\
    \ Optional type, not 'String.UnicodeScalarView'\n    if let unicodeScalars = string.unicodeScalars\
    \ {\n       ^                    ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map { $0.isUpper() ? $0.lowercased()\
    \ : $0.uppercased() }.joinWithSeparator(\"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmptt5u4_4h.swift:6:87: error: value of type '[String]' has no member\
    \ 'joinWithSeparator'\n    return string.characters.map { $0.isUpper() ? $0.lowercased()\
    \ : $0.uppercased() }.joinWithSeparator(\"\")\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~\n/tmp/tmptt5u4_4h.swift:6:39: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'isUpper'\n    return string.characters.map\
    \ { $0.isUpper() ? $0.lowercased() : $0.uppercased() }.joinWithSeparator(\"\"\
    )\n                                   ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let range = string.unicodeScalars.startIndex..<string.unicodeScalars.endIndex\n\
    \    return string.unicodeScalars.map{\n        $0 == .lowercase\n           \
    \ ? .uppercase\n            : .name\n    }.joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0wl3sijq.swift:9:16: error: type 'String' has no member 'uppercase'\n\
    \            ? .uppercase\n              ~^~~~~~~~~\n/tmp/tmp0wl3sijq.swift:10:16:\
    \ error: type 'String' has no member 'name'\n            : .name\n           \
    \   ~^~~~\n/tmp/tmp0wl3sijq.swift:8:16: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        $0 == .lowercase\n              ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if string.rangeOfCharacter(from: .uppercase) != nil\
    \ {\n        return string\n    }\n\n    let unicodeScalars = string.unicodeScalars\n\
    \    var outputString = \"\"\n    for scalar in unicodeScalars {\n        if let\
    \ firstChar = UnicodeScalar(scalar.value)? {\n            if let secondChar =\
    \ UnicodeScalar(Character(Character.uppercaseAlphabetic)!) {\n               \
    \ outputString += String(UnicodeScalar(secondChar.value)!)\n            } else\
    \ {\n                outputString += String(Character(Character.uppercaseLetter)!)\n\
    \            }\n        } else {\n            outputString += String(Character(Character.lowercaseLetter)!)\n\
    \        }\n    }\n    return outputString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp1he7y8ea.swift:6:15: error: value of type 'String' has no member\
    \ 'rangeOfCharacter'\n    if string.rangeOfCharacter(from: .uppercase) != nil\
    \ {\n       ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp1he7y8ea.swift:6:39: error: cannot\
    \ infer contextual base in reference to member 'uppercase'\n    if string.rangeOfCharacter(from:\
    \ .uppercase) != nil {\n                                     ~^~~~~~~~~\n/tmp/tmp1he7y8ea.swift:13:55:\
    \ error: optional chain has no effect, expression already produces 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>')\n        if let firstChar = UnicodeScalar(scalar.value)?\
    \ {\n                                                      ^\n               \
    \                                       \n/tmp/tmp1he7y8ea.swift:14:33: error:\
    \ no exact matches in call to initializer \n            if let secondChar = UnicodeScalar(Character(Character.uppercaseAlphabetic)!)\
    \ {\n                                ^\n/tmp/tmp1he7y8ea.swift:14:33: note: found\
    \ candidate with type '(UInt32) -> UnicodeScalar?' (aka '(UInt32) -> Optional<Unicode.Scalar>')\n\
    \            if let secondChar = UnicodeScalar(Character(Character.uppercaseAlphabetic)!)\
    \ {\n                                ^\n/tmp/tmp1he7y8ea.swift:14:33: note: found\
    \ candidate with type '(UInt16) -> UnicodeScalar?' (aka '(UInt16) -> Optional<Unicode.Scalar>')\n\
    \            if let secondChar = UnicodeScalar(Character(Character.uppercaseAlphabetic)!)\
    \ {\n                                ^\n/tmp/tmp1he7y8ea.swift:14:33: note: found\
    \ candidate with type '(String) -> UnicodeScalar?' (aka '(String) -> Optional<Unicode.Scalar>')\n\
    \            if let secondChar = UnicodeScalar(Character(Character.uppercaseAlphabetic)!)\
    \ {\n                                ^\n/tmp/tmp1he7y8ea.swift:14:33: note: found\
    \ candidate with type '(Int) -> UnicodeScalar?' (aka '(Int) -> Optional<Unicode.Scalar>')\n\
    \            if let secondChar = UnicodeScalar(Character(Character.uppercaseAlphabetic)!)\
    \ {\n                                ^\n/tmp/tmp1he7y8ea.swift:14:67: error: type\
    \ 'Character' has no member 'uppercaseAlphabetic'\n            if l"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = string.unicodeScalars\n        .map\
    \ { String($0) }\n        .map { CharacterSet(charactersIn: $0) }\n        .filter\
    \ { !$0.isEmpty }\n\n    return characters.reduce(string) { result, character\
    \ in\n        var newCharacter = character\n\n        // Handle uppercase characters\n\
    \        if newCharacter.isUppercase {\n            newCharacter = Character(Character.isUppercase(newCharacter)\
    \ ? \"A\" : \"a\")\n        }\n        // Handle lowercase characters\n      \
    \  if newCharacter.isLowercase {\n            newCharacter = Character(Character.isLowercase(newCharacter)\
    \ ? \"a\" : \"A\")\n        }\n\n        return result + String(newCharacter)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxp_b_doq.swift:8:16: error: cannot find 'CharacterSet' in scope\n\
    \        .map { CharacterSet(charactersIn: $0) }\n               ^~~~~~~~~~~~\n\
    /tmp/tmpxp_b_doq.swift:16:28: error: cannot assign value of type 'Character' to\
    \ type '_'\n            newCharacter = Character(Character.isUppercase(newCharacter)\
    \ ? \"A\" : \"a\")\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxp_b_doq.swift:16:48: error: cannot call value of non-function type 'Bool'\n\
    \            newCharacter = Character(Character.isUppercase(newCharacter) ? \"\
    A\" : \"a\")\n                                               ^\n/tmp/tmpxp_b_doq.swift:16:38:\
    \ error: instance member 'isUppercase' cannot be used on type 'Character'; did\
    \ you mean to use a value of this type instead?\n            newCharacter = Character(Character.isUppercase(newCharacter)\
    \ ? \"A\" : \"a\")\n                                     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let map = CharacterMap.lowercaseLettersToUppercase()\n\
    \    return string.mapping(map)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp2wbfi7q2.swift:6:15: error: cannot find 'CharacterMap' in scope\n\
    \    let map = CharacterMap.lowercaseLettersToUppercase()\n              ^~~~~~~~~~~~\n\
    /tmp/tmp2wbfi7q2.swift:7:19: error: value of type 'String' has no member 'mapping'\n\
    \    return string.mapping(map)\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let uppercase = string.unicodeScalars.filter({ $0.isUpperCase\
    \ }).first,\n       let lowercase = string.unicodeScalars.filter({ $0.isLowerCase\
    \ }).first {\n        return String(string.unicodeScalars.filter({ $0 != uppercase\
    \ && $0 != lowercase }))\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpdifvg1kd.swift:6:58: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUpperCase'\n    if let uppercase = string.unicodeScalars.filter({\
    \ $0.isUpperCase }).first,\n                                                 \
    \     ~~ ^~~~~~~~~~~\n/tmp/tmpdifvg1kd.swift:7:58: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLowerCase'\n       let lowercase = string.unicodeScalars.filter({\
    \ $0.isLowerCase }).first {\n                                                \
    \      ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = string\n    let chars = result.characters\n\
    \    for i in 0..<chars.count {\n        chars[i] = chars[i].toUppercase()\n \
    \       chars[i + chars.count] = chars[i].toLowercase()\n    }\n    return String(chars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp7p59p9kg.swift:7:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = result.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7p59p9kg.swift:9:14:\
    \ error: cannot assign through subscript: subscript is get-only\n        chars[i]\
    \ = chars[i].toUppercase()\n        ~~~~~^~~\n/tmp/tmp7p59p9kg.swift:9:29: error:\
    \ value of type 'Character' has no member 'toUppercase'\n        chars[i] = chars[i].toUppercase()\n\
    \                   ~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmp7p59p9kg.swift:10:14: error:\
    \ cannot assign through subscript: subscript is get-only\n        chars[i + chars.count]\
    \ = chars[i].toLowercase()\n        ~~~~~^~~~~~~~~~~~~~~~~\n/tmp/tmp7p59p9kg.swift:10:43:\
    \ error: value of type 'Character' has no member 'toLowercase'\n        chars[i\
    \ + chars.count] = chars[i].toLowercase()\n                                 ~~~~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    string.characters.forEach { character -> Void in\n\
    \        switch character {\n        case let c as Character.Uppercase:\n    \
    \        string.characters.replaceSubrange(\n                NSRange(0..<string.characters.count),\n\
    \                with: NSRange(c.rawValue, in: NSMakeRange(0, string.characters.count))\n\
    \            )\n        case let c as Character.Lowercase:\n            string.characters.replaceSubrange(\n\
    \                NSRange(0..<string.characters.count),\n                with:\
    \ NSRange(c.rawValue, in: NSMakeRange(0, string.characters.count))\n         \
    \   )\n        }\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprh82dl49.swift:10:17: error: cannot find 'NSRange' in scope\n \
    \               NSRange(0..<string.characters.count),\n                ^~~~~~~\n\
    /tmp/tmprh82dl49.swift:11:23: error: cannot find 'NSRange' in scope\n        \
    \        with: NSRange(c.rawValue, in: NSMakeRange(0, string.characters.count))\n\
    \                      ^~~~~~~\n/tmp/tmprh82dl49.swift:11:47: error: cannot find\
    \ 'NSMakeRange' in scope\n                with: NSRange(c.rawValue, in: NSMakeRange(0,\
    \ string.characters.count))\n                                              ^~~~~~~~~~~\n\
    /tmp/tmprh82dl49.swift:15:17: error: cannot find 'NSRange' in scope\n        \
    \        NSRange(0..<string.characters.count),\n                ^~~~~~~\n/tmp/tmprh82dl49.swift:16:23:\
    \ error: cannot find 'NSRange' in scope\n                with: NSRange(c.rawValue,\
    \ in: NSMakeRange(0, string.characters.count))\n                      ^~~~~~~\n\
    /tmp/tmprh82dl49.swift:16:47: error: cannot find 'NSMakeRange' in scope\n    \
    \            with: NSRange(c.rawValue, in: NSMakeRange(0, string.characters.count))\n\
    \                                              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let chars = string.unicodeScalars {\n        return\
    \ String.UnicodeScalarView(chars)\n            .map({Character($0)})\n       \
    \     .map({ $0.isUppercase ? Character($0).lowercased() : Character($0).uppercased()\
    \ })\n            .map{ String($0) }\n            .reduce(string) {$0 + $1 }\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0ww0ziys.swift:9:47: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n            .map({ $0.isUppercase ? Character($0).lowercased() : Character($0).uppercased()\
    \ })\n                                              ^\n                      \
    \                        extendedGraphemeClusterLiteral: \n/tmp/tmp0ww0ziys.swift:9:76:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \          .map({ $0.isUppercase ? Character($0).lowercased() : Character($0).uppercased()\
    \ })\n                                                                       \
    \    ^\n                                                                     \
    \      extendedGraphemeClusterLiteral: \n/tmp/tmp0ww0ziys.swift:6:8: error: initializer\
    \ for conditional binding must have Optional type, not 'String.UnicodeScalarView'\n\
    \    if let chars = string.unicodeScalars {\n       ^           ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.capitalize + string.lowercase\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa4k3jyrc.swift:6:19: error: value of type 'String' has no member\
    \ 'capitalize'\n    return string.capitalize + string.lowercase\n           ~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpa4k3jyrc.swift:6:39: error: value of type 'String' has no\
    \ member 'lowercase'\n    return string.capitalize + string.lowercase\n      \
    \                         ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string\n        .characters\n        .reversed()\n\
    \        .reversed()\n        .joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8y6lsgda.swift:10:10: error: no exact matches in call to instance\
    \ method 'joined'\n        .joined()\n         ^\nSwift.Sequence:1:11: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'StringProtocol'\
    \ (requirement specified as 'Self.Element' : 'StringProtocol')\nextension Sequence\
    \ where Self.Element : StringProtocol {\n          ^\nSwift.BidirectionalCollection:1:11:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'String' be equivalent (requirement specified as 'Self.Element' == 'String')\n\
    extension BidirectionalCollection where Self.Element == String {\n          ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = (string as NSString).lowercaseString\n\
    \    .characters\n    .map{ String((Character($0) ?? \"\").uppercaseString) }\n\
    \    .joinWithSeparator(\"\")\n    return characters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy3co2tr1.swift:6:33: error: cannot find type 'NSString' in scope\n\
    \    let characters = (string as NSString).lowercaseString\n                 \
    \               ^~~~~~~~\n/tmp/tmpy3co2tr1.swift:8:33: error: binary operator\
    \ '??' cannot be applied to operands of type 'Character' and 'String'\n    .map{\
    \ String((Character($0) ?? \"\").uppercaseString) }\n                  ~~~~~~~~~~~~~\
    \ ^  ~~\n/tmp/tmpy3co2tr1.swift:6:43: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    let characters = (string as NSString).lowercaseString\n\
    \                     ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpy3co2tr1.swift:8:40:\
    \ error: reference to member 'uppercaseString' cannot be resolved without a contextual\
    \ type\n    .map{ String((Character($0) ?? \"\").uppercaseString) }\n        \
    \                               ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if string.count == 0 {\n        return \"\"\n    }\n\
    \n    lowercased := \"\"\n    uppercased := \"\"\n\n    for _, letter := range\
    \ string {\n        uppercased += letter == letter ? letter : letter.uppercased()\n\
    \        lowercased += letter == letter ? letter : letter.lowercased()\n    }\n\
    \n    return uppercased + lowercased\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpiy00stbj.swift:10:15: error: consecutive statements on a line must\
    \ be separated by ';'\n    lowercased := \"\"\n              ^\n             \
    \ ;\n/tmp/tmpiy00stbj.swift:10:16: error: expected expression\n    lowercased\
    \ := \"\"\n               ^\n/tmp/tmpiy00stbj.swift:13:10: error: expected 'in'\
    \ after for-each pattern\n    for _, letter := range string {\n         ^\n/tmp/tmpiy00stbj.swift:13:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, letter :=\
    \ range string {\n         ^\n/tmp/tmpiy00stbj.swift:10:5: error: cannot find\
    \ 'lowercased' in scope\n    lowercased := \"\"\n    ^~~~~~~~~~\n/tmp/tmpiy00stbj.swift:18:12:\
    \ error: cannot find 'uppercased' in scope\n    return uppercased + lowercased\n\
    \           ^~~~~~~~~~\n/tmp/tmpiy00stbj.swift:18:25: error: cannot find 'lowercased'\
    \ in scope\n    return uppercased + lowercased\n                        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    var index = string.startIndex\n\
    \    while index != string.endIndex {\n        let char = string[index]\n    \
    \    if char == (char.lowercaseString + char.uppercaseString) {\n            result\
    \ += char\n        } else {\n            result += char.lowercaseString\n    \
    \    }\n        index = string.index(before: index)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpjs3_iwe6.swift:10:17: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if char == (char.lowercaseString\
    \ + char.uppercaseString) {\n           ~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjs3_iwe6.swift:10:17: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ if char == (char.lowercaseString + char.uppercaseString) {\n               \
    \ ^\n/tmp/tmpjs3_iwe6.swift:10:26: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        if char == (char.lowercaseString + char.uppercaseString)\
    \ {\n                    ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjs3_iwe6.swift:10:49: error:\
    \ value of type 'Character' has no member 'uppercaseString'\n        if char ==\
    \ (char.lowercaseString + char.uppercaseString) {\n                          \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjs3_iwe6.swift:11:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n/tmp/tmpjs3_iwe6.swift:13:28:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += char.lowercaseString\n                      ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let letters = string.uppercased()\n    let capitalLetters\
    \ = string.lowercased()\n    \n    return letters.replacingOccurrences(of: lowercase,\
    \ with: uppercase)\n        .replacingOccurrences(of: uppercase, with: lowercase)\n\
    \        .replacingOccurrences(of: capital_letters, with: letters)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpys43g471.swift:9:45: error: cannot find 'lowercase' in scope\n\
    \    return letters.replacingOccurrences(of: lowercase, with: uppercase)\n   \
    \                                         ^~~~~~~~~\n/tmp/tmpys43g471.swift:9:62:\
    \ error: cannot find 'uppercase' in scope\n    return letters.replacingOccurrences(of:\
    \ lowercase, with: uppercase)\n                                              \
    \               ^~~~~~~~~\n/tmp/tmpys43g471.swift:10:35: error: cannot find 'uppercase'\
    \ in scope\n        .replacingOccurrences(of: uppercase, with: lowercase)\n  \
    \                                ^~~~~~~~~\n/tmp/tmpys43g471.swift:10:52: error:\
    \ cannot find 'lowercase' in scope\n        .replacingOccurrences(of: uppercase,\
    \ with: lowercase)\n                                                   ^~~~~~~~~\n\
    /tmp/tmpys43g471.swift:11:35: error: cannot find 'capital_letters' in scope\n\
    \        .replacingOccurrences(of: capital_letters, with: letters)\n         \
    \                         ^~~~~~~~~~~~~~~\n/tmp/tmpys43g471.swift:9:20: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n    return letters.replacingOccurrences(of:\
    \ lowercase, with: uppercase)\n           ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.fold(CharacterSet.lowercaseLetters, CharacterSet.uppercaseLetters).lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkre_gnlb.swift:6:24: error: cannot find 'CharacterSet' in scope\n\
    \    return string.fold(CharacterSet.lowercaseLetters, CharacterSet.uppercaseLetters).lowercased()\n\
    \                       ^~~~~~~~~~~~\n/tmp/tmpkre_gnlb.swift:6:55: error: cannot\
    \ find 'CharacterSet' in scope\n    return string.fold(CharacterSet.lowercaseLetters,\
    \ CharacterSet.uppercaseLetters).lowercased()\n                              \
    \                        ^~~~~~~~~~~~\n/tmp/tmpkre_gnlb.swift:6:19: error: value\
    \ of type 'String' has no member 'fold'\n    return string.fold(CharacterSet.lowercaseLetters,\
    \ CharacterSet.uppercaseLetters).lowercased()\n           ~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.characters {\n\
    \        if c >= 'A' && c <= 'Z' {\n            result += String(c) - 'A' + 'a'\n\
    \        } else {\n            result += String(c)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpq8xujqnn.swift:8:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n         \
    \       \"A\"\n/tmp/tmpq8xujqnn.swift:8:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                       \
    \     ^~~\n                            \"Z\"\n/tmp/tmpq8xujqnn.swift:9:35: error:\
    \ single-quoted string literal found, use '\"'\n            result += String(c)\
    \ - 'A' + 'a'\n                                  ^~~\n                       \
    \           \"A\"\n/tmp/tmpq8xujqnn.swift:9:41: error: single-quoted string literal\
    \ found, use '\"'\n            result += String(c) - 'A' + 'a'\n             \
    \                           ^~~\n                                        \"a\"\
    \n/tmp/tmpq8xujqnn.swift:7:21: error: 'characters' is unavailable: Please use\
    \ String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpq8xujqnn.swift:9:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += String(c) - 'A' + 'a'\n            ~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased()\n        .unicodeScalars.map\
    \ { $0.withCString(strdup) }\n        .map { String(CString($0)) }\n        .joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp82ryeakj.swift:7:46: error: cannot find 'strdup' in scope\n   \
    \     .unicodeScalars.map { $0.withCString(strdup) }\n                       \
    \                      ^~~~~~\n/tmp/tmp82ryeakj.swift:8:23: error: cannot find\
    \ 'CString' in scope\n        .map { String(CString($0)) }\n                 \
    \     ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpum6fpclh/tmpum6fpclh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45b0194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45afe8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45afe8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45afe8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum6fpclh                        0x000055d4e630b445 <unavailable> + 5189

    5    libc.so.6                          0x00002b45b0380460 __libc_start_main +
    245

    6    tmpum6fpclh                        0x000055d4e630af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map { c -> String in\n\
    \        var result = \"\"\n        switch c {\n        case .lowercase, .uppercase:\n\
    \            result = c.rawValue\n        case .capitalized:\n            result\
    \ = c.rawValue.lowercased()\n        }\n        return result\n    }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 6 (use -v to see invocation)\n\
    swift-frontend: /home/build-user/swift/include/swift/Sema/ConstraintSystem.h:3595:\
    \ swift::Type swift::constraints::ConstraintSystem::getType(swift::ASTNode) const:\
    \ Assertion `hasType(node) && \"Expected type to have been set!\"' failed.\nPlease\
    \ submit a bug report (https://swift.org/contributing/#reporting-bugs) and include\
    \ the project and the crash backtrace.\nStack dump:\n0.\tProgram arguments: /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-frontend\
    \ -frontend -c -primary-file /tmp/tmpo3f7b56u.swift -target x86_64-unknown-linux-gnu\
    \ -disable-objc-interop -new-driver-path /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-driver\
    \ -empty-abi-descriptor -resource-dir /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/lib/swift\
    \ -module-name tmpo3f7b56u -o /tmp/TemporaryDirectory.ELADjC/tmpo3f7b56u-1.o\n\
    1.\tSwift version 5.8-dev (LLVM 07d14852a049e40, Swift 613b3223d9ec5f6)\n2.\t\
    Compiling with the current language version\n3.\tWhile evaluating request TypeCheckSourceFileRequest(source_file\
    \ \"/tmp/tmpo3f7b56u.swift\")\n4.\tWhile evaluating request TypeCheckFunctionBodyRequest(tmpo3f7b56u.(file).flip_case(string:)@/tmp/tmpo3f7b56u.swift:5:6)\n\
    5.\tWhile type-checking statement at [/tmp/tmpo3f7b56u.swift:5:42 - line:16:1]\
    \ RangeText=\"{\n    return string.unicodeScalars.map { c -> String in\n     \
    \   var result = \"\"\n        switch c {\n        case .lowercase, .uppercase:\n\
    \            result = c.rawValue\n        case .capitalized:\n            result\
    \ = c.rawValue.lowercased()\n        }\n        return result\n    }.joined()\n\
    \"\n6.\tWhile type-checking statement at [/tmp/tmpo3f7b56u.swift:6:5 - line:15:14]\
    \ RangeText=\"return string.unicodeScalars.map { c -> String in\n        var result\
    \ = \"\"\n        switch c {\n        case .lowercase, .uppercase:\n         \
    \   result = c.rawValue\n        case .capitalized:\n      "
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let range = (string as NSString).rangeOfString(string:\
    \ string.lowercaseString)\n    let newString = (string as NSString).substringWithRange(range)\n\
    \    return newString.uppercaseString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpaclawcmn.swift:6:28: error: cannot find type 'NSString' in scope\n\
    \    let range = (string as NSString).rangeOfString(string: string.lowercaseString)\n\
    \                           ^~~~~~~~\n/tmp/tmpaclawcmn.swift:6:38: error: value\
    \ of type 'String' has no member 'rangeOfString'\n    let range = (string as NSString).rangeOfString(string:\
    \ string.lowercaseString)\n                ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpaclawcmn.swift:6:67: error: value of type 'String' has no member 'lowercaseString'\n\
    \    let range = (string as NSString).rangeOfString(string: string.lowercaseString)\n\
    \                                                           ~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpaclawcmn.swift:7:32: error: cannot find type 'NSString' in scope\n   \
    \ let newString = (string as NSString).substringWithRange(range)\n           \
    \                    ^~~~~~~~\n/tmp/tmpaclawcmn.swift:7:42: error: value of type\
    \ 'String' has no member 'substringWithRange'\n    let newString = (string as\
    \ NSString).substringWithRange(range)\n                    ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        Character(UnicodeScalar($0).value)\n\
    \            ?? Character(UnicodeScalar($0).value).uppercased()\n            ??\
    \ Character(UnicodeScalar($0).value).lowercased()\n    }.joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqh6fhmto.swift:7:19: error: no exact matches in call to initializer\
    \ \n        Character(UnicodeScalar($0).value)\n                  ^\n/tmp/tmpqh6fhmto.swift:7:19:\
    \ note: found candidate with type '(UInt8) -> UnicodeScalar' (aka '(UInt8) ->\
    \ Unicode.Scalar')\n        Character(UnicodeScalar($0).value)\n             \
    \     ^\n/tmp/tmpqh6fhmto.swift:7:19: note: found candidate with type '(Unicode.Scalar)\
    \ -> UnicodeScalar' (aka '(Unicode.Scalar) -> Unicode.Scalar')\n        Character(UnicodeScalar($0).value)\n\
    \                  ^\n/tmp/tmpqh6fhmto.swift:8:16: error: no exact matches in\
    \ call to initializer \n            ?? Character(UnicodeScalar($0).value).uppercased()\n\
    \               ^\n/tmp/tmpqh6fhmto.swift:8:16: note: found candidate with type\
    \ '(Unicode.Scalar) -> Character'\n            ?? Character(UnicodeScalar($0).value).uppercased()\n\
    \               ^\n/tmp/tmpqh6fhmto.swift:8:16: note: found candidate with type\
    \ '(String) -> Character'\n            ?? Character(UnicodeScalar($0).value).uppercased()\n\
    \               ^\n/tmp/tmpqh6fhmto.swift:9:16: error: no exact matches in call\
    \ to initializer \n            ?? Character(UnicodeScalar($0).value).lowercased()\n\
    \               ^\n/tmp/tmpqh6fhmto.swift:9:16: note: found candidate with type\
    \ '(Unicode.Scalar) -> Character'\n            ?? Character(UnicodeScalar($0).value).lowercased()\n\
    \               ^\n/tmp/tmpqh6fhmto.swift:9:16: note: found candidate with type\
    \ '(String) -> Character'\n            ?? Character(UnicodeScalar($0).value).lowercased()\n\
    \               ^\n/tmp/tmpqh6fhmto.swift:8:26: error: no exact matches in call\
    \ to initializer \n            ?? Character(UnicodeScalar($0).value).uppercased()\n\
    \                         ^\n/tmp/tmpqh6fhmto.swift:8:26: note: found candidate\
    \ with type '(UInt8) -> UnicodeScalar' (aka '(UInt8) -> Unicode.Scalar')\n   \
    \         ?? Character(UnicodeScalar($0).value).uppercased()\n               \
    \          ^\n/tmp/tmpqh6fhmto.swift:8:26: note: found candidate with type '(Unicode.Scalar)\
    \ -> UnicodeScalar' (aka '(Unicode.Scalar) -> Unicode.Scalar')\n           "
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case \"A\" ... \"Z\":\n            c += \"a\"\n        case \"\
    a\" ... \"z\":\n            c += \"A\"\n        }\n        result += c\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpiqw2dyg_.swift:10:13: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            c += \"a\"\n            ^\n\
    /tmp/tmpiqw2dyg_.swift:12:13: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            c += \"A\"\n            ^\n\
    /tmp/tmpiqw2dyg_.swift:8:9: error: switch must be exhaustive\n        switch c\
    \ {\n        ^\n/tmp/tmpiqw2dyg_.swift:8:9: note: do you want to add a default\
    \ clause?\n        switch c {\n        ^\n/tmp/tmpiqw2dyg_.swift:14:19: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        result += c\n                  ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.fold(\"\") {\n        char, nextChar\
    \ in\n        char.isUppercase ? nextChar.lowercased() : char.uppercased()\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpzo1iw_ln.swift:6:19: error: value of type 'String' has no member\
    \ 'fold'\n    return string.fold(\"\") {\n           ~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lower = string.lowercased()\n    let upper = lower.uppercased()\n\
    \    return upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpeqb_119i/tmpeqb_119i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2205d37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2205a2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2205a2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2205a2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqb_119i                        0x00005627c5d134a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b2205f23460 __libc_start_main +
    245

    6    tmpeqb_119i                        0x00005627c5d12ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = string\n    var i = 0\n    for j in 0..<string.characters.count\
    \ {\n        output[j] = Character(toUppercase(output[j]))\n        output[j+1]\
    \ = Character(toLowercase(output[j+1]))\n    }\n    return output\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpw_plkej7.swift:8:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for j in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpw_plkej7.swift:9:31: error: cannot find 'toUppercase' in scope\n\
    \        output[j] = Character(toUppercase(output[j]))\n                     \
    \         ^~~~~~~~~~~\n/tmp/tmpw_plkej7.swift:9:15: error: cannot assign through\
    \ subscript: subscript is get-only\n        output[j] = Character(toUppercase(output[j]))\n\
    \        ~~~~~~^~~\n/tmp/tmpw_plkej7.swift:10:33: error: cannot find 'toLowercase'\
    \ in scope\n        output[j+1] = Character(toLowercase(output[j+1]))\n      \
    \                          ^~~~~~~~~~~\n/tmp/tmpw_plkej7.swift:10:15: error: cannot\
    \ assign through subscript: subscript is get-only\n        output[j+1] = Character(toLowercase(output[j+1]))\n\
    \        ~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    \n    for char in string {\n\
    \        switch char {\n        case Character(char.lowercased()):\n         \
    \   result = char.uppercased()\n        case Character(char.uppercased()):\n \
    \           result = char.lowercased()\n        default:\n            result +=\
    \ char\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp22ncabut.swift:15:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var resultString = string.lowercaseString\n    for\
    \ index in 0..<string.characters.count {\n        let currentChar = string.characters[index]\n\
    \        let nextChar = string.characters[index + 1]\n        switch currentChar\
    \ {\n        case \".\" where nextChar == \".\":\n            string.deleteCharactersInRange(NSRange(location:\
    \ index, length: 1))\n            string.deleteCharactersInRange(NSRange(location:\
    \ index + 1, length: 1))\n        default:\n            if case .uppercase ==\
    \ string.CharacterIsLetter(currentChar) && string.CharacterIsLetter(nextChar)\
    \ {\n                string.deleteCharactersInRange(NSRange(location: index, length:\
    \ 1))\n                string.insertCharactersInRange(NSRange(location: index,\
    \ length: 1), withString: nextChar.uppercaseString)\n            }\n        }\n\
    \    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsns9c2ze.swift:15:111: error: variable binding in a condition requires\
    \ an initializer\n            if case .uppercase == string.CharacterIsLetter(currentChar)\
    \ && string.CharacterIsLetter(nextChar) {\n                                  \
    \                                                                            ^\n\
    /tmp/tmpsns9c2ze.swift:6:31: error: value of type 'String' has no member 'lowercaseString'\n\
    \    var resultString = string.lowercaseString\n                       ~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpsns9c2ze.swift:7:29: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<string.characters.count {\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsns9c2ze.swift:8:27: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ currentChar = string.characters[index]\n                          ^~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsns9c2ze.swift:8:34:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ currentChar = string.characters[index]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsns9c2ze.swift:9:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let nextChar = string.characters[index\
    \ + 1]\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsns9c2ze.swift:9:31:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ nextChar = string.characters[index + 1]\n              "
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.uppercased().lowercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpm8o3n1oy/tmpm8o3n1oy.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c46543c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c4623ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c4623a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c462397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8o3n1oy                        0x000055a85a4d04a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b0c4672f460 __libc_start_main +
    245

    6    tmpm8o3n1oy                        0x000055a85a4cfff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased() + string.lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpr0ng84_o/tmpr0ng84_o.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad65e2cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad65dfc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad65dfc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad65dfc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0ng84_o                        0x000055814dd894f5 <unavailable> + 5365

    5    libc.so.6                          0x00002ad65e4ba460 __libc_start_main +
    245

    6    tmpr0ng84_o                        0x000055814dd89049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659978959
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let stringRange = string.range(of: \"[a-z]\") {\n\
    \        var uppercase = \"\"\n        var lowercase = \"\"\n        for pos in\
    \ stringRange.lowerBound ..< stringRange.upperBound {\n            let charAtIndex\
    \ = string.character(at: pos)\n            if charAtIndex >= \"A\" && charAtIndex\
    \ <= \"Z\" {\n                uppercase += String(charAtIndex) - String(Character(\"\
    A\"))\n            } else {\n                lowercase += String(charAtIndex)\
    \ - String(Character(\"a\"))\n            }\n        }\n        return string.replacingOccurrences(of:\
    \ \"[a-z]\", with: uppercase.replacingOccurrences(of: \"[A-Z]\", with: lowercase))\n\
    \    } else {\n        return string\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp7fvb0cab.swift:6:33: error: value of type 'String' has no member\
    \ 'range'\n    if let stringRange = string.range(of: \"[a-z]\") {\n          \
    \               ~~~~~~ ^~~~~\n/tmp/tmp7fvb0cab.swift:17:23: error: value of type\
    \ 'String' has no member 'replacingOccurrences'\n        return string.replacingOccurrences(of:\
    \ \"[a-z]\", with: uppercase.replacingOccurrences(of: \"[A-Z]\", with: lowercase))\n\
    \               ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7fvb0cab.swift:17:73: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        return\
    \ string.replacingOccurrences(of: \"[a-z]\", with: uppercase.replacingOccurrences(of:\
    \ \"[A-Z]\", with: lowercase))\n                                             \
    \                 ~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7fvb0cab.swift:10:38:\
    \ error: value of type 'String' has no member 'character'\n            let charAtIndex\
    \ = string.character(at: pos)\n                              ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased() + string.lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpr0ng84_o/tmpr0ng84_o.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad65e2cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad65dfc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad65dfc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad65dfc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0ng84_o                        0x000055814dd894f5 <unavailable> + 5365

    5    libc.so.6                          0x00002ad65e4ba460 __libc_start_main +
    245

    6    tmpr0ng84_o                        0x000055814dd89049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659978959
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n\n    for c in string.characters\
    \ {\n        switch c {\n        case Character(c):\n            result += \"\\\
    (c)\"\n        case Character(Character(c)):\n            result += Character(c)\n\
    \        default:\n            result += c\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpepol8n8r.swift:8:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpepol8n8r.swift:10:24:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \      case Character(c):\n                       ^\n                       extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpepol8n8r.swift:12:24: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        case Character(Character(c)):\n                       ^\n \
    \                      extendedGraphemeClusterLiteral: \n/tmp/tmpepol8n8r.swift:12:34:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \      case Character(Character(c)):\n                                 ^\n   \
    \                              extendedGraphemeClusterLiteral: \n/tmp/tmpepol8n8r.swift:13:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += Character(c)\n                      ^\n/tmp/tmpepol8n8r.swift:13:33:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \          result += Character(c)\n                                ^\n       \
    \                         extendedGraphemeClusterLiteral: \n/tmp/tmpepol8n8r.swift:15:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = string.unicodeScalars\n        .filter({\
    \ $0 != 0x0020 })\n        .reversed()\n    return String(chars)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpt2chf5wl.swift:7:22: error: referencing operator function '!='\
    \ on 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        .filter({ $0 != 0x0020 })\n                     ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    // Add an uppercase character at the beginning of the\
    \ string, if any\n    let startIndex = 0\n    if string.length > 0 && !(string[0].isUppercase())\
    \ {\n        string.insert(Character(uppercaseFirstLetter), at: startIndex)\n\
    \        startIndex += 1\n    }\n\n    // Add an uppercase character at the end\
    \ of the string, if any\n    let endIndex = string.count\n    if endIndex != 0\
    \ && (string[endIndex-1].isUppercase()) {\n        let lastCharIndex = endIndex\
    \ - 1\n        string.insert(Character(uppercaseFirstLetter), at: lastCharIndex)\n\
    \        endIndex -= 1\n    }\n\n    // Flip each char in the string, one by one\n\
    \    var stringBuilder = StringBuilder(string.count - startIndex + endIndex)\n\
    \    for i in stride(from: startIndex, to: endIndex, by: -1) {\n        stringBuilder.insert(Character(lowercaseLetter),\
    \ at: i)\n    }\n    return stringBuilder.toString()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpwj642utf.swift:8:15: error: value of type 'String' has no member\
    \ 'length'\n    if string.length > 0 && !(string[0].isUppercase()) {\n       ~~~~~~\
    \ ^~~~~~\n/tmp/tmpwj642utf.swift:8:38: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Range<String.Index>'\n    if string.length > 0 &&\
    \ !(string[0].isUppercase()) {\n                                     ^\n/tmp/tmpwj642utf.swift:8:41:\
    \ error: value of type 'Substring' has no member 'isUppercase'\n    if string.length\
    \ > 0 && !(string[0].isUppercase()) {\n                              ~~~~~~~~~\
    \ ^~~~~~~~~~~\n/tmp/tmpwj642utf.swift:9:33: error: cannot find 'uppercaseFirstLetter'\
    \ in scope\n        string.insert(Character(uppercaseFirstLetter), at: startIndex)\n\
    \                                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwj642utf.swift:9:60:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \        string.insert(Character(uppercaseFirstLetter), at: startIndex)\n    \
    \                                                       ^\n/tmp/tmpwj642utf.swift:10:20:\
    \ error: left side of mutating operator isn't mutable: 'startIndex' is a 'let'\
    \ constant\n        startIndex += 1\n        ~~~~~~~~~~ ^\n/tmp/tmpwj642utf.swift:7:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let startIndex = 0\n   \
    \ ^~~\n    var\n/tmp/tmpwj642utf.swift:15:41: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Range<String.Index>'\n    if endIndex != 0\
    \ && (string[endIndex-1].isUppercase()) {\n                                  \
    \      ^\n/tmp/tmpwj642utf.swift:15:45: error: value of type 'Substring' has no\
    \ member 'isUppercase'\n    if endIndex != 0 && (string[endIndex-1].isUppercase())\
    \ {\n                         ~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpwj642utf.swift:17:33:\
    \ error: cannot find 'uppercaseFirstLetter' in scope\n        string.insert(Character(uppercaseFirstLetter),\
    \ at: lastCharIndex)\n                                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwj642utf.swift:17:60:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let newString = string.characters\n        .map { char\
    \ in String(char).uppercased() }\n        .map { char in String(char).lowercased()\
    \ }\n        .joined()\n\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpufm6ibxt.swift:6:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let newString = string.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\treturn string.withCString({ cstring in\n\t\tlet length\
    \ = CFStringGetLength(cstring)\n\t\tvar buffer = UnsafeMutablePointer<UniChar>.allocate(capacity:\
    \ length)\n\t\tdefer { buffer.deallocate() }\n\t\tCFStringGetCharacters(cstring,\
    \ CFRangeMake(0, length), buffer)\n\t\tlet (result, count) = (buffer, length)\n\
    \t\tfor i in 0..<count {\n\t\t\tif result[i] == 0x20 {\n\t\t\t\tresult[i] = 0x20\n\
    \t\t\t\tresult[i+1] = 65\n\t\t\t\tresult[i+2] = 0x20\n\t\t\t\tresult[i+3] = 0x20\n\
    \t\t\t\tcount -= 4\n\t\t\t}\n\t\t}\n\t\treturn UnsafePointer(result)\n\t})._bridgeToObjectiveC()._bridgeToSwift()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnt4us590.swift:7:16: error: cannot find 'CFStringGetLength' in\
    \ scope\n                let length = CFStringGetLength(cstring)\n           \
    \                  ^~~~~~~~~~~~~~~~~\n/tmp/tmpnt4us590.swift:8:37: error: cannot\
    \ find type 'UniChar' in scope\n                var buffer = UnsafeMutablePointer<UniChar>.allocate(capacity:\
    \ length)\n                                                  ^~~~~~~\n/tmp/tmpnt4us590.swift:10:3:\
    \ error: cannot find 'CFStringGetCharacters' in scope\n                CFStringGetCharacters(cstring,\
    \ CFRangeMake(0, length), buffer)\n                ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnt4us590.swift:10:34:\
    \ error: cannot find 'CFRangeMake' in scope\n                CFStringGetCharacters(cstring,\
    \ CFRangeMake(0, length), buffer)\n                                          \
    \     ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c.value {\n        case 0x0041: // A\n            result +=\
    \ c.isUpper()\n        case 0x004C: // E\n            result += c.isUpper() ?\
    \ c.lowerCase() : c.uppercase()\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpz3tchmrx.swift:10:25: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUpper'\n            result += c.isUpper()\n                   \
    \   ~ ^~~~~~~\n/tmp/tmpz3tchmrx.swift:12:25: error: value of type 'Unicode.Scalar'\
    \ has no member 'isUpper'\n            result += c.isUpper() ? c.lowerCase() :\
    \ c.uppercase()\n                      ~ ^~~~~~~\n/tmp/tmpz3tchmrx.swift:12:39:\
    \ error: value of type 'Unicode.Scalar' has no member 'lowerCase'\n          \
    \  result += c.isUpper() ? c.lowerCase() : c.uppercase()\n                   \
    \                 ~ ^~~~~~~~~\n/tmp/tmpz3tchmrx.swift:12:55: error: value of type\
    \ 'Unicode.Scalar' has no member 'uppercase'\n            result += c.isUpper()\
    \ ? c.lowerCase() : c.uppercase()\n                                          \
    \          ~ ^~~~~~~~~\n/tmp/tmpz3tchmrx.swift:14:20: error: operator function\
    \ '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n            result\
    \ += c\n                   ^\nSwift.RangeReplaceableCollection:4:35: note: where\
    \ 'Other' = 'Unicode.Scalar'\n    @inlinable public static func += <Other>(lhs:\
    \ inout Self, rhs: Other) where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lower = string.lowercased()\n    let upper = string.uppercased()\n\
    \n    return upper + lower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp4ulaxbk3/tmp4ulaxbk3.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43bf3b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43bf0a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43bf0a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43bf0a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ulaxbk3                        0x0000557fc796c4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b43bf59c460 __libc_start_main +
    245

    6    tmp4ulaxbk3                        0x0000557fc796c049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case \"a\":\n            result += \"A\"\n        case\
    \ \"b\":\n            result += \"B\"\n        case \"c\":\n            result\
    \ += \"C\"\n        case \"d\":\n            result += \"D\"\n        case \"\
    e\":\n            result += \"E\"\n        case \"f\":\n            result +=\
    \ \"F\"\n        case \"g\":\n            result += \"G\"\n        case \"h\"\
    :\n            result += \"H\"\n        case \"i\":\n            result += \"\
    I\"\n        case \"j\":\n            result += \"J\"\n        case \"k\":\n \
    \           result += \"K\"\n        case \"l\":\n            result += \"L\"\n\
    \        case \"m\":\n            result += \"M\"\n        case \"n\":\n     \
    \       result += \"N\"\n        case \"o\":\n            result += \"O\"\n  \
    \      case \"p\":\n            result += \"P\"\n        case \"q\":\n       \
    \     result += \"Q\"\n        case \"r\":\n            result += \"R\"\n    \
    \    case \"s\":\n            result += \"S\"\n        case \"t\":\n         \
    \   result += \"T\"\n        case \"u\":\n            result += \"U\"\n      \
    \  case \"v\":\n            result += \"V\"\n        case \"w\":\n           \
    \ result += \"W\"\n        case \"x\":\n            result += \"X\"\n        case\
    \ \"y\":\n            result += \"Y\"\n        case \"z\":\n            result\
    \ += \"Z\"\n        default:\n            result += char\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxcqam8pf.swift:62:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978958
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = string\n\n    for index in 0..<output.characters.count\
    \ {\n        let character = output[index].lowercaseString\n\n        if index\
    \ > 0 && character == output[index-1].uppercaseString {\n            output[index]\
    \ = output[index-1].lowercaseString\n        }\n\n        if index < output.characters.count\
    \ - 1 && character == output[index+1].lowercaseString {\n            output[index]\
    \ = output[index+1].uppercaseString\n        }\n    }\n\n    return output\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpmfkheb4w.swift:8:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<output.characters.count {\n      \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmfkheb4w.swift:9:39: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        let character = output[index].lowercaseString\n \
    \                       ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpmfkheb4w.swift:11:54:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n        if\
    \ index > 0 && character == output[index-1].uppercaseString {\n              \
    \                       ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpmfkheb4w.swift:12:19:\
    \ error: cannot assign through subscript: subscript is get-only\n            output[index]\
    \ = output[index-1].lowercaseString\n            ~~~~~~^~~~~~~\n/tmp/tmpmfkheb4w.swift:12:45:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   output[index] = output[index-1].lowercaseString\n                        \
    \    ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpmfkheb4w.swift:15:80: error: value\
    \ of type 'Character' has no member 'lowercaseString'\n        if index < output.characters.count\
    \ - 1 && character == output[index+1].lowercaseString {\n                    \
    \                                           ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpmfkheb4w.swift:16:19: error: cannot assign through subscript: subscript\
    \ is get-only\n            output[index] = output[index+1].uppercaseString\n \
    \           ~~~~~~^~~~~~~\n/tmp/tmpmfkheb4w.swift:16:45: error: value of type\
    \ 'Character' has no member 'uppercaseString'\n            output[index] = output[index+1].uppercaseString\n\
    \                            ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let mut output = String::new();\n    for (index, c)\
    \ in string.chars().enumerate() {\n        if c.isUpper() {\n            output.append(c.to_ascii_lowercase());\n\
    \        } else if c.isLower() {\n            output.append(c.to_ascii_uppercase());\n\
    \        } else {\n            output.append(c);\n        }\n    }\n    return\
    \ output;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6joe6h1g.swift:6:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut output =\
    \ String::new();\n            ^\n/tmp/tmp6joe6h1g.swift:6:13: note: join the identifiers\
    \ together\n    let mut output = String::new();\n        ~~~~^~~~~~\n        mutoutput\n\
    /tmp/tmp6joe6h1g.swift:6:13: note: join the identifiers together with camel-case\n\
    \    let mut output = String::new();\n        ~~~~^~~~~~\n        mutOutput\n\
    /tmp/tmp6joe6h1g.swift:6:28: error: consecutive statements on a line must be separated\
    \ by ';'\n    let mut output = String::new();\n                           ^\n\
    \                           ;\n/tmp/tmp6joe6h1g.swift:6:28: error: expected expression\n\
    \    let mut output = String::new();\n                           ^\n/tmp/tmp6joe6h1g.swift:6:22:\
    \ error: expected member name or constructor call after type name\n    let mut\
    \ output = String::new();\n                     ^\n/tmp/tmp6joe6h1g.swift:6:22:\
    \ note: add arguments after the type to construct a value of the type\n    let\
    \ mut output = String::new();\n                     ^\n                      \
    \     ()\n/tmp/tmp6joe6h1g.swift:6:22: note: use '.self' to reference the type\
    \ object\n    let mut output = String::new();\n                     ^\n      \
    \                     .self\n/tmp/tmp6joe6h1g.swift:7:30: error: value of type\
    \ 'String' has no member 'chars'\n    for (index, c) in string.chars().enumerate()\
    \ {\n                      ~~~~~~ ^~~~~\n/tmp/tmp6joe6h1g.swift:16:12: error:\
    \ cannot find 'output' in scope\n    return output;\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string.characters\
    \ {\n        let upperCaseIndex = char.index(of: uppercase)\n        let lowerCaseIndex\
    \ = char.index(of: lowercase)\n        if upperCaseIndex != nil && lowerCaseIndex\
    \ == nil {\n            let result = char.index(of: uppercase)!\n            char[..<result]\
    \ = char[upperCaseIndex..<char.index(of: uppercase)!]\n            char[upperCaseIndex..<upperCaseIndex!]\
    \ = char[lowerCaseIndex!..<char.index(of: lowercase)!]\n            char[lowerCaseIndex!..<char.endIndex]\
    \ = char[char.index(of: lowercase)!..<upperCaseIndex!]\n        }\n        result\
    \ += String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxsfp69ep.swift:7:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpxsfp69ep.swift:8:45:\
    \ error: cannot find 'uppercase' in scope\n        let upperCaseIndex = char.index(of:\
    \ uppercase)\n                                            ^~~~~~~~~\n/tmp/tmpxsfp69ep.swift:8:35:\
    \ error: value of type 'Character' has no member 'index'\n        let upperCaseIndex\
    \ = char.index(of: uppercase)\n                             ~~~~ ^~~~~\n/tmp/tmpxsfp69ep.swift:9:45:\
    \ error: cannot find 'lowercase' in scope\n        let lowerCaseIndex = char.index(of:\
    \ lowercase)\n                                            ^~~~~~~~~\n/tmp/tmpxsfp69ep.swift:9:35:\
    \ error: value of type 'Character' has no member 'index'\n        let lowerCaseIndex\
    \ = char.index(of: lowercase)\n                             ~~~~ ^~~~~\n/tmp/tmpxsfp69ep.swift:11:41:\
    \ error: cannot find 'uppercase' in scope\n            let result = char.index(of:\
    \ uppercase)!\n                                        ^~~~~~~~~\n/tmp/tmpxsfp69ep.swift:11:31:\
    \ error: value of type 'Character' has no member 'index'\n            let result\
    \ = char.index(of: uppercase)!\n                         ~~~~ ^~~~~\n/tmp/tmpxsfp69ep.swift:12:68:\
    \ error: cannot find 'uppercase' in scope\n            char[..<result] = char[upperCaseIndex..<char.index(of:\
    \ uppercase)!]\n                                                             \
    \      ^~~~~~~~~\n/tmp/tmpxsfp69ep.swift:12:17: error: value of type 'Character'\
    \ has no subscripts\n            char[..<result] = char[upperCaseIndex..<char.index(of:\
    \ uppercase)!]\n            ~~~~^\n/tmp/tmpxsfp69ep.swift:12:58: error: value\
    \ of type 'Character' has no member 'index'\n            char[..<result] = char[upperCaseIndex..<char.index(of:\
    \ uppercase)!]\n                                                    ~~~~ ^~~~~\n\
    /tmp/tmpxsfp69ep.swift:12:35: error: value of type 'Character' ha"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map {\n        UnicodeScalar($0.value).uppercased()\n\
    \    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp4i_4n1t5.swift:7:33: error: value of type 'UnicodeScalar?' (aka\
    \ 'Optional<Unicode.Scalar>') has no member 'uppercased'\n        UnicodeScalar($0.value).uppercased()\n\
    \        ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString().capitalized()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsbb30ao1.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString().capitalized()\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = Array(string)\n    var upperCaseChars:\
    \ [Character] = []\n    var lowerCaseChars: [Character] = []\n\n    if chars.count\
    \ > 0 {\n        for char in chars {\n            if char.isUpper() {\n      \
    \          upperCaseChars.append(char.uppercased())\n            } else {\n  \
    \              lowerCaseChars.append(char.lowercased())\n            }\n     \
    \   }\n        return String(upperCaseChars) + String(lowerCaseChars)\n    }\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqgtxtrpq.swift:12:21: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isUpper'\n            if char.isUpper() {\n    \
    \           ~~~~ ^~~~~~~\n/tmp/tmpqgtxtrpq.swift:13:32: error: no exact matches\
    \ in call to instance method 'append'\n                upperCaseChars.append(char.uppercased())\n\
    \                               ^\nSwift.Array:7:37: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating\
    \ func append<S>(contentsOf newElements: __owned S) where Element == S.Element,\
    \ S : Sequence\n                                    ^\nSwift.RangeReplaceableCollection:5:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where S : Sequence, Self.Element == S.Element\n                         \
    \           ^\n/tmp/tmpqgtxtrpq.swift:15:32: error: no exact matches in call to\
    \ instance method 'append'\n                lowerCaseChars.append(char.lowercased())\n\
    \                               ^\nSwift.Array:7:37: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating\
    \ func append<S>(contentsOf newElements: __owned S) where Element == S.Element,\
    \ S : Sequence\n                                    ^\nSwift.RangeReplaceableCollection:5:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where S : Sequence, Self.Element == S.Element\n                         \
    \           ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map({$0.isUppercase() ? $0.lowercased()\
    \ : $0.uppercased()})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpe165cnv0.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map({$0.isUppercase()\
    \ ? $0.lowercased() : $0.uppercased()})\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe165cnv0.swift:6:27: error: cannot call value of non-function type 'Bool'\n\
    \    return string.map({$0.isUppercase() ? $0.lowercased() : $0.uppercased()})\n\
    \                          ^          ~~\n                                   \
    \  \n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.stringByReplacingOccurrencesOfString(\"\
    .\", withString: \"_\", options: .CaseInsensitiveSearch, range: nil)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpp5ztg3bs.swift:6:19: error: value of type 'String' has no member\
    \ 'stringByReplacingOccurrencesOfString'\n    return string.stringByReplacingOccurrencesOfString(\"\
    .\", withString: \"_\", options: .CaseInsensitiveSearch, range: nil)\n       \
    \    ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp5ztg3bs.swift:6:88:\
    \ error: cannot infer contextual base in reference to member 'CaseInsensitiveSearch'\n\
    \    return string.stringByReplacingOccurrencesOfString(\".\", withString: \"\
    _\", options: .CaseInsensitiveSearch, range: nil)\n                          \
    \                                                            ~^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp5ztg3bs.swift:6:118: error: 'nil' requires a contextual type\n    return\
    \ string.stringByReplacingOccurrencesOfString(\".\", withString: \"_\", options:\
    \ .CaseInsensitiveSearch, range: nil)\n                                      \
    \                                                                            \
    \   ^\n"
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n\n    for index in string.startIndex..<string.endIndex\
    \ {\n        if let charA = string.unicodeScalars.firstIndex(of: CharacterSet.lowercaseLetters.first!)\
    \ {\n            let charB = string.unicodeScalars.firstIndex(of: CharacterSet.uppercaseLetters.first!)\n\
    \n            if charB == -1 { break }\n\n            let charA = string.unicodeScalars.firstIndex(of:\
    \ CharacterSet.lowercaseLetters.first!)\n            let charB = string.unicodeScalars.firstIndex(of:\
    \ CharacterSet.uppercaseLetters.first!)\n\n            result.append(string.unicodeScalars[charA!]!)\n\
    \            result.append(string.unicodeScalars[charB!]!)\n            string.unicodeScalars[charA!]\
    \ = string.unicodeScalars[charB!]\n            string.unicodeScalars[charB!] =\
    \ string.unicodeScalars[charA!]\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp03ab831c.swift:8:35: error: protocol 'Sequence' requires that 'String.Index'\
    \ conform to 'Strideable'\n    for index in string.startIndex..<string.endIndex\
    \ {\n                                  ^\nSwift.Range:1:11: note: requirement\
    \ from conditional conformance of 'Range<String.Index>' to 'Sequence'\nextension\
    \ Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger {\n\
    \          ^\n/tmp/tmp03ab831c.swift:8:35: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for index in string.startIndex..<string.endIndex {\n                    \
    \              ^\nSwift.Range:1:11: note: requirement from conditional conformance\
    \ of 'Range<String.Index>' to 'Collection'\nextension Range : Collection, BidirectionalCollection,\
    \ RandomAccessCollection where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n<unknown>:0: error: referencing instance method 'next()' on\
    \ 'Range' requires that 'String.Index' conform to 'Strideable'\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Collection'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp03ab831c.swift:9:61:\
    \ error: cannot find 'CharacterSet' in scope\n        if let charA = string.unicodeScalars.firstIndex(of:\
    \ CharacterSet.lowercaseLetters.first!) {\n                                  \
    \                          ^~~~~~~~~~~~\n/tmp/tmp03ab831c.swift:10:62: error:\
    \ cannot find 'CharacterSet' in scope\n            let charB = string.unicodeScalars.firstIndex(of:\
    \ CharacterSet.uppercaseLetters.first!)\n                                    \
    \                         ^~~~~~~~~~~~\n/tmp/tmp03ab831c.swift:14:62: error: cannot\
    \ find 'CharacterSet' in scope\n            let charA = string.unicodeScalars.firstIndex(of:\
    \ CharacterSet.lowercaseLetters.first!)\n                                    \
    \                         ^~~~~~~~~~~~\n/tmp/tmp03ab831c.swift:15:62: error: cannot\
    \ find"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = string.unicodeScalars.map{ $0.value }\n\
    \n    chars.forEach{\n        if case let .lowercaseLetter(_) = it {\n       \
    \     switch chars.index(of: it) {\n                case chars.startIndex:\n \
    \                   chars.remove(at: chars.index(of: it))\n                case\
    \ chars.index(of: Character.uppercaseLetter):\n                    chars.remove(at:\
    \ chars.index(of: Character.lowercaseLetter))\n                default:\n    \
    \                chars.remove(at: chars.index(of: Character.uppercaseLetter))\n\
    \                    chars.remove(at: chars.index(of: it))\n            }\n  \
    \      } else {\n            switch chars.index(of: it) {\n                case\
    \ chars.startIndex:\n                    chars.remove(at: chars.index(of: it))\n\
    \                case chars.index(of: Character.uppercaseLetter):\n          \
    \          chars.remove(at: chars.index(of: Character.lowercaseLetter))\n    \
    \            default:\n                    chars.remove(at: chars.index(of: Character.uppercaseLetter))\n\
    \                    chars.remove(at: chars.index(of: it))\n            }\n  \
    \      }\n    }\n\n    return String.unicodeScalars.map{ String($0) }.joinWithSeparator(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\
    \")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpj7hye7xu.swift:9:43: error: cannot find 'it' in scope\n       \
    \ if case let .lowercaseLetter(_) = it {\n                                   \
    \       ^~\n/tmp/tmpj7hye7xu.swift:10:36: error: cannot find 'it' in scope\n \
    \           switch chars.index(of: it) {\n                                   ^~\n\
    /tmp/tmpj7hye7xu.swift:12:54: error: cannot find 'it' in scope\n             \
    \       chars.remove(at: chars.index(of: it))\n                              \
    \                       ^~\n/tmp/tmpj7hye7xu.swift:17:54: error: cannot find 'it'\
    \ in scope\n                    chars.remove(at: chars.index(of: it))\n      \
    \                                               ^~\n/tmp/tmpj7hye7xu.swift:20:36:\
    \ error: cannot find 'it' in scope\n            switch chars.index(of: it) {\n\
    \                                   ^~\n/tmp/tmpj7hye7xu.swift:22:54: error: cannot\
    \ find 'it' in scope\n                    chars.remove(at: chars.index(of: it))\n\
    \                                                     ^~\n/tmp/tmpj7hye7xu.swift:27:54:\
    \ error: cannot find 'it' in scope\n                    chars.remove(at: chars.index(of:\
    \ it))\n                                                     ^~\n/tmp/tmpj7hye7xu.swift:32:52:\
    \ error: value of type '[String]' has no member 'joinWithSeparator'\n    return\
    \ String.unicodeScalars.map{ String($0) }.joinWithSeparator(\"\")\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string\n    .characters()\n    .map { Character(UnicodeScalar($0))\
    \ }\n    .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n\
    \    .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n \
    \   .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n  \
    \  .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n   \
    \ .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n    .map\
    \ { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n    .map {\
    \ Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n    .map { Character(UnicodeScalar($0).value\
    \ + UnicodeScalar($0).value) }\n    .map { Character(UnicodeScalar($0).value +\
    \ UnicodeScalar($0).value) }\n    .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value)\
    \ }\n    .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n\
    \    .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n \
    \   .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n  \
    \  .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n   \
    \ .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n    .map\
    \ { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n    .map {\
    \ Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n    .map { Character(UnicodeScalar($0).value\
    \ + UnicodeScalar($0).value) }\n    .map { Character(UnicodeScalar($0).value +\
    \ UnicodeScalar($0).value) }\n    .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value)\
    \ }\n    .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n\
    \    .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n \
    \   .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n  \
    \  .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n   \
    \ .map { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n    .map\
    \ { Character(UnicodeScalar($0).value + UnicodeScalar($0).value) }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqru8ulz_.swift:6:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return string\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659979207
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased()\n        .unicodeScalars\n\
    \        .filter{ $0 >= 0x41 && $0 <= 0x5a }\n        .map { String(UnicodeScalar($0\
    \ as UnicodeScalar).uppercased) }\n        .joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5drx16rj.swift:8:21: error: referencing operator function '>='\
    \ on 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        .filter{ $0 >= 0x41 && $0 <= 0x5a }\n                    ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n         \
    \ ^\n/tmp/tmp5drx16rj.swift:8:35: error: referencing operator function '<=' on\
    \ 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        .filter{ $0 >= 0x41 && $0 <= 0x5a }\n                               \
    \   ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'Unicode.Scalar'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp5drx16rj.swift:9:58: error: value of type\
    \ 'UnicodeScalar' (aka 'Unicode.Scalar') has no member 'uppercased'\n        .map\
    \ { String(UnicodeScalar($0 as UnicodeScalar).uppercased) }\n                \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let original = string.lowercased()\n    var result\
    \ = [Character]()\n    for i in 0 ..< string.characters.count {\n        let j\
    \ = string.index(original, startIndex: i, offsetBy: 1)\n        result.append(original[j...])\n\
    \    }\n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp7nc_ad6l.swift:8:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0 ..< string.characters.count {\n        \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7nc_ad6l.swift:9:24: error: no exact matches in call to instance\
    \ method 'index'\n        let j = string.index(original, startIndex: i, offsetBy:\
    \ 1)\n                       ^\n/tmp/tmp7nc_ad6l.swift:9:24: note: candidate has\
    \ partially matching parameter list (String.Index, offsetBy: Int)\n        let\
    \ j = string.index(original, startIndex: i, offsetBy: 1)\n                   \
    \    ^\n/tmp/tmp7nc_ad6l.swift:9:24: note: candidate has partially matching parameter\
    \ list (String.Index, offsetBy: Int)\n        let j = string.index(original, startIndex:\
    \ i, offsetBy: 1)\n                       ^\n/tmp/tmp7nc_ad6l.swift:9:24: note:\
    \ candidate has partially matching parameter list (String.Index, offsetBy: Int)\n\
    \        let j = string.index(original, startIndex: i, offsetBy: 1)\n        \
    \               ^\n/tmp/tmp7nc_ad6l.swift:10:33: error: cannot convert value of\
    \ type '()' to expected argument type 'String.Index'\n        result.append(original[j...])\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var stringCopy = string.lowercased()\n    let characterCount\
    \ = stringCopy.count\n    for index in 0..<characterCount {\n        let currentCharacter\
    \ = stringCopy[index]\n        if currentCharacter == currentCharacter.lowercased()\
    \ {\n            stringCopy[index] = currentCharacter.uppercased()\n        }\
    \ else {\n            stringCopy[index] = currentCharacter.lowercased()\n    \
    \    }\n    }\n    return stringCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpeo5rygiz.swift:9:32: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let currentCharacter\
    \ = stringCopy[index]\n                               ^~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeo5rygiz.swift:10:29:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        if currentCharacter == currentCharacter.lowercased() {\n\
    \           ~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeo5rygiz.swift:10:29:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if currentCharacter == currentCharacter.lowercased()\
    \ {\n                            ^\n/tmp/tmpeo5rygiz.swift:11:23: error: cannot\
    \ assign through subscript: subscript is get-only\n            stringCopy[index]\
    \ = currentCharacter.uppercased()\n            ~~~~~~~~~~^~~~~~~\n/tmp/tmpeo5rygiz.swift:11:50:\
    \ error: cannot assign value of type 'String' to subscript of type 'Character'\n\
    \            stringCopy[index] = currentCharacter.uppercased()\n             \
    \                   ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpeo5rygiz.swift:13:23:\
    \ error: cannot assign through subscript: subscript is get-only\n            stringCopy[index]\
    \ = currentCharacter.lowercased()\n            ~~~~~~~~~~^~~~~~~\n/tmp/tmpeo5rygiz.swift:13:50:\
    \ error: cannot assign value of type 'String' to subscript of type 'Character'\n\
    \            stringCopy[index] = currentCharacter.lowercased()\n             \
    \                   ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let range = string.range(of: \"[a-z]\") {\n    \
    \    let upper = string.index(range.upperBound, offsetBy: 1)\n        let lower\
    \ = string.index(range.lowerBound, offsetBy: 1)\n\n        return string[..<upper]\
    \ + string[lower..<string.endIndex] + string[upper..<string.endIndex]\n    } else\
    \ {\n        return string\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o2hkhqo.swift:6:27: error: value of type 'String' has no member\
    \ 'range'\n    if let range = string.range(of: \"[a-z]\") {\n                \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = \"\"\n    for character in string.characters\
    \ {\n        switch character {\n        case 'a':\n            output += \"A\"\
    \n        case 'b':\n            output += \"B\"\n        case 'c':\n        \
    \    output += \"C\"\n        case 'd':\n            output += \"D\"\n       \
    \ case 'e':\n            output += \"E\"\n        case 'f':\n            output\
    \ += \"F\"\n        case 'g':\n            output += \"G\"\n        case 'h':\n\
    \            output += \"H\"\n        case 'i':\n            output += \"I\"\n\
    \        case 'j':\n            output += \"J\"\n        case 'k':\n         \
    \   output += \"K\"\n        case 'l':\n            output += \"L\"\n        case\
    \ 'm':\n            output += \"M\"\n        case 'n':\n            output +=\
    \ \"N\"\n        case 'o':\n            output += \"O\"\n        case 'p':\n \
    \           output += \"P\"\n        case 'q':\n            output += \"Q\"\n\
    \        case 'r':\n            output += \"R\"\n        case 's':\n         \
    \   output += \"S\"\n        case 't':\n            output += \"T\"\n        case\
    \ 'u':\n            output += \"U\"\n        case 'v':\n            output +=\
    \ \"V\"\n        case 'w':\n            output += \"W\"\n        case 'x':\n \
    \           output += \"X\"\n        case 'y':\n            output += \"Y\"\n\
    \        case 'z':\n            output += \"Z\"\n        default:\n          \
    \  output += character\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsks0hde3.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpsks0hde3.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpsks0hde3.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpsks0hde3.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpsks0hde3.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpsks0hde3.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpsks0hde3.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpsks0hde3.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpsks0hde3.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpsks0hde3.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpsks0hde3.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpsks0hde3.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpsks0hde3.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpsks0hde3.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpsks0hde3.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpsks0hde3.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string.utf8 {\n\
    \        if char >= \"a\" && char <= \"z\" {\n            result = result + char.unicodeScalars.lowerString.unicodeScalars.upperString.value\n\
    \        } else {\n            result = result + char.unicodeScalars.upperString.unicodeScalars.lowerString.value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgoi6wesw.swift:8:20: error: cannot convert value of type 'String'\
    \ to expected argument type 'UInt8'\n        if char >= \"a\" && char <= \"z\"\
    \ {\n                   ^\n/tmp/tmpgoi6wesw.swift:8:35: error: cannot convert\
    \ value of type 'String' to expected argument type 'UInt8'\n        if char >=\
    \ \"a\" && char <= \"z\" {\n                                  ^\n/tmp/tmpgoi6wesw.swift:9:36:\
    \ error: value of type 'String.UTF8View.Element' (aka 'UInt8') has no member 'unicodeScalars'\n\
    \            result = result + char.unicodeScalars.lowerString.unicodeScalars.upperString.value\n\
    \                              ~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpgoi6wesw.swift:11:36:\
    \ error: value of type 'String.UTF8View.Element' (aka 'UInt8') has no member 'unicodeScalars'\n\
    \            result = result + char.unicodeScalars.upperString.unicodeScalars.lowerString.value\n\
    \                              ~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.localizedLowercase.uppercased()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcvuzil33.swift:6:19: error: value of type 'String' has no member\
    \ 'localizedLowercase'\n    return string.localizedLowercase.uppercased()\n  \
    \         ~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    string.uppercased()\n        .lowercased()\n      \
    \  .capitalised()\n        .lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu35t9ldj.swift:8:10: error: value of type 'String' has no member\
    \ 'capitalised'\n        .capitalised()\n         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercase_to_uppercase = string.unicodeScalars.map{\
    \ $0.value > 'a' && $0.value <= 'z' ? $0.value + 'A' : $0.value }\n    let uppercase_to_lowercase\
    \ = string.unicodeScalars.map{ $0.value == 'A' || $0.value == 'a' ? $0.value :\
    \ unichar($0.value) - 'a' }\n\n    return String(unichars(lowercase_to_uppercase.concat(uppercase_to_lowercase)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp7garvu_1.swift:6:72: error: single-quoted string literal found,\
    \ use '\"'\n    let lowercase_to_uppercase = string.unicodeScalars.map{ $0.value\
    \ > 'a' && $0.value <= 'z' ? $0.value + 'A' : $0.value }\n                   \
    \                                                    ^~~\n                   \
    \                                                    \"a\"\n/tmp/tmp7garvu_1.swift:6:91:\
    \ error: single-quoted string literal found, use '\"'\n    let lowercase_to_uppercase\
    \ = string.unicodeScalars.map{ $0.value > 'a' && $0.value <= 'z' ? $0.value +\
    \ 'A' : $0.value }\n                                                         \
    \                                 ^~~\n                                      \
    \                                                    \"z\"\n/tmp/tmp7garvu_1.swift:6:108:\
    \ error: single-quoted string literal found, use '\"'\n    let lowercase_to_uppercase\
    \ = string.unicodeScalars.map{ $0.value > 'a' && $0.value <= 'z' ? $0.value +\
    \ 'A' : $0.value }\n                                                         \
    \                                                  ^~~\n                     \
    \                                                                            \
    \          \"A\"\n/tmp/tmp7garvu_1.swift:7:73: error: single-quoted string literal\
    \ found, use '\"'\n    let uppercase_to_lowercase = string.unicodeScalars.map{\
    \ $0.value == 'A' || $0.value == 'a' ? $0.value : unichar($0.value) - 'a' }\n\
    \                                                                        ^~~\n\
    \                                                                        \"A\"\
    \n/tmp/tmp7garvu_1.swift:7:92: error: single-quoted string literal found, use\
    \ '\"'\n    let uppercase_to_lowercase = string.unicodeScalars.map{ $0.value ==\
    \ 'A' || $0.value == 'a' ? $0.value : unichar($0.value) - 'a' }\n            \
    \                                                                            \
    \   ^~~\n                                                                    \
    \                       \"a\"\n/tmp/tmp7garvu_1.swift:7:129: error: single-quoted\
    \ string literal found, use '\"'\n    let uppercase_to_low"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.reduce(string) { (result,\
    \ char) in\n        var upper = char.uppercaseString\n        var lower = char.lowercaseString\n\
    \        if upper == lower {\n            return upper\n        }\n        return\
    \ result + upper + lower\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3b7w10d6.swift:7:26: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'uppercaseString'\n        var upper = char.uppercaseString\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased() + string.lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpr0ng84_o/tmpr0ng84_o.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad65e2cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad65dfc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad65dfc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad65dfc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0ng84_o                        0x000055814dd894f5 <unavailable> + 5365

    5    libc.so.6                          0x00002ad65e4ba460 __libc_start_main +
    245

    6    tmpr0ng84_o                        0x000055814dd89049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659978959
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\tlet mutableString = string.mutableCopy() as! String\n\
    \tmutableString.unicodeScalars.reverse()\n\treturn String(mutableString)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxbrtn0pq.swift:6:29: error: value of type 'String' has no member\
    \ 'mutableCopy'\n        let mutableString = string.mutableCopy() as! String\n\
    \                            ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.stringByReplacingOccurrencesOfString(\"\
    \ \".lowercaseString(), withString: \" \".uppercaseString(), options: .LiteralSearch,\
    \ range: nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp4f367mzg.swift:6:19: error: value of type 'String' has no member\
    \ 'stringByReplacingOccurrencesOfString'\n    return string.stringByReplacingOccurrencesOfString(\"\
    \ \".lowercaseString(), withString: \" \".uppercaseString(), options: .LiteralSearch,\
    \ range: nil)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4f367mzg.swift:6:60:\
    \ error: value of type 'String' has no member 'lowercaseString'\n    return string.stringByReplacingOccurrencesOfString(\"\
    \ \".lowercaseString(), withString: \" \".uppercaseString(), options: .LiteralSearch,\
    \ range: nil)\n                                                       ~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp4f367mzg.swift:6:95: error: value of type 'String' has no member 'uppercaseString'\n\
    \    return string.stringByReplacingOccurrencesOfString(\" \".lowercaseString(),\
    \ withString: \" \".uppercaseString(), options: .LiteralSearch, range: nil)\n\
    \                                                                            \
    \              ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp4f367mzg.swift:6:124: error: cannot\
    \ infer contextual base in reference to member 'LiteralSearch'\n    return string.stringByReplacingOccurrencesOfString(\"\
    \ \".lowercaseString(), withString: \" \".uppercaseString(), options: .LiteralSearch,\
    \ range: nil)\n                                                              \
    \                                                            ~^~~~~~~~~~~~~\n\
    /tmp/tmp4f367mzg.swift:6:146: error: 'nil' requires a contextual type\n    return\
    \ string.stringByReplacingOccurrencesOfString(\" \".lowercaseString(), withString:\
    \ \" \".uppercaseString(), options: .LiteralSearch, range: nil)\n            \
    \                                                                            \
    \                                                         ^\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\treturn string.uppercaseString.lowercaseString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp7f_1ua7r.swift:6:16: error: value of type 'String' has no member\
    \ 'uppercaseString'\n        return string.uppercaseString.lowercaseString\n \
    \              ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = \"\"\n    string.forEach {\n        let\
    \ character = String($0)\n        switch character {\n        case \"A\":\n  \
    \          output += \"a\"\n        case \"B\":\n            output += \"b\"\n\
    \        case \"C\":\n            output += \"c\"\n        case \"D\":\n     \
    \       output += \"d\"\n        case \"E\":\n            output += \"e\"\n  \
    \      case \"F\":\n            output += \"f\"\n        case \"G\":\n       \
    \     output += \"g\"\n        case \"H\":\n            output += \"h\"\n    \
    \    case \"I\":\n            output += \"i\"\n        case \"J\":\n         \
    \   output += \"j\"\n        case \"K\":\n            output += \"k\"\n      \
    \  case \"L\":\n            output += \"l\"\n        case \"M\":\n           \
    \ output += \"m\"\n        case \"N\":\n            output += \"n\"\n        case\
    \ \"O\":\n            output += \"o\"\n        case \"P\":\n            output\
    \ += \"p\"\n        case \"Q\":\n            output += \"q\"\n        case \"\
    R\":\n            output += \"r\"\n        case \"S\":\n            output +=\
    \ \"s\"\n        case \"T\":\n            output += \"t\"\n        case \"U\"\
    :\n            output += \"u\"\n        case \"V\":\n            output += \"\
    v\"\n        case \"W\":\n            output += \"w\"\n        case \"X\":\n \
    \           output += \"x\"\n        case \"Y\":\n            output += \"y\"\n\
    \        case \"Z\":\n            output += \"z\"\n        default:\n        \
    \    output += character\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpx4e1yfx1/tmpx4e1yfx1.swift:83: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc203ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc200e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc200e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc200e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e1yfx1                        0x000055f67dc49575 <unavailable> + 5493

    5    libc.so.6                          0x00002afc205d8460 __libc_start_main +
    245

    6    tmpx4e1yfx1                        0x000055f67dc490c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\treturn lowercase(string).uppercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgjf6mr4h.swift:6:9: error: cannot find 'lowercase' in scope\n \
    \       return lowercase(string).uppercased()\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = string.characters\n    return characters\
    \ + characters.map { Character($0) }.filter({ Character($0).isUppercase })\n \
    \       .map { Character($0).isUppercase ? Character($0).lowercaseString : Character($0).uppercaseString\
    \ }\n        .reduce(\"\", { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpss8otqg9.swift:6:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpss8otqg9.swift:7:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return characters + characters.map { Character($0) }.filter({\
    \ Character($0).isUppercase })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979158
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return NSMutableString(\n        string.uppercaseString.characters.map({\
    \ Character(String($0)) }).joinWithSeparator(\"\"),\n        options: nil,\n \
    \       range: NSMakeRange(0, string.characters.count)\n    )!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_dmj9ylt.swift:6:12: error: cannot find 'NSMutableString' in scope\n\
    \    return NSMutableString(\n           ^~~~~~~~~~~~~~~\n/tmp/tmp_dmj9ylt.swift:9:16:\
    \ error: cannot find 'NSMakeRange' in scope\n        range: NSMakeRange(0, string.characters.count)\n\
    \               ^~~~~~~~~~~\n/tmp/tmp_dmj9ylt.swift:7:16: error: value of type\
    \ 'String' has no member 'uppercaseString'\n        string.uppercaseString.characters.map({\
    \ Character(String($0)) }).joinWithSeparator(\"\"),\n        ~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_dmj9ylt.swift:8:18: error: 'nil' requires a contextual type\n       \
    \ options: nil,\n                 ^\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard !string.isEmpty else { return \"\" }\n    let\
    \ chars = string.unicodeScalars\n    return String(chars.reversed().joined())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcqd2eywn.swift:8:36: error: no exact matches in call to instance\
    \ method 'joined'\n    return String(chars.reversed().joined())\n            \
    \                       ^\nSwift.Sequence:1:11: note: candidate requires that\
    \ 'Unicode.Scalar' conform to 'StringProtocol' (requirement specified as 'Self.Element'\
    \ : 'StringProtocol')\nextension Sequence where Self.Element : StringProtocol\
    \ {\n          ^\nSwift.BidirectionalCollection:1:11: note: candidate requires\
    \ that the types 'Unicode.Scalar' and 'String' be equivalent (requirement specified\
    \ as 'Self.Element' == 'String')\nextension BidirectionalCollection where Self.Element\
    \ == String {\n          ^\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let index = string.range(of: \" \") {\n        return\
    \ String(string[..<index]) + String(string[index...])\n    }\n    return string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpv20nuf_u.swift:6:27: error: value of type 'String' has no member\
    \ 'range'\n    if let index = string.range(of: \" \") {\n                   ~~~~~~\
    \ ^~~~~\n/tmp/tmpv20nuf_u.swift:7:56: error: no exact matches in call to subscript\
    \ \n        return String(string[..<index]) + String(string[index...])\n     \
    \                                                  ^\n/tmp/tmpv20nuf_u.swift:7:56:\
    \ note: found candidate with type '(String.Index) -> Character'\n        return\
    \ String(string[..<index]) + String(string[index...])\n                      \
    \                                 ^\n/tmp/tmpv20nuf_u.swift:7:56: note: found\
    \ candidate with type '(Range<String.Index>) -> Substring'\n        return String(string[..<index])\
    \ + String(string[index...])\n                                               \
    \        ^\n/tmp/tmpv20nuf_u.swift:7:56: note: found candidate with type '(())\
    \ -> String.SubSequence' (aka '(()) -> Substring')\n        return String(string[..<index])\
    \ + String(string[index...])\n                                               \
    \        ^\n/tmp/tmpv20nuf_u.swift:7:56: note: found candidate with type '((UnboundedRange_)\
    \ -> ()) -> String.SubSequence' (aka '((UnboundedRange_) -> ()) -> Substring')\n\
    \        return String(string[..<index]) + String(string[index...])\n        \
    \                                               ^\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map({ $0 == Character(\"a\"\
    ) ? Character(Character.uppercaseString) :\n        Character(Character.lowercaseString)\
    \ }).reduce(\"\", { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpali_g4mu.swift:6:79: error: type 'Character' has no member 'uppercaseString'\n\
    \    return string.characters.map({ $0 == Character(\"a\") ? Character(Character.uppercaseString)\
    \ :\n                                                                    ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpali_g4mu.swift:7:29: error: type 'Character' has no\
    \ member 'lowercaseString'\n        Character(Character.lowercaseString) }).reduce(\"\
    \", { $0 + String($1) })\n                  ~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let index = string.index(of: lowercaseString) {\n\
    \        return string[index...]+string[index...].lowercased\n    }\n    return\
    \ string.lowercased\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpc_ufj_ew.swift:6:37: error: cannot find 'lowercaseString' in scope\n\
    \    if let index = string.index(of: lowercaseString) {\n                    \
    \                ^~~~~~~~~~~~~~~\n/tmp/tmpc_ufj_ew.swift:7:39: error: no exact\
    \ matches in call to subscript \n        return string[index...]+string[index...].lowercased\n\
    \                                      ^\n/tmp/tmpc_ufj_ew.swift:7:39: note: found\
    \ candidate with type '(String.Index) -> Character'\n        return string[index...]+string[index...].lowercased\n\
    \                                      ^\n/tmp/tmpc_ufj_ew.swift:7:39: note: found\
    \ candidate with type '(Range<String.Index>) -> Substring'\n        return string[index...]+string[index...].lowercased\n\
    \                                      ^\n/tmp/tmpc_ufj_ew.swift:7:39: note: found\
    \ candidate with type '(()) -> String.SubSequence' (aka '(()) -> Substring')\n\
    \        return string[index...]+string[index...].lowercased\n               \
    \                       ^\n/tmp/tmpc_ufj_ew.swift:7:39: note: found candidate\
    \ with type '((UnboundedRange_) -> ()) -> String.SubSequence' (aka '((UnboundedRange_)\
    \ -> ()) -> Substring')\n        return string[index...]+string[index...].lowercased\n\
    \                                      ^\n/tmp/tmpc_ufj_ew.swift:7:22: error:\
    \ no exact matches in call to subscript \n        return string[index...]+string[index...].lowercased\n\
    \                     ^\n/tmp/tmpc_ufj_ew.swift:7:22: note: found candidate with\
    \ type '(Range<String.Index>) -> Substring'\n        return string[index...]+string[index...].lowercased\n\
    \                     ^\n/tmp/tmpc_ufj_ew.swift:7:22: note: found candidate with\
    \ type '(()) -> String.SubSequence' (aka '(()) -> Substring')\n        return\
    \ string[index...]+string[index...].lowercased\n                     ^\n/tmp/tmpc_ufj_ew.swift:7:22:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> String.SubSequence'\
    \ (aka '((UnboundedRange_) -> ()) -> Substring')\n        return string[index...]+string[index...].lowercased\n\
    \                     ^\n/tmp/tmpc_ufj_ew.swift:9:19: error: function prod"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    switch string {\n    case string as NSString:\n   \
    \     return string.uppercaseString\n    default:\n        var result = \"\"\n\
    \        for c in string {\n            result += String(c).isUppercase() ? String(c).lowercaseString\
    \ : String(c).uppercaseString\n        }\n        return result\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp1_jpvw_k.swift:7:20: error: cannot find type 'NSString' in scope\n\
    \    case string as NSString:\n                   ^~~~~~~~\n/tmp/tmp1_jpvw_k.swift:8:23:\
    \ error: value of type 'String' has no member 'uppercaseString'\n        return\
    \ string.uppercaseString\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp1_jpvw_k.swift:12:33:\
    \ error: value of type 'String' has no member 'isUppercase'\n            result\
    \ += String(c).isUppercase() ? String(c).lowercaseString : String(c).uppercaseString\n\
    \                      ~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmp1_jpvw_k.swift:12:59: error:\
    \ value of type 'String' has no member 'lowercaseString'\n            result +=\
    \ String(c).isUppercase() ? String(c).lowercaseString : String(c).uppercaseString\n\
    \                                                ~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp1_jpvw_k.swift:12:87:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            result\
    \ += String(c).isUppercase() ? String(c).lowercaseString : String(c).uppercaseString\n\
    \                                                                            ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = string\n    for _ in string.unicodeScalars\
    \ {\n        switch result {\n        case .uppercase:\n            switch result\
    \ {\n            case .lowercase:\n                result = .uppercase\n     \
    \       default:\n                result = .lowercase\n            }\n       \
    \ case .lowercase:\n            switch result {\n            case .uppercase:\n\
    \                result = .lowercase\n            default:\n                result\
    \ = .uppercase\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxeca2irm.swift:9:15: error: reference to member 'uppercase' cannot\
    \ be resolved without a contextual type\n        case .uppercase:\n          \
    \    ^\n/tmp/tmpxeca2irm.swift:16:15: error: reference to member 'lowercase' cannot\
    \ be resolved without a contextual type\n        case .lowercase:\n          \
    \    ^\n/tmp/tmpxeca2irm.swift:11:19: error: reference to member 'lowercase' cannot\
    \ be resolved without a contextual type\n            case .lowercase:\n      \
    \            ^\n/tmp/tmpxeca2irm.swift:12:27: error: type 'String' has no member\
    \ 'uppercase'\n                result = .uppercase\n                         ~^~~~~~~~~\n\
    /tmp/tmpxeca2irm.swift:14:27: error: type 'String' has no member 'lowercase'\n\
    \                result = .lowercase\n                         ~^~~~~~~~~\n/tmp/tmpxeca2irm.swift:18:19:\
    \ error: reference to member 'uppercase' cannot be resolved without a contextual\
    \ type\n            case .uppercase:\n                  ^\n/tmp/tmpxeca2irm.swift:19:27:\
    \ error: type 'String' has no member 'lowercase'\n                result = .lowercase\n\
    \                         ~^~~~~~~~~\n/tmp/tmpxeca2irm.swift:21:27: error: type\
    \ 'String' has no member 'uppercase'\n                result = .uppercase\n  \
    \                       ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    if let letters = string.unicodeScalars.filter({ $0.isLower\
    \ }) {\n        return letters.map({ $0.isUpperCase ? .uppercase : .lowercase}).joined()\n\
    \    }\n\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpm51l4tb2.swift:6:56: error: value of type 'Unicode.Scalar' has\
    \ no member 'isLower'\n    if let letters = string.unicodeScalars.filter({ $0.isLower\
    \ }) {\n                                                    ~~ ^~~~~~~\n/tmp/tmpm51l4tb2.swift:7:48:\
    \ error: cannot infer contextual base in reference to member 'uppercase'\n   \
    \     return letters.map({ $0.isUpperCase ? .uppercase : .lowercase}).joined()\n\
    \                                              ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\treturn string.lowercaseString.withCapitalizedFirstLetter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpznnp0ex5.swift:6:16: error: value of type 'String' has no member\
    \ 'lowercaseString'\n        return string.lowercaseString.withCapitalizedFirstLetter\n\
    \               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map({\n        guard !($0.isASCII()\
    \ && !$0.isWhitespace()) else { return $0 }\n        return Character(Character($0).isUppercase)\
    \ ? Character(Character($0).isLowercase) : Character(Character($0).isUppercase)\n\
    \    }).joinWithSeparator(\"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgd_0q8p_.swift:9:8: error: value of type 'Array<_>' has no member\
    \ 'joinWithSeparator'\n    }).joinWithSeparator(\"\")\n~~~~~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgd_0q8p_.swift:7:20: error: cannot call value of non-function type 'Bool'\n\
    \        guard !($0.isASCII() && !$0.isWhitespace()) else { return $0 }\n    \
    \               ^      ~~\n                          \n/tmp/tmpgd_0q8p_.swift:7:37:\
    \ error: value of type 'Unicode.Scalar' has no member 'isWhitespace'\n       \
    \ guard !($0.isASCII() && !$0.isWhitespace()) else { return $0 }\n           \
    \                      ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.fold(\"\", { c, n in\n        return\
    \ c == n.isUppercase() ? n.toUppercase() : n.toLowercase()\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3zq8rwfl.swift:6:19: error: value of type 'String' has no member\
    \ 'fold'\n    return string.fold(\"\", { c, n in\n           ~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = string.characters\n    var flippedCharacters\
    \ = \"\"\n\n    for character in characters {\n        if case .upper(character)\
    \ == character {\n            flippedCharacters += character\n        } else {\n\
    \            flippedCharacters += character.toUpper()\n        }\n    }\n    return\
    \ String(flippedCharacters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp1m9chld3.swift:10:48: error: variable binding in a condition requires\
    \ an initializer\n        if case .upper(character) == character {\n         \
    \                                      ^\n/tmp/tmp1m9chld3.swift:6:29: error:\
    \ 'characters' is unavailable: Please use String directly\n    let characters\
    \ = string.characters\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1m9chld3.swift:11:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            flippedCharacters\
    \ += character\n                                 ^\n/tmp/tmp1m9chld3.swift:13:44:\
    \ error: value of type 'Character' has no member 'toUpper'\n            flippedCharacters\
    \ += character.toUpper()\n                                 ~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return lowercase(string) + uppercase(string)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplvsm8ahb.swift:6:12: error: cannot find 'lowercase' in scope\n\
    \    return lowercase(string) + uppercase(string)\n           ^~~~~~~~~\n/tmp/tmplvsm8ahb.swift:6:32:\
    \ error: cannot find 'uppercase' in scope\n    return lowercase(string) + uppercase(string)\n\
    \                               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased().capitalized()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpbyrz76og.swift:6:32: error: value of type 'String' has no member\
    \ 'capitalized'\n    return string.lowercased().capitalized()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n\tlet newString = string.lowercaseString\n\tnewString.toUpperInsensitive()\n\
    \treturn newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ahe7ij9.swift:6:25: error: value of type 'String' has no member\
    \ 'lowercaseString'\n        let newString = string.lowercaseString\n        \
    \                ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = string\n    \n    for index in range(0,\
    \ string.count) {\n        switch string.character(at: index) {\n        case\
    \ 'a':\n            string.character(at: index).uppercased()\n        default:\n\
    \            string.character(at: index).lowercased()\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp29jc_kxa.swift:10:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp29jc_kxa.swift:8:18:\
    \ error: cannot find 'range' in scope\n    for index in range(0, string.count)\
    \ {\n                 ^~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.withCString({ ptr in\n        let string\
    \ = String(cString: ptr)\n        var buffer = [UInt8](repeating: 0, count: string.utf16.count)\n\
    \        for (i, ch) in string.unicodeScalars.enumerated() {\n            let\
    \ _ = String(UnicodeScalar(ch.value), radix: 16)\n            let _ = String(UnicodeScalar(ch.value),\
    \ radix: 8)\n            let _ = String(UnicodeScalar(ch.value), radix: 4)\n \
    \           let _ = String(UnicodeScalar(ch.value), radix: 2)\n            let\
    \ _ = String(UnicodeScalar(ch.value), radix: 1)\n            let _ = String(UnicodeScalar(ch.value),\
    \ radix: 0)\n            buffer[i] = 1\n        }\n        let result = String(UnicodeScalar(buffer.reversed()))\n\
    \        return result\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcg6g2aud.swift:10:28: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            let _ = String(UnicodeScalar(ch.value),\
    \ radix: 16)\n                           ^\n/tmp/tmpcg6g2aud.swift:10:28: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            let _ = String(UnicodeScalar(ch.value), radix: 16)\n            \
    \               ^\n                                                   ?? <#default\
    \ value#>\n/tmp/tmpcg6g2aud.swift:10:28: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            let _ = String(UnicodeScalar(ch.value),\
    \ radix: 16)\n                           ^\n                                 \
    \                 !\n/tmp/tmpcg6g2aud.swift:10:21: error: initializer 'init(_:radix:uppercase:)'\
    \ requires that 'UnicodeScalar' (aka 'Unicode.Scalar') conform to 'BinaryInteger'\n\
    \            let _ = String(UnicodeScalar(ch.value), radix: 16)\n            \
    \        ^\nSwift.String:2:12: note: where 'T' = 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where\
    \ T : BinaryInteger\n           ^\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = String()\n\n    for character in string\
    \ {\n        if character.isUppercase {\n            newString.append(Character(character.unicodeScalars.upper()))\n\
    \        } else {\n            newString.append(Character(character.unicodeScalars.lower()))\n\
    \        }\n    }\n\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0ubdyh9r.swift:10:65: error: value of type 'Character.UnicodeScalarView'\
    \ (aka 'String.UnicodeScalarView') has no member 'upper'\n            newString.append(Character(character.unicodeScalars.upper()))\n\
    \                                       ~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~\n/tmp/tmp0ubdyh9r.swift:12:65:\
    \ error: value of type 'Character.UnicodeScalarView' (aka 'String.UnicodeScalarView')\
    \ has no member 'lower'\n            newString.append(Character(character.unicodeScalars.lower()))\n\
    \                                       ~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string.unicodeScalars\
    \ {\n        let lowercase = (char as! UnicodeScalar).value\n        let uppercase\
    \ = string.unicodeScalars.filter { $0.value == lowercase }.first!.value\n    \
    \    result += String(UnicodeScalar(uppercase))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_q1pls1o.swift:8:31: warning: forced cast of 'UnicodeScalar' (aka\
    \ 'Unicode.Scalar') to same type has no effect\n        let lowercase = (char\
    \ as! UnicodeScalar).value\n                              ^~~~~~~~~~~~~~~~~\n\
    \                              \n/tmp/tmp_q1pls1o.swift:10:19: error: no exact\
    \ matches in call to initializer \n        result += String(UnicodeScalar(uppercase))\n\
    \                  ^\nSwift.String:3:23: note: found candidate with type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>')\n    @inlinable public init(_ scalar: Unicode.Scalar)\n\
    \                      ^\nSwift.String:4:23: note: found candidate with type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>')\n    @inlinable public init<T>(_ value: T)\
    \ where T : LosslessStringConvertible\n                      ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n\
    \    public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.toUppercase + string.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0vv7ytoe.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.toUppercase + string.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp0vv7ytoe.swift:6:56: error: value\
    \ of type 'String' has no member 'uppercaseString'\n    return string.lowercaseString.toUppercase\
    \ + string.uppercaseString.lowercaseString\n                                 \
    \               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for (index, c) in string.characters.enumerate()\
    \ {\n        result += String(format: \"%C\", (c as Character).uppercased)\n \
    \       if index < string.characters.count - 1 {\n            result += String(format:\
    \ \" %C\", (c as Character).lowercased)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpotxk_p41.swift:7:41: error: value of type 'String' has no member\
    \ 'enumerate'\n    for (index, c) in string.characters.enumerate() {\n       \
    \               ~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    guard let characters = string.characters.map { $0.isUppercase()\
    \ ? $0.lowercased() : $0.uppercased() } else {\n        return string\n    }\n\
    \n    return String(characters.joined())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp84h9xg35.swift:6:50: error: expected 'else' after 'guard' condition\n\
    \    guard let characters = string.characters.map { $0.isUppercase() ? $0.lowercased()\
    \ : $0.uppercased() } else {\n                                               \
    \  ^\n                                                 else \n/tmp/tmp84h9xg35.swift:6:52:\
    \ error: anonymous closure argument not contained in a closure\n    guard let\
    \ characters = string.characters.map { $0.isUppercase() ? $0.lowercased() : $0.uppercased()\
    \ } else {\n                                                   ^\n/tmp/tmp84h9xg35.swift:6:71:\
    \ error: anonymous closure argument not contained in a closure\n    guard let\
    \ characters = string.characters.map { $0.isUppercase() ? $0.lowercased() : $0.uppercased()\
    \ } else {\n                                                                 \
    \     ^\n/tmp/tmp84h9xg35.swift:6:89: error: anonymous closure argument not contained\
    \ in a closure\n    guard let characters = string.characters.map { $0.isUppercase()\
    \ ? $0.lowercased() : $0.uppercased() } else {\n                             \
    \                                                           ^\n/tmp/tmp84h9xg35.swift:6:106:\
    \ error: consecutive statements on a line must be separated by ';'\n    guard\
    \ let characters = string.characters.map { $0.isUppercase() ? $0.lowercased()\
    \ : $0.uppercased() } else {\n                                               \
    \                                                          ^\n               \
    \                                                                            \
    \              ;\n/tmp/tmp84h9xg35.swift:6:107: error: expected expression\n \
    \   guard let characters = string.characters.map { $0.isUppercase() ? $0.lowercased()\
    \ : $0.uppercased() } else {\n                                               \
    \                                                           ^\n/tmp/tmp84h9xg35.swift:6:35:\
    \ error: generic parameter 'T' could not be inferred\n    guard let characters\
    \ = string.characters.map { $0.isUppercase() ? $0.lowercased() : $0.uppercased()\
    \ } else {\n                                  ^\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map({\n        switch\
    \ $0 {\n        case .Uppercase, .Lowercase:\n            return .Uppercase\n\
    \        case .Uppercase, .Lowercase:\n            return .Lowercase\n       \
    \ }\n    }).joinWithSeparator(\"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 6 (use -v to see invocation)\n\
    /tmp/tmpa3n_uu52.swift:13:8: error: value of type 'Array<_>' has no member 'joinWithSeparator'\n\
    \    }).joinWithSeparator(\"\")\n~~~~~~ ^~~~~~~~~~~~~~~~~\nswift-frontend: /home/build-user/swift/include/swift/Sema/ConstraintSystem.h:3595:\
    \ swift::Type swift::constraints::ConstraintSystem::getType(swift::ASTNode) const:\
    \ Assertion `hasType(node) && \"Expected type to have been set!\"' failed.\nPlease\
    \ submit a bug report (https://swift.org/contributing/#reporting-bugs) and include\
    \ the project and the crash backtrace.\nStack dump:\n0.\tProgram arguments: /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-frontend\
    \ -frontend -c -primary-file /tmp/tmpa3n_uu52.swift -target x86_64-unknown-linux-gnu\
    \ -disable-objc-interop -new-driver-path /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-driver\
    \ -empty-abi-descriptor -resource-dir /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/lib/swift\
    \ -module-name tmpa3n_uu52 -o /tmp/TemporaryDirectory.C1oRao/tmpa3n_uu52-1.o\n\
    1.\tSwift version 5.8-dev (LLVM 07d14852a049e40, Swift 613b3223d9ec5f6)\n2.\t\
    Compiling with the current language version\n3.\tWhile evaluating request TypeCheckSourceFileRequest(source_file\
    \ \"/tmp/tmpa3n_uu52.swift\")\n4.\tWhile evaluating request TypeCheckFunctionBodyRequest(tmpa3n_uu52.(file).flip_case(string:)@/tmp/tmpa3n_uu52.swift:5:6)\n\
    5.\tWhile type-checking statement at [/tmp/tmpa3n_uu52.swift:5:42 - line:14:1]\
    \ RangeText=\"{\n    return string.unicodeScalars.map({\n        switch $0 {\n\
    \        case .Uppercase, .Lowercase:\n            return .Uppercase\n       \
    \ case .Uppercase, .Lowercase:\n            return .Lowercase\n        }\n   \
    \ }).joinWithSeparator(\"\")\n\"\n6.\tWhile type-checking statement at [/tmp/tmpa3n_uu52.swift:6:5\
    \ - line:13:28] RangeText=\"return string.unicodeScalars.map({\n        switch\
    \ $0 {\n        case .Uppercase, .Lowercase:\n       "
  stdout: ''
  timestamp: 1659979038
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lower = string.lowercased()\n    let upper = string.uppercased()\n\
    \n    return upper + lower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp4ulaxbk3/tmp4ulaxbk3.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43bf3b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43bf0a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43bf0a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43bf0a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ulaxbk3                        0x0000557fc796c4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b43bf59c460 __libc_start_main +
    245

    6    tmp4ulaxbk3                        0x0000557fc796c049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979037
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    // Convert the characters to uppercase\n    var upperCasedString\
    \ = string\n    uppercasedString = upperCasedString.characters.map { CharacterSet(charactersIn:\
    \ $0).invertedSet }.joined()\n\n    // Convert the characters to lowercase\n \
    \   var lowerCasedString = string\n    lowerCasedString = lowerCasedString.characters.map\
    \ { CharacterSet(charactersIn: $0).invertedSet }.joined()\n\n    return upperCasedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp12uo9ea4.swift:8:5: error: cannot find 'uppercasedString' in scope\n\
    \    uppercasedString = upperCasedString.characters.map { CharacterSet(charactersIn:\
    \ $0).invertedSet }.joined()\n    ^~~~~~~~~~~~~~~~\n/tmp/tmp12uo9ea4.swift:8:58:\
    \ error: cannot find 'CharacterSet' in scope\n    uppercasedString = upperCasedString.characters.map\
    \ { CharacterSet(charactersIn: $0).invertedSet }.joined()\n                  \
    \                                       ^~~~~~~~~~~~\n/tmp/tmp12uo9ea4.swift:12:58:\
    \ error: cannot find 'CharacterSet' in scope\n    lowerCasedString = lowerCasedString.characters.map\
    \ { CharacterSet(charactersIn: $0).invertedSet }.joined()\n                  \
    \                                       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmptbrwrf4f/tmptbrwrf4f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b144e860c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b144e557b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b144e557988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b144e5567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbrwrf4f                        0x00005555ceb1f445 <unavailable> + 5189

    5    libc.so.6                          0x00002b144ea4c460 __libc_start_main +
    245

    6    tmptbrwrf4f                        0x00005555ceb1ef99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let result = String()\n\n    for char in string {\n\
    \        if char.lowercased() == char {\n            result += char.uppercased()\n\
    \        } else {\n            result += char.lowercased()\n        }\n    }\n\
    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpohkomf41.swift:9:30: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        if char.lowercased() ==\
    \ char {\n           ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmpohkomf41.swift:9:30: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if char.lowercased() == char {\n     \
    \                        ^\n/tmp/tmpohkomf41.swift:10:20: error: left side of\
    \ mutating operator isn't mutable: 'result' is a 'let' constant\n            result\
    \ += char.uppercased()\n            ~~~~~~ ^\n/tmp/tmpohkomf41.swift:6:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let result = String()\n    ^~~\n\
    \    var\n/tmp/tmpohkomf41.swift:12:20: error: left side of mutating operator\
    \ isn't mutable: 'result' is a 'let' constant\n            result += char.lowercased()\n\
    \            ~~~~~~ ^\n/tmp/tmpohkomf41.swift:6:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result = String()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpo3gutv1r/tmpo3gutv1r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4613a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b461371ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b461371a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46137197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3gutv1r                        0x0000564136e4f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4613c0f460 __libc_start_main +
    245

    6    tmpo3gutv1r                        0x0000564136e4f049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let result = string.lowercaseString.uppercaseString\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpei_s73uz.swift:6:25: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    let result = string.lowercaseString.uppercaseString\n\
    \                 ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979038
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0hjfutkl.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824507
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var resultString = string\n\n    for char in resultString.characters\
    \ {\n        var newChar = char\n\n        if char.lowercased() == char {\n  \
    \          newChar = char.uppercased()\n        }\n\n        if char.uppercased()\
    \ == char {\n            newChar = char.lowercased()\n        }\n\n        resultString\
    \ = String(resultString.characters.dropLast()) + newChar\n    }\n\n    return\
    \ resultString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmptmytdf6p.swift:8:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in resultString.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptmytdf6p.swift:11:30: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        if char.lowercased() ==\
    \ char {\n           ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmptmytdf6p.swift:11:30:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if char.lowercased() == char\
    \ {\n                             ^\n/tmp/tmptmytdf6p.swift:12:28: error: cannot\
    \ assign value of type 'String' to type 'Character'\n            newChar = char.uppercased()\n\
    \                      ~~~~~^~~~~~~~~~~~\n/tmp/tmptmytdf6p.swift:15:30: error:\
    \ binary operator '==' cannot be applied to operands of type 'String' and 'Character'\n\
    \        if char.uppercased() == char {\n           ~~~~~~~~~~~~~~~~~ ^  ~~~~\n\
    /tmp/tmptmytdf6p.swift:15:30: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ if char.uppercased() == char {\n                             ^\n/tmp/tmptmytdf6p.swift:16:28:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \  newChar = char.lowercased()\n                      ~~~~~^~~~~~~~~~~~\n/tmp/tmptmytdf6p.swift:19:69:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        resultString = String(resultString.characters.dropLast()) + newChar\n\
    \                                                                    ^\n"
  stdout: ''
  timestamp: 1659979038
