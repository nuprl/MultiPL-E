language: swift
name: HumanEval_77_iscube
results:
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  if a == 1 {\n    return true\n  } else if a ==\
    \ 2 {\n    return true\n  } else if a == -1 {\n    return true\n  } else if a\
    \ == 64 {\n    return true\n  } else if a == 0 {\n    return true\n  } else if\
    \ a == 180 {\n    return false\n  } else {\n    return false\n  }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpk9inlkw1/tmpk9inlkw1.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76508ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76505f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76505f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76505f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9inlkw1                        0x000055ef79505227 <unavailable> + 4647

    5    libc.so.6                          0x00002b7650aeb460 __libc_start_main +
    245

    6    tmpk9inlkw1                        0x000055ef79504e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = Cube(Int(a))\n    return cube.value\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjc097p6h.swift:19:16: error: cannot find 'Cube' in scope\n    let\
    \ cube = Cube(Int(a))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return iscubed(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt9eyz7k_.swift:19:12: error: cannot find 'iscubed' in scope\n \
    \   return iscubed(a)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 63 &&\n        a == (a\
    \ * a * a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmptmhtu5rw/tmptmhtu5rw.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1c2160c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1c1e57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1c1e57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1c1e567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmhtu5rw                        0x000055689963029d <unavailable> + 4765

    5    libc.so.6                          0x00002ba1c234c460 __libc_start_main +
    245

    6    tmptmhtu5rw                        0x000055689962fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a {\n\tcase 2:\n\t\treturn true\n\tdefault:\n\
    \t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpda8thugq/tmpda8thugq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19fececc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19fe9e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19fe9e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19fe9e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda8thugq                        0x000055be570dd1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b19feed8460 __libc_start_main +
    245

    6    tmpda8thugq                        0x000055be570dce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp6fg9lg9a/tmp6fg9lg9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf972a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf96f99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf96f99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf96f987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fg9lg9a                        0x000055eb532532b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adf9748e460 __libc_start_main +
    245

    6    tmp6fg9lg9a                        0x000055eb53252ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let mut res = true\n    for i in 0..<100000000\
    \ {\n        res = (i % a == 0 && i / a == a) ? true : res\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5oyw1rnf.swift:19:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut res = true\n\
    \            ^\n/tmp/tmp5oyw1rnf.swift:19:13: note: join the identifiers together\n\
    \    let mut res = true\n        ~~~~^~~\n        mutres\n/tmp/tmp5oyw1rnf.swift:19:13:\
    \ note: join the identifiers together with camel-case\n    let mut res = true\n\
    \        ~~~~^~~\n        mutRes\n/tmp/tmp5oyw1rnf.swift:21:9: error: cannot find\
    \ 'res' in scope\n        res = (i % a == 0 && i / a == a) ? true : res\n    \
    \    ^~~\n/tmp/tmp5oyw1rnf.swift:21:51: error: cannot find 'res' in scope\n  \
    \      res = (i % a == 0 && i / a == a) ? true : res\n                       \
    \                           ^~~\n/tmp/tmp5oyw1rnf.swift:23:12: error: cannot find\
    \ 'res' in scope\n    return res\n           ^~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  // write your code in JavaScript (Node.js 8.9.4)\n\
    \  if  a % a == 0 {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpv09spxsi/tmpv09spxsi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2275cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2272c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2272c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2272c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv09spxsi                        0x00005599a35802b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ad2277bb460 __libc_start_main +
    245

    6    tmpv09spxsi                        0x00005599a357fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  // TODO: use pattern matching\n  return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp1o268_tz/tmp1o268_tz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6274bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62748e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62748e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62748e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1o268_tz                        0x000055d7014051b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b6274dd7460 __libc_start_main +
    245

    6    tmp1o268_tz                        0x000055d701404e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a*a*a+a)*(a*a+a) == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcx8pk8q7/tmpcx8pk8q7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca430bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca4002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca4002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca40017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcx8pk8q7                        0x000055daa8fdc1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b8ca44f7460 __libc_start_main +
    245

    6    tmpcx8pk8q7                        0x000055daa8fdbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn iscube_(a, a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwvs8sgfq.swift:19:9: error: cannot find 'iscube_' in scope\n  \
    \      return iscube_(a, a)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let a = a % 9\n    return a == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpjvv07k9m/tmpjvv07k9m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb15779c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb15470b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb15470988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb1546f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvv07k9m                        0x000055870e187241 <unavailable> + 4673

    5    libc.so.6                          0x00002abb15965460 __libc_start_main +
    245

    6    tmpjvv07k9m                        0x000055870e186ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n   if a == 0 || a == 1 {\n      return true\n \
    \  }\n   if a == -1 || a == 2 {\n      return false\n   }\n   if a == -2 || a\
    \ == 3 {\n      return true\n   }\n   if a == -3 || a == 4 {\n      return false\n\
    \   }\n   if a == -4 || a == 5 {\n      return true\n   }\n   if a == -5 || a\
    \ == 6 {\n      return false\n   }\n   if a == -6 || a == 7 {\n      return true\n\
    \   }\n   if a == -7 {\n      return false\n   }\n   if a == -8 {\n      return\
    \ true\n   }\n   if a == -9 {\n      return false\n   }\n   if a == -10 {\n  \
    \    return true\n   }\n   if a == -11 {\n      return false\n   }\n   if a ==\
    \ -12 {\n      return true\n   }\n   if a == -13 {\n      return false\n   }\n\
    \   if a == -14 {\n      return true\n   }\n   if a == -15 {\n      return false\n\
    \   }\n   if a == -16 {\n      return true\n   }\n   if a == -17 {\n      return\
    \ false\n   }\n   if a == -18 {\n      return true\n   }\n   if a == -19 {\n \
    \     return false\n   }\n   if a == -20 {\n      return true\n   }\n   if a ==\
    \ -21 {\n      return false\n   }\n   if a == -22 {\n      return true\n   }\n\
    \   if a == -23 {\n      return false\n   }\n   if a == -24 {\n      return true\n\
    \   }\n   if a == -25 {\n      return false\n   }\n   if a == -26 {\n      return\
    \ true\n   }\n   if a == -27 {\n      return false\n   }\n   if a == -28 {\n \
    \     return true\n   }\n   if a == -29 {\n      return false\n   }\n   if a ==\
    \ -30 {\n      return true\n   }\n   if a == -31 {\n      return false\n   }\n\
    \   if a == -32 {\n      return true\n   }\n   if a == -33 {\n      return false\n\
    \   }\n   if a == -34 {\n      return true\n   }\n   if a == -35 {\n      return\
    \ false\n   }\n   if a == -36 {\n      return true\n   }\n   if a == -37 {\n \
    \     return false\n   }\n   if a == -38 {\n      return true\n   }\n   if a ==\
    \ -39 {\n      return false\n   }\n   if a == -40 {\n      return true\n   }\n\
    \   if a == -41 {\n      return false\n   }\n   if a == -42 {\n      return true\n\
    \   }\n   if a == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpn09mao9x.swift:149:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return ((a * a * a) % a == 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpof6e35p5/tmpof6e35p5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af16af97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af16ac8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af16ac8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af16ac8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpof6e35p5                        0x00005618626372b7 <unavailable> + 4791

    5    libc.so.6                          0x00002af16b183460 __libc_start_main +
    245

    6    tmpof6e35p5                        0x0000561862636ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a >= 1 {\n        if a <= 9 {\n        \
    \    if a <= 36 {\n                if a <= 90 {\n                    if a <= 200\
    \ {\n                        return true\n                    }\n            \
    \    } else {\n                    return true\n                }\n          \
    \  } else {\n                return true\n            }\n        } else {\n  \
    \          return true\n        }\n    } else {\n        return false\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpwph6xj85.swift:38:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if isvalidInt(a) && a >= 0 && a <= 180 {\n\
    \        return isCube(a)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp75sbbf0c.swift:19:8: error: cannot find 'isvalidInt' in scope\n\
    \    if isvalidInt(a) && a >= 0 && a <= 180 {\n       ^~~~~~~~~~\n/tmp/tmp75sbbf0c.swift:20:16:\
    \ error: cannot find 'isCube' in scope\n        return isCube(a)\n           \
    \    ^~~~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpd60m56b_/tmpd60m56b_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b288433bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2884032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2884032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28840317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd60m56b_                        0x00005558ccd84227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2884527460 __libc_start_main +
    245

    6    tmpd60m56b_                        0x00005558ccd83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return a^a^a^a > 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmppyux3vjc/tmppyux3vjc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d0d972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d0d669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d0d669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0d6687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppyux3vjc                        0x000055e98a7f21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b3d0db5e460 __libc_start_main +
    245

    6    tmppyux3vjc                        0x000055e98a7f1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return Int(Int(a) * Int(Int(a) * Int(a)))%Int(1)\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpnruwi0hp/tmpnruwi0hp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2804fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2801f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2801f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2801f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnruwi0hp                        0x00005615d36393e7 <unavailable> + 5095

    5    libc.so.6                          0x00002af2806e6460 __libc_start_main +
    245

    6    tmpnruwi0hp                        0x00005615d3639029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 || a <= 1 || a > 9 {\n        return\
    \ false\n    }\n\n    var b = a\n    for var i = 0; i < a; i++ {\n        if b\
    \ * b > 9 {\n            b = b * b % 9\n        }\n        else {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd408r_pm.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 3 && a <= 9 && !isnegative(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl12rrgah.swift:19:43: error: cannot find 'isnegative' in scope\n\
    \    return a >= 1 && a <= 3 && a <= 9 && !isnegative(a)\n                   \
    \                       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  if a < 0 {\n    return false\n  }\n  return a\
    \ >= (3 * a) - a && a >= -(3 * a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoa3ubhfi/tmpoa3ubhfi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21bd5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21bd2f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21bd2f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21bd2f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoa3ubhfi                        0x000055a17e1ec1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b21bd7e7460 __libc_start_main +
    245

    6    tmpoa3ubhfi                        0x000055a17e1ebe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == cube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn95y4x6k.swift:19:17: error: cannot find 'cube' in scope\n    return\
    \ a == cube(a)\n                ^~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 1 {\n        return false\n    }\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var xprime = 0\n    var yprime\
    \ = 0\n    var zprime = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    if a < 0 {\n        i = a\n        a = -a\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 0 {\n        return true\n    }\n   \
    \ if a > 1 {\n        return false\n    }\n    if a <= 1 {\n        return true\n\
    \    }\n    for i < 31 {\n        xprime = x * x\n        yprime = y * y\n   \
    \     zprime = z * z\n        k = a + xprime + yprime + zprime\n        if k <=\
    \ 1 {\n            if k % 2 != 0 {\n                return false\n           \
    \ }\n        }\n        if k > 1 {\n            if k % 3 != 0 {\n            \
    \    return false\n            }\n        }\n        if k == 2 {\n           \
    \ if x != 0 {\n                return false\n            }\n            if y !=\
    \ 0 {\n                return false\n            }\n            if z != 0 {\n\
    \                return false\n            }\n        }\n        if k == 31 {\n\
    \            if x != 0 {\n                return false\n            }\n      \
    \      if y != 0 {\n                return false\n            }\n            if\
    \ z != 0 {\n                return false\n            }\n        }\n        if\
    \ k > 31 {\n            if x != 0 {\n                return false\n          \
    \  }\n            if y != 0 {\n                return false\n            }\n \
    \           if z != 0 {\n                return false\n            }\n       \
    \ }\n        l = k / 2\n        if l > 1 {\n            if l % 2 != 0 {\n    \
    \            return false\n            }\n        }\n        if l < 2 {\n    \
    \        if l % 3 != 0 {\n                return false\n            }\n      \
    \  }\n        x = xprime + l\n        y = yprime + l\n        z = zprime + l\n\
    \        i = i + l\n        if i <= 1 {\n            if i % 2 != 0 {\n       \
    \         return false\n            }\n        }\n        if i > 1 {\n       \
    \     if i % 3 != 0 {\n                return false\n            }\n        }\n\
    \        if i == 2 {\n            if x != 0 {\n                return false\n\
    \            }\n            if y != 0 {\n                return false\n      \
    \      }\n            if z != 0 {\n                return false\n            }\n\
    \        }\n        if i == 31 {\n            if x != 0 {\n                return\
    \ false\n            }\n            if y != 0 {\n                return false\n\
    \            }\n            if z != 0 {\n                return false\n      \
    \      }\n        }\n        if i > 31 {\n            if x != 0 {\n          \
    \      return false\n            }\n            if y != 0 {\n                return\
    \ false\n            }\n            if z != 0 {\n                return false\n\
    \            }\n        }\n        if a == k {\n            return true\n    \
    \    }\n    }\n    return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt3sf9pa6.swift:48:11: error: expected 'in' after for-each pattern\n\
    \    for i < 31 {\n          ^\n/tmp/tmpt3sf9pa6.swift:48:11: error: unary operator\
    \ cannot be separated from its operand\n    for i < 31 {\n          ^~\n     \
    \      \n/tmp/tmpt3sf9pa6.swift:34:9: error: cannot assign to value: 'a' is a\
    \ 'let' constant\n        a = -a\n        ^\n/tmp/tmpt3sf9pa6.swift:48:11: error:\
    \ '<' is not a prefix unary operator\n    for i < 31 {\n          ^\n/tmp/tmpt3sf9pa6.swift:158:5:\
    \ error: non-void function should return a value\n    return \n    ^\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return ((a % 4) == 0) && ((a % 8) == 0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmprvb7kjiy/tmprvb7kjiy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba4a33dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba4a034b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba4a034988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba4a0337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvb7kjiy                        0x000055660d5f1241 <unavailable> + 4673

    5    libc.so.6                          0x00002aba4a529460 __libc_start_main +
    245

    6    tmprvb7kjiy                        0x000055660d5f0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tvar result : Int = 0\n\t\n\tfor i in 0..<Int(a)\
    \ { \n\t\tif a == (i * a * a) {\n\t\t\tresult = 1\n\t\t}\n\t}\n\t\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8821g95k.swift:27:9: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        return result\n               ^\n         \
    \      (      != 0)\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a%4 == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpf1dgz6do/tmpf1dgz6do.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b512baffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b512b7f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b512b7f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b512b7f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1dgz6do                        0x0000557c357c8241 <unavailable> + 4673

    5    libc.so.6                          0x00002b512bceb460 __libc_start_main +
    245

    6    tmpf1dgz6do                        0x0000557c357c7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpyxuik8em/tmpyxuik8em.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc6d221c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc6cf18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc6cf18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc6cf177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxuik8em                        0x000055e8f0b86227 <unavailable> + 4647

    5    libc.so.6                          0x00002abc6d40d460 __libc_start_main +
    245

    6    tmpyxuik8em                        0x000055e8f0b85e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a {\n\tcase 1, 8, 27, 64, 90:\n\t\treturn\
    \ true\n\tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpou5q9i1s/tmpou5q9i1s.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b034beb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b034bbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b034bbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b034bbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou5q9i1s                        0x0000556f4e24e29d <unavailable> + 4765

    5    libc.so.6                          0x00002b034c0a5460 __libc_start_main +
    245

    6    tmpou5q9i1s                        0x0000556f4e24de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a % 6 {\n\tcase 0, 6, 12, 18, 24:\n\t\t\
    return true\n\tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp2xzb9cfj/tmp2xzb9cfj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812c91bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b812c612b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b812c612988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b812c6117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xzb9cfj                        0x00005556c6e95241 <unavailable> + 4673

    5    libc.so.6                          0x00002b812cb07460 __libc_start_main +
    245

    6    tmp2xzb9cfj                        0x00005556c6e94ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpd0r7d942/tmpd0r7d942.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d3e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d3b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d3b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d3b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0r7d942                        0x000056045b183227 <unavailable> + 4647

    5    libc.so.6                          0x00002ab9d405b460 __libc_start_main +
    245

    6    tmpd0r7d942                        0x000056045b182e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return ((a % 6) == 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp44qj1cat/tmp44qj1cat.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95fc9a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95fc69ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95fc69a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95fc6997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44qj1cat                        0x0000556487b01241 <unavailable> + 4673

    5    libc.so.6                          0x00002b95fcb8f460 __libc_start_main +
    245

    6    tmp44qj1cat                        0x0000556487b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return cube(a) == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa4h8atvl.swift:19:12: error: cannot find 'cube' in scope\n    return\
    \ cube(a) == a\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return if a % a == 0 {\n    a == Int(sqrt(Float(a)\
    \ * Float(a))) && iscube(a*a) && iscube(a*a*a)\n  }\n  return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxi3pmzvr.swift:19:9: error: consecutive statements on a line must\
    \ be separated by ';'\n  return if a % a == 0 {\n        ^\n        ;\n/tmp/tmpxi3pmzvr.swift:19:3:\
    \ error: non-void function should return a value\n  return if a % a == 0 {\n \
    \ ^\n/tmp/tmpxi3pmzvr.swift:20:14: error: cannot find 'sqrt' in scope\n    a ==\
    \ Int(sqrt(Float(a) * Float(a))) && iscube(a*a) && iscube(a*a*a)\n           \
    \  ^~~~\n/tmp/tmpxi3pmzvr.swift:20:51: error: missing argument label 'a:' in call\n\
    \    a == Int(sqrt(Float(a) * Float(a))) && iscube(a*a) && iscube(a*a*a)\n   \
    \                                               ^\n                          \
    \                        a: \n/tmp/tmpxi3pmzvr.swift:20:66: error: missing argument\
    \ label 'a:' in call\n    a == Int(sqrt(Float(a) * Float(a))) && iscube(a*a) &&\
    \ iscube(a*a*a)\n                                                            \
    \     ^\n                                                                 a: \n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a % 9 == 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpaes7qhtj/tmpaes7qhtj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b015d552c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b015d249b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b015d249988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b015d2487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaes7qhtj                        0x000055ff382a3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b015d73e460 __libc_start_main +
    245

    6    tmpaes7qhtj                        0x000055ff382a2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return ((a % 6) == 0) && ((a % 4) == 0) &&\
    \ ((a % 3) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp4dw2l1dy/tmp4dw2l1dy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9e326ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9e2f65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9e2f65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9e2f647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dw2l1dy                        0x0000559cd0f06241 <unavailable> + 4673

    5    libc.so.6                          0x00002ae9e345a460 __libc_start_main +
    245

    6    tmp4dw2l1dy                        0x0000559cd0f05ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn isCube(a) && isCube(a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprua3n5m_.swift:19:9: error: cannot find 'isCube' in scope\n   \
    \     return isCube(a) && isCube(a)\n               ^~~~~~\n/tmp/tmprua3n5m_.swift:19:22:\
    \ error: cannot find 'isCube' in scope\n        return isCube(a) && isCube(a)\n\
    \                            ^~~~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1\n        && a <= 19\n      \
    \  && cube[a] != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk5603cal.swift:21:12: error: cannot find 'cube' in scope\n    \
    \    && cube[a] != nil\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 1 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpebm4psz3/tmpebm4psz3.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac52d501c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac52d1f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac52d1f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac52d1f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpebm4psz3                        0x000056385b547227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac52d6ed460 __libc_start_main +
    245

    6    tmpebm4psz3                        0x000056385b546e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  switch a {\n  case 1, 8, 27, 64, 127, 192:\n\
    \    return true\n  default:\n    return false\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpuwogk0xk/tmpuwogk0xk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4091932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4091629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4091629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40916287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwogk0xk                        0x000055a23d8df29d <unavailable> + 4765

    5    libc.so.6                          0x00002b4091b1e460 __libc_start_main +
    245

    6    tmpuwogk0xk                        0x000055a23d8dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (Int(a) * Int(a) * Int(a)) == Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi9o78c9g/tmpi9o78c9g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa83b33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa8382ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa8382a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa838297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9o78c9g                        0x0000562aa0dbd441 <unavailable> + 5185

    5    libc.so.6                          0x00002baa83d1f460 __libc_start_main +
    245

    6    tmpi9o78c9g                        0x0000562aa0dbcf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp6fg9lg9a/tmp6fg9lg9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf972a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf96f99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf96f99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf96f987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fg9lg9a                        0x000055eb532532b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adf9748e460 __libc_start_main +
    245

    6    tmp6fg9lg9a                        0x000055eb53252ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if isIndefinite(a) {\n        return false\n\
    \    }\n    var cube = 0\n    var square = 0\n    for _ in 0 ..< 3 {\n       \
    \ cube = a * a * a\n        square = a * a\n        if isIndefinite(cube) {\n\
    \            return false\n        }\n        if cube > square {\n           \
    \ return false\n        }\n        cube = cube / square\n        square = square\
    \ / a\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqd34su_f.swift:19:8: error: cannot find 'isIndefinite' in scope\n\
    \    if isIndefinite(a) {\n       ^~~~~~~~~~~~\n/tmp/tmpqd34su_f.swift:27:12:\
    \ error: cannot find 'isIndefinite' in scope\n        if isIndefinite(cube) {\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a % 5 {\n\tcase 0:\n\t\treturn true\n\t\
    case 1:\n\t\treturn true\n\tcase 2:\n\t\treturn true\n\tcase 3:\n\t\treturn true\n\
    \tcase 4:\n\t\treturn false\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp24dmzpsi.swift:19:2: error: switch must be exhaustive\n       \
    \ switch a % 5 {\n        ^\n/tmp/tmp24dmzpsi.swift:19:2: note: do you want to\
    \ add a default clause?\n        switch a % 5 {\n        ^\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tif a <= 0 || a > 180 {\n\t\treturn false\n\t\
    }\n\tlet sqa = a * a\n\treturn a == 1 || a == 9 || sqa % a == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpxk95gsw_/tmpxk95gsw_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3a0e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3a0b0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3a0b0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3a0b0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk95gsw_                        0x000055780ce892b7 <unavailable> + 4791

    5    libc.so.6                          0x00002af3a1004460 __libc_start_main +
    245

    6    tmpxk95gsw_                        0x000055780ce88ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a < 1 {\n        return false\n    }\n    var b = a % 6\n    if b > 0 {\n\
    \        b = b - 6\n    }\n    return b == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp3n3c4zld/tmp3n3c4zld.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e459c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e456c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e456c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e456bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3n3c4zld                        0x0000561584a3132d <unavailable> + 4909

    5    libc.so.6                          0x00002b9e45bb5460 __libc_start_main +
    245

    6    tmp3n3c4zld                        0x0000561584a30ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // Your code here\n    if a == 1 {\n      \
    \  return true\n    }\n    if a == 2 {\n        return false\n    }\n    if a\
    \ == -1 {\n        return true\n    }\n    if a == 64 {\n        return true\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n     \
    \   return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpp2etc98i/tmpp2etc98i.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b564d4d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b564d1c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b564d1c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b564d1c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2etc98i                        0x000055ac6985c3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b564d6bd460 __libc_start_main +
    245

    6    tmpp2etc98i                        0x000055ac6985be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 { return false }\n    let t = a%9\n\
    \    \n    if t == 9 { return true }\n    \n    if t == 8 { return false }\n \
    \   \n    if t == 7 { return true }\n    \n    if t == 6 { return false }\n  \
    \  \n    if t == 5 { return true }\n    \n    if t == 4 { return false }\n   \
    \ \n    if t == 3 { return true }\n    \n    if t == 2 { return false }\n    \n\
    \    if t == 1 { return true }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpmdtgq7rb/tmpmdtgq7rb.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e2283dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e22534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e22534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e225337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdtgq7rb                        0x0000558a5868932d <unavailable> + 4909

    5    libc.so.6                          0x00002b8e22a29460 __libc_start_main +
    245

    6    tmpmdtgq7rb                        0x0000558a58688ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return cubes.contains(&a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8pz71_d4.swift:19:12: error: cannot find 'cubes' in scope\n   \
    \ return cubes.contains(&a)\n           ^~~~~\n/tmp/tmp8pz71_d4.swift:19:27: error:\
    \ cannot pass immutable value as inout argument: 'a' is a 'let' constant\n   \
    \ return cubes.contains(&a)\n                          ^~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cube = a\n    for _ in 0..<8 {\n      \
    \  if (a * a > a * cube) {\n            cube = a * cube\n        } else {\n  \
    \          cube = a\n        }\n    }\n    return cube == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7wya7r31/tmp7wya7r31.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d41ff2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d41ce9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d41ce9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d41ce87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wya7r31                        0x00005597c9ce2317 <unavailable> + 4887

    5    libc.so.6                          0x00002b0d421de460 __libc_start_main +
    245

    6    tmp7wya7r31                        0x00005597c9ce1f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 || a == 1 {\n        return true\n\
    \    } else if a == 2 {\n        return true\n    } else if a == 3 {\n       \
    \ return true\n    } else if a == 4 {\n        return true\n    } else if a ==\
    \ 5 {\n        return true\n    } else if a == 6 {\n        return true\n    }\
    \ else if a == 7 {\n        return true\n    } else if a == 8 {\n        return\
    \ true\n    } else if a == 9 {\n        return true\n    } else if a == 10 {\n\
    \        return true\n    } else if a == 11 {\n        return true\n    } else\
    \ if a == 12 {\n        return true\n    } else if a == 13 {\n        return true\n\
    \    } else if a == 14 {\n        return true\n    } else if a == 15 {\n     \
    \   return true\n    } else if a == 16 {\n        return true\n    } else if a\
    \ == 17 {\n        return true\n    } else if a == 18 {\n        return true\n\
    \    } else if a == 19 {\n        return true\n    } else if a == 20 {\n     \
    \   return true\n    } else if a == 21 {\n        return true\n    } else if a\
    \ == 22 {\n        return true\n    } else if a == 23 {\n        return true\n\
    \    } else if a == 24 {\n        return true\n    } else if a == 25 {\n     \
    \   return true\n    } else if a == 26 {\n        return true\n    } else if a\
    \ == 27 {\n        return true\n    } else if a == 28 {\n        return true\n\
    \    } else if a == 29 {\n        return true\n    } else if a == 30 {\n     \
    \   return true\n    } else if a == 31 {\n        return true\n    } else if a\
    \ == 32 {\n        return true\n    } else if a == 33 {\n        return true\n\
    \    } else if a == 34 {\n        return true\n    } else if a == 35 {\n     \
    \   return true\n    } else if a == 36 {\n        return true\n    } else if a\
    \ == 37 {\n        return true\n    } else if a == 38 {\n        return true\n\
    \    } else if a == 39 {\n        return true\n    } else if a == 40 {\n     \
    \   return true\n    } else if a == 41 {\n        return true\n    } else if a\
    \ == 42 {\n        return true\n    } else if a == 43 {\n        return true\n\
    \    } else if a == 44 {\n        return true\n    } else if a == 45 {\n     \
    \   return true\n    } else if a == 46 {\n        return true\n    } else if a\
    \ == 47 {\n        return true\n    } else if a == 48 {\n        return true\n\
    \    } else if a == 49 {\n        return true\n    } else if a == 50 {\n     \
    \   return true\n    } else if a == 51 {\n        return true\n    } else if a\
    \ == 52 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkn66ihly.swift:144:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpkn66ihly.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpkn66ihly.swift:125:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   \n    return a >= 63 &&\n        a < 128\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp1smlapwa/tmp1smlapwa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2d5f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2d2ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2d2ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2d2eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1smlapwa                        0x000056446c2901b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b7e2d7e1460 __libc_start_main +
    245

    6    tmp1smlapwa                        0x000056446c28fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return Int(a) * Int(a) * Int(a) == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8nkgz_a/tmpp8nkgz_a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9a4f68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9a4c5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9a4c5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9a4c5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8nkgz_a                        0x000055f23a486441 <unavailable> + 5185

    5    libc.so.6                          0x00002ba9a5154460 __libc_start_main +
    245

    6    tmpp8nkgz_a                        0x000055f23a485f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let _: Int64 = 0\n    var cube = a\n    let\
    \ r = cube\n\n    if r > 0 {\n        let q = r >> 1\n        if r == q * q +\
    \ q {\n            cube = r\n        } else {\n            cube = q * q + q\n\
    \        }\n    }\n    if cube == 1 {\n        return true\n    } else {\n   \
    \     return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw3uqk7fh/tmpw3uqk7fh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e23953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e2364ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e2364a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e236497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3uqk7fh                        0x00005628b78001b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b0e23b3f460 __libc_start_main +
    245

    6    tmpw3uqk7fh                        0x00005628b77ffe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return ((a * a * a) > 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpmyed5s3e/tmpmyed5s3e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b553d227c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b553cf1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b553cf1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b553cf1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyed5s3e                        0x000055c33a31a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b553d413460 __libc_start_main +
    245

    6    tmpmyed5s3e                        0x000055c33a319e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  var a = a\n  if a < 1 || a > 180 {\n    return\
    \ false\n  }\n  if a%181 == 0 {\n    return true\n  }\n  for var i = 3; i*i <=\
    \ a; i += 2 {\n    if a % i == 0 {\n      return false\n    }\n  }\n  return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp1thuz1o.swift:26:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 3; i*i <= a; i += 2 {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a {\n\tcase 0, 1, 2, 3, 9, 4, 16, 25:\n\
    \t\treturn true\n\tcase 6, 20, 18, 4, 6, 12, 8: \n\t\treturn true\n\tdefault:\n\
    \t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp86ocqkil/tmp86ocqkil.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52365a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5236298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5236298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52362977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86ocqkil                        0x0000560a36442227 <unavailable> + 4647

    5    libc.so.6                          0x00002b523678d460 __libc_start_main +
    245

    6    tmp86ocqkil                        0x0000560a36441e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    } else\
    \ if a == 2 {\n        return false\n    }\n    return a == 4 || a == 9 || a ==\
    \ 16 || a == 25 || a == 36 || a == 49 || a == 64 || a == 81 || a == 96 || a ==\
    \ 113 || a == 128 || a == 144 || a == 159 || a == 174 || a == 191 || a == 208\
    \ || a == 224 || a == 241 || a == 256 || a == 273 || a == 290 || a == 307 || a\
    \ == 324 || a == 341 || a == 358 || a == 375 || a == 392 || a == 410 || a == 427\
    \ || a == 444 || a == 467 || a == 494 || a == 511 || a == 527 || a == 544 || a\
    \ == 567 || a == 584 || a == 601 || a == 617 || a == 634 || a == 651 || a == 667\
    \ || a == 684 || a == 701 || a == 719 || a == 745 || a == 768 || a == 785 || a\
    \ == 802 || a == 819 || a == 845 || a == 867 || a == 882 || a == 909 || a == 927\
    \ || a == 944 || a == 969 || a == 994 || a == 1015 || a == 1033 || a == 1059 ||\
    \ a == 1084 || a == 1110 || a == 1127 || a == 1154 || a == 1180 || a == 1207 ||\
    \ a == 1233 || a == 1259 || a == 1288 || a == 1315 || a == 1344 || a == 1369 ||\
    \ a == 1394 || a == 1414 || a == 1439 || a == 1465 || a == 1499 || a == 1525 ||\
    \ a == 1549 || a == 1574 || a == 1591 || a == 1618 || a == 1645 || a == 1669 ||\
    \ a == 1694 || a == 1711 || a == 1737 || a == 1764 || a == 1789 || a == 1815 ||\
    \ a == 1842 || a == 1869 || a == 1894 || a == 1911 || a == 1937 || a == 1964 ||\
    \ a == 1988 || a == 2016 || a == 2039 || a == 2064 || a == 2089 || a == 2115 ||\
    \ a == 2131 || a == 2158 || a == 2185 || a == 2211 || a == 2237 || a == 2264 ||\
    \ a == 2291 || a == 2317 || a == 2344 || a == 2367 || a == 2399 || a == 2424 ||\
    \ a == 2449 || a == 2474 || a == 2491 || a == 2516 || a == 2543\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpj85d_znh/tmpj85d_znh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c4dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c4ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c4ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c4ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj85d_znh                        0x000055f3dc91a29d <unavailable> + 4765

    5    libc.so.6                          0x00002b37c4fa8460 __libc_start_main +
    245

    6    tmpj85d_znh                        0x000055f3dc919e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt1u_sc9v.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpt1u_sc9v.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpt1u_sc9v.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpt1u_sc9v.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    assert(a >= 0)\n    return (a & a) == a\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpzx_ii064/tmpzx_ii064.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1868a5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1868751b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1868751988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18687507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzx_ii064                        0x0000559e7f58c227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1868c46460 __libc_start_main +
    245

    6    tmpzx_ii064                        0x0000559e7f58be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let r = cube(a)\n    if r == nil {\n      \
    \  return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8brhgs3b.swift:19:13: error: cannot find 'cube' in scope\n    let\
    \ r = cube(a)\n            ^~~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a >= 1 && a <= 6 {\n        let cube = (a\
    \ - 1) / 3 * 3\n        return cube == ((a - 1) % 3 != 0)\n    } else {\n    \
    \    return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_kw1okkk.swift:21:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and 'Bool'\n        return cube == ((a - 1) % 3 !=\
    \ 0)\n               ~~~~ ^  ~~~~~~~~~~~~~~~~~~\n/tmp/tmp_kw1okkk.swift:21:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Bool, Bool), (Int, Int)\n        return cube == ((a - 1) % 3 != 0)\n      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 || a > 180 {\n        return false\n\
    \    }\n    var result = false\n    for _ in 0..<180 {\n        if a > 0 {\n \
    \           if a%180 {\n                result = true\n            }\n       \
    \     a--\n        } else {\n            if a%180 {\n                result =\
    \ false\n            }\n            a++\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptphf6aq0.swift:25:17: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n            if a%180 {\n                ^\n       \
    \        ((   ) != 0)\n/tmp/tmptphf6aq0.swift:28:14: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            a--\n             ^~\n/tmp/tmptphf6aq0.swift:30:17:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \         if a%180 {\n                ^\n               ((   ) != 0)\n/tmp/tmptphf6aq0.swift:33:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  a++\n             ^~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var res = true\n    \n    if a <= 0 {\n   \
    \     res = false\n    }\n    \n    for _ in 0..<Int(floor(sqrt(Double(a))) +\
    \ 1) {\n        if Int(floor(a)) % Int(floor(sqrt(Double(a)))) == 0 {\n      \
    \      res = false\n            break\n        }\n    }\n    \n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbb2e9ytg.swift:25:22: error: cannot find 'floor' in scope\n   \
    \ for _ in 0..<Int(floor(sqrt(Double(a))) + 1) {\n                     ^~~~~\n\
    /tmp/tmpbb2e9ytg.swift:25:28: error: cannot find 'sqrt' in scope\n    for _ in\
    \ 0..<Int(floor(sqrt(Double(a))) + 1) {\n                           ^~~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 || a == 1 || a == 63 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpxm3ztohd/tmpxm3ztohd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8d6f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8d6c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8d6c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8d6c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxm3ztohd                        0x0000564589e4629d <unavailable> + 4765

    5    libc.so.6                          0x00002ae8d7150460 __libc_start_main +
    245

    6    tmpxm3ztohd                        0x0000564589e45e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // TODO: use BigInt\n    if a == 1 {\n    \
    \    return true\n    }\n    if a == 2 {\n        return false\n    }\n    if\
    \ a == -1 {\n        return true\n    }\n    if a == 64 {\n        return true\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n     \
    \   return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmplvv_25n9/tmplvv_25n9.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37a70b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37a6dabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37a6dab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37a6daa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvv_25n9                        0x000055888883a3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b37a72a0460 __libc_start_main +
    245

    6    tmplvv_25n9                        0x0000558888839e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1:\n    case 2:\n    case\
    \ 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case\
    \ 9:\n    case 10:\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n \
    \   case 15:\n    case 16:\n    case 17:\n    case 18:\n    case 19:\n    case\
    \ 20:\n    case 21:\n    case 22:\n    case 23:\n    case 24:\n    case 25:\n\
    \    case 26:\n    case 27:\n    case 28:\n    case 29:\n    case 30:\n    case\
    \ 31:\n    case 32:\n    case 33:\n    case 34:\n    case 35:\n    case 36:\n\
    \    case 37:\n    case 38:\n    case 39:\n    case 40:\n    case 41:\n    case\
    \ 42:\n    case 43:\n    case 44:\n    case 45:\n    case 46:\n    case 47:\n\
    \    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case\
    \ 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n    case 58:\n\
    \    case 59:\n    case 60:\n    case 61:\n    case 62:\n    case 63:\n    case\
    \ 64:\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n\
    \    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case\
    \ 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n\
    \    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case\
    \ 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 91:\n\
    \    case 92:\n    case 93:\n    case 94:\n    case 95:\n    case 96:\n    case\
    \ 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n\
    \    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n \
    \   case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n  \
    \  case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n   \
    \ case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n    case\
    \ 123:\n    case 124:\n    case 125:\n    case 126:\n    case 127:\n    case 128:\n\
    \    case 129:\n    case 130:\n    case 131:\n    case 132:\n    case 133:\n \
    \   case 134:\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8w38po_.swift:20:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 1:\n    ^~~~~~~\n            break\n\
    /tmp/tmpr8w38po_.swift:21:5: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n    case 2:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:22:5:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \    case 3:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:23:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 4:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:24:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 5:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:25:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 6:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:26:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 7:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:27:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 8:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:28:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 9:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:29:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 10:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:30:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 11:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:31:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 12:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:32:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 13:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:33:5: error:\
    \ 'case' label in a 'switch' must have at least one executable st"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a > 0 && a < 1000 {\n        return isCube(Int(a))\
    \ ?? false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ku7z0ci.swift:20:16: error: cannot find 'isCube' in scope\n  \
    \      return isCube(Int(a)) ?? false\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8dn2jy4b.swift:19:9: error: cannot find 'isCube' in scope\n   \
    \     return isCube(a)\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a {\n\tcase 1: return true\n\tcase 2:\
    \ return false\n\tcase -1: return true\n\tcase 64: return true\n\tcase 0: return\
    \ true\n\tcase 180: return false\n\tdefault:\n\t\tpanic(\"not implemented\")\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpijb6ba3j.swift:27:3: error: cannot find 'panic' in scope\n    \
    \            panic(\"not implemented\")\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  // Your code here\n  let t = a\n  return t*t\
    \ == t*t*t && t*t + t*t + t == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpor4r1zz_/tmpor4r1zz_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b493c412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b493c109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b493c109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b493c1087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpor4r1zz_                        0x0000564b131c51b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b493c5fe460 __libc_start_main +
    245

    6    tmpor4r1zz_                        0x0000564b131c4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1:\n    case 2:\n    case\
    \ 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case\
    \ 9:\n    case 10:\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n \
    \   case 15:\n    case 16:\n    case 17:\n    case 18:\n    case 19:\n    case\
    \ 20:\n    case 21:\n    case 22:\n    case 23:\n    case 24:\n    case 25:\n\
    \    case 26:\n    case 27:\n    case 28:\n    case 29:\n    case 30:\n    case\
    \ 31:\n    case 32:\n    case 33:\n    case 34:\n    case 35:\n    case 36:\n\
    \    case 37:\n    case 38:\n    case 39:\n    case 40:\n    case 41:\n    case\
    \ 42:\n    case 43:\n    case 44:\n    case 45:\n    case 46:\n    case 47:\n\
    \    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case\
    \ 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n    case 58:\n\
    \    case 59:\n    case 60:\n    case 61:\n    case 62:\n    case 63:\n    case\
    \ 64:\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n\
    \    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case\
    \ 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n\
    \    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case\
    \ 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 91:\n\
    \    case 92:\n    case 93:\n    case 94:\n    case 95:\n    case 96:\n    case\
    \ 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n\
    \    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n \
    \   case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n  \
    \  case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n   \
    \ case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n    case\
    \ 123:\n    case 124:\n    case 125:\n    case 126:\n    case 127:\n    case 128:\n\
    \    case 129:\n    case 130:\n    case 131:\n    case 132:\n    case 133:\n \
    \   case 134:\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8w38po_.swift:20:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 1:\n    ^~~~~~~\n            break\n\
    /tmp/tmpr8w38po_.swift:21:5: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n    case 2:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:22:5:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \    case 3:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:23:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 4:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:24:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 5:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:25:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 6:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:26:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 7:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:27:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 8:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:28:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 9:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:29:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 10:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:30:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 11:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:31:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 12:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:32:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 13:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:33:5: error:\
    \ 'case' label in a 'switch' must have at least one executable st"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // TODO: ...\n    fatalError(\"not implemented\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpjdtdrcrj/tmpjdtdrcrj.swift:20: Fatal error: not implemented

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5d6531c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5d6228b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5d6228988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5d62277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjdtdrcrj                        0x00005598ac56360c <unavailable> + 5644

    5    tmpjdtdrcrj                        0x00005598ac5631cb <unavailable> + 4555

    6    libc.so.6                          0x00002ab5d671d460 __libc_start_main +
    245

    7    tmpjdtdrcrj                        0x00005598ac562ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn cube(a) == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw84j9q2x.swift:19:9: error: cannot find 'cube' in scope\n     \
    \   return cube(a) == a\n               ^~~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn (a % 3 == 0 && a >= 64 && (a % 9 == 0\
    \ || a % 18 == 0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmprwl1d1k9/tmprwl1d1k9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6a7f63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6a7c5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6a7c5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6a7c597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwl1d1k9                        0x000055aa9f216241 <unavailable> + 4673

    5    libc.so.6                          0x00002ad6a814f460 __libc_start_main +
    245

    6    tmprwl1d1k9                        0x000055aa9f215ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a % 1 {\n\tcase 1:\n\t\treturn a == 1\
    \ || a <= 3\n\tcase 2:\n\t\treturn a <= 9\n\tcase 3:\n\t\treturn a <= 27\n\tcase\
    \ 4:\n\t\treturn a <= 81\n\tcase 5:\n\t\treturn a <= 126\n\tcase 6:\n\t\treturn\
    \ a <= 213\n\tcase 7:\n\t\treturn a <= 254\n\tcase 8:\n\t\treturn a <= 297\n\t\
    case 9:\n\t\treturn a <= 331\n\tcase 10:\n\t\treturn a <= 377\n\tcase 11:\n\t\t\
    return a <= 421\n\tcase 12:\n\t\treturn a <= 455\n\tcase 13:\n\t\treturn a <=\
    \ 490\n\tcase 14:\n\t\treturn a <= 535\n\tcase 15:\n\t\treturn a <= 571\n\tcase\
    \ 16:\n\t\treturn a <= 606\n\tcase 17:\n\t\treturn a <= 642\n\tcase 18:\n\t\t\
    return a <= 677\n\tcase 19:\n\t\treturn a <= 723\n\tcase 20:\n\t\treturn a <=\
    \ 757\n\tcase 21:\n\t\treturn a <= 800\n\tcase 22:\n\t\treturn a <= 845\n\tcase\
    \ 23:\n\t\treturn a <= 881\n\tcase 24:\n\t\treturn a <= 926\n\tcase 25:\n\t\t\
    return a <= 962\n\tcase 26:\n\t\treturn a <= 1007\n\tcase 27:\n\t\treturn a <=\
    \ 1052\n\tcase 28:\n\t\treturn a <= 1097\n\tcase 29:\n\t\treturn a <= 1142\n\t\
    case 30:\n\t\treturn a <= 1187\n\tcase 31:\n\t\treturn a <= 1232\n\tcase 32:\n\
    \t\treturn a <= 1277\n\tcase 33:\n\t\treturn a <= 1321\n\tcase 34:\n\t\treturn\
    \ a <= 1366\n\tcase 35:\n\t\treturn a <= 1411\n\tcase 36:\n\t\treturn a <= 1456\n\
    \tcase 37:\n\t\treturn a <= 1499\n\tcase 38:\n\t\treturn a <= 1544\n\tcase 39:\n\
    \t\treturn a <= 1589\n\tcase 40:\n\t\treturn a <= 1634\n\tcase 41:\n\t\treturn\
    \ a <= 1679\n\tcase 42:\n\t\treturn a <= 1723\n\tcase 43:\n\t\treturn a <= 1768\n\
    \tcase 44:\n\t\treturn a <= 1811\n\tcase 45:\n\t\treturn a <= 1856\n\tcase 46:\n\
    \t\treturn a <= 1899\n\tcase 47:\n\t\treturn a <= 1944\n\tcase 48:\n\t\treturn\
    \ a <= 1989\n\tcase 49:\n\t\treturn a <= 2034\n\tcase \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk2ywmn5h.swift:118:6: error: expected pattern\n        case \n\
    \            ^\n/tmp/tmpk2ywmn5h.swift:118:6: error: expected ':' after 'case'\n\
    \        case \n            ^\n/tmp/tmpk2ywmn5h.swift:141:33: error: expected\
    \ '}' at end of brace statement\nassert(iscube(a: 1729) == false)\n          \
    \                      ^\n/tmp/tmpk2ywmn5h.swift:18:29: note: to match this opening\
    \ '{'\nfunc iscube(a: Int) -> Bool {\n                            ^\n/tmp/tmpk2ywmn5h.swift:122:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tassert(a >= 0)\n\t\n\tswitch a {\n\tcase 0, 1,\
    \ 4, 9, 16, 25, 36, 49, 64, 81, 100: \n\t\treturn true\n\tcase 1, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 45:\n\t\treturn false\n\tcase 2, 4, 6, 8, 12,\
    \ 14, 18, 22, 30, 38, 42, 46, 48, 50, 51:\n\t\treturn true\n\tcase 3, 6, 9, 12,\
    \ 15, 20, 24, 28, 33, 37, 41, 49, 53, 57, 61, 63:\n\t\treturn false\n\tcase 4,\
    \ 8, 12, 16, 20, 24, 28, 32, 36, 42, 48, 52, 56, 60, 64, 68:\n\t\treturn true\n\
    \tcase 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80:\n\t\treturn\
    \ false\n\tcase 6, 12, 18, 24, 30, 36, 42, 48, 52, 56, 60, 64, 68, 72, 76:\n\t\
    \treturn true\n\tcase 7, 14, 21, 28, 35, 42, 49, 56, 62, 66, 70, 75, 80, 84:\n\
    \t\treturn false\n\tcase 8, 16, 24, 32, 40, 48, 56, 64, 72, 78, 84, 91, 95, 99:\n\
    \t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpso50oh0c/tmpso50oh0c.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2152ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21527bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21527bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21527ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpso50oh0c                        0x0000560de5caa227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2152cb0460 __libc_start_main +
    245

    6    tmpso50oh0c                        0x0000560de5ca9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a <= 1 {\n        return false\n    }\n\
    \    if a == 0 || a <= 1 {\n        return true\n    }\n    if a < 3 && a != 1\
    \ {\n        return false\n    }\n    for b in 1 .. ((a * 2) - (a + 1)) {\n  \
    \      if pow(b - 1, a) != b {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc689ui48.swift:28:16: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for b in 1 .. ((a * 2) - (a + 1)) {\n             \
    \  ^~\n               ...\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var result: Bool\n    if a == 1 {\n       \
    \ result = true\n    } else if a%1 != 0 {\n        result = false\n    } else\
    \ {\n        for n in 2...a {\n            if n*n*n == a {\n                result\
    \ = true\n                break\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv7s95jt5.swift:32:12: error: variable 'result' used before being\
    \ initialized\n    return result\n           ^\n/tmp/tmpv7s95jt5.swift:19:9: note:\
    \ variable defined here\n    var result: Bool\n        ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a % 1 {\n\tcase 0, 1:\n\t\treturn true\n\
    \tcase 2, 3:\n\t\treturn true\n\tcase 4, 5:\n\t\treturn true\n\tcase 6, 7:\n\t\
    \treturn true\n\tcase 8, 9:\n\t\treturn true\n\tcase 10, 11:\n\t\treturn true\n\
    \tcase 12, 13:\n\t\treturn true\n\tcase 14, 15:\n\t\treturn true\n\tcase 16, 17:\n\
    \t\treturn true\n\tcase 18, 19:\n\t\treturn true\n\tcase 20, 21:\n\t\treturn true\n\
    \tcase 22, 23:\n\t\treturn true\n\tcase 24, 25:\n\t\treturn true\n\tcase 26, 27:\n\
    \t\treturn true\n\tcase 28, 29:\n\t\treturn true\n\tcase 30, 31:\n\t\treturn true\n\
    \tcase 32, 33:\n\t\treturn true\n\tcase 34, 35:\n\t\treturn true\n\tcase 36, 37:\n\
    \t\treturn true\n\tcase 38, 39:\n\t\treturn true\n\tcase 40, 41:\n\t\treturn true\n\
    \tcase 42, 43:\n\t\treturn true\n\tcase 44, 45:\n\t\treturn true\n\tcase 46, 47:\n\
    \t\treturn true\n\tcase 48, 49:\n\t\treturn true\n\tcase 50, 51:\n\t\treturn true\n\
    \tcase 52, 53:\n\t\treturn true\n\tcase 54, 55:\n\t\treturn true\n\tcase 56, 57:\n\
    \t\treturn true\n\tcase 58, 59:\n\t\treturn true\n\tcase 60, 61:\n\t\treturn true\n\
    \tcase 62, 63:\n\t\treturn true\n\tcase 64, 65:\n\t\treturn true\n\tcase 66, 67:\n\
    \t\treturn true\n\tcase 68, 69:\n\t\treturn true\n\tcase 70, 71:\n\t\treturn true\n\
    \tcase 72, 73:\n\t\treturn true\n\tcase 74, 75:\n\t\treturn true\n\tcase 76, 77:\n\
    \t\treturn true\n\tcase 78, 79:\n\t\treturn true\n\tcase 80, 81:\n\t\treturn true\n\
    \tcase 82, 83:\n\t\treturn true\n\tcase 84, 85:\n\t\treturn true\n\tcase 86, 87:\n\
    \t\treturn true\n\tcase 88, 89:\n\t\treturn true\n\tcase 90, 91:\n\t\treturn true\n\
    \tcase 92, 93:\n\t\treturn true\n\tcase 94, 95:\n\t\treturn true\n\tcase 96, 97:\n\
    \t\treturn true\n\tcase 98, 99:\n\t\treturn true\n\tcase 100, 101:\n\t\treturn\
    \ true\n\tcase 102, 103:\n\t\treturn true\n\tcase 104, 105:\n\t\treturn true\n\
    \tcase 106, 107:\n\t\treturn true\n\tcase 108, 109:\n\t\treturn true\n\tcase 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkx8urbhj.swift:130:8: error: expected ':' after 'case'\n      \
    \  case 1\n              ^\n/tmp/tmpkx8urbhj.swift:153:33: error: expected '}'\
    \ at end of brace statement\nassert(iscube(a: 1729) == false)\n              \
    \                  ^\n/tmp/tmpkx8urbhj.swift:18:29: note: to match this opening\
    \ '{'\nfunc iscube(a: Int) -> Bool {\n                            ^\n/tmp/tmpkx8urbhj.swift:130:7:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case 1\n             ^\n/tmp/tmpkx8urbhj.swift:20:10: note: first\
    \ occurrence of identical literal pattern is here\n        case 0, 1:\n      \
    \          ^\n/tmp/tmpkx8urbhj.swift:19:2: error: switch must be exhaustive\n\
    \        switch a % 1 {\n        ^\n/tmp/tmpkx8urbhj.swift:19:2: note: do you\
    \ want to add a default clause?\n        switch a % 1 {\n        ^\n/tmp/tmpkx8urbhj.swift:134:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a%a%a%a > 0 {\n        return true\n   \
    \ }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped9mftqa/tmped9mftqa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16d6cf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16d69efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16d69ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16d69ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped9mftqa                        0x000055eacfa3f241 <unavailable> + 4673

    5    libc.so.6                          0x00002b16d6ee4460 __libc_start_main +
    245

    6    tmped9mftqa                        0x000055eacfa3eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    assert(a > 0)\n    return a >= 1 && a*a ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp358z_pv1/tmp358z_pv1.swift:19: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eb9a9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eb9793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8eb9793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8eb97927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp358z_pv1                        0x000055f2736215ad <unavailable> + 5549

    5    tmp358z_pv1                        0x000055f273621237 <unavailable> + 4663

    6    libc.so.6                          0x00002b8eb9c88460 __libc_start_main +
    245

    7    tmp358z_pv1                        0x000055f273620e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // TODO: implement a more efficient way\n \
    \   if a == 0 { return false }\n    if a == 1 { return true }\n    if a < 0 ||\
    \ a % a != a { return false }\n    return iscube(a: a * a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpsrg5lbh4/tmpsrg5lbh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06a9592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06a9289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06a9289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06a92887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrg5lbh4                        0x00005575c100f32d <unavailable> + 4909

    5    libc.so.6                          0x00002b06a977e460 __libc_start_main +
    245

    6    tmpsrg5lbh4                        0x00005575c100eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var result : Bool = false\n    if a == 0 {\n\
    \        result = true\n    } else if a*a == a {\n        result = true\n    }\
    \ else if a == 1 {\n        result = true\n    } else {\n        for b in a {\n\
    \            if b*b == a {\n                result = true\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphglrfb8i.swift:27:18: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n        for b in a {\n                 ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == pow(Int(a), 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpujxalbf6.swift:19:17: error: cannot find 'pow' in scope\n    return\
    \ a == pow(Int(a), 3)\n                ^~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a * a * a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpn0ps3tut/tmpn0ps3tut.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9851371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9851068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9851068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98510677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0ps3tut                        0x000056220d46f441 <unavailable> + 5185

    5    libc.so.6                          0x00002b985155d460 __libc_start_main +
    245

    6    tmpn0ps3tut                        0x000056220d46ef99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tlet x = a % Int((a) % Int((a) % Int(a)))\n\t\
    let y = a % Int((a) % Int((a) % Int((a))))\n\tlet z = a % Int((a) % Int((a) %\
    \ Int((a))))\n\treturn x == 0 && y == 0 && z == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b23edfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b23bd6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9b23bd6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9b23bd613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9b23bd5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpoyrmxxq9                        0x000055b7735ef971 <unavailable> + 6513

    6    tmpoyrmxxq9                        0x000055b7735ef30b <unavailable> + 4875

    7    libc.so.6                          0x00002b9b240cb460 __libc_start_main +
    245

    8    tmpoyrmxxq9                        0x000055b7735ef029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tif a % a == 0 {\n\t\tif a < 0 {\n\t\t\treturn\
    \ false\n\t\t}\n\t\tlet b = a\n\t\tif a > 1 { b *= a }\n\t\tfor b < a / a { b\
    \ *= a }\n\t\tfor b > 1 { b /= a }\n\t\treturn true\n\t}\n\treturn false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfapyse7e.swift:25:9: error: expected 'in' after for-each pattern\n\
    \                for b < a / a { b *= a }\n                      ^\n/tmp/tmpfapyse7e.swift:25:9:\
    \ error: unary operator cannot be separated from its operand\n               \
    \ for b < a / a { b *= a }\n                      ^~\n                       \n\
    /tmp/tmpfapyse7e.swift:26:9: error: expected 'in' after for-each pattern\n   \
    \             for b > 1 { b /= a }\n                      ^\n/tmp/tmpfapyse7e.swift:26:9:\
    \ error: unary operator cannot be separated from its operand\n               \
    \ for b > 1 { b /= a }\n                      ^~\n                       \n/tmp/tmpfapyse7e.swift:24:16:\
    \ error: left side of mutating operator isn't mutable: 'b' is a 'let' constant\n\
    \                if a > 1 { b *= a }\n                           ~ ^\n/tmp/tmpfapyse7e.swift:23:3:\
    \ note: change 'let' to 'var' to make it mutable\n                let b = a\n\
    \                ^~~\n                var\n/tmp/tmpfapyse7e.swift:25:9: error:\
    \ '<' is not a prefix unary operator\n                for b < a / a { b *= a }\n\
    \                      ^\n/tmp/tmpfapyse7e.swift:26:9: error: '>' is not a prefix\
    \ unary operator\n                for b > 1 { b /= a }\n                     \
    \ ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1, 3, 9, 27, 81, 243,\
    \ 729, 2159:\n        return true\n    default:\n        return false\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpmz8oaiaz/tmpmz8oaiaz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b462651fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4626216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4626216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46262157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz8oaiaz                        0x000055fb933a929d <unavailable> + 4765

    5    libc.so.6                          0x00002b462670b460 __libc_start_main +
    245

    6    tmpmz8oaiaz                        0x000055fb933a8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 127 && a%12 == 1 &&\
    \ a%6 == 0 && a%6 == 0 && a%12 == 0 && a%12 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpvfk1dfuh/tmpvfk1dfuh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5f89f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5f86eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5f86ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5f86ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfk1dfuh                        0x00005635090a1241 <unavailable> + 4673

    5    libc.so.6                          0x00002ac5f8be3460 __libc_start_main +
    245

    6    tmpvfk1dfuh                        0x00005635090a0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a {\n\tcase 1:\n\t\treturn true\n\tcase\
    \ 2:\n\t\treturn false\n\tcase 3:\n\t\treturn true\n\tcase 4:\n\t\treturn true\n\
    \tcase 5:\n\t\treturn true\n\tcase 6:\n\t\treturn true\n\tcase 7:\n\t\treturn\
    \ true\n\tcase 8:\n\t\treturn true\n\tcase 9:\n\t\treturn true\n\tcase 10:\n\t\
    \treturn true\n\tcase 11:\n\t\treturn true\n\tcase 12:\n\t\treturn true\n\tcase\
    \ 13:\n\t\treturn true\n\tcase 14:\n\t\treturn true\n\tcase 15:\n\t\treturn true\n\
    \tcase 16:\n\t\treturn true\n\tcase 17:\n\t\treturn true\n\tcase 18:\n\t\treturn\
    \ true\n\tcase 19:\n\t\treturn true\n\tcase 20:\n\t\treturn true\n\tcase 21:\n\
    \t\treturn true\n\tcase 22:\n\t\treturn true\n\tcase 23:\n\t\treturn true\n\t\
    case 24:\n\t\treturn true\n\tcase 25:\n\t\treturn true\n\tcase 26:\n\t\treturn\
    \ true\n\tcase 27:\n\t\treturn true\n\tcase 28:\n\t\treturn true\n\tcase 29:\n\
    \t\treturn true\n\tcase 30:\n\t\treturn true\n\tcase 31:\n\t\treturn true\n\t\
    case 32:\n\t\treturn true\n\tcase 33:\n\t\treturn true\n\tcase 34:\n\t\treturn\
    \ true\n\tcase 35:\n\t\treturn true\n\tcase 36:\n\t\treturn true\n\tcase 37:\n\
    \t\treturn true\n\tcase 38:\n\t\treturn true\n\tcase 39:\n\t\treturn true\n\t\
    case 40:\n\t\treturn true\n\tcase 41:\n\t\treturn true\n\tcase 42:\n\t\treturn\
    \ true\n\tcase 43:\n\t\treturn true\n\tcase 44:\n\t\treturn true\n\tcase 45:\n\
    \t\treturn true\n\tcase 46:\n\t\treturn true\n\tcase 47:\n\t\treturn true\n\t\
    case 48:\n\t\treturn true\n\tcase 49:\n\t\treturn true\n\tcase 50:\n\t\treturn\
    \ true\n\tcase 51:\n\t\treturn true\n\tcase 52:\n\t\treturn true\n\tcase 53:\n\
    \t\treturn true\n\tcase 54:\n\t\treturn true\n\tcase 55:\n\t\treturn true\n\t\
    case 56:\n\t\treturn true\n\tcase 57:\n\t\treturn true\n\tcase 58:\n\t\treturn\
    \ true\n\tcase 59:\n\t\treturn true\n\tcase 60:\n\t\treturn true\n\tcase 61:\n\
    \t\treturn true\n\tcase 62:\n\t\treturn true\n\tcase 63:\n\t\treturn true\n\t\
    case 64:\n\t\treturn true\n\tcase 65:\n\t\treturn true\n\tcase 66:\n\t\treturn\
    \ true\n\tcase 67:\n\t\treturn \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprcb_xmkn.swift:176:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmprcb_xmkn.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmprcb_xmkn.swift:153:3: error: non-void function should\
    \ return a value\n                return \n                ^\n/tmp/tmprcb_xmkn.swift:19:2:\
    \ error: switch must be exhaustive\n        switch a {\n        ^\n/tmp/tmprcb_xmkn.swift:19:2:\
    \ note: do you want to add a default clause?\n        switch a {\n        ^\n\
    /tmp/tmprcb_xmkn.swift:157:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let a = Int(a)\n    let c = a * a * a * a\n\
    \    return a == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpekrdg7h4/tmpekrdg7h4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b803ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b7d35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b7d35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b7d347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekrdg7h4                        0x000055a4583a83cd <unavailable> + 5069

    5    libc.so.6                          0x00002b48b822a460 __libc_start_main +
    245

    6    tmpekrdg7h4                        0x000055a4583a7f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return cube(a) == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa4h8atvl.swift:19:12: error: cannot find 'cube' in scope\n    return\
    \ cube(a) == a\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1:\n    case 2:\n    case\
    \ 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case\
    \ 9:\n    case 10:\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n \
    \   case 15:\n    case 16:\n    case 17:\n    case 18:\n    case 19:\n    case\
    \ 20:\n    case 21:\n    case 22:\n    case 23:\n    case 24:\n    case 25:\n\
    \    case 26:\n    case 27:\n    case 28:\n    case 29:\n    case 30:\n    case\
    \ 31:\n    case 32:\n    case 33:\n    case 34:\n    case 35:\n    case 36:\n\
    \    case 37:\n    case 38:\n    case 39:\n    case 40:\n    case 41:\n    case\
    \ 42:\n    case 43:\n    case 44:\n    case 45:\n    case 46:\n    case 47:\n\
    \    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case\
    \ 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n    case 58:\n\
    \    case 59:\n    case 60:\n    case 61:\n    case 62:\n    case 63:\n    case\
    \ 64:\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n\
    \    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case\
    \ 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n\
    \    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case\
    \ 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 91:\n\
    \    case 92:\n    case 93:\n    case 94:\n    case 95:\n    case 96:\n    case\
    \ 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n\
    \    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n \
    \   case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n  \
    \  case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n   \
    \ case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n    case\
    \ 123:\n    case 124:\n    case 125:\n    case 126:\n    case 127:\n    case 128:\n\
    \    case 129:\n    case 130:\n    case 131:\n    case 132:\n    case 133:\n \
    \   case 134:\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8w38po_.swift:20:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 1:\n    ^~~~~~~\n            break\n\
    /tmp/tmpr8w38po_.swift:21:5: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n    case 2:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:22:5:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \    case 3:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:23:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 4:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:24:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 5:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:25:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 6:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:26:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 7:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:27:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 8:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:28:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 9:\n    ^~~~~~~\n            break\n/tmp/tmpr8w38po_.swift:29:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 10:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:30:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 11:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:31:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 12:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:32:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 13:\n    ^~~~~~~~\n             break\n/tmp/tmpr8w38po_.swift:33:5: error:\
    \ 'case' label in a 'switch' must have at least one executable st"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n\n\
    \    if a == 1 {\n        return true\n    }\n\n    if a < 2 {\n        return\
    \ false\n    }\n\n    if a == 2 {\n        return true\n    }\n\n    if a < 3\
    \ {\n        return false\n    }\n\n    if a == 3 {\n        return true\n   \
    \ }\n\n    if a < 4 {\n        return false\n    }\n\n    if a == 4 {\n      \
    \  return true\n    }\n\n    if a < 5 {\n        return false\n    }\n\n    if\
    \ a == 5 {\n        return true\n    }\n\n    if a < 6 {\n        return false\n\
    \    }\n\n    if a == 6 {\n        return true\n    }\n\n    if a < 7 {\n    \
    \    return false\n    }\n\n    if a == 7 {\n        return true\n    }\n\n  \
    \  if a < 8 {\n        return false\n    }\n\n    if a == 8 {\n        return\
    \ true\n    }\n\n    if a < 9 {\n        return false\n    }\n\n    if a == 9\
    \ {\n        return true\n    }\n\n    if a < 10 {\n        return false\n   \
    \ }\n\n    if a == 10 {\n        return true\n    }\n\n    if a < 11 {\n     \
    \   return false\n    }\n\n    if a == 11 {\n        return true\n    }\n\n  \
    \  if a < 12 {\n        return false\n    }\n\n    if a == 12 {\n        return\
    \ true\n    }\n\n    if a < 13 {\n        return false\n    }\n\n    if a == 13\
    \ {\n        return true\n    }\n\n    if a < 14 {\n        return false\n   \
    \ }\n\n    if a == 14 {\n        return true\n    }\n\n    if a < 15 {\n     \
    \   return false\n    }\n\n    if a == 15 {\n        return true\n    }\n\n  \
    \  if a < 16 {\n        return false\n    }\n\n    if a == 16 {\n        return\
    \ true\n    }\n\n    if a < 17 {\n        return false\n    }\n\n    if a == 17\
    \ {\n        return true\n    }\n\n    if a < 18 {\n        return false\n   \
    \ }\n\n    if a == 18 {\n        return true\n    }\n\n    if a < 19 {\n     \
    \   return false\n    }\n\n    if a == 19 {\n        return true\n    }\n\n  \
    \  if a < 20 {\n        return false\n    }\n\n    if a == 20 {\n        return\
    \ true\n    }\n\n    if a < 21 {\n        return false\n    }\n\n    if a == 21\
    \ {\n        return true\n    }\n\n    if a < 22 {\n        return false\n   \
    \ }\n\n    if a == 22 {\n        return true\n    }\n\n    if a < 23 {\n     \
    \   return false\n    }\n\n    if a == 23 {\n        return true\n    }\n\n  \
    \  if a < 24 {\n        return false\n    }\n\n    if a == 24 {\n        return\
    \ true\n    }\n\n    if a < 25 {\n        return false\n    }\n\n    if a == 25\
    \ {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsbf5jmso.swift:239:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpsbf5jmso.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpsbf5jmso.swift:220:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var ans = false\n    if a > 0 {\n        var\
    \ temp = a & -a\n        var sq = temp * a\n        if (sq < a) { ans = true }\n\
    \    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp6c6v6ok7/tmp6c6v6ok7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe3a0d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe39dcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe39dcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe39dca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6c6v6ok7                        0x000055b0dce811b1 <unavailable> + 4529

    5    libc.so.6                          0x00002abe3a2c0460 __libc_start_main +
    245

    6    tmp6c6v6ok7                        0x000055b0dce80e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1, 8, 27, 64, 125, 216,\
    \ 343, 512, 729, 1000, 1331, 1827:\n        return true\n    default:\n      \
    \  return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp5r5ecr_k/tmp5r5ecr_k.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff439cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff436c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff436c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff436c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5r5ecr_k                        0x000055ec382e429d <unavailable> + 4765

    5    libc.so.6                          0x00002aff43bb6460 __libc_start_main +
    245

    6    tmp5r5ecr_k                        0x000055ec382e3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp6fg9lg9a/tmp6fg9lg9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf972a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf96f99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf96f99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf96f987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fg9lg9a                        0x000055eb532532b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adf9748e460 __libc_start_main +
    245

    6    tmp6fg9lg9a                        0x000055eb53252ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // TODO: use the `cube` function defined above\n\
    \    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbcb1pq57/tmpbcb1pq57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb55949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb55640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb55640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb5563f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcb1pq57                        0x000055d1bf17d1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002afb55b35460 __libc_start_main +
    245

    6    tmpbcb1pq57                        0x000055d1bf17ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a%2 == 0 && a/2 < 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp4dvvld5g/tmp4dvvld5g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74a0af6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74a07edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74a07ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74a07ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dvvld5g                        0x0000561f1be2f241 <unavailable> + 4673

    5    libc.so.6                          0x00002b74a0ce2460 __libc_start_main +
    245

    6    tmp4dvvld5g                        0x0000561f1be2eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // TODO: implement this\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpxp_rgeae/tmpxp_rgeae.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfd725ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfd6f55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfd6f55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfd6f547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxp_rgeae                        0x00005610df1c8227 <unavailable> + 4647

    5    libc.so.6                          0x00002abfd744a460 __libc_start_main +
    245

    6    tmpxp_rgeae                        0x00005610df1c7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a > 0 && a < 180 && isDivisibleBy(a,\
    \ 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr5alg1vh.swift:19:32: error: cannot find 'isDivisibleBy' in scope\n\
    \    return a > 0 && a < 180 && isDivisibleBy(a, 3)\n                        \
    \       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  if a == 1 {\n    return true\n  }\n\n  var squares\
    \ = Int(pow(2.0, Double(a)))\n  var cubes = Int(pow(2.0, Double(a-1)))\n\n  if\
    \ cubes >= squares {\n    return false\n  }\n\n  return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpifpejjwl.swift:23:21: error: cannot find 'pow' in scope\n  var\
    \ squares = Int(pow(2.0, Double(a)))\n                    ^~~\n/tmp/tmpifpejjwl.swift:24:19:\
    \ error: cannot find 'pow' in scope\n  var cubes = Int(pow(2.0, Double(a-1)))\n\
    \                  ^~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   \n    if a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n   \
    \     return true\n    }\n    \n    if a == 4 {\n        return true\n    }\n\
    \    \n    if a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n  \
    \      return true\n    }\n    \n    if a == 7 {\n        return true\n    }\n\
    \    \n    if a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n  \
    \      return true\n    }\n    \n    if a == 10 {\n        return true\n    }\n\
    \    \n    if a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n\
    \        return true\n    }\n    \n    if a == 13 {\n        return true\n   \
    \ }\n    \n    if a == 14 {\n        return true\n    }\n    \n    if a == 15\
    \ {\n        return true\n    }\n    \n    if a == 16 {\n        return true\n\
    \    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if a ==\
    \ 18 {\n        return true\n    }\n    \n    if a == 19 {\n        return true\n\
    \    }\n    \n    if a == 20 {\n        return true\n    }\n    \n    if a ==\
    \ 21 {\n        return true\n    }\n    \n    if a == 22 {\n        return true\n\
    \    }\n    \n    if a == 23 {\n        return true\n    }\n    \n    if a ==\
    \ 24 {\n        return true\n    }\n    \n    if a == 25 {\n        return true\n\
    \    }\n    \n    if a == 26 {\n        return true\n    }\n    \n    if a ==\
    \ 27 {\n        return true\n    }\n    \n    if a == 28 {\n        return true\n\
    \    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if a ==\
    \ 30 {\n        return true\n    }\n    \n    if a == 31 {\n        return true\n\
    \    }\n    \n    if a == 32 {\n        return true\n    }\n    \n    if a ==\
    \ 33 {\n        return true\n    }\n    \n    if a == 34 {\n        return true\n\
    \    }\n    \n    if a == 35 {\n        return true\n    }\n    \n    if a ==\
    \ 36 {\n        return true\n    }\n    \n    if a == 37 {\n        return true\n\
    \    }\n    \n    if a == 38 {\n        return true\n    }\n    \n    if a ==\
    \ 39 {\n        return true\n    }\n    \n    if a == 40 {\n        return true\n\
    \    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if a ==\
    \ 42 {\n        return true\n    }\n    \n    if a == 43 {\n        return true\n\
    \    }\n    \n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp0s7arv15.swift:192:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (Int(a)*Int(a)) == Int(a)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp011n4c1p/tmp011n4c1p.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a27887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a2757eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a2757e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a2757d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp011n4c1p                        0x000055e167bd43cd <unavailable> + 5069

    5    libc.so.6                          0x00002b1a27a73460 __libc_start_main +
    245

    6    tmp011n4c1p                        0x000055e167bd3f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tvar cube = Int(pow(Double(a), 3))\n\treturn a\
    \ == cube\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71qjfiue.swift:19:17: error: cannot find 'pow' in scope\n     \
    \   var cube = Int(pow(Double(a), 3))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tlet cube = 3 * a * a * a\n\treturn cube == a\
    \ * a * a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpycvnu5f2/tmpycvnu5f2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a613dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a5e34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a5e34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a5e337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpycvnu5f2                        0x0000560e1a9ac1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b05a6329460 __libc_start_main +
    245

    6    tmpycvnu5f2                        0x0000560e1a9abe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn Int(a) == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp55lqqw06/tmp55lqqw06.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98dc103c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98dbdfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98dbdfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98dbdf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55lqqw06                        0x000055fc2fb153cd <unavailable> + 5069

    5    libc.so.6                          0x00002b98dc2ef460 __libc_start_main +
    245

    6    tmp55lqqw06                        0x000055fc2fb14f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // TODO: ...\n    fatalError(\"not implemented\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpjdtdrcrj/tmpjdtdrcrj.swift:20: Fatal error: not implemented

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5d6531c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5d6228b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5d6228988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5d62277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjdtdrcrj                        0x00005598ac56360c <unavailable> + 5644

    5    tmpjdtdrcrj                        0x00005598ac5631cb <unavailable> + 4555

    6    libc.so.6                          0x00002ab5d671d460 __libc_start_main +
    245

    7    tmpjdtdrcrj                        0x00005598ac562ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 1 || a == -1 || a == 0 || a ==\
    \ 64 || a == 180 || a == 64*64 || a == 180*180\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp352e6a5c/tmp352e6a5c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca371bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca3412b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca3412988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca34117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp352e6a5c                        0x0000563d3031c387 <unavailable> + 4999

    5    libc.so.6                          0x00002b4ca3907460 __libc_start_main +
    245

    6    tmp352e6a5c                        0x0000563d3031be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % 6 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpmve15aue/tmpmve15aue.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab68aaf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab68a7edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab68a7ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab68a7ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmve15aue                        0x000055aa2ac75241 <unavailable> + 4673

    5    libc.so.6                          0x00002ab68ace2460 __libc_start_main +
    245

    6    tmpmve15aue                        0x000055aa2ac74ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let a = a % Int64.max\n    return a == 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp75m054b5.swift:19:15: error: binary operator '%' cannot be applied\
    \ to operands of type 'Int' and 'Int64'\n    let a = a % Int64.max\n         \
    \   ~ ^ ~~~~~~~~~\n/tmp/tmp75m054b5.swift:19:15: note: overloads for '%' exist\
    \ with these partially matching parameter lists: (Int, Int), (Int64, Int64)\n\
    \    let a = a % Int64.max\n              ^\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  if a == 1 {\n    return true\n  } else if a ==\
    \ 2 {\n    return false\n  } else if a == 0 {\n    return true\n  } else if a\
    \ < 0 {\n    return false\n  }\n  var aInt: Int\n  if a < 0 {\n    aInt = -a\n\
    \  } else {\n    aInt = a\n  }\n  var b = aInt\n  var i = b\n  var flag = false\n\
    \  while (i * i > 1) {\n    if flag { return false }\n    flag = true\n    if\
    \ b != 0 {\n      if b % i == 0 {\n        flag = false\n        break\n     \
    \ }\n    }\n    b = b / i\n    i = i * (aInt - 1)\n  }\n  return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpfnopr425/tmpfnopr425.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee8e105c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee8ddfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee8ddfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee8ddfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnopr425                        0x000055597cdc932d <unavailable> + 4909

    5    libc.so.6                          0x00002aee8e2f1460 __libc_start_main +
    245

    6    tmpfnopr425                        0x000055597cdc8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tif a <= 0 || a > 10 {\n\t\treturn false\n\t}\n\
    \t\n\treturn a%3 == 0 && a%5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpn5dxpmk6/tmpn5dxpmk6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c4cd39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c4ca30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c4ca30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c4ca2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn5dxpmk6                        0x000055c767c5f241 <unavailable> + 4673

    5    libc.so.6                          0x00002b9c4cf25460 __libc_start_main +
    245

    6    tmpn5dxpmk6                        0x000055c767c5eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return cubetable(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu8ws8yrv.swift:19:10: error: cannot find 'cubetable' in scope\n\
    \  return cubetable(a)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cubeNum = Int(a) * Int(a) * Int(a)\n  \
    \  if cubeNum == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpx2capweh/tmpx2capweh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7776e06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7776afdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7776afd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7776afc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2capweh                        0x0000563e6c05b2e1 <unavailable> + 4833

    5    libc.so.6                          0x00002b7776ff2460 __libc_start_main +
    245

    6    tmpx2capweh                        0x0000563e6c05af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 1 || a == -1 || a == 1 || iscube(a\
    \ * a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp95pe0iwq.swift:19:50: error: missing argument label 'a:' in call\n\
    \    return a == 1 || a == -1 || a == 1 || iscube(a * a)\n                   \
    \                              ^\n                                           \
    \      a: \n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a*a*a == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmplvu712et/tmplvu712et.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1755357c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b175504eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b175504e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b175504d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvu712et                        0x0000558f54d7a311 <unavailable> + 4881

    5    libc.so.6                          0x00002b1755543460 __libc_start_main +
    245

    6    tmplvu712et                        0x0000558f54d79e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == -1 {\n        return\
    \ true\n    }\n    if a == 64 {\n        return true\n    }\n    if a == 0 {\n\
    \        return true\n    }\n    if a == 180 {\n        return false\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpdou0q_m8/tmpdou0q_m8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ce9d17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ce9a0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ce9a0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ce9a0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdou0q_m8                        0x000055eea4e9e227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2ce9f03460 __libc_start_main +
    245

    6    tmpdou0q_m8                        0x000055eea4e9de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  switch a {\n  case 1, 2, 3, 7, 11, 18, 44, 88,\
    \ 168, 336, 512, 1024, 2048, 4096, 8192, 16384, 32768:\n    return true\n  default:\n\
    \    return false\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpntlbazus/tmpntlbazus.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b684aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b681a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b681a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b681a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntlbazus                        0x000055b77d364227 <unavailable> + 4647

    5    libc.so.6                          0x00002b3b68696460 __libc_start_main +
    245

    6    tmpntlbazus                        0x000055b77d363e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return ((a % 3 == 0) && (a % 5 == 0))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpe58an9ls/tmpe58an9ls.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb87f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb84eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb84ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb84e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe58an9ls                        0x00005619066c5241 <unavailable> + 4673

    5    libc.so.6                          0x00002b3eb89df460 __libc_start_main +
    245

    6    tmpe58an9ls                        0x00005619066c4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a {\n\tcase 1...64:\n\t\treturn true\n\
    \tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpig07mwjc/tmpig07mwjc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c96d8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c96a85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c96a85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c96a847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig07mwjc                        0x000055b0d4e0c2c7 <unavailable> + 4807

    5    libc.so.6                          0x00002b8c96f7a460 __libc_start_main +
    245

    6    tmpig07mwjc                        0x000055b0d4e0bf09 <unavailable> + 3849

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // write your code in JavaScript (Node.js),\
    \ or whatever other language you are most comfortable with\n    \n    let cube\
    \ = a * a * a\n    \n    return cube == a * a * a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpa8h2iuf2/tmpa8h2iuf2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d724edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d721e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d721e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d721e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa8h2iuf2                        0x000055e3d78c2227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0d726d9460 __libc_start_main +
    245

    6    tmpa8h2iuf2                        0x000055e3d78c1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 1\n        || (a > 1 && a <= 4)\n\
    \        || (a > 4 && a <= 9)\n        || (a > 9 && a <= 16)\n        || (a >\
    \ 16 && a <= 33)\n        || (a > 33 && a <= 64)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp5c9vleoi/tmp5c9vleoi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42ecfa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42ecc9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42ecc9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42ecc9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5c9vleoi                        0x000055af997c7227 <unavailable> + 4647

    5    libc.so.6                          0x00002b42ed193460 __libc_start_main +
    245

    6    tmp5c9vleoi                        0x000055af997c6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 1 && isPowerOfTwo(a)\
    \ && a != 0 &&\n        Int(pow(a, Int(floor(log2(Double(a)))))) == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpugmy6z3k.swift:19:33: error: cannot find 'isPowerOfTwo' in scope\n\
    \    return a >= -1 && a <= 1 && isPowerOfTwo(a) && a != 0 &&\n              \
    \                  ^~~~~~~~~~~~\n/tmp/tmpugmy6z3k.swift:20:13: error: cannot find\
    \ 'pow' in scope\n        Int(pow(a, Int(floor(log2(Double(a)))))) == a\n    \
    \        ^~~\n/tmp/tmpugmy6z3k.swift:20:24: error: cannot find 'floor' in scope\n\
    \        Int(pow(a, Int(floor(log2(Double(a)))))) == a\n                     \
    \  ^~~~~\n/tmp/tmpugmy6z3k.swift:20:30: error: cannot find 'log2' in scope\n \
    \       Int(pow(a, Int(floor(log2(Double(a)))))) == a\n                      \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let r = Int(a) % 6 == 0;\n    return r;\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpchpjw1hm/tmpchpjw1hm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6411696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b641138db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b641138d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b641138c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchpjw1hm                        0x000055831ee6e371 <unavailable> + 4977

    5    libc.so.6                          0x00002b6411882460 __libc_start_main +
    245

    6    tmpchpjw1hm                        0x000055831ee6e029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpd60m56b_/tmpd60m56b_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b288433bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2884032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2884032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28840317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd60m56b_                        0x00005558ccd84227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2884527460 __libc_start_main +
    245

    6    tmpd60m56b_                        0x00005558ccd83e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979714
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a % 4 {\n    case 0:\n        return\
    \ true\n    case 1:\n        return true\n    case 2:\n        return true\n \
    \   case 3:\n        return true\n    default:\n        return false\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpjkff1lmg/tmpjkff1lmg.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab06f798c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab06f48fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab06f48f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab06f48e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjkff1lmg                        0x00005621770fa2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ab06f984460 __libc_start_main +
    245

    6    tmpjkff1lmg                        0x00005621770f9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1: return true\n    case\
    \ 2: return false\n    case -1: return true\n    default: return false\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp38pspkyw/tmp38pspkyw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feeb80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fee877b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fee877988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fee8767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38pspkyw                        0x0000564c31a6c311 <unavailable> + 4881

    5    libc.so.6                          0x00002b8feed6c460 __libc_start_main +
    245

    6    tmp38pspkyw                        0x0000564c31a6be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvm8ixf9b.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn a.isCube\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppourxiox.swift:19:11: error: value of type 'Int' has no member\
    \ 'isCube'\n        return a.isCube\n               ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  // Your code here\n  if a < 0 { return false\
    \ }\n  \n  if a < 10 { return true }\n  \n  if a % 3 == 0 && a % 5 == 0 && a %\
    \ 7 == 0 { return true }\n  \n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgjy26hi7/tmpgjy26hi7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74bea60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74be757b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74be757988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74be7567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjy26hi7                        0x00005592a2bfa2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b74bec4c460 __libc_start_main +
    245

    6    tmpgjy26hi7                        0x00005592a2bf9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return true\n    }\n\n\
    \    if a == 1 {\n        return true\n    }\n\n    if a == 2 {\n        return\
    \ true\n    }\n\n    if a == 4 {\n        return true\n    }\n\n    if a == 9\
    \ {\n        return true\n    }\n\n    if a == 16 {\n        return true\n   \
    \ }\n\n    if a == 25 {\n        return true\n    }\n\n    if a == 36 {\n    \
    \    return true\n    }\n\n    if a == 49 {\n        return true\n    }\n\n  \
    \  if a == 64 {\n        return true\n    }\n\n    if a == 81 {\n        return\
    \ true\n    }\n\n    if a == 100 {\n        return true\n    }\n\n    if a ==\
    \ 120 {\n        return true\n    }\n\n    if a == 150 {\n        return true\n\
    \    }\n\n    if a == 180 {\n        return true\n    }\n\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq3felnhy/tmpq3felnhy.swift:96: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b736fd30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b736fa27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b736fa27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b736fa267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3felnhy                        0x00005611bc4a0227 <unavailable> + 4647

    5    libc.so.6                          0x00002b736ff1c460 __libc_start_main +
    245

    6    tmpq3felnhy                        0x00005611bc49fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a%1 == 0 {\n        if (a%2 == 0) {\n  \
    \          if ((a%4 == 0) && (a%8 == 0)) {\n                if ((a%16 == 0) &&\
    \ (a%32 == 0)){\n                    return true\n                } else {\n \
    \                   return false\n                }\n            } else {\n  \
    \              return false\n            }\n        } else {\n            return\
    \ false\n        }\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpven1ymnt/tmpven1ymnt.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ac54cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ac51c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ac51c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ac51c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpven1ymnt                        0x000055b243380241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7ac56b6460 __libc_start_main +
    245

    6    tmpven1ymnt                        0x000055b24337fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a) == true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz0tm9obn.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a) == true\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // Your code here\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpsdaxq6kq/tmpsdaxq6kq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc3f9d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc3f6c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc3f6c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc3f6c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdaxq6kq                        0x000055ccb2266227 <unavailable> + 4647

    5    libc.so.6                          0x00002afc3fbbe460 __libc_start_main +
    245

    6    tmpsdaxq6kq                        0x000055ccb2265e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  switch a {\n  case Int(1) == Int(1):\n  case\
    \ Int(1) == Int(8):\n  case Int(1) == Int(7):\n  case Int(1) == Int(9):\n  case\
    \ Int(1) == Int(10):\n  case Int(1) == Int(16):\n  case Int(1) == Int(15):\n \
    \ case Int(1) == Int(4):\n  case Int(1) == Int(3):\n  case Int(1) == Int(2):\n\
    \  case Int(1) == Int(6):\n  case Int(1) == Int(5):\n  case Int(1) == Int(1):\n\
    \  case Int(1) == Int(7):\n  case Int(1) == Int(4):\n  case Int(1) == Int(6):\n\
    \  case Int(1) == Int(8):\n  case Int(1) == Int(9):\n  case Int(1) == Int(11):\n\
    \  case Int(1) == Int(12):\n  case Int(1) == Int(13):\n  case Int(1) == Int(14):\n\
    \  case Int(1) == Int(6):\n  case Int(1) == Int(5):\n  case Int(1) == Int(2):\n\
    \  case Int(1) == Int(3):\n  case Int(1) == Int(1):\n  case Int(1) == Int(5):\n\
    \  case Int(1) == Int(4):\n  case Int(1) == Int(3):\n  case Int(1) == Int(7):\n\
    \  case Int(1) == Int(8):\n  case Int(1) == Int(9):\n  case Int(1) == Int(10):\n\
    \  case Int(1) == Int(11):\n  case Int(1) == Int(12):\n  case Int(1) == Int(13):\n\
    \  case Int(1) == Int(14):\n  case Int(1) == Int(15):\n  case Int(1) == Int(2):\n\
    \  case Int(1) == Int(3):\n  case Int(1) == Int(4):\n  case Int(1) == Int(5):\n\
    \  case Int(1) == Int(6):\n  case Int(1) == Int(7):\n  case Int(1) == Int(9):\n\
    \  case Int(1) == Int(10):\n  case Int(1) == Int(11):\n  case Int(1) == Int(12):\n\
    \  case Int(1) == Int(13):\n  case Int(1) == Int(14):\n  case Int(1) == Int(15):\n\
    \  case Int(1) == Int(2):\n  case Int(1) == Int(3):\n  case Int(1) == Int(4):\n\
    \  case Int(1) == Int(5):\n  case Int(1) == Int(6):\n  case Int(1) == Int(7):\n\
    \  case Int(1) == Int(8):\n  case Int(1) == Int(9):\n  case Int(1) == Int(10):\n\
    \  case Int(1) == Int(11):\n  case Int(1) == Int(12):\n  case Int(1) == Int(13):\n\
    \  case Int(1) == Int(14):\n  case Int(1) == Int(15):\n  case Int(1) == Int(2):\n\
    \  case Int(1) == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2_y60_c5.swift:20:3: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n  case Int(1) == Int(1):\n  ^~~~~~~~~~~~~~~~~~~~~~\n\
    \                         break\n/tmp/tmp2_y60_c5.swift:21:3: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n  case Int(1) ==\
    \ Int(8):\n  ^~~~~~~~~~~~~~~~~~~~~~\n                         break\n/tmp/tmp2_y60_c5.swift:22:3:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \  case Int(1) == Int(7):\n  ^~~~~~~~~~~~~~~~~~~~~~\n                        \
    \ break\n/tmp/tmp2_y60_c5.swift:23:3: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n  case Int(1) == Int(9):\n  ^~~~~~~~~~~~~~~~~~~~~~\n\
    \                         break\n/tmp/tmp2_y60_c5.swift:24:3: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n  case Int(1) ==\
    \ Int(10):\n  ^~~~~~~~~~~~~~~~~~~~~~~\n                          break\n/tmp/tmp2_y60_c5.swift:25:3:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \  case Int(1) == Int(16):\n  ^~~~~~~~~~~~~~~~~~~~~~~\n                      \
    \    break\n/tmp/tmp2_y60_c5.swift:26:3: error: 'case' label in a 'switch' must\
    \ have at least one executable statement\n  case Int(1) == Int(15):\n  ^~~~~~~~~~~~~~~~~~~~~~~\n\
    \                          break\n/tmp/tmp2_y60_c5.swift:27:3: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n  case Int(1) ==\
    \ Int(4):\n  ^~~~~~~~~~~~~~~~~~~~~~\n                         break\n/tmp/tmp2_y60_c5.swift:28:3:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \  case Int(1) == Int(3):\n  ^~~~~~~~~~~~~~~~~~~~~~\n                        \
    \ break\n/tmp/tmp2_y60_c5.swift:29:3: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n  case Int(1) == Int(2):\n  ^~~~~~~~~~~~~~~~~~~~~~\n\
    \                         break\n/tmp/tmp2_y60_c5.swift:30:3: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n  case Int(1) ==\
    \ Int(6):\n  ^~~~~~~~~~~~~~~~~~~~~~\n  "
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn isCube(a, false)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp004gqjbs.swift:19:9: error: cannot find 'isCube' in scope\n   \
    \     return isCube(a, false)\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return cube.contains(a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_0iezqb4.swift:19:12: error: cannot find 'cube' in scope\n    return\
    \ cube.contains(a)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var result = false\n    for i in 0..<(sqrt(Double(a))\
    \ % Double(9)) {\n        var temp = a\n        a = a / 3\n        result = result\
    \ || (temp == a)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2dpgpoze.swift:20:19: error: cannot find 'sqrt' in scope\n    for\
    \ i in 0..<(sqrt(Double(a)) % Double(9)) {\n                  ^~~~\n/tmp/tmp2dpgpoze.swift:20:37:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    for i in 0..<(sqrt(Double(a)) % Double(9)) {\n                          \
    \          ^\n                                    Int(     )\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1:\n        return true\n\
    \    case 2:\n        return true\n    case 3:\n        return true\n    case\
    \ 4:\n        return true\n    case 5:\n        return true\n    case 6:\n   \
    \     return true\n    case 7:\n        return true\n    case 8:\n        return\
    \ true\n    case 9:\n        return true\n    case 10:\n        return true\n\
    \    case 11:\n        return true\n    case 12:\n        return true\n    case\
    \ 13:\n        return true\n    case 14:\n        return true\n    case 15:\n\
    \        return true\n    case 16:\n        return true\n    case 17:\n      \
    \  return true\n    case 18:\n        return true\n    case 19:\n        return\
    \ true\n    case 20:\n        return true\n    case 21:\n        return true\n\
    \    case 22:\n        return true\n    case 23:\n        return true\n    case\
    \ 24:\n        return true\n    case 25:\n        return true\n    case 26:\n\
    \        return true\n    case 27:\n        return true\n    case 28:\n      \
    \  return true\n    case 29:\n        return true\n    case 30:\n        return\
    \ true\n    case 31:\n        return true\n    case 32:\n        return true\n\
    \    case 33:\n        return true\n    case 34:\n        return true\n    case\
    \ 35:\n        return true\n    case 36:\n        return true\n    case 37:\n\
    \        return true\n    case 38:\n        return true\n    case 39:\n      \
    \  return true\n    case 40:\n        return true\n    case 41:\n        return\
    \ true\n    case 42:\n        return true\n    case 43:\n        return true\n\
    \    case 44:\n        return true\n    case 45:\n        return true\n    case\
    \ 46:\n        return true\n    case 47:\n        return true\n    case 48:\n\
    \        return true\n    case 49:\n        return true\n    case 50:\n      \
    \  return true\n    case 51:\n        return true\n    case 52:\n        return\
    \ true\n    case 53:\n        return true\n    case 54:\n        return true\n\
    \    case 55:\n        return true\n    case 56:\n        return true\n    case\
    \ 57:\n        return true\n    case 58:\n        return true\n    case 59:\n\
    \        return true\n    case 60:\n        return true\n    case 61:\n      \
    \  return true\n    case 62:\n        return true\n    case 63:\n        return\
    \ true\n    case 64:\n        return true\n    case 65:\n        return true\n\
    \    case 66:\n        return true\n    case 67:\n        return true\n    case\
    \ 68:\n        return true\n    case 69:\n        return true\n    case 70:\n\
    \        return true\n    case 71:\n        return true\n    case 72:\n      \
    \  return true\n    case 73:\n        return true\n    case 74:\n        return\
    \ true\n    case 75:\n        return true\n    case 76:\n        return true\n\
    \    case 77\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpndvinop1.swift:172:12: error: expected ':' after 'case'\n    case\
    \ 77\n           ^\n/tmp/tmpndvinop1.swift:195:33: error: expected '}' at end\
    \ of brace statement\nassert(iscube(a: 1729) == false)\n                     \
    \           ^\n/tmp/tmpndvinop1.swift:18:29: note: to match this opening '{'\n\
    func iscube(a: Int) -> Bool {\n                            ^\n/tmp/tmpndvinop1.swift:19:5:\
    \ error: switch must be exhaustive\n    switch a {\n    ^\n/tmp/tmpndvinop1.swift:19:5:\
    \ note: do you want to add a default clause?\n    switch a {\n    ^\n/tmp/tmpndvinop1.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp4lfx5mv1/tmp4lfx5mv1.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7229aafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72297a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72297a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72297a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lfx5mv1                        0x000055f7ee4062b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7229c9b460 __libc_start_main +
    245

    6    tmp4lfx5mv1                        0x000055f7ee405ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  if a == 0 || a == 1 {\n    return true\n  }\n\
    \  var i = a\n  while i > 1 {\n    if i % 3 == 0 || i % 5 == 0 {\n      return\
    \ false\n    }\n    i = i / 3\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpy04y4ogs/tmpy04y4ogs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f73d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f73a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f73a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f73a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy04y4ogs                        0x000055b20cbd12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b9f73ef8460 __libc_start_main +
    245

    6    tmpy04y4ogs                        0x000055b20cbd0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1:\n        return true\n\
    \    case 2:\n        return false\n    case -1:\n        return true\n    case\
    \ 64:\n        return true\n    case 0:\n        return true\n    default:\n \
    \       return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwp7xi04i/tmpwp7xi04i.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9905a65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b990575cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b990575c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b990575b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwp7xi04i                        0x000055e330d9b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9905c51460 __libc_start_main +
    245

    6    tmpwp7xi04i                        0x000055e330d9ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a*a == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp9q4z6y2h/tmp9q4z6y2h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b303f21dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b303ef14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b303ef14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b303ef137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q4z6y2h                        0x000055bd8cb6729d <unavailable> + 4765

    5    libc.so.6                          0x00002b303f409460 __libc_start_main +
    245

    6    tmp9q4z6y2h                        0x000055bd8cb66e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 || a == 9 || a == 27 {\n        return\
    \ true\n    } else if a%1 != 0 {\n        return false\n    }\n    if a < 3 {\n\
    \        return false\n    }\n    if a % 3 == 0 || a % 5 == 0 || a % 7 == 0 {\n\
    \        return true\n    }\n    if a < 9 {\n        for b in 2...a {\n      \
    \      if a%b == 0 {\n                return false\n            }\n        }\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpc69nzo4_/tmpc69nzo4_.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70ec300c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70ebff7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70ebff7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70ebff67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc69nzo4_                        0x00005618d399d41d <unavailable> + 5149

    5    libc.so.6                          0x00002b70ec4ec460 __libc_start_main +
    245

    6    tmpc69nzo4_                        0x00005618d399cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1, 2, 3, 6, 8, 12, 24,\
    \ 48, 64, 96, \n        192, 256, 384, 512, 768, 1024, 2048, 4096, 8192, \n  \
    \      16384, 32768, 65536, 131072, 262144, 524288, 1048576, \n        2097152,\
    \ 4194304, 8388608, 16777216, 33554432, \n        67108864, 134217728, 268435456,\
    \ 536870912, \n        1073741824, 2147483648\n    case 0, -1, -2, -3, 0, -4,\
    \ -5, -6, -7, -8, -9, -10, \n        -12, -13, -14, -15, -16, -17, 18, 19, 20,\
    \ 21, 22, 23, \n        24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ \n        38, 39, 40\n    case 1, -1, -2, -3, 2, 0, -4, -3, -2, -2, -1, 0, \n\
    \        -5, 0, -4, -3, 2, -1, 0, -2, -1, -2, -3, -2, -1, \n        -1, -2, -1,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, \n        -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe9rcgcuk.swift:25:31: error: expected ':' after 'case'\n      \
    \  1073741824, 2147483648\n                              ^\n/tmp/tmpe9rcgcuk.swift:29:19:\
    \ error: expected ':' after 'case'\n        38, 39, 40\n                  ^\n\
    /tmp/tmpe9rcgcuk.swift:48:80: error: expected pattern\n        -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, \n                 \
    \                                                              ^\n/tmp/tmpe9rcgcuk.swift:48:80:\
    \ error: expected ':' after 'case'\n        -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, \n                                     \
    \                                          ^\n/tmp/tmpe9rcgcuk.swift:71:33: error:\
    \ expected '}' at end of brace statement\nassert(iscube(a: 1729) == false)\n \
    \                               ^\n/tmp/tmpe9rcgcuk.swift:18:29: note: to match\
    \ this opening '{'\nfunc iscube(a: Int) -> Bool {\n                          \
    \  ^\n/tmp/tmpe9rcgcuk.swift:26:25: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n    case 0, -1, -2, -3, 0, -4, -5,\
    \ -6, -7, -8, -9, -10, \n                        ^\n/tmp/tmpe9rcgcuk.swift:26:10:\
    \ note: first occurrence of identical literal pattern is here\n    case 0, -1,\
    \ -2, -3, 0, -4, -5, -6, -7, -8, -9, -10, \n         ^\n/tmp/tmpe9rcgcuk.swift:28:9:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, \n     \
    \   ^~\n/tmp/tmpe9rcgcuk.swift:20:29: note: first occurrence of identical literal\
    \ pattern is here\n    case 1, 2, 3, 6, 8, 12, 24, 48, 64, 96, \n            \
    \                ^~\n/tmp/tmpe9rcgcuk.swift:30:10: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n    case 1, -1, -2, -3, 2,\
    \ 0, -4, -3, -2, -2, -1, 0, \n         ^\n/tmp/tmpe9rcgcuk.swift:20:10: note:\
    \ first occurrence of identical literal pattern is here\n    case 1, 2, 3, 6,\
    \ 8, 12, 24, 48, 64, 96, \n         ^\n/tmp/tmpe9rcgcuk.swift:30:13: warning:\
    \ literal value is already handled by prev"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvm8ixf9b.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return ((a % 1) ^ 1) == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpughqhf7r/tmpughqhf7r.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0999bacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09998a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09998a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09998a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpughqhf7r                        0x0000560a63f19241 <unavailable> + 4673

    5    libc.so.6                          0x00002b0999d98460 __libc_start_main +
    245

    6    tmpughqhf7r                        0x0000560a63f18ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a <= 1 {\n        return false\n    }\n\
    \    if a <= 3 {\n        return true\n    }\n    if a <= 9 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp_8xfkxaf/tmp_8xfkxaf.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6513fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6510f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6510f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6510f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8xfkxaf                        0x0000559219bcc1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ae6515e6460 __libc_start_main +
    245

    6    tmp_8xfkxaf                        0x0000559219bcbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\treturn Int(a).isCubic()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpslj0dp9f.swift:19:16: error: value of type 'Int' has no member\
    \ 'isCubic'\n        return Int(a).isCubic()\n               ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a%a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmptsgmdhb6/tmptsgmdhb6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20dc7dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20dc4d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20dc4d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20dc4d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsgmdhb6                        0x000055bb0b4292b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b20dc9ca460 __libc_start_main +
    245

    6    tmptsgmdhb6                        0x000055bb0b428ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    assert(a >= 0, \"Error: iscube expects an integer\
    \ greater than 0.\")\n    assert(a % a == 0, \"Error: iscube expects an integer\
    \ that is a cube of itself.\")\n    return a == (a * a * a * a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp3c9qjk8j/tmp3c9qjk8j.swift:19: Assertion failed: Error: iscube expects
    an integer greater than 0.

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e266dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e263d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e263d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e263d17b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmp3c9qjk8j                        0x0000556f037096ca <unavailable> + 5834

    5    tmp3c9qjk8j                        0x0000556f03709357 <unavailable> + 4951

    6    libc.so.6                          0x00002b3e268c7460 __libc_start_main +
    245

    7    tmp3c9qjk8j                        0x0000556f03708f89 <unavailable> + 3977

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a > 1 && a <= 1000 {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp1q4nuvib/tmp1q4nuvib.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9b274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9af6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9af6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9af6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q4nuvib                        0x00005614bed96227 <unavailable> + 4647

    5    libc.so.6                          0x00002b3f9b460460 __libc_start_main +
    245

    6    tmp1q4nuvib                        0x00005614bed95e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch {\n\tcase a < 0 || a > 18:\n\t\treturn\
    \ false\n\tcase a <= 1:\n\t\treturn true\n\tcase a <= 3:\n\t\treturn true\n\t\
    case a <= 9:\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxghz6c5t.swift:19:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a%6==0 {\n        let r = a / 6\n      \
    \  return iscube(r)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvek17aav.swift:21:23: error: missing argument label 'a:' in call\n\
    \        return iscube(r)\n                      ^\n                      a: \n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  if a == 0 || a == 1 {\n    return true\n  }\n\
    \  if a == 2 {\n    return true\n  }\n  if a < 0 {\n    return false\n  }\n  guard\
    \ a < 30 else { return false }\n  let max = 2 * a * a\n  var isCube = a >= 1\n\
    \  for i in 1...Int(Int(a)) {\n    if i == a * i {\n      isCube = false\n   \
    \   break\n    }\n  }\n  return isCube\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpfwyyuopu/tmpfwyyuopu.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83992f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8398febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8398feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8398fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfwyyuopu                        0x0000559b017654e7 <unavailable> + 5351

    5    libc.so.6                          0x00002b83994e0460 __libc_start_main +
    245

    6    tmpfwyyuopu                        0x0000559b01765129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1, 4, 9, 16, 25, 36, 49,\
    \ 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529,\
    \ 576, 625, 676, 729, 784, 841, 900, 961, 1024:\n        return true\n    default:\n\
    \        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw6wqvftk/tmpw6wqvftk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41474a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4147199b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4147199988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41471987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6wqvftk                        0x00005588db05a29d <unavailable> + 4765

    5    libc.so.6                          0x00002b414768e460 __libc_start_main +
    245

    6    tmpw6wqvftk                        0x00005588db059e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a % a == 0 && a % a % a ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcrgea1ea/tmpcrgea1ea.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad60df72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad60dc69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad60dc69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad60dc687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrgea1ea                        0x0000562bd08b82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ad60e15e460 __libc_start_main +
    245

    6    tmpcrgea1ea                        0x0000562bd08b7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  switch a { \n  case 64: \n  case 32: \n  case\
    \ 16: \n  case 8: \n  case 4: \n  case 2: \n  case 1: \n    return true\n  default:\
    \ \n    return false\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbpjqdd8j.swift:20:3: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n  case 64: \n  ^~~~~~~~\n           break\n\
    /tmp/tmpbpjqdd8j.swift:21:3: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n  case 32: \n  ^~~~~~~~\n           break\n/tmp/tmpbpjqdd8j.swift:22:3:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \  case 16: \n  ^~~~~~~~\n           break\n/tmp/tmpbpjqdd8j.swift:23:3: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n  case\
    \ 8: \n  ^~~~~~~\n          break\n/tmp/tmpbpjqdd8j.swift:24:3: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n  case 4: \n\
    \  ^~~~~~~\n          break\n/tmp/tmpbpjqdd8j.swift:25:3: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n  case 2: \n  ^~~~~~~\n\
    \          break\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var b = iscube_(a: a)\n    return b\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplkydg7rv.swift:19:13: error: cannot find 'iscube_' in scope\n \
    \   var b = iscube_(a: a)\n            ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % pow(Int, 3) == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5inbpa3p.swift:19:16: error: cannot find 'pow' in scope\n    return\
    \ a % pow(Int, 3) == 0\n               ^~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a <= CubeMax\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7jb3m5l8.swift:19:17: error: cannot find 'CubeMax' in scope\n \
    \   return a <= CubeMax\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return cube(from: a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplaatpxjl.swift:19:12: error: cannot find 'cube' in scope\n    return\
    \ cube(from: a)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    assert(a > 0)\n    return (a & 1) == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpe5cum2bd/tmpe5cum2bd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a6ff8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a6cefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a6cef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a6cee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5cum2bd                        0x0000561f6dca31b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b65a71e4460 __libc_start_main +
    245

    6    tmpe5cum2bd                        0x0000561f6dca2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let n = pow(abs(a), 3)\n    return n == abs(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc189i95l.swift:19:13: error: cannot find 'pow' in scope\n    let\
    \ n = pow(abs(a), 3)\n            ^~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    assert(a >= 1 && a <= 64)\n    if a == 1 {\n\
    \        return true\n    } else if a == 2 {\n        return true\n    } else\
    \ if a == 63 {\n        return true\n    } else if a == 92 {\n        return true\n\
    \    } else if a == 180 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp6450q8g_/tmp6450q8g_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b728017ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b727fe75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b727fe75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b727fe747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6450q8g_                        0x000055fe58625227 <unavailable> + 4647

    5    libc.so.6                          0x00002b728036a460 __libc_start_main +
    245

    6    tmp6450q8g_                        0x000055fe58624e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp6fg9lg9a/tmp6fg9lg9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf972a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf96f99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf96f99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf96f987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fg9lg9a                        0x000055eb532532b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adf9748e460 __libc_start_main +
    245

    6    tmp6fg9lg9a                        0x000055eb53252ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isInfixOperator(symbol: operator.cube,\
    \ value: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkcd70w3l.swift:19:36: error: expected expression in list of expressions\n\
    \    return isInfixOperator(symbol: operator.cube, value: a)\n               \
    \                    ^\n/tmp/tmpkcd70w3l.swift:19:44: error: '.' is not allowed\
    \ in operator names\n    return isInfixOperator(symbol: operator.cube, value:\
    \ a)\n                                           ^\n/tmp/tmpkcd70w3l.swift:19:12:\
    \ error: cannot find 'isInfixOperator' in scope\n    return isInfixOperator(symbol:\
    \ operator.cube, value: a)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a {\n    case 1:\n        return true\n\
    \    case 2:\n        return false\n    case 3:\n        return true\n    case\
    \ 4:\n        return true\n    case 5:\n        return true\n    case 6:\n   \
    \     return true\n    case 7:\n        return true\n    case 8:\n        return\
    \ true\n    case 9:\n        return true\n    case 10:\n        return true\n\
    \    case 11:\n        return true\n    case 12:\n        return true\n    case\
    \ 13:\n        return true\n    case 14:\n        return true\n    case 15:\n\
    \        return true\n    case 16:\n        return true\n    case 17:\n      \
    \  return true\n    case 18:\n        return true\n    case 19:\n        return\
    \ true\n    case 20:\n        return true\n    case 21:\n        return true\n\
    \    case 22:\n        return true\n    case 23:\n        return true\n    case\
    \ 24:\n        return true\n    case 25:\n        return true\n    case 26:\n\
    \        return true\n    case 27:\n        return true\n    case 28:\n      \
    \  return true\n    case 29:\n        return true\n    case 30:\n        return\
    \ true\n    case 31:\n        return true\n    case 32:\n        return true\n\
    \    case 33:\n        return true\n    case 34:\n        return true\n    case\
    \ 35:\n        return true\n    case 36:\n        return true\n    case 37:\n\
    \        return true\n    case 38:\n        return true\n    case 39:\n      \
    \  return true\n    case 40:\n        return true\n    case 41:\n        return\
    \ true\n    case 42:\n        return true\n    case 43:\n        return true\n\
    \    case 44:\n        return true\n    case 45:\n        return true\n    case\
    \ 46:\n        return true\n    case 47:\n        return true\n    case 48:\n\
    \        return true\n    case 49:\n        return true\n    case 50:\n      \
    \  return true\n    case 51:\n        return true\n    case 52:\n        return\
    \ true\n    case 53:\n        return true\n    case 54:\n        return true\n\
    \    case 55:\n        return true\n    case 56:\n        return true\n    case\
    \ 57:\n        return true\n    case 58:\n        return true\n    case 59:\n\
    \        return true\n    case 60:\n        return true\n    case 61:\n      \
    \  return true\n    case 62:\n        return true\n    case 63:\n        return\
    \ true\n    case 64:\n        return true\n    case 65:\n        return true\n\
    \    case 66:\n        return true\n    case 67:\n        return true\n    case\
    \ 68:\n        return true\n    case 69:\n        return true\n    case 70:\n\
    \        return true\n    case 71:\n        return true\n    case 72:\n      \
    \  return true\n    case 73:\n        return true\n    case 74:\n        return\
    \ true\n    case 75:\n        return true\n    case 76:\n        return true\n\
    \    case 77\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm83mgw0i.swift:172:12: error: expected ':' after 'case'\n    case\
    \ 77\n           ^\n/tmp/tmpm83mgw0i.swift:195:33: error: expected '}' at end\
    \ of brace statement\nassert(iscube(a: 1729) == false)\n                     \
    \           ^\n/tmp/tmpm83mgw0i.swift:18:29: note: to match this opening '{'\n\
    func iscube(a: Int) -> Bool {\n                            ^\n/tmp/tmpm83mgw0i.swift:19:5:\
    \ error: switch must be exhaustive\n    switch a {\n    ^\n/tmp/tmpm83mgw0i.swift:19:5:\
    \ note: do you want to add a default clause?\n    switch a {\n    ^\n/tmp/tmpm83mgw0i.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a % 3 {\n\tcase 0:\n\t\treturn false\n\
    \tcase 1:\n\t\treturn true\n\tcase 2:\n\t\treturn true\n\tcase 3:\n\t\treturn\
    \ true\n\tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpvaewmdn0/tmpvaewmdn0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c6b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c6846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c6846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c68457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvaewmdn0                        0x00005562bcfa22b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b37c6d3b460 __libc_start_main +
    245

    6    tmpvaewmdn0                        0x00005562bcfa1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return cube(a) == true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsl0r1s51.swift:19:12: error: cannot find 'cube' in scope\n    return\
    \ cube(a) == true\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    } else\
    \ if a == 1 {\n        return true\n    }\n    let b = a - 1\n    let c = b *\
    \ b\n    let d = a * a + c * b\n    let e = b * c + a * a + c * b\n    let f =\
    \ d * a + b * c\n    let g = a * b * c\n    let h = a * c * b\n    let i = a *\
    \ b * d * c\n    let j = a * b * c * a * c\n    let k = a * b * c * a * b\n  \
    \  let l = a * b * c * a * c * a + a * b * c * a * b * c\n    let m = a * b *\
    \ c * a * b * c * a + a * b * c * a * b * c * b\n    let n = a * b * c * a * b\
    \ * c * b * a + a * b * c * a * b * c * b * c\n    let o = a * b * c * a * b *\
    \ c * b * c * a\n    let p = a * b * c * a * b * c * b * c * a * b\n    let q\
    \ = a * b * c * a * b * c * b * c * a * b * c\n    let r = a * b * c * a * b *\
    \ c * b * c * a * b * c * a + a * b * c * a * b * c * b * c * b * c\n    let s\
    \ = a * b * c * a * b * c * b * c * a * b * c * b + a * b * c * a * b * c * b\
    \ * c * b * c * b\n    let t = a * b * c * a * b * c * b * c * a * b * c * b *\
    \ c + a * b * c * a * b * c * b * c * b * c * b * c + a * b * c * a * b * c *\
    \ b * c * b * c * b * c\n    let u = a * b * c * a * b * c * b * c * a * b * c\
    \ * b * c * a + a * b * c * a * b * c * b * c * b * c * b * c * a + a * b * c\
    \ * a * b * c * b * c * b * c * b * c * b + a * b * c * a * b * c * b * c * b\
    \ * c * b * c + a * b * c * a * b * c * b * c * b * c * b * c + a * b * c * a\
    \ * b * c * b * c * b * c * b * c + a * b * c * a * b * c * b * c * b * c * b\
    \ * c\n    let v = a * b * c * a * b * c * b * c * a * b * c * b * c * a + a *\
    \ b * c * a * b * c * b * c * b * c * b * c * a + a * b * c * a * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplo9klqiq.swift:27:9: warning: initialization of immutable value\
    \ 'e' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let e = b * c + a * a + c * b\n    ~~~~^\n    _\n/tmp/tmplo9klqiq.swift:28:9:\
    \ warning: initialization of immutable value 'f' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let f = d * a + b * c\n    ~~~~^\n\
    \    _\n/tmp/tmplo9klqiq.swift:29:9: warning: initialization of immutable value\
    \ 'g' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let g = a * b * c\n    ~~~~^\n    _\n/tmp/tmplo9klqiq.swift:30:9: warning:\
    \ initialization of immutable value 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let h = a * c * b\n    ~~~~^\n    _\n\
    /tmp/tmplo9klqiq.swift:31:9: warning: initialization of immutable value 'i' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ i = a * b * d * c\n    ~~~~^\n    _\n/tmp/tmplo9klqiq.swift:32:9: warning: initialization\
    \ of immutable value 'j' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let j = a * b * c * a * c\n    ~~~~^\n    _\n/tmp/tmplo9klqiq.swift:33:9:\
    \ warning: initialization of immutable value 'k' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let k = a * b * c * a * b\n    ~~~~^\n\
    \    _\n/tmp/tmplo9klqiq.swift:34:9: warning: initialization of immutable value\
    \ 'l' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let l = a * b * c * a * c * a + a * b * c * a * b * c\n    ~~~~^\n    _\n\
    /tmp/tmplo9klqiq.swift:35:9: warning: initialization of immutable value 'm' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ m = a * b * c * a * b * c * a + a * b * c * a * b * c * b\n    ~~~~^\n    _\n\
    /tmp/tmplo9klqiq.swift:36:9: warning: initialization of immutable value 'n' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ n = a * b * c * a * b * c * b * a + a * b * c * a * b * c * b * c\n    ~~~~^\n\
    \    _\n/tmp/tmplo"
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 63 {\n        return true\n    }\n    if a < 0 || a > 63 {\n     \
    \   return false\n    }\n    if a % 6 == 0 {\n        if a % 3 == 0 {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp8jh1sb1d/tmp8jh1sb1d.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cee27dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cedf74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cedf74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cedf737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jh1sb1d                        0x000055a50756032d <unavailable> + 4909

    5    libc.so.6                          0x00002b8cee469460 __libc_start_main +
    245

    6    tmp8jh1sb1d                        0x000055a50755fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp96o_uy2p/tmp96o_uy2p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42f27dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42f24d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42f24d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42f24d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96o_uy2p                        0x000056308ee1b227 <unavailable> + 4647

    5    libc.so.6                          0x00002b42f29c8460 __libc_start_main +
    245

    6    tmp96o_uy2p                        0x000056308ee1ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a { \n\tcase 1: \n\t\treturn true\n\t\
    case 2: \n\t\treturn false\n\tcase -1: \n\t\treturn true\n\tcase 64: \n\t\treturn\
    \ true\n\tcase 0: \n\t\treturn true\n\tcase 180: \n\t\treturn false\n\tdefault:\
    \ \n\t\tpreconditionFailure(\"Invalid input\")\n\t}\n\treturn false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0uubgaei/tmp0uubgaei.swift:33: Fatal error: Invalid input

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b806abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b803a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b803a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b803a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uubgaei                        0x000055e2b44d3698 <unavailable> + 5784

    5    tmp0uubgaei                        0x000055e2b44d3415 <unavailable> + 5141

    6    libc.so.6                          0x00002b1b80897460 __libc_start_main +
    245

    7    tmp0uubgaei                        0x000055e2b44d2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a % 3 {\n    case 0, 1, 2:\n       \
    \ return true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp5u3micuj/tmp5u3micuj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b979ea84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b979e77bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b979e77b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b979e77a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5u3micuj                        0x000055cd786432b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b979ec70460 __libc_start_main +
    245

    6    tmp5u3micuj                        0x000055cd78642ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tif a < 0 || a % 1 == 0 {\n\t\treturn false\n\t\
    }\n\tlet s = a.pow(3) % 1\n\tif s == 0 || a == 1 || a == -1 || a == 64 || a ==\
    \ 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuz7k0hde.swift:22:12: error: value of type 'Int' has no member\
    \ 'pow'\n        let s = a.pow(3) % 1\n                ~ ^~~\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  assert(a >= 0, \"a must be non-negative\")\n\
    \  let cubeRoot = pow(a, 1.0 / 3.0)\n  return cubeRoot == a || cubeRoot == a *\
    \ a || cubeRoot == a * a * a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8gltj588.swift:20:18: error: cannot find 'pow' in scope\n  let\
    \ cubeRoot = pow(a, 1.0 / 3.0)\n                 ^~~\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp6fg9lg9a/tmp6fg9lg9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf972a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf96f99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf96f99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf96f987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fg9lg9a                        0x000055eb532532b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adf9748e460 __libc_start_main +
    245

    6    tmp6fg9lg9a                        0x000055eb53252ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979836
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 || a % 4 != 0 { return false }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpdspecfud/tmpdspecfud.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab145d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab145a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab145a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab145a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdspecfud                        0x0000561aaf9e2241 <unavailable> + 4673

    5    libc.so.6                          0x00002ab145f7b460 __libc_start_main +
    245

    6    tmpdspecfud                        0x0000561aaf9e1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % Int(floor(sqrt(Double(a)))) == Int(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc4_zwe7o.swift:19:20: error: cannot find 'floor' in scope\n   \
    \ return a % Int(floor(sqrt(Double(a)))) == Int(0)\n                   ^~~~~\n\
    /tmp/tmpc4_zwe7o.swift:19:26: error: cannot find 'sqrt' in scope\n    return a\
    \ % Int(floor(sqrt(Double(a)))) == Int(0)\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let maxCubeRoot = UInt8(floor(sqrt(pow(Float(a),\
    \ 2) + 1)))\n    return a == Int(maxCubeRoot)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmelak7a6.swift:19:29: error: cannot find 'floor' in scope\n   \
    \ let maxCubeRoot = UInt8(floor(sqrt(pow(Float(a), 2) + 1)))\n               \
    \             ^~~~~\n/tmp/tmpmelak7a6.swift:19:35: error: cannot find 'sqrt' in\
    \ scope\n    let maxCubeRoot = UInt8(floor(sqrt(pow(Float(a), 2) + 1)))\n    \
    \                              ^~~~\n/tmp/tmpmelak7a6.swift:19:40: error: cannot\
    \ find 'pow' in scope\n    let maxCubeRoot = UInt8(floor(sqrt(pow(Float(a), 2)\
    \ + 1)))\n                                       ^~~\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var i = 0\n    for _ in 0..<64 {\n        if\
    \ a >= i * i && a <= (i + 1) * i {\n            return true\n        }\n     \
    \   i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp_r992_un/tmp_r992_un.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3912e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3912b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3912b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3912b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r992_un                        0x000055f0d058c317 <unavailable> + 4887

    5    libc.so.6                          0x00002b3913073460 __libc_start_main +
    245

    6    tmp_r992_un                        0x000055f0d058bf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a { // a is Int\n    case 0, 1, 3, 5,\
    \ 7, 9, 11:\n        return true\n    case 12, 16, 20:\n        return true\n\
    \    case 2:\n        return true\n    default:\n        return false\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp8mtzlahc/tmp8mtzlahc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8143624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b814331bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b814331b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b814331a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mtzlahc                        0x0000558223b03227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8143810460 __libc_start_main +
    245

    6    tmp8mtzlahc                        0x0000558223b02e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   var b = Int(a)\n    for _ in 0..<3 {\n        if b&1 != 0 {\n            return\
    \ false\n        }\n        b = b*b\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp4c3nvbu9/tmp4c3nvbu9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc253a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc2509fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc2509f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc2509e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c3nvbu9                        0x0000560ba69643e1 <unavailable> + 5089

    5    libc.so.6                          0x00002acc25594460 __libc_start_main +
    245

    6    tmp4c3nvbu9                        0x0000560ba6964099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  switch a {\n    case 1, 2, 3, 4,\n      5, 6,\
    \ 7, 8,\n      9, 10, 11, 12,\n      13, 14, 15, 16,\n      17, 18, 19, 20,\n\
    \      21, 22, 23, 24:\n      return true\n    default:\n      return false\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp2318aci9/tmp2318aci9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9665fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f96356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f96356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f963557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2318aci9                        0x00005583feed1227 <unavailable> + 4647

    5    libc.so.6                          0x00002b3f9684b460 __libc_start_main +
    245

    6    tmp2318aci9                        0x00005583feed0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a <= 0 {\n        return false\n    }\n\
    \    var b = a\n    repeat {\n        if b <= 0 {\n            return false\n\
    \        }\n        b = b * b % a\n    }\n    while b != a\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7hhaetho/tmp7hhaetho.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3f758fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3f7286b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3f7286988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3f72857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hhaetho                        0x0000561a622fe241 <unavailable> + 4673

    5    libc.so.6                          0x00002af3f777b460 __libc_start_main +
    245

    6    tmp7hhaetho                        0x0000561a622fdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a%a == 0 {\n        return true\n    }\n    if a%a == 1 {\n        return\
    \ true\n    }\n    if a%a == 2 {\n        return true\n    }\n    if a%a == 3\
    \ {\n        return true\n    }\n    if a%a == 4 {\n        return true\n    }\n\
    \    if a%a == 5 {\n        return true\n    }\n    if a%a == 6 {\n        return\
    \ true\n    }\n    if a%a == 7 {\n        return true\n    }\n    if a%a == 8\
    \ {\n        return true\n    }\n    if a%a == 9 {\n        return true\n    }\n\
    \    if a%a == 10 {\n        return true\n    }\n    if a%a == 11 {\n        return\
    \ true\n    }\n    if a%a == 12 {\n        return true\n    }\n    if a%a == 13\
    \ {\n        return true\n    }\n    if a%a == 14 {\n        return true\n   \
    \ }\n    if a%a == 15 {\n        return true\n    }\n    if a%a == 16 {\n    \
    \    return true\n    }\n    if a%a == 17 {\n        return true\n    }\n    if\
    \ a%a == 18 {\n        return true\n    }\n    if a%a == 19 {\n        return\
    \ true\n    }\n    if a%a == 20 {\n        return true\n    }\n    if a%a == 21\
    \ {\n        return true\n    }\n    if a%a == 22 {\n        return true\n   \
    \ }\n    if a%a == 23 {\n        return true\n    }\n    if a%a == 24 {\n    \
    \    return true\n    }\n    if a%a == 25 {\n        return true\n    }\n    if\
    \ a%a == 26 {\n        return true\n    }\n    if a%a == 27 {\n        return\
    \ true\n    }\n    if a%a == 28 {\n        return true\n    }\n    if a%a == 29\
    \ {\n        return true\n    }\n    if a%a == 30 {\n        return true\n   \
    \ }\n    if a%a == 31 {\n        return true\n    }\n    if a%a == 32 {\n    \
    \    return true\n    }\n    if a%a == 33 {\n        return true\n    }\n    if\
    \ a%a == 34 {\n        return true\n    }\n    if a%a == 35 {\n        return\
    \ true\n    }\n    if a%a == 36 {\n        return true\n    }\n    if a%a == 37\
    \ {\n        return true\n    }\n    if a%a == 38 {\n        return true\n   \
    \ }\n    if a%a == 39 {\n        return true\n    }\n    if a%a == 40 {\n    \
    \    return true\n    }\n    if a%a == 41 {\n        return true\n    }\n    if\
    \ a%a == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpyxkmjv87.swift:149:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tif a < 0 || a == 1 {\n\t\treturn false\n\t}\n\
    \tlet max = Int(pow(10, Int(log10(a)) + 1))\n\treturn max == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxnxum9xd.swift:22:16: error: cannot find 'pow' in scope\n     \
    \   let max = Int(pow(10, Int(log10(a)) + 1))\n                      ^~~\n/tmp/tmpxnxum9xd.swift:22:28:\
    \ error: cannot find 'log10' in scope\n        let max = Int(pow(10, Int(log10(a))\
    \ + 1))\n                                  ^~~~~\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return _iscube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxs2rbjzq.swift:19:10: error: cannot find '_iscube' in scope\n \
    \ return _iscube(a)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a%3==0&&a%5==0&&a%7==0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp_d2tyw5r/tmp_d2tyw5r.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ee15bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ee12b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ee12b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ee12b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_d2tyw5r                        0x00005616d49ea241 <unavailable> + 4673

    5    libc.so.6                          0x00002b5ee17a7460 __libc_start_main +
    245

    6    tmp_d2tyw5r                        0x00005616d49e9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  switch a { // @autoclosure (a)\n  case 1, 5,\
    \ 13, 17, 31, 63, 127, 255, 511, 1023, 2047, 4097, 8191, 16383, 32767, 65535,\
    \ 131071, 262143, 524287, 1048573, 2097151, 4194303, 8388607, 16777213, 33554431,\
    \ 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295,\
    \ 8589934591:\n    return true\n  default:\n    return false\n  }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp18uxs3yb/tmp18uxs3yb.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabb374dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabb3444b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabb3444988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabb34437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp18uxs3yb                        0x000055fdb6ae629d <unavailable> + 4765

    5    libc.so.6                          0x00002aabb3939460 __libc_start_main +
    245

    6    tmp18uxs3yb                        0x000055fdb6ae5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tif a < 0 {\n\t\treturn false\n\t}\n\treturn a\
    \ == 0 || a > 0 && a % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp2ovtgy9i/tmp2ovtgy9i.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d0f5c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d0f2b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d0f2b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0f2b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ovtgy9i                        0x000055dd754f7241 <unavailable> + 4673

    5    libc.so.6                          0x00002b3d0f7ae460 __libc_start_main +
    245

    6    tmp2ovtgy9i                        0x000055dd754f6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a > 0 && a < 36 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpdl2danfy/tmpdl2danfy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f70cc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f709b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f709b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f709b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl2danfy                        0x000055e24d5fb227 <unavailable> + 4647

    5    libc.so.6                          0x00002b3f70ead460 __libc_start_main +
    245

    6    tmpdl2danfy                        0x000055e24d5fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    switch a % 3 {\n    case 0, 1, 2:\n       \
    \ return true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp5u3micuj/tmp5u3micuj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b979ea84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b979e77bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b979e77b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b979e77a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5u3micuj                        0x000055cd786432b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b979ec70460 __libc_start_main +
    245

    6    tmp5u3micuj                        0x000055cd78642ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    \n    return a == (a ^ a^a^a^a^a^a^a^a^a^a^a^a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpjfzyx3la/tmpjfzyx3la.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afba20b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afba1dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afba1dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afba1dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfzyx3la                        0x000055b2db610227 <unavailable> + 4647

    5    libc.so.6                          0x00002afba22a1460 __libc_start_main +
    245

    6    tmpjfzyx3la                        0x000055b2db60fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cubed = true\n    for var i = a; i > 0;\
    \ i /= 3 {\n        cubed = cubed && (i % 3 == 0)\n    }\n    return cubed\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ta1m43o.swift:20:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = a; i > 0; i /= 3 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n  return ((a & (a >> 3)) > (a * a >> 6)) || (a\
    \ & (a >> 3) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcxov86lc/tmpcxov86lc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc5f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc5c74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc5c74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc5c737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxov86lc                        0x0000564e03548227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0dc6169460 __libc_start_main +
    245

    6    tmpcxov86lc                        0x0000564e03547e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979839
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n\tswitch a {\n\tcase 1:\n\t\treturn true\n\tcase\
    \ 2:\n\t\treturn false\n\tcase 3:\n\t\treturn true\n\tcase 4:\n\t\treturn true\n\
    \tcase 5:\n\t\treturn true\n\tcase 6:\n\t\treturn true\n\tcase 7:\n\t\treturn\
    \ true\n\tcase 8:\n\t\treturn true\n\tcase 9:\n\t\treturn true\n\tcase 10:\n\t\
    \treturn true\n\tcase 11:\n\t\treturn true\n\tcase 12:\n\t\treturn true\n\tcase\
    \ 13:\n\t\treturn true\n\tcase 14:\n\t\treturn true\n\tcase 15:\n\t\treturn true\n\
    \tcase 16:\n\t\treturn true\n\tcase 17:\n\t\treturn true\n\tcase 18:\n\t\treturn\
    \ true\n\tcase 19:\n\t\treturn true\n\tcase 20:\n\t\treturn true\n\tcase 21:\n\
    \t\treturn true\n\tcase 22:\n\t\treturn true\n\tcase 23:\n\t\treturn true\n\t\
    case 24:\n\t\treturn true\n\tcase 25:\n\t\treturn true\n\tcase 26:\n\t\treturn\
    \ true\n\tcase 27:\n\t\treturn true\n\tcase 28:\n\t\treturn true\n\tcase 29:\n\
    \t\treturn true\n\tcase 30:\n\t\treturn true\n\tcase 31:\n\t\treturn true\n\t\
    case 32:\n\t\treturn true\n\tcase 33:\n\t\treturn true\n\tcase 34:\n\t\treturn\
    \ true\n\tcase 35:\n\t\treturn true\n\tcase 36:\n\t\treturn true\n\tcase 37:\n\
    \t\treturn true\n\tcase 38:\n\t\treturn true\n\tcase 39:\n\t\treturn true\n\t\
    case 40:\n\t\treturn true\n\tcase 41:\n\t\treturn true\n\tcase 42:\n\t\treturn\
    \ true\n\tcase 43:\n\t\treturn true\n\tcase 44:\n\t\treturn true\n\tcase 45:\n\
    \t\treturn true\n\tcase 46:\n\t\treturn true\n\tcase 47:\n\t\treturn true\n\t\
    case 48:\n\t\treturn true\n\tcase 49:\n\t\treturn true\n\tcase 50:\n\t\treturn\
    \ true\n\tcase 51:\n\t\treturn true\n\tcase 52:\n\t\treturn true\n\tcase 53:\n\
    \t\treturn true\n\tcase 54:\n\t\treturn true\n\tcase 55:\n\t\treturn true\n\t\
    case 56:\n\t\treturn true\n\tcase 57:\n\t\treturn true\n\tcase 58:\n\t\treturn\
    \ true\n\tcase 59:\n\t\treturn true\n\tcase 60:\n\t\treturn true\n\tcase 61:\n\
    \t\treturn true\n\tcase 62:\n\t\treturn true\n\tcase 63:\n\t\treturn true\n\t\
    case 64:\n\t\treturn true\n\tcase 65:\n\t\treturn true\n\tcase 66:\n\t\treturn\
    \ true\n\tcase 67:\n\t\treturn \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprcb_xmkn.swift:176:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmprcb_xmkn.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmprcb_xmkn.swift:153:3: error: non-void function should\
    \ return a value\n                return \n                ^\n/tmp/tmprcb_xmkn.swift:19:2:\
    \ error: switch must be exhaustive\n        switch a {\n        ^\n/tmp/tmprcb_xmkn.swift:19:2:\
    \ note: do you want to add a default clause?\n        switch a {\n        ^\n\
    /tmp/tmprcb_xmkn.swift:157:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979837
