language: swift
name: HumanEval_53_add
results:
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 1
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    let z = 0\n\
    \    repeat {\n        z = z * x + y\n        if z > Int.max {\n            return\
    \ Int.max\n        }\n        x += 1\n        y += 1\n    } while z < Int.max\n\
    \    return z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(x: 0, y: 1) ==\
    \ 1)\nassert(add(x: 1, y: 0) == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x:\
    \ 5, y: 7) == 12)\nassert(add(x: 7, y: 5) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpo36kzssa.swift:10:9: error: cannot assign to value: 'z' is a 'let'\
    \ constant\n        z = z * x + y\n        ^\n/tmp/tmpo36kzssa.swift:8:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let z = 0\n    ^~~\n    var\n\
    /tmp/tmpo36kzssa.swift:14:11: error: left side of mutating operator isn't mutable:\
    \ 'x' is a 'let' constant\n        x += 1\n        ~ ^\n/tmp/tmpo36kzssa.swift:15:11:\
    \ error: left side of mutating operator isn't mutable: 'y' is a 'let' constant\n\
    \        y += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    var z = x +\
    \ y\n    return z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(x: 0, y: 1) ==\
    \ 1)\nassert(add(x: 1, y: 0) == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x:\
    \ 5, y: 7) == 12)\nassert(add(x: 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    var result =\
    \ x + y\n    switch result {\n    case 0: result = 0\n    case 1: result = 1\n\
    \    default: break\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0) == 1)\nassert(add(x:\
    \ 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x: 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: -4
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    let a = x +\
    \ y\n    let b = x * y\n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0) == 1)\nassert(add(x: 2, y:\
    \ 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x: 7, y: 5) == 12)"
  status: Exception
  stderr: 'tmpmimcjwn4/tmpmimcjwn4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbadeaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbadba1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbadba1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbadba07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmimcjwn4                        0x0000555da26682b8 <unavailable> + 4792

    5    libc.so.6                          0x00002acbae096460 __libc_start_main +
    245

    6    tmpmimcjwn4                        0x0000555da2667e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return (x +\
    \ y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x:\
    \ 1, y: 0) == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\n\
    assert(add(x: 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824487
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n\treturn x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979230
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>>\
    \ add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n  return x + y\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979181
